{
 "tensorflow_probability": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability._ensure_tf_install": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.__version__"
  ],
  "type": "function"
 },
 "tensorflow_probability.python": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.python.util.all_util.remove_undocumented",
   "tensorflow.python.util.lazy_loader.LazyLoader"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.absolute_value": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.absolute_value.AbsoluteValue": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.absolute_value.AbsoluteValue.__init__": {
  "lineno": 71,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.absolute_value.AbsoluteValue._assertions": {
  "lineno": 105,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_non_negative"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.absolute_value.AbsoluteValue._forward": {
  "lineno": 86,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.abs"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.absolute_value.AbsoluteValue._inverse": {
  "lineno": 89,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.absolute_value.AbsoluteValue._inverse_log_det_jacobian": {
  "lineno": 93,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.dtype_util.base_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.absolute_value.AbsoluteValue._is_injective": {
  "lineno": 101,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.absolute_value_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.absolute_value_test.AbsoluteValueTest": {
  "lineno": 29,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.absolute_value_test.AbsoluteValueTest.testBijectorVersusNumpyRewriteOfBasicFunctionsEventNdims0": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.abs",
   "tensorflow_probability.python.bijectors.AbsoluteValue"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.absolute_value_test.AbsoluteValueTest.testNegativeYRaisesForILDJIfValidateArgs": {
  "lineno": 60,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.AbsoluteValue"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.absolute_value_test.AbsoluteValueTest.testNegativeYRaisesForInverseIfValidateArgs": {
  "lineno": 55,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.AbsoluteValue"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.affine.Affine": {
  "lineno": 39,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.affine.Affine.__init__": {
  "lineno": 95,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.SKIP_DTYPE_CHECKS",
   "tensorflow_probability.python.internal.dtype_util.base_equal",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine.Affine._create_scale_operator": {
  "lineno": 234,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.LinearOperatorLowRankUpdate",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.assert_util.assert_none_equal",
   "tensorflow_probability.python.internal.distribution_util.dimension_size",
   "tensorflow_probability.python.internal.distribution_util.make_tril_scale",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine.Affine._forward": {
  "lineno": 322,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.math.conj",
   "tensorflow_probability.python.internal.dtype_util.is_complex"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine.Affine._forward_log_det_jacobian": {
  "lineno": 352,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine.Affine._inverse": {
  "lineno": 339,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.conj",
   "tensorflow_probability.python.internal.dtype_util.is_complex"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine.Affine._maybe_check_scale": {
  "lineno": 365,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine.Affine.adjoint": {
  "lineno": 317,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine.Affine.scale": {
  "lineno": 312,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine.Affine.shift": {
  "lineno": 307,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine._as_tensor": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator.__init__": {
  "lineno": 69,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.linalg.LinearOperator",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator._forward": {
  "lineno": 126,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator._forward_log_det_jacobian": {
  "lineno": 145,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.python.internal.dtype_util.base_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator._inverse": {
  "lineno": 136,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator._maybe_collect_assertions": {
  "lineno": 156,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator.adjoint": {
  "lineno": 121,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator.scale": {
  "lineno": 116,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator.shift": {
  "lineno": 111,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator_test.AffineLinearOperatorTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator_test.AffineLinearOperatorTest.testDiag": {
  "lineno": 53,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.array",
   "numpy.float32",
   "numpy.log",
   "numpy.sum",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow_probability.python.bijectors.AffineLinearOperator"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator_test.AffineLinearOperatorTest.testIdentity": {
  "lineno": 35,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow_probability.python.bijectors.AffineLinearOperator"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator_test.AffineLinearOperatorTest.testTriL": {
  "lineno": 75,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.array",
   "numpy.diagonal",
   "numpy.expand_dims",
   "numpy.float32",
   "numpy.log",
   "numpy.matmul",
   "numpy.squeeze",
   "numpy.sum",
   "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
   "tensorflow_probability.python.bijectors.AffineLinearOperator"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator_test.AffineLinearOperatorTest.testTriLAdjoint": {
  "lineno": 112,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.array",
   "numpy.diagonal",
   "numpy.float32",
   "numpy.log",
   "numpy.matmul",
   "numpy.newaxis",
   "numpy.sum",
   "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
   "tensorflow_probability.python.bijectors.AffineLinearOperator"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator_test.AffineLinearOperatorTest.testVariableGradient": {
  "lineno": 150,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.bijectors.AffineLinearOperator",
   "tensorflow_probability.python.internal.test_util.jax_disable_variable_test"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.affine_scalar.AffineScalar": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.affine_scalar.AffineScalar.__init__": {
  "lineno": 54,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar.AffineScalar._forward": {
  "lineno": 129,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.identity"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar.AffineScalar._forward_log_det_jacobian": {
  "lineno": 149,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar.AffineScalar._inverse": {
  "lineno": 139,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.identity"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar.AffineScalar._parameter_control_dependencies": {
  "lineno": 160,
  "symbols_in_volume": [
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.assert_util.assert_none_equal",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar.AffineScalar.log_scale": {
  "lineno": 124,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar.AffineScalar.scale": {
  "lineno": 119,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar.AffineScalar.shift": {
  "lineno": 114,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.AffineScalarBijectorTestFloat32": {
  "lineno": 200,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.AffineScalarBijectorTestFloat64": {
  "lineno": 205,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test._AffineScalarBijectorTest": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test._AffineScalarBijectorTest.testImmutableScaleAssertion": {
  "lineno": 179,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.AffineScalar"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test._AffineScalarBijectorTest.testModifiedVariableScaleAssertion": {
  "lineno": 191,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.python.bijectors.AffineScalar"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test._AffineScalarBijectorTest.testNoBatchScalar": {
  "lineno": 56,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow_probability.python.bijectors.AffineScalar"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test._AffineScalarBijectorTest.testNoBatchScalar.dynamic_run": {
  "lineno": 60,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test._AffineScalarBijectorTest.testNoBatchScalar.static_run": {
  "lineno": 57,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test._AffineScalarBijectorTest.testOneBatchScalarViaIdentityUserProvidesScaleOnly": {
  "lineno": 93,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow_probability.python.bijectors.AffineScalar"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test._AffineScalarBijectorTest.testOneBatchScalarViaIdentityUserProvidesScaleOnly.dynamic_run": {
  "lineno": 97,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test._AffineScalarBijectorTest.testOneBatchScalarViaIdentityUserProvidesScaleOnly.static_run": {
  "lineno": 94,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test._AffineScalarBijectorTest.testOneBatchScalarViaIdentityUserProvidesShiftOnly": {
  "lineno": 74,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.AffineScalar"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test._AffineScalarBijectorTest.testOneBatchScalarViaIdentityUserProvidesShiftOnly.dynamic_run": {
  "lineno": 78,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test._AffineScalarBijectorTest.testOneBatchScalarViaIdentityUserProvidesShiftOnly.static_run": {
  "lineno": 75,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test._AffineScalarBijectorTest.testProperties": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.AffineScalar"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test._AffineScalarBijectorTest.testScalarCongruency": {
  "lineno": 152,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.AffineScalar",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test._AffineScalarBijectorTest.testScalarCongruencyLogScale": {
  "lineno": 160,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow_probability.python.bijectors.AffineScalar",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test._AffineScalarBijectorTest.testTinyScale": {
  "lineno": 42,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.exp",
   "tensorflow_probability.python.bijectors.AffineScalar"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test._AffineScalarBijectorTest.testTwoBatchScalarIdentityViaIdentity": {
  "lineno": 112,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.AffineScalar"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test._AffineScalarBijectorTest.testTwoBatchScalarIdentityViaIdentity.dynamic_run": {
  "lineno": 116,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test._AffineScalarBijectorTest.testTwoBatchScalarIdentityViaIdentity.static_run": {
  "lineno": 113,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test._AffineScalarBijectorTest.testTwoBatchScalarIdentityViaScale": {
  "lineno": 131,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow_probability.python.bijectors.AffineScalar"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test._AffineScalarBijectorTest.testTwoBatchScalarIdentityViaScale.dynamic_run": {
  "lineno": 135,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test._AffineScalarBijectorTest.testTwoBatchScalarIdentityViaScale.static_run": {
  "lineno": 132,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test._AffineScalarBijectorTest.testVariableGradients": {
  "lineno": 169,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.bijectors.AffineScalar",
   "tensorflow_probability.python.internal.test_util.jax_disable_variable_test"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test._AffineScalarBijectorTest.testVariableScaleAssertion": {
  "lineno": 184,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.bijectors.AffineScalar"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest._makeScale": {
  "lineno": 423,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.matmul",
   "numpy.ones_like",
   "numpy.swapaxes"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest._matrix_diag": {
  "lineno": 468,
  "symbols_in_volume": [
   "numpy.diag",
   "numpy.prod",
   "numpy.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest._testLegalInputs": {
  "lineno": 477,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.expand_dims",
   "numpy.linalg.det",
   "numpy.linalg.solve",
   "numpy.log",
   "numpy.matmul",
   "numpy.ones",
   "numpy.reshape",
   "numpy.squeeze",
   "tensorflow_probability.python.bijectors.Affine"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest._testLegalInputs._powerset": {
  "lineno": 479,
  "symbols_in_volume": [
   "itertools.chain.from_iterable",
   "itertools.combinations"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest._testScaledIdentityComplexAdjoint": {
  "lineno": 613,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.array",
   "numpy.complex",
   "numpy.conj",
   "numpy.log",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.python.bijectors.Affine"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testBatchMultivariateDiag": {
  "lineno": 150,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow_probability.python.bijectors.Affine"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testBatchMultivariateDiag.dynamic_run": {
  "lineno": 154,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testBatchMultivariateDiag.static_run": {
  "lineno": 151,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testBatchMultivariateFullDynamic": {
  "lineno": 171,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.log",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.bijectors.Affine"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testBatchMultivariateIdentity": {
  "lineno": 129,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow_probability.python.bijectors.Affine"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testBatchMultivariateIdentity.dynamic_run": {
  "lineno": 133,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testBatchMultivariateIdentity.static_run": {
  "lineno": 130,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testDiagWithTriL": {
  "lineno": 233,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow_probability.python.bijectors.Affine"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testDiagWithTriL.dynamic_run": {
  "lineno": 237,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testDiagWithTriL.static_run": {
  "lineno": 234,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testDiagWithVDVTUpdate": {
  "lineno": 312,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow_probability.python.bijectors.Affine"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testDiagWithVDVTUpdate.dynamic_run": {
  "lineno": 316,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testDiagWithVDVTUpdate.static_run": {
  "lineno": 313,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testIdentityAndDiagWithTriL": {
  "lineno": 254,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow_probability.python.bijectors.Affine"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testIdentityAndDiagWithTriL.dynamic_run": {
  "lineno": 258,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testIdentityAndDiagWithTriL.static_run": {
  "lineno": 255,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testIdentityWithDiagUpdate": {
  "lineno": 189,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow_probability.python.bijectors.Affine"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testIdentityWithDiagUpdate.dynamic_run": {
  "lineno": 193,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testIdentityWithDiagUpdate.static_run": {
  "lineno": 190,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testIdentityWithTriL": {
  "lineno": 210,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow_probability.python.bijectors.Affine"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testIdentityWithTriL.dynamic_run": {
  "lineno": 214,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testIdentityWithTriL.static_run": {
  "lineno": 211,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testIdentityWithVDVTUpdate": {
  "lineno": 278,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow_probability.python.bijectors.Affine"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testIdentityWithVDVTUpdate.dynamic_run": {
  "lineno": 282,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testIdentityWithVDVTUpdate.static_run": {
  "lineno": 279,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testLegalInputs": {
  "lineno": 528,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testLegalInputsWithBatch": {
  "lineno": 543,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testNegativeDetTrilPlusVDVT": {
  "lineno": 558,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testNoBatchMultivariateDiag": {
  "lineno": 72,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow_probability.python.bijectors.Affine"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testNoBatchMultivariateDiag.dynamic_run": {
  "lineno": 76,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testNoBatchMultivariateDiag.static_run": {
  "lineno": 73,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testNoBatchMultivariateFullDynamic": {
  "lineno": 112,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.log",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.bijectors.Affine"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testNoBatchMultivariateIdentity": {
  "lineno": 43,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Affine"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testNoBatchMultivariateIdentity.dynamic_run": {
  "lineno": 47,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testNoBatchMultivariateIdentity.static_run": {
  "lineno": 44,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testNoBatchMultivariateRaisesWhenSingular": {
  "lineno": 413,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Affine"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testProperties": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Affine"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testScaledIdentityComplexAdjointDynamic": {
  "lineno": 639,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testScaledIdentityComplexAdjointStatic": {
  "lineno": 642,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testTriLWithVDVTUpdate": {
  "lineno": 345,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow_probability.python.bijectors.Affine"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testTriLWithVDVTUpdate.dynamic_run": {
  "lineno": 349,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testTriLWithVDVTUpdate.static_run": {
  "lineno": 346,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testTriLWithVDVTUpdateAdjoint": {
  "lineno": 574,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.diagonal",
   "numpy.float32",
   "numpy.linalg.solve",
   "numpy.log",
   "numpy.matmul",
   "numpy.prod",
   "tensorflow_probability.python.bijectors.Affine"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testTriLWithVDVTUpdateAdjoint.dynamic_run": {
  "lineno": 578,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testTriLWithVDVTUpdateAdjoint.static_run": {
  "lineno": 575,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testTriLWithVDVTUpdateNoDiagonal": {
  "lineno": 379,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow_probability.python.bijectors.Affine"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testTriLWithVDVTUpdateNoDiagonal.dynamic_run": {
  "lineno": 383,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testTriLWithVDVTUpdateNoDiagonal.static_run": {
  "lineno": 380,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.BatchNormalization": {
  "lineno": 72,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.BatchNormalization.__init__": {
  "lineno": 127,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.layers.BatchNormalization",
   "tensorflow.compat.v2.nn.relu"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.BatchNormalization._de_normalize": {
  "lineno": 209,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.BatchNormalization._forward": {
  "lineno": 221,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.BatchNormalization._forward_log_det_jacobian": {
  "lineno": 227,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.BatchNormalization._get_broadcast_fn": {
  "lineno": 191,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.BatchNormalization._get_broadcast_fn._broadcast": {
  "lineno": 198,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.BatchNormalization._inverse": {
  "lineno": 224,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.BatchNormalization._inverse_log_det_jacobian": {
  "lineno": 231,
  "symbols_in_volume": [
   "tensorflow.compat.v2.logical_not",
   "tensorflow.compat.v2.logical_or",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.nn.moments",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.BatchNormalization._normalize": {
  "lineno": 206,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.BatchNormalization._validate_bn_layer": {
  "lineno": 165,
  "symbols_in_volume": [
   "tensorflow.compat.v1.layers.BatchNormalization",
   "tensorflow.compat.v2.keras.layers.BatchNormalization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization._undo_batch_normalization": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.sqrt"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.batch_normalization_test.BatchNormTest": {
  "lineno": 36,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.VectorDistributionTestHelpers",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.batch_normalization_test.BatchNormTest._reduction_axes": {
  "lineno": 41,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization_test.BatchNormTest.testForwardInverse": {
  "lineno": 52,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.arange",
   "numpy.float32",
   "numpy.log",
   "numpy.mean",
   "numpy.squeeze",
   "numpy.sum",
   "numpy.var",
   "numpy.zeros_like",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.keras.layers.BatchNormalization",
   "tensorflow_probability.python.bijectors.BatchNormalization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization_test.BatchNormTest.testInvertMutuallyConsistent": {
  "lineno": 203,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "tensorflow.compat.v1.layers.BatchNormalization",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.keras.layers.BatchNormalization",
   "tensorflow_probability.python.bijectors.BatchNormalization",
   "tensorflow_probability.python.bijectors.Invert",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.TransformedDistribution"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization_test.BatchNormTest.testLogProb": {
  "lineno": 144,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "numpy.float32",
   "numpy.prod",
   "numpy.zeros",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v1.layers.BatchNormalization",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.keras.layers.BatchNormalization",
   "tensorflow_probability.python.bijectors.BatchNormalization",
   "tensorflow_probability.python.bijectors.Reshape",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.distributions.TransformedDistribution"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization_test.BatchNormTest.testMutuallyConsistent": {
  "lineno": 180,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "tensorflow.compat.v1.layers.BatchNormalization",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.keras.layers.BatchNormalization",
   "tensorflow_probability.python.bijectors.BatchNormalization",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.TransformedDistribution"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization_test.BatchNormTest.testTheoreticalFldj": {
  "lineno": 249,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.uniform",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.bijectors.BatchNormalization",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite",
   "tensorflow_probability.python.bijectors.bijector_test_util.get_fldj_theoretical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization_test.BatchNormTest.testWithKeras": {
  "lineno": 226,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.normal",
   "numpy.zeros",
   "tensorflow.compat.v2.keras.Input",
   "tensorflow.compat.v2.keras.Model",
   "tensorflow_probability.python.bijectors.BatchNormalization",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.TransformedDistribution"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector": {
  "lineno": 212,
  "symbols_in_volume": [
   "abc.ABCMeta",
   "six.add_metaclass",
   "tensorflow.compat.v2.Module",
   "tensorflow.compat.v2.Module._TF_MODULE_IGNORED_PROPERTIES.union"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.__call__": {
  "lineno": 739,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.chain.Chain",
   "tensorflow_probability.python.distributions.distribution.Distribution",
   "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.__init__": {
  "lineno": 578,
  "symbols_in_volume": [
   "abc.abstractmethod",
   "tensorflow.compat.v2.group",
   "tensorflow.compat.v2.is_tensor",
   "tensorflow_probability.python.internal.name_util.camel_to_lower_snake",
   "tensorflow_probability.python.internal.name_util.get_name_scope_name",
   "tensorflow_probability.python.internal.name_util.strip_invalid_chars"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._cache_by_x": {
  "lineno": 1307,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._cache_by_y": {
  "lineno": 1317,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._cache_update": {
  "lineno": 1327,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._call_forward": {
  "lineno": 926,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._call_forward_log_det_jacobian": {
  "lineno": 1212,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._call_inverse": {
  "lineno": 968,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._call_inverse_log_det_jacobian": {
  "lineno": 1134,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._check_valid_event_ndims": {
  "lineno": 1370,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow_probability.python.internal.assert_util.assert_greater_equal",
   "tensorflow_probability.python.internal.assert_util.assert_rank",
   "tensorflow_probability.python.internal.dtype_util.is_integer",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._compute_inverse_log_det_jacobian_with_caching": {
  "lineno": 1008,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._compute_unreduced_ildj_with_caching": {
  "lineno": 1089,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._forward": {
  "lineno": 922,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._forward_event_shape": {
  "lineno": 853,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._forward_event_shape_tensor": {
  "lineno": 826,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._get_event_reduce_dims": {
  "lineno": 1360,
  "symbols_in_volume": [
   "tensorflow.compat.v2.range"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._inverse": {
  "lineno": 964,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._inverse_event_shape": {
  "lineno": 901,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._inverse_event_shape_tensor": {
  "lineno": 874,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._is_injective": {
  "lineno": 708,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._lookup": {
  "lineno": 1334,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._maybe_assert_dtype": {
  "lineno": 1298,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.dtype_util.base_equal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._maybe_get_static_event_ndims": {
  "lineno": 1404,
  "symbols_in_volume": [
   "numpy.generic",
   "numpy.int32",
   "numpy.int64",
   "numpy.ndarray",
   "tensorflow_probability.python.internal.distribution_util.maybe_get_static_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._name_and_control_scope": {
  "lineno": 1282,
  "symbols_in_volume": [
   "contextlib.contextmanager",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._parameter_control_dependencies": {
  "lineno": 1420,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._reduce_jacobian_det_over_event": {
  "lineno": 1346,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.dtype": {
  "lineno": 729,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.forward": {
  "lineno": 946,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.forward_event_shape": {
  "lineno": 858,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.forward_event_shape_tensor": {
  "lineno": 831,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.forward_log_det_jacobian": {
  "lineno": 1252,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.forward_min_event_ndims": {
  "lineno": 686,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.graph_parents": {
  "lineno": 681,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.inverse": {
  "lineno": 988,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.inverse_event_shape": {
  "lineno": 906,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.inverse_event_shape_tensor": {
  "lineno": 879,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.inverse_log_det_jacobian": {
  "lineno": 1177,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.inverse_min_event_ndims": {
  "lineno": 691,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.is_constant_jacobian": {
  "lineno": 696,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.name": {
  "lineno": 734,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.validate_args": {
  "lineno": 724,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.HashableWeakRef": {
  "lineno": 178,
  "symbols_in_volume": [
   "weakref.ref"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector.HashableWeakRef.__eq__": {
  "lineno": 199,
  "symbols_in_volume": [
   "numpy.generic",
   "numpy.ndarray"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.HashableWeakRef.__hash__": {
  "lineno": 181,
  "symbols_in_volume": [
   "numpy.generic",
   "numpy.ndarray"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.HashableWeakRef.__repr__": {
  "lineno": 193,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.HashableWeakRef.__str__": {
  "lineno": 196,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.WeakKeyDefaultDict": {
  "lineno": 135,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector.WeakKeyDefaultDict.__contains__": {
  "lineno": 163,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.WeakKeyDefaultDict.__getitem__": {
  "lineno": 152,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.WeakKeyDefaultDict.__missing__": {
  "lineno": 157,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.WeakKeyDefaultDict.__setitem__": {
  "lineno": 168,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.WeakKeyDefaultDict.setdefault": {
  "lineno": 174,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.WeakKeyDefaultDict.update": {
  "lineno": 171,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector._Mapping": {
  "lineno": 45,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector._Mapping.__new__": {
  "lineno": 49,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector._Mapping._deep_tuple": {
  "lineno": 123,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector._Mapping._merge": {
  "lineno": 107,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector._Mapping._merge.generic_to_array": {
  "lineno": 109,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.generic",
   "numpy.ndarray"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector._Mapping.merge": {
  "lineno": 69,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector._Mapping.remove": {
  "lineno": 99,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector._Mapping.subkey": {
  "lineno": 64,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_composition_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.bijectors",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.bijector_composition_test.BijectorCompositionTest": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_composition_test.BijectorCompositionTest.testComposeFromChainBijector": {
  "lineno": 38,
  "symbols_in_volume": [
   "functools.reduce",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.sigmoid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_composition_test.BijectorCompositionTest.testComposeFromNonTransformedDistribution": {
  "lineno": 66,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_composition_test.BijectorCompositionTest.testComposeFromTDSubclassWithAlternateCtorArgs": {
  "lineno": 62,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_composition_test.BijectorCompositionTest.testComposeFromTensor": {
  "lineno": 75,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_composition_test.BijectorCompositionTest.testComposeFromTransformedDistribution": {
  "lineno": 51,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_composition_test.BijectorCompositionTest.testHandlesKwargs": {
  "lineno": 81,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_properties_test": {
  "lineno": null,
  "symbols_in_volume": [
   "absl.flags.DEFINE_enum",
   "absl.flags.FLAGS",
   "tensorflow.compat.v2.enable_v2_behavior",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.linalg.set_diag",
   "tensorflow.compat.v2.math.top_k",
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.python.bijectors.hypothesis_testlib.spline_bin_size_constraint",
   "tensorflow_probability.python.bijectors.hypothesis_testlib.spline_slope_constraint",
   "tensorflow_probability.python.internal.hypothesis_testlib.Support",
   "tensorflow_probability.python.internal.hypothesis_testlib.softplus_plus_eps"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.bijector_properties_test.BijectorPropertiesTest": {
  "lineno": 310,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_properties_test.BijectorPropertiesTest.testBijector": {
  "lineno": 313,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "hypothesis.given",
   "hypothesis.strategies.data",
   "hypothesis.strategies.integers",
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.python.bijectors",
   "tensorflow_probability.python.internal.hypothesis_testlib.assert_no_excessive_var_usage",
   "tensorflow_probability.python.internal.hypothesis_testlib.broadcast_compatible_shape",
   "tensorflow_probability.python.internal.hypothesis_testlib.tfp_hp_settings",
   "tensorflow_probability.python.internal.tensorshape_util.concatenate"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_properties_test.assert_no_none_grad": {
  "lineno": 288,
  "symbols_in_volume": [
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.int64",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_properties_test.bijectors": {
  "lineno": 131,
  "symbols_in_volume": [
   "hypothesis.strategies.composite",
   "hypothesis.strategies.floats",
   "hypothesis.strategies.integers",
   "hypothesis.strategies.sampled_from",
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.bijectors",
   "tensorflow_probability.python.bijectors.AffineScalar",
   "tensorflow_probability.python.bijectors.DiscreteCosineTransform",
   "tensorflow_probability.python.bijectors.Inline",
   "tensorflow_probability.python.bijectors.Invert",
   "tensorflow_probability.python.bijectors.PowerTransform",
   "tensorflow_probability.python.internal.hypothesis_testlib.shapes"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_properties_test.broadcasting_params": {
  "lineno": 109,
  "symbols_in_volume": [
   "hypothesis.strategies.composite",
   "tensorflow_probability.python.internal.hypothesis_testlib.broadcasting_params"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_properties_test.broadcasting_params._constraint": {
  "lineno": 118,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_properties_test.codomain_tensors": {
  "lineno": 260,
  "symbols_in_volume": [
   "hypothesis.strategies.composite",
   "tensorflow_probability.python.bijectors.hypothesis_testlib.bijector_supports",
   "tensorflow_probability.python.internal.hypothesis_testlib.constrained_tensors",
   "tensorflow_probability.python.internal.hypothesis_testlib.constrainer",
   "tensorflow_probability.python.internal.hypothesis_testlib.shapes"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_properties_test.constrain_forward_shape": {
  "lineno": 209,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.hypothesis_testlib.bijector_supports",
   "tensorflow_probability.python.internal.hypothesis_testlib.Support.VECTOR_SIZE_TRIANGULAR"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_properties_test.constrain_inverse_shape": {
  "lineno": 222,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_properties_test.constraint_for": {
  "lineno": 454,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.hypothesis_testlib.identity_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_properties_test.domain_tensors": {
  "lineno": 229,
  "symbols_in_volume": [
   "hypothesis.strategies.composite",
   "tensorflow_probability.python.bijectors.PowerTransform",
   "tensorflow_probability.python.bijectors.hypothesis_testlib.bijector_supports",
   "tensorflow_probability.python.bijectors.hypothesis_testlib.power_transform_constraint",
   "tensorflow_probability.python.internal.hypothesis_testlib.constrained_tensors",
   "tensorflow_probability.python.internal.hypothesis_testlib.constrainer",
   "tensorflow_probability.python.internal.hypothesis_testlib.shapes"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_properties_test.ensure_nonzero": {
  "lineno": 422,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_properties_test.is_invert": {
  "lineno": 99,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Invert"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BaseBijectorTest": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BaseBijectorTest.testDefaults": {
  "lineno": 45,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BaseBijectorTest.testDefaults._BareBonesBijector": {
  "lineno": 47,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BaseBijectorTest.testDefaults._BareBonesBijector.__init__": {
  "lineno": 50,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BaseBijectorTest.testIsAbstract": {
  "lineno": 39,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Bijector"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorCachingTest": {
  "lineno": 199,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorCachingTest.testCachingGarbageCollection": {
  "lineno": 248,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.zeros",
   "weakref.ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorCachingTest.testCachingOfForwardResults": {
  "lineno": 202,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorCachingTest.testCachingOfInverseResults": {
  "lineno": 225,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorLDJCachingTest": {
  "lineno": 334,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorLDJCachingTest.testShapeCachingIssue": {
  "lineno": 336,
  "symbols_in_volume": [
   "numpy.random.uniform",
   "tensorflow.compat.v1.placeholder",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorReduceEventDimsTest": {
  "lineno": 261,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorReduceEventDimsTest.testHandlesNonStaticEventNdims": {
  "lineno": 323,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorReduceEventDimsTest.testReduceEventNdimsForward": {
  "lineno": 265,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorReduceEventDimsTest.testReduceEventNdimsForwardConstJacobian": {
  "lineno": 303,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorReduceEventDimsTest.testReduceEventNdimsForwardRaiseError": {
  "lineno": 278,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorReduceEventDimsTest.testReduceEventNdimsInverse": {
  "lineno": 284,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorReduceEventDimsTest.testReduceEventNdimsInverseConstJacobian": {
  "lineno": 313,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorReduceEventDimsTest.testReduceEventNdimsInverseRaiseError": {
  "lineno": 297,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorTestEventNdims": {
  "lineno": 166,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorTestEventNdims.assertRaisesError": {
  "lineno": 169,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorTestEventNdims.testBijectorArrayEventNdims": {
  "lineno": 179,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorTestEventNdims.testBijectorDynamicEventNdims": {
  "lineno": 186,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorTestEventNdims.testBijectorNonIntegerEventNdims": {
  "lineno": 172,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.ConditionalBijectorTest": {
  "lineno": 430,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.ConditionalBijectorTest.testConditionalBijector": {
  "lineno": 433,
  "symbols_in_volume": [
   "mock.ANY",
   "mock.patch.object",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.ConditionalBijectorTest.testNestedCondition": {
  "lineno": 450,
  "symbols_in_volume": [
   "mock.ANY",
   "mock.patch.object",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.ConstantJacobian": {
  "lineno": 149,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.ConstantJacobian.__init__": {
  "lineno": 152,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.ConstantJacobian._forward_log_det_jacobian": {
  "lineno": 162,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.ConstantJacobian._inverse_log_det_jacobian": {
  "lineno": 159,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.ExpOnlyJacobian": {
  "lineno": 132,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.ExpOnlyJacobian.__init__": {
  "lineno": 135,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.ExpOnlyJacobian._forward_log_det_jacobian": {
  "lineno": 145,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.ExpOnlyJacobian._inverse_log_det_jacobian": {
  "lineno": 142,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.ForwardOnlyBijector": {
  "lineno": 92,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.ForwardOnlyBijector.__init__": {
  "lineno": 95,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.ForwardOnlyBijector._forward": {
  "lineno": 105,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.ForwardOnlyBijector._forward_log_det_jacobian": {
  "lineno": 108,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.IntentionallyMissingError": {
  "lineno": 88,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.InverseOnlyBijector": {
  "lineno": 112,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.InverseOnlyBijector.__init__": {
  "lineno": 115,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.InverseOnlyBijector._inverse": {
  "lineno": 125,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.InverseOnlyBijector._inverse_log_det_jacobian": {
  "lineno": 128,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.NumpyArrayCaching": {
  "lineno": 354,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.NumpyArrayCaching.test_caches": {
  "lineno": 357,
  "symbols_in_volume": [
   "mock",
   "mock.patch.object",
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "numpy.ndarray",
   "tensorflow.compat.v2",
   "tensorflow.compat.v2.math",
   "tensorflow_probability.python.bijectors.Exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.TfModuleTest": {
  "lineno": 390,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.TfModuleTest.test_gradient": {
  "lineno": 399,
  "symbols_in_volume": [
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.TfModuleTest.test_variable_tracking": {
  "lineno": 393,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Module",
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test._ConditionalBijector": {
  "lineno": 409,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test._ConditionalBijector.__init__": {
  "lineno": 411,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test._ConditionalBijector._forward_log_det_jacobian": {
  "lineno": 424,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test._ConditionalBijector._inverse_log_det_jacobian": {
  "lineno": 421,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test_util": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite": {
  "lineno": 174,
  "symbols_in_volume": [
   "numpy.testing.assert_allclose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test_util.assert_finite": {
  "lineno": 40,
  "symbols_in_volume": [
   "numpy.isfinite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency": {
  "lineno": 60,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "numpy.reciprocal",
   "numpy.testing.assert_allclose",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.python.distributions.uniform.Uniform",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.internal.test_util.test_seed_stream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test_util.assert_strictly_decreasing": {
  "lineno": 49,
  "symbols_in_volume": [
   "numpy.diff",
   "numpy.testing.assert_array_less"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test_util.assert_strictly_increasing": {
  "lineno": 45,
  "symbols_in_volume": [
   "numpy.diff",
   "numpy.testing.assert_array_less"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test_util.assert_strictly_monotonic": {
  "lineno": 53,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test_util.get_fldj_theoretical": {
  "lineno": 247,
  "symbols_in_volume": [
   "absl.logging.vlog",
   "functools.partial",
   "numpy.prod",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.linalg.slogdet",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.reshape",
   "tensorflow_probability.python.bijectors.reshape.Reshape",
   "tensorflow_probability.python.internal.tensorshape_util.concatenate",
   "tensorflow_probability.python.internal.tensorshape_util.rank",
   "tensorflow_probability.python.math.gradient.batch_jacobian"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test_util.get_fldj_theoretical.f": {
  "lineno": 303,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reshape",
   "tensorflow_probability.python.internal.tensorshape_util.concatenate"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test_util.get_fldj_theoretical.f_unconstrained": {
  "lineno": 312,
  "symbols_in_volume": [
   "numpy.prod",
   "tensorflow.compat.v2.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.blockwise.Blockwise": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.blockwise.Blockwise.__init__": {
  "lineno": 56,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.bijectors.bijector",
   "tensorflow_probability.python.bijectors.bijector.forward_min_event_ndims",
   "tensorflow_probability.python.bijectors.bijector.inverse_min_event_ndims"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise.Blockwise._forward": {
  "lineno": 123,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.split",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise.Blockwise._forward_log_det_jacobian": {
  "lineno": 137,
  "symbols_in_volume": [
   "tensorflow.compat.v2.split"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise.Blockwise._inverse": {
  "lineno": 130,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.split",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise.Blockwise._inverse_log_det_jacobian": {
  "lineno": 145,
  "symbols_in_volume": [
   "tensorflow.compat.v2.split"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise.Blockwise.bijectors": {
  "lineno": 115,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise.Blockwise.block_sizes": {
  "lineno": 119,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise._validate_block_sizes": {
  "lineno": 154,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.size",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
   "tensorflow_probability.python.internal.tensorshape_util.num_elements",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.BlockwiseBijectorTest": {
  "lineno": 34,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.BlockwiseBijectorTest.testBijectiveAndFinite": {
  "lineno": 103,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.python.bijectors.Affine",
   "tensorflow_probability.python.bijectors.Blockwise",
   "tensorflow_probability.python.bijectors.Exp",
   "tensorflow_probability.python.bijectors.Softplus",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.BlockwiseBijectorTest.testExplicitBlocks": {
  "lineno": 37,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.tile",
   "tensorflow_probability.python.bijectors.Affine",
   "tensorflow_probability.python.bijectors.Blockwise",
   "tensorflow_probability.python.bijectors.Exp",
   "tensorflow_probability.python.bijectors.Softplus",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.BlockwiseBijectorTest.testImplicitBlocks": {
  "lineno": 121,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Affine",
   "tensorflow_probability.python.bijectors.Blockwise",
   "tensorflow_probability.python.bijectors.Exp",
   "tensorflow_probability.python.bijectors.Softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.BlockwiseBijectorTest.testName": {
  "lineno": 128,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Affine",
   "tensorflow_probability.python.bijectors.Blockwise",
   "tensorflow_probability.python.bijectors.Exp",
   "tensorflow_probability.python.bijectors.Softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.BlockwiseBijectorTest.testNameOneBijector": {
  "lineno": 136,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Blockwise",
   "tensorflow_probability.python.bijectors.Exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.BlockwiseBijectorTest.testRaisesBadBijectors": {
  "lineno": 145,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Blockwise",
   "tensorflow_probability.python.bijectors.Reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.BlockwiseBijectorTest.testRaisesBadBlocks": {
  "lineno": 155,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Blockwise",
   "tensorflow_probability.python.bijectors.Exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.BlockwiseBijectorTest.testRaisesBadBlocksDynamic": {
  "lineno": 163,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.errors.InvalidArgumentError",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.bijectors.Blockwise",
   "tensorflow_probability.python.bijectors.Exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.BlockwiseBijectorTest.testRaisesEmptyBijectors": {
  "lineno": 141,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Blockwise"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete.__init__": {
  "lineno": 51,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete._forward": {
  "lineno": 74,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.size",
   "tensorflow_probability.python.internal.assert_util.assert_equal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete._inverse": {
  "lineno": 89,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.argmin",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.gather_nd",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.maximum",
   "tensorflow.compat.v2.minimum",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.searchsorted",
   "tensorflow.compat.v2.size",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.python.internal.assert_util.assert_near"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete._inverse_log_det_jacobian": {
  "lineno": 118,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete._parameter_control_dependencies": {
  "lineno": 125,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete.map_values": {
  "lineno": 121,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete._maybe_check_valid_map_values": {
  "lineno": 129,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.is_strictly_increasing",
   "tensorflow.compat.v2.size",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.assert_util.assert_greater",
   "tensorflow_probability.python.internal.assert_util.assert_rank",
   "tensorflow_probability.python.internal.tensorshape_util.num_elements",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.CategoricalToDiscreteTest": {
  "lineno": 31,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.CategoricalToDiscreteTest.testBijectiveAndFinite16bit": {
  "lineno": 96,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.float16",
   "numpy.int32",
   "numpy.logspace",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite",
   "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.CategoricalToDiscreteTest.testBijectiveAndFinite32bit": {
  "lineno": 89,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.float32",
   "numpy.int32",
   "numpy.logspace",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite",
   "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.CategoricalToDiscreteTest.testBijectorForward": {
  "lineno": 54,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.CategoricalToDiscreteTest.testBijectorForwardOutOfBoundIndicesRaises": {
  "lineno": 61,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.CategoricalToDiscreteTest.testBijectorInverse": {
  "lineno": 67,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.CategoricalToDiscreteTest.testBijectorInverseValueNotFoundRaises": {
  "lineno": 75,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.CategoricalToDiscreteTest.testInverseLogDetJacobian": {
  "lineno": 81,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.CategoricalToDiscreteTest.testMapValuesRankNotEqualToOneRaises": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.CategoricalToDiscreteTest.testMapValuesSizeZeroRaises": {
  "lineno": 47,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.CategoricalToDiscreteTest.testModifiedMapValuesIncreasingAssertion": {
  "lineno": 122,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.CategoricalToDiscreteTest.testNonVariableGradients": {
  "lineno": 112,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.CategoricalToDiscreteTest.testUnsortedValuesRaises": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.CategoricalToDiscreteTest.testVariableGradients": {
  "lineno": 103,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.chain.Chain": {
  "lineno": 110,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.chain.Chain.__init__": {
  "lineno": 145,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain.Chain._forward": {
  "lineno": 267,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain.Chain._forward_event_shape": {
  "lineno": 209,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain.Chain._forward_event_shape_tensor": {
  "lineno": 213,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain.Chain._forward_log_det_jacobian": {
  "lineno": 272,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size",
   "tensorflow_probability.python.internal.distribution_util.maybe_get_static_value",
   "tensorflow_probability.python.internal.dtype_util.base_dtype",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain.Chain._inverse": {
  "lineno": 225,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain.Chain._inverse_event_shape": {
  "lineno": 217,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain.Chain._inverse_event_shape_tensor": {
  "lineno": 221,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain.Chain._inverse_log_det_jacobian": {
  "lineno": 230,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size",
   "tensorflow_probability.python.internal.distribution_util.maybe_get_static_value",
   "tensorflow_probability.python.internal.dtype_util.base_dtype",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain.Chain._shape_helper": {
  "lineno": 199,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain.Chain.bijectors": {
  "lineno": 195,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain._compute_min_event_ndims": {
  "lineno": 38,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain._use_static_shape": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest": {
  "lineno": 44,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testBijector": {
  "lineno": 48,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.exp",
   "numpy.log",
   "numpy.sum",
   "tensorflow_probability.python.bijectors.Chain",
   "tensorflow_probability.python.bijectors.Exp",
   "tensorflow_probability.python.bijectors.Softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testBijectorIdentity": {
  "lineno": 62,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow_probability.python.bijectors.Chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testChainAffineExp": {
  "lineno": 175,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.log",
   "numpy.sum",
   "tensorflow_probability.python.bijectors.Affine",
   "tensorflow_probability.python.bijectors.Chain",
   "tensorflow_probability.python.bijectors.Exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testChainDynamicToStatic": {
  "lineno": 198,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.bijectors.Chain",
   "tensorflow_probability.python.bijectors.Inline",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testChainDynamicToStatic.ldj": {
  "lineno": 209,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testChainDynamicToStatic.xform_dynamic": {
  "lineno": 202,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testChainDynamicToStatic.xform_static": {
  "lineno": 205,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testChainExpAffine": {
  "lineno": 160,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.log",
   "numpy.sum",
   "tensorflow_probability.python.bijectors.Affine",
   "tensorflow_probability.python.bijectors.Chain",
   "tensorflow_probability.python.bijectors.Exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testChainIldjWithPlaceholder": {
  "lineno": 190,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.zeros",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.bijectors.Chain",
   "tensorflow_probability.python.bijectors.Exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testMinEventNdimsChain": {
  "lineno": 97,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Affine",
   "tensorflow_probability.python.bijectors.Chain",
   "tensorflow_probability.python.bijectors.Exp",
   "tensorflow_probability.python.bijectors.Softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testMinEventNdimsShapeChangingAddDims": {
  "lineno": 118,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Affine",
   "tensorflow_probability.python.bijectors.Chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testMinEventNdimsShapeChangingAddRemoveDims": {
  "lineno": 152,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testMinEventNdimsShapeChangingRemoveDims": {
  "lineno": 135,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Affine",
   "tensorflow_probability.python.bijectors.Chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testScalarCongruency": {
  "lineno": 74,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Chain",
   "tensorflow_probability.python.bijectors.Exp",
   "tensorflow_probability.python.bijectors.Softplus",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testShapeGetters": {
  "lineno": 79,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.bijectors.Chain",
   "tensorflow_probability.python.bijectors.SoftmaxCentered",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ShapeChanging": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.chain_test.ShapeChanging.__init__": {
  "lineno": 37,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product.CholeskyOuterProduct": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product.CholeskyOuterProduct.__init__": {
  "lineno": 72,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product.CholeskyOuterProduct._assertions": {
  "lineno": 201,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.assert_util.assert_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product.CholeskyOuterProduct._forward": {
  "lineno": 86,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.linalg.band_part",
   "tensorflow.compat.v2.matmul"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product.CholeskyOuterProduct._forward_log_det_jacobian": {
  "lineno": 95,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "numpy.log",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.linspace",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.squeeze",
   "tensorflow_probability.python.internal.distribution_util.pick_vector",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product.CholeskyOuterProduct._inverse": {
  "lineno": 92,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.cholesky"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product.CholeskyOuterProduct._make_columnar": {
  "lineno": 172,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.distribution_util.pick_vector",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product_test.CholeskyOuterProductBijectorTest": {
  "lineno": 30,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product_test.CholeskyOuterProductBijectorTest.testBatchDeferred": {
  "lineno": 130,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.bijectors.CholeskyOuterProduct"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product_test.CholeskyOuterProductBijectorTest.testBatchStatic": {
  "lineno": 113,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow_probability.python.bijectors.CholeskyOuterProduct"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product_test.CholeskyOuterProductBijectorTest.testBijectorMatrix": {
  "lineno": 34,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.log",
   "numpy.matmul",
   "numpy.sqrt",
   "numpy.sum",
   "numpy.transpose",
   "tensorflow_probability.python.bijectors.CholeskyOuterProduct"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product_test.CholeskyOuterProductBijectorTest.testNoBatchDeferred": {
  "lineno": 98,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.bijectors.CholeskyOuterProduct"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product_test.CholeskyOuterProductBijectorTest.testNoBatchDynamicJacobian": {
  "lineno": 76,
  "symbols_in_volume": [
   "numpy.eye",
   "numpy.float32",
   "numpy.log",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.bijectors.CholeskyOuterProduct"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product_test.CholeskyOuterProductBijectorTest.testNoBatchStatic": {
  "lineno": 87,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow_probability.python.bijectors.CholeskyOuterProduct"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product_test.CholeskyOuterProductBijectorTest.testNoBatchStaticJacobian": {
  "lineno": 67,
  "symbols_in_volume": [
   "numpy.eye",
   "numpy.log",
   "tensorflow_probability.python.bijectors.CholeskyOuterProduct"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky.CholeskyToInvCholesky": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky.CholeskyToInvCholesky.__init__": {
  "lineno": 61,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.bijectors.cholesky_outer_product.CholeskyOuterProduct"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky.CholeskyToInvCholesky._assertions": {
  "lineno": 110,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.band_part",
   "tensorflow.compat.v2.linalg.diag",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.assert_util.assert_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky.CholeskyToInvCholesky._forward": {
  "lineno": 69,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.eye",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.linalg.triangular_solve",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.dtype_util.base_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky.CholeskyToInvCholesky._forward_log_det_jacobian": {
  "lineno": 83,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky_test.CholeskyToInvCholeskyTest": {
  "lineno": 29,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky_test.CholeskyToInvCholeskyTest._get_fldj_numerical": {
  "lineno": 64,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.eye",
   "tensorflow.compat.v2.linalg.det",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.bijectors.Identity"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky_test.CholeskyToInvCholeskyTest.testBijector": {
  "lineno": 32,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.linalg.cholesky",
   "numpy.linalg.inv",
   "tensorflow_probability.python.bijectors.CholeskyToInvCholesky"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky_test.CholeskyToInvCholeskyTest.testBijectorWithTensors": {
  "lineno": 45,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow_probability.python.bijectors.CholeskyToInvCholesky"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky_test.CholeskyToInvCholeskyTest.testJacobian": {
  "lineno": 103,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float64",
   "tensorflow_probability.python.bijectors.CholeskyToInvCholesky",
   "tensorflow_probability.python.bijectors.Exp",
   "tensorflow_probability.python.bijectors.Invert",
   "tensorflow_probability.python.bijectors.ScaleTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky_test.CholeskyToInvCholeskyTest.testJacobianWithTensors": {
  "lineno": 124,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow_probability.python.bijectors.CholeskyToInvCholesky"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.CorrelationCholesky": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.CorrelationCholesky.__init__": {
  "lineno": 100,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.CorrelationCholesky._forward": {
  "lineno": 138,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.linalg.set_diag",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.norm",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.pad",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular",
   "tensorflow_probability.python.internal.prefer_static.rank",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.CorrelationCholesky._forward_event_shape": {
  "lineno": 108,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.CorrelationCholesky._forward_event_shape_tensor": {
  "lineno": 118,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.CorrelationCholesky._forward_log_det_jacobian": {
  "lineno": 180,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.CorrelationCholesky._inverse": {
  "lineno": 161,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.linalg.set_diag",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.CorrelationCholesky._inverse_event_shape": {
  "lineno": 124,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.CorrelationCholesky._inverse_event_shape_tensor": {
  "lineno": 133,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.CorrelationCholesky._inverse_log_det_jacobian": {
  "lineno": 186,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.CorrelationCholeskyBijectorTest": {
  "lineno": 38,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.CorrelationCholeskyBijectorTest.testBijectiveWithLKJSamples": {
  "lineno": 187,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "itertools.product",
   "numpy.float64",
   "tensorflow_probability.python.bijectors.CorrelationCholesky",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite",
   "tensorflow_probability.python.distributions.lkj.LKJ"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.CorrelationCholeskyBijectorTest.testBijector": {
  "lineno": 43,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.log",
   "numpy.sum",
   "tensorflow_probability.python.bijectors.CorrelationCholesky"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.CorrelationCholeskyBijectorTest.testBijectorBatch": {
  "lineno": 65,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.log",
   "numpy.sum",
   "tensorflow_probability.python.bijectors.CorrelationCholesky"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.CorrelationCholeskyBijectorTest.testBijectorWithVariables": {
  "lineno": 163,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.log",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.bijectors.CorrelationCholesky"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.CorrelationCholeskyBijectorTest.testJacobianWithLKJSamples": {
  "lineno": 207,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "itertools.product",
   "numpy.float64",
   "tensorflow_probability.python.bijectors.CorrelationCholesky",
   "tensorflow_probability.python.bijectors.FillTriangular",
   "tensorflow_probability.python.bijectors.Invert",
   "tensorflow_probability.python.bijectors.bijector_test_util.get_fldj_theoretical",
   "tensorflow_probability.python.distributions.lkj.LKJ",
   "tensorflow_probability.python.internal.test_util.numpy_disable_gradient_test"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.CorrelationCholeskyBijectorTest.testShape": {
  "lineno": 92,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.bijectors.CorrelationCholesky",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.CorrelationCholeskyBijectorTest.testShapeError": {
  "lineno": 120,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.bijectors.FillTriangular",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.CorrelationCholeskyBijectorTest.testTheoreticalFldj": {
  "lineno": 138,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.linspace",
   "tensorflow_probability.python.bijectors.CorrelationCholesky",
   "tensorflow_probability.python.bijectors.FillTriangular",
   "tensorflow_probability.python.bijectors.Invert",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite",
   "tensorflow_probability.python.bijectors.bijector_test_util.get_fldj_theoretical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cumsum": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.cumsum.Cumsum": {
  "lineno": 30,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.cumsum.Cumsum.__init__": {
  "lineno": 60,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cumsum.Cumsum._forward": {
  "lineno": 94,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cumsum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cumsum.Cumsum._forward_log_det_jacobian": {
  "lineno": 114,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cumsum.Cumsum._inverse": {
  "lineno": 97,
  "symbols_in_volume": [
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.one_hot",
   "tensorflow.compat.v2.pad",
   "tensorflow.compat.v2.slice",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.prefer_static.rank",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cumsum.Cumsum.axis": {
  "lineno": 89,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cumsum_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.cumsum_test.CumsumBijectorTestWithDynamicShape": {
  "lineno": 106,
  "symbols_in_volume": [
   "numpy.float32"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.cumsum_test.CumsumBijectorTestWithStaticShape": {
  "lineno": 101,
  "symbols_in_volume": [
   "numpy.float32"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.cumsum_test._CumsumBijectorTest": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.cumsum_test._CumsumBijectorTest._build_tensor": {
  "lineno": 93,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cumsum_test._CumsumBijectorTest._checkBijectorInAllDims": {
  "lineno": 68,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cumsum",
   "tensorflow.compat.v2.rank",
   "tensorflow_probability.python.bijectors.Cumsum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cumsum_test._CumsumBijectorTest._checkEqualTheoreticalFldj": {
  "lineno": 79,
  "symbols_in_volume": [
   "numpy.zeros_like",
   "tensorflow_probability.python.bijectors.Cumsum",
   "tensorflow_probability.python.bijectors.bijector_test_util.get_fldj_theoretical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cumsum_test._CumsumBijectorTest.testBijectiveAndFinite": {
  "lineno": 51,
  "symbols_in_volume": [
   "numpy.cumsum",
   "numpy.float32",
   "numpy.linspace",
   "tensorflow_probability.python.bijectors.Cumsum",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cumsum_test._CumsumBijectorTest.testBijector": {
  "lineno": 46,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cumsum_test._CumsumBijectorTest.testInvalidAxis": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Cumsum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cumsum_test._CumsumBijectorTest.testJacobian": {
  "lineno": 58,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.expand_dims",
   "numpy.reshape",
   "tensorflow_probability.python.internal.test_util.numpy_disable_gradient_test"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform.DiscreteCosineTransform": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform.DiscreteCosineTransform.__init__": {
  "lineno": 54,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform.DiscreteCosineTransform._forward": {
  "lineno": 75,
  "symbols_in_volume": [
   "tensorflow.compat.v2.signal.dct"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform.DiscreteCosineTransform._forward_log_det_jacobian": {
  "lineno": 84,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.dtype_util.base_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform.DiscreteCosineTransform._inverse": {
  "lineno": 78,
  "symbols_in_volume": [
   "tensorflow.compat.v2.signal.idct"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform.DiscreteCosineTransform._inverse_log_det_jacobian": {
  "lineno": 81,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.dtype_util.base_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform_test.DiscreteCosineTransformTest": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform_test.DiscreteCosineTransformTest.testBijectiveAndFinite": {
  "lineno": 65,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "tensorflow_probability.python.bijectors.DiscreteCosineTransform",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform_test.DiscreteCosineTransformTest.testBijector": {
  "lineno": 37,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.randn",
   "scipy.fftpack.dct",
   "tensorflow_probability.python.bijectors.DiscreteCosineTransform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform_test.DiscreteCosineTransformTest.testBijector_dct3": {
  "lineno": 51,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.randn",
   "scipy.fftpack.dct",
   "tensorflow_probability.python.bijectors.DiscreteCosineTransform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.exp": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.exp.Exp": {
  "lineno": 31,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.power_transform.PowerTransform"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.exp.Exp.__init__": {
  "lineno": 52,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.exp_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.exp_test.ExpBijectorTest": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.exp_test.ExpBijectorTest.testBijectiveAndFinite": {
  "lineno": 60,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "numpy.logspace",
   "tensorflow_probability.python.bijectors.Exp",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.exp_test.ExpBijectorTest.testBijector": {
  "lineno": 37,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.log",
   "numpy.squeeze",
   "tensorflow_probability.python.bijectors.Exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.exp_test.ExpBijectorTest.testJacobian": {
  "lineno": 67,
  "symbols_in_volume": [
   "numpy.expand_dims",
   "numpy.linspace",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.bijectors.Exp",
   "tensorflow_probability.python.bijectors.bijector_test_util.get_fldj_theoretical",
   "tensorflow_probability.python.internal.test_util.numpy_disable_gradient_test"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.exp_test.ExpBijectorTest.testScalarCongruency": {
  "lineno": 54,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Exp",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.expm1": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.expm1.Expm1": {
  "lineno": 30,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.expm1.Expm1.__init__": {
  "lineno": 55,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.expm1.Expm1._forward": {
  "lineno": 64,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.expm1"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.expm1.Expm1._forward_log_det_jacobian": {
  "lineno": 76,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.expm1.Expm1._inverse": {
  "lineno": 68,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.expm1.Expm1._inverse_log_det_jacobian": {
  "lineno": 72,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.expm1_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.expm1_test.Expm1BijectorTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.expm1_test.Expm1BijectorTest.testBijectiveAndFinite": {
  "lineno": 68,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "numpy.logspace",
   "tensorflow_probability.python.bijectors.Expm1",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.expm1_test.Expm1BijectorTest.testBijector": {
  "lineno": 36,
  "symbols_in_volume": [
   "numpy.expm1",
   "numpy.log1p",
   "numpy.squeeze",
   "tensorflow_probability.python.bijectors.Expm1"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.expm1_test.Expm1BijectorTest.testMatchesExpm1": {
  "lineno": 53,
  "symbols_in_volume": [
   "numpy.expm1",
   "numpy.random.randn",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.python.bijectors.Expm1"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.expm1_test.Expm1BijectorTest.testScalarCongruency": {
  "lineno": 62,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Expm1",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.fill_triangular": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular.__init__": {
  "lineno": 66,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular._forward": {
  "lineno": 87,
  "symbols_in_volume": [
   "tensorflow_probability.python.math.fill_triangular"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular._forward_event_shape": {
  "lineno": 99,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow_probability.python.internal.tensorshape_util.concatenate"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular._forward_event_shape_tensor": {
  "lineno": 120,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular._forward_log_det_jacobian": {
  "lineno": 93,
  "symbols_in_volume": [
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular._inverse": {
  "lineno": 90,
  "symbols_in_volume": [
   "tensorflow_probability.python.math.fill_triangular_inverse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular._inverse_event_shape": {
  "lineno": 108,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow_probability.python.internal.tensorshape_util.concatenate"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular._inverse_event_shape_tensor": {
  "lineno": 125,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.python.internal.assert_util.assert_equal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular._inverse_log_det_jacobian": {
  "lineno": 96,
  "symbols_in_volume": [
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.vector_size_to_square_matrix_size": {
  "lineno": 136,
  "symbols_in_volume": [
   "numpy.generic",
   "numpy.ndarray",
   "numpy.sqrt",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.python.internal.assert_util.assert_equal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.fill_triangular_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.fill_triangular_test.FillTriangularBijectorTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.fill_triangular_test.FillTriangularBijectorTest.testBijector": {
  "lineno": 36,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow_probability.python.bijectors.FillTriangular"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.fill_triangular_test.FillTriangularBijectorTest.testShape": {
  "lineno": 55,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.bijectors.FillTriangular",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.fill_triangular_test.FillTriangularBijectorTest.testShapeError": {
  "lineno": 83,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.bijectors.FillTriangular",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.gumbel": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.gumbel.Gumbel": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.gumbel.Gumbel.__init__": {
  "lineno": 48,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.gumbel.Gumbel._forward": {
  "lineno": 87,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.gumbel.Gumbel._forward_log_det_jacobian": {
  "lineno": 99,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.gumbel.Gumbel._inverse": {
  "lineno": 91,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.gumbel.Gumbel._inverse_log_det_jacobian": {
  "lineno": 95,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.gumbel.Gumbel._maybe_assert_valid_y": {
  "lineno": 104,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.assert_util.assert_less_equal",
   "tensorflow_probability.python.internal.assert_util.assert_non_negative"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.gumbel.Gumbel._parameter_control_dependencies": {
  "lineno": 115,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.gumbel.Gumbel.loc": {
  "lineno": 77,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.gumbel.Gumbel.scale": {
  "lineno": 82,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.gumbel_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.gumbel_test.GumbelTest": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.gumbel_test.GumbelTest.testBijectiveAndFinite": {
  "lineno": 63,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "tensorflow_probability.python.bijectors.Gumbel",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.gumbel_test.GumbelTest.testBijector": {
  "lineno": 38,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.squeeze",
   "scipy.stats.gumbel_r",
   "tensorflow_probability.python.bijectors.Gumbel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.gumbel_test.GumbelTest.testScalarCongruency": {
  "lineno": 58,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Gumbel",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.gumbel_test.GumbelTest.testVariableScale": {
  "lineno": 70,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.python.bijectors.Gumbel",
   "tensorflow_probability.python.internal.test_util.jax_disable_variable_test"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow_probability.bijectors",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.BijectorSupport": {
  "lineno": 92,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.BijectorSupport.invert": {
  "lineno": 102,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.bijector_supports": {
  "lineno": 110,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.hypothesis_testlib.Support"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.distribution_filter_for": {
  "lineno": 268,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.distribution_filter_for.additional_check": {
  "lineno": 292,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.distribution_filter_for.distribution_filter": {
  "lineno": 297,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.dtype_util.is_floating",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.instantiable_bijectors": {
  "lineno": 47,
  "symbols_in_volume": [
   "absl.logging.warning",
   "inspect.getargspec",
   "inspect.isclass",
   "six.iteritems"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.padded": {
  "lineno": 308,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.pad",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.power_transform_constraint": {
  "lineno": 337,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.power_transform_constraint.constrain": {
  "lineno": 339,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.spline_bin_size_constraint": {
  "lineno": 322,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.math.softmax",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.spline_slope_constraint": {
  "lineno": 330,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.math.softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.unconstrained_bijectors": {
  "lineno": 219,
  "symbols_in_volume": [
   "hypothesis.strategies.composite",
   "hypothesis.strategies.sampled_from"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.unconstrained_bijectors.is_acceptable": {
  "lineno": 242,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.identity": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.identity.Identity": {
  "lineno": 30,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.identity.Identity.__init__": {
  "lineno": 46,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.identity.Identity._forward": {
  "lineno": 54,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.identity.Identity._forward_log_det_jacobian": {
  "lineno": 63,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.identity.Identity._inverse": {
  "lineno": 57,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.identity.Identity._inverse_log_det_jacobian": {
  "lineno": 60,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.identity_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.identity_test.IdentityTest": {
  "lineno": 31,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.identity_test.IdentityTest.testBijector": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Identity"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.identity_test.IdentityTest.testScalarCongruency": {
  "lineno": 46,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Identity",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.inline": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.inline.Inline": {
  "lineno": 31,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.inline.Inline.__init__": {
  "lineno": 48,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.inline.Inline._maybe_implement": {
  "lineno": 124,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.inline._maybe_impute_as_identity": {
  "lineno": 132,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.inline_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.inline_test.InlineBijectorTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.inline_test.InlineBijectorTest.testBijector": {
  "lineno": 36,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.log",
   "numpy.sum",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.log",
   "tensorflow_probability.python.bijectors.Inline"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.inline_test.InlineBijectorTest.testShapeGetters": {
  "lineno": 56,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.concat",
   "tensorflow_probability.python.bijectors.Inline",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.invert.Invert": {
  "lineno": 28,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.invert.Invert.__init__": {
  "lineno": 43,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector",
   "tensorflow_probability.python.bijectors.bijector._is_injective",
   "tensorflow_probability.python.bijectors.bijector.dtype",
   "tensorflow_probability.python.bijectors.bijector.forward_min_event_ndims",
   "tensorflow_probability.python.bijectors.bijector.inverse_min_event_ndims",
   "tensorflow_probability.python.bijectors.bijector.is_constant_jacobian",
   "tensorflow_probability.python.bijectors.bijector.name"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert.Invert.bijector": {
  "lineno": 88,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert.Invert.forward": {
  "lineno": 92,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert.Invert.forward_event_shape": {
  "lineno": 76,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert.Invert.forward_event_shape_tensor": {
  "lineno": 79,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert.Invert.forward_log_det_jacobian": {
  "lineno": 101,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert.Invert.inverse": {
  "lineno": 95,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert.Invert.inverse_event_shape": {
  "lineno": 82,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert.Invert.inverse_event_shape_tensor": {
  "lineno": 85,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert.Invert.inverse_log_det_jacobian": {
  "lineno": 98,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.invert_test.InvertBijectorTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.invert_test.InvertBijectorTest.testBijector": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Affine",
   "tensorflow_probability.python.bijectors.Exp",
   "tensorflow_probability.python.bijectors.Identity",
   "tensorflow_probability.python.bijectors.Invert",
   "tensorflow_probability.python.bijectors.SoftmaxCentered",
   "tensorflow_probability.python.bijectors.Softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert_test.InvertBijectorTest.testDocstringExample": {
  "lineno": 80,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.bijectors.Exp",
   "tensorflow_probability.python.bijectors.Invert",
   "tensorflow_probability.python.distributions.Gamma",
   "tensorflow_probability.python.distributions.TransformedDistribution",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert_test.InvertBijectorTest.testScalarCongruency": {
  "lineno": 59,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Exp",
   "tensorflow_probability.python.bijectors.Invert",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert_test.InvertBijectorTest.testShapeGetters": {
  "lineno": 64,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.bijectors.Invert",
   "tensorflow_probability.python.bijectors.SoftmaxCentered",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.IteratedSigmoidCentered": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.IteratedSigmoidCentered.__init__": {
  "lineno": 73,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.IteratedSigmoidCentered._forward": {
  "lineno": 107,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.math.cumprod",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.sigmoid",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.dtype_util.base_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.IteratedSigmoidCentered._forward_event_shape": {
  "lineno": 82,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.IteratedSigmoidCentered._forward_event_shape_tensor": {
  "lineno": 87,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.IteratedSigmoidCentered._inverse": {
  "lineno": 125,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.math.cumsum",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.dtype_util.base_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.IteratedSigmoidCentered._inverse_event_shape": {
  "lineno": 90,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.IteratedSigmoidCentered._inverse_event_shape_tensor": {
  "lineno": 97,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.python.internal.assert_util.assert_greater"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.IteratedSigmoidCentered._inverse_log_det_jacobian": {
  "lineno": 137,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.cumsum",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test.IteratedSigmoidCenteredBijectorTestFloat32": {
  "lineno": 131,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test.IteratedSigmoidCenteredBijectorTestFloat64": {
  "lineno": 137,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test._IteratedSigmoidCenteredBijectorTest": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test._IteratedSigmoidCenteredBijectorTest.testBijectiveAndFinite": {
  "lineno": 99,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.mgrid.reshape",
   "numpy.ones",
   "numpy.random.rand",
   "tensorflow_probability.python.bijectors.IteratedSigmoidCentered",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test._IteratedSigmoidCenteredBijectorTest.testBijectorUnknownShape": {
  "lineno": 61,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.sum",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.bijectors.IteratedSigmoidCentered"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test._IteratedSigmoidCenteredBijectorTest.testBijectorVector": {
  "lineno": 40,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.sum",
   "tensorflow_probability.python.bijectors.IteratedSigmoidCentered"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test._IteratedSigmoidCenteredBijectorTest.testJacobianConsistent": {
  "lineno": 114,
  "symbols_in_volume": [
   "numpy.random.rand",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.linalg.slogdet",
   "tensorflow_probability.python.bijectors.IteratedSigmoidCentered",
   "tensorflow_probability.python.internal.test_util.jax_disable_test_missing_functionality",
   "tensorflow_probability.python.internal.test_util.numpy_disable_gradient_test",
   "tensorflow_probability.python.math.gradient.batch_jacobian"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test._IteratedSigmoidCenteredBijectorTest.testShapeGetters": {
  "lineno": 84,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.bijectors.IteratedSigmoidCentered",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy.Kumaraswamy": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy.Kumaraswamy.__init__": {
  "lineno": 48,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy.Kumaraswamy._forward": {
  "lineno": 88,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy.Kumaraswamy._inverse": {
  "lineno": 94,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy.Kumaraswamy._inverse_log_det_jacobian": {
  "lineno": 99,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.math.xlogy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy.Kumaraswamy._maybe_assert_valid": {
  "lineno": 108,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.internal.assert_util.assert_less_equal",
   "tensorflow_probability.python.internal.assert_util.assert_non_negative",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy.Kumaraswamy._parameter_control_dependencies": {
  "lineno": 120,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy.Kumaraswamy.concentration0": {
  "lineno": 83,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy.Kumaraswamy.concentration1": {
  "lineno": 78,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy_test.KumaraswamyTest": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy_test.KumaraswamyTest.testBijectiveAndFinite": {
  "lineno": 78,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "tensorflow_probability.python.bijectors.Kumaraswamy",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy_test.KumaraswamyTest.testBijector": {
  "lineno": 37,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.log",
   "numpy.log1p",
   "numpy.squeeze",
   "tensorflow_probability.python.bijectors.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy_test.KumaraswamyTest.testBijectorConcentration1LogDetJacobianFiniteAtZero": {
  "lineno": 60,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.float32",
   "numpy.isfinite",
   "numpy.logspace",
   "numpy.ones_like",
   "tensorflow_probability.python.bijectors.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy_test.KumaraswamyTest.testGradient": {
  "lineno": 133,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.bijectors.Kumaraswamy",
   "tensorflow_probability.python.internal.test_util.jax_disable_variable_test",
   "tensorflow_probability.python.internal.test_util.numpy_disable_gradient_test"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy_test.KumaraswamyTest.testScalarCongruency": {
  "lineno": 69,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Kumaraswamy",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy_test.KumaraswamyTest.testShapeGetterRaisesException": {
  "lineno": 117,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.bijectors.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy_test.KumaraswamyTest.testVariableConcentration0": {
  "lineno": 105,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.python.bijectors.Kumaraswamy",
   "tensorflow_probability.python.internal.test_util.jax_disable_variable_test"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy_test.KumaraswamyTest.testVariableConcentration1": {
  "lineno": 93,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.python.bijectors.Kumaraswamy",
   "tensorflow_probability.python.internal.test_util.jax_disable_variable_test"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.AutoregressiveLayer": {
  "lineno": 944,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.AutoregressiveLayer.__new__": {
  "lineno": 947,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.AutoregressiveNetwork": {
  "lineno": 572,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.layers.Layer"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.AutoregressiveNetwork.__init__": {
  "lineno": 767,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.constraints.get"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.AutoregressiveNetwork.build": {
  "lineno": 857,
  "symbols_in_volume": [
   "numpy.reshape",
   "numpy.tile",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.keras.Sequential",
   "tensorflow.compat.v2.keras.layers.Dense",
   "tensorflow.compat.v2.keras.layers.InputLayer",
   "tensorflow.compat.v2.newaxis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.AutoregressiveNetwork.call": {
  "lineno": 920,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.AutoregressiveNetwork.compute_output_shape": {
  "lineno": 931,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.AutoregressiveNetwork.event_shape": {
  "lineno": 935,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.AutoregressiveNetwork.params": {
  "lineno": 939,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.MaskedAutoregressiveFlow": {
  "lineno": 44,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.MaskedAutoregressiveFlow.__init__": {
  "lineno": 221,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.MaskedAutoregressiveFlow.__init__._bijector_fn": {
  "lineno": 275,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.affine_scalar.AffineScalar"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.MaskedAutoregressiveFlow._forward": {
  "lineno": 293,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.while_loop",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.tensorshape_util.num_elements",
   "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.MaskedAutoregressiveFlow._forward._loop_body": {
  "lineno": 315,
  "symbols_in_volume": [
   "tensorflow.compat.v1.get_variable_scope",
   "tensorflow.compat.v1.variable_scope",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.bijectors.bijector",
   "tensorflow_probability.python.bijectors.bijector.forward"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.MaskedAutoregressiveFlow._inverse": {
  "lineno": 336,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector",
   "tensorflow_probability.python.bijectors.bijector.inverse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.MaskedAutoregressiveFlow._inverse_log_det_jacobian": {
  "lineno": 340,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive._create_degrees": {
  "lineno": 980,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.ceil",
   "numpy.int32",
   "numpy.maximum",
   "numpy.min",
   "numpy.random.randint",
   "six.string_types"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive._create_input_order": {
  "lineno": 963,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.arange",
   "numpy.array",
   "numpy.random.shuffle",
   "numpy.sort",
   "six.string_types"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive._create_masks": {
  "lineno": 1034,
  "symbols_in_volume": [
   "numpy.newaxis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive._gen_mask": {
  "lineno": 366,
  "symbols_in_volume": [
   "numpy.zeros",
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive._gen_slices": {
  "lineno": 349,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive._list": {
  "lineno": 955,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive._make_masked_constraint": {
  "lineno": 1061,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.constraints.get"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive._make_masked_constraint.masked_constraint": {
  "lineno": 1063,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive._make_masked_initializer": {
  "lineno": 1046,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.initializers.get"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive._make_masked_initializer.masked_initializer": {
  "lineno": 1049,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive._validate_bijector_fn": {
  "lineno": 1071,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive._validate_bijector_fn._wrapper": {
  "lineno": 1074,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector",
   "tensorflow_probability.python.bijectors.bijector.forward_min_event_ndims",
   "tensorflow_probability.python.bijectors.bijector.inverse_min_event_ndims"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.masked_autoregressive_default_template": {
  "lineno": 453,
  "symbols_in_volume": [
   "tensorflow.compat.v1.make_template",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.nn.relu"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.masked_autoregressive_default_template._fn": {
  "lineno": 529,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v2.clip_by_value",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.unstack",
   "tensorflow_probability.python.internal.tensorshape_util.as_list",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
   "tensorflow_probability.python.internal.tensorshape_util.rank",
   "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least",
   "tensorflow_probability.python.math.numeric.clip_by_value_preserve_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.masked_dense": {
  "lineno": 380,
  "symbols_in_volume": [
   "tensorflow.compat.v1.glorot_normal_initializer",
   "tensorflow.compat.v1.layers.Dense",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.base_dtype",
   "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.masked_dense.masked_initializer": {
  "lineno": 436,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras",
   "tensorflow.compat.v2.keras.layers",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.AutoregressiveNetworkTest": {
  "lineno": 380,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.AutoregressiveNetworkTest._count_trainable_params": {
  "lineno": 383,
  "symbols_in_volume": [
   "numpy.prod"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.AutoregressiveNetworkTest.assertIsAutoregressive": {
  "lineno": 389,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.arange",
   "numpy.array",
   "numpy.random.randn",
   "numpy.sort",
   "numpy.zeros",
   "numpy.zeros_like",
   "six.string_types"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.AutoregressiveNetworkTest.test_doc_string": {
  "lineno": 474,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "numpy.random.randn",
   "numpy.stack",
   "numpy.zeros",
   "tensorflow.compat.v1.train.AdamOptimizer",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.unstack",
   "tensorflow_probability.python.bijectors.AutoregressiveNetwork",
   "tensorflow_probability.python.bijectors.MaskedAutoregressiveFlow",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.TransformedDistribution"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.AutoregressiveNetworkTest.test_doc_string_images_case_1": {
  "lineno": 512,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.choice",
   "numpy.reshape",
   "numpy.zeros",
   "tensorflow.compat.v1.train.AdamOptimizer",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.unstack",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.bijectors.AutoregressiveNetwork",
   "tensorflow_probability.python.distributions.Autoregressive",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.distributions.Independent"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.AutoregressiveNetworkTest.test_doc_string_images_case_2": {
  "lineno": 557,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.choice",
   "numpy.reshape",
   "numpy.transpose",
   "numpy.zeros",
   "tensorflow.compat.v1.train.AdamOptimizer",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.unstack",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.bijectors.AutoregressiveNetwork",
   "tensorflow_probability.python.distributions.Autoregressive",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.distributions.Independent"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.AutoregressiveNetworkTest.test_layer_callable_activation": {
  "lineno": 427,
  "symbols_in_volume": [
   "numpy.zeros",
   "tensorflow.compat.v1.initializers.variables",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.math.exp",
   "tensorflow_probability.python.bijectors.AutoregressiveNetwork"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.AutoregressiveNetworkTest.test_layer_no_hidden_units": {
  "lineno": 451,
  "symbols_in_volume": [
   "numpy.zeros",
   "tensorflow.compat.v1.initializers.variables",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.bijectors.AutoregressiveNetwork"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.AutoregressiveNetworkTest.test_layer_right_to_left_float64": {
  "lineno": 414,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.zeros",
   "tensorflow.compat.v1.initializers.variables",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.float64",
   "tensorflow_probability.python.bijectors.AutoregressiveNetwork"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.AutoregressiveNetworkTest.test_layer_smaller_hidden_layers_than_input": {
  "lineno": 439,
  "symbols_in_volume": [
   "numpy.zeros",
   "tensorflow.compat.v1.initializers.variables",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.math.abs",
   "tensorflow_probability.python.bijectors.AutoregressiveNetwork"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.AutoregressiveNetworkTest.test_layer_v2_kernel_initializer": {
  "lineno": 462,
  "symbols_in_volume": [
   "numpy.zeros",
   "tensorflow.compat.v1.initializers.variables",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.keras.initializers.GlorotNormal",
   "tensorflow_probability.python.bijectors.AutoregressiveNetwork"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.GenMaskTest": {
  "lineno": 92,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.GenMaskTest.test346Exclusive": {
  "lineno": 95,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow_probability.python.bijectors.masked_autoregressive._gen_mask"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.GenMaskTest.test346Inclusive": {
  "lineno": 106,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow_probability.python.bijectors.masked_autoregressive._gen_mask"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressive2DLayerTest": {
  "lineno": 361,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressive2DLayerTest._autoregressive_flow_kwargs": {
  "lineno": 365,
  "symbols_in_volume": [
   "numpy.prod"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressive2DTest": {
  "lineno": 328,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressive2DTest._autoregressive_flow_kwargs": {
  "lineno": 332,
  "symbols_in_volume": [
   "numpy.prod",
   "tensorflow_probability.python.bijectors.masked_autoregressive_default_template"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowShiftOnlyLayerTest": {
  "lineno": 282,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowShiftOnlyLayerTest._autoregressive_flow_kwargs": {
  "lineno": 285,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowShiftOnlyTest": {
  "lineno": 268,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowShiftOnlyTest._autoregressive_flow_kwargs": {
  "lineno": 271,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.masked_autoregressive_default_template"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowTest": {
  "lineno": 118,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase",
   "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowTest._autoregressive_flow_kwargs": {
  "lineno": 124,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.masked_autoregressive_default_template"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowTest.testBatchedBijector": {
  "lineno": 167,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.float32",
   "numpy.prod",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.python.bijectors.MaskedAutoregressiveFlow"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowTest.testInvertMutuallyConsistent": {
  "lineno": 220,
  "symbols_in_volume": [
   "numpy.prod",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.bijectors.Chain",
   "tensorflow_probability.python.bijectors.Invert",
   "tensorflow_probability.python.bijectors.MaskedAutoregressiveFlow",
   "tensorflow_probability.python.bijectors.Reshape",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.TransformedDistribution"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowTest.testMutuallyConsistent": {
  "lineno": 200,
  "symbols_in_volume": [
   "numpy.prod",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.bijectors.Chain",
   "tensorflow_probability.python.bijectors.MaskedAutoregressiveFlow",
   "tensorflow_probability.python.bijectors.Reshape",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.TransformedDistribution"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowTest.testNonBatchedBijector": {
  "lineno": 134,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.float32",
   "numpy.prod",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.python.bijectors.MaskedAutoregressiveFlow"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowTest.testRankChangingBijectorRaises": {
  "lineno": 255,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.MaskedAutoregressiveFlow"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowTest.testRankChangingBijectorRaises.bijector_fn": {
  "lineno": 259,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Inline"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowTest.testVectorBijectorRaises": {
  "lineno": 242,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.MaskedAutoregressiveFlow"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowTest.testVectorBijectorRaises.bijector_fn": {
  "lineno": 247,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Inline"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowUnrollLoopLayerTest": {
  "lineno": 312,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowUnrollLoopLayerTest._autoregressive_flow_kwargs": {
  "lineno": 315,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowUnrollLoopTest": {
  "lineno": 296,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowUnrollLoopTest._autoregressive_flow_kwargs": {
  "lineno": 299,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.masked_autoregressive_default_template"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveGatedTest": {
  "lineno": 347,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveGatedTest._autoregressive_flow_kwargs": {
  "lineno": 350,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test._masked_autoregressive_2d_template": {
  "lineno": 42,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test._masked_autoregressive_2d_template.wrapper": {
  "lineno": 44,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test._masked_autoregressive_gated_bijector_fn": {
  "lineno": 69,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.AutoregressiveNetwork"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test._masked_autoregressive_gated_bijector_fn._bijector_fn": {
  "lineno": 76,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.nn.sigmoid",
   "tensorflow.compat.v2.unstack",
   "tensorflow_probability.python.bijectors.AffineScalar",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test._masked_autoregressive_shift_and_log_scale_fn": {
  "lineno": 54,
  "symbols_in_volume": [
   "tensorflow.compat.v2.unstack",
   "tensorflow_probability.python.bijectors.AutoregressiveNetwork"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril.MatrixInverseTriL": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril.MatrixInverseTriL.__init__": {
  "lineno": 56,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril.MatrixInverseTriL._assertions": {
  "lineno": 91,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.linalg.band_part",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.linalg.set_diag",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.zeros",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.assert_util.assert_none_equal",
   "tensorflow_probability.python.internal.assert_util.assert_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril.MatrixInverseTriL._forward": {
  "lineno": 70,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.eye",
   "tensorflow.compat.v2.linalg.triangular_solve",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril.MatrixInverseTriL._forward_log_det_jacobian": {
  "lineno": 81,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.dtype_util.base_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril.MatrixInverseTriL._inverse": {
  "lineno": 78,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.MatrixInverseTriLBijectorTest": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.MatrixInverseTriLBijectorTest._inv": {
  "lineno": 40,
  "symbols_in_volume": [
   "numpy.linalg.inv",
   "numpy.ndindex",
   "numpy.triu_indices"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.MatrixInverseTriLBijectorTest.testBatch": {
  "lineno": 90,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow_probability.python.bijectors.MatrixInverseTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.MatrixInverseTriLBijectorTest.testComputesCorrectValues": {
  "lineno": 48,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.linalg.inv",
   "tensorflow_probability.python.bijectors.MatrixInverseTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.MatrixInverseTriLBijectorTest.testErrorOnInputNotLowerTriangular": {
  "lineno": 140,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow_probability.python.bijectors.MatrixInverseTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.MatrixInverseTriLBijectorTest.testErrorOnInputRankTooLow": {
  "lineno": 108,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow_probability.python.bijectors.MatrixInverseTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.MatrixInverseTriLBijectorTest.testErrorOnInputSingular": {
  "lineno": 154,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow_probability.python.bijectors.MatrixInverseTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.MatrixInverseTriLBijectorTest.testJacobian": {
  "lineno": 168,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.random.uniform",
   "numpy.tril",
   "tensorflow_probability.python.bijectors.FillTriangular",
   "tensorflow_probability.python.bijectors.Invert",
   "tensorflow_probability.python.bijectors.MatrixInverseTriL",
   "tensorflow_probability.python.bijectors.bijector_test_util.get_fldj_theoretical",
   "tensorflow_probability.python.internal.test_util.numpy_disable_gradient_test"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.MatrixInverseTriLBijectorTest.testOneByOneMatrix": {
  "lineno": 64,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow_probability.python.bijectors.MatrixInverseTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.MatrixInverseTriLBijectorTest.testZeroByZeroMatrix": {
  "lineno": 77,
  "symbols_in_volume": [
   "numpy.eye",
   "numpy.float32",
   "tensorflow_probability.python.bijectors.MatrixInverseTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matveclu": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.matveclu.MatvecLU": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.matveclu.MatvecLU.__init__": {
  "lineno": 100,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matveclu.MatvecLU._broadcast_params": {
  "lineno": 141,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matveclu.MatvecLU._forward": {
  "lineno": 151,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.matvec",
   "tensorflow_probability.python.math.linalg.lu_reconstruct"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matveclu.MatvecLU._forward_log_det_jacobian": {
  "lineno": 166,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matveclu.MatvecLU._inverse": {
  "lineno": 158,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis",
   "tensorflow_probability.python.math.linalg.lu_solve"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matveclu.MatvecLU._parameter_control_dependencies": {
  "lineno": 171,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.assert_util.assert_none_equal",
   "tensorflow_probability.python.internal.tensor_util.is_ref",
   "tensorflow_probability.python.math.linalg.lu_reconstruct_assertions"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matveclu.MatvecLU.lower_upper": {
  "lineno": 133,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matveclu.MatvecLU.permutation": {
  "lineno": 137,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matveclu_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.matveclu_test.MatvecLUTest": {
  "lineno": 54,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.matveclu_test.MatvecLUTest.testNonInvertibleLUAssert": {
  "lineno": 172,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.linalg.lu",
   "tensorflow_probability.python.bijectors.MatvecLU"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matveclu_test.MatvecLUTest.testTheoreticalFldj": {
  "lineno": 138,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.random.uniform",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.linalg.lu",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.bijectors.MatvecLU",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite",
   "tensorflow_probability.python.bijectors.bijector_test_util.get_fldj_theoretical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matveclu_test.MatvecLUTest.test_invertible_from_lu": {
  "lineno": 103,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.mean",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.linalg.lu",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow_probability.python.bijectors.MatvecLU"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matveclu_test.MatvecLUTest.test_invertible_from_trainable_lu_factorization": {
  "lineno": 57,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.mean",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow_probability.python.bijectors.MatvecLU"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matveclu_test.MatvecLUTest.test_trainable_lu_factorization_init": {
  "lineno": 89,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.MatvecLU"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matveclu_test.trainable_lu_factorization": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.linalg.lu",
   "tensorflow.compat.v2.linalg.qr",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.random.uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.normal_cdf": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.normal_cdf.NormalCDF": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.normal_cdf.NormalCDF.__init__": {
  "lineno": 50,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.normal_cdf.NormalCDF._assertions": {
  "lineno": 76,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_less_equal",
   "tensorflow_probability.python.internal.assert_util.assert_non_negative",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.normal_cdf.NormalCDF._forward": {
  "lineno": 66,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.special_math.ndtr"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.normal_cdf.NormalCDF._forward_log_det_jacobian": {
  "lineno": 73,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.square"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.normal_cdf.NormalCDF._inverse": {
  "lineno": 69,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.python.internal.special_math.ndtri"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.normal_cdf_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.normal_cdf_test.NormalCDFBijectorTest": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.normal_cdf_test.NormalCDFBijectorTest.testBijectiveAndFinite": {
  "lineno": 73,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "tensorflow_probability.python.bijectors.NormalCDF",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.normal_cdf_test.NormalCDFBijectorTest.testBijector": {
  "lineno": 37,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float64",
   "numpy.squeeze",
   "scipy.stats.norm",
   "tensorflow_probability.python.bijectors.NormalCDF"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.normal_cdf_test.NormalCDFBijectorTest.testScalarCongruency": {
  "lineno": 68,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.NormalCDF",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.normal_cdf_test.NormalCDFBijectorTest.testValidateArgs": {
  "lineno": 54,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.NormalCDF"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.ordered": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.ordered.Ordered": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.ordered.Ordered.__init__": {
  "lineno": 56,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.ordered.Ordered._assertions": {
  "lineno": 91,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.ordered.Ordered._forward": {
  "lineno": 63,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.ordered.Ordered._forward_log_det_jacobian": {
  "lineno": 87,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.ordered.Ordered._inverse": {
  "lineno": 70,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.cumsum",
   "tensorflow.compat.v2.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.ordered.Ordered._inverse_log_det_jacobian": {
  "lineno": 76,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.ordered_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.ordered_test.OrderedBijectorTest": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.ordered_test.OrderedBijectorTest.setUp": {
  "lineno": 38,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.ordered_test.OrderedBijectorTest.testBijectiveAndFinite": {
  "lineno": 95,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.sort",
   "tensorflow_probability.python.bijectors.Ordered",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.ordered_test.OrderedBijectorTest.testBijectorUnknownShape": {
  "lineno": 59,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.float32",
   "numpy.log",
   "numpy.sum",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.bijectors.Ordered"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.ordered_test.OrderedBijectorTest.testBijectorVector": {
  "lineno": 41,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.log",
   "numpy.sum",
   "tensorflow_probability.python.bijectors.Ordered"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.ordered_test.OrderedBijectorTest.testShapeGetters": {
  "lineno": 80,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.bijectors.Ordered",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.permute.Permute": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.permute.Permute.__init__": {
  "lineno": 74,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.arange",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.math.top_k",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies",
   "tensorflow_probability.python.internal.dtype_util.is_integer",
   "tensorflow_probability.python.internal.dtype_util.name"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute.Permute._forward": {
  "lineno": 145,
  "symbols_in_volume": [
   "tensorflow.compat.v2.gather",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute.Permute._forward_log_det_jacobian": {
  "lineno": 162,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.dtype_util.base_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute.Permute._inverse": {
  "lineno": 150,
  "symbols_in_volume": [
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.math.invert_permutation",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute.Permute._inverse_log_det_jacobian": {
  "lineno": 156,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.dtype_util.base_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute.Permute.axis": {
  "lineno": 141,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute.Permute.permutation": {
  "lineno": 137,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.permute_test.PermuteBijectorTest": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.permute_test.PermuteBijectorTest.assertRaisesError": {
  "lineno": 37,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute_test.PermuteBijectorTest.setUp": {
  "lineno": 40,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute_test.PermuteBijectorTest.testBijectiveAndFinite": {
  "lineno": 77,
  "symbols_in_volume": [
   "numpy.int32",
   "numpy.random.randn",
   "tensorflow_probability.python.bijectors.Permute",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute_test.PermuteBijectorTest.testBijectiveAndFiniteAxis": {
  "lineno": 86,
  "symbols_in_volume": [
   "numpy.int32",
   "numpy.random.randn",
   "tensorflow_probability.python.bijectors.Permute",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute_test.PermuteBijectorTest.testBijector": {
  "lineno": 43,
  "symbols_in_volume": [
   "numpy.int32",
   "numpy.random.randn",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.bijectors.Permute"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute_test.PermuteBijectorTest.testPreservesShape": {
  "lineno": 98,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.Input",
   "tensorflow_probability.python.bijectors.Permute"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute_test.PermuteBijectorTest.testRaisesOpError": {
  "lineno": 71,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.bijectors.Permute"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.power_transform": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.power_transform.PowerTransform": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.power_transform.PowerTransform.__init__": {
  "lineno": 42,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.power_transform.PowerTransform._forward": {
  "lineno": 73,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.power_transform.PowerTransform._forward_log_det_jacobian": {
  "lineno": 93,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.math.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.power_transform.PowerTransform._inverse": {
  "lineno": 81,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.math.expm1",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.power_transform.PowerTransform._inverse_log_det_jacobian": {
  "lineno": 89,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.power_transform.PowerTransform._maybe_assert_valid_x": {
  "lineno": 99,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_non_negative"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.power_transform.PowerTransform._maybe_assert_valid_y": {
  "lineno": 107,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.power_transform.PowerTransform.power": {
  "lineno": 68,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.power_transform_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.power_transform_test.PowerTransformBijectorTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.power_transform_test.PowerTransformBijectorTest.testBijectiveAndFinite": {
  "lineno": 58,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "numpy.logspace",
   "tensorflow_probability.python.bijectors.PowerTransform",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.power_transform_test.PowerTransformBijectorTest.testBijector": {
  "lineno": 36,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.log",
   "numpy.sum",
   "tensorflow_probability.python.bijectors.PowerTransform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.power_transform_test.PowerTransformBijectorTest.testScalarCongruency": {
  "lineno": 53,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.PowerTransform",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline.RationalQuadraticSpline": {
  "lineno": 59,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline.RationalQuadraticSpline.__init__": {
  "lineno": 133,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline.RationalQuadraticSpline._compute_shared": {
  "lineno": 216,
  "symbols_in_volume": [
   "functools.reduce",
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int64",
   "tensorflow.compat.v2.maximum",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.searchsorted",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline.RationalQuadraticSpline._compute_shared.gather_squeeze": {
  "lineno": 263,
  "symbols_in_volume": [
   "tensorflow.compat.v2.gather",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline.RationalQuadraticSpline._forward": {
  "lineno": 289,
  "symbols_in_volume": [
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline.RationalQuadraticSpline._forward_log_det_jacobian": {
  "lineno": 314,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline.RationalQuadraticSpline._inverse": {
  "lineno": 299,
  "symbols_in_volume": [
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline.RationalQuadraticSpline._parameter_control_dependencies": {
  "lineno": 327,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.broadcast_static_shape",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.assert_util.assert_greater",
   "tensorflow_probability.python.internal.assert_util.assert_near",
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref",
   "tensorflow_probability.python.internal.tensorshape_util.dims",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline.RationalQuadraticSpline.bin_heights": {
  "lineno": 204,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline.RationalQuadraticSpline.bin_widths": {
  "lineno": 200,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline.RationalQuadraticSpline.knot_slopes": {
  "lineno": 208,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline.RationalQuadraticSpline.range_min": {
  "lineno": 212,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline._ensure_at_least_1d": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline._knot_positions": {
  "lineno": 51,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cumsum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline._padded": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.pad",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.enable_v2_behavior",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline_test.RationalQuadraticSplineTest": {
  "lineno": 65,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline_test.RationalQuadraticSplineTest.testAssertsMismatchedSums": {
  "lineno": 221,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.RationalQuadraticSpline"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline_test.RationalQuadraticSplineTest.testAssertsNonPositiveBinSizes": {
  "lineno": 231,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.RationalQuadraticSpline"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline_test.RationalQuadraticSplineTest.testAssertsNonPositiveSlope": {
  "lineno": 248,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.RationalQuadraticSpline"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline_test.RationalQuadraticSplineTest.testDegenerateSplines": {
  "lineno": 121,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "numpy.zeros_like",
   "tensorflow_probability.python.bijectors.RationalQuadraticSpline"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline_test.RationalQuadraticSplineTest.testDocExample": {
  "lineno": 68,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.randn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline_test.RationalQuadraticSplineTest.testDocExample.SplineParams": {
  "lineno": 72,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Module"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline_test.RationalQuadraticSplineTest.testDocExample.SplineParams.__call__": {
  "lineno": 89,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.layers.Dense",
   "tensorflow_probability.python.bijectors.RationalQuadraticSpline"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline_test.RationalQuadraticSplineTest.testDocExample.SplineParams.__init__": {
  "lineno": 74,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline_test.RationalQuadraticSplineTest.testDocExample.SplineParams._bin_positions": {
  "lineno": 81,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.softmax",
   "tensorflow.compat.v2.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline_test.RationalQuadraticSplineTest.testDocExample.SplineParams._slopes": {
  "lineno": 85,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.softplus",
   "tensorflow.compat.v2.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline_test.RationalQuadraticSplineTest.testDocExample.spline_flow": {
  "lineno": 106,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Identity",
   "tensorflow_probability.python.bijectors.RealNVP"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline_test.RationalQuadraticSplineTest.testTheoreticalFldj": {
  "lineno": 166,
  "symbols_in_volume": [
   "absl.logging.info",
   "hypothesis.given",
   "hypothesis.strategies.data",
   "hypothesis.strategies.integers",
   "numpy.float64",
   "numpy.linspace",
   "numpy.prod",
   "tensorflow.compat.v2.float64",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite",
   "tensorflow_probability.python.bijectors.bijector_test_util.get_fldj_theoretical",
   "tensorflow_probability.python.internal.hypothesis_testlib.shapes",
   "tensorflow_probability.python.internal.hypothesis_testlib.tfp_hp_settings"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline_test.RationalQuadraticSplineTest.testTheoreticalFldjSimple": {
  "lineno": 140,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.linspace",
   "numpy.sqrt",
   "tensorflow.compat.v2.float64",
   "tensorflow_probability.python.bijectors.RationalQuadraticSpline",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite",
   "tensorflow_probability.python.bijectors.bijector_test_util.get_fldj_theoretical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline_test.RationalQuadraticSplineTest.testVerifiesBroadcastingDynamic": {
  "lineno": 207,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorSpec",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline_test.RationalQuadraticSplineTest.testVerifiesBroadcastingDynamic.f": {
  "lineno": 209,
  "symbols_in_volume": [
   "tensorflow.compat.v2.function",
   "tensorflow_probability.python.bijectors.RationalQuadraticSpline"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline_test.RationalQuadraticSplineTest.testVerifiesBroadcastingStatic": {
  "lineno": 199,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.RationalQuadraticSpline"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.rational_quadratic_spline_test.rq_splines": {
  "lineno": 40,
  "symbols_in_volume": [
   "functools.partial",
   "hypothesis.strategies.booleans",
   "hypothesis.strategies.composite",
   "hypothesis.strategies.floats",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.bijectors.RationalQuadraticSpline",
   "tensorflow_probability.python.bijectors.hypothesis_testlib.spline_bin_size_constraint",
   "tensorflow_probability.python.bijectors.hypothesis_testlib.spline_slope_constraint",
   "tensorflow_probability.python.internal.hypothesis_testlib.broadcasting_params",
   "tensorflow_probability.python.internal.hypothesis_testlib.shapes"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.real_nvp.RealNVP": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.real_nvp.RealNVP.__init__": {
  "lineno": 137,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp.RealNVP.__init__._bijector_fn": {
  "lineno": 187,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.affine_scalar.AffineScalar"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp.RealNVP._cache_input_depth": {
  "lineno": 207,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp.RealNVP._forward": {
  "lineno": 218,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp.RealNVP._forward_log_det_jacobian": {
  "lineno": 234,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp.RealNVP._inverse": {
  "lineno": 226,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp.RealNVP._inverse_log_det_jacobian": {
  "lineno": 241,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp._validate_bijector_fn": {
  "lineno": 329,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp._validate_bijector_fn._wrapper": {
  "lineno": 332,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector",
   "tensorflow_probability.python.bijectors.bijector.forward_min_event_ndims",
   "tensorflow_probability.python.bijectors.bijector.inverse_min_event_ndims"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp.real_nvp_default_template": {
  "lineno": 249,
  "symbols_in_volume": [
   "tensorflow.compat.v1.make_template",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.nn.relu"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp.real_nvp_default_template._fn": {
  "lineno": 297,
  "symbols_in_volume": [
   "tensorflow.compat.v1.layers.dense",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.split",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.GatedTest": {
  "lineno": 303,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.GatedTest._real_nvp_kwargs": {
  "lineno": 306,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.NICETest": {
  "lineno": 255,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.NICETest._real_nvp_kwargs": {
  "lineno": 258,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.real_nvp_default_template"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPConstantShiftScaleTest": {
  "lineno": 268,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPConstantShiftScaleTest._real_nvp_kwargs": {
  "lineno": 271,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPConstantShiftScaleTest._real_nvp_kwargs.constant_shift_log_scale_fn": {
  "lineno": 274,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPTest": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPTest.testBijectorConditionKwargs": {
  "lineno": 65,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v1.make_template",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.random.normal",
   "tensorflow_probability.python.bijectors.RealNVP"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPTest.testBijectorConditionKwargs._condition_shift_and_log_scale_fn": {
  "lineno": 75,
  "symbols_in_volume": [
   "tensorflow.compat.v1.layers.dense",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.split"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPTest.testBijectorWithTrivialTransform": {
  "lineno": 37,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.normal",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.python.bijectors.RealNVP"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPTest.testMatrixBijectorRaises": {
  "lineno": 119,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.RealNVP"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPTest.testMatrixBijectorRaises.bijector_fn": {
  "lineno": 124,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Inline"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPTest.testRankChangingBijectorRaises": {
  "lineno": 130,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.RealNVP"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPTest.testRankChangingBijectorRaises.bijector_fn": {
  "lineno": 134,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Inline"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPTestKwargs": {
  "lineno": 141,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase",
   "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPTestKwargs._real_nvp_kwargs": {
  "lineno": 146,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.real_nvp_default_template"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPTestKwargs.testBatchedBijectorWithMLPTransform": {
  "lineno": 155,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.normal",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.python.bijectors.RealNVP"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPTestKwargs.testInvertMutuallyConsistent": {
  "lineno": 235,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Invert",
   "tensorflow_probability.python.bijectors.RealNVP",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.TransformedDistribution"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPTestKwargs.testMutuallyConsistent": {
  "lineno": 217,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.RealNVP",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.TransformedDistribution"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPTestKwargs.testNonBatchedBijectorWithMLPTransform": {
  "lineno": 186,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.normal",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.python.bijectors.RealNVP"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test._make_gated_bijector_fn": {
  "lineno": 286,
  "symbols_in_volume": [
   "tensorflow.compat.v1.make_template"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test._make_gated_bijector_fn._bijector_fn": {
  "lineno": 287,
  "symbols_in_volume": [
   "tensorflow.compat.v1.layers.dense",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.nn.sigmoid",
   "tensorflow.compat.v2.split",
   "tensorflow_probability.python.bijectors.AffineScalar",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reciprocal": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.reciprocal.Reciprocal": {
  "lineno": 30,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.reciprocal.Reciprocal.__init__": {
  "lineno": 50,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reciprocal.Reciprocal._assertions": {
  "lineno": 76,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_none_equal",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reciprocal.Reciprocal._forward": {
  "lineno": 64,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reciprocal.Reciprocal._forward_log_det_jacobian": {
  "lineno": 70,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.math.abs",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reciprocal_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.reciprocal_test.ReciprocalTest": {
  "lineno": 33,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.reciprocal_test.ReciprocalTest.testBijectiveAndFinite": {
  "lineno": 75,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "numpy.float32",
   "numpy.linspace",
   "tensorflow_probability.python.bijectors.Reciprocal",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reciprocal_test.ReciprocalTest.testBijector": {
  "lineno": 37,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "tensorflow.compat.v2.linspace",
   "tensorflow_probability.python.bijectors.Reciprocal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reciprocal_test.ReciprocalTest.testScalarCongruency": {
  "lineno": 57,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "tensorflow_probability.python.bijectors.Reciprocal",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.reshape.Reshape": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.reshape.Reshape.__init__": {
  "lineno": 125,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.tensorshape_util.num_elements"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape.Reshape._forward": {
  "lineno": 190,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape.Reshape._forward_event_shape": {
  "lineno": 212,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape.Reshape._forward_event_shape_tensor": {
  "lineno": 224,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape.Reshape._forward_log_det_jacobian": {
  "lineno": 209,
  "symbols_in_volume": [
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape.Reshape._inverse": {
  "lineno": 198,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape.Reshape._inverse_event_shape": {
  "lineno": 218,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape.Reshape._inverse_event_shape_tensor": {
  "lineno": 231,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape.Reshape._inverse_log_det_jacobian": {
  "lineno": 206,
  "symbols_in_volume": [
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape._maybe_check_valid_shape": {
  "lineno": 380,
  "symbols_in_volume": [
   "numpy.any",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.assert_util.assert_greater",
   "tensorflow_probability.python.internal.assert_util.assert_less",
   "tensorflow_probability.python.internal.dtype_util.is_integer",
   "tensorflow_probability.python.internal.dtype_util.name",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape._replace_event_shape_in_shape_tensor": {
  "lineno": 239,
  "symbols_in_volume": [
   "tensorflow.compat.v2.boolean_mask",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.size",
   "tensorflow.compat.v2.split",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.tensorshape_util.as_list",
   "tensorflow_probability.python.internal.tensorshape_util.constant_value_as_shape",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
   "tensorflow_probability.python.internal.tensorshape_util.num_elements"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape._replace_event_shape_in_tensorshape": {
  "lineno": 311,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.int32",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow_probability.python.internal.tensorshape_util.concatenate",
   "tensorflow_probability.python.internal.tensorshape_util.constant_value_as_shape",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
   "tensorflow_probability.python.internal.tensorshape_util.num_elements",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestDynamic": {
  "lineno": 319,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestDynamic.assertRaisesError": {
  "lineno": 331,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestDynamic.build_shapes": {
  "lineno": 321,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestDynamic.testEventShape": {
  "lineno": 336,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.bijectors.Reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestDynamic.testInputOutputMismatchOpError": {
  "lineno": 362,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestDynamic.testInvalidDimensionsOpError": {
  "lineno": 375,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestDynamic.testMultipleUnspecifiedDimensionsOpError": {
  "lineno": 366,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestDynamic.testScalarInVectorOut": {
  "lineno": 399,
  "symbols_in_volume": [
   "numpy.zeros",
   "tensorflow_probability.python.bijectors.Reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestDynamic.testUnknownShapeRank": {
  "lineno": 386,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.bijectors.Reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestStatic": {
  "lineno": 223,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestStatic.assertRaisesError": {
  "lineno": 229,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestStatic.build_shapes": {
  "lineno": 226,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestStatic.testBijectiveAndFinite": {
  "lineno": 263,
  "symbols_in_volume": [
   "numpy.random.randn",
   "numpy.reshape",
   "tensorflow_probability.python.bijectors.Reshape",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestStatic.testEventShape": {
  "lineno": 232,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.bijectors.Reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestStatic.testInputOutputMismatchOpError": {
  "lineno": 314,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestStatic.testInvalidDimensionsOpError": {
  "lineno": 306,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestStatic.testMultipleUnspecifiedDimensionsOpError": {
  "lineno": 298,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestStatic.testWorksWithChain": {
  "lineno": 278,
  "symbols_in_volume": [
   "numpy.zeros",
   "tensorflow_probability.python.bijectors.Chain",
   "tensorflow_probability.python.bijectors.Identity",
   "tensorflow_probability.python.bijectors.Reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test._ReshapeBijectorTest": {
  "lineno": 33,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.reshape_test._ReshapeBijectorTest._testInputOutputMismatchOpError": {
  "lineno": 156,
  "symbols_in_volume": [
   "numpy.random.randn",
   "tensorflow_probability.python.bijectors.Reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test._ReshapeBijectorTest.build_shapes": {
  "lineno": 219,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test._ReshapeBijectorTest.testBijector": {
  "lineno": 46,
  "symbols_in_volume": [
   "numpy.random.randn",
   "numpy.reshape",
   "tensorflow_probability.python.bijectors.Reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test._ReshapeBijectorTest.testBothShapesPartiallySpecified": {
  "lineno": 192,
  "symbols_in_volume": [
   "numpy.random.randn",
   "numpy.reshape",
   "tensorflow_probability.python.bijectors.Reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test._ReshapeBijectorTest.testDefaultVectorShape": {
  "lineno": 207,
  "symbols_in_volume": [
   "numpy.random.randn",
   "numpy.reshape",
   "tensorflow_probability.python.bijectors.Reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test._ReshapeBijectorTest.testEventShapeTensor": {
  "lineno": 80,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test._ReshapeBijectorTest.testOneShapePartiallySpecified": {
  "lineno": 175,
  "symbols_in_volume": [
   "numpy.random.randn",
   "numpy.reshape",
   "tensorflow_probability.python.bijectors.Reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test._ReshapeBijectorTest.testScalarReshape": {
  "lineno": 99,
  "symbols_in_volume": [
   "numpy.random.randn",
   "numpy.reshape",
   "tensorflow_probability.python.bijectors.Reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test._ReshapeBijectorTest.testValidButNonMatchingInputOpError": {
  "lineno": 128,
  "symbols_in_volume": [
   "numpy.random.randn",
   "tensorflow_probability.python.bijectors.Reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test._ReshapeBijectorTest.testValidButNonMatchingInputPartiallySpecifiedOpError": {
  "lineno": 143,
  "symbols_in_volume": [
   "numpy.random.randn",
   "tensorflow_probability.python.bijectors.Reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.scale_tril": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.scale_tril.ScaleTriL": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.chain.Chain"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.scale_tril.ScaleTriL.__init__": {
  "lineno": 81,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.bijectors.affine_scalar.AffineScalar",
   "tensorflow_probability.python.bijectors.chain.Chain",
   "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular",
   "tensorflow_probability.python.bijectors.softplus.Softplus",
   "tensorflow_probability.python.bijectors.transform_diagonal.TransformDiagonal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.scale_tril_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.scale_tril_test.ScaleTriLBijectorTest": {
  "lineno": 29,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.scale_tril_test.ScaleTriLBijectorTest.testComputesCorrectValues": {
  "lineno": 33,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "tensorflow_probability.python.bijectors.Exp",
   "tensorflow_probability.python.bijectors.ScaleTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.scale_tril_test.ScaleTriLBijectorTest.testInvertible": {
  "lineno": 48,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.randn",
   "tensorflow_probability.python.bijectors.ScaleTriL",
   "tensorflow_probability.python.bijectors.Softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sigmoid": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.sigmoid.Sigmoid": {
  "lineno": 30,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.sigmoid.Sigmoid.__init__": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sigmoid.Sigmoid._forward": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow.compat.v2.sigmoid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sigmoid.Sigmoid._forward_log_det_jacobian": {
  "lineno": 50,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sigmoid.Sigmoid._inverse": {
  "lineno": 43,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sigmoid_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.sigmoid_test.SigmoidBijectorTest": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.sigmoid_test.SigmoidBijectorTest.testBijectiveAndFinite": {
  "lineno": 61,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "tensorflow_probability.python.bijectors.Sigmoid",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sigmoid_test.SigmoidBijectorTest.testBijector": {
  "lineno": 37,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "numpy.log",
   "numpy.log1p",
   "scipy.special.expit",
   "tensorflow_probability.python.bijectors.Sigmoid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sigmoid_test.SigmoidBijectorTest.testScalarCongruency": {
  "lineno": 56,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Sigmoid",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.SinhArcsinh": {
  "lineno": 60,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.SinhArcsinh.__init__": {
  "lineno": 96,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.SinhArcsinh._forward": {
  "lineno": 141,
  "symbols_in_volume": [
   "tensorflow.compat.v2.asinh",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.sinh"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.SinhArcsinh._forward_log_det_jacobian": {
  "lineno": 172,
  "symbols_in_volume": [
   "tensorflow.compat.v2.asinh",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.cosh",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.SinhArcsinh._inverse": {
  "lineno": 147,
  "symbols_in_volume": [
   "tensorflow.compat.v2.asinh",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.sinh"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.SinhArcsinh._inverse_log_det_jacobian": {
  "lineno": 152,
  "symbols_in_volume": [
   "tensorflow.compat.v2.asinh",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.cosh",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.SinhArcsinh._output_multiplier": {
  "lineno": 137,
  "symbols_in_volume": [
   "tensorflow.compat.v2.asinh",
   "tensorflow.compat.v2.sinh"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.SinhArcsinh._parameter_control_dependencies": {
  "lineno": 189,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.SinhArcsinh.skewness": {
  "lineno": 127,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.SinhArcsinh.tailweight": {
  "lineno": 132,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh._sqrtx2p1": {
  "lineno": 36,
  "symbols_in_volume": [
   "numpy.finfo",
   "numpy.sqrt",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.SinhArcsinhTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.SinhArcsinhTest.testBijectiveAndFiniteSkewness1Tailweight3": {
  "lineno": 108,
  "symbols_in_volume": [
   "numpy.concatenate",
   "numpy.float32",
   "numpy.logspace",
   "tensorflow_probability.python.bijectors.SinhArcsinh",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.SinhArcsinhTest.testBijectiveAndFiniteSkewnessNeg1Tailweight0p5": {
  "lineno": 100,
  "symbols_in_volume": [
   "numpy.concatenate",
   "numpy.float32",
   "numpy.logspace",
   "tensorflow_probability.python.bijectors.SinhArcsinh",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.SinhArcsinhTest.testBijectorEndpoints": {
  "lineno": 115,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.finfo",
   "numpy.float32",
   "numpy.float64",
   "tensorflow_probability.python.bijectors.SinhArcsinh",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.SinhArcsinhTest.testBijectorOverRange": {
  "lineno": 127,
  "symbols_in_volume": [
   "numpy.amax",
   "numpy.amin",
   "numpy.arcsinh",
   "numpy.array",
   "numpy.cosh",
   "numpy.e",
   "numpy.fabs",
   "numpy.finfo",
   "numpy.float128",
   "numpy.float32",
   "numpy.float64",
   "numpy.log",
   "numpy.logspace",
   "numpy.sinh",
   "numpy.sqrt",
   "numpy.swapaxes",
   "tensorflow_probability.python.bijectors.SinhArcsinh"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.SinhArcsinhTest.testBijectorVersusNumpyRewriteOfBasicFunctions": {
  "lineno": 36,
  "symbols_in_volume": [
   "numpy.arcsinh",
   "numpy.array",
   "numpy.cosh",
   "numpy.float32",
   "numpy.log",
   "numpy.sinh",
   "numpy.sqrt",
   "numpy.sum",
   "tensorflow_probability.python.bijectors.SinhArcsinh"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.SinhArcsinhTest.testDefaultDtypeIsFloat32": {
  "lineno": 183,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow_probability.python.bijectors.SinhArcsinh"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.SinhArcsinhTest.testKurtosis": {
  "lineno": 78,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.logspace",
   "numpy.mean",
   "numpy.sort",
   "numpy.std",
   "tensorflow_probability.python.bijectors.SinhArcsinh"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.SinhArcsinhTest.testScalarCongruencySkewness1Tailweight0p5": {
  "lineno": 88,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.SinhArcsinh",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.SinhArcsinhTest.testScalarCongruencySkewnessNeg1Tailweight1p5": {
  "lineno": 94,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.SinhArcsinh",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.SinhArcsinhTest.testSkew": {
  "lineno": 62,
  "symbols_in_volume": [
   "numpy.abs",
   "tensorflow_probability.python.bijectors.SinhArcsinh"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.SinhArcsinhTest.testVariableTailweight": {
  "lineno": 188,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.python.bijectors.SinhArcsinh"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.SinhArcsinhTest.testZeroTailweightRaises": {
  "lineno": 178,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.SinhArcsinh"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softfloor": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.softfloor.Softfloor": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.softfloor.Softfloor.__init__": {
  "lineno": 99,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softfloor.Softfloor._forward": {
  "lineno": 117,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.exp",
   "tensorflow.compat.v2.math.expm1",
   "tensorflow.compat.v2.math.floor",
   "tensorflow.compat.v2.math.sigmoid",
   "tensorflow.compat.v2.math.tanh"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softfloor.Softfloor._forward_log_det_jacobian": {
  "lineno": 152,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.floor",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.softplus",
   "tensorflow_probability.python.math.softplus_inverse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softfloor.Softfloor._inverse": {
  "lineno": 138,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.exp",
   "tensorflow.compat.v2.math.expm1",
   "tensorflow.compat.v2.math.floor",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softfloor.Softfloor.temperature": {
  "lineno": 165,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softfloor_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.softfloor_test.SoftFloor32Test": {
  "lineno": 130,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.softfloor_test.SoftFloor64Test": {
  "lineno": 134,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.softfloor_test._SoftFloorBijectorBase": {
  "lineno": 47,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.softfloor_test._SoftFloorBijectorBase.setUp": {
  "lineno": 51,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softfloor_test._SoftFloorBijectorBase.testBijectiveAndFiniteHighTemperature": {
  "lineno": 83,
  "symbols_in_volume": [
   "numpy.sort",
   "tensorflow_probability.python.bijectors.Softfloor",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softfloor_test._SoftFloorBijectorBase.testBijectiveAndFiniteLowTemperature": {
  "lineno": 97,
  "symbols_in_volume": [
   "numpy.sort",
   "tensorflow_probability.python.bijectors.Softfloor",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softfloor_test._SoftFloorBijectorBase.testBijectiveAndFiniteMediumTemperature": {
  "lineno": 90,
  "symbols_in_volume": [
   "numpy.sort",
   "tensorflow_probability.python.bijectors.Softfloor",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softfloor_test._SoftFloorBijectorBase.testBijectorApproximatesFloorLowTemperature": {
  "lineno": 54,
  "symbols_in_volume": [
   "numpy.floor",
   "numpy.linspace",
   "tensorflow_probability.python.bijectors.Softfloor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softfloor_test._SoftFloorBijectorBase.testBijectorForwardGradient": {
  "lineno": 122,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.bijectors.Softfloor",
   "tensorflow_probability.python.internal.test_util.numpy_disable_gradient_test",
   "tensorflow_probability.python.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softfloor_test._SoftFloorBijectorBase.testBijectorScalarCongruencyHighTemperature": {
  "lineno": 104,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Softfloor",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softfloor_test._SoftFloorBijectorBase.testBijectorScalarCongruencyLowTemperature": {
  "lineno": 114,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Softfloor",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softfloor_test._SoftFloorBijectorBase.testBijectorScalarCongruencyMediumTemperature": {
  "lineno": 109,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Softfloor",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softfloor_test._SoftFloorBijectorBase.testShapeGetters": {
  "lineno": 68,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.bijectors.Softfloor",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softfloor_test._sigmoid": {
  "lineno": 35,
  "symbols_in_volume": [
   "numpy.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softfloor_test._softfloor_grad_np": {
  "lineno": 39,
  "symbols_in_volume": [
   "numpy.floor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.SoftmaxCentered": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.SoftmaxCentered.__init__": {
  "lineno": 62,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.SoftmaxCentered._forward": {
  "lineno": 95,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.math.softmax",
   "tensorflow_probability.python.internal.distribution_util.pad",
   "tensorflow_probability.python.internal.tensorshape_util.concatenate",
   "tensorflow_probability.python.internal.tensorshape_util.rank",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.SoftmaxCentered._forward_event_shape": {
  "lineno": 71,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.SoftmaxCentered._forward_event_shape_tensor": {
  "lineno": 76,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.SoftmaxCentered._forward_log_det_jacobian": {
  "lineno": 178,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.softplus",
   "tensorflow.compat.v2.reduce_logsumexp",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.squeeze",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.SoftmaxCentered._inverse": {
  "lineno": 110,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.newaxis",
   "tensorflow_probability.python.internal.tensorshape_util.concatenate",
   "tensorflow_probability.python.internal.tensorshape_util.rank",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.SoftmaxCentered._inverse_event_shape": {
  "lineno": 79,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.SoftmaxCentered._inverse_event_shape_tensor": {
  "lineno": 86,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.python.internal.assert_util.assert_greater"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.SoftmaxCentered._inverse_log_det_jacobian": {
  "lineno": 137,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered_test": {
  "lineno": null,
  "symbols_in_volume": [
   "numpy.random.RandomState",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.softmax_centered_test.SoftmaxCenteredBijectorTest": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.softmax_centered_test.SoftmaxCenteredBijectorTest.testBijectiveAndFinite": {
  "lineno": 120,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.linspace",
   "numpy.ones",
   "tensorflow_probability.python.bijectors.SoftmaxCentered",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered_test.SoftmaxCenteredBijectorTest.testBijectorUnknownShape": {
  "lineno": 60,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.log",
   "numpy.newaxis",
   "numpy.sum",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.bijectors.SoftmaxCentered"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered_test.SoftmaxCenteredBijectorTest.testBijectorVector": {
  "lineno": 42,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.newaxis",
   "numpy.sum",
   "tensorflow_probability.python.bijectors.SoftmaxCentered"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered_test.SoftmaxCenteredBijectorTest.testShapeGetersWithBatchShape": {
  "lineno": 96,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.bijectors.SoftmaxCentered",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered_test.SoftmaxCenteredBijectorTest.testShapeGetters": {
  "lineno": 81,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.bijectors.SoftmaxCentered",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered_test.SoftmaxCenteredBijectorTest.testShapeGettersWithDynamicShape": {
  "lineno": 111,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.bijectors.SoftmaxCentered"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered_test.SoftmaxCenteredBijectorTest.testTheoreticalFldj": {
  "lineno": 133,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.linspace",
   "tensorflow_probability.python.bijectors.SoftmaxCentered",
   "tensorflow_probability.python.bijectors.bijector_test_util.get_fldj_theoretical",
   "tensorflow_probability.python.internal.test_util.numpy_disable_gradient_test"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.softplus.Softplus": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.softplus.Softplus.__init__": {
  "lineno": 79,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus.Softplus._forward": {
  "lineno": 96,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.math.softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus.Softplus._forward_log_det_jacobian": {
  "lineno": 123,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.math.softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus.Softplus._inverse": {
  "lineno": 102,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow_probability.python.math.softplus_inverse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus.Softplus._inverse_log_det_jacobian": {
  "lineno": 109,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.math.expm1",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus.Softplus._parameter_control_dependencies": {
  "lineno": 132,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_none_equal",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus.Softplus.hinge_softness": {
  "lineno": 128,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test": {
  "lineno": null,
  "symbols_in_volume": [
   "numpy.random.RandomState",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest._softplus": {
  "lineno": 38,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest._softplus_ildj_before_reduction": {
  "lineno": 44,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest._softplus_inverse": {
  "lineno": 41,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest.testBijectiveAndFinite16bit": {
  "lineno": 142,
  "symbols_in_volume": [
   "numpy.float16",
   "numpy.linspace",
   "numpy.logspace",
   "tensorflow_probability.python.bijectors.Softplus",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest.testBijectiveAndFinite32bit": {
  "lineno": 118,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "numpy.logspace",
   "tensorflow_probability.python.bijectors.Softplus",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest.testBijectiveAndFiniteWithNegativeHingeSoftness32Bit": {
  "lineno": 134,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "numpy.logspace",
   "tensorflow_probability.python.bijectors.Softplus",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest.testBijectiveAndFiniteWithPositiveHingeSoftness32Bit": {
  "lineno": 126,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "numpy.logspace",
   "tensorflow_probability.python.bijectors.Softplus",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest.testBijectorForwardInverseEventDimsOne": {
  "lineno": 82,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest.testBijectorForwardInverseEventDimsZero": {
  "lineno": 54,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest.testBijectorForwardInverseWithHingeSoftnessEventDimsZero": {
  "lineno": 63,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow_probability.python.bijectors.Softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest.testBijectorLogDetJacobianEventDimsOne": {
  "lineno": 91,
  "symbols_in_volume": [
   "numpy.sum",
   "tensorflow_probability.python.bijectors.Softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest.testBijectorLogDetJacobianEventDimsZero": {
  "lineno": 71,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest.testHingeSoftnessZeroRaises": {
  "lineno": 48,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest.testScalarCongruency": {
  "lineno": 103,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Softplus",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest.testScalarCongruencyWithNegativeHingeSoftness": {
  "lineno": 113,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Softplus",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest.testScalarCongruencyWithPositiveHingeSoftness": {
  "lineno": 108,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Softplus",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest.testVariableHingeSoftness": {
  "lineno": 154,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.python.bijectors.Softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.softsign.Softsign": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.softsign.Softsign.__init__": {
  "lineno": 55,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign.Softsign._assertions": {
  "lineno": 76,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_greater",
   "tensorflow_probability.python.internal.assert_util.assert_less",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign.Softsign._forward": {
  "lineno": 62,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.abs"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign.Softsign._forward_log_det_jacobian": {
  "lineno": 69,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.abs",
   "tensorflow.compat.v2.math.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign.Softsign._inverse": {
  "lineno": 65,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.math.abs"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign.Softsign._inverse_log_det_jacobian": {
  "lineno": 72,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.math.abs",
   "tensorflow.compat.v2.math.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.softsign_test.SoftsignBijectorTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.softsign_test.SoftsignBijectorTest._softsign": {
  "lineno": 36,
  "symbols_in_volume": [
   "numpy.abs"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign_test.SoftsignBijectorTest._softsign_ildj_before_reduction": {
  "lineno": 39,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign_test.SoftsignBijectorTest.testBijectiveAndFinite": {
  "lineno": 95,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "tensorflow_probability.python.bijectors.Softsign",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign_test.SoftsignBijectorTest.testBijectorBounds": {
  "lineno": 43,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Softsign"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign_test.SoftsignBijectorTest.testBijectorForwardInverse": {
  "lineno": 55,
  "symbols_in_volume": [
   "numpy.random.randn",
   "tensorflow_probability.python.bijectors.Softsign"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign_test.SoftsignBijectorTest.testBijectorForwardInverseEventDimsOne": {
  "lineno": 73,
  "symbols_in_volume": [
   "numpy.random.randn",
   "tensorflow_probability.python.bijectors.Softsign"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign_test.SoftsignBijectorTest.testBijectorLogDetJacobianEventDimsOne": {
  "lineno": 81,
  "symbols_in_volume": [
   "numpy.random.rand",
   "numpy.sum",
   "tensorflow_probability.python.bijectors.Softsign"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign_test.SoftsignBijectorTest.testBijectorLogDetJacobianEventDimsZero": {
  "lineno": 64,
  "symbols_in_volume": [
   "numpy.random.rand",
   "tensorflow_probability.python.bijectors.Softsign"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign_test.SoftsignBijectorTest.testScalarCongruency": {
  "lineno": 90,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Softsign",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.square": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.square.Square": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.square.Square.__init__": {
  "lineno": 53,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.square.Square._assertions": {
  "lineno": 79,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_non_negative"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.square.Square._forward": {
  "lineno": 67,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.square"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.square.Square._forward_log_det_jacobian": {
  "lineno": 75,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.square.Square._inverse": {
  "lineno": 71,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.sqrt"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.square_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.square_test.SquareBijectorTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.square_test.SquareBijectorTest.testBijectorScalar": {
  "lineno": 36,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.sqrt",
   "numpy.square",
   "tensorflow_probability.python.bijectors.Square"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.square_test.SquareBijectorTest.testScalarCongruency": {
  "lineno": 57,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Square",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.tanh": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.tanh.Tanh": {
  "lineno": 31,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.tanh.Tanh.__init__": {
  "lineno": 46,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.tanh.Tanh._forward": {
  "lineno": 53,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.tanh"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.tanh.Tanh._forward_log_det_jacobian": {
  "lineno": 63,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow.compat.v2.math.softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.tanh.Tanh._inverse": {
  "lineno": 56,
  "symbols_in_volume": [
   "tensorflow.compat.v2.atanh"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.tanh_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.tanh_test.TanhBijectorTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.tanh_test.TanhBijectorTest.testBijectiveAndFinite": {
  "lineno": 60,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.linspace",
   "tensorflow_probability.python.bijectors.Tanh",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.tanh_test.TanhBijectorTest.testBijector": {
  "lineno": 36,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.linspace",
   "numpy.log1p",
   "numpy.square",
   "numpy.tanh",
   "tensorflow_probability.python.bijectors.Tanh"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.tanh_test.TanhBijectorTest.testMatchWithAffineTransform": {
  "lineno": 68,
  "symbols_in_volume": [
   "numpy.linspace",
   "numpy.tanh",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.float64",
   "tensorflow_probability.python.bijectors.AffineScalar",
   "tensorflow_probability.python.bijectors.Chain",
   "tensorflow_probability.python.bijectors.Sigmoid",
   "tensorflow_probability.python.bijectors.Tanh"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.tanh_test.TanhBijectorTest.testScalarCongruency": {
  "lineno": 55,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Tanh",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal.TransformDiagonal": {
  "lineno": 29,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal.TransformDiagonal.__init__": {
  "lineno": 45,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal.TransformDiagonal._forward": {
  "lineno": 69,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.linalg.set_diag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal.TransformDiagonal._forward_log_det_jacobian": {
  "lineno": 77,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.diag_part"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal.TransformDiagonal._inverse": {
  "lineno": 73,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.linalg.set_diag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal.TransformDiagonal._inverse_log_det_jacobian": {
  "lineno": 105,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.diag_part"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal.TransformDiagonal.diag_bijector": {
  "lineno": 65,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal_test.TransformDiagonalBijectorTest": {
  "lineno": 42,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal_test.TransformDiagonalBijectorTest.testBijector": {
  "lineno": 46,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.diag",
   "numpy.exp",
   "numpy.fill_diagonal",
   "numpy.float32",
   "numpy.random.randn",
   "tensorflow_probability.python.bijectors.Exp",
   "tensorflow_probability.python.bijectors.TransformDiagonal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal_test.TransformDiagonalBijectorTest.testTheoreticalFldj": {
  "lineno": 94,
  "symbols_in_volume": [
   "absl.logging.info",
   "hypothesis.given",
   "hypothesis.strategies.data",
   "hypothesis.strategies.integers",
   "numpy.float64",
   "numpy.random.randn",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.bijectors.TransformDiagonal",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite",
   "tensorflow_probability.python.bijectors.bijector_test_util.get_fldj_theoretical",
   "tensorflow_probability.python.bijectors.hypothesis_testlib.unconstrained_bijectors",
   "tensorflow_probability.python.internal.hypothesis_testlib.shapes",
   "tensorflow_probability.python.internal.hypothesis_testlib.tfp_hp_settings",
   "tensorflow_probability.python.internal.test_util.numpy_disable_gradient_test"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal_test.TransformDiagonalBijectorTest.testTheoreticalFldjNormalCDF": {
  "lineno": 75,
  "symbols_in_volume": [
   "numpy.zeros",
   "tensorflow_probability.python.bijectors.NormalCDF",
   "tensorflow_probability.python.bijectors.TransformDiagonal",
   "tensorflow_probability.python.bijectors.bijector_test_util.get_fldj_theoretical",
   "tensorflow_probability.python.internal.test_util.numpy_disable_gradient_test"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal_test._preserves_vector_dim": {
  "lineno": 38,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose.__init__": {
  "lineno": 96,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.size",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose._event_shape": {
  "lineno": 183,
  "symbols_in_volume": [
   "numpy.argsort",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose._forward": {
  "lineno": 180,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose._forward_event_shape": {
  "lineno": 206,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose._forward_event_shape.static_perm_to_shape": {
  "lineno": 207,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose._forward_event_shape_tensor": {
  "lineno": 212,
  "symbols_in_volume": [
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose._forward_log_det_jacobian": {
  "lineno": 235,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose._inverse": {
  "lineno": 216,
  "symbols_in_volume": [
   "tensorflow.compat.v2.argsort"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose._inverse_event_shape": {
  "lineno": 219,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose._inverse_event_shape.static_perm_to_shape": {
  "lineno": 220,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose._inverse_event_shape_tensor": {
  "lineno": 228,
  "symbols_in_volume": [
   "tensorflow.compat.v2.argsort",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose._inverse_log_det_jacobian": {
  "lineno": 232,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose._make_perm": {
  "lineno": 238,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.range",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose._transpose": {
  "lineno": 252,
  "symbols_in_volume": [
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.transpose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose.perm": {
  "lineno": 172,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose.rightmost_transposed_ndims": {
  "lineno": 176,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose._maybe_validate_perm": {
  "lineno": 290,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.arange",
   "numpy.size",
   "numpy.sort",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.size",
   "tensorflow.compat.v2.sort",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.assert_util.assert_rank",
   "tensorflow_probability.python.internal.dtype_util.is_integer",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose._maybe_validate_rightmost_transposed_ndims": {
  "lineno": 257,
  "symbols_in_volume": [
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.assert_util.assert_non_negative",
   "tensorflow_probability.python.internal.assert_util.assert_rank",
   "tensorflow_probability.python.internal.dtype_util.is_integer",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.transpose_test.TransposeBijectorDynamicTest": {
  "lineno": 219,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.transpose_test.TransposeBijectorStaticTest": {
  "lineno": 224,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.transpose_test._TransposeBijectorTest": {
  "lineno": 34,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.transpose_test._TransposeBijectorTest.testEventShapes": {
  "lineno": 139,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose_test._TransposeBijectorTest.testEventShapes.event_shape": {
  "lineno": 157,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose_test._TransposeBijectorTest.testEventShapes.make_bijector": {
  "lineno": 144,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.bijectors.Transpose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose_test._TransposeBijectorTest.testInvalidEventNdimsException": {
  "lineno": 125,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Transpose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose_test._TransposeBijectorTest.testInvalidPermException": {
  "lineno": 113,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.bijectors.Transpose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose_test._TransposeBijectorTest.testPartialStaticPermEventShapes": {
  "lineno": 192,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow_probability.python.bijectors.Transpose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose_test._TransposeBijectorTest.testTransformedDist": {
  "lineno": 130,
  "symbols_in_volume": [
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.bijectors.Invert",
   "tensorflow_probability.python.bijectors.Transpose",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose_test._TransposeBijectorTest.testTransposeFromEventNdim": {
  "lineno": 74,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.int32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.bijectors.Transpose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose_test._TransposeBijectorTest.testTransposeFromPerm": {
  "lineno": 37,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.bijectors.Transpose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.weibull.Weibull": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.bijector.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.weibull.Weibull.__init__": {
  "lineno": 50,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull.Weibull._forward": {
  "lineno": 90,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.math.expm1"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull.Weibull._forward_log_det_jacobian": {
  "lineno": 106,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.xlogy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull.Weibull._inverse": {
  "lineno": 94,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.math.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull.Weibull._inverse_log_det_jacobian": {
  "lineno": 98,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.math.xlogy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull.Weibull._maybe_assert_valid_x": {
  "lineno": 115,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_non_negative"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull.Weibull._maybe_assert_valid_y": {
  "lineno": 121,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.assert_util.assert_less_equal",
   "tensorflow_probability.python.internal.assert_util.assert_non_negative"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull.Weibull._parameter_control_dependencies": {
  "lineno": 132,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull.Weibull.concentration": {
  "lineno": 85,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull.Weibull.scale": {
  "lineno": 80,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.weibull_test.WeibullBijectorTest": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.weibull_test.WeibullBijectorTest.testAsserts": {
  "lineno": 84,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Weibull"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull_test.WeibullBijectorTest.testBijectiveAndFinite": {
  "lineno": 75,
  "symbols_in_volume": [
   "numpy.expm1",
   "numpy.float32",
   "numpy.linspace",
   "tensorflow_probability.python.bijectors.Weibull",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull_test.WeibullBijectorTest.testBijector": {
  "lineno": 38,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "scipy.stats.frechet_r",
   "tensorflow_probability.python.bijectors.Weibull"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull_test.WeibullBijectorTest.testBijectorConcentration1LogDetJacobianFiniteAtZero": {
  "lineno": 59,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.float32",
   "numpy.isfinite",
   "numpy.logspace",
   "numpy.ones_like",
   "tensorflow_probability.python.bijectors.Weibull"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull_test.WeibullBijectorTest.testScalarCongruency": {
  "lineno": 67,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Weibull",
   "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull_test.WeibullBijectorTest.testVariableAssertsConcentration": {
  "lineno": 109,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.python.bijectors.Weibull",
   "tensorflow_probability.python.internal.test_util.jax_disable_variable_test"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull_test.WeibullBijectorTest.testVariableAssertsScale": {
  "lineno": 94,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.python.bijectors.Weibull",
   "tensorflow_probability.python.internal.test_util.jax_disable_variable_test"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.debugging": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.debugging.benchmarking": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function._merge_dicts": {
  "lineno": 79,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function._run_function": {
  "lineno": 57,
  "symbols_in_volume": [
   "time.time"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function._run_function_under_strategies": {
  "lineno": 88,
  "symbols_in_volume": [
   "tensorflow.compat.v2.function"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function._run_function_under_strategies.run_one": {
  "lineno": 93,
  "symbols_in_volume": [
   "pprint.pprint"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function._run_function_under_strategies.xla_function": {
  "lineno": 122,
  "symbols_in_volume": [
   "tensorflow.compat.v2.function",
   "tensorflow.compat.v2.xla.experimental.compile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.benchmark_tf_function": {
  "lineno": 142,
  "symbols_in_volume": [
   "tensorflow.compat.v2.device"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.default_benchmark_config": {
  "lineno": 50,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions": {
  "lineno": null,
  "symbols_in_volume": [
   "sys",
   "sys.modules",
   "tensorflow.python.util.deprecation",
   "tensorflow.python.util.deprecation.deprecated",
   "tensorflow_probability.python.distributions.kullback_leibler.augment_kl_xent_docs",
   "tensorflow_probability.python.math.generic.reduce_weighted_logsumexp",
   "tensorflow_probability.python.math.generic.softplus_inverse",
   "tensorflow_probability.python.math.linalg.fill_triangular",
   "tensorflow_probability.python.math.linalg.fill_triangular_inverse"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.SeedStream": {
  "lineno": 146,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated",
   "tensorflow_probability.python.util.seed_stream.SeedStream",
   "tensorflow_probability.python.util.seed_stream.SeedStream.__init__"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.autoregressive": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.autoregressive.Autoregressive": {
  "lineno": 28,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.autoregressive.Autoregressive.__init__": {
  "lineno": 111,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.tensorshape_util.num_elements"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive.Autoregressive._batch_shape": {
  "lineno": 187,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive.Autoregressive._batch_shape_tensor": {
  "lineno": 190,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive.Autoregressive._event_shape": {
  "lineno": 193,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive.Autoregressive._event_shape_tensor": {
  "lineno": 196,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive.Autoregressive._log_prob": {
  "lineno": 207,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive.Autoregressive._prob": {
  "lineno": 211,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive.Autoregressive._sample_n": {
  "lineno": 199,
  "symbols_in_volume": [
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive.Autoregressive.distribution0": {
  "lineno": 183,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive.Autoregressive.distribution_fn": {
  "lineno": 171,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive.Autoregressive.num_steps": {
  "lineno": 179,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive.Autoregressive.sample0": {
  "lineno": 175,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.autoregressive_test.AutogressiveTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase",
   "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.autoregressive_test.AutogressiveTest._normal_fn": {
  "lineno": 45,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive_test.AutogressiveTest._normal_fn._fn": {
  "lineno": 46,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive_test.AutogressiveTest._random_scale_tril": {
  "lineno": 40,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.int32",
   "tensorflow_probability.math.fill_triangular"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive_test.AutogressiveTest.setUp": {
  "lineno": 37,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive_test.AutogressiveTest.testCompareToBijector": {
  "lineno": 72,
  "symbols_in_volume": [
   "numpy.concatenate",
   "numpy.float32",
   "numpy.int32",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.bijectors.Affine",
   "tensorflow_probability.python.bijectors.MaskedAutoregressiveFlow",
   "tensorflow_probability.python.distributions.Autoregressive",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.TransformedDistribution"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive_test.AutogressiveTest.testSampleAndLogProbConsistency": {
  "lineno": 53,
  "symbols_in_volume": [
   "numpy.concatenate",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.bijectors.Affine",
   "tensorflow_probability.python.distributions.Autoregressive",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape.__init__": {
  "lineno": 71,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.distributions.distribution",
   "tensorflow_probability.python.distributions.distribution.batch_shape_tensor",
   "tensorflow_probability.python.distributions.distribution.dtype",
   "tensorflow_probability.python.distributions.distribution.name",
   "tensorflow_probability.python.distributions.distribution.reparameterization_type"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._batch_shape": {
  "lineno": 132,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._batch_shape_tensor": {
  "lineno": 128,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.identity"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._call_and_reshape_output": {
  "lineno": 262,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.reshape",
   "tensorflow_probability.python.internal.tensorshape_util.concatenate",
   "tensorflow_probability.python.internal.tensorshape_util.rank",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._call_reshape_input_output": {
  "lineno": 232,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.reshape",
   "tensorflow_probability.python.internal.tensorshape_util.concatenate",
   "tensorflow_probability.python.internal.tensorshape_util.rank",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._cdf": {
  "lineno": 166,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._covariance": {
  "lineno": 201,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._entropy": {
  "lineno": 178,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._event_shape": {
  "lineno": 139,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._event_shape_tensor": {
  "lineno": 135,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.identity"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._log_cdf": {
  "lineno": 162,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._log_prob": {
  "lineno": 154,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._log_survival_function": {
  "lineno": 170,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._mean": {
  "lineno": 185,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._mode": {
  "lineno": 189,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._prob": {
  "lineno": 158,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._sample_n": {
  "lineno": 142,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._sample_shape": {
  "lineno": 208,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._stddev": {
  "lineno": 193,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._survival_function": {
  "lineno": 174,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._validate_sample_arg": {
  "lineno": 292,
  "symbols_in_volume": [
   "numpy.int32",
   "numpy.ndarray",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.maximum",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.assert_util.assert_greater_equal",
   "tensorflow_probability.python.internal.tensorshape_util.concatenate",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._variance": {
  "lineno": 197,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape.distribution": {
  "lineno": 124,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.calculate_reshape": {
  "lineno": 378,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.math.count_nonzero",
   "tensorflow.compat.v2.maximum",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.assert_util.assert_less_equal",
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.assert_util.assert_rank",
   "tensorflow_probability.python.internal.tensorshape_util.constant_value_as_shape",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.validate_init_args_statically": {
  "lineno": 409,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow_probability.python.distributions.distribution.batch_shape",
   "tensorflow_probability.python.internal.tensorshape_util.constant_value_as_shape",
   "tensorflow_probability.python.internal.tensorshape_util.dims",
   "tensorflow_probability.python.internal.tensorshape_util.num_elements",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test.BatchReshapeDynamicTest": {
  "lineno": 599,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test.BatchReshapeStaticTest": {
  "lineno": 592,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest.make_mvn": {
  "lineno": 314,
  "symbols_in_volume": [
   "numpy.int32",
   "numpy.ones",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.BatchReshape",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest.make_normal": {
  "lineno": 181,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.int32",
   "numpy.prod",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.BatchReshape",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest.make_wishart": {
  "lineno": 36,
  "symbols_in_volume": [
   "numpy.concatenate",
   "numpy.int32",
   "numpy.reshape",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.BatchReshape",
   "tensorflow_probability.python.distributions.Wishart"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest.test_bad_reshape_size": {
  "lineno": 460,
  "symbols_in_volume": [
   "numpy.int32",
   "numpy.ones",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.distributions.BatchReshape",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest.test_broadcasting_explicitly_unsupported": {
  "lineno": 559,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.distributions.BatchReshape",
   "tensorflow_probability.python.distributions.Poisson"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest.test_matrix_variate_sample_and_log_prob": {
  "lineno": 59,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.reshape",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest.test_matrix_variate_stats": {
  "lineno": 113,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest.test_non_positive_shape": {
  "lineno": 491,
  "symbols_in_volume": [
   "numpy.int32",
   "numpy.ones",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.distributions.BatchReshape",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest.test_non_vector_shape": {
  "lineno": 525,
  "symbols_in_volume": [
   "numpy.int32",
   "numpy.ones",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.distributions.BatchReshape",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest.test_scalar_variate_sample_and_log_prob": {
  "lineno": 195,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.reshape",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest.test_scalar_variate_stats": {
  "lineno": 249,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest.test_vector_variate_sample_and_log_prob": {
  "lineno": 327,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.reshape",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest.test_vector_variate_stats": {
  "lineno": 380,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli.__init__": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._batch_shape": {
  "lineno": 114,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._batch_shape_tensor": {
  "lineno": 110,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._entropy": {
  "lineno": 147,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.softplus",
   "tensorflow.compat.v2.sigmoid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._event_shape": {
  "lineno": 121,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._event_shape_tensor": {
  "lineno": 118,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._log_prob": {
  "lineno": 131,
  "symbols_in_volume": [
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.cast",
   "tensorflow_probability.python.internal.distribution_util.embed_check_integer_casting_closed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._logits_deprecated_behavior": {
  "lineno": 183,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._logits_parameter_no_checks": {
  "lineno": 167,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._mean": {
  "lineno": 151,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._mode": {
  "lineno": 158,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._outcome_log_probs": {
  "lineno": 140,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.math.softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._param_shapes": {
  "lineno": 88,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._parameter_control_dependencies": {
  "lineno": 199,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._params_event_ndims": {
  "lineno": 92,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._probs_deprecated_behavior": {
  "lineno": 191,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._probs_parameter_no_checks": {
  "lineno": 178,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.math.sigmoid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._sample_n": {
  "lineno": 124,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.less",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._variance": {
  "lineno": 154,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli.logits": {
  "lineno": 96,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli.logits_parameter": {
  "lineno": 162,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli.probs": {
  "lineno": 103,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli.probs_parameter": {
  "lineno": 173,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli._kl_bernoulli_bernoulli": {
  "lineno": 232,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.softplus",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.sigmoid",
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.maybe_assert_bernoulli_param_correctness": {
  "lineno": 204,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.internal.assert_util.assert_less_equal",
   "tensorflow_probability.python.internal.assert_util.assert_non_negative",
   "tensorflow_probability.python.internal.dtype_util.is_floating",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliFromVariableTest": {
  "lineno": 449,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliFromVariableTest.testAssertionsProbs": {
  "lineno": 472,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliFromVariableTest.testGradientLogits": {
  "lineno": 452,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliFromVariableTest.testGradientProbs": {
  "lineno": 462,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliSlicingTest": {
  "lineno": 326,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliSlicingTest.testCopyUnknownRank": {
  "lineno": 420,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.random.normal",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliSlicingTest.testDocstrSliceExample": {
  "lineno": 442,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliSlicingTest.testScalarSlice": {
  "lineno": 329,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis.batch_shape",
   "tensorflow.compat.v2.random.normal",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliSlicingTest.testSlice": {
  "lineno": 337,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.errors.InvalidArgumentError",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.random.normal",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliSlicingTest.testSlice.check": {
  "lineno": 344,
  "symbols_in_volume": [
   "numpy.zeros",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliSlicingTest.testSlice.halfway": {
  "lineno": 368,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliSlicingTest.testSliceCopyOverrideNameSliceAgainCopyOverrideLogitsSliceAgain": {
  "lineno": 428,
  "symbols_in_volume": [
   "tensorflow.compat.v2.random.normal",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliSlicingTest.testSliceSequencePreservesOrigVarGradLinkage": {
  "lineno": 385,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliSlicingTest.testSliceThenCopyPreservesOrigVarGradLinkage": {
  "lineno": 398,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest": {
  "lineno": 47,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest._testPmf": {
  "lineno": 115,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testBernoulliBernoulliKL": {
  "lineno": 278,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.log",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.distributions.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testBoundaryConditions": {
  "lineno": 196,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testBroadcasting": {
  "lineno": 170,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testDtype": {
  "lineno": 92,
  "symbols_in_volume": [
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.int64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testEntropyNoBatch": {
  "lineno": 201,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testEntropyWithBatch": {
  "lineno": 206,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testFloatMode": {
  "lineno": 111,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testInvalidP": {
  "lineno": 65,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testLogits": {
  "lineno": 55,
  "symbols_in_volume": [
   "scipy.special.expit",
   "scipy.special.logit",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testMean": {
  "lineno": 259,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testNotReparameterized": {
  "lineno": 235,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testP": {
  "lineno": 50,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testParamTensorFromLogits": {
  "lineno": 295,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testParamTensorFromProbs": {
  "lineno": 306,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testPmfCorrectBroadcastDynamicShape": {
  "lineno": 138,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testPmfInvalid": {
  "lineno": 148,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testPmfShapes": {
  "lineno": 179,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testPmfWithFloatArgReturnsXEntropy": {
  "lineno": 161,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.log",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testPmfWithP": {
  "lineno": 156,
  "symbols_in_volume": [
   "scipy.special.logit"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testSampleDeterministicScalarVsVector": {
  "lineno": 241,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testSampleDeterministicScalarVsVector._maybe_seed": {
  "lineno": 245,
  "symbols_in_volume": [
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testSampleN": {
  "lineno": 214,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.log",
   "numpy.mean",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.internal.tensorshape_util.as_list",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testShapes": {
  "lineno": 83,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testVarianceAndStd": {
  "lineno": 264,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.sqrt",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test._MakeSlicer": {
  "lineno": 318,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.bernoulli_test._MakeSlicer.__getitem__": {
  "lineno": 320,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.entropy": {
  "lineno": 42,
  "symbols_in_volume": [
   "numpy.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.make_bernoulli": {
  "lineno": 36,
  "symbols_in_volume": [
   "numpy.random.uniform",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.beta.Beta": {
  "lineno": 45,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.beta.Beta.__init__": {
  "lineno": 148,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._batch_shape": {
  "lineno": 227,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._batch_shape_tensor": {
  "lineno": 220,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.broadcast_shape",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._cdf": {
  "lineno": 266,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.betainc",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._entropy": {
  "lineno": 285,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.digamma"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._event_shape": {
  "lineno": 234,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._event_shape_tensor": {
  "lineno": 231,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._log_cdf": {
  "lineno": 262,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._log_normalization": {
  "lineno": 281,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.lgamma"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._log_prob": {
  "lineno": 251,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._log_unnormalized_prob": {
  "lineno": 276,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.math.xlogy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._maybe_assert_valid_sample": {
  "lineno": 329,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_less",
   "tensorflow_probability.python.internal.assert_util.assert_positive"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._mean": {
  "lineno": 294,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._mode": {
  "lineno": 305,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.assert_util.assert_less",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._param_shapes": {
  "lineno": 190,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._parameter_control_dependencies": {
  "lineno": 337,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._params_event_ndims": {
  "lineno": 195,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._prob": {
  "lineno": 258,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._sample_n": {
  "lineno": 237,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.random.gamma",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._variance": {
  "lineno": 298,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta.concentration0": {
  "lineno": 204,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta.concentration1": {
  "lineno": 199,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta.total_concentration": {
  "lineno": 209,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta._kl_beta_beta": {
  "lineno": 349,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.digamma",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testAlphaProperty": {
  "lineno": 66,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testAssertsPositiveConcentration0": {
  "lineno": 381,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testAssertsPositiveConcentration0AfterMutation": {
  "lineno": 389,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testAssertsPositiveConcentration1": {
  "lineno": 354,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testAssertsPositiveConcentration1AfterMutation": {
  "lineno": 363,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaBetaKL": {
  "lineno": 310,
  "symbols_in_volume": [
   "numpy.random.random",
   "numpy.zeros_like",
   "scipy.special.betaln",
   "scipy.special.digamma"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaCdf": {
  "lineno": 288,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.float32",
   "numpy.float64",
   "numpy.ones",
   "numpy.random.random",
   "scipy.stats.beta.cdf"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaEntropy": {
  "lineno": 218,
  "symbols_in_volume": [
   "scipy.stats.beta.entropy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaFullyReparameterized": {
  "lineno": 247,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaLogCdf": {
  "lineno": 299,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.float32",
   "numpy.float64",
   "numpy.ones",
   "numpy.random.random",
   "scipy.stats.beta.cdf",
   "tensorflow.compat.v2.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaMean": {
  "lineno": 162,
  "symbols_in_volume": [
   "scipy.stats.beta.mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaMeanAfterMutation": {
  "lineno": 334,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaMode": {
  "lineno": 178,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaModeEnableAllowNanStats": {
  "lineno": 199,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.nan"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaModeInvalid": {
  "lineno": 186,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaProperty": {
  "lineno": 73,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaSample": {
  "lineno": 226,
  "symbols_in_volume": [
   "numpy.any",
   "numpy.cov",
   "scipy.stats.beta",
   "scipy.stats.beta.mean",
   "scipy.stats.beta.var",
   "scipy.stats.kstest",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaSampleMultidimensional": {
  "lineno": 274,
  "symbols_in_volume": [
   "numpy.any",
   "numpy.float32",
   "numpy.random.rand",
   "scipy.stats.beta.mean",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaSampleMultipleTimes": {
  "lineno": 256,
  "symbols_in_volume": [
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaVariance": {
  "lineno": 170,
  "symbols_in_volume": [
   "scipy.stats.beta.var"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testComplexShapes": {
  "lineno": 48,
  "symbols_in_volume": [
   "numpy.random.rand",
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testComplexShapesBroadcast": {
  "lineno": 57,
  "symbols_in_volume": [
   "numpy.random.rand",
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testGradientThroughConcentration0": {
  "lineno": 372,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testGradientThroughConcentration1": {
  "lineno": 345,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testLogPdfOnBoundaryIsFiniteWhenAlphaIsOne": {
  "lineno": 157,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.isfinite",
   "numpy.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testPdfAlphaStretchedInBroadcastWhenLowerRank": {
  "lineno": 133,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testPdfAlphaStretchedInBroadcastWhenSameRank": {
  "lineno": 124,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testPdfTwoBatches": {
  "lineno": 96,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testPdfTwoBatchesNontrivialX": {
  "lineno": 105,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testPdfUniformZeroBatch": {
  "lineno": 114,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testPdfXProper": {
  "lineno": 80,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testPdfXStretchedInBroadcastWhenLowerRank": {
  "lineno": 149,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testPdfXStretchedInBroadcastWhenSameRank": {
  "lineno": 141,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testSimpleShapes": {
  "lineno": 39,
  "symbols_in_volume": [
   "numpy.random.rand",
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial": {
  "lineno": 67,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial.__init__": {
  "lineno": 133,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._batch_shape": {
  "lineno": 214,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._batch_shape_tensor": {
  "lineno": 209,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._cdf": {
  "lineno": 237,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.tensorshape_util.is_compatible_with",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._event_shape": {
  "lineno": 221,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._event_shape_tensor": {
  "lineno": 218,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._log_prob": {
  "lineno": 224,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._logits_deprecated_behavior": {
  "lineno": 308,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._logits_parameter_no_checks": {
  "lineno": 292,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._maybe_assert_valid_sample": {
  "lineno": 337,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_less_equal",
   "tensorflow_probability.python.internal.distribution_util.embed_check_nonnegative_integer_form",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._mean": {
  "lineno": 272,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._mode": {
  "lineno": 278,
  "symbols_in_volume": [
   "tensorflow.compat.v2.floor",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._parameter_control_dependencies": {
  "lineno": 324,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.internal.assert_util.assert_non_negative",
   "tensorflow_probability.python.internal.distribution_util.assert_integer_form",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._params_event_ndims": {
  "lineno": 186,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._prob": {
  "lineno": 233,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._probs_deprecated_behavior": {
  "lineno": 316,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._probs_parameter_no_checks": {
  "lineno": 303,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.math.sigmoid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._sample_n": {
  "lineno": 249,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.stack",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.distributions.multinomial.draw_sample",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._variance": {
  "lineno": 275,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial.logits": {
  "lineno": 195,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial.logits_parameter": {
  "lineno": 287,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial.probs": {
  "lineno": 202,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial.probs_parameter": {
  "lineno": 298,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial.total_count": {
  "lineno": 190,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial._bdtr": {
  "lineno": 45,
  "symbols_in_volume": [
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.math.betainc",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial._log_normalization": {
  "lineno": 353,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.lgamma"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial._log_unnormalized_prob": {
  "lineno": 349,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialFromVariableTest": {
  "lineno": 262,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialFromVariableTest.testAssertionsTotalCount": {
  "lineno": 265,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.distributions.Binomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialFromVariableTest.testAssertionsTotalCountMutation": {
  "lineno": 272,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.distributions.Binomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.setUp": {
  "lineno": 35,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testBinomialMean": {
  "lineno": 162,
  "symbols_in_volume": [
   "scipy.stats.binom.mean",
   "tensorflow_probability.python.distributions.Binomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testBinomialMode": {
  "lineno": 178,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Binomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testBinomialMultipleMode": {
  "lineno": 186,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Binomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testBinomialVariance": {
  "lineno": 170,
  "symbols_in_volume": [
   "scipy.stats.binom.var",
   "tensorflow_probability.python.distributions.Binomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testComplexShapes": {
  "lineno": 46,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.beta",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.distributions.Binomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testLogitsProperty": {
  "lineno": 69,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Binomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testNProperty": {
  "lineno": 55,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Binomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testPProperty": {
  "lineno": 62,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Binomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testParamTensorFromLogits": {
  "lineno": 239,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow_probability.python.distributions.Binomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testParamTensorFromProbs": {
  "lineno": 250,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow_probability.python.distributions.Binomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testPmfAndCdfBothZeroBatches": {
  "lineno": 116,
  "symbols_in_volume": [
   "scipy.stats.binom.cdf",
   "tensorflow_probability.python.distributions.Binomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testPmfAndCdfBothZeroBatchesNontrivialN": {
  "lineno": 128,
  "symbols_in_volume": [
   "scipy.stats.binom.cdf",
   "scipy.stats.binom.pmf",
   "tensorflow_probability.python.distributions.Binomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testPmfAndCdfNandCountsAgree": {
  "lineno": 76,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Binomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testPmfAndCdfNonIntegerCounts": {
  "lineno": 93,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.distributions.Binomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testPmfAndCdfPStretchedInBroadcastWhenLowerRank": {
  "lineno": 151,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Binomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testPmfAndCdfPStretchedInBroadcastWhenSameRank": {
  "lineno": 140,
  "symbols_in_volume": [
   "scipy.stats.binom.cdf",
   "scipy.stats.binom.pmf",
   "tensorflow_probability.python.distributions.Binomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testSampleUnbiasedNonScalarBatch": {
  "lineno": 197,
  "symbols_in_volume": [
   "numpy.float32",
   "scipy.stats.binom.mean",
   "scipy.stats.binom.var",
   "tensorflow.compat.v2.nn.moments",
   "tensorflow_probability.python.distributions.Binomial",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testSampleUnbiasedScalarBatch": {
  "lineno": 218,
  "symbols_in_volume": [
   "numpy.float32",
   "scipy.stats.binom.mean",
   "scipy.stats.binom.var",
   "tensorflow.compat.v2.nn.moments",
   "tensorflow_probability.python.distributions.Binomial",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testSimpleShapes": {
  "lineno": 38,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.beta",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.distributions.Binomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.blockwise.Blockwise": {
  "lineno": 90,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.blockwise.Blockwise.__init__": {
  "lineno": 153,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.nest.flatten",
   "tensorflow.compat.v2.nest.map_structure",
   "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential",
   "tensorflow_probability.python.internal.dtype_util.base_dtype",
   "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise.Blockwise._batch_shape": {
  "lineno": 231,
  "symbols_in_volume": [
   "functools.reduce",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.nest.flatten",
   "tensorflow_probability.python.internal.tensorshape_util.merge_with"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise.Blockwise._batch_shape_tensor": {
  "lineno": 236,
  "symbols_in_volume": [
   "tensorflow.compat.v2.nest.flatten"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise.Blockwise._event_shape": {
  "lineno": 241,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.nest.flatten",
   "tensorflow.compat.v2.nest.map_structure",
   "tensorflow_probability.python.internal.tensorshape_util.num_elements"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise.Blockwise._event_shape_tensor": {
  "lineno": 248,
  "symbols_in_volume": [
   "tensorflow.compat.v2.nest.flatten",
   "tensorflow.compat.v2.nest.map_structure",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.tensorshape_util.num_elements"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise.Blockwise._flatten_and_concat_event": {
  "lineno": 262,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.nest.flatten",
   "tensorflow.compat.v2.nest.map_structure",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise.Blockwise._flatten_and_concat_event._reshape_part": {
  "lineno": 264,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.reshape",
   "tensorflow_probability.python.internal.prefer_static.cast",
   "tensorflow_probability.python.internal.prefer_static.concat",
   "tensorflow_probability.python.internal.prefer_static.rank_from_shape",
   "tensorflow_probability.python.internal.prefer_static.shape",
   "tensorflow_probability.python.internal.prefer_static.size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise.Blockwise._log_prob": {
  "lineno": 288,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.nest.flatten",
   "tensorflow.compat.v2.nest.map_structure",
   "tensorflow.compat.v2.nest.pack_sequence_as",
   "tensorflow.compat.v2.split",
   "tensorflow_probability.python.internal.assert_util.assert_rank_at_least",
   "tensorflow_probability.python.internal.prefer_static.maximum",
   "tensorflow_probability.python.internal.prefer_static.reduce_prod",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise.Blockwise._log_prob._reshape_part": {
  "lineno": 304,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.reshape",
   "tensorflow_probability.python.internal.prefer_static.cast",
   "tensorflow_probability.python.internal.prefer_static.concat",
   "tensorflow_probability.python.internal.prefer_static.rank_from_shape",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise.Blockwise._mean": {
  "lineno": 323,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise.Blockwise._parameter_control_dependencies": {
  "lineno": 326,
  "symbols_in_volume": [
   "tensorflow.compat.v2.nest.flatten",
   "tensorflow.compat.v2.nest.map_structure",
   "tensorflow.compat.v2.size",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise.Blockwise._sample_n": {
  "lineno": 285,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise.Blockwise.distributions": {
  "lineno": 227,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise._Cast": {
  "lineno": 43,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.blockwise._Cast.__init__": {
  "lineno": 46,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.distributions.distribution",
   "tensorflow_probability.python.distributions.distribution.allow_nan_stats",
   "tensorflow_probability.python.distributions.distribution.reparameterization_type",
   "tensorflow_probability.python.distributions.distribution.validate_args",
   "tensorflow_probability.python.internal.dtype_util.name"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise._Cast._batch_shape": {
  "lineno": 60,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise._Cast._batch_shape_tensor": {
  "lineno": 63,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise._Cast._event_shape": {
  "lineno": 66,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise._Cast._event_shape_tensor": {
  "lineno": 69,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise._Cast._log_prob": {
  "lineno": 76,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.nest.map_structure"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise._Cast._mean": {
  "lineno": 80,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.nest.map_structure"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise._Cast._sample_n": {
  "lineno": 72,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.nest.map_structure"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise._is_iterable": {
  "lineno": 35,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise._kl_blockwise_blockwise": {
  "lineno": 367,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise._kl_blockwise_cast": {
  "lineno": 85,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.blockwise_test.BlockwiseTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.blockwise_test.BlockwiseTest.testDocstring1": {
  "lineno": 35,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.zeros",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.eye",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise_test.BlockwiseTest.testDocstring2": {
  "lineno": 64,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise_test.BlockwiseTest.testDocstring2.model": {
  "lineno": 67,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise_test.BlockwiseTest.testKLBlockwise": {
  "lineno": 154,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.eye",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.linalg.LinearOperatorBlockDiag",
   "tensorflow.compat.v2.linalg.LinearOperatorIdentity",
   "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise_test.BlockwiseTest.testKlBlockwiseIsSum": {
  "lineno": 126,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise_test.BlockwiseTest.testVaryingBatchShapeErrorDynamicDims": {
  "lineno": 110,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise_test.BlockwiseTest.testVaryingBatchShapeErrorDynamicRank": {
  "lineno": 95,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise_test.BlockwiseTest.testVaryingBatchShapeErrorStatic": {
  "lineno": 84,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise_test.BlockwiseTestDynamicParams": {
  "lineno": 438,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.blockwise_test.BlockwiseTestStaticParams": {
  "lineno": 200,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.blockwise_test.BlockwiseTestStaticParams._MakeModelFn": {
  "lineno": 266,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise_test.BlockwiseTestStaticParams._MakeModelFn.model_fn": {
  "lineno": 269,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise_test.BlockwiseTestStaticParams._input": {
  "lineno": 204,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise_test.BlockwiseTestStaticParams.testDistributionList": {
  "lineno": 366,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "numpy.cumsum",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise_test.BlockwiseTestStaticParams.testJointDistribution": {
  "lineno": 277,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "numpy.cumsum",
   "tensorflow.compat.v2.nest.flatten",
   "tensorflow.compat.v2.nest.pack_sequence_as",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise_test.BlockwiseTestStaticParams.testSingleTensor": {
  "lineno": 210,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical": {
  "lineno": 62,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical.__init__": {
  "lineno": 152,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical._batch_shape": {
  "lineno": 240,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical._batch_shape_tensor": {
  "lineno": 235,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical._cdf": {
  "lineno": 261,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.clip_by_value",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.cumsum",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.internal.dtype_util.base_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical._entropy": {
  "lineno": 305,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.exp",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.multiply_no_nan",
   "tensorflow.compat.v2.reduce_max",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical._event_shape": {
  "lineno": 247,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical._event_shape_tensor": {
  "lineno": 244,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical._log_prob": {
  "lineno": 295,
  "symbols_in_volume": [
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.nn.sparse_softmax_cross_entropy_with_logits",
   "tensorflow_probability.python.internal.distribution_util.embed_check_integer_casting_closed",
   "tensorflow_probability.python.internal.dtype_util.base_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical._logits_deprecated_behavior": {
  "lineno": 366,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical._logits_parameter_no_checks": {
  "lineno": 341,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical._mode": {
  "lineno": 330,
  "symbols_in_volume": [
   "tensorflow.compat.v2.argmax",
   "tensorflow.compat.v2.cast",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical._num_categories": {
  "lineno": 356,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical._parameter_control_dependencies": {
  "lineno": 382,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical._params_event_ndims": {
  "lineno": 200,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical._probs_deprecated_behavior": {
  "lineno": 374,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical._probs_parameter_no_checks": {
  "lineno": 351,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.math.softmax"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical._sample_n": {
  "lineno": 250,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.int64",
   "tensorflow.compat.v2.random.categorical",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.transpose",
   "tensorflow_probability.python.internal.dtype_util.size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical.logits": {
  "lineno": 221,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical.logits_parameter": {
  "lineno": 336,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical.num_categories": {
  "lineno": 204,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical.probs": {
  "lineno": 228,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical.probs_parameter": {
  "lineno": 346,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical._broadcast_cat_event_and_params": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.dtype_util.is_floating",
   "tensorflow_probability.python.internal.dtype_util.is_integer",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
   "tensorflow_probability.python.internal.tensorshape_util.rank",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical._kl_categorical_categorical": {
  "lineno": 436,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log_softmax",
   "tensorflow.compat.v2.math.softmax",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.maybe_assert_categorical_param_correctness": {
  "lineno": 387,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.assert_util.assert_near",
   "tensorflow_probability.python.internal.assert_util.assert_non_negative",
   "tensorflow_probability.python.internal.assert_util.assert_rank_at_least",
   "tensorflow_probability.python.internal.distribution_util.assert_categorical_event_shape",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.internal.dtype_util.is_floating",
   "tensorflow_probability.python.internal.tensor_util.is_ref",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalFromVariableTest": {
  "lineno": 504,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalFromVariableTest.testAssertionsLogits": {
  "lineno": 532,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.util.DeferredTensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalFromVariableTest.testAssertionsProbs": {
  "lineno": 525,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalFromVariableTest.testGradientLogits": {
  "lineno": 507,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalFromVariableTest.testGradientProbs": {
  "lineno": 516,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest": {
  "lineno": 43,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testBroadcastWithBatchParamsAndBiggerEvent": {
  "lineno": 234,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testCDFBroadcasting": {
  "lineno": 209,
  "symbols_in_volume": [
   "numpy.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testCDFNoBatch": {
  "lineno": 200,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testCDFWithBatch": {
  "lineno": 174,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testCDFWithBatchAndFloatDtype": {
  "lineno": 187,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testCDFWithDynamicEventShapeKnownNdims": {
  "lineno": 129,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testCDFWithDynamicEventShapeUnknownNdims": {
  "lineno": 158,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testCategoricalCategoricalKL": {
  "lineno": 453,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.random.randn",
   "numpy.sum",
   "numpy.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testCategoricalCategoricalKL.np_softmax": {
  "lineno": 455,
  "symbols_in_volume": [
   "numpy.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testDtype": {
  "lineno": 84,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int64",
   "tensorflow.compat.v2.float16",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.int64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testEntropyGradient": {
  "lineno": 323,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.log_softmax",
   "tensorflow.compat.v2.math.softmax",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testEntropyNoBatch": {
  "lineno": 308,
  "symbols_in_volume": [
   "numpy.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testEntropyWithBatch": {
  "lineno": 315,
  "symbols_in_volume": [
   "numpy.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testEntropyWithNegInfLogits": {
  "lineno": 356,
  "symbols_in_volume": [
   "numpy.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testEntropyWithZeroProbabilities": {
  "lineno": 348,
  "symbols_in_volume": [
   "numpy.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testLogPMF": {
  "lineno": 300,
  "symbols_in_volume": [
   "numpy.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testLogPMFBroadcasting": {
  "lineno": 396,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testLogPMFShape": {
  "lineno": 423,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testLogPMFShapeNoBatch": {
  "lineno": 436,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testLogits": {
  "lineno": 52,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testMode": {
  "lineno": 448,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testNotReparameterized": {
  "lineno": 390,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testP": {
  "lineno": 46,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testPMFNoBatch": {
  "lineno": 124,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testPMFWithBatch": {
  "lineno": 119,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testParamTensorFromLogits": {
  "lineno": 481,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.softmax"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testParamTensorFromProbs": {
  "lineno": 493,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testSample": {
  "lineno": 364,
  "symbols_in_volume": [
   "numpy.any",
   "numpy.mean",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.math.log",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testSampleWithSampleShape": {
  "lineno": 379,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testShapes": {
  "lineno": 59,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testUnknownShape": {
  "lineno": 106,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.make_categorical": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.random.uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy.__init__": {
  "lineno": 95,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._batch_shape": {
  "lineno": 164,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._batch_shape_tensor": {
  "lineno": 159,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.broadcast_shape",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._cdf": {
  "lineno": 188,
  "symbols_in_volume": [
   "numpy.pi",
   "tensorflow.compat.v2.atan"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._entropy": {
  "lineno": 194,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._event_shape": {
  "lineno": 170,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._event_shape_tensor": {
  "lineno": 167,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._inv_z": {
  "lineno": 213,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._log_cdf": {
  "lineno": 191,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.atan",
   "tensorflow.compat.v2.math.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._log_prob": {
  "lineno": 182,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.square"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._mean": {
  "lineno": 218,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.fill",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._mode": {
  "lineno": 203,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._param_shapes": {
  "lineno": 139,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._parameter_control_dependencies": {
  "lineno": 232,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._params_event_ndims": {
  "lineno": 145,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._quantile": {
  "lineno": 198,
  "symbols_in_volume": [
   "numpy.pi",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.tan"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._sample_n": {
  "lineno": 173,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.random.uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._stddev": {
  "lineno": 225,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.fill",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._z": {
  "lineno": 206,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy.loc": {
  "lineno": 149,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy.scale": {
  "lineno": 154,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest._testParamShapes": {
  "lineno": 49,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest._testParamStaticShapes": {
  "lineno": 60,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.assertAllFinite": {
  "lineno": 44,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.isfinite",
   "numpy.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.setUp": {
  "lineno": 41,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testAssertsPositiveScale": {
  "lineno": 408,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.float64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testAssertsPositiveScaleAfterMutation": {
  "lineno": 418,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyCDF": {
  "lineno": 139,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.linspace",
   "scipy.stats.cauchy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyEntropy": {
  "lineno": 235,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.cauchy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyLogCDF": {
  "lineno": 174,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.linspace",
   "scipy.stats.cauchy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyLogPDF": {
  "lineno": 76,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "numpy.sqrt",
   "scipy.stats.cauchy",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyLogPDFMultidimensional": {
  "lineno": 105,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "numpy.sqrt",
   "scipy.stats.cauchy",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyLogSurvivalFunction": {
  "lineno": 216,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.linspace",
   "scipy.stats.cauchy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyMean": {
  "lineno": 262,
  "symbols_in_volume": [
   "numpy.nan"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyMode": {
  "lineno": 252,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyNanMean": {
  "lineno": 270,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyNanStandardDeviation": {
  "lineno": 324,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyNanVariance": {
  "lineno": 306,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyNegativeScaleFails": {
  "lineno": 380,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyQuantile": {
  "lineno": 278,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.linspace",
   "scipy.stats.cauchy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchySample": {
  "lineno": 333,
  "symbols_in_volume": [
   "numpy.median",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchySampleMultiDimensional": {
  "lineno": 357,
  "symbols_in_volume": [
   "numpy.median",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyShape": {
  "lineno": 385,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyShapeWithPlaceholders": {
  "lineno": 395,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyStandardDeviation": {
  "lineno": 315,
  "symbols_in_volume": [
   "numpy.nan"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchySurvivalFunction": {
  "lineno": 156,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.linspace",
   "scipy.stats.cauchy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyVariance": {
  "lineno": 297,
  "symbols_in_volume": [
   "numpy.nan"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testFiniteGradientAtDifficultPoints": {
  "lineno": 193,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.float64",
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.math.value_and_gradient",
   "tensorflow_probability.python.internal.test_util.numpy_disable_gradient_test"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testFiniteGradientAtDifficultPoints.cauchy_function": {
  "lineno": 199,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testFiniteGradientAtDifficultPoints.cauchy_function.cauchy": {
  "lineno": 200,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testParamShapes": {
  "lineno": 66,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testParamStaticShapes": {
  "lineno": 71,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.chi.Chi": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.chi.Chi.__init__": {
  "lineno": 62,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.bijectors.invert.Invert",
   "tensorflow_probability.python.bijectors.square.Square",
   "tensorflow_probability.python.distributions.chi2.Chi2",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi.Chi._entropy": {
  "lineno": 116,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.digamma",
   "tensorflow.compat.v2.math.lgamma"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi.Chi._mean": {
  "lineno": 107,
  "symbols_in_volume": [
   "numpy.sqrt",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.lgamma"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi.Chi._parameter_control_dependencies": {
  "lineno": 122,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi.Chi._params_event_ndims": {
  "lineno": 98,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi.Chi._variance": {
  "lineno": 112,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi.Chi.df": {
  "lineno": 102,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi._kl_chi_chi": {
  "lineno": 132,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.digamma",
   "tensorflow.compat.v2.math.lgamma",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.chi2.Chi2": {
  "lineno": 39,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.chi2.Chi2.__init__": {
  "lineno": 66,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2.Chi2._batch_shape": {
  "lineno": 114,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2.Chi2._batch_shape_tensor": {
  "lineno": 111,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2.Chi2._cdf": {
  "lineno": 143,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.math.igamma"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2.Chi2._entropy": {
  "lineno": 147,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.digamma",
   "tensorflow.compat.v2.math.lgamma",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2.Chi2._event_shape": {
  "lineno": 120,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2.Chi2._event_shape_tensor": {
  "lineno": 117,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2.Chi2._log_prob": {
  "lineno": 134,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.lgamma",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.xlogy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2.Chi2._maybe_assert_valid_sample": {
  "lineno": 179,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2.Chi2._mean": {
  "lineno": 154,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2.Chi2._mode": {
  "lineno": 160,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.assert_util.assert_less",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2.Chi2._param_shapes": {
  "lineno": 99,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2.Chi2._parameter_control_dependencies": {
  "lineno": 184,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2.Chi2._params_event_ndims": {
  "lineno": 103,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2.Chi2._sample_n": {
  "lineno": 123,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.random.gamma",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2.Chi2._variance": {
  "lineno": 157,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2.Chi2.df": {
  "lineno": 107,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2._kl_chi2_chi2": {
  "lineno": 194,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2._kl_chi2_gamma": {
  "lineno": 202,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.gamma.Gamma",
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2._kl_gamma_chi2": {
  "lineno": 210,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.gamma.Gamma",
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2._kl_gamma_gamma": {
  "lineno": 218,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.math.digamma",
   "tensorflow.compat.v2.math.lgamma",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.chi2_test.Chi2Test": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.chi2_test.Chi2Test.testAssertsPositiveDf": {
  "lineno": 143,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2_test.Chi2Test.testAssertsPositiveDfAfterMutation": {
  "lineno": 150,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2_test.Chi2Test.testChi2CDF": {
  "lineno": 61,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float64",
   "scipy.stats.chi2.cdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2_test.Chi2Test.testChi2Chi2KL": {
  "lineno": 95,
  "symbols_in_volume": [
   "numpy.arange",
   "scipy.special.digamma",
   "scipy.special.gammaln",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2_test.Chi2Test.testChi2Entropy": {
  "lineno": 88,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float64",
   "scipy.stats.chi2.entropy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2_test.Chi2Test.testChi2LogPDF": {
  "lineno": 37,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float64",
   "scipy.stats.chi2.logpdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2_test.Chi2Test.testChi2Mean": {
  "lineno": 74,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float64",
   "scipy.stats.chi2.mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2_test.Chi2Test.testChi2Variance": {
  "lineno": 81,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float64",
   "scipy.stats.chi2.var"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2_test.Chi2Test.testGradientThroughNonVariableParams": {
  "lineno": 133,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2_test.Chi2Test.testGradientThroughParams": {
  "lineno": 124,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.float64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2_test.Chi2Test.testLogPdfAssertsOnInvalidSample": {
  "lineno": 53,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.chi_test.ChiTest": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.chi_test.ChiTest.testAssertsPositiveDf": {
  "lineno": 140,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi_test.ChiTest.testAssertsPositiveDfAfterMutation": {
  "lineno": 147,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi_test.ChiTest.testChiCDF": {
  "lineno": 65,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.broadcast",
   "numpy.float64",
   "scipy.stats.chi.cdf"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi_test.ChiTest.testChiChiKL": {
  "lineno": 100,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.float64",
   "scipy.special.digamma",
   "scipy.special.gammaln",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi_test.ChiTest.testChiEntropy": {
  "lineno": 93,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.float64",
   "scipy.stats.chi.entropy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi_test.ChiTest.testChiLogPDF": {
  "lineno": 39,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.broadcast",
   "numpy.exp",
   "numpy.float64",
   "scipy.stats.chi.logpdf"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi_test.ChiTest.testChiMean": {
  "lineno": 79,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.float64",
   "scipy.stats.chi.mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi_test.ChiTest.testChiVariance": {
  "lineno": 86,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.float64",
   "scipy.stats.chi.var"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi_test.ChiTest.testGradientThroughParams": {
  "lineno": 131,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.float64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi_test.ChiTest.testLogPdfAssertsOnInvalidSample": {
  "lineno": 57,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deprecated_linalg": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.deprecated_linalg.matrix_diag_transform": {
  "lineno": 95,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.linalg.set_diag",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deprecated_linalg.tridiag": {
  "lineno": 26,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.linalg.diag",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deprecated_linalg.tridiag._add": {
  "lineno": 66,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deprecated_linalg.tridiag._pad": {
  "lineno": 60,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deprecated_linalg_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.deprecated_linalg_test.TridiagTest": {
  "lineno": 28,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.deprecated_linalg_test.TridiagTest.testHandlesNone": {
  "lineno": 61,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.deprecated_linalg.tridiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deprecated_linalg_test.TridiagTest.testWorksCorrectlyBatches": {
  "lineno": 42,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.deprecated_linalg.tridiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deprecated_linalg_test.TridiagTest.testWorksCorrectlyNoBatches": {
  "lineno": 31,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.deprecated_linalg.tridiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.deterministic.Deterministic": {
  "lineno": 183,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.deterministic.Deterministic.__init__": {
  "lineno": 222,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.Deterministic._batch_shape": {
  "lineno": 278,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.Deterministic._batch_shape_tensor": {
  "lineno": 273,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.Deterministic._cdf": {
  "lineno": 296,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.identity"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.Deterministic._event_shape": {
  "lineno": 287,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.Deterministic._event_shape_tensor": {
  "lineno": 283,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.Deterministic._params_event_ndims": {
  "lineno": 269,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.Deterministic._prob": {
  "lineno": 290,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.VectorDeterministic": {
  "lineno": 301,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.deterministic.VectorDeterministic.__init__": {
  "lineno": 341,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.VectorDeterministic._batch_shape": {
  "lineno": 402,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.VectorDeterministic._batch_shape_tensor": {
  "lineno": 396,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.VectorDeterministic._event_shape": {
  "lineno": 410,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.VectorDeterministic._event_shape_tensor": {
  "lineno": 407,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.VectorDeterministic._params_event_ndims": {
  "lineno": 392,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.VectorDeterministic._prob": {
  "lineno": 413,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reduce_all",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.assert_util.assert_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic._BaseDeterministic": {
  "lineno": 41,
  "symbols_in_volume": [
   "abc.ABCMeta",
   "six.add_metaclass",
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.deterministic._BaseDeterministic.__init__": {
  "lineno": 45,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic._BaseDeterministic._entropy": {
  "lineno": 133,
  "symbols_in_volume": [
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic._BaseDeterministic._mean": {
  "lineno": 136,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic._BaseDeterministic._mode": {
  "lineno": 142,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic._BaseDeterministic._parameter_control_dependencies": {
  "lineno": 154,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_non_negative",
   "tensorflow_probability.python.internal.assert_util.assert_rank_at_least",
   "tensorflow_probability.python.internal.tensor_util.is_ref",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic._BaseDeterministic._sample_n": {
  "lineno": 145,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic._BaseDeterministic._slack": {
  "lineno": 111,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic._BaseDeterministic._variance": {
  "lineno": 139,
  "symbols_in_volume": [
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic._BaseDeterministic.atol": {
  "lineno": 123,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic._BaseDeterministic.loc": {
  "lineno": 118,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic._BaseDeterministic.rtol": {
  "lineno": 128,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic._kl_deterministic_distribution": {
  "lineno": 431,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.distributions.distribution.Distribution",
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test": {
  "lineno": null,
  "symbols_in_volume": [
   "numpy.random.RandomState",
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testCdfWithDefaultTol": {
  "lineno": 129,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testCdfWithNonzeroATol": {
  "lineno": 138,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testCdfWithNonzeroRTol": {
  "lineno": 147,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testDeterministicDeterministicKL": {
  "lineno": 199,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.inf",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testDeterministicGammaKL": {
  "lineno": 211,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testEntropy": {
  "lineno": 193,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testInvalidTolRaises": {
  "lineno": 45,
  "symbols_in_volume": [
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testLogProbWithDefaultTolInt32Loc": {
  "lineno": 72,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testProbWithDefaultTol": {
  "lineno": 63,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testProbWithNoBatchDims": {
  "lineno": 57,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testProbWithNoBatchDimsIntegerType": {
  "lineno": 51,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testProbWithNonzeroATol": {
  "lineno": 81,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testProbWithNonzeroATolIntegerType": {
  "lineno": 90,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testProbWithNonzeroRTol": {
  "lineno": 99,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testProbWithNonzeroRTolIntegerType": {
  "lineno": 118,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testProbWithRTolBcastsLoc": {
  "lineno": 108,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testSampleDynamicWithBatchDims": {
  "lineno": 182,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.int32",
   "numpy.zeros",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testSampleNoBatchDims": {
  "lineno": 156,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testSampleWithBatchAtol": {
  "lineno": 173,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testSampleWithBatchDims": {
  "lineno": 164,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testShape": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testVariableAssertions": {
  "lineno": 234,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.errors.InvalidArgumentError"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testVariableGradients": {
  "lineno": 225,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest": {
  "lineno": 255,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testEntropy": {
  "lineno": 388,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testInvalidTolRaises": {
  "lineno": 284,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.errors.InvalidArgumentError"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testInvalidXRaises": {
  "lineno": 291,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.errors.InvalidArgumentError"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testParamBroadcasts": {
  "lineno": 257,
  "symbols_in_volume": [
   "numpy.abs",
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testProbVectorDeterministicWithNoBatchDims": {
  "lineno": 298,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testProbVectorDeterministicWithNoBatchDimsOnRZero": {
  "lineno": 347,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testProbVectorDeterministicWithNoBatchDimsOnRZeroRaisesIfXNotInSameRk": {
  "lineno": 352,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testProbWithATolBcastsLoc": {
  "lineno": 326,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testProbWithDefaultTol": {
  "lineno": 306,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testProbWithNonzeroATol": {
  "lineno": 316,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testProbWithNonzeroRTol": {
  "lineno": 337,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testSampleDynamicWithBatchDims": {
  "lineno": 377,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.int32",
   "numpy.zeros",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testSampleNoBatchDims": {
  "lineno": 359,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testSampleWithBatchDims": {
  "lineno": 368,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testShape": {
  "lineno": 269,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testShapeUknown": {
  "lineno": 279,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testVariableAssertions": {
  "lineno": 431,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.errors.InvalidArgumentError"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testVariableGradients": {
  "lineno": 422,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testVectorDeterministicMultivariateNormalDiagKL": {
  "lineno": 407,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testVectorDeterministicVectorDeterministicKL": {
  "lineno": 394,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.inf",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet": {
  "lineno": 47,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet.__init__": {
  "lineno": 158,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._batch_shape": {
  "lineno": 218,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._batch_shape_tensor": {
  "lineno": 215,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._covariance": {
  "lineno": 257,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.linalg.set_diag",
   "tensorflow.compat.v2.math.rsqrt",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._entropy": {
  "lineno": 243,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.digamma",
   "tensorflow.compat.v2.math.lbeta",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._event_shape": {
  "lineno": 224,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._event_shape_tensor": {
  "lineno": 221,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._log_prob": {
  "lineno": 232,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.lbeta",
   "tensorflow.compat.v2.math.xlogy",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._maybe_assert_valid_sample": {
  "lineno": 300,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.assert_util.assert_near",
   "tensorflow_probability.python.internal.assert_util.assert_positive"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._mean": {
  "lineno": 252,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._mode": {
  "lineno": 276,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.reduce_all",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.assert_util.assert_less",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._parameter_control_dependencies": {
  "lineno": 312,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.assert_util.assert_less",
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.assert_util.assert_rank_at_least",
   "tensorflow_probability.python.internal.dtype_util.is_floating",
   "tensorflow_probability.python.internal.tensor_util.is_ref",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._params_event_ndims": {
  "lineno": 195,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._prob": {
  "lineno": 239,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._sample_n": {
  "lineno": 227,
  "symbols_in_volume": [
   "tensorflow.compat.v2.random.gamma",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._variance": {
  "lineno": 268,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.rsqrt",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet.concentration": {
  "lineno": 199,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet.total_concentration": {
  "lineno": 204,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet._kl_dirichlet_dirichlet": {
  "lineno": 354,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.digamma",
   "tensorflow.compat.v2.math.lbeta",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial": {
  "lineno": 54,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial.__init__": {
  "lineno": 164,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._batch_shape": {
  "lineno": 258,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.broadcast_static_shape",
   "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._batch_shape_tensor": {
  "lineno": 249,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._compute_total_concentration": {
  "lineno": 244,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._covariance": {
  "lineno": 325,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.linalg.set_diag",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.newaxis",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._event_shape": {
  "lineno": 271,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._event_shape_tensor": {
  "lineno": 265,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._log_prob": {
  "lineno": 300,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.lbeta",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
   "tensorflow_probability.python.math.log_combinations"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._maybe_assert_valid_sample": {
  "lineno": 376,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.distribution_util.embed_check_nonnegative_integer_form",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._mean": {
  "lineno": 314,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.newaxis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._parameter_control_dependencies": {
  "lineno": 388,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.distribution_util.assert_categorical_event_shape",
   "tensorflow_probability.python.internal.distribution_util.assert_nonnegative_integer_form",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._params_event_ndims": {
  "lineno": 217,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._prob": {
  "lineno": 310,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._sample_n": {
  "lineno": 275,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.multiply",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.random.gamma",
   "tensorflow.compat.v2.reshape",
   "tensorflow_probability.python.distributions.multinomial.draw_sample",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._variance": {
  "lineno": 354,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.newaxis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._variance_scale_term": {
  "lineno": 364,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.sqrt"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial.compute_total_concentration": {
  "lineno": 239,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial.concentration": {
  "lineno": 226,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial.total_concentration": {
  "lineno": 231,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial.total_count": {
  "lineno": 221,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialFromVariableTest": {
  "lineno": 466,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialFromVariableTest.testAssertionCategoricalEventShape": {
  "lineno": 469,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float16",
   "tensorflow.compat.v2.ones"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialFromVariableTest.testAssertionIntegerFormTotalCount": {
  "lineno": 504,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.errors.InvalidArgumentError"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialFromVariableTest.testAssertionIntegerFormTotalCountAfterMutation": {
  "lineno": 516,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.errors.InvalidArgumentError"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialFromVariableTest.testAssertionNonNegativeTotalCount": {
  "lineno": 478,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.errors.InvalidArgumentError"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialFromVariableTest.testAssertionNonNegativeTotalCountAfterMutation": {
  "lineno": 490,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.errors.InvalidArgumentError"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialFromVariableTest.testAssertionPositiveConcentration": {
  "lineno": 530,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.errors.InvalidArgumentError"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialFromVariableTest.testAssertionPositiveConcentrationAfterMutation": {
  "lineno": 542,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.errors.InvalidArgumentError"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.setUp": {
  "lineno": 36,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testAlphaProperty": {
  "lineno": 64,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testComplexShapes": {
  "lineno": 47,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float64",
   "numpy.random.rand",
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testCovariance": {
  "lineno": 245,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.squeeze",
   "numpy.sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testCovarianceFromSampling": {
  "lineno": 199,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testCovarianceMultidimensional": {
  "lineno": 313,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.rand",
   "numpy.random.randint"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testCovarianceNAlphaBroadcast": {
  "lineno": 276,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v2.newaxis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testLargeTauGivesPreciseProbabilities": {
  "lineno": 338,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testMeanDoubleTwoVotes": {
  "lineno": 184,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testNonStrictTurnsOffAllChecks": {
  "lineno": 391,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testNotReparameterized": {
  "lineno": 454,
  "symbols_in_volume": [
   "tensorflow.compat.v1.control_flow_v2_enabled",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testNproperty": {
  "lineno": 57,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testPmfAlphaStretchedInBroadcastWhenLowerRank": {
  "lineno": 142,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testPmfAlphaStretchedInBroadcastWhenSameRank": {
  "lineno": 132,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testPmfBothZeroBatches": {
  "lineno": 99,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testPmfBothZeroBatchesMultidimensionalN": {
  "lineno": 121,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.full"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testPmfBothZeroBatchesNontrivialN": {
  "lineno": 110,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testPmfCountsStretchedInBroadcastWhenLowerRank": {
  "lineno": 160,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testPmfCountsStretchedInBroadcastWhenSameRank": {
  "lineno": 151,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testPmfForOneVoteIsTheMeanWithOneRecordInput": {
  "lineno": 169,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testPmfNandCountsAgree": {
  "lineno": 70,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testPmfNonIntegerCounts": {
  "lineno": 82,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testSampleUnbiasedNonScalarBatch": {
  "lineno": 399,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.transpose",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testSampleUnbiasedScalarBatch": {
  "lineno": 427,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testSimpleShapes": {
  "lineno": 39,
  "symbols_in_volume": [
   "numpy.random.rand",
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testSmallTauPrefersCorrelatedResults": {
  "lineno": 366,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testZeroCountsResultsInPmfEqualToOne": {
  "lineno": 328,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletFromVariableTest": {
  "lineno": 290,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletFromVariableTest.testAssertions": {
  "lineno": 302,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.exp",
   "tensorflow_probability.util.DeferredTensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletFromVariableTest.testGradients": {
  "lineno": 293,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testComplexShapes": {
  "lineno": 46,
  "symbols_in_volume": [
   "numpy.random.rand",
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testConcentrationProperty": {
  "lineno": 54,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testCovarianceFromSampling": {
  "lineno": 151,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testDegenerateAlignedStridedSlice": {
  "lineno": 281,
  "symbols_in_volume": [
   "numpy.zeros",
   "tensorflow.compat.v2.math.softplus",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testDirichletDirichletKL": {
  "lineno": 250,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.sum",
   "numpy.zeros_like",
   "scipy.special.digamma",
   "scipy.special.gammaln",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testDirichletFullyReparameterized": {
  "lineno": 244,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testEntropy": {
  "lineno": 222,
  "symbols_in_volume": [
   "scipy.stats.dirichlet.entropy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testLogPdfOnBoundaryIsFiniteWhenAlphaIsOne": {
  "lineno": 73,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.float32",
   "numpy.isfinite",
   "numpy.ones",
   "numpy.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testMean": {
  "lineno": 144,
  "symbols_in_volume": [
   "scipy.stats.dirichlet.mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testMode": {
  "lineno": 199,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testModeEnableAllowNanStats": {
  "lineno": 213,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.nan",
   "numpy.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testModeInvalid": {
  "lineno": 206,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testPdfAlphaStretchedInBroadcastWhenLowerRank": {
  "lineno": 123,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testPdfAlphaStretchedInBroadcastWhenSameRank": {
  "lineno": 115,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testPdfUniformZeroBatches": {
  "lineno": 106,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testPdfXProper": {
  "lineno": 60,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testPdfXStretchedInBroadcastWhenLowerRank": {
  "lineno": 137,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testPdfXStretchedInBroadcastWhenSameRank": {
  "lineno": 130,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testPdfZeroBatches": {
  "lineno": 90,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testPdfZeroBatchesNontrivialX": {
  "lineno": 98,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testSample": {
  "lineno": 229,
  "symbols_in_volume": [
   "numpy.all",
   "scipy.stats.beta",
   "scipy.stats.kstest",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testSimpleShapes": {
  "lineno": 38,
  "symbols_in_volume": [
   "numpy.random.rand",
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testVariance": {
  "lineno": 188,
  "symbols_in_volume": [
   "numpy.diag",
   "numpy.sum",
   "scipy.stats.dirichlet.var"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution": {
  "lineno": 298,
  "symbols_in_volume": [
   "six.add_metaclass"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.__getitem__": {
  "lineno": 614,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.internal.slicing.batch_slice"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.__init__": {
  "lineno": 436,
  "symbols_in_volume": [
   "tensorflow.compat.v2.group",
   "tensorflow.compat.v2.is_tensor",
   "tensorflow_probability.python.internal.name_util.camel_to_lower_snake",
   "tensorflow_probability.python.internal.name_util.get_name_scope_name",
   "tensorflow_probability.python.internal.name_util.strip_invalid_chars"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.__iter__": {
  "lineno": 643,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.__repr__": {
  "lineno": 1311,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.__str__": {
  "lineno": 1287,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._batch_shape": {
  "lineno": 734,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._batch_shape_tensor": {
  "lineno": 710,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._call_cdf": {
  "lineno": 938,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._call_log_cdf": {
  "lineno": 902,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._call_log_prob": {
  "lineno": 850,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._call_log_survival_function": {
  "lineno": 975,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._call_prob": {
  "lineno": 876,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._call_quantile": {
  "lineno": 1075,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._call_sample_n": {
  "lineno": 818,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._call_survival_function": {
  "lineno": 1018,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._covariance": {
  "lineno": 1168,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._cross_entropy": {
  "lineno": 1221,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.kullback_leibler.cross_entropy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._entropy": {
  "lineno": 1053,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._event_shape": {
  "lineno": 772,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._event_shape_tensor": {
  "lineno": 751,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._expand_sample_shape_to_vector": {
  "lineno": 1339,
  "symbols_in_volume": [
   "numpy.prod",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow_probability.python.internal.distribution_util.expand_to_vector",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._is_scalar_helper": {
  "lineno": 1394,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.tensorshape_util.as_list",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._kl_divergence": {
  "lineno": 1250,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._log_survival_function": {
  "lineno": 970,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._mean": {
  "lineno": 1062,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._mode": {
  "lineno": 1212,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._name_and_control_scope": {
  "lineno": 1323,
  "symbols_in_volume": [
   "contextlib.contextmanager",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._param_shapes": {
  "lineno": 560,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._parameter_control_dependencies": {
  "lineno": 1406,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._params_event_ndims": {
  "lineno": 588,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._quantile": {
  "lineno": 1071,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._sample_n": {
  "lineno": 814,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._set_sample_static_shape": {
  "lineno": 1350,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow_probability.python.internal.tensorshape_util.concatenate",
   "tensorflow_probability.python.internal.tensorshape_util.rank",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._stddev": {
  "lineno": 1134,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._survival_function": {
  "lineno": 1014,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._variance": {
  "lineno": 1101,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.allow_nan_stats": {
  "lineno": 658,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.batch_shape": {
  "lineno": 737,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.batch_shape_tensor": {
  "lineno": 714,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.internal.tensorshape_util.as_list",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.cdf": {
  "lineno": 950,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.copy": {
  "lineno": 680,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.internal.slicing.batch_slice"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.covariance": {
  "lineno": 1172,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.cross_entropy": {
  "lineno": 1225,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.dtype": {
  "lineno": 569,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.entropy": {
  "lineno": 1057,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.event_shape": {
  "lineno": 775,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.event_shape_tensor": {
  "lineno": 755,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.internal.tensorshape_util.as_list",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.is_scalar_batch": {
  "lineno": 800,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.is_scalar_event": {
  "lineno": 786,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.kl_divergence": {
  "lineno": 1254,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.log_cdf": {
  "lineno": 914,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.log_prob": {
  "lineno": 862,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.log_survival_function": {
  "lineno": 988,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.mean": {
  "lineno": 1066,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.mode": {
  "lineno": 1216,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.name": {
  "lineno": 564,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.param_shapes": {
  "lineno": 500,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.param_static_shapes": {
  "lineno": 521,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow_probability.python.internal.tensorshape_util.as_list",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.parameters": {
  "lineno": 574,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.prob": {
  "lineno": 888,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.quantile": {
  "lineno": 1081,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.reparameterization_type": {
  "lineno": 646,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.sample": {
  "lineno": 833,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.stddev": {
  "lineno": 1138,
  "symbols_in_volume": [
   "tensorflow.compat.v2.sqrt"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.survival_function": {
  "lineno": 1031,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.validate_args": {
  "lineno": 675,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.variance": {
  "lineno": 1105,
  "symbols_in_volume": [
   "tensorflow.compat.v2.square"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution._BaseDistribution": {
  "lineno": 73,
  "symbols_in_volume": [
   "abc.ABCMeta",
   "six.add_metaclass",
   "tensorflow.compat.v2.Module"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution._DistributionMeta": {
  "lineno": 183,
  "symbols_in_volume": [
   "abc.ABCMeta"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution._DistributionMeta.__new__": {
  "lineno": 186,
  "symbols_in_volume": [
   "tensorflow.python.util.tf_inspect.getdoc"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution._DistributionMeta.__new__.wrapped_init": {
  "lineno": 267,
  "symbols_in_volume": [
   "decorator.decorator",
   "inspect.getcallargs"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution._PrettyDict": {
  "lineno": 1422,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution._PrettyDict.__repr__": {
  "lineno": 1429,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution._PrettyDict.__str__": {
  "lineno": 1425,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution._convert_to_tensor": {
  "lineno": 133,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.nest.is_nested",
   "tensorflow.compat.v2.nest.map_structure"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution._copy_fn": {
  "lineno": 79,
  "symbols_in_volume": [
   "types.FunctionType"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution._recursively_replace_dict_for_pretty_dict": {
  "lineno": 1434,
  "symbols_in_volume": [
   "collections.Mapping",
   "collections.Sequence",
   "six.string_types"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution._remove_dict_keys_with_value": {
  "lineno": 178,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution._str_dtype": {
  "lineno": 1467,
  "symbols_in_volume": [
   "tensorflow.compat.v2.nest.map_structure"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution._str_dtype._str": {
  "lineno": 1468,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.dtype_util.name"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution._str_tensorshape": {
  "lineno": 1456,
  "symbols_in_volume": [
   "tensorflow.compat.v2.nest.map_structure"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution._str_tensorshape._str": {
  "lineno": 1457,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.tensorshape_util.as_list",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution._update_docstring": {
  "lineno": 111,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test": {
  "lineno": null,
  "symbols_in_volume": [
   "absl.flags.DEFINE_enum",
   "absl.flags.FLAGS",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.floor",
   "tensorflow.compat.v2.math.l2_normalize",
   "tensorflow.compat.v2.math.sigmoid",
   "tensorflow.compat.v2.math.softmax",
   "tensorflow.compat.v2.math.softplus",
   "tensorflow.compat.v2.math.tanh",
   "tensorflow.compat.v2.maximum",
   "tensorflow.compat.v2.minimum",
   "tensorflow.compat.v2.sigmoid",
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.python.internal.hypothesis_testlib.lower_tril_positive_definite",
   "tensorflow_probability.python.internal.hypothesis_testlib.positive_definite",
   "tensorflow_probability.python.internal.hypothesis_testlib.softplus_plus_eps"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.DistInfo": {
  "lineno": 123,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.DistributionParamsAreVarsTest": {
  "lineno": 683,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.DistributionParamsAreVarsTest.testDistribution": {
  "lineno": 686,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "hypothesis.given",
   "hypothesis.note",
   "hypothesis.strategies.data",
   "hypothesis.strategies.just",
   "hypothesis.strategies.one_of",
   "hypothesis.strategies.sets",
   "six.iteritems",
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.stop_gradient",
   "tensorflow_probability.python.distributions",
   "tensorflow_probability.python.distributions.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.distributions.TransformedDistribution",
   "tensorflow_probability.python.internal.hypothesis_testlib.assert_no_excessive_var_usage",
   "tensorflow_probability.python.internal.hypothesis_testlib.broadcast_compatible_shape",
   "tensorflow_probability.python.internal.hypothesis_testlib.tfp_hp_settings",
   "tensorflow_probability.python.internal.tensor_util.is_ref",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.DistributionSlicingTest": {
  "lineno": 877,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.DistributionSlicingTest._run_test": {
  "lineno": 957,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.DistributionSlicingTest._test_slicing": {
  "lineno": 880,
  "symbols_in_volume": [
   "collections.Sequence",
   "hypothesis.note",
   "numpy.isnan",
   "numpy.where",
   "numpy.zeros",
   "tensorflow.compat.v2.errors.InvalidArgumentError",
   "tensorflow_probability.python.internal.tensorshape_util.rank",
   "tensorflow_probability.python.internal.test_util.test_seed_stream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.DistributionSlicingTest.disabled_testFailureCase": {
  "lineno": 979,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.bijectors.Expm1",
   "tensorflow_probability.python.bijectors.NormalCDF",
   "tensorflow_probability.python.distributions.Chi",
   "tensorflow_probability.python.distributions.TransformedDistribution"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.DistributionSlicingTest.testDistributions": {
  "lineno": 973,
  "symbols_in_volume": [
   "hypothesis.given",
   "hypothesis.strategies.data",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.internal.hypothesis_testlib.tfp_hp_settings"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.ReproducibilityTest": {
  "lineno": 857,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.ReproducibilityTest.testDistribution": {
  "lineno": 860,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "hypothesis.given",
   "hypothesis.strategies.data",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.random.set_seed",
   "tensorflow_probability.python.distributions",
   "tensorflow_probability.python.internal.hypothesis_testlib.tfp_hp_settings",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.assert_shapes_unchanged": {
  "lineno": 539,
  "symbols_in_volume": [
   "numpy.testing.assert_array_equal",
   "six.iteritems",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.base_distributions": {
  "lineno": 546,
  "symbols_in_volume": [
   "hypothesis.note",
   "hypothesis.strategies.composite",
   "hypothesis.strategies.sampled_from",
   "tensorflow_probability.python.internal.hypothesis_testlib.shapes"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.broadcasting_params": {
  "lineno": 300,
  "symbols_in_volume": [
   "hypothesis.strategies.composite",
   "tensorflow_probability.python.internal.hypothesis_testlib.broadcasting_params"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.broadcasting_params._constraint": {
  "lineno": 312,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.constrain_between_eps_and_one_minus_eps": {
  "lineno": 993,
  "symbols_in_volume": [
   "tensorflow.compat.v2.sigmoid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.constraint_for": {
  "lineno": 1131,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.hypothesis_testlib.identity_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.depths": {
  "lineno": 296,
  "symbols_in_volume": [
   "hypothesis.strategies.integers"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.distributions": {
  "lineno": 608,
  "symbols_in_volume": [
   "hypothesis.strategies.composite",
   "hypothesis.strategies.just",
   "hypothesis.strategies.one_of"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.ensure_high_gt_low": {
  "lineno": 997,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.math.reduce_max",
   "tensorflow.compat.v2.maximum",
   "tensorflow.compat.v2.range",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.fix_finite_discrete": {
  "lineno": 1018,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linspace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.fix_lkj": {
  "lineno": 1023,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.fix_triangular": {
  "lineno": 1027,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.fix_wishart": {
  "lineno": 1033,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.maximum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.get_event_dim": {
  "lineno": 676,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.independents": {
  "lineno": 329,
  "symbols_in_volume": [
   "hypothesis.note",
   "hypothesis.strategies.composite",
   "hypothesis.strategies.integers",
   "tensorflow_probability.python.distributions",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.internal.hypothesis_testlib.shapes",
   "tensorflow_probability.python.internal.tensorshape_util.concatenate"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.instantiable_base_dists": {
  "lineno": 139,
  "symbols_in_volume": [
   "absl.logging.warning",
   "functools.partial",
   "inspect.isclass",
   "six.iteritems",
   "tensorflow_probability.python.distributions.Distribution",
   "tensorflow_probability.python.distributions.Empirical",
   "tensorflow_probability.python.distributions.__dict__"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.mixtures_same_family": {
  "lineno": 465,
  "symbols_in_volume": [
   "hypothesis.note",
   "hypothesis.strategies.composite",
   "hypothesis.strategies.just",
   "hypothesis.strategies.one_of",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.distributions",
   "tensorflow_probability.python.distributions.MixtureSameFamily",
   "tensorflow_probability.python.internal.hypothesis_testlib.shapes",
   "tensorflow_probability.python.internal.tensorshape_util.as_list",
   "tensorflow_probability.python.internal.tensorshape_util.concatenate"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.no_tf_rank_errors": {
  "lineno": 822,
  "symbols_in_volume": [
   "contextlib.contextmanager",
   "hypothesis.assume",
   "re.search",
   "tensorflow.compat.v2.errors.UnimplementedError"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.params_used": {
  "lineno": 325,
  "symbols_in_volume": [
   "six.iteritems"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.stringify_slices": {
  "lineno": 262,
  "symbols_in_volume": [
   "tensorflow.compat.v2.is_tensor",
   "tensorflow.compat.v2.newaxis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.transformed_distributions": {
  "lineno": 393,
  "symbols_in_volume": [
   "hypothesis.note",
   "hypothesis.strategies.booleans",
   "hypothesis.strategies.composite",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.bijectors.hypothesis_testlib.distribution_filter_for",
   "tensorflow_probability.python.bijectors.hypothesis_testlib.unconstrained_bijectors",
   "tensorflow_probability.python.distributions",
   "tensorflow_probability.python.distributions.TransformedDistribution",
   "tensorflow_probability.python.internal.hypothesis_testlib.shapes"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.valid_slices": {
  "lineno": 201,
  "symbols_in_volume": [
   "hypothesis.strategies.booleans",
   "hypothesis.strategies.composite",
   "hypothesis.strategies.integers",
   "hypothesis.strategies.just",
   "hypothesis.strategies.lists",
   "hypothesis.strategies.one_of",
   "hypothesis.strategies.tuples",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.newaxis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.distribution_test.ConditionalDistributionTest": {
  "lineno": 569,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_test.ConditionalDistributionTest._GetFakeDistribution": {
  "lineno": 572,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ConditionalDistributionTest._GetFakeDistribution._FakeDistribution": {
  "lineno": 573,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_test.ConditionalDistributionTest._GetFakeDistribution._FakeDistribution.__init__": {
  "lineno": 576,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.distributions.NOT_REPARAMETERIZED"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ConditionalDistributionTest._GetFakeDistribution._FakeDistribution._batch_shape": {
  "lineno": 586,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ConditionalDistributionTest._GetFakeDistribution._FakeDistribution._cdf": {
  "lineno": 601,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ConditionalDistributionTest._GetFakeDistribution._FakeDistribution._event_shape": {
  "lineno": 589,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ConditionalDistributionTest._GetFakeDistribution._FakeDistribution._log_cdf": {
  "lineno": 604,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ConditionalDistributionTest._GetFakeDistribution._FakeDistribution._log_prob": {
  "lineno": 595,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ConditionalDistributionTest._GetFakeDistribution._FakeDistribution._log_survival_function": {
  "lineno": 607,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ConditionalDistributionTest._GetFakeDistribution._FakeDistribution._prob": {
  "lineno": 598,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ConditionalDistributionTest._GetFakeDistribution._FakeDistribution._sample_n": {
  "lineno": 592,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ConditionalDistributionTest._GetFakeDistribution._FakeDistribution._survival_function": {
  "lineno": 610,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ConditionalDistributionTest._GetPartiallyImplementedDistribution": {
  "lineno": 623,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ConditionalDistributionTest._GetPartiallyImplementedDistribution._PartiallyImplementedDistribution": {
  "lineno": 624,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_test.ConditionalDistributionTest._GetPartiallyImplementedDistribution._PartiallyImplementedDistribution.__init__": {
  "lineno": 627,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.distributions.NOT_REPARAMETERIZED"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ConditionalDistributionTest._GetPartiallyImplementedDistribution._PartiallyImplementedDistribution._batch_shape": {
  "lineno": 638,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ConditionalDistributionTest._GetPartiallyImplementedDistribution._PartiallyImplementedDistribution._event_shape": {
  "lineno": 641,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ConditionalDistributionTest.testDefaultMethodLogSpaceInvocations": {
  "lineno": 672,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ConditionalDistributionTest.testDefaultMethodLogSpaceInvocations.raise_only_conditional_fn": {
  "lineno": 683,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ConditionalDistributionTest.testDefaultMethodLogSpaceInvocations.raise_with_input_fn": {
  "lineno": 680,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ConditionalDistributionTest.testDefaultMethodNonLogSpaceInvocations": {
  "lineno": 646,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ConditionalDistributionTest.testDefaultMethodNonLogSpaceInvocations.raise_only_conditional_fn": {
  "lineno": 658,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ConditionalDistributionTest.testDefaultMethodNonLogSpaceInvocations.raise_with_input_fn": {
  "lineno": 655,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ConditionalDistributionTest.testNotImplemented": {
  "lineno": 615,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DictDistribution": {
  "lineno": 57,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_test.DictDistribution.__init__": {
  "lineno": 59,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DictDistribution.batch_shape": {
  "lineno": 72,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DictDistribution.dtype": {
  "lineno": 68,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float16",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DictDistribution.event_shape": {
  "lineno": 76,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DictDistribution.name": {
  "lineno": 64,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionStrReprTest": {
  "lineno": 110,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionStrReprTest.testReprWorksCorrectlyDictDistribution": {
  "lineno": 258,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionStrReprTest.testReprWorksCorrectlyMultivariate": {
  "lineno": 206,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "numpy.zeros",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionStrReprTest.testReprWorksCorrectlyNamedTupleDistribution": {
  "lineno": 274,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionStrReprTest.testReprWorksCorrectlyScalar": {
  "lineno": 173,
  "symbols_in_volume": [
   "numpy.float16",
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.distributions.Chi2",
   "tensorflow_probability.python.distributions.Exponential",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionStrReprTest.testReprWorksCorrectlyTupleDistribution": {
  "lineno": 242,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionStrReprTest.testStrWorksCorrectlyDictDistribution": {
  "lineno": 250,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionStrReprTest.testStrWorksCorrectlyMultivariate": {
  "lineno": 145,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "numpy.zeros",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionStrReprTest.testStrWorksCorrectlyNamedTupleDistribution": {
  "lineno": 266,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionStrReprTest.testStrWorksCorrectlyScalar": {
  "lineno": 113,
  "symbols_in_volume": [
   "numpy.float16",
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.distributions.Chi2",
   "tensorflow_probability.python.distributions.Exponential",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionStrReprTest.testStrWorksCorrectlyTupleDistribution": {
  "lineno": 234,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest": {
  "lineno": 283,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest._GetFakeDistribution": {
  "lineno": 381,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest._GetFakeDistribution.FakeDistribution": {
  "lineno": 382,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest._GetFakeDistribution.FakeDistribution.__init__": {
  "lineno": 385,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.distributions.NOT_REPARAMETERIZED"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest._GetFakeDistribution.FakeDistribution._batch_shape": {
  "lineno": 395,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest._GetFakeDistribution.FakeDistribution._event_shape": {
  "lineno": 398,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest.testCopyExtraArgs": {
  "lineno": 314,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.Wishart"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest.testCopyOverride": {
  "lineno": 322,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest.testIsScalar": {
  "lineno": 331,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest.testNameScopeWorksCorrectly": {
  "lineno": 452,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest.testNotIterable": {
  "lineno": 500,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest.testParamShapesAndFromParams": {
  "lineno": 286,
  "symbols_in_volume": [
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.distributions.Beta",
   "tensorflow_probability.python.distributions.Chi2",
   "tensorflow_probability.python.distributions.Exponential",
   "tensorflow_probability.python.distributions.Gamma",
   "tensorflow_probability.python.distributions.InverseGamma",
   "tensorflow_probability.python.distributions.Laplace",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.StudentT",
   "tensorflow_probability.python.distributions.Uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest.testSampleShapeHints": {
  "lineno": 403,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.internal.tensorshape_util.as_list",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest.testUnimplemtnedProbAndLogProbExceptions": {
  "lineno": 476,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest.testUnimplemtnedProbAndLogProbExceptions.TerribleDistribution": {
  "lineno": 477,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest.testUnimplemtnedProbAndLogProbExceptions.TerribleDistribution.__init__": {
  "lineno": 479,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.distributions.NOT_REPARAMETERIZED"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.Dummy": {
  "lineno": 509,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_test.Dummy.__init__": {
  "lineno": 512,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.distributions.NOT_REPARAMETERIZED"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.Dummy._mean": {
  "lineno": 520,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.NamedTupleDistribution": {
  "lineno": 81,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_test.NamedTupleDistribution.MyType": {
  "lineno": 83,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_test.NamedTupleDistribution.__init__": {
  "lineno": 86,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.NamedTupleDistribution.batch_shape": {
  "lineno": 99,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.NamedTupleDistribution.dtype": {
  "lineno": 95,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float16",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.NamedTupleDistribution.event_shape": {
  "lineno": 104,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.NamedTupleDistribution.name": {
  "lineno": 91,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ParametersTest": {
  "lineno": 524,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_test.ParametersTest.testNoSelfRefs": {
  "lineno": 533,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_in_graph_and_eager_modes"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ParametersTest.testParameters": {
  "lineno": 526,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ParametersTest.testTfFunction": {
  "lineno": 538,
  "symbols_in_volume": [
   "numpy.e",
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ParametersTest.testTfFunction.normal_differential_entropy": {
  "lineno": 540,
  "symbols_in_volume": [
   "tensorflow.compat.v2.function",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.TfModuleTest": {
  "lineno": 549,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_test.TfModuleTest.test_gradient": {
  "lineno": 558,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.TfModuleTest.test_variable_tracking_works": {
  "lineno": 552,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Module",
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.TupleDistribution": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_test.TupleDistribution.__init__": {
  "lineno": 35,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.TupleDistribution.batch_shape": {
  "lineno": 48,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.TupleDistribution.dtype": {
  "lineno": 44,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float16",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.TupleDistribution.event_shape": {
  "lineno": 52,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.TupleDistribution.name": {
  "lineno": 40,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical": {
  "lineno": 57,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical.__init__": {
  "lineno": 117,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.prefer_static.rank",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._batch_shape": {
  "lineno": 217,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._batch_shape_tensor": {
  "lineno": 212,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._cdf": {
  "lineno": 312,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reduce_all",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.dtype_util.is_floating"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._compute_num_samples": {
  "lineno": 205,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._entropy": {
  "lineno": 289,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.map_fn",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._entropy._get_entropy": {
  "lineno": 302,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.python.ops.gen_array_ops.unique_with_counts_v2"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._event_shape": {
  "lineno": 227,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._event_shape_tensor": {
  "lineno": 222,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._mean": {
  "lineno": 232,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.reduce_mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._mode": {
  "lineno": 257,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.gather_nd",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.int64",
   "tensorflow.compat.v2.map_fn",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._mode._get_mode": {
  "lineno": 260,
  "symbols_in_volume": [
   "tensorflow.compat.v2.argmax",
   "tensorflow.python.ops.gen_array_ops.unique_with_counts_v2"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._param_shapes": {
  "lineno": 171,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._parameter_control_dependencies": {
  "lineno": 344,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._params_event_ndims": {
  "lineno": 175,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._prob": {
  "lineno": 328,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reduce_all",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.dtype_util.is_floating"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._sample_n": {
  "lineno": 244,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.transpose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._stddev": {
  "lineno": 237,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.square"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical.compute_num_samples": {
  "lineno": 193,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical.num_samples": {
  "lineno": 183,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical.samples": {
  "lineno": 178,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical._broadcast_event_and_samples": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdDynamicShapeTest": {
  "lineno": 699,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdStaticShapeTest": {
  "lineno": 694,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdTest": {
  "lineno": 497,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase",
   "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdTest.testCdfNoBatch": {
  "lineno": 534,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.log",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdTest.testEntropy": {
  "lineno": 632,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdTest.testInvalidSamples": {
  "lineno": 510,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "numpy.array",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdTest.testLogProbAfterSlice": {
  "lineno": 661,
  "symbols_in_volume": [
   "numpy.random.randn",
   "tensorflow.compat.v2.newaxis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdTest.testMean": {
  "lineno": 604,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdTest.testMode": {
  "lineno": 618,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdTest.testPmfNoBatch": {
  "lineno": 559,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.log",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdTest.testSampleN": {
  "lineno": 584,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdTest.testSamples": {
  "lineno": 502,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdTest.testShapes": {
  "lineno": 523,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdTest.testVarianceAndStd": {
  "lineno": 646,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.sqrt",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarDynamicShapeTest": {
  "lineno": 679,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarStaticShapeTest": {
  "lineno": 674,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarTest": {
  "lineno": 44,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarTest.testCdfNoBatch": {
  "lineno": 70,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.log",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarTest.testCdfWithBatch": {
  "lineno": 93,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.log",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarTest.testEntropy": {
  "lineno": 162,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarTest.testMean": {
  "lineno": 203,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarTest.testMode": {
  "lineno": 223,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarTest.testPmfNoBatch": {
  "lineno": 116,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.log",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarTest.testPmfWithBatch": {
  "lineno": 139,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.log",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarTest.testSampleN": {
  "lineno": 185,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarTest.testSamples": {
  "lineno": 47,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarTest.testShapes": {
  "lineno": 59,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarTest.testVarianceAndStd": {
  "lineno": 243,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.sqrt",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorDynamicShapeTest": {
  "lineno": 689,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorStaticShapeTest": {
  "lineno": 684,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorTest": {
  "lineno": 264,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorTest.testCdfNoBatch": {
  "lineno": 294,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.log",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorTest.testCdfWithBatch": {
  "lineno": 318,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.log",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorTest.testEntropy": {
  "lineno": 457,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorTest.testMean": {
  "lineno": 421,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorTest.testMode": {
  "lineno": 439,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorTest.testPmfNoBatch": {
  "lineno": 347,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.log",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorTest.testPmfWithBatch": {
  "lineno": 371,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.log",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorTest.testSampleN": {
  "lineno": 401,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorTest.testSamples": {
  "lineno": 267,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorTest.testShapes": {
  "lineno": 283,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorTest.testVarianceAndStd": {
  "lineno": 475,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.sqrt",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.entropy": {
  "lineno": 35,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.log",
   "numpy.sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.random_samples": {
  "lineno": 40,
  "symbols_in_volume": [
   "numpy.random.uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.exponential.Exponential": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.gamma.Gamma"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.exponential.Exponential.__init__": {
  "lineno": 68,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential.Exponential._log_survival_function": {
  "lineno": 118,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential.Exponential._param_shapes": {
  "lineno": 106,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential.Exponential._params_event_ndims": {
  "lineno": 110,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential.Exponential._quantile": {
  "lineno": 141,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential.Exponential._sample_n": {
  "lineno": 122,
  "symbols_in_volume": [
   "numpy.finfo",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential.Exponential.rate": {
  "lineno": 114,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest.testAssertsPositiveRate": {
  "lineno": 194,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest.testAssertsPositiveRateAfterMutation": {
  "lineno": 201,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest.testExponentialCDF": {
  "lineno": 64,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "scipy.stats.expon.cdf",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.exponential",
   "tensorflow_probability.python.distributions.exponential.Exponential",
   "tensorflow_probability.python.distributions.exponential.cdf"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest.testExponentialEntropy": {
  "lineno": 107,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.expon.entropy",
   "tensorflow_probability.python.distributions.exponential",
   "tensorflow_probability.python.distributions.exponential.Exponential",
   "tensorflow_probability.python.distributions.exponential.entropy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest.testExponentialExponentialKL": {
  "lineno": 157,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.log",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.distributions.exponential.Exponential",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest.testExponentialLogPDF": {
  "lineno": 40,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "scipy.stats.expon.logpdf",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.exponential",
   "tensorflow_probability.python.distributions.exponential.Exponential",
   "tensorflow_probability.python.distributions.exponential.log_prob",
   "tensorflow_probability.python.distributions.exponential.prob"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest.testExponentialLogPDFBoundary": {
  "lineno": 57,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.log",
   "tensorflow_probability.python.distributions.exponential",
   "tensorflow_probability.python.distributions.exponential.Exponential",
   "tensorflow_probability.python.distributions.exponential.log_prob"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest.testExponentialLogSurvival": {
  "lineno": 78,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "scipy.stats.expon.logsf",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.exponential",
   "tensorflow_probability.python.distributions.exponential.Exponential",
   "tensorflow_probability.python.distributions.exponential.log_survival_function"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest.testExponentialMean": {
  "lineno": 92,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.expon.mean",
   "tensorflow_probability.python.distributions.exponential",
   "tensorflow_probability.python.distributions.exponential.Exponential",
   "tensorflow_probability.python.distributions.exponential.mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest.testExponentialQuantileIsInverseOfCdf": {
  "lineno": 221,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.exponential",
   "tensorflow_probability.python.distributions.exponential.Exponential",
   "tensorflow_probability.python.distributions.exponential.cdf",
   "tensorflow_probability.python.distributions.exponential.quantile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest.testExponentialSample": {
  "lineno": 114,
  "symbols_in_volume": [
   "numpy.any",
   "scipy.stats.expon",
   "scipy.stats.kstest",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.exponential",
   "tensorflow_probability.python.distributions.exponential.Exponential",
   "tensorflow_probability.python.distributions.exponential.sample",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest.testExponentialSampleMultiDimensional": {
  "lineno": 129,
  "symbols_in_volume": [
   "numpy.any",
   "scipy.stats.expon",
   "scipy.stats.kstest",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.exponential",
   "tensorflow_probability.python.distributions.exponential.Exponential",
   "tensorflow_probability.python.distributions.exponential.sample",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest.testExponentialVariance": {
  "lineno": 99,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.expon.var",
   "tensorflow_probability.python.distributions.exponential",
   "tensorflow_probability.python.distributions.exponential.Exponential",
   "tensorflow_probability.python.distributions.exponential.variance"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest.testExpontentialQuantile": {
  "lineno": 210,
  "symbols_in_volume": [
   "numpy.inf",
   "tensorflow_probability.python.distributions.exponential",
   "tensorflow_probability.python.distributions.exponential.Exponential",
   "tensorflow_probability.python.distributions.exponential.quantile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest.testFullyReparameterized": {
  "lineno": 151,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient",
   "tensorflow_probability.python.distributions.exponential.Exponential"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest.testGradientThroughRate": {
  "lineno": 185,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete.__init__": {
  "lineno": 75,
  "symbols_in_volume": [
   "numpy.finfo",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.distributions.categorical.Categorical",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.dtype_util.is_floating",
   "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._batch_shape": {
  "lineno": 165,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._batch_shape_tensor": {
  "lineno": 162,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._cdf": {
  "lineno": 174,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.minimum",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.searchsorted",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._entropy": {
  "lineno": 188,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._event_shape": {
  "lineno": 171,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._event_shape_tensor": {
  "lineno": 168,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._is_equal_or_close": {
  "lineno": 191,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.equal",
   "tensorflow_probability.python.internal.dtype_util.is_integer"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._log_prob": {
  "lineno": 196,
  "symbols_in_volume": [
   "numpy.inf",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.logical_not",
   "tensorflow.compat.v2.maximum",
   "tensorflow.compat.v2.minimum",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.searchsorted",
   "tensorflow.compat.v2.size",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_shape",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._mean": {
  "lineno": 216,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.tensordot",
   "tensorflow_probability.python.internal.distribution_util.embed_check_integer_casting_closed",
   "tensorflow_probability.python.internal.dtype_util.is_integer"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._mode": {
  "lineno": 227,
  "symbols_in_volume": [
   "tensorflow.compat.v2.gather"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._parameter_control_dependencies": {
  "lineno": 259,
  "symbols_in_volume": [
   "tensorflow.compat.v2.assert_greater",
   "tensorflow.compat.v2.math.is_strictly_increasing",
   "tensorflow.compat.v2.size",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.assert_util.assert_rank",
   "tensorflow_probability.python.internal.tensor_util.is_ref",
   "tensorflow_probability.python.internal.tensorshape_util.num_elements",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._parameter_control_dependencies.validate_equal_last_dim": {
  "lineno": 273,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.assert_util.assert_equal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._params_event_ndims": {
  "lineno": 143,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._sample_n": {
  "lineno": 230,
  "symbols_in_volume": [
   "tensorflow.compat.v2.gather"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._variance": {
  "lineno": 236,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.math.squared_difference",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.distribution_util.embed_check_integer_casting_closed",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_shape",
   "tensorflow_probability.python.internal.dtype_util.is_integer"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete.logits": {
  "lineno": 152,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete.logits_parameter": {
  "lineno": 249,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete.outcomes": {
  "lineno": 148,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete.probs": {
  "lineno": 157,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete.probs_parameter": {
  "lineno": 254,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteFromVariableTest": {
  "lineno": 417,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteFromVariableTest.testAssertionLastDimensionOfOutcomesAndLogits": {
  "lineno": 420,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteFromVariableTest.testAssertionLastDimensionOfOutcomesAndProbs": {
  "lineno": 429,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteFromVariableTest.testAssertionOutcomesRanks": {
  "lineno": 437,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteFromVariableTest.testAssertionOutcomesSize": {
  "lineno": 445,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteFromVariableTest.testAssertionOutcomesStrictlyIncreasing": {
  "lineno": 454,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarDynamicShapeTest": {
  "lineno": 402,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarStaticShapeTest": {
  "lineno": 397,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest": {
  "lineno": 88,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testCDF": {
  "lineno": 207,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testCDFWithBatchSampleShape": {
  "lineno": 216,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testCDFWithDifferentAtol": {
  "lineno": 236,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testCDFWithIntegerOutcomes": {
  "lineno": 226,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testEntropy": {
  "lineno": 123,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.log",
   "numpy.sum",
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testMean": {
  "lineno": 102,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testMode": {
  "lineno": 133,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testModeWithIntegerOutcomes": {
  "lineno": 142,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testPMF": {
  "lineno": 170,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testPMFWithBatchSampleShape": {
  "lineno": 187,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testPMFWithIntegerOutcomes": {
  "lineno": 197,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testSample": {
  "lineno": 151,
  "symbols_in_volume": [
   "numpy.mean",
   "numpy.std",
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testSampleWithIntegerOutcomes": {
  "lineno": 161,
  "symbols_in_volume": [
   "numpy.mean",
   "numpy.std",
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testShape": {
  "lineno": 91,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testStddevAndVariance": {
  "lineno": 111,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteTest": {
  "lineno": 30,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteTest._build_tensor": {
  "lineno": 33,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteTest._get_shape": {
  "lineno": 39,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteValidateArgsDynamicShapeTest": {
  "lineno": 392,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteValidateArgsStaticShapeTest": {
  "lineno": 387,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteValidateArgsTest": {
  "lineno": 43,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteValidateArgsTest.testInequalLastDimRaises": {
  "lineno": 45,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteValidateArgsTest.testOutcomesNotStrictlyIncreasingRaises": {
  "lineno": 78,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteValidateArgsTest.testRankOfOutcomesLargerThanOneRaises": {
  "lineno": 54,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteValidateArgsTest.testSizeOfOutcomesIsZeroRaises": {
  "lineno": 63,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorDynamicShapeTest": {
  "lineno": 412,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorStaticShapeTest": {
  "lineno": 407,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorTest": {
  "lineno": 252,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorTest.testCDF": {
  "lineno": 341,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorTest.testCDFWithBatchSampleShape": {
  "lineno": 350,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorTest.testEntropy": {
  "lineno": 301,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.log",
   "numpy.sum",
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorTest.testMean": {
  "lineno": 269,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorTest.testMode": {
  "lineno": 291,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorTest.testPMF": {
  "lineno": 321,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorTest.testPMFWithBatchSampleShape": {
  "lineno": 330,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorTest.testParamTensorFromLogits": {
  "lineno": 362,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.softmax",
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorTest.testParamTensorFromProbs": {
  "lineno": 375,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.log",
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorTest.testSample": {
  "lineno": 311,
  "symbols_in_volume": [
   "numpy.mean",
   "numpy.std",
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorTest.testShapes": {
  "lineno": 255,
  "symbols_in_volume": [
   "numpy.random.uniform",
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorTest.testStddevAndVariance": {
  "lineno": 279,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.FiniteDiscrete"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma": {
  "lineno": 39,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma.__init__": {
  "lineno": 117,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._batch_shape": {
  "lineno": 189,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._batch_shape_tensor": {
  "lineno": 183,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.broadcast_shape",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._cdf": {
  "lineno": 221,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.math.igamma"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._entropy": {
  "lineno": 227,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.digamma",
   "tensorflow.compat.v2.math.lgamma",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._event_shape": {
  "lineno": 197,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._event_shape_tensor": {
  "lineno": 194,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._log_prob": {
  "lineno": 211,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.lgamma",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.xlogy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._maybe_assert_valid_sample": {
  "lineno": 262,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._mean": {
  "lineno": 233,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._mode": {
  "lineno": 242,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.assert_util.assert_less",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._param_shapes": {
  "lineno": 163,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._parameter_control_dependencies": {
  "lineno": 267,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._params_event_ndims": {
  "lineno": 169,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._sample_n": {
  "lineno": 200,
  "symbols_in_volume": [
   "tensorflow.compat.v2.random.gamma",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._stddev": {
  "lineno": 239,
  "symbols_in_volume": [
   "tensorflow.compat.v2.sqrt"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._variance": {
  "lineno": 236,
  "symbols_in_volume": [
   "tensorflow.compat.v2.square"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma.concentration": {
  "lineno": 173,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma.rate": {
  "lineno": 178,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma._kl_gamma_gamma": {
  "lineno": 282,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.digamma",
   "tensorflow.compat.v2.math.lgamma",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma.__init__": {
  "lineno": 89,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma._batch_shape": {
  "lineno": 166,
  "symbols_in_volume": [
   "functools.reduce",
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma._batch_shape_tensor": {
  "lineno": 161,
  "symbols_in_volume": [
   "functools.reduce",
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma._event_shape": {
  "lineno": 174,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma._event_shape_tensor": {
  "lineno": 171,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma._log_prob": {
  "lineno": 199,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.lgamma",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.xlogy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma._maybe_assert_valid_sample": {
  "lineno": 269,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma._mean": {
  "lineno": 217,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.assert_util.assert_less",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma._parameter_control_dependencies": {
  "lineno": 277,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma._params_event_ndims": {
  "lineno": 142,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma._sample_n": {
  "lineno": 177,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.random.gamma",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma._variance": {
  "lineno": 242,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.square",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.assert_util.assert_less",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma.concentration": {
  "lineno": 146,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma.mixing_concentration": {
  "lineno": 151,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma.mixing_rate": {
  "lineno": 156,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.GammaGammaTest": {
  "lineno": 30,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.GammaGammaTest.testGammaGammaInvalidArgs": {
  "lineno": 44,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.GammaGamma"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.GammaGammaTest.testGammaGammaLogPDF": {
  "lineno": 69,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.GammaGamma"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.GammaGammaTest.testGammaGammaLogPDFAtZero": {
  "lineno": 101,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.isfinite",
   "numpy.ones_like",
   "tensorflow_probability.python.distributions.GammaGamma"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.GammaGammaTest.testGammaGammaLogPDFMultidimensional": {
  "lineno": 111,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.GammaGamma"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.GammaGammaTest.testGammaGammaLogPDFMultidimensionalBroadcasting": {
  "lineno": 123,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.GammaGamma"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.GammaGammaTest.testGammaGammaMeanAllDefined": {
  "lineno": 135,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow_probability.python.distributions.GammaGamma"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.GammaGammaTest.testGammaGammaMeanAllowNanStats": {
  "lineno": 148,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow_probability.python.distributions.GammaGamma"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.GammaGammaTest.testGammaGammaMeanNanStats": {
  "lineno": 162,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.nan",
   "tensorflow_probability.python.distributions.GammaGamma"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.GammaGammaTest.testGammaGammaSample": {
  "lineno": 176,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.GammaGamma",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.GammaGammaTest.testGammaGammaSampleConcentrationCausesBroadcast": {
  "lineno": 193,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.GammaGamma",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.GammaGammaTest.testGammaGammaSampleMultidimensional": {
  "lineno": 201,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.array",
   "numpy.float32",
   "tensorflow_probability.python.distributions.GammaGamma",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.GammaGammaTest.testGammaGammaShape": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.distributions.GammaGamma"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest._assertIntegral": {
  "lineno": 296,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest._kstest": {
  "lineno": 267,
  "symbols_in_volume": [
   "scipy.stats.gamma",
   "scipy.stats.kstest"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testAssertsPositiveConcentration": {
  "lineno": 360,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.internal.test_util.jax_disable_variable_test"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testAssertsPositiveConcentrationAfterMutation": {
  "lineno": 368,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testAssertsPositiveRate": {
  "lineno": 385,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testAssertsPositiveRateAfterMutation": {
  "lineno": 392,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaCDF": {
  "lineno": 109,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "scipy.stats.gamma.cdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaEntropy": {
  "lineno": 176,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.gamma.entropy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaFullyReparameterized": {
  "lineno": 226,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient",
   "tensorflow_probability.python.internal.test_util.numpy_disable_gradient_test"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaGammaKL": {
  "lineno": 320,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.log",
   "scipy.special.digamma",
   "scipy.special.gammaln",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaLogPDF": {
  "lineno": 48,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "scipy.stats.gamma.logpdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaLogPDFBoundary": {
  "lineno": 64,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaLogPDFMultidimensional": {
  "lineno": 72,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "scipy.stats.gamma.logpdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaLogPDFMultidimensionalBroadcasting": {
  "lineno": 90,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "scipy.stats.gamma.logpdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaMean": {
  "lineno": 123,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.gamma.mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaModeAllowNanStatsFalseRaisesForUndefinedBatchMembers": {
  "lineno": 139,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaModeAllowNanStatsIsFalseWorksWhenAllBatchMembersAreDefined": {
  "lineno": 131,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaModeAllowNanStatsIsTrueReturnsNaNforUndefinedBatchMembers": {
  "lineno": 149,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.nan"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaNonPositiveInitializationParamsRaises": {
  "lineno": 306,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaPdfOfSampleMultiDims": {
  "lineno": 273,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.gamma.mean",
   "scipy.stats.gamma.var",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaSample": {
  "lineno": 205,
  "symbols_in_volume": [
   "scipy.stats.gamma.mean",
   "scipy.stats.gamma.var",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaSampleMultiDimensional": {
  "lineno": 236,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.array",
   "numpy.float32",
   "numpy.reshape",
   "numpy.zeros_like",
   "scipy.stats.gamma.mean",
   "scipy.stats.gamma.var",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaSampleSmallAlpha": {
  "lineno": 184,
  "symbols_in_volume": [
   "scipy.stats.gamma.mean",
   "scipy.stats.gamma.var",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaShape": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaStd": {
  "lineno": 168,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.gamma.std"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaVariance": {
  "lineno": 160,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.gamma.var"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGradientThroughConcentration": {
  "lineno": 349,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.internal.test_util.jax_disable_variable_test",
   "tensorflow_probability.python.internal.test_util.numpy_disable_gradient_test"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGradientThroughRate": {
  "lineno": 376,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess": {
  "lineno": 47,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess.__init__": {
  "lineno": 199,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._batch_shape": {
  "lineno": 437,
  "symbols_in_volume": [
   "functools.reduce",
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._batch_shape_tensor": {
  "lineno": 429,
  "symbols_in_volume": [
   "functools.reduce",
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._compute_covariance": {
  "lineno": 309,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.squeeze",
   "tensorflow_probability.python.internal.distribution_util.get_broadcast_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._covariance": {
  "lineno": 506,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._entropy": {
  "lineno": 479,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._event_shape": {
  "lineno": 454,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._event_shape_tensor": {
  "lineno": 445,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._get_index_points": {
  "lineno": 398,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._is_univariate_marginal": {
  "lineno": 286,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "warnings.warn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._log_cdf": {
  "lineno": 476,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._log_prob": {
  "lineno": 426,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._log_survival_function": {
  "lineno": 469,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._mean": {
  "lineno": 482,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._mode": {
  "lineno": 512,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._quantile": {
  "lineno": 485,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._sample_n": {
  "lineno": 466,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._stddev": {
  "lineno": 488,
  "symbols_in_volume": [
   "tensorflow.compat.v2.sqrt"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._survival_function": {
  "lineno": 473,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._variance": {
  "lineno": 491,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.squeeze"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess.get_marginal_distribution": {
  "lineno": 330,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.squeeze",
   "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator",
   "tensorflow_probability.python.distributions.normal.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess.index_points": {
  "lineno": 386,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess.jitter": {
  "lineno": 394,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess.kernel": {
  "lineno": 382,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess.mean_fn": {
  "lineno": 378,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess.observation_noise_variance": {
  "lineno": 390,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process._add_diagonal_shift": {
  "lineno": 42,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.linalg.set_diag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process._assert_kl_compatible": {
  "lineno": 516,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator",
   "tensorflow_probability.python.distributions.normal.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process._kl_compatible_gp": {
  "lineno": 537,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process._kl_gp_compatible": {
  "lineno": 530,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process._kl_gp_mvn": {
  "lineno": 560,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL",
   "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process._kl_gp_normal": {
  "lineno": 544,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL",
   "tensorflow_probability.python.distributions.normal.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process._kl_mvn_gp": {
  "lineno": 594,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL",
   "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process._kl_normal_gp": {
  "lineno": 578,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL",
   "tensorflow_probability.python.distributions.normal.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model.GaussianProcessRegressionModel": {
  "lineno": 102,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model.GaussianProcessRegressionModel.__init__": {
  "lineno": 386,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.math.psd_kernels.SchurComplement",
   "tensorflow_probability.python.util.DeferredTensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model.GaussianProcessRegressionModel.__init__.conditional_mean_fn": {
  "lineno": 540,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.LinearOperatorFullMatrix",
   "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model.GaussianProcessRegressionModel.observation_index_points": {
  "lineno": 564,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model.GaussianProcessRegressionModel.observations": {
  "lineno": 568,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model.GaussianProcessRegressionModel.predictive_noise_variance": {
  "lineno": 572,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model._is_empty_observation_data": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model._validate_observation_data": {
  "lineno": 69,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test": {
  "lineno": null,
  "symbols_in_volume": [
   "numpy.random.seed",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test.GaussianProcessRegressionModelDynamicTest": {
  "lineno": 435,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test.GaussianProcessRegressionModelStaticTest": {
  "lineno": 430,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test._GaussianProcessRegressionModelTest": {
  "lineno": 41,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test._GaussianProcessRegressionModelTest.testCopy": {
  "lineno": 261,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.random.uniform",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow_probability.python.distributions.GaussianProcessRegressionModel",
   "tensorflow_probability.python.positive_semidefinite_kernels.ExpSinSquared",
   "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test._GaussianProcessRegressionModelTest.testEmptyDataMatchesGPPrior": {
  "lineno": 180,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.random.uniform",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.distributions.GaussianProcess",
   "tensorflow_probability.python.distributions.GaussianProcessRegressionModel",
   "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test._GaussianProcessRegressionModelTest.testErrorCases": {
  "lineno": 221,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.ones",
   "numpy.random.uniform",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.distributions.GaussianProcessRegressionModel",
   "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test._GaussianProcessRegressionModelTest.testInitParameterVariations": {
  "lineno": 348,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "numpy.dot",
   "numpy.eye",
   "numpy.linalg.solve",
   "numpy.random.uniform",
   "tensorflow.compat.v2.Tensor",
   "tensorflow_probability.python.distributions.GaussianProcessRegressionModel",
   "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test._GaussianProcessRegressionModelTest.testMeanVarianceAndCovariance": {
  "lineno": 112,
  "symbols_in_volume": [
   "numpy.diag",
   "numpy.dot",
   "numpy.eye",
   "numpy.float64",
   "numpy.linalg.solve",
   "numpy.random.uniform",
   "tensorflow_probability.python.distributions.GaussianProcessRegressionModel",
   "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test._GaussianProcessRegressionModelTest.testShapes": {
  "lineno": 45,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.expand_dims",
   "numpy.float64",
   "numpy.linspace",
   "numpy.meshgrid",
   "numpy.random.uniform",
   "numpy.reshape",
   "numpy.stack",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.distributions.GaussianProcessRegressionModel",
   "tensorflow_probability.python.internal.tensorshape_util.dims",
   "tensorflow_probability.python.internal.tensorshape_util.rank",
   "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test._np_kernel_matrix_fn": {
  "lineno": 32,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.expand_dims"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test.GaussianProcessDynamicTest": {
  "lineno": 235,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test.GaussianProcessStaticTest": {
  "lineno": 230,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test._GaussianProcessTest": {
  "lineno": 32,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test._GaussianProcessTest.testCopy": {
  "lineno": 131,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.random.uniform",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow_probability.python.distributions.GaussianProcess",
   "tensorflow_probability.python.positive_semidefinite_kernels.ExpSinSquared",
   "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test._GaussianProcessTest.testLateBindingIndexPoints": {
  "lineno": 177,
  "symbols_in_volume": [
   "numpy.diag",
   "numpy.expand_dims",
   "numpy.eye",
   "numpy.float64",
   "numpy.random.uniform",
   "numpy.sqrt",
   "tensorflow_probability.python.distributions.GaussianProcess",
   "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test._GaussianProcessTest.testLateBindingIndexPoints._kernel_fn": {
  "lineno": 197,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.squeeze"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test._GaussianProcessTest.testMarginalHasCorrectTypes": {
  "lineno": 216,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "tensorflow_probability.python.distributions.GaussianProcess",
   "tensorflow_probability.python.distributions.MultivariateNormalLinearOperator",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test._GaussianProcessTest.testMean": {
  "lineno": 122,
  "symbols_in_volume": [
   "numpy.expand_dims",
   "numpy.random.uniform",
   "tensorflow_probability.python.distributions.GaussianProcess",
   "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test._GaussianProcessTest.testShapes": {
  "lineno": 34,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.linspace",
   "numpy.meshgrid",
   "numpy.reshape",
   "numpy.stack",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.distributions.GaussianProcess",
   "tensorflow_probability.python.internal.tensorshape_util.dims",
   "tensorflow_probability.python.internal.tensorshape_util.rank",
   "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test._GaussianProcessTest.testVarianceAndCovarianceMatrix": {
  "lineno": 93,
  "symbols_in_volume": [
   "numpy.diag",
   "numpy.expand_dims",
   "numpy.eye",
   "numpy.float64",
   "numpy.random.uniform",
   "tensorflow_probability.python.distributions.GaussianProcess",
   "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test._GaussianProcessTest.testVarianceAndCovarianceMatrix._kernel_fn": {
  "lineno": 109,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.squeeze"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.generalized_pareto.GeneralizedPareto": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.generalized_pareto.GeneralizedPareto.__init__": {
  "lineno": 119,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto.GeneralizedPareto._batch_shape": {
  "lineno": 191,
  "symbols_in_volume": [
   "functools.reduce",
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto.GeneralizedPareto._batch_shape_tensor": {
  "lineno": 196,
  "symbols_in_volume": [
   "functools.reduce",
   "tensorflow_probability.python.internal.prefer_static.broadcast_shape",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto.GeneralizedPareto._entropy": {
  "lineno": 287,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto.GeneralizedPareto._event_shape": {
  "lineno": 188,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto.GeneralizedPareto._log_cdf": {
  "lineno": 233,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto.GeneralizedPareto._log_prob": {
  "lineno": 224,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto.GeneralizedPareto._mean": {
  "lineno": 255,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.assert_util.assert_less"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto.GeneralizedPareto._parameter_control_dependencies": {
  "lineno": 290,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto.GeneralizedPareto._params_event_ndims": {
  "lineno": 172,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto.GeneralizedPareto._sample_n": {
  "lineno": 204,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.math.expm1",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto.GeneralizedPareto._variance": {
  "lineno": 271,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.assert_util.assert_less"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto.GeneralizedPareto._z": {
  "lineno": 243,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.python.internal.assert_util.assert_equal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto.GeneralizedPareto.concentration": {
  "lineno": 184,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto.GeneralizedPareto.loc": {
  "lineno": 176,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto.GeneralizedPareto.scale": {
  "lineno": 180,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.generalized_pareto_test.GeneralizedParetoTest": {
  "lineno": 66,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.generalized_pareto_test.GeneralizedParetoTest._assertIntegral": {
  "lineno": 219,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto_test.GeneralizedParetoTest._kstest": {
  "lineno": 198,
  "symbols_in_volume": [
   "scipy.stats.genpareto",
   "scipy.stats.kstest"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto_test.GeneralizedParetoTest.testAssertsPositiveScale": {
  "lineno": 245,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto_test.GeneralizedParetoTest.testAssertsPositiveScaleAfterMutation": {
  "lineno": 253,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto_test.GeneralizedParetoTest.testCDF": {
  "lineno": 101,
  "symbols_in_volume": [
   "hypothesis.given",
   "scipy.stats.genpareto",
   "tensorflow_probability.python.internal.hypothesis_testlib.tfp_hp_settings"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto_test.GeneralizedParetoTest.testEntropy": {
  "lineno": 137,
  "symbols_in_volume": [
   "hypothesis.given",
   "scipy.stats.genpareto.entropy",
   "tensorflow_probability.python.internal.hypothesis_testlib.tfp_hp_settings"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto_test.GeneralizedParetoTest.testFullyReparameterized": {
  "lineno": 166,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto_test.GeneralizedParetoTest.testGradientThroughConcentration": {
  "lineno": 236,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto_test.GeneralizedParetoTest.testGradientThroughLocScale": {
  "lineno": 263,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto_test.GeneralizedParetoTest.testLogPDF": {
  "lineno": 77,
  "symbols_in_volume": [
   "hypothesis.given",
   "numpy.exp",
   "scipy.stats.genpareto",
   "tensorflow_probability.python.internal.hypothesis_testlib.tfp_hp_settings"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto_test.GeneralizedParetoTest.testLogPDFBoundary": {
  "lineno": 93,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto_test.GeneralizedParetoTest.testMean": {
  "lineno": 112,
  "symbols_in_volume": [
   "hypothesis.given",
   "numpy.abs",
   "scipy.stats.genpareto",
   "tensorflow_probability.python.internal.hypothesis_testlib.tfp_hp_settings"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto_test.GeneralizedParetoTest.testNonPositiveInitializationParamsRaises": {
  "lineno": 229,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto_test.GeneralizedParetoTest.testPdfOfSampleMultiDims": {
  "lineno": 205,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto_test.GeneralizedParetoTest.testSample": {
  "lineno": 146,
  "symbols_in_volume": [
   "numpy.float32",
   "scipy.stats.genpareto.mean",
   "scipy.stats.genpareto.var",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto_test.GeneralizedParetoTest.testSampleKolmogorovSmirnovMultiDimensional": {
  "lineno": 176,
  "symbols_in_volume": [
   "numpy.linspace",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto_test.GeneralizedParetoTest.testShape": {
  "lineno": 69,
  "symbols_in_volume": [
   "hypothesis.given",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.internal.hypothesis_testlib.tfp_hp_settings"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto_test.GeneralizedParetoTest.testVariance": {
  "lineno": 123,
  "symbols_in_volume": [
   "hypothesis.given",
   "numpy.abs",
   "scipy.stats.genpareto",
   "sys.stderr",
   "tensorflow_probability.python.internal.hypothesis_testlib.tfp_hp_settings"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.generalized_pareto_test.generalized_paretos": {
  "lineno": 44,
  "symbols_in_volume": [
   "hypothesis.strategies.booleans",
   "hypothesis.strategies.composite",
   "tensorflow.compat.v2.math.tanh",
   "tensorflow_probability.python.internal.hypothesis_testlib.broadcasting_params",
   "tensorflow_probability.python.internal.hypothesis_testlib.identity_fn",
   "tensorflow_probability.python.internal.hypothesis_testlib.shapes",
   "tensorflow_probability.python.internal.hypothesis_testlib.softplus_plus_eps"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric.__init__": {
  "lineno": 55,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._batch_shape": {
  "lineno": 124,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._batch_shape_tensor": {
  "lineno": 120,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._cdf": {
  "lineno": 153,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.floor",
   "tensorflow.compat.v2.math.expm1",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._entropy": {
  "lineno": 173,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.math.softplus",
   "tensorflow_probability.python.internal.assert_util.assert_less",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._event_shape": {
  "lineno": 131,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._event_shape_tensor": {
  "lineno": 128,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._log_prob": {
  "lineno": 163,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.floor",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._logits_and_probs_no_checks": {
  "lineno": 238,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.math.sigmoid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._logits_deprecated_behavior": {
  "lineno": 247,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._logits_parameter_no_checks": {
  "lineno": 227,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._maybe_assert_valid_sample": {
  "lineno": 263,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.assert_nonnegative_integer_form"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._mean": {
  "lineno": 203,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._mode": {
  "lineno": 210,
  "symbols_in_volume": [
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._parameter_control_dependencies": {
  "lineno": 268,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.internal.assert_util.assert_less_equal",
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._params_event_ndims": {
  "lineno": 102,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._probs_deprecated_behavior": {
  "lineno": 255,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._probs_parameter_no_checks": {
  "lineno": 233,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.math.sigmoid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._sample_n": {
  "lineno": 134,
  "symbols_in_volume": [
   "numpy.finfo",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.floor",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._variance": {
  "lineno": 206,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric.logits": {
  "lineno": 106,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric.logits_parameter": {
  "lineno": 213,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric.probs": {
  "lineno": 113,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric.probs_parameter": {
  "lineno": 220,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.math.sigmoid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testGeomLogPmf": {
  "lineno": 62,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "scipy.stats.geom.logpmf",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Geometric"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testGeometricAtBoundary": {
  "lineno": 224,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "numpy.isnan",
   "scipy.stats.geom.logcdf",
   "scipy.stats.geom.logpmf",
   "scipy.stats.geom.mean",
   "scipy.stats.geom.var",
   "tensorflow_probability.python.distributions.Geometric"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testGeometricCDF": {
  "lineno": 121,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "scipy.stats.geom.cdf",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Geometric"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testGeometricEntropy": {
  "lineno": 134,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "scipy.stats.geom.entropy",
   "tensorflow_probability.python.distributions.Geometric"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testGeometricLogPmfMultidimensional": {
  "lineno": 104,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "scipy.stats.geom.logpmf",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Geometric"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testGeometricLogPmf_validate_args": {
  "lineno": 81,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Geometric"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testGeometricMean": {
  "lineno": 141,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.geom.mean",
   "tensorflow_probability.python.distributions.Geometric"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testGeometricMode": {
  "lineno": 162,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow_probability.python.distributions.Geometric"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testGeometricSample": {
  "lineno": 171,
  "symbols_in_volume": [
   "numpy.any",
   "scipy.stats.geom.mean",
   "scipy.stats.geom.var",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Geometric",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testGeometricSampleMultiDimensional": {
  "lineno": 192,
  "symbols_in_volume": [
   "numpy.any",
   "scipy.stats.geom.mean",
   "scipy.stats.geom.var",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Geometric",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testGeometricShape": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Geometric"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testGeometricStddev": {
  "lineno": 155,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.geom.std",
   "tensorflow_probability.python.distributions.Geometric"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testGeometricVariance": {
  "lineno": 148,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.geom.var",
   "tensorflow_probability.python.distributions.Geometric"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testInvalidP": {
  "lineno": 51,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Geometric"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testModifiedVariableProbAssertion": {
  "lineno": 291,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.python.distributions.Geometric"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testParamTensorFromLogits": {
  "lineno": 269,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow_probability.python.distributions.Geometric"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testParamTensorFromProbs": {
  "lineno": 280,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow_probability.python.distributions.Geometric"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.gumbel.Gumbel": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gumbel.Gumbel.__init__": {
  "lineno": 100,
  "symbols_in_volume": [
   "numpy.finfo",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.bijectors.gumbel.Gumbel",
   "tensorflow_probability.python.bijectors.invert.Invert",
   "tensorflow_probability.python.distributions.uniform.Uniform",
   "tensorflow_probability.python.internal.distribution_util.get_broadcast_shape",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel.Gumbel._entropy": {
  "lineno": 179,
  "symbols_in_volume": [
   "numpy.euler_gamma",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel.Gumbel._log_prob": {
  "lineno": 184,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel.Gumbel._mean": {
  "lineno": 189,
  "symbols_in_volume": [
   "numpy.euler_gamma"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel.Gumbel._mode": {
  "lineno": 195,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel.Gumbel._param_shapes": {
  "lineno": 159,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel.Gumbel._parameter_control_dependencies": {
  "lineno": 198,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel.Gumbel._params_event_ndims": {
  "lineno": 165,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel.Gumbel._stddev": {
  "lineno": 192,
  "symbols_in_volume": [
   "numpy.pi",
   "numpy.sqrt",
   "tensorflow.compat.v2.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel.Gumbel.loc": {
  "lineno": 169,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel.Gumbel.scale": {
  "lineno": 174,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel._kl_gumbel_gumbel": {
  "lineno": 202,
  "symbols_in_volume": [
   "numpy.euler_gamma",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.expm1",
   "tensorflow.compat.v2.math.lgamma",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.gumbel_test.GumbelTestDynamicShape": {
  "lineno": 311,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gumbel_test.GumbelTestFloat64StaticShape": {
  "lineno": 305,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gumbel_test.GumbelTestStaticShape": {
  "lineno": 299,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest": {
  "lineno": 36,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.make_tensor": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.cast"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testGumbelCDF": {
  "lineno": 102,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.gumbel_r.cdf",
   "scipy.stats.gumbel_r.logcdf"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testGumbelCdfMultidimensional": {
  "lineno": 120,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.gumbel_r.cdf",
   "scipy.stats.gumbel_r.logcdf"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testGumbelGumbelKL": {
  "lineno": 241,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.euler_gamma",
   "numpy.expm1",
   "numpy.log",
   "numpy.math.lgamma",
   "numpy.vectorize",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.minimum",
   "tensorflow.compat.v2.reduce_any",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testGumbelLogPdf": {
  "lineno": 68,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.gumbel_r.logpdf",
   "scipy.stats.gumbel_r.pdf"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testGumbelLogPdfMultidimensional": {
  "lineno": 85,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.gumbel_r.logpdf",
   "scipy.stats.gumbel_r.pdf"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testGumbelMean": {
  "lineno": 140,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.gumbel_r.mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testGumbelMode": {
  "lineno": 175,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testGumbelSample": {
  "lineno": 186,
  "symbols_in_volume": [
   "scipy.stats.gumbel_r.mean",
   "scipy.stats.gumbel_r.var",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testGumbelSampleMultidimensionalMean": {
  "lineno": 205,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.gumbel_r.mean",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testGumbelSampleMultidimensionalVar": {
  "lineno": 223,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.gumbel_r.var",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testGumbelShape": {
  "lineno": 43,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testGumbelStd": {
  "lineno": 163,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.gumbel_r.std"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testGumbelVariance": {
  "lineno": 151,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.gumbel_r.var"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testInvalidScale": {
  "lineno": 53,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy.__init__": {
  "lineno": 58,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._batch_shape": {
  "lineno": 125,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._batch_shape_tensor": {
  "lineno": 120,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._entropy": {
  "lineno": 163,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._event_shape": {
  "lineno": 131,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._event_shape_tensor": {
  "lineno": 128,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._get_safe_input": {
  "lineno": 192,
  "symbols_in_volume": [
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._log_cdf": {
  "lineno": 154,
  "symbols_in_volume": [
   "numpy.inf",
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.atan",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._log_prob": {
  "lineno": 144,
  "symbols_in_volume": [
   "numpy.inf",
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._maybe_assert_valid_sample": {
  "lineno": 196,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_greater_equal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._mean": {
  "lineno": 173,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.fill",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._mode": {
  "lineno": 170,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._param_shapes": {
  "lineno": 100,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._parameter_control_dependencies": {
  "lineno": 204,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._params_event_ndims": {
  "lineno": 106,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._quantile": {
  "lineno": 167,
  "symbols_in_volume": [
   "numpy.pi",
   "tensorflow.compat.v2.tan"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._sample_n": {
  "lineno": 134,
  "symbols_in_volume": [
   "numpy.pi",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.tan"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._stddev": {
  "lineno": 179,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.fill",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._variance": {
  "lineno": 185,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.fill",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy.loc": {
  "lineno": 110,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy.scale": {
  "lineno": 115,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test.HalfCauchyTestDynamicShapeFloat32": {
  "lineno": 502,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test.HalfCauchyTestDynamicShapeFloat64": {
  "lineno": 514,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test.HalfCauchyTestStaticShapeFloat32": {
  "lineno": 496,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test.HalfCauchyTestStaticShapeFloat64": {
  "lineno": 508,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest": {
  "lineno": 34,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest._create_placeholder_with_default": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest._test_param_shapes": {
  "lineno": 43,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest._test_param_static_shapes": {
  "lineno": 54,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyCdf": {
  "lineno": 199,
  "symbols_in_volume": [
   "scipy.stats.halfcauchy.cdf",
   "scipy.stats.halfcauchy.logcdf",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyCdfBroadcast": {
  "lineno": 263,
  "symbols_in_volume": [
   "scipy.stats.halfcauchy.cdf",
   "scipy.stats.halfcauchy.logcdf",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyCdfGradientZeroOutsideSupport": {
  "lineno": 430,
  "symbols_in_volume": [
   "numpy.zeros_like",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyCdfMultidimensional": {
  "lineno": 238,
  "symbols_in_volume": [
   "scipy.stats.halfcauchy.cdf",
   "scipy.stats.halfcauchy.logcdf",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyCdfValidateArgs": {
  "lineno": 223,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyEntropy": {
  "lineno": 320,
  "symbols_in_volume": [
   "scipy.stats.halfcauchy.entropy",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyGradientsFiniteAtGreaterThanLoc": {
  "lineno": 468,
  "symbols_in_volume": [
   "numpy.linspace",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyGradientsFiniteAtGreaterThanLoc.get_half_cauchy_func": {
  "lineno": 475,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyGradientsFiniteAtGreaterThanLoc.get_half_cauchy_func.half_cauchy_func": {
  "lineno": 476,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyGradientsFiniteAtLoc": {
  "lineno": 449,
  "symbols_in_volume": [
   "numpy.linspace",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyInvalidScale": {
  "lineno": 104,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyMean": {
  "lineno": 285,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyParamShapes": {
  "lineno": 60,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyParamStaticShapes": {
  "lineno": 65,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyPdf": {
  "lineno": 113,
  "symbols_in_volume": [
   "scipy.stats.halfcauchy.logpdf",
   "scipy.stats.halfcauchy.pdf",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyPdfBroadcast": {
  "lineno": 177,
  "symbols_in_volume": [
   "scipy.stats.halfcauchy.logpdf",
   "scipy.stats.halfcauchy.pdf",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyPdfGradientZeroOutsideSupport": {
  "lineno": 411,
  "symbols_in_volume": [
   "numpy.zeros_like",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyPdfMultidimensional": {
  "lineno": 152,
  "symbols_in_volume": [
   "scipy.stats.halfcauchy.logpdf",
   "scipy.stats.halfcauchy.pdf",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyPdfValidateArgs": {
  "lineno": 137,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyQuantile": {
  "lineno": 339,
  "symbols_in_volume": [
   "numpy.linspace",
   "scipy.stats.halfcauchy.ppf",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchySampleMedian": {
  "lineno": 360,
  "symbols_in_volume": [
   "numpy.median",
   "scipy.stats.halfcauchy.median",
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchySampleMultidimensionalMedian": {
  "lineno": 383,
  "symbols_in_volume": [
   "numpy.median",
   "scipy.stats.halfcauchy.median",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyShape": {
  "lineno": 70,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyShapeBroadcast": {
  "lineno": 88,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyStddev": {
  "lineno": 308,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyVariance": {
  "lineno": 296,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal": {
  "lineno": 39,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal.__init__": {
  "lineno": 86,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._batch_shape": {
  "lineno": 135,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._batch_shape_tensor": {
  "lineno": 132,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._cdf": {
  "lineno": 157,
  "symbols_in_volume": [
   "numpy.sqrt",
   "tensorflow.compat.v2.math.erf",
   "tensorflow.compat.v2.nn.relu"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._entropy": {
  "lineno": 161,
  "symbols_in_volume": [
   "numpy.pi",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._event_shape": {
  "lineno": 141,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._event_shape_tensor": {
  "lineno": 138,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._mean": {
  "lineno": 164,
  "symbols_in_volume": [
   "numpy.pi",
   "numpy.sqrt"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._mode": {
  "lineno": 170,
  "symbols_in_volume": [
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._param_shapes": {
  "lineno": 119,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._parameter_control_dependencies": {
  "lineno": 176,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._params_event_ndims": {
  "lineno": 123,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._prob": {
  "lineno": 151,
  "symbols_in_volume": [
   "numpy.pi",
   "numpy.sqrt",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._quantile": {
  "lineno": 167,
  "symbols_in_volume": [
   "numpy.sqrt",
   "tensorflow_probability.python.internal.special_math.erfinv"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._sample_n": {
  "lineno": 144,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._variance": {
  "lineno": 173,
  "symbols_in_volume": [
   "numpy.pi"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal.scale": {
  "lineno": 127,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal._kl_half_normal_half_normal": {
  "lineno": 186,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest._testBatchShapes": {
  "lineno": 67,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest._testParamShapes": {
  "lineno": 54,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest._testParamStaticShapes": {
  "lineno": 62,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.assertAllFinite": {
  "lineno": 44,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.isfinite",
   "numpy.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.assertRaisesError": {
  "lineno": 49,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.setUp": {
  "lineno": 41,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testAssertsPositiveScale": {
  "lineno": 333,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testAssertsPositiveScaleAfterMutation": {
  "lineno": 340,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testFiniteGradients": {
  "lineno": 160,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.float64",
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testFiniteGradients.half_normal_function": {
  "lineno": 164,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testFiniteGradients.half_normal_function.half_normal": {
  "lineno": 165,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testGradientThroughScale": {
  "lineno": 324,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalCDF": {
  "lineno": 116,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.float64",
   "numpy.linspace",
   "scipy.stats.halfnorm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalEntropy": {
  "lineno": 180,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.log",
   "numpy.pi"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalHalfNormalKL": {
  "lineno": 297,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.log",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalLogPDF": {
  "lineno": 84,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "scipy.stats.halfnorm",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalLogPDFMultidimensional": {
  "lineno": 100,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "scipy.stats.halfnorm",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalMeanAndMode": {
  "lineno": 192,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.pi",
   "numpy.sqrt"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalQuantile": {
  "lineno": 148,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.linspace",
   "scipy.stats.halfnorm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalSample": {
  "lineno": 221,
  "symbols_in_volume": [
   "numpy.pi",
   "numpy.sqrt",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalSampleMultiDimensional": {
  "lineno": 244,
  "symbols_in_volume": [
   "numpy.pi",
   "numpy.sqrt",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalShape": {
  "lineno": 276,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalShapeWithPlaceholders": {
  "lineno": 285,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalStandardDeviation": {
  "lineno": 212,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.pi",
   "numpy.sqrt"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalSurvivalFunction": {
  "lineno": 132,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.float64",
   "numpy.linspace",
   "scipy.stats.halfnorm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalVariance": {
  "lineno": 204,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.pi"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testNegativeSigmaFails": {
  "lineno": 271,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testParamShapes": {
  "lineno": 74,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testParamStaticShapes": {
  "lineno": 79,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel.__init__": {
  "lineno": 114,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.broadcast_static_shape",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.is_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.assert_util.assert_greater",
   "tensorflow_probability.python.internal.assert_util.assert_greater_equal",
   "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._batch_shape": {
  "lineno": 308,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._batch_shape_tensor": {
  "lineno": 300,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._event_shape": {
  "lineno": 317,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._event_shape_tensor": {
  "lineno": 311,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._log_prob": {
  "lineno": 459,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.foldl",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reduce_logsumexp",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.distribution_util.move_dimension"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._log_prob.forward_step": {
  "lineno": 498,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._marginal_hidden_probs": {
  "lineno": 510,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.newaxis",
   "tensorflow_probability.python.internal.prefer_static.cond"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._marginal_hidden_probs._scan_multiple_steps": {
  "lineno": 519,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.scan",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._marginal_hidden_probs._scan_multiple_steps.forward_step": {
  "lineno": 524,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._mean": {
  "lineno": 543,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.einsum",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._observation_log_probs": {
  "lineno": 656,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.distribution_util.move_dimension"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._observation_mask_shape_preconditions": {
  "lineno": 639,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.python.internal.assert_util.assert_equal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._sample_n": {
  "lineno": 340,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.one_hot",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.size",
   "tensorflow_probability.python.internal.distribution_util.move_dimension",
   "tensorflow_probability.python.internal.prefer_static.cond",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._sample_n._scan_multiple_steps": {
  "lineno": 385,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.scan",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._sample_n.generate_step": {
  "lineno": 367,
  "symbols_in_volume": [
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.one_hot",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._variance": {
  "lineno": 581,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.einsum",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel.initial_distribution": {
  "lineno": 320,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel.num_states": {
  "lineno": 336,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel.num_steps": {
  "lineno": 332,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel.observation_distribution": {
  "lineno": 328,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel.posterior_marginals": {
  "lineno": 734,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reduce_logsumexp",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.distributions.categorical.Categorical",
   "tensorflow_probability.python.internal.distribution_util.move_dimension",
   "tensorflow_probability.python.internal.prefer_static.cond"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel.posterior_marginals._scan_multiple_steps_backwards": {
  "lineno": 814,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.scan"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel.posterior_marginals._scan_multiple_steps_backwards.backward_step": {
  "lineno": 817,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel.posterior_marginals._scan_multiple_steps_forwards": {
  "lineno": 797,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.scan"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel.posterior_marginals._scan_multiple_steps_forwards.forward_step": {
  "lineno": 798,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel.posterior_mode": {
  "lineno": 844,
  "symbols_in_volume": [
   "tensorflow.compat.v2.argmax",
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.prefer_static.cond"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel.posterior_mode._reduce_multiple_steps": {
  "lineno": 951,
  "symbols_in_volume": [
   "tensorflow.compat.v2.argmax",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.int64",
   "tensorflow.compat.v2.scan",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.distribution_util.move_dimension"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel.posterior_mode._reduce_multiple_steps.backward_step": {
  "lineno": 980,
  "symbols_in_volume": [
   "tensorflow.compat.v2.int64",
   "tensorflow.compat.v2.one_hot",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel.posterior_mode._reduce_multiple_steps.forward_step": {
  "lineno": 954,
  "symbols_in_volume": [
   "tensorflow.compat.v2.argmax",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reduce_max"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel.transition_distribution": {
  "lineno": 324,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model._extract_log_probs": {
  "lineno": 1024,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reshape",
   "tensorflow_probability.python.internal.distribution_util.move_dimension"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model._log_matrix_vector": {
  "lineno": 1012,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reduce_logsumexp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model._log_vector_matrix": {
  "lineno": 1006,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reduce_logsumexp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model._vector_matrix": {
  "lineno": 1018,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test.HiddenMarkovModelTestFloat32": {
  "lineno": 940,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test.HiddenMarkovModelTestFloat64": {
  "lineno": 944,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float64"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest": {
  "lineno": 37,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase",
   "tensorflow_probability.python.internal.test_util.DiscreteScalarDistributionTestHelpers",
   "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.make_placeholders": {
  "lineno": 44,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_batch_mean_shape": {
  "lineno": 360,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.HiddenMarkovModel",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_broadcast_initial_probs": {
  "lineno": 156,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.HiddenMarkovModel",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_broadcast_observations": {
  "lineno": 209,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.HiddenMarkovModel",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_broadcast_transitions": {
  "lineno": 181,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.HiddenMarkovModel",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_coin_toss_batch": {
  "lineno": 332,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.HiddenMarkovModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_coin_tosses": {
  "lineno": 310,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.HiddenMarkovModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_consistency": {
  "lineno": 130,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.HiddenMarkovModel",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_edge_case_log_prob_no_transitions": {
  "lineno": 260,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.HiddenMarkovModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_edge_case_mean_no_transitions": {
  "lineno": 286,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.HiddenMarkovModel",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_edge_case_sample_n_no_transitions": {
  "lineno": 237,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.HiddenMarkovModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_mean_and_variance": {
  "lineno": 386,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.HiddenMarkovModel",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_non_agreeing_states": {
  "lineno": 51,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.HiddenMarkovModel",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_non_scalar_transition_batch": {
  "lineno": 78,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.HiddenMarkovModel",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_marginals_edge_case_no_transitions": {
  "lineno": 899,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.HiddenMarkovModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_marginals_high_rank": {
  "lineno": 454,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.eye",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.bijectors.Reshape",
   "tensorflow_probability.distributions.TransformedDistribution",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.HiddenMarkovModel",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_marginals_high_rank.increase_rank": {
  "lineno": 459,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_marginals_missing_observations": {
  "lineno": 834,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.eye",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.HiddenMarkovModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_mode_basic_example": {
  "lineno": 526,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.HiddenMarkovModel",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_mode_edge_case_no_transitions": {
  "lineno": 868,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.HiddenMarkovModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_mode_high_rank": {
  "lineno": 561,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.bijectors.Reshape",
   "tensorflow_probability.distributions.TransformedDistribution",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.HiddenMarkovModel",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_mode_high_rank.increase_rank": {
  "lineno": 566,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_mode_high_rank_batch": {
  "lineno": 628,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.HiddenMarkovModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_mode_invariance_observations": {
  "lineno": 659,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.random.permutation",
   "tensorflow.compat.v2.argsort",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.transpose",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.HiddenMarkovModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_mode_invariance_states": {
  "lineno": 703,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.random.permutation",
   "tensorflow.compat.v1.batch_gather",
   "tensorflow.compat.v2.argsort",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.transpose",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.HiddenMarkovModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_mode_missing_continuous_observations": {
  "lineno": 755,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.HiddenMarkovModel",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_mode_missing_discrete_observations": {
  "lineno": 790,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.diag",
   "numpy.ones",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.HiddenMarkovModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_mode_missing_discrete_observations.observation_fn": {
  "lineno": 804,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.diag",
   "numpy.ones"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_reproducibility": {
  "lineno": 104,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.random.set_seed",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.HiddenMarkovModel",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_single_sequence_posterior_marginals": {
  "lineno": 410,
  "symbols_in_volume": [
   "numpy.block",
   "numpy.eye",
   "numpy.ones",
   "numpy.sum",
   "numpy.zeros",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.HiddenMarkovModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe": {
  "lineno": 39,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe.__init__": {
  "lineno": 119,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe._batch_shape": {
  "lineno": 174,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe._batch_shape_tensor": {
  "lineno": 171,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe._event_shape": {
  "lineno": 180,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe._event_shape_tensor": {
  "lineno": 177,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe._log_prob": {
  "lineno": 183,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe._mean": {
  "lineno": 208,
  "symbols_in_volume": [
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe._mode": {
  "lineno": 211,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe._param_shapes": {
  "lineno": 158,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe._parameter_control_dependencies": {
  "lineno": 227,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe._params_event_ndims": {
  "lineno": 162,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe._sample_n": {
  "lineno": 198,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe._stddev": {
  "lineno": 214,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.fill",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe._variance": {
  "lineno": 220,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.fill",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe.scale": {
  "lineno": 166,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.horseshoe_test.HorseshoeTestDynamicShapeFloat32": {
  "lineno": 252,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.horseshoe_test.HorseshoeTestDynamicShapeFloat64": {
  "lineno": 262,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.horseshoe_test.HorseshoeTestStaticShapeFloat32": {
  "lineno": 247,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.horseshoe_test.HorseshoeTestStaticShapeFloat64": {
  "lineno": 257,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest._scale_mle": {
  "lineno": 206,
  "symbols_in_volume": [
   "tensorflow.compat.v2.argmax",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.one_hot",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest._test_batch_shapes": {
  "lineno": 50,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest._test_param": {
  "lineno": 238,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.ndarray",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest._test_param_shapes": {
  "lineno": 37,
  "symbols_in_volume": [
   "numpy.ones",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest._test_param_static_shapes": {
  "lineno": 45,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest.testHorseshoeLogPDFGradient": {
  "lineno": 182,
  "symbols_in_volume": [
   "numpy.linspace",
   "numpy.pi",
   "numpy.sqrt",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest.testHorseshoeLogPDFWithBounds": {
  "lineno": 139,
  "symbols_in_volume": [
   "numpy.logspace",
   "numpy.pi",
   "numpy.sqrt",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest.testHorseshoeLogPDFWithMonteCarlo": {
  "lineno": 165,
  "symbols_in_volume": [
   "numpy.linspace",
   "numpy.zeros",
   "tensorflow.compat.v2.reshape",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest.testHorseshoeMeanAndMode": {
  "lineno": 63,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest.testHorseshoeSample": {
  "lineno": 74,
  "symbols_in_volume": [
   "numpy.linspace",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest.testHorseshoeSampleMultiDimensional": {
  "lineno": 97,
  "symbols_in_volume": [
   "numpy.linspace",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest.testHorseshoeShape": {
  "lineno": 126,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest.testNegativeScaleFails": {
  "lineno": 121,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest.testParamShapes": {
  "lineno": 56,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.independent.Independent": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.independent.Independent.__getitem__": {
  "lineno": 151,
  "symbols_in_volume": [
   "collections.Sequence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent.__init__": {
  "lineno": 95,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.distributions.distribution",
   "tensorflow_probability.python.distributions.distribution.name"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._batch_shape": {
  "lineno": 177,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._batch_shape_tensor": {
  "lineno": 170,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.python.internal.prefer_static.rank_from_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._entropy": {
  "lineno": 223,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._event_shape": {
  "lineno": 196,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.internal.tensorshape_util.concatenate",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._event_shape_tensor": {
  "lineno": 186,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.python.internal.prefer_static.concat",
   "tensorflow_probability.python.internal.prefer_static.rank_from_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._get_default_reinterpreted_batch_ndims": {
  "lineno": 268,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.batch_shape",
   "tensorflow_probability.python.distributions.distribution.batch_shape_tensor",
   "tensorflow_probability.python.internal.prefer_static.maximum",
   "tensorflow_probability.python.internal.prefer_static.rank_from_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._log_cdf": {
  "lineno": 219,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._log_prob": {
  "lineno": 214,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._make_runtime_assertions": {
  "lineno": 243,
  "symbols_in_volume": [
   "tensorflow.compat.v2.get_static_value",
   "tensorflow_probability.python.distributions.distribution.batch_shape",
   "tensorflow_probability.python.distributions.distribution.batch_shape_tensor",
   "tensorflow_probability.python.internal.assert_util.assert_less_equal",
   "tensorflow_probability.python.internal.prefer_static.rank_from_shape",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._mean": {
  "lineno": 227,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._mode": {
  "lineno": 239,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._reduce": {
  "lineno": 264,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.range"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._sample_n": {
  "lineno": 210,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._stddev": {
  "lineno": 235,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._variance": {
  "lineno": 231,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent.distribution": {
  "lineno": 143,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent.reinterpreted_batch_ndims": {
  "lineno": 147,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent._kl_independent": {
  "lineno": 275,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL",
   "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.prefer_static.range",
   "tensorflow_probability.python.internal.prefer_static.rank_from_shape",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest._testMnistLike": {
  "lineno": 231,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest._testMnistLike.expected_log_prob": {
  "lineno": 238,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.setUp": {
  "lineno": 38,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testCdfMultivariate": {
  "lineno": 83,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testKLIdentity": {
  "lineno": 193,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testKLMultivariateToMultivariate": {
  "lineno": 211,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.distributions.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testKLRaises": {
  "lineno": 151,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testKLScalarToMultivariate": {
  "lineno": 178,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testMnistLikeDynamicShape": {
  "lineno": 279,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testMnistLikeStaticShape": {
  "lineno": 276,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testSampleAndLogProbMultivariate": {
  "lineno": 61,
  "symbols_in_volume": [
   "numpy.float32",
   "scipy.stats.norm",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testSampleAndLogProbUnivariate": {
  "lineno": 41,
  "symbols_in_volume": [
   "numpy.float32",
   "scipy.stats.norm",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testSampleConsistentStats": {
  "lineno": 97,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.math.squared_difference",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testSlicingGeneral": {
  "lineno": 300,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis.batch_shape",
   "tensorflow.compat.v2.newaxis.event_shape",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.distributions.Independent"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testSlicingScalarDistZeroReinterpretedDims": {
  "lineno": 282,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis.batch_shape",
   "tensorflow.compat.v2.newaxis.event_shape",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.distributions.Independent"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testSlicingSubclasses": {
  "lineno": 320,
  "symbols_in_volume": [
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testSlicingSubclasses.IndepBern1d": {
  "lineno": 321,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Independent"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testSlicingSubclasses.IndepBern1d.__init__": {
  "lineno": 323,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testSlicingSubclasses.IndepBern1dSliceable": {
  "lineno": 334,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testSlicingSubclasses.IndepBern1dSliceable._params_event_ndims": {
  "lineno": 336,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.test_event_ndims_is_static_when_possible": {
  "lineno": 141,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes": {
  "lineno": null,
  "symbols_in_volume": [
   "absl.app.run",
   "absl.flags.DEFINE_float",
   "absl.flags.FLAGS"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.compute_3x3_volumes": {
  "lineno": 87,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.compute_4x4_volumes": {
  "lineno": 93,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.compute_5x5_volumes": {
  "lineno": 99,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.ctv_debatched": {
  "lineno": 62,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.compute_true_volumes"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.main": {
  "lineno": 105,
  "symbols_in_volume": [
   "pprint.pprint"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib._clopper_pearson_confidence_interval": {
  "lineno": 223,
  "symbols_in_volume": [
   "numpy.amax",
   "numpy.amin",
   "numpy.count_nonzero",
   "numpy.unique"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib._clopper_pearson_confidence_interval.p_big_enough": {
  "lineno": 289,
  "symbols_in_volume": [
   "numpy.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib._clopper_pearson_confidence_interval.p_small_enough": {
  "lineno": 286,
  "symbols_in_volume": [
   "numpy.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib._det_large_enough_mask": {
  "lineno": 110,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.linalg.det"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib._psd_mask": {
  "lineno": 80,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.linalg.eigh",
   "tensorflow.compat.v2.reduce_min"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib._uniform_correlation_like_matrix": {
  "lineno": 136,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.matrix_transpose",
   "tensorflow.compat.v2.linalg.set_diag",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.distributions.uniform.Uniform",
   "tensorflow_probability.python.internal.prefer_static.pad",
   "tensorflow_probability.python.math.linalg.fill_triangular"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.compute_true_volumes": {
  "lineno": 301,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.rollaxis",
   "sys.stdout.flush",
   "tensorflow.compat.v1.Session"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.correlation_matrix_volume_rejection_samples": {
  "lineno": 176,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.try_import": {
  "lineno": 68,
  "symbols_in_volume": [
   "importlib.import_module",
   "tensorflow.compat.v1.logging.warning"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.CorrelationMatrixVolumesTest": {
  "lineno": 82,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.CorrelationMatrixVolumesTest.testRejection2D": {
  "lineno": 84,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v1.assert_less",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.correlation_matrix_volume_rejection_samples",
   "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_equal_by_dkwm",
   "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.CorrelationMatrixVolumesTest.testRejection3D": {
  "lineno": 109,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v1.assert_less",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.correlation_matrix_volume_rejection_samples",
   "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_equal_by_dkwm",
   "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.CorrelationMatrixVolumesTest.testRejection4D": {
  "lineno": 133,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v1.assert_less",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.correlation_matrix_volume_rejection_samples",
   "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_equal_by_dkwm",
   "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.CorrelationMatrixVolumesTest.testVolumeEstimation2D": {
  "lineno": 157,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.compute_true_volumes"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.four_by_four_volume": {
  "lineno": 70,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.three_by_three_volume": {
  "lineno": 61,
  "symbols_in_volume": [
   "numpy.pi"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.two_by_two_volume": {
  "lineno": 52,
  "symbols_in_volume": [
   "numpy.sqrt"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats.assign_log_moving_mean_exp": {
  "lineno": 114,
  "symbols_in_volume": [
   "tensorflow.compat.v1.colocate_with",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.reduce_logsumexp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats.assign_moving_mean_variance": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.compat.v1.colocate_with",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.square"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats.moving_mean_variance": {
  "lineno": 184,
  "symbols_in_volume": [
   "tensorflow.compat.v1.variable_scope",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.zeros",
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats_test.MovingLogExponentialMovingMeanExpTest": {
  "lineno": 97,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats_test.MovingLogExponentialMovingMeanExpTest.test_assign_log_moving_mean_exp": {
  "lineno": 100,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.while_loop",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats_test.MovingLogExponentialMovingMeanExpTest.test_assign_log_moving_mean_exp.body": {
  "lineno": 110,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float64",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.debugging.assert_less",
   "tensorflow.compat.v2.math.exp",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.random.normal",
   "tensorflow_probability.python.distributions.internal.moving_stats.assign_log_moving_mean_exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats_test.MovingLogExponentialMovingMeanExpTest.test_assign_log_moving_mean_exp.cond": {
  "lineno": 123,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats_test.MovingReduceMeanVarianceTest": {
  "lineno": 30,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats_test.MovingReduceMeanVarianceTest.test_assign_moving_mean_variance": {
  "lineno": 33,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.while_loop",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats_test.MovingReduceMeanVarianceTest.test_assign_moving_mean_variance.body": {
  "lineno": 42,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.random.normal",
   "tensorflow_probability.python.distributions.internal.moving_stats.assign_moving_mean_variance"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats_test.MovingReduceMeanVarianceTest.test_assign_moving_mean_variance.cond": {
  "lineno": 52,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.internal.slicing._apply_single_step": {
  "lineno": 145,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing._apply_slice_sequence": {
  "lineno": 158,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing._slice_params_to_dict": {
  "lineno": 107,
  "symbols_in_volume": [
   "six.iteritems",
   "tensorflow.compat.v2.convert_to_tensor",
   "warnings.warn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing._slice_single_param": {
  "lineno": 46,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size",
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing.batch_slice": {
  "lineno": 165,
  "symbols_in_volume": [
   "collections.Sequence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest": {
  "lineno": 39,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_multi_ellipsis": {
  "lineno": 172,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.internal.slicing._slice_single_param"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_broadcast_batch": {
  "lineno": 147,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.newaxis.shape",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.internal.slicing._slice_single_param"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_broadcast_batch_leading_newaxis": {
  "lineno": 159,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.newaxis.shape",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.internal.slicing._slice_single_param",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_int": {
  "lineno": 107,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.internal.slicing._slice_single_param"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_int_broadcastdim": {
  "lineno": 115,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.internal.slicing._slice_single_param"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_newaxis_leading": {
  "lineno": 75,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.internal.slicing._slice_single_param"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_newaxis_trailing": {
  "lineno": 83,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.internal.slicing._slice_single_param"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_start": {
  "lineno": 91,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.internal.slicing._slice_single_param"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_start_broadcastdim": {
  "lineno": 99,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.internal.slicing._slice_single_param"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_stop_broadcastdim": {
  "lineno": 67,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.internal.slicing._slice_single_param"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_stop_leadingdim": {
  "lineno": 51,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.internal.slicing._slice_single_param"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_stop_trailingdim": {
  "lineno": 59,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.internal.slicing._slice_single_param"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_tensor": {
  "lineno": 123,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.internal.slicing._slice_single_param"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_tensor_broadcastdim": {
  "lineno": 135,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.internal.slicing._slice_single_param"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_withstep_broadcastdim": {
  "lineno": 42,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.internal.slicing._slice_single_param"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_too_many_slices": {
  "lineno": 180,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.errors.InvalidArgumentError",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.internal.slicing._slice_single_param"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test._MakeSlices": {
  "lineno": 30,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test._MakeSlices.__getitem__": {
  "lineno": 32,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing._batch_sort_vector": {
  "lineno": 505,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.nn.top_k",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing._check_shape_dominates": {
  "lineno": 912,
  "symbols_in_volume": [
   "itertools.chain",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.identity"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing._check_shape_dominates.check": {
  "lineno": 927,
  "symbols_in_volume": [
   "tensorflow.compat.v1.assert_equal",
   "tensorflow.compat.v1.assert_greater_equal",
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing._dkwm_cdf_envelope": {
  "lineno": 879,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.sqrt"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing._do_maximum_mean": {
  "lineno": 566,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.clip_by_value",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.transpose",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing._itemwise_error_rate": {
  "lineno": 1003,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing._maximum_mean": {
  "lineno": 785,
  "symbols_in_volume": [
   "tensorflow.compat.v1.assert_less_equal",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.reduce_max",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing._minimum_mean": {
  "lineno": 832,
  "symbols_in_volume": [
   "tensorflow.compat.v1.assert_greater_equal",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.reduce_min",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing._move_dim_and_sort": {
  "lineno": 494,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.move_dimension"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing._random_unit_hypersphere": {
  "lineno": 1510,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.math.l2_normalize",
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.assert_multivariate_true_cdf_equal_on_projections_two_sample": {
  "lineno": 1517,
  "symbols_in_volume": [
   "tensorflow.compat.v1.assert_equal",
   "tensorflow.compat.v1.assert_scalar",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.tensordot",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_cdf_equal_by_dkwm": {
  "lineno": 160,
  "symbols_in_volume": [
   "tensorflow.compat.v1.assert_less_equal",
   "tensorflow.compat.v1.assert_scalar",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_cdf_equal_by_dkwm_two_sample": {
  "lineno": 604,
  "symbols_in_volume": [
   "tensorflow.compat.v1.assert_equal",
   "tensorflow.compat.v1.assert_less_equal",
   "tensorflow.compat.v1.assert_scalar",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_equal_by_dkwm": {
  "lineno": 1019,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_equal_by_dkwm_two_sample": {
  "lineno": 1276,
  "symbols_in_volume": [
   "tensorflow.compat.v1.assert_equal",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_in_interval_by_dkwm": {
  "lineno": 1199,
  "symbols_in_volume": [
   "tensorflow.compat.v1.assert_greater_equal",
   "tensorflow.compat.v1.assert_less_equal",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.empirical_cdfs": {
  "lineno": 519,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.searchsorted",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.kolmogorov_smirnov_distance": {
  "lineno": 363,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.maximum",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reduce_max",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.kolmogorov_smirnov_distance_two_sample": {
  "lineno": 449,
  "symbols_in_volume": [
   "functools.partial",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_cdfs_detectable_by_dkwm": {
  "lineno": 232,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_cdfs_detectable_by_dkwm_two_sample": {
  "lineno": 668,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm": {
  "lineno": 1061,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm_two_sample": {
  "lineno": 1355,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.min_num_samples_for_dkwm_cdf_test": {
  "lineno": 303,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.maximum",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.min_num_samples_for_dkwm_cdf_two_sample_test": {
  "lineno": 735,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.min_num_samples_for_dkwm_mean_test": {
  "lineno": 1132,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.min_num_samples_for_dkwm_mean_two_sample_test": {
  "lineno": 1435,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.true_mean_confidence_interval_by_dkwm": {
  "lineno": 942,
  "symbols_in_volume": [
   "tensorflow.compat.v1.assert_scalar",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest": {
  "lineno": 40,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.assert_design_soundness": {
  "lineno": 43,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.meshgrid",
   "numpy.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.assert_design_soundness_two_sample": {
  "lineno": 256,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.meshgrid",
   "numpy.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_argument_validity_checking": {
  "lineno": 441,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.float32",
   "numpy.float64",
   "numpy.random.RandomState",
   "tensorflow_probability.python.distributions.internal.statistical_testing.true_mean_confidence_interval_by_dkwm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_cdf_one_sample_assertion": {
  "lineno": 82,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.float32",
   "numpy.float64",
   "numpy.random.RandomState",
   "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_cdf_equal_by_dkwm",
   "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_cdfs_detectable_by_dkwm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_cdf_one_sample_batch_discrete_assertion": {
  "lineno": 160,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.all",
   "numpy.float32",
   "numpy.float64",
   "numpy.random.RandomState",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_cdf_equal_by_dkwm",
   "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_cdfs_detectable_by_dkwm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_cdf_one_sample_batch_discrete_assertion.cdf": {
  "lineno": 169,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_cdf_one_sample_batch_discrete_assertion.check_catches_mistake": {
  "lineno": 191,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_cdf_equal_by_dkwm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_cdf_one_sample_batch_discrete_assertion.left_continuous_cdf": {
  "lineno": 176,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_cdf_two_sample_batch_discrete_assertion": {
  "lineno": 217,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.all",
   "numpy.float32",
   "numpy.float64",
   "numpy.random.RandomState",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_cdf_equal_by_dkwm_two_sample",
   "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_cdfs_detectable_by_dkwm_two_sample"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_cdf_two_sample_batch_discrete_assertion.check_catches_mistake": {
  "lineno": 230,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_cdf_equal_by_dkwm_two_sample"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_design_cdf_one_sample_soundness": {
  "lineno": 76,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.float32",
   "numpy.float64",
   "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_cdfs_detectable_by_dkwm",
   "tensorflow_probability.python.distributions.internal.statistical_testing.min_num_samples_for_dkwm_cdf_test"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_design_cdf_two_sample_soundness": {
  "lineno": 296,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.float32",
   "numpy.float64",
   "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_cdfs_detectable_by_dkwm_two_sample",
   "tensorflow_probability.python.distributions.internal.statistical_testing.min_num_samples_for_dkwm_cdf_two_sample_test"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_design_mean_one_sample_soundness": {
  "lineno": 246,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "functools.partial",
   "numpy.float32",
   "numpy.float64",
   "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm",
   "tensorflow_probability.python.distributions.internal.statistical_testing.min_num_samples_for_dkwm_mean_test"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_design_mean_two_sample_soundness": {
  "lineno": 302,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "functools.partial",
   "numpy.float32",
   "numpy.float64",
   "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm_two_sample",
   "tensorflow_probability.python.distributions.internal.statistical_testing.min_num_samples_for_dkwm_mean_two_sample_test"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_mean_in_interval_one_sample_assertion": {
  "lineno": 359,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.float32",
   "numpy.float64",
   "numpy.random.RandomState",
   "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_in_interval_by_dkwm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_mean_one_sample_assertion": {
  "lineno": 336,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.float32",
   "numpy.float64",
   "numpy.random.RandomState",
   "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_equal_by_dkwm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_mean_two_sample_assertion": {
  "lineno": 385,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.float32",
   "numpy.float64",
   "numpy.random.RandomState",
   "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_equal_by_dkwm_two_sample",
   "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm_two_sample"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_mean_two_sample_assertion_beta_1_2_false": {
  "lineno": 423,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.float32",
   "numpy.float64",
   "numpy.random.RandomState",
   "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_equal_by_dkwm_two_sample"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_mean_two_sample_assertion_beta_2_1_false": {
  "lineno": 405,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.float32",
   "numpy.float64",
   "numpy.random.RandomState",
   "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_equal_by_dkwm_two_sample"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_do_maximum_mean": {
  "lineno": 461,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.float32",
   "numpy.float64",
   "numpy.random.RandomState",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.distributions.internal.statistical_testing._do_maximum_mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_empirical_cdfs_with_duplicates": {
  "lineno": 114,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.internal.statistical_testing.empirical_cdfs"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_kolmogorov_smirnov_distance": {
  "lineno": 135,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.float32",
   "numpy.float64",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.transpose",
   "tensorflow_probability.python.distributions.internal.statistical_testing.kolmogorov_smirnov_distance"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_kolmogorov_smirnov_distance.cdf": {
  "lineno": 141,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_kolmogorov_smirnov_distance.left_continuous_cdf": {
  "lineno": 148,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_kolmogorov_smirnov_distance_two_sample": {
  "lineno": 202,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.float32",
   "numpy.float64",
   "tensorflow.compat.v2.transpose",
   "tensorflow_probability.python.distributions.internal.statistical_testing.kolmogorov_smirnov_distance_two_sample"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_random_projections": {
  "lineno": 483,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.float32",
   "numpy.float64",
   "numpy.random.RandomState",
   "tensorflow_probability.python.distributions.internal.statistical_testing.assert_multivariate_true_cdf_equal_on_projections_two_sample",
   "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_cdfs_detectable_by_dkwm_two_sample",
   "tensorflow_probability.python.internal.test_util.test_seed_stream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_random_projections.assert_catches_mistake": {
  "lineno": 509,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.internal.statistical_testing.assert_multivariate_true_cdf_equal_on_projections_two_sample"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_true_mean_confidence_interval_by_dkwm_one_sample": {
  "lineno": 313,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.float32",
   "numpy.float64",
   "numpy.random.RandomState",
   "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm",
   "tensorflow_probability.python.distributions.internal.statistical_testing.true_mean_confidence_interval_by_dkwm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma.__init__": {
  "lineno": 117,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._batch_shape": {
  "lineno": 187,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._batch_shape_tensor": {
  "lineno": 183,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._cdf": {
  "lineno": 217,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.math.igammac"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._entropy": {
  "lineno": 223,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.digamma",
   "tensorflow.compat.v2.math.lgamma",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._event_shape": {
  "lineno": 194,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._event_shape_tensor": {
  "lineno": 191,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._log_prob": {
  "lineno": 208,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.lgamma",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._maybe_assert_valid_sample": {
  "lineno": 281,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._mean": {
  "lineno": 230,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.assert_util.assert_less",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._mode": {
  "lineno": 275,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._param_shapes": {
  "lineno": 163,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._parameter_control_dependencies": {
  "lineno": 287,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._params_event_ndims": {
  "lineno": 169,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._sample_n": {
  "lineno": 197,
  "symbols_in_volume": [
   "tensorflow.compat.v2.random.gamma",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._variance": {
  "lineno": 251,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.square",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.assert_util.assert_less",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma.concentration": {
  "lineno": 173,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma.scale": {
  "lineno": 178,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest._assertIntegral": {
  "lineno": 280,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest._kstest": {
  "lineno": 251,
  "symbols_in_volume": [
   "scipy.stats.invgamma",
   "scipy.stats.kstest"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaCDF": {
  "lineno": 101,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "scipy.stats.invgamma.cdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaEntropy": {
  "lineno": 179,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.invgamma.entropy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaFullyReparameterized": {
  "lineno": 210,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaFullyReparameterized.inverse_gamma_sampler": {
  "lineno": 213,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaLogPDF": {
  "lineno": 46,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "scipy.stats.invgamma.logpdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaLogPDFMultidimensional": {
  "lineno": 63,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "scipy.stats.invgamma.logpdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaLogPDFMultidimensionalBroadcasting": {
  "lineno": 82,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "scipy.stats.invgamma.logpdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaMeanAllDefined": {
  "lineno": 124,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.invgamma.mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaMeanAllowNanStats": {
  "lineno": 132,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaMeanNanStats": {
  "lineno": 141,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.nan"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaMode": {
  "lineno": 116,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaNonPositiveInitializationParamsRaises": {
  "lineno": 290,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaPdfOfSampleMultiDims": {
  "lineno": 257,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.invgamma.mean",
   "scipy.stats.invgamma.var",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaSample": {
  "lineno": 187,
  "symbols_in_volume": [
   "scipy.stats.invgamma.mean",
   "scipy.stats.invgamma.var",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaSampleMultiDimensional": {
  "lineno": 221,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.array",
   "numpy.float32",
   "numpy.reshape",
   "numpy.zeros_like",
   "scipy.stats.invgamma.mean",
   "scipy.stats.invgamma.var",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaShape": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaVarianceAllDefined": {
  "lineno": 153,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.invgamma.var"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaVarianceAllowNanStats": {
  "lineno": 161,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaVarianceNanStats": {
  "lineno": 169,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.nan",
   "scipy.stats.invgamma.var"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testModifiedVariableAssertion": {
  "lineno": 304,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian": {
  "lineno": 39,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian.__init__": {
  "lineno": 78,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian._batch_shape": {
  "lineno": 141,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian._batch_shape_tensor": {
  "lineno": 135,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian._cdf": {
  "lineno": 176,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.exp",
   "tensorflow_probability.python.internal.special_math.ndtr"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian._event_shape": {
  "lineno": 145,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian._log_prob": {
  "lineno": 168,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian._maybe_assert_valid_sample": {
  "lineno": 198,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian._mean": {
  "lineno": 187,
  "symbols_in_volume": [
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian._parameter_control_dependencies": {
  "lineno": 203,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian._params_event_ndims": {
  "lineno": 121,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian._sample_n": {
  "lineno": 148,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian._variance": {
  "lineno": 193,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian.concentration": {
  "lineno": 130,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian.loc": {
  "lineno": 125,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test.InverseGaussianTestDynamicShapeFloat32": {
  "lineno": 377,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test.InverseGaussianTestDynamicShapeFloat64": {
  "lineno": 389,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float64",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test.InverseGaussianTestStaticShapeFloat32": {
  "lineno": 371,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test.InverseGaussianTestStaticShapeFloat64": {
  "lineno": 383,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float64",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.make_tensor": {
  "lineno": 41,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.cast"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInvalidConcentration": {
  "lineno": 83,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.InverseGaussian"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInvalidLoc": {
  "lineno": 71,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.InverseGaussian"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianCdfValidateArgs": {
  "lineno": 197,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.InverseGaussian"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianLogCdf": {
  "lineno": 163,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.InverseGaussian"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianLogCdfMultidimensional": {
  "lineno": 208,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow_probability.python.distributions.InverseGaussian"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianLogCdfValidateArgs": {
  "lineno": 186,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.InverseGaussian"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianLogPdf": {
  "lineno": 95,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.InverseGaussian"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianLogPdfMultidimensional": {
  "lineno": 140,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow_probability.python.distributions.InverseGaussian"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianLogPdfValidateArgs": {
  "lineno": 118,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.InverseGaussian"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianMean": {
  "lineno": 231,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow_probability.python.distributions.InverseGaussian"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianMeanBroadCast": {
  "lineno": 243,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow_probability.python.distributions.InverseGaussian"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianPdfValidateArgs": {
  "lineno": 129,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.InverseGaussian"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianSampleMean": {
  "lineno": 281,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.InverseGaussian",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianSampleMultidimensionalMean": {
  "lineno": 319,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.array",
   "tensorflow_probability.python.distributions.InverseGaussian",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianSampleMultidimensionalVariance": {
  "lineno": 338,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.array",
   "tensorflow_probability.python.distributions.InverseGaussian",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianSampleVariance": {
  "lineno": 300,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.InverseGaussian",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianShape": {
  "lineno": 46,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.distributions.InverseGaussian"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianShapeBroadcast": {
  "lineno": 58,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.distributions.InverseGaussian"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianVariance": {
  "lineno": 255,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow_probability.python.distributions.InverseGaussian"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianVarianceBroadcast": {
  "lineno": 268,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow_probability.python.distributions.InverseGaussian"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testModifiedVariableAssertion": {
  "lineno": 357,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.python.distributions.InverseGaussian"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._scipy_invgauss": {
  "lineno": 30,
  "symbols_in_volume": [
   "scipy.stats.invgauss"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution": {
  "lineno": 38,
  "symbols_in_volume": [
   "abc.ABCMeta",
   "six.add_metaclass",
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution._call_flat_sample_distributions": {
  "lineno": 307,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution._call_log_prob": {
  "lineno": 320,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution._call_sample_n": {
  "lineno": 324,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution._flat_sample_distributions": {
  "lineno": 81,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution._log_prob": {
  "lineno": 276,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution._map_attr_over_dists": {
  "lineno": 298,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution._map_measure_over_dists": {
  "lineno": 290,
  "symbols_in_volume": [
   "tensorflow.compat.v2.nest.flatten"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution._model_flatten": {
  "lineno": 89,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution._model_unflatten": {
  "lineno": 85,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution._sample_n": {
  "lineno": 280,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution.batch_shape": {
  "lineno": 119,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution.batch_shape_tensor": {
  "lineno": 140,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution.dtype": {
  "lineno": 93,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution.event_shape": {
  "lineno": 157,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution.event_shape_tensor": {
  "lineno": 175,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution.is_scalar_batch": {
  "lineno": 263,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution.is_scalar_event": {
  "lineno": 250,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution.log_prob_parts": {
  "lineno": 215,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution.model": {
  "lineno": 77,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution.prob_parts": {
  "lineno": 233,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution.reparameterization_type": {
  "lineno": 102,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution.sample_distributions": {
  "lineno": 189,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.maybe_check_wont_broadcast": {
  "lineno": 329,
  "symbols_in_volume": [
   "numpy.all",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.prefer_static.is_numpy",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine.JointDistributionCoroutine": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.joint_distribution.JointDistribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine.JointDistributionCoroutine.Root": {
  "lineno": 135,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine.JointDistributionCoroutine.__init__": {
  "lineno": 139,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine.JointDistributionCoroutine._assert_compatible_shape": {
  "lineno": 170,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.assert_util.assert_greater_equal",
   "tensorflow_probability.python.internal.prefer_static.rank_from_shape",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine.JointDistributionCoroutine._flat_sample_distributions": {
  "lineno": 221,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine.JointDistributionCoroutine._model_flatten": {
  "lineno": 265,
  "symbols_in_volume": [
   "tensorflow.python.util.nest.flatten_up_to"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine.JointDistributionCoroutine._model_unflatten": {
  "lineno": 259,
  "symbols_in_volume": [
   "tensorflow.compat.v2.nest.pack_sequence_as"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest": {
  "lineno": 39,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_batch_and_event_shape_no_plate": {
  "lineno": 42,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_batch_and_event_shape_no_plate.dist": {
  "lineno": 51,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_batch_and_event_shape_with_plate": {
  "lineno": 95,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_batch_and_event_shape_with_plate.dist": {
  "lineno": 106,
  "symbols_in_volume": [
   "tensorflow.compat.v2.expand_dims"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_check_sample_rank": {
  "lineno": 322,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_check_sample_rank.dist": {
  "lineno": 323,
  "symbols_in_volume": [
   "tensorflow.compat.v2.expand_dims"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_check_sample_shape": {
  "lineno": 340,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_check_sample_shape.dist": {
  "lineno": 341,
  "symbols_in_volume": [
   "tensorflow.compat.v2.expand_dims"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_detect_missing_root": {
  "lineno": 298,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_detect_missing_root.dist": {
  "lineno": 309,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_latent_dirichlet_allocation": {
  "lineno": 566,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.math.softplus",
   "tensorflow_probability.util.DeferredTensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_latent_dirichlet_allocation.lda_model": {
  "lineno": 598,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_log_prob_multiple_roots": {
  "lineno": 426,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_log_prob_multiple_roots.dist": {
  "lineno": 437,
  "symbols_in_volume": [
   "tensorflow.compat.v2.expand_dims"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_log_prob_multiple_roots_and_samples": {
  "lineno": 462,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_log_prob_multiple_roots_and_samples.dist": {
  "lineno": 473,
  "symbols_in_volume": [
   "tensorflow.compat.v2.expand_dims"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_log_prob_multiple_samples": {
  "lineno": 358,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_log_prob_multiple_samples.dist": {
  "lineno": 367,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_log_prob_no_plate": {
  "lineno": 230,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_log_prob_no_plate.dist": {
  "lineno": 239,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_log_prob_with_plate": {
  "lineno": 264,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_log_prob_with_plate.dist": {
  "lineno": 274,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_prob_multiple_samples": {
  "lineno": 392,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_prob_multiple_samples.dist": {
  "lineno": 401,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_repr_with_custom_sample_dtype": {
  "lineno": 531,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_repr_with_custom_sample_dtype.model": {
  "lineno": 532,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_sample_dtype_structures_output": {
  "lineno": 501,
  "symbols_in_volume": [
   "collections.namedtuple",
   "tensorflow.compat.v2.nest.assert_same_structure"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_sample_dtype_structures_output.noncentered_horseshoe_prior": {
  "lineno": 502,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_sample_shape_no_plate": {
  "lineno": 154,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_sample_shape_no_plate.dist": {
  "lineno": 163,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_sample_shape_with_plate": {
  "lineno": 190,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_sample_shape_with_plate.dist": {
  "lineno": 201,
  "symbols_in_volume": [
   "tensorflow.compat.v2.expand_dims"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named.JointDistributionNamed": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named.JointDistributionNamed.__init__": {
  "lineno": 156,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named.JointDistributionNamed._build": {
  "lineno": 172,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named.JointDistributionNamed._model_flatten": {
  "lineno": 188,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named.JointDistributionNamed._model_unflatten": {
  "lineno": 184,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named.JointDistributionNamed._resolve_graph": {
  "lineno": 195,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named._Node": {
  "lineno": 201,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named._Node.__init__": {
  "lineno": 203,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named._best_order": {
  "lineno": 223,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named._best_order._explore": {
  "lineno": 225,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named._convert_to_dict": {
  "lineno": 274,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named._depth": {
  "lineno": 209,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named._depth._explore": {
  "lineno": 211,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named._is_dict_like": {
  "lineno": 269,
  "symbols_in_volume": [
   "collections.Mapping"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named._prob_chain_rule_model_flatten": {
  "lineno": 245,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.joint_distribution_sequential._get_required_args",
   "tensorflow_probability.python.internal.distribution_util.is_distribution_instance"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named._prob_chain_rule_model_flatten._make": {
  "lineno": 247,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named._prob_chain_rule_model_flatten._make._fn": {
  "lineno": 252,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest": {
  "lineno": 34,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_batch_slicing": {
  "lineno": 265,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Beta",
   "tensorflow_probability.python.distributions.Exponential",
   "tensorflow_probability.python.distributions.JointDistributionNamed",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_copy": {
  "lineno": 255,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.distributions.JointDistributionNamed",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_cross_entropy": {
  "lineno": 178,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Exponential",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.JointDistributionNamed",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_dict_sample_log_prob": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.distributions.Exponential",
   "tensorflow_probability.python.distributions.Gamma",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.JointDistributionNamed",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.Sample",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_graph_resolution": {
  "lineno": 201,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Exponential",
   "tensorflow_probability.python.distributions.Gamma",
   "tensorflow_probability.python.distributions.HalfNormal",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.JointDistributionNamed",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.StudentT"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_kl_divergence": {
  "lineno": 159,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Exponential",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.JointDistributionNamed",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_namedtuple_sample_log_prob": {
  "lineno": 99,
  "symbols_in_volume": [
   "collections.namedtuple",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.distributions.Exponential",
   "tensorflow_probability.python.distributions.Gamma",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.JointDistributionNamed",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.Sample",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_norequired_args_maker": {
  "lineno": 194,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.distributions.JointDistributionNamed",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_notimplemented_evaluative_statistic": {
  "lineno": 242,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.distributions.JointDistributionNamed",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_notimplemented_summary_statistic": {
  "lineno": 232,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.distributions.JointDistributionNamed",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_sample_complex_dependency": {
  "lineno": 336,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Exponential",
   "tensorflow_probability.python.distributions.Gamma",
   "tensorflow_probability.python.distributions.HalfNormal",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.JointDistributionNamed",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.StudentT"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_sample_shape_propagation_default_behavior": {
  "lineno": 288,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Exponential",
   "tensorflow_probability.python.distributions.Gamma",
   "tensorflow_probability.python.distributions.HalfNormal",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.JointDistributionNamed",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.StudentT",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_sample_shape_propagation_nondefault_behavior": {
  "lineno": 310,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Exponential",
   "tensorflow_probability.python.distributions.Gamma",
   "tensorflow_probability.python.distributions.HalfNormal",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.JointDistributionNamed",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.StudentT",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_summary_statistic": {
  "lineno": 223,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.distributions.JointDistributionNamed",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential": {
  "lineno": 50,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.joint_distribution.JointDistribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential.__getitem__": {
  "lineno": 360,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential.__getitem__._sliced_maker": {
  "lineno": 395,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential.__getitem__._sliced_maker._fn": {
  "lineno": 396,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential.__init__": {
  "lineno": 178,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential._build": {
  "lineno": 213,
  "symbols_in_volume": [
   "collections.Sequence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential._call_attr": {
  "lineno": 271,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential._cross_entropy": {
  "lineno": 345,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.joint_distribution.maybe_check_wont_broadcast"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential._entropy": {
  "lineno": 336,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.joint_distribution.maybe_check_wont_broadcast"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential._flat_sample_distributions": {
  "lineno": 223,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential._model_flatten": {
  "lineno": 260,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential._model_unflatten": {
  "lineno": 252,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential._resolve_graph": {
  "lineno": 279,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential._get_required_args": {
  "lineno": 478,
  "symbols_in_volume": [
   "tensorflow.python.util.tf_inspect.getfullargspec",
   "tensorflow.python.util.tf_inspect.isclass"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential._kl_joint_joint": {
  "lineno": 493,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL",
   "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential._make_summary_statistic": {
  "lineno": 38,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential._make_summary_statistic._fn": {
  "lineno": 40,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential._resolve_distribution_names": {
  "lineno": 455,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential._unify_call_signature": {
  "lineno": 412,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.is_distribution_instance"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential._unify_call_signature.dist_fn_wrapped": {
  "lineno": 438,
  "symbols_in_volume": [
   "functools.wraps"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.Dummy": {
  "lineno": 40,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.Dummy.__init__": {
  "lineno": 44,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest": {
  "lineno": 48,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_argspec": {
  "lineno": 302,
  "symbols_in_volume": [
   "tensorflow.python.util.tf_inspect.getfullargspec"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_batch_slicing": {
  "lineno": 218,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_copy": {
  "lineno": 208,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_cross_entropy": {
  "lineno": 130,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_graph_resolution": {
  "lineno": 156,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_invalid_structure_raises_error": {
  "lineno": 309,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_kl_divergence": {
  "lineno": 108,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_latent_dirichlet_allocation": {
  "lineno": 324,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.math.softplus",
   "tensorflow_probability.util.DeferredTensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_norequired_args_maker": {
  "lineno": 150,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_notimplemented_evaluative_statistic": {
  "lineno": 195,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_notimplemented_summary_statistic": {
  "lineno": 185,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_only_memoize_non_user_input": {
  "lineno": 289,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_poisson_switchover_graphical_model": {
  "lineno": 387,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.sum",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.linspace",
   "tensorflow.compat.v2.math.reciprocal",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reduce_mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_sample_log_prob": {
  "lineno": 52,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_sample_shape_propagation_default_behavior": {
  "lineno": 241,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_sample_shape_propagation_nondefault_behavior": {
  "lineno": 263,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_simple_example_with_dynamic_shapes": {
  "lineno": 316,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_summary_statistic": {
  "lineno": 176,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL": {
  "lineno": 150,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL.__call__": {
  "lineno": 169,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL.__init__": {
  "lineno": 160,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler._dist_classes": {
  "lineno": 193,
  "symbols_in_volume": [
   "inspect.isclass"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler._registered_kl": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow.python.util.tf_inspect.getmro"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler._summarize_registered_kls": {
  "lineno": 203,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler.augment_kl_xent_docs": {
  "lineno": 242,
  "symbols_in_volume": [
   "six.PY3"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler.augment_kl_xent_docs.merge_doc": {
  "lineno": 258,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler.cross_entropy": {
  "lineno": 118,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence": {
  "lineno": 54,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Assert",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.logical_not",
   "tensorflow.compat.v2.math.is_nan",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_any"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.python.distributions.kullback_leibler._DIVERGENCES",
   "tensorflow_probability.python.distributions.kullback_leibler._registered_kl"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest._testIndirectRegistration": {
  "lineno": 100,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest._testIndirectRegistration.Sub1": {
  "lineno": 102,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.normal.Normal"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest._testIndirectRegistration.Sub1.entropy": {
  "lineno": 104,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest._testIndirectRegistration.Sub11": {
  "lineno": 112,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest._testIndirectRegistration.Sub11.entropy": {
  "lineno": 114,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest._testIndirectRegistration.Sub2": {
  "lineno": 107,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.normal.Normal"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest._testIndirectRegistration.Sub2.entropy": {
  "lineno": 109,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest._testIndirectRegistration._kl11": {
  "lineno": 118,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest._testIndirectRegistration._kl12": {
  "lineno": 122,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest._testIndirectRegistration._kl21": {
  "lineno": 126,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testDomainErrorExceptions": {
  "lineno": 52,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testDomainErrorExceptions.MyDistException": {
  "lineno": 54,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.normal.Normal"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testDomainErrorExceptions._kl": {
  "lineno": 58,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testExactRegistrationsAllMatch": {
  "lineno": 96,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testFunctionCrossEntropy": {
  "lineno": 158,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.kullback_leibler.cross_entropy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testIndirectRegistrationCrossEntropy": {
  "lineno": 154,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testIndirectRegistrationKLFun": {
  "lineno": 147,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testIndirectRegistrationKLSelf": {
  "lineno": 150,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testMissing": {
  "lineno": 161,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testMissing.MyDist": {
  "lineno": 163,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testMissing.MyDist.__init__": {
  "lineno": 165,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testRegistration": {
  "lineno": 39,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testRegistration.MyDist": {
  "lineno": 41,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.normal.Normal"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testRegistration._kl": {
  "lineno": 45,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testRegistrationFailures": {
  "lineno": 81,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testRegistrationFailures.MyDist": {
  "lineno": 83,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.normal.Normal"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.kumaraswamy": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.Kumaraswamy": {
  "lineno": 60,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.Kumaraswamy.__init__": {
  "lineno": 125,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.bijectors.kumaraswamy.Kumaraswamy",
   "tensorflow_probability.python.distributions.uniform.Uniform",
   "tensorflow_probability.python.internal.distribution_util.get_broadcast_shape",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.Kumaraswamy._entropy": {
  "lineno": 187,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.Kumaraswamy._log_moment": {
  "lineno": 193,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.lbeta",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.Kumaraswamy._mean": {
  "lineno": 208,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.Kumaraswamy._mode": {
  "lineno": 225,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.assert_util.assert_less",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.Kumaraswamy._parameter_control_dependencies": {
  "lineno": 249,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.Kumaraswamy._params_event_ndims": {
  "lineno": 173,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.Kumaraswamy._variance": {
  "lineno": 211,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.python.math.reduce_weighted_logsumexp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.Kumaraswamy.concentration0": {
  "lineno": 182,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.Kumaraswamy.concentration1": {
  "lineno": 177,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy._harmonic_number": {
  "lineno": 42,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.digamma",
   "tensorflow.compat.v2.ones"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest": {
  "lineno": 64,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testAProperty": {
  "lineno": 94,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testBProperty": {
  "lineno": 101,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testComplexShapes": {
  "lineno": 76,
  "symbols_in_volume": [
   "numpy.random.rand",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.distributions.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testComplexShapesBroadcast": {
  "lineno": 85,
  "symbols_in_volume": [
   "numpy.random.rand",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.distributions.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testInvalidConcentration0": {
  "lineno": 347,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.python.distributions.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testInvalidConcentration1": {
  "lineno": 335,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.python.distributions.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testKumaraswamyCdf": {
  "lineno": 313,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.float32",
   "numpy.float64",
   "numpy.ones",
   "numpy.random.random",
   "tensorflow_probability.python.distributions.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testKumaraswamyEntropy": {
  "lineno": 247,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.log",
   "tensorflow.compat.v1.Session",
   "tensorflow_probability.python.distributions.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testKumaraswamyLogCdf": {
  "lineno": 324,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.float32",
   "numpy.float64",
   "numpy.ones",
   "numpy.random.random",
   "tensorflow.compat.v2.exp",
   "tensorflow_probability.python.distributions.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testKumaraswamyMean": {
  "lineno": 188,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testKumaraswamyMode": {
  "lineno": 205,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow_probability.python.distributions.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testKumaraswamyModeEnableAllowNanStats": {
  "lineno": 227,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.nan",
   "tensorflow.compat.v1.Session",
   "tensorflow_probability.python.distributions.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testKumaraswamyModeInvalid": {
  "lineno": 213,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v1.Session",
   "tensorflow_probability.python.distributions.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testKumaraswamySample": {
  "lineno": 257,
  "symbols_in_volume": [
   "numpy.any",
   "numpy.cov",
   "scipy.stats.kstest",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testKumaraswamySampleMultidimensional": {
  "lineno": 299,
  "symbols_in_volume": [
   "numpy.any",
   "numpy.float32",
   "numpy.random.rand",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testKumaraswamySampleMultipleTimes": {
  "lineno": 281,
  "symbols_in_volume": [
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow_probability.python.distributions.Kumaraswamy",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testKumaraswamyVariance": {
  "lineno": 196,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testPdfAStretchedInBroadcastWhenLowerRank": {
  "lineno": 161,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testPdfAStretchedInBroadcastWhenSameRank": {
  "lineno": 151,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testPdfTwoBatches": {
  "lineno": 120,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testPdfTwoBatchesNontrivialX": {
  "lineno": 130,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testPdfUniformZeroBatch": {
  "lineno": 140,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow_probability.python.distributions.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testPdfXProper": {
  "lineno": 108,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testPdfXStretchedInBroadcastWhenLowerRank": {
  "lineno": 179,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testPdfXStretchedInBroadcastWhenSameRank": {
  "lineno": 170,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testSimpleShapes": {
  "lineno": 67,
  "symbols_in_volume": [
   "numpy.random.rand",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.distributions.Kumaraswamy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test._harmonic_number": {
  "lineno": 45,
  "symbols_in_volume": [
   "numpy.asarray",
   "scipy.special.psi"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_cdf": {
  "lineno": 50,
  "symbols_in_volume": [
   "numpy.asarray"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_mode": {
  "lineno": 33,
  "symbols_in_volume": [
   "numpy.asarray"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_moment": {
  "lineno": 39,
  "symbols_in_volume": [
   "numpy.asarray",
   "scipy.special.beta"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_pdf": {
  "lineno": 57,
  "symbols_in_volume": [
   "numpy.asarray"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace.__init__": {
  "lineno": 68,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._batch_shape": {
  "lineno": 138,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._batch_shape_tensor": {
  "lineno": 133,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.broadcast_shape",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._cdf": {
  "lineno": 180,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.math.expm1",
   "tensorflow.compat.v2.sign"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._entropy": {
  "lineno": 184,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._event_shape": {
  "lineno": 145,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._event_shape_tensor": {
  "lineno": 142,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._log_cdf": {
  "lineno": 174,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.special_math.log_cdf_laplace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._log_prob": {
  "lineno": 168,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._log_survival_function": {
  "lineno": 177,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.special_math.log_cdf_laplace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._mean": {
  "lineno": 189,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._median": {
  "lineno": 198,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._mode": {
  "lineno": 201,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._param_shapes": {
  "lineno": 113,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._parameter_control_dependencies": {
  "lineno": 207,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._params_event_ndims": {
  "lineno": 119,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._sample_n": {
  "lineno": 148,
  "symbols_in_volume": [
   "numpy.nextafter",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.sign",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._stddev": {
  "lineno": 193,
  "symbols_in_volume": [
   "numpy.sqrt",
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._z": {
  "lineno": 204,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace.loc": {
  "lineno": 123,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace.scale": {
  "lineno": 128,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace._kl_laplace_laplace": {
  "lineno": 217,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest._assertIntegral": {
  "lineno": 280,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest._kstest": {
  "lineno": 249,
  "symbols_in_volume": [
   "scipy.stats.kstest",
   "scipy.stats.laplace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testAssertParamsAreFloats": {
  "lineno": 360,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testAssertsPositiveScaleAfterMutation": {
  "lineno": 352,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testGradientThroughParams": {
  "lineno": 342,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceCDF": {
  "lineno": 103,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "scipy.stats.laplace.cdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceEntropy": {
  "lineno": 179,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.laplace.entropy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceFullyReparameterized": {
  "lineno": 210,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceLaplaceKL": {
  "lineno": 311,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceLogCDF": {
  "lineno": 118,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "scipy.stats.laplace.logcdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceLogPDF": {
  "lineno": 48,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "scipy.stats.laplace.logpdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceLogPDFMultidimensional": {
  "lineno": 65,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "scipy.stats.laplace.logpdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceLogPDFMultidimensionalBroadcasting": {
  "lineno": 84,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "scipy.stats.laplace.logpdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceLogSurvivalFunction": {
  "lineno": 133,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "scipy.stats.laplace.logsf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceMean": {
  "lineno": 148,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.laplace.mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceMode": {
  "lineno": 156,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceNonPositiveInitializationParamsRaises": {
  "lineno": 290,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplacePdfOfSampleMultiDims": {
  "lineno": 255,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.laplace.mean",
   "scipy.stats.laplace.var",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceSample": {
  "lineno": 187,
  "symbols_in_volume": [
   "scipy.stats.laplace.mean",
   "scipy.stats.laplace.var",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceSampleMultiDimensional": {
  "lineno": 218,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.array",
   "numpy.float32",
   "numpy.reshape",
   "numpy.zeros_like",
   "scipy.stats.laplace.mean",
   "scipy.stats.laplace.var",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceShape": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceStd": {
  "lineno": 171,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.laplace.std"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceVariance": {
  "lineno": 163,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.laplace.var"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple",
   "tensorflow.compat.v2.linalg"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel": {
  "lineno": 163,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel.__init__": {
  "lineno": 287,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_value",
   "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel.__init__._maybe_make_callable": {
  "lineno": 385,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel.__init__._maybe_make_callable_from_linop": {
  "lineno": 367,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel.__init__._maybe_make_linop": {
  "lineno": 359,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel._batch_shape": {
  "lineno": 589,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel._batch_shape_tensor": {
  "lineno": 572,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel._event_shape": {
  "lineno": 606,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel._event_shape_tensor": {
  "lineno": 612,
  "symbols_in_volume": [
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel._joint_covariances": {
  "lineno": 1071,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.scan",
   "tensorflow_probability.python.internal.distribution_util.move_dimension"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel._joint_mean": {
  "lineno": 1011,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.scan",
   "tensorflow.compat.v2.squeeze",
   "tensorflow_probability.python.internal.distribution_util.move_dimension"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel._joint_sample_n": {
  "lineno": 619,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.scan",
   "tensorflow.compat.v2.squeeze",
   "tensorflow_probability.python.internal.distribution_util.move_dimension",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_value",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel._log_prob": {
  "lineno": 711,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel._mean": {
  "lineno": 1007,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel._prob": {
  "lineno": 698,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel._sample_n": {
  "lineno": 615,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel._variance": {
  "lineno": 1124,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.diag_part"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel.backward_smoothing_pass": {
  "lineno": 476,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.scan",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.distribution_util.move_dimension"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel.forward_filter": {
  "lineno": 725,
  "symbols_in_volume": [
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.broadcast_static_shape",
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.scan",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.assert_util.assert_greater_equal",
   "tensorflow_probability.python.internal.distribution_util.move_dimension",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel.latent_size": {
  "lineno": 564,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel.latents_to_observations": {
  "lineno": 1128,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.scan",
   "tensorflow_probability.python.internal.distribution_util.move_dimension"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel.observation_size": {
  "lineno": 568,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel.posterior_marginals": {
  "lineno": 944,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm._augment_sample_shape": {
  "lineno": 77,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.assert_util.assert_greater_equal",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_shape",
   "tensorflow_probability.python.internal.tensorshape_util.as_list",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm._check_equal_shape": {
  "lineno": 49,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.tensorshape_util.as_list",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm._propagate_cov": {
  "lineno": 1752,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm._propagate_mean": {
  "lineno": 1747,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm._safe_concat": {
  "lineno": 41,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.reshape",
   "tensorflow_probability.python.internal.prefer_static.concat",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.backward_smoothing_update": {
  "lineno": 1229,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.linalg.cholesky_solve",
   "tensorflow.compat.v2.linalg.matmul"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_backward_pass_step": {
  "lineno": 1189,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_backward_pass_step.backward_pass_step": {
  "lineno": 1202,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_cov_step": {
  "lineno": 1600,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_cov_step.cov_step": {
  "lineno": 1627,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_filter_step": {
  "lineno": 1306,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_filter_step.kalman_filter_step": {
  "lineno": 1333,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_mean_step": {
  "lineno": 1558,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_mean_step.mean_step": {
  "lineno": 1585,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_sample_step": {
  "lineno": 1645,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_sample_step.sample_step": {
  "lineno": 1680,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_pushforward_latents_step": {
  "lineno": 1711,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_pushforward_latents_step.pushforward_latents_step": {
  "lineno": 1729,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.kalman_transition": {
  "lineno": 1545,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.linear_gaussian_update": {
  "lineno": 1420,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.linalg.cholesky_solve",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.linalg.matmul",
   "tensorflow.compat.v2.linalg.set_diag",
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.python.distributions.independent.Independent",
   "tensorflow_probability.python.distributions.mvn_tril.MultivariateNormalTriL",
   "tensorflow_probability.python.distributions.normal.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.AugmentSampleShapeTestDynamic": {
  "lineno": 1366,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.AugmentSampleShapeTestDynamic.assertRaisesError": {
  "lineno": 1370,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.AugmentSampleShapeTestDynamic.build_inputs": {
  "lineno": 1376,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.int32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.random.normal",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.AugmentSampleShapeTestDynamic.maybe_evaluate": {
  "lineno": 1386,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.AugmentSampleShapeTestStatic": {
  "lineno": 1349,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.AugmentSampleShapeTestStatic.assertRaisesError": {
  "lineno": 1352,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.AugmentSampleShapeTestStatic.build_inputs": {
  "lineno": 1355,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.int32",
   "tensorflow.compat.v2.random.normal",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.AugmentSampleShapeTestStatic.maybe_evaluate": {
  "lineno": 1362,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.BatchTest": {
  "lineno": 367,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.BatchTest._build_random_model": {
  "lineno": 374,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.softplus",
   "tensorflow.compat.v2.random.normal",
   "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.BatchTest._sanity_check_shapes": {
  "lineno": 416,
  "symbols_in_volume": [
   "tensorflow.compat.v2.random.normal",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.BatchTest.setUp": {
  "lineno": 371,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.BatchTest.testBroadcastBatchShape": {
  "lineno": 491,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.BatchTest.testConstantBatchShape": {
  "lineno": 468,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.BatchTest.testLatentsToObservationsWorksWithBatchShape": {
  "lineno": 540,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.IIDNormalTestDynamic32": {
  "lineno": 182,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.IIDNormalTestStatic32": {
  "lineno": 170,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.IIDNormalTestStatic64": {
  "lineno": 176,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.KalmanSmootherTest": {
  "lineno": 805,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.KalmanSmootherTest.build_kf": {
  "lineno": 808,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.ones",
   "numpy.zeros",
   "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.KalmanSmootherTest.testKalmanSmoother": {
  "lineno": 837,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.KalmanStepsTestDynamic": {
  "lineno": 1293,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.KalmanStepsTestDynamic.build_tensor": {
  "lineno": 1301,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.KalmanStepsTestDynamic.setUp": {
  "lineno": 1298,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.KalmanStepsTestStatic": {
  "lineno": 1281,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.KalmanStepsTestStatic.build_tensor": {
  "lineno": 1289,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.KalmanStepsTestStatic.setUp": {
  "lineno": 1286,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.MissingObservationsTests": {
  "lineno": 567,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.MissingObservationsTests.make_model": {
  "lineno": 572,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.zeros",
   "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.MissingObservationsTests.testForwardFilterWithDynamicShapeMask": {
  "lineno": 600,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.bool",
   "numpy.float32",
   "numpy.inf",
   "numpy.nan",
   "numpy.newaxis",
   "numpy.zeros",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.MissingObservationsTests.testForwardFilterWithDynamicShapeMask.collapsed_transition_noise_model": {
  "lineno": 629,
  "symbols_in_volume": [
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.MissingObservationsTests.testGradientsOfMaskedNaNsAreFinite": {
  "lineno": 694,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.MissingObservationsTests.testGradientsOfMaskedNaNsAreFinite.lp_from_scale_diag": {
  "lineno": 695,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.bool",
   "numpy.float32",
   "numpy.inf",
   "numpy.nan",
   "numpy.newaxis",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.MissingObservationsTests.testMaskWhenModelHasBatchShape": {
  "lineno": 719,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.float32",
   "numpy.inf",
   "numpy.isfinite",
   "numpy.newaxis",
   "numpy.random.randn",
   "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.MissingObservationsTests.testMaskWhenTimeSeriesHasSampleShape": {
  "lineno": 761,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.concatenate",
   "numpy.float32",
   "numpy.inf",
   "numpy.isfinite",
   "numpy.newaxis",
   "numpy.random.randn",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.SanityChecks": {
  "lineno": 188,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.SanityChecks.testTimeVaryingNoise": {
  "lineno": 303,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.SanityChecks.testTimeVaryingNoise.observation_noise": {
  "lineno": 314,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.math.log",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.SanityChecks.testTimeVaryingNoise.transition_noise": {
  "lineno": 310,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.SanityChecks.testTimeVaryingOperators": {
  "lineno": 254,
  "symbols_in_volume": [
   "numpy.sqrt",
   "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.SanityChecks.testTimeVaryingOperators.observation_matrix": {
  "lineno": 267,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.linalg.LinearOperatorFullMatrix",
   "tensorflow.compat.v2.sqrt"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.SanityChecks.testTimeVaryingOperators.transition_matrix": {
  "lineno": 263,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.linalg.LinearOperatorFullMatrix"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.SanityChecks.testVariance": {
  "lineno": 223,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.SanityChecks.testWhenNumTimestepsIsOne": {
  "lineno": 338,
  "symbols_in_volume": [
   "tensorflow.compat.v2.fill",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.square",
   "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.SanityChecks.test_deterministic_system": {
  "lineno": 191,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._AugmentSampleShapeTest": {
  "lineno": 1306,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._AugmentSampleShapeTest.testAugmentsShape": {
  "lineno": 1309,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.linear_gaussian_ssm._augment_sample_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._AugmentSampleShapeTest.testNotPrefixThrowsError": {
  "lineno": 1329,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.linear_gaussian_ssm._augment_sample_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._AugmentSampleShapeTest.testSameShape": {
  "lineno": 1318,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.linear_gaussian_ssm._augment_sample_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._AugmentSampleShapeTest.testTooManyDimsThrowsError": {
  "lineno": 1338,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.linear_gaussian_ssm._augment_sample_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._IIDNormalTest": {
  "lineno": 47,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._IIDNormalTest._build_iid_normal_model": {
  "lineno": 53,
  "symbols_in_volume": [
   "numpy.linalg.qr",
   "numpy.random.randn",
   "numpy.zeros",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._IIDNormalTest._build_placeholder": {
  "lineno": 153,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._IIDNormalTest.setUp": {
  "lineno": 50,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._IIDNormalTest.testIIDNormalLogprob": {
  "lineno": 118,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._IIDNormalTest.testIIDNormalSample": {
  "lineno": 86,
  "symbols_in_volume": [
   "numpy.mean",
   "numpy.ones",
   "numpy.sqrt",
   "numpy.var",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest": {
  "lineno": 926,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest.setUp": {
  "lineno": 929,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.float32",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest.setUp.get_observation_noise_for_timestep": {
  "lineno": 947,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest.testBackwardPassStep": {
  "lineno": 1102,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.linear_gaussian_ssm.BackwardPassState",
   "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_backward_pass_step"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest.testBackwardSmoothingStep": {
  "lineno": 1066,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.linear_gaussian_ssm.backward_smoothing_update"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest.testCovStep": {
  "lineno": 1236,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.diag",
   "numpy.dot",
   "numpy.eye",
   "numpy.float32",
   "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_cov_step"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest.testKalmanFilterStep": {
  "lineno": 954,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.float32",
   "tensorflow_probability.python.distributions.linear_gaussian_ssm.KalmanFilterState",
   "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_filter_step"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest.testKalmanTransition": {
  "lineno": 1012,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.dot",
   "numpy.eye",
   "numpy.float32",
   "numpy.newaxis",
   "tensorflow_probability.python.distributions.linear_gaussian_ssm.kalman_transition"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest.testLinearGaussianObservation": {
  "lineno": 1032,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.float32",
   "tensorflow_probability.python.distributions.linear_gaussian_ssm.linear_gaussian_update"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest.testLinearGaussianObservationScalarPath": {
  "lineno": 1150,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.float32",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL",
   "tensorflow_probability.python.distributions.linear_gaussian_ssm.linear_gaussian_update"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest.testMeanStep": {
  "lineno": 1218,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.dot",
   "numpy.float32",
   "numpy.newaxis",
   "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_mean_step"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest.testPushforwardLatentsStepIsCorrect": {
  "lineno": 1257,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.diag",
   "numpy.dot",
   "numpy.float32",
   "numpy.newaxis",
   "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_pushforward_latents_step"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ": {
  "lineno": 69,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ.__init__": {
  "lineno": 97,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ._batch_shape": {
  "lineno": 175,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ._batch_shape_tensor": {
  "lineno": 172,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ._event_shape": {
  "lineno": 181,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ._event_shape_tensor": {
  "lineno": 178,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ._log_normalization": {
  "lineno": 409,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.lgamma",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ._log_prob": {
  "lineno": 356,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ._log_unnorm_prob": {
  "lineno": 366,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.linalg.slogdet",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ._mean": {
  "lineno": 436,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.eye",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ._parameter_control_dependencies": {
  "lineno": 454,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_non_negative",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ._params_event_ndims": {
  "lineno": 153,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ._sample_n": {
  "lineno": 184,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.linalg.set_diag",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.distributions.beta.Beta",
   "tensorflow_probability.python.internal.dtype_util.is_floating",
   "tensorflow_probability.python.internal.dtype_util.name",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ._validate_correlationness": {
  "lineno": 332,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.linalg.matrix_transpose",
   "tensorflow_probability.python.internal.assert_util.assert_less_equal",
   "tensorflow_probability.python.internal.assert_util.assert_near",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ._validate_dimension": {
  "lineno": 309,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.tensorshape_util.dims",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ.concentration": {
  "lineno": 162,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ.dimension": {
  "lineno": 157,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ.input_output_cholesky": {
  "lineno": 167,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj._replicate": {
  "lineno": 61,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.tile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj._uniform_unit_norm": {
  "lineno": 49,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.norm",
   "tensorflow_probability.python.distributions.normal.Normal",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest": {
  "lineno": 75,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "absl.testing.parameterized.parameters",
   "numpy.float32",
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest._testSampleConsistentLogProbInterval": {
  "lineno": 167,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v2.exp",
   "tensorflow_probability.python.distributions.LKJ",
   "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_in_interval_by_dkwm",
   "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm",
   "tensorflow_probability.python.internal.assert_util.assert_less"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest._testSampleLogProbExact": {
  "lineno": 101,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v2.exp",
   "tensorflow_probability.python.distributions.LKJ",
   "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_equal_by_dkwm",
   "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm",
   "tensorflow_probability.python.internal.assert_util.assert_less"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest.testDimensionGuard": {
  "lineno": 318,
  "symbols_in_volume": [
   "tensorflow.compat.v2.eye",
   "tensorflow_probability.python.distributions.LKJ"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest.testMean": {
  "lineno": 336,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.LKJ",
   "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_equal_by_dkwm",
   "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm",
   "tensorflow_probability.python.internal.assert_util.assert_less"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest.testNormConst2D": {
  "lineno": 79,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow_probability.python.distributions.LKJ"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest.testNormConst3D": {
  "lineno": 86,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.pi",
   "tensorflow_probability.python.distributions.LKJ"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest.testOneDimension": {
  "lineno": 330,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.LKJ"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest.testSampleConsistentLogProb2": {
  "lineno": 148,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.sqrt",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest.testSampleConsistentLogProbInterval3": {
  "lineno": 256,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest.testSampleConsistentLogProbInterval4": {
  "lineno": 277,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest.testSampleConsistentLogProbInterval5": {
  "lineno": 297,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest.testValidateConcentration": {
  "lineno": 359,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.distributions.LKJ"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest.testValidateConcentrationAfterMutation": {
  "lineno": 367,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.python.distributions.LKJ"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest.testZeroDimension": {
  "lineno": 324,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.LKJ"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTestGraphOnly": {
  "lineno": 377,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTestGraphOnly.testDimensionGuardDynamicShape": {
  "lineno": 379,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.eye",
   "tensorflow_probability.python.distributions.LKJ"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test._det_ok_mask": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.linalg.slogdet",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic.__init__": {
  "lineno": 91,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._batch_shape": {
  "lineno": 159,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._batch_shape_tensor": {
  "lineno": 154,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.broadcast_shape",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._cdf": {
  "lineno": 197,
  "symbols_in_volume": [
   "tensorflow.compat.v2.sigmoid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._entropy": {
  "lineno": 206,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._event_shape": {
  "lineno": 165,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._event_shape_tensor": {
  "lineno": 162,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._log_cdf": {
  "lineno": 194,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._log_prob": {
  "lineno": 188,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._log_survival_function": {
  "lineno": 200,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._mean": {
  "lineno": 211,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._mode": {
  "lineno": 220,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._param_shapes": {
  "lineno": 134,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._parameter_control_dependencies": {
  "lineno": 228,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._params_event_ndims": {
  "lineno": 140,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._sample_n": {
  "lineno": 168,
  "symbols_in_volume": [
   "numpy.finfo",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._stddev": {
  "lineno": 215,
  "symbols_in_volume": [
   "numpy.pi",
   "numpy.sqrt",
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._survival_function": {
  "lineno": 203,
  "symbols_in_volume": [
   "tensorflow.compat.v2.sigmoid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._z": {
  "lineno": 223,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic.loc": {
  "lineno": 144,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic.scale": {
  "lineno": 149,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest.testAssertParamsAreFloats": {
  "lineno": 201,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest.testAssertsPositiveScale": {
  "lineno": 186,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest.testAssertsPositiveScaleAfterMutation": {
  "lineno": 193,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest.testDtype": {
  "lineno": 155,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest.testGradientThroughParams": {
  "lineno": 176,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest.testLogisticCDF": {
  "lineno": 64,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "scipy.stats.logistic.cdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest.testLogisticEntropy": {
  "lineno": 136,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "scipy.stats.logistic.entropy",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest.testLogisticLogCDF": {
  "lineno": 78,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "scipy.stats.logistic.logcdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest.testLogisticLogProb": {
  "lineno": 47,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "scipy.stats.logistic.logpdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest.testLogisticLogSurvivalFunction": {
  "lineno": 107,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "scipy.stats.logistic.logsf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest.testLogisticMean": {
  "lineno": 122,
  "symbols_in_volume": [
   "scipy.stats.logistic.mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest.testLogisticSample": {
  "lineno": 145,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest.testLogisticSurvivalFunction": {
  "lineno": 92,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "scipy.stats.logistic.sf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest.testLogisticVariance": {
  "lineno": 129,
  "symbols_in_volume": [
   "scipy.stats.logistic.var"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest.testReparameterizable": {
  "lineno": 38,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lognormal": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.lognormal.LogNormal": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.lognormal.LogNormal.__init__": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.bijectors.exp.Exp",
   "tensorflow_probability.python.distributions.normal.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lognormal.LogNormal._entropy": {
  "lineno": 97,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lognormal.LogNormal._mean": {
  "lineno": 86,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lognormal.LogNormal._mode": {
  "lineno": 94,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lognormal.LogNormal._params_event_ndims": {
  "lineno": 72,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lognormal.LogNormal._variance": {
  "lineno": 89,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.expm1"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lognormal.LogNormal.loc": {
  "lineno": 76,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lognormal.LogNormal.scale": {
  "lineno": 81,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lognormal_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.lognormal_test.LogNormalTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.lognormal_test.LogNormalTest.setUp": {
  "lineno": 35,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lognormal_test.LogNormalTest.testLogNormalCDF": {
  "lineno": 78,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.log",
   "numpy.sqrt",
   "tensorflow.compat.v2.math.erf",
   "tensorflow_probability.python.distributions.LogNormal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lognormal_test.LogNormalTest.testLogNormalPDF": {
  "lineno": 66,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.log",
   "numpy.pi",
   "numpy.sqrt",
   "tensorflow_probability.python.distributions.LogNormal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lognormal_test.LogNormalTest.testLogNormalSample": {
  "lineno": 55,
  "symbols_in_volume": [
   "numpy.mean",
   "numpy.std",
   "tensorflow_probability.python.distributions.LogNormal",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lognormal_test.LogNormalTest.testLogNormalStats": {
  "lineno": 38,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.float32",
   "numpy.log",
   "numpy.pi",
   "numpy.sqrt",
   "tensorflow_probability.python.distributions.LogNormal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture.__init__": {
  "lineno": 67,
  "symbols_in_volume": [
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.size",
   "tensorflow_probability.python.distributions.categorical.Categorical",
   "tensorflow_probability.python.distributions.distribution.Distribution",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensorshape_util.is_compatible_with",
   "tensorflow_probability.python.internal.tensorshape_util.merge_with",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture._batch_shape": {
  "lineno": 220,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture._batch_shape_tensor": {
  "lineno": 217,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture._cat_probs": {
  "lineno": 488,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log_softmax",
   "tensorflow.compat.v2.unstack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture._event_shape": {
  "lineno": 226,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture._event_shape_tensor": {
  "lineno": 223,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture._expand_to_event_rank": {
  "lineno": 229,
  "symbols_in_volume": [
   "tensorflow.compat.v2.expand_dims",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture._log_cdf": {
  "lineno": 289,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.reduce_logsumexp",
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture._log_prob": {
  "lineno": 276,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.reduce_logsumexp",
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture._mean": {
  "lineno": 244,
  "symbols_in_volume": [
   "tensorflow.compat.v2.add_n",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture._sample_n": {
  "lineno": 302,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.dynamic_partition",
   "tensorflow.compat.v2.dynamic_stitch",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.one_hot",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size",
   "tensorflow.compat.v2.stack",
   "tensorflow.compat.v2.tile",
   "tensorflow_probability.python.internal.distribution_util.pad_mixture_dimensions",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.internal.tensorshape_util.as_list",
   "tensorflow_probability.python.internal.tensorshape_util.concatenate",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
   "tensorflow_probability.python.internal.tensorshape_util.num_elements",
   "tensorflow_probability.python.internal.tensorshape_util.rank",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture._stddev": {
  "lineno": 256,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.python.internal.distribution_util.mixture_stddev"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture.cat": {
  "lineno": 205,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture.components": {
  "lineno": 209,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture.entropy_lower_bound": {
  "lineno": 439,
  "symbols_in_volume": [
   "tensorflow.compat.v2.add_n",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture.num_components": {
  "lineno": 213,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily.__getitem__": {
  "lineno": 268,
  "symbols_in_volume": [
   "collections.Sequence",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily.__init__": {
  "lineno": 102,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.distribution_util.pick_vector",
   "tensorflow_probability.python.internal.dtype_util.is_integer",
   "tensorflow_probability.python.internal.dtype_util.name",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensorshape_util.as_list",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
   "tensorflow_probability.python.internal.tensorshape_util.rank",
   "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._batch_shape": {
  "lineno": 299,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._batch_shape_tensor": {
  "lineno": 295,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._covariance": {
  "lineno": 372,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.distribution_util.pad_mixture_dimensions",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._distributional_transform": {
  "lineno": 472,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.math.cumsum",
   "tensorflow.compat.v2.math.softmax",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.distributions.independent.Independent",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.distribution_util.pad_mixture_dimensions",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._event_shape": {
  "lineno": 307,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._event_shape_tensor": {
  "lineno": 303,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._log_cdf": {
  "lineno": 347,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log_softmax",
   "tensorflow.compat.v2.reduce_logsumexp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._log_prob": {
  "lineno": 329,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.math.log_softmax",
   "tensorflow.compat.v2.reduce_logsumexp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._mean": {
  "lineno": 337,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.distribution_util.pad_mixture_dimensions"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._pad_sample_dims": {
  "lineno": 398,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._reparameterize_sample": {
  "lineno": 407,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.linalg.triangular_solve",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.stop_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._reparameterize_sample.reshaped_distributional_transform": {
  "lineno": 443,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._sample_n": {
  "lineno": 310,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.one_hot",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.distribution_util.pad_mixture_dimensions",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._variance": {
  "lineno": 354,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.math.squared_difference",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.distribution_util.pad_mixture_dimensions"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily.components_distribution": {
  "lineno": 264,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily.mixture_distribution": {
  "lineno": 260,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family._outer_squared_difference": {
  "lineno": 541,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family._prevent_2nd_derivative": {
  "lineno": 547,
  "symbols_in_volume": [
   "tensorflow.compat.v2.custom_gradient",
   "tensorflow.compat.v2.identity"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family._prevent_2nd_derivative.grad": {
  "lineno": 561,
  "symbols_in_volume": [
   "tensorflow.python.ops.array_ops.prevent_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test.MixtureSameFamilyTestDynamic32": {
  "lineno": 322,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test.MixtureSameFamilyTestStatic32": {
  "lineno": 314,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test.MixtureSameFamilyTestStatic64": {
  "lineno": 330,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest._build_mvndiag_mixture": {
  "lineno": 284,
  "symbols_in_volume": [
   "numpy.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest._build_tensor": {
  "lineno": 304,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest._shape": {
  "lineno": 278,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest._testMixtureReparameterizationGradients": {
  "lineno": 174,
  "symbols_in_volume": [
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest._testMixtureReparameterizationGradients.exact": {
  "lineno": 188,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest._testMixtureReparameterizationGradients.sample_estimate": {
  "lineno": 181,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.squared_difference",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testDeterministicSampling": {
  "lineno": 267,
  "symbols_in_volume": [
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testLogCdf": {
  "lineno": 107,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reduce_logsumexp",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testReparameterizationGradientsExponentialScalarComponents": {
  "lineno": 252,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testReparameterizationGradientsExponentialScalarComponents.mixture_func": {
  "lineno": 253,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testReparameterizationGradientsNormalMatrixComponents": {
  "lineno": 234,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testReparameterizationGradientsNormalMatrixComponents.mixture_func": {
  "lineno": 235,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testReparameterizationGradientsNormalScalarComponents": {
  "lineno": 201,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testReparameterizationGradientsNormalScalarComponents.mixture_func": {
  "lineno": 202,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testReparameterizationGradientsNormalVectorComponents": {
  "lineno": 217,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testReparameterizationGradientsNormalVectorComponents.mixture_func": {
  "lineno": 218,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testReparameterizationOfNonReparameterizedComponents": {
  "lineno": 139,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testSampleAndLogProbBatch": {
  "lineno": 49,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testSampleAndLogProbBatchMultivariateShapes": {
  "lineno": 85,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testSampleAndLogProbMultivariateShapes": {
  "lineno": 75,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testSampleAndLogProbShapesBroadcastMix": {
  "lineno": 61,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.logical_or",
   "numpy.ones_like",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testSampleAndLogProbUnivariateShapes": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testSampleConsistentLogProb": {
  "lineno": 95,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testSampleConsistentMeanCovariance": {
  "lineno": 124,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testSecondGradientIsDisabled": {
  "lineno": 148,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testVarianceConsistentCovariance": {
  "lineno": 131,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureBenchmark": {
  "lineno": 821,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.Benchmark"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureBenchmark._runSamplingBenchmark": {
  "lineno": 824,
  "symbols_in_volume": [
   "numpy.random.seed",
   "tensorflow.compat.v1.ConfigProto",
   "tensorflow.compat.v1.Session",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v1.logging.vlog",
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow.compat.v2.Graph",
   "tensorflow.compat.v2.device"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureBenchmark.benchmarkSamplingMVNDiag": {
  "lineno": 851,
  "symbols_in_volume": [
   "tensorflow.compat.v1.logging.vlog",
   "tensorflow.compat.v2.test.is_gpu_available"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureBenchmark.benchmarkSamplingMVNDiag.create_distribution": {
  "lineno": 855,
  "symbols_in_volume": [
   "numpy.random.rand",
   "numpy.random.randn",
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.Mixture",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureBenchmark.benchmarkSamplingMVNFull": {
  "lineno": 887,
  "symbols_in_volume": [
   "tensorflow.compat.v1.logging.vlog",
   "tensorflow.compat.v2.test.is_gpu_available"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureBenchmark.benchmarkSamplingMVNFull.create_distribution": {
  "lineno": 895,
  "symbols_in_volume": [
   "numpy.random.rand",
   "numpy.random.randn",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.Mixture",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureBenchmark.benchmarkSamplingMVNFull.psd": {
  "lineno": 891,
  "symbols_in_volume": [
   "numpy.dot",
   "numpy.stack",
   "numpy.transpose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureStaticSampleBenchmark": {
  "lineno": 930,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureStaticSampleTest": {
  "lineno": 817,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest": {
  "lineno": 153,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest._testSampleBatchMultivariate": {
  "lineno": 631,
  "symbols_in_volume": [
   "numpy.where",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testBrokenShapesDynamic": {
  "lineno": 209,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.errors.InvalidArgumentError",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.Mixture",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testBrokenShapesStatic": {
  "lineno": 181,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.Mixture",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testBrokenTypes": {
  "lineno": 229,
  "symbols_in_volume": [
   "numpy.float16",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.Mixture",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testCdfBatchUnivariate": {
  "lineno": 754,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "numpy.multiply",
   "numpy.ones",
   "numpy.random.randn",
   "numpy.random.uniform",
   "numpy.sum",
   "numpy.transpose",
   "scipy.stats.norm.cdf",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.Mixture",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testCdfBatchUnivariate._batch_univariate_softmax": {
  "lineno": 761,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.expand_dims",
   "numpy.sum",
   "numpy.tile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testCdfScalarUnivariate": {
  "lineno": 708,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.dot",
   "numpy.exp",
   "numpy.float32",
   "numpy.ones",
   "numpy.random.randn",
   "numpy.random.uniform",
   "scipy.stats.norm.cdf",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.Mixture",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testCdfScalarUnivariate._scalar_univariate_softmax": {
  "lineno": 717,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.max"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testEntropyLowerBoundMultivariate": {
  "lineno": 682,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.softmax"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testMeanMultivariate": {
  "lineno": 276,
  "symbols_in_volume": [
   "numpy.expand_dims",
   "tensorflow.compat.v2.math.softmax"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testMeanUnivariate": {
  "lineno": 254,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.softmax"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testProbBatchMultivariate": {
  "lineno": 486,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.randn",
   "tensorflow.compat.v2.math.softmax"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testProbBatchUnivariate": {
  "lineno": 458,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.randn",
   "tensorflow.compat.v2.math.softmax"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testProbScalarMultivariate": {
  "lineno": 429,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.random.randn",
   "tensorflow.compat.v2.math.softmax"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testProbScalarUnivariate": {
  "lineno": 403,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.random.randn",
   "tensorflow.compat.v2.math.softmax"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testSampleBatchMultivariateFullyKnownBatchShape": {
  "lineno": 672,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testSampleBatchMultivariateNotFullyKnownBatchShape": {
  "lineno": 675,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testSampleBatchUnivariate": {
  "lineno": 603,
  "symbols_in_volume": [
   "numpy.where",
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testSampleBimixGamma": {
  "lineno": 803,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.Gamma",
   "tensorflow_probability.python.distributions.Mixture"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testSampleMultipleTimes": {
  "lineno": 542,
  "symbols_in_volume": [
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.Mixture",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testSampleScalarBatchMultivariate": {
  "lineno": 577,
  "symbols_in_volume": [
   "numpy.where",
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testSampleScalarBatchUnivariate": {
  "lineno": 514,
  "symbols_in_volume": [
   "numpy.where",
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testShapes": {
  "lineno": 157,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testSpecificStddevValue": {
  "lineno": 385,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.Mixture",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testStddevShapeMultivariate": {
  "lineno": 343,
  "symbols_in_volume": [
   "numpy.expand_dims",
   "numpy.reshape",
   "numpy.stack",
   "numpy.zeros_like",
   "tensorflow.compat.v2.math.softmax"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testStddevShapeUnivariate": {
  "lineno": 303,
  "symbols_in_volume": [
   "numpy.expand_dims",
   "numpy.reshape",
   "numpy.stack",
   "numpy.zeros_like",
   "tensorflow.compat.v2.math.softmax"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test._mixture_stddev_np": {
  "lineno": 52,
  "symbols_in_volume": [
   "numpy.expand_dims",
   "numpy.matmul",
   "numpy.sqrt",
   "numpy.squeeze"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test._set_seed": {
  "lineno": 43,
  "symbols_in_volume": [
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test._swap_first_last_axes": {
  "lineno": 37,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test._test_capture_mvndiag_sample_outputs": {
  "lineno": 74,
  "symbols_in_volume": [
   "contextlib.contextmanager",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag.sample"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test._test_capture_mvndiag_sample_outputs._capturing_mvndiag_sample": {
  "lineno": 80,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test._test_capture_normal_sample_outputs": {
  "lineno": 91,
  "symbols_in_volume": [
   "contextlib.contextmanager",
   "tensorflow_probability.python.distributions.Normal.sample"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test._test_capture_normal_sample_outputs._capturing_normal_sample": {
  "lineno": 97,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.make_multivariate_mixture": {
  "lineno": 124,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.Mixture",
   "tensorflow_probability.python.internal.tensorshape_util.concatenate",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.make_multivariate_mixture.create_component": {
  "lineno": 142,
  "symbols_in_volume": [
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.make_univariate_mixture": {
  "lineno": 108,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.Mixture",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial": {
  "lineno": 53,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial.__init__": {
  "lineno": 149,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._batch_shape": {
  "lineno": 232,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._batch_shape_tensor": {
  "lineno": 227,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._covariance": {
  "lineno": 269,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.linalg.set_diag",
   "tensorflow.compat.v2.newaxis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._event_shape": {
  "lineno": 241,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._event_shape_tensor": {
  "lineno": 237,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._log_prob": {
  "lineno": 253,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log_softmax",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
   "tensorflow_probability.python.math.log_combinations"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._logits_deprecated_behavior": {
  "lineno": 302,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._logits_parameter_no_checks": {
  "lineno": 287,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._maybe_assert_valid_sample": {
  "lineno": 318,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.distribution_util.assert_nonnegative_integer_form"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._mean": {
  "lineno": 264,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.newaxis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._parameter_control_dependencies": {
  "lineno": 329,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.categorical.maybe_assert_categorical_param_correctness",
   "tensorflow_probability.python.internal.distribution_util.assert_nonnegative_integer_form",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._params_event_ndims": {
  "lineno": 204,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._probs_deprecated_behavior": {
  "lineno": 310,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._probs_parameter_no_checks": {
  "lineno": 297,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.math.softmax"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._sample_n": {
  "lineno": 245,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._variance": {
  "lineno": 277,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.newaxis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial.logits": {
  "lineno": 213,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial.logits_parameter": {
  "lineno": 282,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial.probs": {
  "lineno": 220,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial.probs_parameter": {
  "lineno": 292,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial.total_count": {
  "lineno": 208,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.draw_sample": {
  "lineno": 340,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.map_fn",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.transpose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.draw_sample._sample_one_batch_member": {
  "lineno": 388,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.one_hot",
   "tensorflow.compat.v2.random.categorical",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialFromVariableTest": {
  "lineno": 364,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialFromVariableTest.testAssertionsLogits": {
  "lineno": 392,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.util.DeferredTensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialFromVariableTest.testAssertionsProbs": {
  "lineno": 385,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialFromVariableTest.testGradientLogits": {
  "lineno": 367,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialFromVariableTest.testGradientProbs": {
  "lineno": 376,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.setUp": {
  "lineno": 35,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testComplexShapes": {
  "lineno": 46,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testCovarianceFromSampling": {
  "lineno": 234,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.sum",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testCovarianceMultidimensional": {
  "lineno": 217,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.dirichlet",
   "numpy.random.randint"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testLogits": {
  "lineno": 70,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testMultinomialCovariance": {
  "lineno": 192,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testMultinomialCovarianceBatch": {
  "lineno": 203,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testMultinomialMean": {
  "lineno": 184,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testN": {
  "lineno": 56,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testNotReparameterized": {
  "lineno": 330,
  "symbols_in_volume": [
   "tensorflow.compat.v1.control_flow_v2_enabled",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testP": {
  "lineno": 63,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testParamTensorFromLogits": {
  "lineno": 341,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.softmax"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testParamTensorFromProbs": {
  "lineno": 353,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testPmfBothZeroBatches": {
  "lineno": 119,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testPmfBothZeroBatchesNontrivialN": {
  "lineno": 127,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testPmfCountsStretchedInBroadcastWhenLowerRank": {
  "lineno": 158,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testPmfCountsStretchedInBroadcastWhenSameRank": {
  "lineno": 151,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testPmfNonIntegerCounts": {
  "lineno": 96,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testPmfPStretchedInBroadcastWhenLowerRank": {
  "lineno": 144,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testPmfPStretchedInBroadcastWhenSameRank": {
  "lineno": 137,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testPmfShapeCountsPStretchedN": {
  "lineno": 176,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.full"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testPmfShapeCountsStretchedN": {
  "lineno": 165,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testPmfUnderflow": {
  "lineno": 79,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testPmfandCountsAgree": {
  "lineno": 85,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testSampleUnbiasedNonScalarBatch": {
  "lineno": 275,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.transpose",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testSampleUnbiasedScalarBatch": {
  "lineno": 303,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testSimpleShapes": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator": {
  "lineno": 41,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator.__init__": {
  "lineno": 110,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.dtype_util.is_floating",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._batch_shape": {
  "lineno": 224,
  "symbols_in_volume": [
   "functools.reduce",
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._batch_shape_tensor": {
  "lineno": 216,
  "symbols_in_volume": [
   "functools.reduce",
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._covariance": {
  "lineno": 327,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.linalg.diag",
   "tensorflow.compat.v2.square",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
   "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._entropy": {
  "lineno": 397,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.math.digamma",
   "tensorflow.compat.v2.math.lgamma",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._entropy._lbeta": {
  "lineno": 401,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.lgamma"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._event_shape": {
  "lineno": 231,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._event_shape_tensor": {
  "lineno": 228,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._log_normalization": {
  "lineno": 255,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.lgamma",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._log_prob": {
  "lineno": 272,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._log_unnormalized_prob": {
  "lineno": 263,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.norm",
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.python.math.log1psquare"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._mean": {
  "lineno": 275,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.assert_util.assert_less",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._mode": {
  "lineno": 295,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._parameter_control_dependencies": {
  "lineno": 413,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._sample_n": {
  "lineno": 237,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.math.rsqrt",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.distributions.chi2",
   "tensorflow_probability.python.distributions.chi2.Chi2",
   "tensorflow_probability.python.distributions.chi2.sample",
   "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._sample_shape": {
  "lineno": 234,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._std_var_helper": {
  "lineno": 298,
  "symbols_in_volume": [
   "numpy.inf",
   "numpy.nan",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.assert_util.assert_less",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._stddev": {
  "lineno": 373,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.linalg.LinearOperatorLowRankUpdate",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
   "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._variance": {
  "lineno": 349,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.linalg.LinearOperatorLowRankUpdate",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.square",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
   "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator.df": {
  "lineno": 202,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator.loc": {
  "lineno": 170,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator.scale": {
  "lineno": 186,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32DynamicShape": {
  "lineno": 434,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape": {
  "lineno": 38,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.compat.v2.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase",
   "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape._input": {
  "lineno": 45,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.cast"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testAssertsPositiveDf": {
  "lineno": 396,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testAssertsPositiveDfAfterMutation": {
  "lineno": 405,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testBadScaleDType": {
  "lineno": 123,
  "symbols_in_volume": [
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.linalg.LinearOperatorIdentity"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testBroadcasting": {
  "lineno": 53,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testCovarianceAllDefined": {
  "lineno": 176,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.array",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow.compat.v2.linalg.LinearOperatorFullMatrix"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testCovarianceSomeUndefinedNaNAllowed": {
  "lineno": 196,
  "symbols_in_volume": [
   "numpy.full",
   "numpy.inf",
   "numpy.nan",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testCovarianceSomeUndefinedNaNNotAllowed": {
  "lineno": 207,
  "symbols_in_volume": [
   "tensorflow.compat.v2.errors.InvalidArgumentError",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testEntropy": {
  "lineno": 280,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testHypersphereVolume": {
  "lineno": 364,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "tensorflow.compat.v2.linalg.LinearOperatorFullMatrix"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testLogProb": {
  "lineno": 342,
  "symbols_in_volume": [
   "numpy.all",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.linalg.LinearOperatorFullMatrix",
   "tensorflow.compat.v2.linspace",
   "tensorflow.compat.v2.meshgrid",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reduce_logsumexp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testLogProbSameFor1D": {
  "lineno": 380,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow.compat.v2.linspace",
   "tensorflow.compat.v2.newaxis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testMeanAllDefined": {
  "lineno": 141,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.LinearOperatorDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testMeanSomeUndefinedNaNAllowed": {
  "lineno": 149,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testMeanSomeUndefinedNaNNotAllowed": {
  "lineno": 158,
  "symbols_in_volume": [
   "tensorflow.compat.v2.errors.InvalidArgumentError",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testMode": {
  "lineno": 168,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.LinearOperatorDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testNonPositiveDf": {
  "lineno": 113,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.LinearOperatorDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testNotPositiveDefinite": {
  "lineno": 132,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.LinearOperatorDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testSamplingConsistency": {
  "lineno": 290,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.LinearOperatorFullMatrix"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testSamplingDeterministic": {
  "lineno": 301,
  "symbols_in_volume": [
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow.compat.v2.linalg.LinearOperatorFullMatrix",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testSamplingFullyReparameterized": {
  "lineno": 318,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testSamplingSmallDfNoNaN": {
  "lineno": 330,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.isfinite",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testVariableScaleWithDeferredTensor": {
  "lineno": 415,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow_probability.util.DeferredTensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testVarianceStdAllDefined": {
  "lineno": 221,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.array",
   "numpy.sqrt",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow.compat.v2.linalg.LinearOperatorFullMatrix",
   "tensorflow.compat.v2.linalg.LinearOperatorLowRankUpdate"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testVarianceStdSomeUndefinedNaNAllowed": {
  "lineno": 250,
  "symbols_in_volume": [
   "numpy.inf",
   "numpy.nan",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testVarianceStdSomeUndefinedNaNNotAllowed": {
  "lineno": 264,
  "symbols_in_volume": [
   "tensorflow.compat.v2.errors.InvalidArgumentError",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat64StaticShape": {
  "lineno": 428,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float64"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mvn_diag": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mvn_diag.MultivariateNormalDiag": {
  "lineno": 31,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mvn_diag.MultivariateNormalDiag.__init__": {
  "lineno": 135,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.distribution_util.make_diag_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag.MultivariateNormalDiag._params_event_ndims": {
  "lineno": 213,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank.MultivariateNormalDiagPlusLowRank": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank.MultivariateNormalDiagPlusLowRank.__init__": {
  "lineno": 144,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.linalg.LinearOperatorLowRankUpdate",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.distribution_util.make_diag_scale",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank.MultivariateNormalDiagPlusLowRank.__init__._convert_to_tensor": {
  "lineno": 220,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.MultivariateNormalDiagPlusLowRankTest": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.MultivariateNormalDiagPlusLowRankTest.setUp": {
  "lineno": 37,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.MultivariateNormalDiagPlusLowRankTest.testDiagBroadcastBothBatchAndEvent": {
  "lineno": 40,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow_probability.python.distributions.MultivariateNormalDiagPlusLowRank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.MultivariateNormalDiagPlusLowRankTest.testDiagBroadcastBothBatchAndEvent2": {
  "lineno": 54,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow_probability.python.distributions.MultivariateNormalDiagPlusLowRank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.MultivariateNormalDiagPlusLowRankTest.testDiagBroadcastMultiplierAndLoc": {
  "lineno": 82,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow_probability.python.distributions.MultivariateNormalDiagPlusLowRank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.MultivariateNormalDiagPlusLowRankTest.testDiagBroadcastOnlyEvent": {
  "lineno": 68,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow_probability.python.distributions.MultivariateNormalDiagPlusLowRank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.MultivariateNormalDiagPlusLowRankTest.testImplicitLargeDiag": {
  "lineno": 363,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.diag",
   "numpy.eye",
   "numpy.matmul",
   "numpy.stack",
   "numpy.transpose",
   "tensorflow.compat.v1.logging.vlog",
   "tensorflow_probability.python.distributions.MultivariateNormalDiagPlusLowRank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.MultivariateNormalDiagPlusLowRankTest.testMean": {
  "lineno": 97,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.MultivariateNormalDiagPlusLowRank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.MultivariateNormalDiagPlusLowRankTest.testSample": {
  "lineno": 110,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.diag",
   "numpy.float32",
   "numpy.matmul",
   "numpy.sqrt",
   "tensorflow.compat.v1.logging.vlog",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.distributions.MultivariateNormalDiagPlusLowRank",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL",
   "tensorflow_probability.python.distributions.kl_divergence",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.setUp": {
  "lineno": 41,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testCovariance": {
  "lineno": 130,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.diag",
   "numpy.float32",
   "numpy.ones",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testDistWithBatchShapeOneThenTransformedThroughSoftplus": {
  "lineno": 56,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.bijectors.Softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testDynamicBatchShape": {
  "lineno": 217,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testDynamicEventShape": {
  "lineno": 230,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testEntropy": {
  "lineno": 81,
  "symbols_in_volume": [
   "numpy.diag",
   "scipy.stats.multivariate_normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testKLDivIdenticalGradientDefined": {
  "lineno": 242,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.isfinite",
   "numpy.ones_like",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testKLDivIdenticalGradientDefined.self_kl_divergence": {
  "lineno": 245,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testMean": {
  "lineno": 69,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testMeanWithBroadcastLoc": {
  "lineno": 75,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testMultivariateNormalDiagNegLogLikelihood": {
  "lineno": 184,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.tile",
   "numpy.zeros",
   "tensorflow.compat.v1.get_variable",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v1.initializers.constant",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testMultivariateNormalDiagNegLogLikelihood.neg_log_likelihood": {
  "lineno": 196,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testProbForLargeDimIsNotNan": {
  "lineno": 255,
  "symbols_in_volume": [
   "numpy.isnan",
   "numpy.tile",
   "tensorflow_probability.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testSample": {
  "lineno": 90,
  "symbols_in_volume": [
   "numpy.cov",
   "tensorflow.compat.v2.linalg.diag",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testSampleWithBroadcastScale": {
  "lineno": 108,
  "symbols_in_volume": [
   "numpy.matmul",
   "numpy.ones",
   "numpy.zeros",
   "tensorflow.compat.v2.linalg.diag",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testScalarParams": {
  "lineno": 44,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testSingularScaleRaises": {
  "lineno": 101,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testStddev": {
  "lineno": 169,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.ones",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testVariableLocation": {
  "lineno": 266,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.ones"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testVariableScaleDiag": {
  "lineno": 276,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.ones"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testVariableScaleDiagAssertions": {
  "lineno": 298,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.ones"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testVariableScaleIdentityMultiplier": {
  "lineno": 286,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testVariableScaleIdentityMultiplierAssertions": {
  "lineno": 312,
  "symbols_in_volume": [
   "numpy.eye",
   "numpy.float32",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testVariance": {
  "lineno": 154,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.ones",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testVectorParams": {
  "lineno": 50,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance.MultivariateNormalFullCovariance": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.mvn_tril.MultivariateNormalTriL"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance.MultivariateNormalFullCovariance.__init__": {
  "lineno": 114,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.linalg.matrix_transpose",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.assert_util.assert_near",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance.MultivariateNormalFullCovariance._params_event_ndims": {
  "lineno": 191,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test": {
  "lineno": null,
  "symbols_in_volume": [
   "numpy.random.RandomState",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.MultivariateNormalFullCovarianceTest": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.MultivariateNormalFullCovarianceTest._random_mu_and_sigma": {
  "lineno": 116,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.matmul",
   "numpy.transpose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.MultivariateNormalFullCovarianceTest._random_pd_matrix": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.band_part",
   "tensorflow.compat.v2.math.softplus",
   "tensorflow.compat.v2.matmul",
   "tensorflow_probability.python.distributions.matrix_diag_transform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.MultivariateNormalFullCovarianceTest.testDoesNotRaiseIfInitializedWithSymmetricMatrix": {
  "lineno": 57,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.MultivariateNormalFullCovariance"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.MultivariateNormalFullCovarianceTest.testKLBatch": {
  "lineno": 129,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.MultivariateNormalFullCovariance",
   "tensorflow_probability.python.distributions.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.MultivariateNormalFullCovarianceTest.testKLBatchBroadcast": {
  "lineno": 150,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.MultivariateNormalFullCovariance",
   "tensorflow_probability.python.distributions.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.MultivariateNormalFullCovarianceTest.testLogPDFScalarBatch": {
  "lineno": 64,
  "symbols_in_volume": [
   "scipy.stats.multivariate_normal",
   "tensorflow_probability.python.distributions.MultivariateNormalFullCovariance"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.MultivariateNormalFullCovarianceTest.testLogPDFScalarBatchCovarianceNotProvided": {
  "lineno": 82,
  "symbols_in_volume": [
   "numpy.eye",
   "scipy.stats.multivariate_normal",
   "tensorflow_probability.python.distributions.MultivariateNormalFullCovariance"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.MultivariateNormalFullCovarianceTest.testNamePropertyIsSetByInitArg": {
  "lineno": 51,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.MultivariateNormalFullCovariance"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.MultivariateNormalFullCovarianceTest.testRaisesIfInitializedWithNonSymmetricMatrix": {
  "lineno": 44,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.MultivariateNormalFullCovariance"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.MultivariateNormalFullCovarianceTest.testShapes": {
  "lineno": 101,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.MultivariateNormalFullCovariance",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test._compute_non_batch_kl": {
  "lineno": 173,
  "symbols_in_volume": [
   "numpy.linalg.det",
   "numpy.linalg.inv",
   "numpy.log",
   "numpy.trace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator": {
  "lineno": 55,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator.__init__": {
  "lineno": 136,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator",
   "tensorflow_probability.python.distributions.normal.Normal",
   "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.dtype_util.is_floating",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator._covariance": {
  "lineno": 237,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.diag",
   "tensorflow.compat.v2.square",
   "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator._log_prob": {
  "lineno": 210,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator._mean": {
  "lineno": 218,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.tensorshape_util.concatenate",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator._mode": {
  "lineno": 265,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator._parameter_control_dependencies": {
  "lineno": 268,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator._prob": {
  "lineno": 214,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator._stddev": {
  "lineno": 253,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.linalg.LinearOperatorLowRankUpdate",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator._variance": {
  "lineno": 243,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.LinearOperatorLowRankUpdate",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.square",
   "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator.loc": {
  "lineno": 200,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator.scale": {
  "lineno": 205,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator._kl_brute_force": {
  "lineno": 273,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator._kl_brute_force.is_diagonal": {
  "lineno": 314,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow.compat.v2.linalg.LinearOperatorIdentity",
   "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator._kl_brute_force.squared_frobenius_norm": {
  "lineno": 303,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.square"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.MultivariateNormalLinearOperatorTest": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.MultivariateNormalLinearOperatorTest._compute_non_batch_kl": {
  "lineno": 191,
  "symbols_in_volume": [
   "numpy.dot",
   "numpy.linalg.det",
   "numpy.linalg.inv",
   "numpy.log",
   "numpy.trace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.MultivariateNormalLinearOperatorTest._random_loc_and_scale": {
  "lineno": 45,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.MultivariateNormalLinearOperatorTest._random_tril_matrix": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.band_part",
   "tensorflow.compat.v2.math.softplus",
   "tensorflow_probability.python.distributions.matrix_diag_transform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.MultivariateNormalLinearOperatorTest.setUp": {
  "lineno": 36,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.MultivariateNormalLinearOperatorTest.testKLBatch": {
  "lineno": 140,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.MultivariateNormalLinearOperator",
   "tensorflow_probability.python.distributions.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.MultivariateNormalLinearOperatorTest.testKLBatchBroadcast": {
  "lineno": 165,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.MultivariateNormalLinearOperator",
   "tensorflow_probability.python.distributions.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.MultivariateNormalLinearOperatorTest.testLogPDFScalarBatch": {
  "lineno": 61,
  "symbols_in_volume": [
   "scipy.stats.multivariate_normal",
   "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
   "tensorflow.compat.v2.matmul",
   "tensorflow_probability.python.distributions.MultivariateNormalLinearOperator"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.MultivariateNormalLinearOperatorTest.testMeanAndCovariance": {
  "lineno": 102,
  "symbols_in_volume": [
   "numpy.matmul",
   "numpy.transpose",
   "tensorflow_probability.python.distributions.MultivariateNormalLinearOperator"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.MultivariateNormalLinearOperatorTest.testNamePropertyIsSetByInitArg": {
  "lineno": 55,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.LinearOperatorIdentity",
   "tensorflow_probability.python.distributions.MultivariateNormalLinearOperator"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.MultivariateNormalLinearOperatorTest.testRaisesIfScaleNotProvided": {
  "lineno": 82,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.MultivariateNormalLinearOperator"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.MultivariateNormalLinearOperatorTest.testShapes": {
  "lineno": 87,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
   "tensorflow_probability.python.distributions.MultivariateNormalLinearOperator",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.MultivariateNormalLinearOperatorTest.testVariableLocation": {
  "lineno": 114,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.eye",
   "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
   "tensorflow_probability.python.distributions.MultivariateNormalLinearOperator"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.MultivariateNormalLinearOperatorTest.testVariableScaleAssertions": {
  "lineno": 124,
  "symbols_in_volume": [
   "numpy.eye",
   "numpy.float32",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
   "tensorflow_probability.python.distributions.MultivariateNormalLinearOperator"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mvn_tril.MultivariateNormalTriL": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mvn_tril.MultivariateNormalTriL.__init__": {
  "lineno": 138,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.linalg.LinearOperatorIdentity",
   "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.distribution_util.dimension_size",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril.MultivariateNormalTriL._params_event_ndims": {
  "lineno": 215,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLSlicingTest": {
  "lineno": 429,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLSlicingTest._random_chol": {
  "lineno": 437,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.band_part",
   "tensorflow.compat.v2.math.softplus",
   "tensorflow.compat.v2.matmul",
   "tensorflow_probability.python.distributions.matrix_diag_transform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLSlicingTest.setUp": {
  "lineno": 433,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLSlicingTest.testDocstrSliceExample": {
  "lineno": 538,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.random.normal",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLSlicingTest.testSlice": {
  "lineno": 444,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.zeros",
   "tensorflow.compat.v2.newaxis",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLSlicingTest.testSliceSequencePreservesOrigVarGradLinkage": {
  "lineno": 518,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLSlicingTest.testSliceWithUnslicedMu": {
  "lineno": 490,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.zeros",
   "tensorflow.compat.v2.newaxis",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLSlicingTest.testSteppedSliceOnBroadcastDim": {
  "lineno": 474,
  "symbols_in_volume": [
   "numpy.zeros",
   "tensorflow.compat.v2.newaxis",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLSlicingTest.testVariableLocation": {
  "lineno": 550,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.eye",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLSlicingTest.testVariableScale": {
  "lineno": 559,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLSlicingTest.testVariableScaleAssertions": {
  "lineno": 568,
  "symbols_in_volume": [
   "numpy.eye",
   "numpy.float32",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest": {
  "lineno": 36,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest._random_chol": {
  "lineno": 43,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.band_part",
   "tensorflow.compat.v2.math.softplus",
   "tensorflow.compat.v2.matmul",
   "tensorflow_probability.python.distributions.matrix_diag_transform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest._random_mu_and_sigma": {
  "lineno": 219,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.matmul",
   "numpy.transpose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.setUp": {
  "lineno": 39,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testEntropy": {
  "lineno": 111,
  "symbols_in_volume": [
   "scipy.stats.multivariate_normal",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testEntropyMultidimensional": {
  "lineno": 123,
  "symbols_in_volume": [
   "scipy.stats.multivariate_normal",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testKLBatch": {
  "lineno": 249,
  "symbols_in_volume": [
   "numpy.linalg.cholesky",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL",
   "tensorflow_probability.python.distributions.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testKLBatchBroadcast": {
  "lineno": 270,
  "symbols_in_volume": [
   "numpy.linalg.cholesky",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL",
   "tensorflow_probability.python.distributions.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testKLNonBatch": {
  "lineno": 232,
  "symbols_in_volume": [
   "numpy.linalg.cholesky",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL",
   "tensorflow_probability.python.distributions.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testKLTwoIdenticalDistributionsIsZero": {
  "lineno": 292,
  "symbols_in_volume": [
   "numpy.linalg.cholesky",
   "numpy.zeros",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL",
   "tensorflow_probability.python.distributions.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testLogPDFScalarBatch": {
  "lineno": 50,
  "symbols_in_volume": [
   "scipy.stats.multivariate_normal",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testLogPDFXIsHigherRank": {
  "lineno": 69,
  "symbols_in_volume": [
   "scipy.stats.multivariate_normal",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testLogPDFXLowerDimension": {
  "lineno": 89,
  "symbols_in_volume": [
   "scipy.stats.multivariate_normal",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testSample": {
  "lineno": 137,
  "symbols_in_volume": [
   "numpy.cov",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testSampleLarge": {
  "lineno": 306,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.diag",
   "numpy.float32",
   "numpy.matmul",
   "numpy.sqrt",
   "tensorflow.compat.v1.logging.vlog",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL",
   "tensorflow_probability.python.distributions.kl_divergence",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testSampleMultiDimensional": {
  "lineno": 184,
  "symbols_in_volume": [
   "numpy.cov",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testSampleWithSampleShape": {
  "lineno": 159,
  "symbols_in_volume": [
   "scipy.stats.multivariate_normal",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testShapes": {
  "lineno": 203,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.MultivariateNormalTriL",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testSingularScaleRaises": {
  "lineno": 152,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test._MakeSlicer": {
  "lineno": 421,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test._MakeSlicer.__getitem__": {
  "lineno": 423,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test._compute_non_batch_kl": {
  "lineno": 406,
  "symbols_in_volume": [
   "numpy.linalg.det",
   "numpy.linalg.inv",
   "numpy.log",
   "numpy.trace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial.__init__": {
  "lineno": 56,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._batch_shape": {
  "lineno": 146,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._batch_shape_tensor": {
  "lineno": 139,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.broadcast_shape",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._cdf": {
  "lineno": 171,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.betainc",
   "tensorflow.compat.v2.sigmoid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._event_shape": {
  "lineno": 153,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._event_shape_tensor": {
  "lineno": 150,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._log_prob": {
  "lineno": 182,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.lgamma",
   "tensorflow.compat.v2.math.log_sigmoid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._logits_deprecated_behavior": {
  "lineno": 230,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._logits_parameter_no_checks": {
  "lineno": 207,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._maybe_assert_valid_sample": {
  "lineno": 251,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.embed_check_nonnegative_integer_form"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._mean": {
  "lineno": 193,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._mode": {
  "lineno": 197,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.floor",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._parameter_control_dependencies": {
  "lineno": 246,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._params_event_ndims": {
  "lineno": 116,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._probs_deprecated_behavior": {
  "lineno": 238,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._probs_parameter_no_checks": {
  "lineno": 219,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.math.sigmoid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._sample_n": {
  "lineno": 156,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.random.gamma",
   "tensorflow.compat.v2.random.poisson",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._variance": {
  "lineno": 203,
  "symbols_in_volume": [
   "tensorflow.compat.v2.sigmoid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial.logits": {
  "lineno": 125,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial.logits_parameter": {
  "lineno": 214,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial.probs": {
  "lineno": 132,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial.probs_parameter": {
  "lineno": 225,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial.total_count": {
  "lineno": 120,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.maybe_assert_negative_binomial_param_correctness": {
  "lineno": 258,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.internal.assert_util.assert_less_equal",
   "tensorflow_probability.python.internal.assert_util.assert_non_negative",
   "tensorflow_probability.python.internal.distribution_util.assert_integer_form",
   "tensorflow_probability.python.internal.dtype_util.is_floating",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialFromVariableTest": {
  "lineno": 258,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialFromVariableTest.testAssertionProbsGreaterThanOne": {
  "lineno": 281,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.distributions.NegativeBinomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialFromVariableTest.testAssertionProbsLessThanZero": {
  "lineno": 274,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.distributions.NegativeBinomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialFromVariableTest.testAssertionsProbsMutation": {
  "lineno": 261,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.python.distributions.NegativeBinomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialFromVariableTest.testAssertionsTotalCount": {
  "lineno": 303,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.distributions.NegativeBinomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialFromVariableTest.testAssertionsTotalCountMutation": {
  "lineno": 288,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.python.distributions.NegativeBinomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testInvalidNegativeCount": {
  "lineno": 76,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.NegativeBinomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testInvalidP": {
  "lineno": 65,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.NegativeBinomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testLogProbOverflow": {
  "lineno": 217,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.float32",
   "numpy.isfinite",
   "numpy.ones_like",
   "tensorflow_probability.python.distributions.NegativeBinomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testLogProbUnderflow": {
  "lineno": 226,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.float32",
   "numpy.isfinite",
   "numpy.ones_like",
   "tensorflow_probability.python.distributions.NegativeBinomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testLogits": {
  "lineno": 58,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.NegativeBinomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testNegativeBinomialLogCdf": {
  "lineno": 84,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "scipy.stats.nbinom.logcdf",
   "tensorflow_probability.python.distributions.NegativeBinomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testNegativeBinomialLogCdfValidateArgs": {
  "lineno": 100,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.NegativeBinomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testNegativeBinomialLogPmf": {
  "lineno": 109,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "scipy.stats.nbinom.logpmf",
   "tensorflow_probability.python.distributions.NegativeBinomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testNegativeBinomialLogPmfMultidimensional": {
  "lineno": 146,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "scipy.stats.nbinom.logpmf",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.NegativeBinomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testNegativeBinomialLogPmfValidateArgs": {
  "lineno": 125,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.distributions.NegativeBinomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testNegativeBinomialMean": {
  "lineno": 164,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "scipy.stats.nbinom.mean",
   "tensorflow_probability.python.distributions.NegativeBinomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testNegativeBinomialSample": {
  "lineno": 188,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.ones",
   "scipy.stats.nbinom.mean",
   "scipy.stats.nbinom.var",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.reduce_min",
   "tensorflow_probability.python.distributions.NegativeBinomial",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testNegativeBinomialShape": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.distributions.NegativeBinomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testNegativeBinomialShapeBroadcast": {
  "lineno": 48,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.distributions.NegativeBinomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testNegativeBinomialStddev": {
  "lineno": 180,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "scipy.stats.nbinom.std",
   "tensorflow_probability.python.distributions.NegativeBinomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testNegativeBinomialVariance": {
  "lineno": 172,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "scipy.stats.nbinom.var",
   "tensorflow_probability.python.distributions.NegativeBinomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testParamTensorFromLogits": {
  "lineno": 235,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow_probability.python.distributions.NegativeBinomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testParamTensorFromProbs": {
  "lineno": 246,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow_probability.python.distributions.NegativeBinomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.normal.Normal": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.normal.Normal.__init__": {
  "lineno": 104,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._batch_shape": {
  "lineno": 172,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._batch_shape_tensor": {
  "lineno": 167,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._cdf": {
  "lineno": 200,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.special_math.ndtr"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._entropy": {
  "lineno": 209,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._event_shape": {
  "lineno": 178,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._event_shape_tensor": {
  "lineno": 175,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._log_cdf": {
  "lineno": 197,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.special_math.log_ndtr"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._log_prob": {
  "lineno": 190,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.squared_difference"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._log_survival_function": {
  "lineno": 203,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.special_math.log_ndtr"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._mean": {
  "lineno": 214,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._param_shapes": {
  "lineno": 147,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._parameter_control_dependencies": {
  "lineno": 230,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._params_event_ndims": {
  "lineno": 153,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._quantile": {
  "lineno": 217,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.special_math.ndtri"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._sample_n": {
  "lineno": 181,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.random.normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._stddev": {
  "lineno": 220,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._survival_function": {
  "lineno": 206,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.special_math.ndtr"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._z": {
  "lineno": 225,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal.loc": {
  "lineno": 157,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal.scale": {
  "lineno": 162,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal._kl_normal_normal": {
  "lineno": 255,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.expm1",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.squared_difference",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors.normal_conjugates_known_scale_posterior": {
  "lineno": 25,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.square",
   "tensorflow_probability.python.distributions.normal.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors.normal_conjugates_known_scale_predictive": {
  "lineno": 84,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.square",
   "tensorflow_probability.python.distributions.normal.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test.NormalTest": {
  "lineno": 31,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test.NormalTest.testNormalConjugateKnownSigmaNDPosteriorND": {
  "lineno": 70,
  "symbols_in_volume": [
   "math.sqrt",
   "tensorflow.compat.v1.Session",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.transpose",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.normal_conjugates_known_scale_posterior"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test.NormalTest.testNormalConjugateKnownSigmaPosterior": {
  "lineno": 34,
  "symbols_in_volume": [
   "math.sqrt",
   "tensorflow.compat.v1.Session",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.size",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.normal_conjugates_known_scale_posterior"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test.NormalTest.testNormalConjugateKnownSigmaPosteriorND": {
  "lineno": 51,
  "symbols_in_volume": [
   "math.sqrt",
   "tensorflow.compat.v1.Session",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.size",
   "tensorflow.compat.v2.transpose",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.normal_conjugates_known_scale_posterior"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test.NormalTest.testNormalConjugateKnownSigmaPredictive": {
  "lineno": 94,
  "symbols_in_volume": [
   "math.sqrt",
   "tensorflow.compat.v1.Session",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.size",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.normal_conjugates_known_scale_predictive"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalEagerGCTest": {
  "lineno": 497,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalEagerGCTest.testNormalMeanAndMode": {
  "lineno": 499,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_in_graph_and_eager_modes",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest._baseQuantileFiniteGradientAtDifficultPoints": {
  "lineno": 305,
  "symbols_in_volume": [
   "numpy.exp",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest._testParamShapes": {
  "lineno": 44,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.Normal.param_shapes"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest._testParamStaticShapes": {
  "lineno": 54,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Normal.param_static_shapes"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.setUp": {
  "lineno": 40,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testFiniteGradientAtDifficultPoints": {
  "lineno": 199,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.float64",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testFiniteGradientAtDifficultPoints.make_fn": {
  "lineno": 200,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testIncompatibleArgShapesEager": {
  "lineno": 488,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testIncompatibleArgShapesGraph": {
  "lineno": 481,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.errors.OpError",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNegativeSigmaFails": {
  "lineno": 419,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalCDF": {
  "lineno": 142,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.linspace",
   "scipy.stats.norm",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalEntropy": {
  "lineno": 251,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.log",
   "numpy.pi",
   "numpy.testing.assert_allclose",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalEntropyWithScalarInputs": {
  "lineno": 233,
  "symbols_in_volume": [
   "scipy.stats.norm",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalFullyReparameterized": {
  "lineno": 375,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalLogCDF": {
  "lineno": 179,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.linspace",
   "scipy.stats.norm",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalLogPDF": {
  "lineno": 78,
  "symbols_in_volume": [
   "math.sqrt",
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "scipy.stats.norm",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalLogPDFMultidimensional": {
  "lineno": 108,
  "symbols_in_volume": [
   "math.sqrt",
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "scipy.stats.norm",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalLogSurvivalFunction": {
  "lineno": 213,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.linspace",
   "scipy.stats.norm",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalMeanAndMode": {
  "lineno": 269,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalNormalKL": {
  "lineno": 447,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.log",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.kl_divergence",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalQuantile": {
  "lineno": 282,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.float64",
   "numpy.hstack",
   "numpy.linspace",
   "scipy.stats.norm",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalSample": {
  "lineno": 343,
  "symbols_in_volume": [
   "math.sqrt",
   "numpy.sqrt",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalSampleMultiDimensional": {
  "lineno": 385,
  "symbols_in_volume": [
   "math.sqrt",
   "numpy.sqrt",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalShape": {
  "lineno": 424,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalShapeWithPlaceholders": {
  "lineno": 434,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalStandardDeviation": {
  "lineno": 333,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalSurvivalFunction": {
  "lineno": 160,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.linspace",
   "scipy.stats.norm",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalVariance": {
  "lineno": 323,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testParamShapes": {
  "lineno": 67,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testParamStaticShapes": {
  "lineno": 72,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testQuantileFiniteGradientAtDifficultPointsFloat32": {
  "lineno": 317,
  "symbols_in_volume": [
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testQuantileFiniteGradientAtDifficultPointsFloat64": {
  "lineno": 320,
  "symbols_in_volume": [
   "numpy.float64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testSampleLikeArgsGetDistDType": {
  "lineno": 60,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testVariableScale": {
  "lineno": 471,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical.__init__": {
  "lineno": 87,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._batch_shape": {
  "lineno": 175,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._batch_shape_tensor": {
  "lineno": 171,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._covariance": {
  "lineno": 267,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.set_diag",
   "tensorflow.compat.v2.matmul"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._entropy": {
  "lineno": 231,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.exp",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.multiply_no_nan",
   "tensorflow.compat.v2.reduce_logsumexp",
   "tensorflow.compat.v2.reduce_max",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._event_shape": {
  "lineno": 186,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._event_shape_tensor": {
  "lineno": 179,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._event_size": {
  "lineno": 148,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._log_prob": {
  "lineno": 204,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.nn.softmax_cross_entropy_with_logits",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.stop_gradient",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._logits_deprecated_behavior": {
  "lineno": 307,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._logits_parameter_no_checks": {
  "lineno": 282,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._maybe_assert_valid_sample": {
  "lineno": 297,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.assert_util.assert_less_equal",
   "tensorflow_probability.python.internal.assert_util.assert_near",
   "tensorflow_probability.python.internal.assert_util.assert_non_negative",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._mean": {
  "lineno": 257,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._mode": {
  "lineno": 260,
  "symbols_in_volume": [
   "tensorflow.compat.v2.argmax",
   "tensorflow.compat.v2.one_hot",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._parameter_control_dependencies": {
  "lineno": 323,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.int32.max",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.assert_util.assert_greater_equal",
   "tensorflow_probability.python.internal.assert_util.assert_less_equal",
   "tensorflow_probability.python.internal.assert_util.assert_near",
   "tensorflow_probability.python.internal.assert_util.assert_non_negative",
   "tensorflow_probability.python.internal.assert_util.assert_rank_at_least",
   "tensorflow_probability.python.internal.dtype_util.is_floating",
   "tensorflow_probability.python.internal.tensor_util.is_ref",
   "tensorflow_probability.python.internal.tensorshape_util.dims"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._params_event_ndims": {
  "lineno": 134,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._probs_deprecated_behavior": {
  "lineno": 315,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._probs_parameter_no_checks": {
  "lineno": 292,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.math.softmax"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._sample_n": {
  "lineno": 190,
  "symbols_in_volume": [
   "tensorflow.compat.v2.one_hot",
   "tensorflow.compat.v2.random.categorical",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.transpose",
   "tensorflow_probability.python.internal.prefer_static.concat",
   "tensorflow_probability.python.internal.prefer_static.shape",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._variance": {
  "lineno": 272,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical.event_size": {
  "lineno": 138,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical.logits": {
  "lineno": 157,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical.logits_parameter": {
  "lineno": 277,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical.probs": {
  "lineno": 164,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical.probs_parameter": {
  "lineno": 287,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical._kl_categorical_categorical": {
  "lineno": 385,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log_softmax",
   "tensorflow.compat.v2.math.softmax",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalFromVariableTest": {
  "lineno": 297,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalFromVariableTest.testAssertionsLogits": {
  "lineno": 333,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.util.DeferredTensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalFromVariableTest.testAssertionsProbs": {
  "lineno": 318,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalFromVariableTest.testAssertionsProbsAfterMutation": {
  "lineno": 325,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalFromVariableTest.testGradientLogits": {
  "lineno": 300,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalFromVariableTest.testGradientProbs": {
  "lineno": 309,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest": {
  "lineno": 42,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.assertRaises": {
  "lineno": 49,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.setUp": {
  "lineno": 45,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testCategoricalCategoricalKL": {
  "lineno": 191,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.sum",
   "numpy.zeros_like",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testCategoricalCategoricalKL.np_softmax": {
  "lineno": 192,
  "symbols_in_volume": [
   "numpy.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testDtype": {
  "lineno": 90,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int64",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.int64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testEntropyNoBatch": {
  "lineno": 129,
  "symbols_in_volume": [
   "numpy.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testEntropyWithBatch": {
  "lineno": 136,
  "symbols_in_volume": [
   "numpy.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testEventSizeOfOne": {
  "lineno": 155,
  "symbols_in_volume": [
   "numpy.int32",
   "numpy.ones",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.ones"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testLogits": {
  "lineno": 60,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testP": {
  "lineno": 54,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testParamTensorFromLogits": {
  "lineno": 274,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.softmax"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testParamTensorFromProbs": {
  "lineno": 286,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testPmf": {
  "lineno": 145,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.exp",
   "numpy.sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testSample": {
  "lineno": 169,
  "symbols_in_volume": [
   "numpy.any",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.math.log",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testSampleUnbiasedNonScalarBatch": {
  "lineno": 222,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.transpose",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testSampleUnbiasedScalarBatch": {
  "lineno": 248,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testSampleWithSampleShape": {
  "lineno": 180,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testShapes": {
  "lineno": 69,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.internal.tensorshape_util.as_list",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testUnknownAndInvalidShape": {
  "lineno": 116,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testUnknownShape": {
  "lineno": 107,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.make_onehot_categorical": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.random.uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto.__init__": {
  "lineno": 57,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._batch_shape": {
  "lineno": 118,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._batch_shape_tensor": {
  "lineno": 112,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._cdf": {
  "lineno": 171,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.expm1",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._event_shape": {
  "lineno": 121,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._extend_support": {
  "lineno": 209,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._log_cdf": {
  "lineno": 164,
  "symbols_in_volume": [
   "numpy.inf",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._log_prob": {
  "lineno": 135,
  "symbols_in_volume": [
   "numpy.inf",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.internal.assert_util.assert_greater_equal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._log_prob.log_prob_on_support": {
  "lineno": 143,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._log_survival_function": {
  "lineno": 178,
  "symbols_in_volume": [
   "numpy.inf",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._mean": {
  "lineno": 185,
  "symbols_in_volume": [
   "numpy.inf",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._mode": {
  "lineno": 205,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._parameter_control_dependencies": {
  "lineno": 241,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._params_event_ndims": {
  "lineno": 98,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._prob": {
  "lineno": 151,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.internal.assert_util.assert_greater_equal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._prob.prob_on_support": {
  "lineno": 159,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._sample_n": {
  "lineno": 124,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.random.uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._variance": {
  "lineno": 194,
  "symbols_in_volume": [
   "numpy.inf",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto.concentration": {
  "lineno": 107,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto.scale": {
  "lineno": 102,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto._kl_pareto_pareto": {
  "lineno": 256,
  "symbols_in_volume": [
   "numpy.inf",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest._scipy_pareto": {
  "lineno": 36,
  "symbols_in_volume": [
   "scipy.stats.pareto"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testConcentrationVariable": {
  "lineno": 347,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testInvalidConcentration": {
  "lineno": 68,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testInvalidScale": {
  "lineno": 60,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoCDFGradientZeroOutsideSupport": {
  "lineno": 189,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoLogCdf": {
  "lineno": 139,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoLogCdfMultidimensional": {
  "lineno": 159,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoLogPdf": {
  "lineno": 76,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoLogPdfMultidimensional": {
  "lineno": 117,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoLogPdfValidateArgs": {
  "lineno": 96,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoMean": {
  "lineno": 197,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoMeanInf": {
  "lineno": 206,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.isinf"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoMode": {
  "lineno": 241,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoPDFGradientZeroOutsideSupport": {
  "lineno": 181,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoParetoKLFinite": {
  "lineno": 311,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.log",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoParetoKLInfinite": {
  "lineno": 339,
  "symbols_in_volume": [
   "numpy.inf"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoSampleMean": {
  "lineno": 248,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoSampleMultidimensionalMean": {
  "lineno": 279,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.array",
   "numpy.float32",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoSampleMultidimensionalVariance": {
  "lineno": 294,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.array",
   "numpy.float32",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoSampleVariance": {
  "lineno": 263,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoShape": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoShapeBroadcast": {
  "lineno": 50,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoStd": {
  "lineno": 232,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoVariance": {
  "lineno": 215,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoVarianceInf": {
  "lineno": 224,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.isinf"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testScaleVariable": {
  "lineno": 357,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson.__init__": {
  "lineno": 54,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.dtype_util.is_floating",
   "tensorflow_probability.python.internal.dtype_util.name",
   "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._batch_shape": {
  "lineno": 141,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._batch_shape_tensor": {
  "lineno": 137,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._cdf": {
  "lineno": 166,
  "symbols_in_volume": [
   "tensorflow.compat.v2.floor",
   "tensorflow.compat.v2.math.igammac",
   "tensorflow.compat.v2.maximum",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._event_shape": {
  "lineno": 148,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._event_shape_tensor": {
  "lineno": 145,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._log_cdf": {
  "lineno": 163,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._log_normalization": {
  "lineno": 175,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._log_prob": {
  "lineno": 151,
  "symbols_in_volume": [
   "numpy.inf",
   "tensorflow.compat.v2.math.is_inf",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._log_rate_deprecated_behavior": {
  "lineno": 230,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._log_rate_parameter_no_checks": {
  "lineno": 217,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._log_unnormalized_prob": {
  "lineno": 178,
  "symbols_in_volume": [
   "numpy.inf",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.floor",
   "tensorflow.compat.v2.math.lgamma",
   "tensorflow.compat.v2.maximum",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._mean": {
  "lineno": 186,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._mode": {
  "lineno": 192,
  "symbols_in_volume": [
   "tensorflow.compat.v2.floor",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._parameter_control_dependencies": {
  "lineno": 238,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._params_event_ndims": {
  "lineno": 114,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._rate_deprecated_behavior": {
  "lineno": 222,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._rate_parameter_no_checks": {
  "lineno": 207,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.identity"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._sample_n": {
  "lineno": 198,
  "symbols_in_volume": [
   "tensorflow.compat.v2.random.poisson"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._variance": {
  "lineno": 189,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson.interpolate_nondiscrete": {
  "lineno": 132,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson.log_rate": {
  "lineno": 125,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson.log_rate_parameter": {
  "lineno": 212,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson.rate": {
  "lineno": 118,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson.rate_parameter": {
  "lineno": 202,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound": {
  "lineno": 158,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound.__init__": {
  "lineno": 221,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound._batch_shape": {
  "lineno": 349,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound._batch_shape_tensor": {
  "lineno": 341,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound._event_shape": {
  "lineno": 355,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound._log_prob": {
  "lineno": 402,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reduce_logsumexp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound._log_variance": {
  "lineno": 423,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reduce_logsumexp",
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound._mean": {
  "lineno": 408,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.reduce_logsumexp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound._sample_n": {
  "lineno": 358,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.random.poisson",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.reshape",
   "tensorflow_probability.python.internal.distribution_util.pick_vector",
   "tensorflow_probability.python.internal.tensorshape_util.num_elements",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound._stddev": {
  "lineno": 420,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound._variance": {
  "lineno": 417,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound.distribution": {
  "lineno": 316,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound.loc": {
  "lineno": 327,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound.mixture_distribution": {
  "lineno": 305,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound.poisson_and_mixture_distributions": {
  "lineno": 281,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log",
   "tensorflow_probability.python.distributions.categorical.Categorical",
   "tensorflow_probability.python.distributions.poisson.Poisson",
   "tensorflow_probability.python.internal.dtype_util.base_equal",
   "tensorflow_probability.python.internal.dtype_util.name"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound.quadrature_size": {
  "lineno": 337,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound.scale": {
  "lineno": 332,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.concat_vectors": {
  "lineno": 454,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.get_static_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.quadrature_scheme_lognormal_gauss_hermite": {
  "lineno": 48,
  "symbols_in_volume": [
   "numpy.linalg.norm",
   "numpy.polynomial.hermite.hermgauss",
   "numpy.sqrt",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.quadrature_scheme_lognormal_quantiles": {
  "lineno": 91,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.fill",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.bijectors.exp.Exp",
   "tensorflow_probability.python.distributions.normal.Normal",
   "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution",
   "tensorflow_probability.python.internal.tensorshape_util.concatenate",
   "tensorflow_probability.python.internal.tensorshape_util.rank",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.quadrature_scheme_lognormal_quantiles._compute_quantiles": {
  "lineno": 125,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.linspace",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.transpose",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test.PoissonLogNormalQuadratureCompoundDynamicShapeTest": {
  "lineno": 135,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test.PoissonLogNormalQuadratureCompoundDynamicShapeTest.static_shape": {
  "lineno": 139,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test.PoissonLogNormalQuadratureCompoundStaticShapeTest": {
  "lineno": 126,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test.PoissonLogNormalQuadratureCompoundStaticShapeTest.static_shape": {
  "lineno": 130,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test._PoissonLogNormalQuadratureCompoundTest": {
  "lineno": 30,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_util.DiscreteScalarDistributionTestHelpers"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test._PoissonLogNormalQuadratureCompoundTest.testGradientThroughNonVariableParams": {
  "lineno": 112,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.distributions.PoissonLogNormalQuadratureCompound"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test._PoissonLogNormalQuadratureCompoundTest.testGradientThroughParams": {
  "lineno": 99,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.distributions.PoissonLogNormalQuadratureCompound"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test._PoissonLogNormalQuadratureCompoundTest.testMeanVariance": {
  "lineno": 45,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.distributions.PoissonLogNormalQuadratureCompound"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test._PoissonLogNormalQuadratureCompoundTest.testMeanVarianceBroadcastBoth": {
  "lineno": 88,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.distributions.PoissonLogNormalQuadratureCompound"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test._PoissonLogNormalQuadratureCompoundTest.testMeanVarianceBroadcastScalar": {
  "lineno": 66,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.distributions.PoissonLogNormalQuadratureCompound"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test._PoissonLogNormalQuadratureCompoundTest.testSampleProbConsistent": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.distributions.PoissonLogNormalQuadratureCompound"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test._PoissonLogNormalQuadratureCompoundTest.testSampleProbConsistentBroadcastBoth": {
  "lineno": 77,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.distributions.PoissonLogNormalQuadratureCompound"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test._PoissonLogNormalQuadratureCompoundTest.testSampleProbConsistentBroadcastScalar": {
  "lineno": 55,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.distributions.PoissonLogNormalQuadratureCompound"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonLogRateTest": {
  "lineno": 328,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonLogRateTest._make_poisson": {
  "lineno": 331,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonLogRateTest.testAssertsPositiveRate": {
  "lineno": 345,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonLogRateTest.testAssertsPositiveRateAfterMutation": {
  "lineno": 348,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonLogRateTest.testGradientThroughRate": {
  "lineno": 353,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonLogRateTest.testInvalidLam": {
  "lineno": 342,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest._make_poisson": {
  "lineno": 35,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testAssertsPositiveRate": {
  "lineno": 311,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testAssertsPositiveRateAfterMutation": {
  "lineno": 318,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testGradientThroughRate": {
  "lineno": 302,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testInvalidLam": {
  "lineno": 52,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonCdf": {
  "lineno": 150,
  "symbols_in_volume": [
   "scipy.stats.poisson.cdf",
   "scipy.stats.poisson.logcdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonCdfContinuousRelaxation": {
  "lineno": 165,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.igammac",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonCdfGradient": {
  "lineno": 188,
  "symbols_in_volume": [
   "scipy.stats.poisson.cdf",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonCdfGradient.cdf": {
  "lineno": 194,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonCdfMultidimensional": {
  "lineno": 206,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "scipy.stats.poisson.cdf",
   "scipy.stats.poisson.logcdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonLogPmfContinuousRelaxation": {
  "lineno": 74,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.inf",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.lgamma",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonLogPmfDiscreteMatchesScipy": {
  "lineno": 59,
  "symbols_in_volume": [
   "scipy.stats.poisson.logpmf",
   "scipy.stats.poisson.pmf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonLogPmfGradient": {
  "lineno": 100,
  "symbols_in_volume": [
   "scipy.stats.poisson.logpmf",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonLogPmfGradientAtZeroPmf": {
  "lineno": 119,
  "symbols_in_volume": [
   "numpy.zeros",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonLogPmfGradientAtZeroPmf.poisson_log_prob": {
  "lineno": 125,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonLogPmfMultidimensional": {
  "lineno": 135,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "scipy.stats.poisson.logpmf",
   "scipy.stats.poisson.pmf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonMean": {
  "lineno": 221,
  "symbols_in_volume": [
   "scipy.stats.poisson.mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonMode": {
  "lineno": 245,
  "symbols_in_volume": [
   "numpy.floor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonMultipleMode": {
  "lineno": 251,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonSample": {
  "lineno": 259,
  "symbols_in_volume": [
   "scipy.stats.poisson.mean",
   "scipy.stats.poisson.var",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonSampleMultidimensionalMean": {
  "lineno": 274,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.array",
   "numpy.float32",
   "scipy.stats.poisson.mean",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonSampleMultidimensionalVariance": {
  "lineno": 287,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.array",
   "numpy.float32",
   "scipy.stats.poisson.var",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonShape": {
  "lineno": 43,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonStd": {
  "lineno": 237,
  "symbols_in_volume": [
   "numpy.sqrt",
   "scipy.stats.poisson.std"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonVariance": {
  "lineno": 229,
  "symbols_in_volume": [
   "scipy.stats.poisson.var"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli.ProbitBernoulli": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli.ProbitBernoulli.__init__": {
  "lineno": 53,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli.ProbitBernoulli._batch_shape": {
  "lineno": 123,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli.ProbitBernoulli._batch_shape_tensor": {
  "lineno": 119,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli.ProbitBernoulli._entropy": {
  "lineno": 156,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli.ProbitBernoulli._event_shape": {
  "lineno": 130,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli.ProbitBernoulli._event_shape_tensor": {
  "lineno": 127,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli.ProbitBernoulli._log_prob": {
  "lineno": 140,
  "symbols_in_volume": [
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.cast",
   "tensorflow_probability.python.internal.distribution_util.embed_check_integer_casting_closed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli.ProbitBernoulli._mean": {
  "lineno": 161,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli.ProbitBernoulli._mode": {
  "lineno": 168,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli.ProbitBernoulli._outcome_log_probs": {
  "lineno": 149,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow_probability.python.internal.special_math.log_ndtr"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli.ProbitBernoulli._param_shapes": {
  "lineno": 101,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli.ProbitBernoulli._parameter_control_dependencies": {
  "lineno": 193,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli.ProbitBernoulli._params_event_ndims": {
  "lineno": 105,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli.ProbitBernoulli._probits_parameter_no_checks": {
  "lineno": 177,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.python.internal.special_math.ndtri"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli.ProbitBernoulli._probs_parameter_no_checks": {
  "lineno": 188,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.python.internal.special_math.ndtr"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli.ProbitBernoulli._sample_n": {
  "lineno": 133,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.less",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli.ProbitBernoulli._variance": {
  "lineno": 164,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli.ProbitBernoulli.probits": {
  "lineno": 109,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli.ProbitBernoulli.probits_parameter": {
  "lineno": 172,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli.ProbitBernoulli.probs": {
  "lineno": 114,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli.ProbitBernoulli.probs_parameter": {
  "lineno": 183,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli._kl_bernoulli_bernoulli": {
  "lineno": 226,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli.maybe_assert_bernoulli_param_correctness": {
  "lineno": 198,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.internal.assert_util.assert_less_equal",
   "tensorflow_probability.python.internal.assert_util.assert_non_negative",
   "tensorflow_probability.python.internal.dtype_util.is_floating",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliFromVariableTest": {
  "lineno": 323,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliFromVariableTest.testAssertionsProbs": {
  "lineno": 346,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliFromVariableTest.testGradientProbits": {
  "lineno": 326,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliFromVariableTest.testGradientProbs": {
  "lineno": 336,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliTest": {
  "lineno": 50,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliTest._testPmf": {
  "lineno": 120,
  "symbols_in_volume": [
   "numpy.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliTest.testBoundaryConditions": {
  "lineno": 201,
  "symbols_in_volume": [
   "numpy.nan"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliTest.testBroadcasting": {
  "lineno": 175,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliTest.testDtype": {
  "lineno": 97,
  "symbols_in_volume": [
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.int64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliTest.testEntropyNoBatch": {
  "lineno": 206,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliTest.testEntropyWithBatch": {
  "lineno": 211,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliTest.testFloatMode": {
  "lineno": 116,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliTest.testInvalidP": {
  "lineno": 70,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliTest.testMean": {
  "lineno": 264,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliTest.testNotReparameterized": {
  "lineno": 240,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliTest.testP": {
  "lineno": 53,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliTest.testParamTensorFromProbits": {
  "lineno": 300,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.special_math.ndtri"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliTest.testParamTensorFromProbs": {
  "lineno": 311,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.special_math.ndtri"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliTest.testPmfCorrectBroadcastDynamicShape": {
  "lineno": 143,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliTest.testPmfInvalid": {
  "lineno": 153,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliTest.testPmfShapes": {
  "lineno": 184,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliTest.testPmfWithFloatArgReturnsXEntropy": {
  "lineno": 166,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliTest.testPmfWithP": {
  "lineno": 161,
  "symbols_in_volume": [
   "scipy.special.ndtri"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliTest.testProbitBernoulliProbitBernoulliKL": {
  "lineno": 283,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliTest.testProbits": {
  "lineno": 58,
  "symbols_in_volume": [
   "scipy.special.ndtr",
   "scipy.special.ndtri"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliTest.testSampleDeterministicScalarVsVector": {
  "lineno": 246,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliTest.testSampleDeterministicScalarVsVector._maybe_seed": {
  "lineno": 250,
  "symbols_in_volume": [
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliTest.testSampleN": {
  "lineno": 219,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.log",
   "numpy.mean",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.internal.tensorshape_util.as_list",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliTest.testShapes": {
  "lineno": 88,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.ProbitBernoulliTest.testVarianceAndStd": {
  "lineno": 269,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.sqrt"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.entropy": {
  "lineno": 45,
  "symbols_in_volume": [
   "numpy.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.probit_bernoulli_test.make_bernoulli": {
  "lineno": 39,
  "symbols_in_volume": [
   "numpy.random.uniform",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution": {
  "lineno": 129,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution.__init__": {
  "lineno": 232,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.distributions.distribution",
   "tensorflow_probability.python.distributions.distribution.dtype",
   "tensorflow_probability.python.internal.assert_util.assert_less",
   "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
   "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._batch_shape": {
  "lineno": 319,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._batch_shape_tensor": {
  "lineno": 316,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._cdf": {
  "lineno": 444,
  "symbols_in_volume": [
   "tensorflow.compat.v2.floor",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._check_integer": {
  "lineno": 530,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.distribution_util.assert_integer_form",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._event_shape": {
  "lineno": 325,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._event_shape_tensor": {
  "lineno": 322,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._log_cdf": {
  "lineno": 415,
  "symbols_in_volume": [
   "numpy.inf",
   "tensorflow.compat.v2.floor",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._log_prob": {
  "lineno": 346,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._log_prob_with_logcdf": {
  "lineno": 358,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._log_prob_with_logsf_and_logcdf": {
  "lineno": 361,
  "symbols_in_volume": [
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._log_survival_function": {
  "lineno": 472,
  "symbols_in_volume": [
   "numpy.inf",
   "tensorflow.compat.v2.math.ceil",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._prob": {
  "lineno": 385,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._prob_with_cdf": {
  "lineno": 397,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._prob_with_sf_and_cdf": {
  "lineno": 400,
  "symbols_in_volume": [
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._sample_n": {
  "lineno": 328,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.ceil",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._survival_function": {
  "lineno": 502,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.ceil",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution.distribution": {
  "lineno": 301,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution.high": {
  "lineno": 311,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution.low": {
  "lineno": 306,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution._logsum_expbig_minus_expsmall": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test": {
  "lineno": null,
  "symbols_in_volume": [
   "numpy.random.RandomState",
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest._assert_all_finite": {
  "lineno": 38,
  "symbols_in_volume": [
   "numpy.isfinite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testCutoffsCanBeFloatValuedIfValidateArgsFalse": {
  "lineno": 368,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testCutoffsMustBeIntegerValuedIfValidateArgsTrue": {
  "lineno": 358,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testDtypeAndShapeInheritedFromBaseDist": {
  "lineno": 379,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testLogProbAndGradGivesFiniteResults": {
  "lineno": 311,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.float64",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testLogProbAndGradGivesFiniteResults.quantized_log_prob": {
  "lineno": 312,
  "symbols_in_volume": [
   "numpy.arange"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testLogProbAndGradGivesFiniteResults.quantized_log_prob.inner_func": {
  "lineno": 315,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testLowerCutoffMustBeBelowUpperCutoffOrWeRaise": {
  "lineno": 348,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testNormalCdfAndSurvivalFunction": {
  "lineno": 227,
  "symbols_in_volume": [
   "numpy.float64",
   "scipy.stats.norm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testNormalLogCdfAndLogSurvivalFunction": {
  "lineno": 243,
  "symbols_in_volume": [
   "numpy.float64",
   "scipy.stats.norm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testNormalLogProbWithCutoffs": {
  "lineno": 284,
  "symbols_in_volume": [
   "numpy.log",
   "scipy.stats.norm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testNormalProbWithCutoffs": {
  "lineno": 259,
  "symbols_in_volume": [
   "scipy.stats.norm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testProbAndGradGivesFiniteResultsForCommonEvents": {
  "lineno": 331,
  "symbols_in_volume": [
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testProbAndGradGivesFiniteResultsForCommonEvents.quantized_log_prob": {
  "lineno": 332,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.math.ceil"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testQuantizationOfBatchOfUniforms": {
  "lineno": 127,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testQuantizationOfUniformWithCutoffsHavingNoEffect": {
  "lineno": 41,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testQuantizationOfUniformWithCutoffsInTheMiddle": {
  "lineno": 93,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testSamplesAgreeWithCdfForSamplesOverLargeRange": {
  "lineno": 180,
  "symbols_in_volume": [
   "scipy.stats.kstest",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testSamplesAgreeWithPdfForSamplesOverSmallRange": {
  "lineno": 207,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.float32",
   "numpy.sqrt",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testSamplingFromBatchOfNormals": {
  "lineno": 159,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli.RelaxedBernoulli": {
  "lineno": 30,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli.RelaxedBernoulli.__init__": {
  "lineno": 131,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.bijectors.sigmoid.Sigmoid",
   "tensorflow_probability.python.distributions.logistic.Logistic",
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli.RelaxedBernoulli._param_shapes": {
  "lineno": 188,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli.RelaxedBernoulli._params_event_ndims": {
  "lineno": 192,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli.RelaxedBernoulli.logits": {
  "lineno": 201,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli.RelaxedBernoulli.logits_parameter": {
  "lineno": 211,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli.RelaxedBernoulli.probs": {
  "lineno": 206,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli.RelaxedBernoulli.probs_parameter": {
  "lineno": 218,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.math.sigmoid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli.RelaxedBernoulli.temperature": {
  "lineno": 196,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.RelaxedBernoulliTest": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.RelaxedBernoulliTest.testBoundaryConditions": {
  "lineno": 123,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow_probability.python.distributions.RelaxedBernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.RelaxedBernoulliTest.testDtype": {
  "lineno": 95,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow_probability.python.distributions.RelaxedBernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.RelaxedBernoulliTest.testInvalidP": {
  "lineno": 56,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.RelaxedBernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.RelaxedBernoulliTest.testLogProb": {
  "lineno": 110,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float64",
   "numpy.log",
   "numpy.power",
   "tensorflow_probability.python.distributions.RelaxedBernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.RelaxedBernoulliTest.testLogits": {
  "lineno": 44,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.RelaxedBernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.RelaxedBernoulliTest.testP": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.RelaxedBernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.RelaxedBernoulliTest.testParamTensorFromLogits": {
  "lineno": 144,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.sigmoid",
   "tensorflow_probability.python.distributions.RelaxedBernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.RelaxedBernoulliTest.testParamTensorFromProbs": {
  "lineno": 156,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow_probability.python.distributions.RelaxedBernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.RelaxedBernoulliTest.testSampleN": {
  "lineno": 129,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.sum",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.distributions.RelaxedBernoulli",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.RelaxedBernoulliTest.testShapes": {
  "lineno": 75,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.random",
   "tensorflow_probability.python.distributions.RelaxedBernoulli",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.RelaxedBernoulliTest.testZeroTemperature": {
  "lineno": 86,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.errors.InvalidArgumentError",
   "tensorflow_probability.python.distributions.RelaxedBernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical.__init__": {
  "lineno": 129,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._assert_valid_sample": {
  "lineno": 314,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_logsumexp",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.assert_util.assert_near",
   "tensorflow_probability.python.internal.assert_util.assert_non_positive",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._batch_shape": {
  "lineno": 234,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._batch_shape_tensor": {
  "lineno": 225,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.broadcast_shape",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._event_shape": {
  "lineno": 244,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._event_shape_tensor": {
  "lineno": 238,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._event_size": {
  "lineno": 196,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._log_prob": {
  "lineno": 273,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.lgamma",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log_softmax",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._logits_deprecated_behavior": {
  "lineno": 323,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._logits_parameter_no_checks": {
  "lineno": 299,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._parameter_control_dependencies": {
  "lineno": 339,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32.max",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.assert_util.assert_greater_equal",
   "tensorflow_probability.python.internal.assert_util.assert_less_equal",
   "tensorflow_probability.python.internal.assert_util.assert_near",
   "tensorflow_probability.python.internal.assert_util.assert_non_negative",
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.assert_util.assert_rank_at_least",
   "tensorflow_probability.python.internal.dtype_util.is_floating",
   "tensorflow_probability.python.internal.tensor_util.is_ref",
   "tensorflow_probability.python.internal.tensorshape_util.dims"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._params_event_ndims": {
  "lineno": 183,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._probs_deprecated_behavior": {
  "lineno": 331,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._probs_parameter_no_checks": {
  "lineno": 309,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.math.softmax"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._sample_n": {
  "lineno": 248,
  "symbols_in_volume": [
   "numpy.finfo",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log_softmax",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical.event_size": {
  "lineno": 187,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical.logits": {
  "lineno": 211,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical.logits_parameter": {
  "lineno": 294,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical.probs": {
  "lineno": 218,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical.probs_parameter": {
  "lineno": 304,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical.temperature": {
  "lineno": 206,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.RelaxedOneHotCategorical": {
  "lineno": 402,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.RelaxedOneHotCategorical.__init__": {
  "lineno": 474,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.exp.Exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.RelaxedOneHotCategorical.event_size": {
  "lineno": 521,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.RelaxedOneHotCategorical.logits": {
  "lineno": 535,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.RelaxedOneHotCategorical.logits_parameter": {
  "lineno": 540,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.RelaxedOneHotCategorical.probs": {
  "lineno": 530,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.RelaxedOneHotCategorical.probs_parameter": {
  "lineno": 544,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.RelaxedOneHotCategorical.temperature": {
  "lineno": 516,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.ExpRelaxedOneHotCategoricalFromVariableTest": {
  "lineno": 243,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.ExpRelaxedOneHotCategoricalFromVariableTest.testAssertionsLogits": {
  "lineno": 281,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.python.distributions.ExpRelaxedOneHotCategorical",
   "tensorflow_probability.util.DeferredTensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.ExpRelaxedOneHotCategoricalFromVariableTest.testAssertionsProbs": {
  "lineno": 266,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.distributions.ExpRelaxedOneHotCategorical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.ExpRelaxedOneHotCategoricalFromVariableTest.testAssertionsProbsAfterMutation": {
  "lineno": 273,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.python.distributions.ExpRelaxedOneHotCategorical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.ExpRelaxedOneHotCategoricalFromVariableTest.testAssertionsTemperatureAfterMutation": {
  "lineno": 290,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.python.distributions.ExpRelaxedOneHotCategorical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.ExpRelaxedOneHotCategoricalFromVariableTest.testGradientLogits": {
  "lineno": 246,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.math.log_softmax",
   "tensorflow_probability.python.distributions.ExpRelaxedOneHotCategorical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.ExpRelaxedOneHotCategoricalFromVariableTest.testGradientProbs": {
  "lineno": 256,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.math.log_softmax",
   "tensorflow_probability.python.distributions.ExpRelaxedOneHotCategorical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.ExpRelaxedOneHotCategoricalTest": {
  "lineno": 42,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.ExpRelaxedOneHotCategoricalTest.testPdf": {
  "lineno": 54,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.power",
   "numpy.prod",
   "numpy.sum",
   "scipy.special.gamma",
   "tensorflow_probability.python.distributions.ExpRelaxedOneHotCategorical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.ExpRelaxedOneHotCategoricalTest.testProbs": {
  "lineno": 45,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.sum",
   "tensorflow_probability.python.distributions.ExpRelaxedOneHotCategorical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.RelaxedOneHotCategoricalTest": {
  "lineno": 85,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.RelaxedOneHotCategoricalTest.assertRaises": {
  "lineno": 88,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.RelaxedOneHotCategoricalTest.testDTypes": {
  "lineno": 211,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float16",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow_probability.python.distributions.RelaxedOneHotCategorical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.RelaxedOneHotCategoricalTest.testEventSizeOfOne": {
  "lineno": 201,
  "symbols_in_volume": [
   "numpy.int32",
   "numpy.ones",
   "numpy.zeros",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.distributions.ExpRelaxedOneHotCategorical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.RelaxedOneHotCategoricalTest.testLogits": {
  "lineno": 100,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.RelaxedOneHotCategorical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.RelaxedOneHotCategoricalTest.testParamBroadcasting": {
  "lineno": 108,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.RelaxedOneHotCategorical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.RelaxedOneHotCategoricalTest.testParamTensorFromLogits": {
  "lineno": 218,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.softmax",
   "tensorflow_probability.python.distributions.ExpRelaxedOneHotCategorical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.RelaxedOneHotCategoricalTest.testParamTensorFromProbs": {
  "lineno": 231,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.log",
   "tensorflow_probability.python.distributions.ExpRelaxedOneHotCategorical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.RelaxedOneHotCategoricalTest.testPdf": {
  "lineno": 133,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow_probability.python.distributions.RelaxedOneHotCategorical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.RelaxedOneHotCategoricalTest.testProbs": {
  "lineno": 93,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.RelaxedOneHotCategorical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.RelaxedOneHotCategoricalTest.testSample": {
  "lineno": 115,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.uniform",
   "tensorflow_probability.python.distributions.RelaxedOneHotCategorical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.RelaxedOneHotCategoricalTest.testShapes": {
  "lineno": 160,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.internal.tensorshape_util.as_list",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.RelaxedOneHotCategoricalTest.testUnknownAndInvalidShape": {
  "lineno": 186,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.distributions.ExpRelaxedOneHotCategorical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.RelaxedOneHotCategoricalTest.testUnknownShape": {
  "lineno": 178,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.distributions.ExpRelaxedOneHotCategorical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.analytical_pdf": {
  "lineno": 71,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.expand_dims",
   "numpy.power",
   "numpy.prod",
   "numpy.reshape",
   "numpy.sum",
   "scipy.special.gamma"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.make_relaxed_categorical": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow_probability.python.distributions.RelaxedOneHotCategorical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.sample.Sample": {
  "lineno": 55,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.sample.Sample.__init__": {
  "lineno": 112,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.distributions.distribution",
   "tensorflow_probability.python.distributions.distribution.name",
   "tensorflow_probability.python.internal.distribution_util.expand_to_vector"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample.Sample._batch_shape": {
  "lineno": 158,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample.Sample._batch_shape_tensor": {
  "lineno": 155,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample.Sample._entropy": {
  "lineno": 231,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow_probability.python.internal.prefer_static.reduce_prod"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample.Sample._event_shape": {
  "lineno": 167,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow_probability.python.internal.tensorshape_util.concatenate",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample.Sample._event_shape_tensor": {
  "lineno": 161,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.concat"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample.Sample._log_prob": {
  "lineno": 195,
  "symbols_in_volume": [
   "tensorflow.compat.v2.pad",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.transpose",
   "tensorflow_probability.python.internal.prefer_static.concat",
   "tensorflow_probability.python.internal.prefer_static.maximum",
   "tensorflow_probability.python.internal.prefer_static.range",
   "tensorflow_probability.python.internal.prefer_static.rank",
   "tensorflow_probability.python.internal.prefer_static.rank_from_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample.Sample._sample_n": {
  "lineno": 175,
  "symbols_in_volume": [
   "tensorflow.compat.v2.transpose",
   "tensorflow_probability.python.internal.prefer_static.concat",
   "tensorflow_probability.python.internal.prefer_static.range",
   "tensorflow_probability.python.internal.prefer_static.rank_from_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample.Sample.distribution": {
  "lineno": 147,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample.Sample.sample_shape": {
  "lineno": 151,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample._kl_sample": {
  "lineno": 242,
  "symbols_in_volume": [
   "numpy.array_equal",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL",
   "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.prefer_static.reduce_prod"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample._make_summary_statistic": {
  "lineno": 34,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample._make_summary_statistic._fn": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.reshape",
   "tensorflow_probability.python.internal.prefer_static.concat",
   "tensorflow_probability.python.internal.prefer_static.ones",
   "tensorflow_probability.python.internal.prefer_static.rank_from_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.sample_test.SampleDistributionTest": {
  "lineno": 34,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.sample_test.SampleDistributionTest.test_entropy": {
  "lineno": 179,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.Sample"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample_test.SampleDistributionTest.test_everything_nonscalar": {
  "lineno": 49,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.transpose",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.Sample",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample_test.SampleDistributionTest.test_everything_scalar": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.Sample",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample_test.SampleDistributionTest.test_kl_divergence": {
  "lineno": 73,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.Sample",
   "tensorflow_probability.python.distributions.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample_test.SampleDistributionTest.test_mixed_scalar": {
  "lineno": 65,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.Sample",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample_test.SampleDistributionTest.test_summary_statistic": {
  "lineno": 162,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.Sample"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample_test.SampleDistributionTest.test_transformed_affine": {
  "lineno": 87,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Affine",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.Sample",
   "tensorflow_probability.python.distributions.TransformedDistribution",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample_test.SampleDistributionTest.test_transformed_affine.expected_lp": {
  "lineno": 93,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample_test.SampleDistributionTest.test_transformed_exp": {
  "lineno": 123,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Exp",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.Sample",
   "tensorflow_probability.python.distributions.TransformedDistribution",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample_test.SampleDistributionTest.test_transformed_exp.expected_lp": {
  "lineno": 128,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh.SinhArcsinh": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh.SinhArcsinh.__init__": {
  "lineno": 99,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.bijectors.affine_scalar.AffineScalar",
   "tensorflow_probability.python.bijectors.chain.Chain",
   "tensorflow_probability.python.bijectors.sinh_arcsinh.SinhArcsinh",
   "tensorflow_probability.python.distributions.normal.Normal",
   "tensorflow_probability.python.internal.distribution_util.get_broadcast_shape",
   "tensorflow_probability.python.internal.distribution_util.maybe_check_scalar_distribution",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh.SinhArcsinh.loc": {
  "lineno": 195,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh.SinhArcsinh.scale": {
  "lineno": 200,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh.SinhArcsinh.skewness": {
  "lineno": 210,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh.SinhArcsinh.tailweight": {
  "lineno": 205,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test": {
  "lineno": null,
  "symbols_in_volume": [
   "numpy.random.RandomState",
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.SinhArcsinhTest": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.SinhArcsinhTest.testBroadcastParamsDynamic": {
  "lineno": 60,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.SinhArcsinhTest.testDefaultIsSameAsNormal": {
  "lineno": 39,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.SinhArcsinhTest.testNonVariableGradients": {
  "lineno": 202,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.SinhArcsinhTest.testPassingInLaplacePlusDefaultsIsSameAsLaplace": {
  "lineno": 71,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.SinhArcsinhTest.testPdfReflectedForNegativeSkewness": {
  "lineno": 179,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.SinhArcsinhTest.testPositiveSkewnessMovesMeanToTheRight": {
  "lineno": 168,
  "symbols_in_volume": [
   "numpy.testing.assert_array_less",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.SinhArcsinhTest.testTailweightLargeGivesMoreOutliersThanNormal": {
  "lineno": 132,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.percentile",
   "numpy.testing.assert_array_less",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.SinhArcsinhTest.testTailweightSmallGivesFewerOutliersThanNormal": {
  "lineno": 96,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.percentile",
   "numpy.testing.assert_array_less",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.SinhArcsinhTest.testVariableGradients": {
  "lineno": 188,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.internal.test_util.numpy_disable_gradient_test"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT.__init__": {
  "lineno": 137,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._batch_shape": {
  "lineno": 223,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._batch_shape_tensor": {
  "lineno": 216,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.broadcast_shape",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._cdf": {
  "lineno": 267,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.betainc",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._entropy": {
  "lineno": 276,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.digamma",
   "tensorflow.compat.v2.math.lbeta",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._event_shape": {
  "lineno": 232,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._event_shape_tensor": {
  "lineno": 229,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._log_prob": {
  "lineno": 256,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.lgamma",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._mean": {
  "lineno": 288,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.assert_util.assert_less",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._mode": {
  "lineno": 348,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._param_shapes": {
  "lineno": 191,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._parameter_control_dependencies": {
  "lineno": 352,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._params_event_ndims": {
  "lineno": 197,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._sample_n": {
  "lineno": 235,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.rsqrt",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.random.gamma",
   "tensorflow.compat.v2.random.normal",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._variance": {
  "lineno": 310,
  "symbols_in_volume": [
   "numpy.inf",
   "numpy.nan",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.square",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.assert_util.assert_less",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT.df": {
  "lineno": 201,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT.loc": {
  "lineno": 206,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT.scale": {
  "lineno": 211,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess": {
  "lineno": 45,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess.__init__": {
  "lineno": 190,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess._batch_shape": {
  "lineno": 410,
  "symbols_in_volume": [
   "functools.reduce",
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess._batch_shape_tensor": {
  "lineno": 402,
  "symbols_in_volume": [
   "functools.reduce",
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess._compute_covariance": {
  "lineno": 293,
  "symbols_in_volume": [
   "tensorflow.compat.v2.squeeze"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess._covariance": {
  "lineno": 472,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess._entropy": {
  "lineno": 452,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess._event_shape": {
  "lineno": 427,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess._event_shape_tensor": {
  "lineno": 418,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess._get_index_points": {
  "lineno": 377,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess._is_univariate_marginal": {
  "lineno": 270,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "warnings.warn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess._log_cdf": {
  "lineno": 449,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess._log_prob": {
  "lineno": 399,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess._log_survival_function": {
  "lineno": 442,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess._mean": {
  "lineno": 455,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess._mode": {
  "lineno": 478,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess._parameter_control_dependencies": {
  "lineno": 481,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow_probability.python.internal.assert_util.assert_greater",
   "tensorflow_probability.python.internal.tensor_util.is_mutable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess._quantile": {
  "lineno": 458,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess._sample_n": {
  "lineno": 439,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess._stddev": {
  "lineno": 461,
  "symbols_in_volume": [
   "tensorflow.compat.v2.sqrt"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess._survival_function": {
  "lineno": 446,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess._variance": {
  "lineno": 464,
  "symbols_in_volume": [
   "tensorflow.compat.v2.squeeze"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess.df": {
  "lineno": 357,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess.get_marginal_distribution": {
  "lineno": 302,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.squeeze",
   "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator",
   "tensorflow_probability.python.distributions.student_t.StudentT"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess.index_points": {
  "lineno": 369,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess.jitter": {
  "lineno": 373,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess.kernel": {
  "lineno": 365,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess.mean_fn": {
  "lineno": 361,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process._add_diagonal_shift": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.linalg.set_diag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.student_t_process_test.StudentTProcessDynamicTest": {
  "lineno": 243,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.student_t_process_test.StudentTProcessStaticTest": {
  "lineno": 238,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.student_t_process_test._StudentTProcessTest": {
  "lineno": 32,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.student_t_process_test._StudentTProcessTest.testCopy": {
  "lineno": 133,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.random.uniform",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow_probability.python.distributions.StudentTProcess",
   "tensorflow_probability.python.positive_semidefinite_kernels.ExpSinSquared",
   "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process_test._StudentTProcessTest.testLateBindingIndexPoints": {
  "lineno": 188,
  "symbols_in_volume": [
   "numpy.diag",
   "numpy.expand_dims",
   "numpy.float64",
   "numpy.random.uniform",
   "numpy.sqrt",
   "tensorflow_probability.python.distributions.StudentTProcess",
   "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process_test._StudentTProcessTest.testLateBindingIndexPoints._kernel_fn": {
  "lineno": 207,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.squeeze"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process_test._StudentTProcessTest.testMarginalHasCorrectTypes": {
  "lineno": 224,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "tensorflow_probability.python.distributions.MultivariateStudentTLinearOperator",
   "tensorflow_probability.python.distributions.StudentT",
   "tensorflow_probability.python.distributions.StudentTProcess",
   "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process_test._StudentTProcessTest.testMean": {
  "lineno": 123,
  "symbols_in_volume": [
   "numpy.expand_dims",
   "numpy.random.uniform",
   "tensorflow_probability.python.distributions.StudentTProcess",
   "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process_test._StudentTProcessTest.testShapes": {
  "lineno": 34,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.linspace",
   "numpy.meshgrid",
   "numpy.reshape",
   "numpy.stack",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.distributions.StudentTProcess",
   "tensorflow_probability.python.internal.tensorshape_util.dims",
   "tensorflow_probability.python.internal.tensorshape_util.rank",
   "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process_test._StudentTProcessTest.testVarianceAndCovarianceMatrix": {
  "lineno": 95,
  "symbols_in_volume": [
   "numpy.diag",
   "numpy.expand_dims",
   "numpy.float64",
   "numpy.random.uniform",
   "tensorflow_probability.python.distributions.StudentTProcess",
   "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process_test._StudentTProcessTest.testVarianceAndCovarianceMatrix._kernel_fn": {
  "lineno": 111,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.squeeze"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest._assertIntegral": {
  "lineno": 441,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest._checkKLApprox": {
  "lineno": 216,
  "symbols_in_volume": [
   "numpy.histogram",
   "numpy.log",
   "numpy.random.seed",
   "numpy.sum",
   "scipy.stats.t.interval",
   "scipy.stats.t.rvs"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testAssertParamsAreFloats": {
  "lineno": 468,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testBroadcastingParams": {
  "lineno": 234,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testBroadcastingParams._check": {
  "lineno": 236,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testBroadcastingPdfArgs": {
  "lineno": 248,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testBroadcastingPdfArgs._assert_shape": {
  "lineno": 250,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testBroadcastingPdfArgs._check": {
  "lineno": 254,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testBroadcastingPdfArgs._check2d": {
  "lineno": 267,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testBroadcastingPdfArgs._check2d_rows": {
  "lineno": 280,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testFullyReparameterized": {
  "lineno": 403,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testGradientThroughParams": {
  "lineno": 457,
  "symbols_in_volume": [
   "numpy.ones",
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testMeanAllowNanStatsIsFalseRaisesWhenBatchMemberIsUndefined": {
  "lineno": 299,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testMeanAllowNanStatsIsFalseWorksWhenAllBatchMembersAreDefined": {
  "lineno": 293,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testMeanAllowNanStatsIsTrueReturnsNaNForUndefinedBatchMembers": {
  "lineno": 306,
  "symbols_in_volume": [
   "numpy.nan"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testMode": {
  "lineno": 374,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testNegativeDofFails": {
  "lineno": 451,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testPdfOfSample": {
  "lineno": 383,
  "symbols_in_volume": [
   "numpy.mean",
   "numpy.pi",
   "scipy.stats.t.pdf",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testPdfOfSampleMultiDims": {
  "lineno": 414,
  "symbols_in_volume": [
   "numpy.mean",
   "numpy.var",
   "scipy.stats.t.var",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testStd": {
  "lineno": 359,
  "symbols_in_volume": [
   "scipy.stats.t.std"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testStudentCDFAndLogCDF": {
  "lineno": 91,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "numpy.log",
   "scipy.stats.t.cdf",
   "scipy.stats.t.logcdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testStudentEntropy": {
  "lineno": 118,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.array",
   "numpy.reshape",
   "scipy.stats.t.entropy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testStudentLogPDFMultidimensional": {
  "lineno": 66,
  "symbols_in_volume": [
   "math.sqrt",
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "numpy.log",
   "numpy.sqrt",
   "scipy.stats.t.logpdf",
   "scipy.stats.t.pdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testStudentPDFAndLogPDF": {
  "lineno": 41,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "numpy.log",
   "scipy.stats.t.logpdf",
   "scipy.stats.t.pdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testStudentSample": {
  "lineno": 138,
  "symbols_in_volume": [
   "math.sqrt",
   "numpy.sqrt",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testStudentSampleMultiDimensional": {
  "lineno": 185,
  "symbols_in_volume": [
   "math.sqrt",
   "numpy.sqrt",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testStudentSampleMultipleTimes": {
  "lineno": 157,
  "symbols_in_volume": [
   "math.sqrt",
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testStudentSampleSmallDfNoNan": {
  "lineno": 174,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.isnan",
   "numpy.logical_not",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testVarianceAllowNanStatsFalseGivesCorrectValueForDefinedBatchMembers": {
  "lineno": 333,
  "symbols_in_volume": [
   "scipy.stats.t.var"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testVarianceAllowNanStatsFalseRaisesForUndefinedBatchMembers": {
  "lineno": 347,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testVarianceAllowNanStatsTrueReturnsNaNforUndefinedBatchMembers": {
  "lineno": 314,
  "symbols_in_volume": [
   "numpy.nan",
   "scipy.stats.t.var"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution": {
  "lineno": 61,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution.__getitem__": {
  "lineno": 281,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution.__init__": {
  "lineno": 170,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.distributions.distribution",
   "tensorflow_probability.python.distributions.distribution.is_scalar_batch",
   "tensorflow_probability.python.distributions.distribution.is_scalar_event",
   "tensorflow_probability.python.distributions.distribution.name",
   "tensorflow_probability.python.internal.prefer_static.equal",
   "tensorflow_probability.python.internal.prefer_static.logical_not",
   "tensorflow_probability.python.internal.prefer_static.range",
   "tensorflow_probability.python.internal.prefer_static.rank_from_shape",
   "tensorflow_probability.python.internal.prefer_static.reduce_all"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._batch_shape": {
  "lineno": 329,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.tensorshape_util.constant_value_as_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._batch_shape_tensor": {
  "lineno": 323,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.pick_vector"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._call_sample_n": {
  "lineno": 358,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._cdf": {
  "lineno": 471,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._entropy": {
  "lineno": 548,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.size",
   "tensorflow.compat.v2.tile",
   "tensorflow_probability.python.internal.dtype_util.base_dtype",
   "tensorflow_probability.python.internal.prefer_static.ones_like",
   "tensorflow_probability.python.internal.prefer_static.zeros",
   "tensorflow_probability.python.internal.tensorshape_util.rank",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._event_shape": {
  "lineno": 307,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.tensorshape_util.constant_value_as_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._event_shape_tensor": {
  "lineno": 300,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.pick_vector"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._finish_log_prob_for_one_fiber": {
  "lineno": 409,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape",
   "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._finish_prob_for_one_fiber": {
  "lineno": 444,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape",
   "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._log_cdf": {
  "lineno": 460,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._log_prob": {
  "lineno": 389,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_logsumexp",
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._log_survival_function": {
  "lineno": 482,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._maybe_get_static_event_ndims": {
  "lineno": 660,
  "symbols_in_volume": [
   "tensorflow.compat.v2.size",
   "tensorflow_probability.python.internal.distribution_util.maybe_get_static_value",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._maybe_rotate_dims": {
  "lineno": 649,
  "symbols_in_volume": [
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.transpose",
   "tensorflow_probability.python.internal.prefer_static.concat",
   "tensorflow_probability.python.internal.prefer_static.range",
   "tensorflow_probability.python.internal.prefer_static.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._maybe_validate_shape_override": {
  "lineno": 595,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.assert_util.assert_non_negative",
   "tensorflow_probability.python.internal.assert_util.assert_rank",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies",
   "tensorflow_probability.python.internal.dtype_util.is_integer",
   "tensorflow_probability.python.internal.prefer_static.logical_and",
   "tensorflow_probability.python.internal.prefer_static.logical_not",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._mean": {
  "lineno": 518,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.reshape",
   "tensorflow_probability.python.internal.prefer_static.concat",
   "tensorflow_probability.python.internal.prefer_static.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._prob": {
  "lineno": 425,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._quantile": {
  "lineno": 504,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._sample_n": {
  "lineno": 345,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.pick_vector",
   "tensorflow_probability.python.internal.prefer_static.concat"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._survival_function": {
  "lineno": 493,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution.bijector": {
  "lineno": 276,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution.distribution": {
  "lineno": 271,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution._default_kwargs_split_fn": {
  "lineno": 55,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution._is_scalar_from_shape_tensor": {
  "lineno": 50,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.equal",
   "tensorflow_probability.python.internal.prefer_static.rank_from_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution._pick_scalar_condition": {
  "lineno": 39,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.DummyMatrixTransform": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.DummyMatrixTransform.__init__": {
  "lineno": 45,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.DummyMatrixTransform._forward": {
  "lineno": 52,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.DummyMatrixTransform._forward_log_det_jacobian": {
  "lineno": 59,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.det"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.DummyMatrixTransform._inverse": {
  "lineno": 55,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.DummyMatrixTransform._inverse_log_det_jacobian": {
  "lineno": 62,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.det"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.ScalarToMultiTest": {
  "lineno": 334,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.ScalarToMultiTest._cls": {
  "lineno": 336,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.TransformedDistribution"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.ScalarToMultiTest._testMVN": {
  "lineno": 350,
  "symbols_in_volume": [
   "numpy.concatenate",
   "numpy.exp",
   "numpy.int32",
   "numpy.matmul",
   "numpy.tile",
   "numpy.transpose",
   "scipy.stats.multivariate_normal",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.transpose",
   "tensorflow_probability.python.bijectors.Affine",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.ScalarToMultiTest._testMVN.actual_mvn_log_prob": {
  "lineno": 383,
  "symbols_in_volume": [
   "numpy.concatenate",
   "scipy.stats.multivariate_normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.ScalarToMultiTest.setUp": {
  "lineno": 339,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.ScalarToMultiTest.testConditioning": {
  "lineno": 616,
  "symbols_in_volume": [
   "numpy.sign",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.TransformedDistribution"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.ScalarToMultiTest.testEmptyEvent": {
  "lineno": 582,
  "symbols_in_volume": [
   "numpy.zeros",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.ScalarToMultiTest.testMatrixEvent": {
  "lineno": 514,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.int32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.ScalarToMultiTest.testMatrixEvent.actual_mvn_log_prob": {
  "lineno": 538,
  "symbols_in_volume": [
   "numpy.linalg.det",
   "numpy.sum",
   "scipy.stats.norm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.ScalarToMultiTest.testNonScalarBatchNonScalarEvent": {
  "lineno": 502,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Affine",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.ScalarToMultiTest.testNonScalarBatchScalarEvent": {
  "lineno": 483,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Affine",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.ScalarToMultiTest.testScalarBatchNonScalarEvent": {
  "lineno": 464,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Affine",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.ScalarToMultiTest.testScalarBatchScalarEvent": {
  "lineno": 453,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest": {
  "lineno": 93,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest._cls": {
  "lineno": 96,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.TransformedDistribution"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest._make_unimplemented": {
  "lineno": 99,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest._make_unimplemented._unimplemented": {
  "lineno": 100,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testCachedSamples": {
  "lineno": 178,
  "symbols_in_volume": [
   "numpy.exp",
   "scipy.stats.lognorm.logpdf",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testCachedSamples.ExpForwardOnly": {
  "lineno": 179,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testCachedSamples.ExpForwardOnly.__init__": {
  "lineno": 181,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testCachedSamples.ExpForwardOnly._forward": {
  "lineno": 184,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testCachedSamples.ExpForwardOnly._forward_log_det_jacobian": {
  "lineno": 187,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testCachedSamplesInvert": {
  "lineno": 204,
  "symbols_in_volume": [
   "numpy.exp",
   "scipy.stats.norm.logpdf",
   "tensorflow_probability.python.bijectors.Invert",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testCachedSamplesInvert.ExpInverseOnly": {
  "lineno": 205,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testCachedSamplesInvert.ExpInverseOnly.__init__": {
  "lineno": 207,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testCachedSamplesInvert.ExpInverseOnly._inverse": {
  "lineno": 210,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testCachedSamplesInvert.ExpInverseOnly._inverse_log_det_jacobian": {
  "lineno": 213,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testCastLogDetJacobian": {
  "lineno": 255,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.bijectors.Inline",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testEntropy": {
  "lineno": 306,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.concatenate",
   "numpy.diag",
   "numpy.float32",
   "scipy.stats.multivariate_normal",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.bijectors.AffineLinearOperator",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testMean": {
  "lineno": 277,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.bijectors.AffineLinearOperator",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testMeanShapeOverride": {
  "lineno": 292,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow_probability.python.bijectors.AffineLinearOperator",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testNonInjectiveTransformedDistribution": {
  "lineno": 134,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.testing.assert_array_less",
   "scipy.stats.norm",
   "tensorflow_probability.python.bijectors.AbsoluteValue",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testQuantile": {
  "lineno": 167,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Sigmoid",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testScalarBatchScalarEventIdentityScale": {
  "lineno": 324,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow_probability.python.bijectors.AffineScalar",
   "tensorflow_probability.python.distributions.Exponential"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testShapeChangingBijector": {
  "lineno": 235,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.log",
   "numpy.squeeze",
   "numpy.sum",
   "scipy.stats.norm",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.bijectors.SoftmaxCentered",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testTransformedDistribution": {
  "lineno": 104,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.float32",
   "numpy.linspace",
   "numpy.mean",
   "scipy.stats.lognorm",
   "tensorflow_probability.python.bijectors.Exp",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test._ChooseLocation": {
  "lineno": 66,
  "symbols_in_volume": [
   "tensorflow_probability.bijectors.Bijector"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test._ChooseLocation.__init__": {
  "lineno": 69,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test._ChooseLocation._forward": {
  "lineno": 78,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test._ChooseLocation._gather_loc": {
  "lineno": 87,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test._ChooseLocation._inverse": {
  "lineno": 81,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test._ChooseLocation._inverse_log_det_jacobian": {
  "lineno": 84,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular.__init__": {
  "lineno": 92,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular._batch_shape": {
  "lineno": 178,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular._batch_shape_tensor": {
  "lineno": 171,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular._cdf": {
  "lineno": 238,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.squared_difference",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular._entropy": {
  "lineno": 261,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular._event_shape": {
  "lineno": 184,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular._mean": {
  "lineno": 264,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular._parameter_control_dependencies": {
  "lineno": 276,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.internal.assert_util.assert_less",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular._params_event_ndims": {
  "lineno": 148,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular._pdf_at_peak": {
  "lineno": 167,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular._prob": {
  "lineno": 212,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.assert_util.assert_greater_equal",
   "tensorflow_probability.python.internal.assert_util.assert_less_equal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular._sample_n": {
  "lineno": 187,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular._variance": {
  "lineno": 267,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.squared_difference"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular.high": {
  "lineno": 157,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular.low": {
  "lineno": 152,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular.peak": {
  "lineno": 162,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.triangular_test.TriangularTestDynamicShape": {
  "lineno": 380,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.triangular_test.TriangularTestDynamicShape.setUp": {
  "lineno": 385,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test.TriangularTestFloat64StaticShape": {
  "lineno": 371,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.triangular_test.TriangularTestFloat64StaticShape.setUp": {
  "lineno": 376,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test.TriangularTestStaticShape": {
  "lineno": 362,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.triangular_test.TriangularTestStaticShape.setUp": {
  "lineno": 367,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest": {
  "lineno": 34,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest._create_triangular_dist": {
  "lineno": 41,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest._scipy_triangular": {
  "lineno": 47,
  "symbols_in_volume": [
   "scipy.stats.triang"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.make_tensor": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.cast"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testInvalidDistribution": {
  "lineno": 87,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testModifiedVariableAssertion": {
  "lineno": 347,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testProperties": {
  "lineno": 78,
  "symbols_in_volume": [
   "numpy.ones",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testShapes": {
  "lineno": 58,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testShapesBroadcast": {
  "lineno": 68,
  "symbols_in_volume": [
   "numpy.ones",
   "numpy.zeros",
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularCDF": {
  "lineno": 180,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularCDFBroadcast": {
  "lineno": 237,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.array",
   "numpy.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularCDFPeakEqualsHigh": {
  "lineno": 218,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularCDFPeakEqualsLow": {
  "lineno": 199,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularEntropy": {
  "lineno": 256,
  "symbols_in_volume": [
   "numpy.arange"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularExtrema": {
  "lineno": 340,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularMean": {
  "lineno": 267,
  "symbols_in_volume": [
   "numpy.arange"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularPDF": {
  "lineno": 101,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularPDFBroadcast": {
  "lineno": 160,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.array",
   "numpy.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularPDFPeakEqualsHigh": {
  "lineno": 140,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularPDFPeakEqualsLow": {
  "lineno": 120,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularSample": {
  "lineno": 287,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.arange",
   "numpy.array",
   "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_equal_by_dkwm",
   "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularSampleMultidimensionalMean": {
  "lineno": 308,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.array",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularSampleMultidimensionalVariance": {
  "lineno": 324,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.array",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularVariance": {
  "lineno": 277,
  "symbols_in_volume": [
   "numpy.arange"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal.__init__": {
  "lineno": 92,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.internal.distribution_util.get_broadcast_shape",
   "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._batch_shape": {
  "lineno": 223,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._batch_shape_tensor": {
  "lineno": 219,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._cdf": {
  "lineno": 327,
  "symbols_in_volume": [
   "tensorflow.compat.v2.clip_by_value",
   "tensorflow_probability.python.internal.special_math.ndtr"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._entropy": {
  "lineno": 333,
  "symbols_in_volume": [
   "numpy.e",
   "numpy.pi",
   "numpy.sqrt",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._event_shape": {
  "lineno": 230,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._event_shape_tensor": {
  "lineno": 227,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._log_prob": {
  "lineno": 316,
  "symbols_in_volume": [
   "numpy.inf",
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._mean": {
  "lineno": 341,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._mode": {
  "lineno": 347,
  "symbols_in_volume": [
   "tensorflow.compat.v2.clip_by_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._normal_pdf": {
  "lineno": 186,
  "symbols_in_volume": [
   "numpy.pi",
   "numpy.sqrt",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.square"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._normalizer": {
  "lineno": 181,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.special_math.ndtr"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._param_shapes": {
  "lineno": 189,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._params_event_ndims": {
  "lineno": 198,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._sample_n": {
  "lineno": 233,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.stack",
   "tensorflow.compat.v2.transpose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._sample_n._std_samples_with_gradients": {
  "lineno": 242,
  "symbols_in_volume": [
   "tensorflow.compat.v2.custom_gradient",
   "tensorflow.python.ops.random_ops.parameterized_truncated_normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._sample_n._std_samples_with_gradients.grad": {
  "lineno": 257,
  "symbols_in_volume": [
   "numpy.finfo",
   "tensorflow.compat.v2.clip_by_value",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.internal.special_math.ndtr"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._standardized_high": {
  "lineno": 177,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._standardized_low": {
  "lineno": 173,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._validate": {
  "lineno": 162,
  "symbols_in_volume": [
   "tensorflow.compat.v2.group",
   "tensorflow_probability.python.internal.assert_util.assert_finite",
   "tensorflow_probability.python.internal.assert_util.assert_positive"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._variance": {
  "lineno": 354,
  "symbols_in_volume": [
   "tensorflow.compat.v2.square"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal.high": {
  "lineno": 215,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal.loc": {
  "lineno": 202,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal.low": {
  "lineno": 211,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal.scale": {
  "lineno": 206,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase": {
  "lineno": 105,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase._testParamShapes": {
  "lineno": 109,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testBatchSampling": {
  "lineno": 165,
  "symbols_in_volume": [
   "numpy.max",
   "numpy.mean",
   "numpy.min",
   "numpy.var",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testGradientsFx": {
  "lineno": 271,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "itertools.product",
   "numpy.array",
   "numpy.float32",
   "numpy.float64",
   "tensorflow.compat.v2.Variable",
   "tensorflow.python.ops.gradient_checker_v2.compute_gradient",
   "tensorflow.python.ops.gradient_checker_v2.max_error"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testGradientsFx.f": {
  "lineno": 285,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testGradientsNx": {
  "lineno": 294,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "itertools.product",
   "numpy.float32",
   "numpy.float64",
   "tensorflow.compat.v2.Variable",
   "tensorflow.python.ops.gradient_checker_v2.compute_gradient",
   "tensorflow.python.ops.gradient_checker_v2.max_error"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testGradientsNx.f": {
  "lineno": 306,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testIncorrectBoundsFails": {
  "lineno": 210,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testMode": {
  "lineno": 221,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.asscalar"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testMomentsEmpirically": {
  "lineno": 187,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.mean",
   "numpy.var",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testNegativeSigmaFails": {
  "lineno": 204,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testParamShapes": {
  "lineno": 136,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testParamStaticShapes": {
  "lineno": 141,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testReparametrizable": {
  "lineno": 239,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.float32",
   "numpy.float64",
   "tensorflow.compat.v2.Variable",
   "tensorflow.python.ops.gradient_checker_v2.compute_gradient",
   "tensorflow.python.ops.gradient_checker_v2.max_error"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testReparametrizable.f": {
  "lineno": 247,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testReparametrizableBatch": {
  "lineno": 261,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testReparametrizableBatch.samples_sum": {
  "lineno": 262,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.distributions.TruncatedNormal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testShapeWithPlaceholders": {
  "lineno": 146,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalTestCompareWithNormal": {
  "lineno": 322,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "absl.testing.parameterized.parameters",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalTestCompareWithNormal.constructDists": {
  "lineno": 334,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalTestCompareWithNormal.testCDF": {
  "lineno": 384,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalTestCompareWithNormal.testEntropy": {
  "lineno": 341,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalTestCompareWithNormal.testLogProb": {
  "lineno": 365,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.log",
   "numpy.random.uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalTestCompareWithNormal.testSampling": {
  "lineno": 347,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalTestCompareWithScipy": {
  "lineno": 396,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "absl.testing.parameterized.parameters",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalTestCompareWithScipy.constructDists": {
  "lineno": 407,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalTestCompareWithScipy.testCDF": {
  "lineno": 444,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalTestCompareWithScipy.testEntropy": {
  "lineno": 426,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalTestCompareWithScipy.testLogProb": {
  "lineno": 431,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalTestCompareWithScipy.testMoments": {
  "lineno": 457,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalTestCompareWithScipy.testSampling": {
  "lineno": 414,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test._TruncatedNormalTestCase": {
  "lineno": 63,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test._TruncatedNormalTestCase.assertAllFinite": {
  "lineno": 68,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.isfinite",
   "numpy.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test._TruncatedNormalTestCase.assertAllGreaterEqual": {
  "lineno": 73,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test._TruncatedNormalTestCase.assertAllLessEqual": {
  "lineno": 78,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test._TruncatedNormalTestCase.assertEmpiricalDistributionsEqual": {
  "lineno": 83,
  "symbols_in_volume": [
   "numpy.histogram",
   "numpy.max",
   "numpy.min"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test._TruncatedNormalTestCase.setUp": {
  "lineno": 65,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.scipy_trunc_norm_dist": {
  "lineno": 43,
  "symbols_in_volume": [
   "scipy.stats.truncnorm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform": {
  "lineno": 31,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform.__init__": {
  "lineno": 74,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._batch_shape": {
  "lineno": 150,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._batch_shape_tensor": {
  "lineno": 145,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._cdf": {
  "lineno": 181,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._entropy": {
  "lineno": 195,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._event_shape": {
  "lineno": 158,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._event_shape_tensor": {
  "lineno": 155,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._mean": {
  "lineno": 198,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._param_shapes": {
  "lineno": 115,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._parameter_control_dependencies": {
  "lineno": 207,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_less",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._params_event_ndims": {
  "lineno": 121,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._prob": {
  "lineno": 169,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.is_nan",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._quantile": {
  "lineno": 192,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._range": {
  "lineno": 140,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._sample_n": {
  "lineno": 161,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.random.uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._stddev": {
  "lineno": 204,
  "symbols_in_volume": [
   "numpy.sqrt"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._variance": {
  "lineno": 201,
  "symbols_in_volume": [
   "tensorflow.compat.v2.square"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform.high": {
  "lineno": 130,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform.low": {
  "lineno": 125,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform.range": {
  "lineno": 135,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform._kl_uniform_uniform": {
  "lineno": 219,
  "symbols_in_volume": [
   "numpy.inf",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest._testUniformSampleMultiDimensional": {
  "lineno": 159,
  "symbols_in_volume": [
   "numpy.any",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Uniform",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testFullyReparameterized": {
  "lineno": 259,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient",
   "tensorflow_probability.python.distributions.Uniform",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testModifiedVariableAssertion": {
  "lineno": 335,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.python.distributions.Uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformAssertMaxGtMin": {
  "lineno": 130,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow_probability.python.distributions.Uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformBroadcasting": {
  "lineno": 232,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow_probability.python.distributions.Uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformCDF": {
  "lineno": 90,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.log",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformCDF._expected_cdf": {
  "lineno": 100,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformEntropy": {
  "lineno": 122,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.log",
   "tensorflow_probability.python.distributions.Uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformFloat64": {
  "lineno": 269,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float64",
   "tensorflow_probability.python.distributions.Uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformMean": {
  "lineno": 188,
  "symbols_in_volume": [
   "scipy.stats.uniform",
   "tensorflow_probability.python.distributions.Uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformNans": {
  "lineno": 209,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.is_nan",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.python.distributions.Uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformPDF": {
  "lineno": 45,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.log",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformPDF._expected_pdf": {
  "lineno": 54,
  "symbols_in_volume": [
   "numpy.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformPDFWithScalarEndpoint": {
  "lineno": 79,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformQuantile": {
  "lineno": 112,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linspace",
   "tensorflow.compat.v2.reshape",
   "tensorflow_probability.python.distributions.Uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformRange": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformSample": {
  "lineno": 138,
  "symbols_in_volume": [
   "numpy.any",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Uniform",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformSamplePdf": {
  "lineno": 225,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_all",
   "tensorflow_probability.python.distributions.Uniform",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformSampleWithShape": {
  "lineno": 241,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Uniform",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformShape": {
  "lineno": 69,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformStd": {
  "lineno": 202,
  "symbols_in_volume": [
   "scipy.stats.uniform",
   "tensorflow_probability.python.distributions.Uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformUniformKLFinite": {
  "lineno": 285,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.array",
   "numpy.log",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.distributions.Uniform",
   "tensorflow_probability.python.distributions.kl_divergence",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformUniformKLInfinite": {
  "lineno": 313,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.inf",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.distributions.Uniform",
   "tensorflow_probability.python.distributions.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformVariance": {
  "lineno": 195,
  "symbols_in_volume": [
   "scipy.stats.uniform",
   "tensorflow_probability.python.distributions.Uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess": {
  "lineno": 63,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess.__init__": {
  "lineno": 489,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.linalg.LinearOperatorFullMatrix",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess._compute_posterior_predictive_params": {
  "lineno": 652,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.LinearOperatorFullMatrix",
   "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
   "tensorflow.compat.v2.linalg.cholesky"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess._covariance": {
  "lineno": 719,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess.index_points": {
  "lineno": 691,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess.inducing_index_points": {
  "lineno": 695,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess.jitter": {
  "lineno": 715,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess.kernel": {
  "lineno": 687,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess.mean_fn": {
  "lineno": 683,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess.observation_noise_variance": {
  "lineno": 707,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess.optimal_variational_posterior": {
  "lineno": 856,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.linalg.LinearOperatorFullMatrix",
   "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.math.reciprocal",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess.predictive_noise_variance": {
  "lineno": 711,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess.surrogate_posterior_kl_divergence_prior": {
  "lineno": 722,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess",
   "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess.variational_inducing_observations_loc": {
  "lineno": 699,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess.variational_inducing_observations_scale": {
  "lineno": 703,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess.variational_loss": {
  "lineno": 750,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.linalg.LinearOperatorFullMatrix",
   "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.python.distributions.independent.Independent",
   "tensorflow_probability.python.distributions.normal.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process._add_diagonal_shift": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.linalg.set_diag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process._solve_cholesky_factored_system": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process._solve_cholesky_factored_system_vec": {
  "lineno": 52,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process_test.VariationalGaussianProcessDynamicTest": {
  "lineno": 265,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process_test.VariationalGaussianProcessStaticTest": {
  "lineno": 259,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process_test._VariationalGaussianProcessTest": {
  "lineno": 44,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process_test._VariationalGaussianProcessTest.testOptimalVariationalShapes": {
  "lineno": 125,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.expand_dims",
   "numpy.float64",
   "numpy.linspace",
   "numpy.meshgrid",
   "numpy.reshape",
   "numpy.sin",
   "numpy.stack",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.distributions.VariationalGaussianProcess.optimal_variational_posterior",
   "tensorflow_probability.positive_semidefinite_kernels.ExponentiatedQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process_test._VariationalGaussianProcessTest.testShapes": {
  "lineno": 46,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.expand_dims",
   "numpy.eye",
   "numpy.float64",
   "numpy.linspace",
   "numpy.meshgrid",
   "numpy.reshape",
   "numpy.stack",
   "numpy.zeros",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.distributions.VariationalGaussianProcess",
   "tensorflow_probability.positive_semidefinite_kernels.ExponentiatedQuadratic",
   "tensorflow_probability.python.internal.tensorshape_util.dims",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process_test._VariationalGaussianProcessTest.testVariationalLossShapes": {
  "lineno": 182,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.expand_dims",
   "numpy.eye",
   "numpy.float64",
   "numpy.linspace",
   "numpy.meshgrid",
   "numpy.reshape",
   "numpy.sin",
   "numpy.stack",
   "numpy.zeros",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.distributions.VariationalGaussianProcess",
   "tensorflow_probability.positive_semidefinite_kernels.ExponentiatedQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process_test._np_kernel_matrix_fn": {
  "lineno": 34,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.expand_dims"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture": {
  "lineno": 202,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture.__init__": {
  "lineno": 315,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator",
   "tensorflow_probability.python.distributions.categorical.Categorical",
   "tensorflow_probability.python.distributions.distribution",
   "tensorflow_probability.python.internal.distribution_util.maybe_check_scalar_distribution",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies",
   "tensorflow_probability.python.internal.dtype_util.base_dtype",
   "tensorflow_probability.python.internal.dtype_util.name",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture._batch_shape": {
  "lineno": 523,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture._batch_shape_tensor": {
  "lineno": 520,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture._covariance": {
  "lineno": 627,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture._covariance_of_mean_given_quadrature_component": {
  "lineno": 722,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.square"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture._event_shape": {
  "lineno": 529,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture._event_shape_tensor": {
  "lineno": 526,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture._expand_base_distribution_mean": {
  "lineno": 739,
  "symbols_in_volume": [
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.tile",
   "tensorflow_probability.python.internal.tensorshape_util.concatenate",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture._expand_mix_distribution_probs": {
  "lineno": 751,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.tensorshape_util.rank",
   "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture._log_prob": {
  "lineno": 599,
  "symbols_in_volume": [
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reduce_logsumexp",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture._mean": {
  "lineno": 615,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture._mean_of_covariance_given_quadrature_component": {
  "lineno": 649,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow.compat.v2.linalg.LinearOperatorFullMatrix",
   "tensorflow.compat.v2.linalg.LinearOperatorIdentity",
   "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.square",
   "tensorflow.python.ops.linalg.linear_operator_addition.add_operators"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture._sample_n": {
  "lineno": 532,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.distribution_util.pick_vector",
   "tensorflow_probability.python.internal.tensorshape_util.as_list",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
   "tensorflow_probability.python.internal.tensorshape_util.num_elements",
   "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture._variance": {
  "lineno": 643,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture.distribution": {
  "lineno": 500,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture.endpoint_affine": {
  "lineno": 510,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture.grid": {
  "lineno": 505,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture.interpolated_affine": {
  "lineno": 515,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture.mixture_distribution": {
  "lineno": 495,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.add": {
  "lineno": 938,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.concat_vectors": {
  "lineno": 930,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.get_static_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.determine_batch_event_shapes": {
  "lineno": 808,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.broadcast_static_shape",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.determine_batch_event_shapes._set_event_shape": {
  "lineno": 818,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.interpolate_loc": {
  "lineno": 847,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.interpolate_scale": {
  "lineno": 876,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.python.ops.linalg.linear_operator_addition.add_operators",
   "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.linop_scale": {
  "lineno": 893,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow.compat.v2.linalg.LinearOperatorIdentity",
   "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
   "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.linop_scale.scaled_identity": {
  "lineno": 902,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.maybe_check_quadrature_param": {
  "lineno": 770,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.assert_util.assert_rank_at_least",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies",
   "tensorflow_probability.python.internal.tensorshape_util.rank",
   "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.quadrature_scheme_softmaxnormal_gauss_hermite": {
  "lineno": 46,
  "symbols_in_volume": [
   "numpy.linalg.norm",
   "numpy.polynomial.hermite.hermgauss",
   "numpy.sqrt",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow_probability.python.internal.distribution_util.pad",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.quadrature_scheme_softmaxnormal_quantiles": {
  "lineno": 108,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.fill",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.distributions.normal.Normal",
   "tensorflow_probability.python.internal.dtype_util.base_dtype",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.quadrature_scheme_softmaxnormal_quantiles._compute_quantiles": {
  "lineno": 168,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.linspace",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.transpose",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.bijectors.softmax_centered.SoftmaxCentered",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.quadrature_scheme_softmaxnormal_quantiles._get_batch_ndims": {
  "lineno": 151,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.quadrature_scheme_softmaxnormal_quantiles._get_final_shape": {
  "lineno": 159,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.softmax": {
  "lineno": 952,
  "symbols_in_volume": [
   "numpy.int",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.math.softmax",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.vec_osquare": {
  "lineno": 947,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test": {
  "lineno": null,
  "symbols_in_volume": [
   "numpy.random.RandomState",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.VectorDiffeomixtureTest": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase",
   "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.VectorDiffeomixtureTest.testConcentrationLocControlsHowMuchWeightIsOnEachComponent": {
  "lineno": 249,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.VectorDiffeomixture"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.VectorDiffeomixtureTest.testMeanCovarianceBatch": {
  "lineno": 315,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "numpy.stack",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.VectorDiffeomixture"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.VectorDiffeomixtureTest.testMeanCovarianceNoBatch": {
  "lineno": 187,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.VectorDiffeomixture"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.VectorDiffeomixtureTest.testMeanCovarianceNoBatchUncenteredNonStandardBase": {
  "lineno": 291,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.VectorDiffeomixture"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.VectorDiffeomixtureTest.testSampleProbConsistentBroadcastMixBatch": {
  "lineno": 110,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "numpy.stack",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.VectorDiffeomixture"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.VectorDiffeomixtureTest.testSampleProbConsistentBroadcastMixNoBatch": {
  "lineno": 39,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.VectorDiffeomixture"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.VectorDiffeomixtureTest.testSampleProbConsistentBroadcastMixNonStandardBase": {
  "lineno": 77,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.VectorDiffeomixture"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.VectorDiffeomixtureTest.testSampleProbConsistentBroadcastMixTwoBatchDims": {
  "lineno": 151,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.VectorDiffeomixture"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.VectorDiffeomixtureTest.testSampleProbConsistentQuadrature": {
  "lineno": 342,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.VectorDiffeomixture"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.VectorDiffeomixtureTest.testTemperatureControlsHowMuchThisLooksLikeDiscreteMixture": {
  "lineno": 211,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.float32",
   "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.VectorDiffeomixture"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag.VectorExponentialDiag": {
  "lineno": 31,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag.VectorExponentialDiag.__init__": {
  "lineno": 118,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.distribution_util.make_diag_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag.VectorExponentialDiag._params_event_ndims": {
  "lineno": 197,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.VectorExponentialDiagTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.VectorExponentialDiagTest.setUp": {
  "lineno": 36,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.VectorExponentialDiagTest.testCovariance": {
  "lineno": 111,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.diag",
   "numpy.float32",
   "numpy.ones",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.distributions.VectorExponentialDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.VectorExponentialDiagTest.testMean": {
  "lineno": 51,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.VectorExponentialDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.VectorExponentialDiagTest.testMeanWithBroadcastLoc": {
  "lineno": 63,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.VectorExponentialDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.VectorExponentialDiagTest.testMode": {
  "lineno": 57,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.VectorExponentialDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.VectorExponentialDiagTest.testSample": {
  "lineno": 69,
  "symbols_in_volume": [
   "numpy.cov",
   "tensorflow.compat.v2.linalg.diag",
   "tensorflow_probability.python.distributions.VectorExponentialDiag",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.VectorExponentialDiagTest.testSampleWithBroadcastScale": {
  "lineno": 87,
  "symbols_in_volume": [
   "numpy.matmul",
   "numpy.ones",
   "numpy.zeros",
   "tensorflow.compat.v2.linalg.diag",
   "tensorflow_probability.python.distributions.VectorExponentialDiag",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.VectorExponentialDiagTest.testScalarParams": {
  "lineno": 39,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.VectorExponentialDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.VectorExponentialDiagTest.testSingularScaleRaises": {
  "lineno": 80,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.VectorExponentialDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.VectorExponentialDiagTest.testStddev": {
  "lineno": 150,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.ones",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.VectorExponentialDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.VectorExponentialDiagTest.testVariance": {
  "lineno": 135,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.ones",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.VectorExponentialDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.VectorExponentialDiagTest.testVectorParams": {
  "lineno": 45,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.VectorExponentialDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator": {
  "lineno": 48,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator.__init__": {
  "lineno": 140,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator",
   "tensorflow_probability.python.distributions.exponential.Exponential",
   "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale",
   "tensorflow_probability.python.internal.dtype_util.is_floating"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator._covariance": {
  "lineno": 235,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.diag",
   "tensorflow.compat.v2.square",
   "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator._log_prob": {
  "lineno": 213,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator._mean": {
  "lineno": 221,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.ones"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator._mode": {
  "lineno": 269,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator._mode_mean_shape": {
  "lineno": 278,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow_probability.python.internal.tensorshape_util.concatenate",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator._prob": {
  "lineno": 217,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator._stddev": {
  "lineno": 257,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.linalg.LinearOperatorLowRankUpdate",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator._variance": {
  "lineno": 247,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.LinearOperatorLowRankUpdate",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.square",
   "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator.loc": {
  "lineno": 203,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator.scale": {
  "lineno": 208,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag.VectorLaplaceDiag": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag.VectorLaplaceDiag.__init__": {
  "lineno": 154,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.distribution_util.make_diag_scale",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag.VectorLaplaceDiag._params_event_ndims": {
  "lineno": 236,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest.setUp": {
  "lineno": 37,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest.testCovariance": {
  "lineno": 118,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.diag",
   "numpy.float32",
   "numpy.ones",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.VectorLaplaceDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest.testDistWithBatchShapeOneThenTransformedThroughSoftplus": {
  "lineno": 53,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.bijectors.Softplus",
   "tensorflow_probability.python.distributions.TransformedDistribution",
   "tensorflow_probability.python.distributions.VectorLaplaceDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest.testMean": {
  "lineno": 66,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.VectorLaplaceDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest.testMeanWithBroadcastLoc": {
  "lineno": 72,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.VectorLaplaceDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest.testSample": {
  "lineno": 78,
  "symbols_in_volume": [
   "numpy.cov",
   "tensorflow.compat.v2.linalg.diag",
   "tensorflow_probability.python.distributions.VectorLaplaceDiag",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest.testSampleWithBroadcastScale": {
  "lineno": 96,
  "symbols_in_volume": [
   "numpy.matmul",
   "numpy.ones",
   "numpy.zeros",
   "tensorflow.compat.v2.linalg.diag",
   "tensorflow_probability.python.distributions.VectorLaplaceDiag",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest.testScalarParams": {
  "lineno": 41,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.VectorLaplaceDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest.testSingularScaleRaises": {
  "lineno": 89,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.VectorLaplaceDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest.testStddev": {
  "lineno": 156,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.ones",
   "numpy.sqrt",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.VectorLaplaceDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest.testVariance": {
  "lineno": 141,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.ones",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.VectorLaplaceDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest.testVectorParams": {
  "lineno": 47,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.VectorLaplaceDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator": {
  "lineno": 54,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator.__init__": {
  "lineno": 157,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator",
   "tensorflow_probability.python.distributions.laplace.Laplace",
   "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale",
   "tensorflow_probability.python.internal.dtype_util.is_floating"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator._covariance": {
  "lineno": 257,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.diag",
   "tensorflow.compat.v2.square",
   "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator._log_prob": {
  "lineno": 230,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator._mean": {
  "lineno": 238,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.tensorshape_util.concatenate",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator._mode": {
  "lineno": 293,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator._prob": {
  "lineno": 234,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator._stddev": {
  "lineno": 281,
  "symbols_in_volume": [
   "numpy.sqrt",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.linalg.LinearOperatorLowRankUpdate",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator._variance": {
  "lineno": 271,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.LinearOperatorLowRankUpdate",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.square",
   "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator.loc": {
  "lineno": 220,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator.scale": {
  "lineno": 225,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag.VectorSinhArcsinhDiag": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag.VectorSinhArcsinhDiag.__init__": {
  "lineno": 99,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.bijectors.affine",
   "tensorflow_probability.python.bijectors.affine.Affine",
   "tensorflow_probability.python.bijectors.chain.Chain",
   "tensorflow_probability.python.bijectors.sinh_arcsinh.SinhArcsinh",
   "tensorflow_probability.python.distributions.normal.Normal",
   "tensorflow_probability.python.internal.distribution_util.make_diag_scale",
   "tensorflow_probability.python.internal.distribution_util.maybe_check_scalar_distribution",
   "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag.VectorSinhArcsinhDiag.loc": {
  "lineno": 238,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag.VectorSinhArcsinhDiag.scale": {
  "lineno": 243,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag.VectorSinhArcsinhDiag.skewness": {
  "lineno": 253,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag.VectorSinhArcsinhDiag.tailweight": {
  "lineno": 248,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test": {
  "lineno": null,
  "symbols_in_volume": [
   "numpy.random.RandomState",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.VectorSinhArcsinhDiagTest": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase",
   "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.VectorSinhArcsinhDiagTest.test_consistency_random_parameters_no_batch_dims": {
  "lineno": 223,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow_probability.python.distributions.VectorSinhArcsinhDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.VectorSinhArcsinhDiagTest.test_consistency_random_parameters_with_batch_dim": {
  "lineno": 205,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow_probability.python.distributions.VectorSinhArcsinhDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.VectorSinhArcsinhDiagTest.test_default_is_same_as_normal": {
  "lineno": 38,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.distributions.VectorSinhArcsinhDiag",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.VectorSinhArcsinhDiagTest.test_passing_in_laplace_plus_defaults_is_same_as_laplace": {
  "lineno": 68,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow_probability.python.distributions.Laplace",
   "tensorflow_probability.python.distributions.VectorLaplaceDiag",
   "tensorflow_probability.python.distributions.VectorSinhArcsinhDiag",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.VectorSinhArcsinhDiagTest.test_pdf_reflected_for_negative_skewness": {
  "lineno": 241,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "tensorflow_probability.python.distributions.VectorSinhArcsinhDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.VectorSinhArcsinhDiagTest.test_positive_skewness_moves_mean_to_the_right": {
  "lineno": 189,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.testing.assert_array_less",
   "tensorflow_probability.python.distributions.VectorSinhArcsinhDiag",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.VectorSinhArcsinhDiagTest.test_tailweight_large_gives_more_outliers_than_normal": {
  "lineno": 144,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.percentile",
   "numpy.testing.assert_array_less",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.distributions.VectorSinhArcsinhDiag",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.VectorSinhArcsinhDiagTest.test_tailweight_small_gives_fewer_outliers_than_normal": {
  "lineno": 99,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.percentile",
   "numpy.testing.assert_array_less",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.distributions.VectorSinhArcsinhDiag",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.vector_student_t._VectorStudentT": {
  "lineno": 30,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.vector_student_t._VectorStudentT.__init__": {
  "lineno": 123,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.bijectors.affine",
   "tensorflow_probability.python.bijectors.affine.Affine",
   "tensorflow_probability.python.bijectors.affine.dtype",
   "tensorflow_probability.python.bijectors.affine.scale",
   "tensorflow_probability.python.bijectors.affine.shift",
   "tensorflow_probability.python.distributions.student_t.StudentT",
   "tensorflow_probability.python.internal.distribution_util.pick_vector",
   "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t._VectorStudentT.df": {
  "lineno": 228,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t._VectorStudentT.loc": {
  "lineno": 233,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t._VectorStudentT.scale": {
  "lineno": 238,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test.VectorStudentTTest": {
  "lineno": 74,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test.VectorStudentTTest.setUp": {
  "lineno": 77,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test.VectorStudentTTest.testProbDynamic": {
  "lineno": 138,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.concatenate",
   "numpy.diag",
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.distributions.vector_student_t._VectorStudentT"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test.VectorStudentTTest.testProbNonScalarBaseDistributionScalarTransform": {
  "lineno": 248,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.diag",
   "numpy.float32",
   "numpy.tile",
   "tensorflow.compat.v2.newaxis",
   "tensorflow_probability.python.distributions.vector_student_t._VectorStudentT"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test.VectorStudentTTest.testProbNonScalarBaseDistributionScalarTransformDynamic": {
  "lineno": 275,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.diag",
   "numpy.float32",
   "numpy.tile",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.newaxis",
   "tensorflow_probability.python.distributions.vector_student_t._VectorStudentT"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test.VectorStudentTTest.testProbScalarBaseDistributionNonScalarTransform": {
  "lineno": 175,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.concatenate",
   "numpy.diag",
   "numpy.float32",
   "numpy.tile",
   "tensorflow_probability.python.distributions.vector_student_t._VectorStudentT"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test.VectorStudentTTest.testProbScalarBaseDistributionNonScalarTransformDynamic": {
  "lineno": 209,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.concatenate",
   "numpy.diag",
   "numpy.float32",
   "numpy.tile",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.distributions.vector_student_t._VectorStudentT"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test.VectorStudentTTest.testProbStatic": {
  "lineno": 106,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.concatenate",
   "numpy.diag",
   "numpy.float32",
   "tensorflow_probability.python.distributions.vector_student_t._VectorStudentT"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test.VectorStudentTTest.testProbStaticScalar": {
  "lineno": 81,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.diag",
   "numpy.float32",
   "tensorflow_probability.python.distributions.vector_student_t._VectorStudentT"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test._FakeVectorStudentT": {
  "lineno": 33,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test._FakeVectorStudentT.__init__": {
  "lineno": 47,
  "symbols_in_volume": [
   "numpy.asarray"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test._FakeVectorStudentT.log_prob": {
  "lineno": 52,
  "symbols_in_volume": [
   "numpy.concatenate"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test._FakeVectorStudentT.log_prob._compute": {
  "lineno": 53,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.diag",
   "numpy.log",
   "numpy.log1p",
   "numpy.matrix",
   "numpy.pi",
   "numpy.sum",
   "scipy.linalg.solve_triangular",
   "scipy.special.gammaln"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test._FakeVectorStudentT.prob": {
  "lineno": 70,
  "symbols_in_volume": [
   "numpy.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises.__init__": {
  "lineno": 99,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._batch_shape": {
  "lineno": 172,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._batch_shape_tensor": {
  "lineno": 166,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.broadcast_shape",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._cdf": {
  "lineno": 200,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.internal.prefer_static.broadcast_shape",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._entropy": {
  "lineno": 210,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.bessel_i0e",
   "tensorflow.compat.v2.math.bessel_i1e",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._event_shape": {
  "lineno": 178,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._event_shape_tensor": {
  "lineno": 175,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._log_prob": {
  "lineno": 181,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.bessel_i0e",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._log_unnormalized_prob": {
  "lineno": 189,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cos"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._mean": {
  "lineno": 220,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._mode": {
  "lineno": 227,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._param_shapes": {
  "lineno": 146,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._parameter_control_dependencies": {
  "lineno": 268,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_non_negative",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._params_event_ndims": {
  "lineno": 152,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._prob": {
  "lineno": 193,
  "symbols_in_volume": [
   "numpy.pi",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.bessel_i0e"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._sample_n": {
  "lineno": 245,
  "symbols_in_volume": [
   "numpy.finfo",
   "numpy.pi",
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.maximum",
   "tensorflow.compat.v2.round",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._variance": {
  "lineno": 230,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.bessel_i0e",
   "tensorflow.compat.v2.math.bessel_i1e",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._z": {
  "lineno": 240,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises.concentration": {
  "lineno": 161,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises.loc": {
  "lineno": 156,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises._kl_von_mises_von_mises": {
  "lineno": 279,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.cos",
   "tensorflow.compat.v2.math.bessel_i0e",
   "tensorflow.compat.v2.math.bessel_i1e",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises._von_mises_cdf_normal": {
  "lineno": 457,
  "symbols_in_volume": [
   "tensorflow_probability.python.math.gradient.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises._von_mises_cdf_normal.cdf_func": {
  "lineno": 460,
  "symbols_in_volume": [
   "numpy.pi",
   "numpy.sqrt",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.math.bessel_i0e",
   "tensorflow.compat.v2.sin",
   "tensorflow_probability.python.distributions.normal.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises._von_mises_cdf_series": {
  "lineno": 410,
  "symbols_in_volume": [
   "numpy.pi",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.clip_by_value",
   "tensorflow.compat.v2.while_loop",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises._von_mises_cdf_series.loop_body": {
  "lineno": 416,
  "symbols_in_volume": [
   "tensorflow.compat.v2.sin"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.random_von_mises": {
  "lineno": 484,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.random_von_mises.rejection_sample_with_gradient": {
  "lineno": 515,
  "symbols_in_volume": [
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.custom_gradient",
   "tensorflow.compat.v2.float16",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.math.acos",
   "tensorflow.compat.v2.reduce_all",
   "tensorflow.compat.v2.sign",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.while_loop",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.random_von_mises.rejection_sample_with_gradient.grad": {
  "lineno": 597,
  "symbols_in_volume": [
   "numpy.pi",
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.cos",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.bessel_i0e",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.prefer_static.shape",
   "tensorflow_probability.python.math.gradient.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.random_von_mises.rejection_sample_with_gradient.loop_body": {
  "lineno": 561,
  "symbols_in_volume": [
   "numpy.pi",
   "tensorflow.compat.v2.cos",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.von_mises_cdf": {
  "lineno": 340,
  "symbols_in_volume": [
   "numpy.pi",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.custom_gradient",
   "tensorflow.compat.v2.round",
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.von_mises_cdf.grad": {
  "lineno": 402,
  "symbols_in_volume": [
   "numpy.pi",
   "tensorflow.compat.v2.cos",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.bessel_i0e"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher": {
  "lineno": 77,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher.__init__": {
  "lineno": 136,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.linalg.norm",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.assert_util.assert_greater",
   "tensorflow_probability.python.internal.assert_util.assert_less_equal",
   "tensorflow_probability.python.internal.assert_util.assert_near",
   "tensorflow_probability.python.internal.assert_util.assert_non_negative",
   "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._batch_shape": {
  "lineno": 237,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape",
   "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._batch_shape_tensor": {
  "lineno": 233,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._covariance": {
  "lineno": 317,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.linalg.eye",
   "tensorflow.compat.v2.linalg.set_diag",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._event_shape": {
  "lineno": 245,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._event_shape_tensor": {
  "lineno": 242,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._log_normalization": {
  "lineno": 260,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.math.lgamma",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._log_prob": {
  "lineno": 249,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._log_unnormalized_prob": {
  "lineno": 253,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._maybe_assert_valid_sample": {
  "lineno": 281,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.linalg.norm",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.assert_util.assert_near"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._mean": {
  "lineno": 303,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._mode": {
  "lineno": 298,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._params_event_ndims": {
  "lineno": 219,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._rotate": {
  "lineno": 342,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.math.l2_normalize",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._sample_3d": {
  "lineno": 352,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.debugging.check_numerics",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.reduce_logsumexp",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._sample_n": {
  "lineno": 376,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.debugging.check_numerics",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.linalg.norm",
   "tensorflow.compat.v2.math.l2_normalize",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.math.top_k",
   "tensorflow.compat.v2.maximum",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.while_loop",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.beta",
   "tensorflow_probability.python.distributions.beta.Beta",
   "tensorflow_probability.python.internal.assert_util.assert_greater_equal",
   "tensorflow_probability.python.internal.assert_util.assert_less",
   "tensorflow_probability.python.internal.assert_util.assert_less_equal",
   "tensorflow_probability.python.internal.assert_util.assert_near",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._sample_n.body_fn": {
  "lineno": 420,
  "symbols_in_volume": [
   "tensorflow.compat.v2.debugging.check_numerics",
   "tensorflow.compat.v2.logical_and",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.distributions.beta.sample"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._sample_n.cond_fn": {
  "lineno": 416,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_any"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher.concentration": {
  "lineno": 228,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher.mean_direction": {
  "lineno": 223,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher._bessel_ive": {
  "lineno": 37,
  "symbols_in_volume": [
   "numpy.pi",
   "numpy.sqrt",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.debugging.check_numerics",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.bessel_i0e",
   "tensorflow.compat.v2.math.bessel_i1e",
   "tensorflow.compat.v2.math.rsqrt",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.VonMisesFisherTest": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase",
   "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.VonMisesFisherTest._verifyCovariance": {
  "lineno": 238,
  "symbols_in_volume": [
   "numpy.cov",
   "numpy.reshape",
   "numpy.zeros",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.debugging.check_numerics",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.VonMisesFisherTest._verifyPdfWithNumpy": {
  "lineno": 131,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.linalg.norm",
   "numpy.log",
   "numpy.pi",
   "numpy.random.randn",
   "numpy.sum",
   "numpy.where",
   "scipy.special.gammaln",
   "scipy.special.ive",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.debugging.check_numerics",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.internal.tensorshape_util.as_list",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.VonMisesFisherTest._verifySampleAndPdfConsistency": {
  "lineno": 171,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.percentile",
   "numpy.pi",
   "numpy.sum",
   "numpy.where",
   "numpy.zeros_like",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.debugging.check_numerics",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.math.betainc",
   "tensorflow.compat.v2.math.lgamma",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.reduce_logsumexp",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.VonMisesFisherTest.testBesselIve": {
  "lineno": 40,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.logspace",
   "scipy.special.ive",
   "tensorflow.compat.v2.errors.InvalidArgumentError",
   "tensorflow_probability.python.distributions.von_mises_fisher._bessel_ive"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.VonMisesFisherTest.testInternalShapeInference": {
  "lineno": 299,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.l2_normalize",
   "tensorflow_probability.distributions.VonMisesFisher"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.VonMisesFisherTest.testSampleAndPdfConsistency2d": {
  "lineno": 255,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.l2_normalize",
   "tensorflow_probability.distributions.VonMisesFisher"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.VonMisesFisherTest.testSampleAndPdfConsistency3d": {
  "lineno": 265,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.l2_normalize",
   "tensorflow_probability.distributions.VonMisesFisher"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.VonMisesFisherTest.testSampleAndPdfConsistency4d": {
  "lineno": 275,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.l2_normalize",
   "tensorflow_probability.distributions.VonMisesFisher"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.VonMisesFisherTest.testSampleAndPdfConsistency5d": {
  "lineno": 285,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.l2_normalize",
   "tensorflow_probability.distributions.VonMisesFisher"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.VonMisesFisherTest.testSampleMeanDir2d": {
  "lineno": 49,
  "symbols_in_volume": [
   "numpy.linalg.norm",
   "numpy.ones_like",
   "numpy.round",
   "numpy.sort",
   "numpy.zeros_like",
   "tensorflow.compat.v2.math.l2_normalize",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.distributions.VonMisesFisher",
   "tensorflow_probability.python.internal.tensorshape_util.as_list",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.VonMisesFisherTest.testSampleMeanDir3d": {
  "lineno": 90,
  "symbols_in_volume": [
   "numpy.linalg.norm",
   "numpy.ones_like",
   "numpy.round",
   "numpy.sort",
   "numpy.zeros_like",
   "tensorflow.compat.v2.math.l2_normalize",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.distributions.VonMisesFisher",
   "tensorflow_probability.python.internal.tensorshape_util.as_list",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.von_mises_test.VonMisesTestDynamicShapeFloat64": {
  "lineno": 400,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float64",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.von_mises_test.VonMisesTestStaticShapeFloat32": {
  "lineno": 395,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.make_tensor": {
  "lineno": 41,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.cast"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testAssertsNonNegativeConcentration": {
  "lineno": 385,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testInvalidConcentration": {
  "lineno": 59,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesCdf": {
  "lineno": 102,
  "symbols_in_volume": [
   "numpy.linspace",
   "numpy.logspace",
   "numpy.reshape",
   "scipy.stats.vonmises.cdf"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesCdfGradient": {
  "lineno": 119,
  "symbols_in_volume": [
   "numpy.logspace",
   "tensorflow.compat.v1.test.compute_gradient_error",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesCdfGradientSimple": {
  "lineno": 144,
  "symbols_in_volume": [
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesCdfUniform": {
  "lineno": 112,
  "symbols_in_volume": [
   "numpy.linspace",
   "numpy.pi"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesEntropy": {
  "lineno": 170,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.vonmises.entropy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesEntropyUniform": {
  "lineno": 178,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.pi"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesLogPdf": {
  "lineno": 67,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.vonmises.logpdf"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesLogPdfUniform": {
  "lineno": 78,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.log",
   "numpy.pi"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesMean": {
  "lineno": 183,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesMode": {
  "lineno": 209,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesPdf": {
  "lineno": 85,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.stats.vonmises.pdf"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesPdfUniform": {
  "lineno": 95,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.pi"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesSampleAverageGradient": {
  "lineno": 329,
  "symbols_in_volume": [
   "numpy.logspace",
   "numpy.ones",
   "tensorflow_probability.math.value_and_gradient",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesSampleAverageGradient.loss": {
  "lineno": 335,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesSampleCircularVarianceGradient": {
  "lineno": 348,
  "symbols_in_volume": [
   "numpy.logspace",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesSampleCircularVarianceGradient.analytical_loss": {
  "lineno": 362,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.bessel_i0e",
   "tensorflow.compat.v2.math.bessel_i1e"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesSampleCircularVarianceGradient.loss": {
  "lineno": 353,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cos",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesSampleExtremeConcentration": {
  "lineno": 374,
  "symbols_in_volume": [
   "numpy.finfo",
   "numpy.nan",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesSampleKsTest": {
  "lineno": 286,
  "symbols_in_volume": [
   "numpy.logspace",
   "scipy.stats.kstest",
   "scipy.stats.vonmises",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesSampleMoments": {
  "lineno": 241,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.atan2",
   "tensorflow.compat.v2.cos",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.sin",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesSampleUniformKsTest": {
  "lineno": 308,
  "symbols_in_volume": [
   "numpy.linspace",
   "numpy.pi",
   "scipy.stats.kstest",
   "scipy.stats.uniform.cdf",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesSampleVarianceUniform": {
  "lineno": 270,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cos",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesShape": {
  "lineno": 46,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesStddev": {
  "lineno": 199,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.sqrt",
   "numpy.zeros_like",
   "scipy.special.i0",
   "scipy.special.i1"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesVariance": {
  "lineno": 190,
  "symbols_in_volume": [
   "numpy.array",
   "scipy.special.i0",
   "scipy.special.i1"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesVonMisesKL": {
  "lineno": 217,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.zeros",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.wishart.Wishart": {
  "lineno": 438,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.wishart.Wishart.__init__": {
  "lineno": 494,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.distribution_util.assert_symmetric",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart.Wishart._params_event_ndims": {
  "lineno": 577,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator.__init__": {
  "lineno": 69,
  "symbols_in_volume": [
   "numpy.any",
   "numpy.asarray",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.assert_util.assert_less_equal",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies",
   "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
   "tensorflow_probability.python.internal.dtype_util.is_floating",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._batch_shape": {
  "lineno": 206,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._batch_shape_tensor": {
  "lineno": 202,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._entropy": {
  "lineno": 365,
  "symbols_in_volume": [
   "math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._event_shape": {
  "lineno": 198,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._event_shape_tensor": {
  "lineno": 194,
  "symbols_in_volume": [
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._log_prob": {
  "lineno": 268,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.maximum",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size",
   "tensorflow.compat.v2.square",
   "tensorflow.compat.v2.transpose",
   "tensorflow_probability.python.internal.tensorshape_util.rank",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._mean": {
  "lineno": 373,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.sqrt"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._mode": {
  "lineno": 392,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._multi_digamma": {
  "lineno": 431,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.digamma",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._multi_gamma_sequence": {
  "lineno": 415,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.linspace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._multi_lgamma": {
  "lineno": 424,
  "symbols_in_volume": [
   "math.log",
   "math.pi",
   "tensorflow.compat.v2.math.lgamma",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._prob": {
  "lineno": 362,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._sample_n": {
  "lineno": 210,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.linalg.band_part",
   "tensorflow.compat.v2.linalg.set_diag",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.random.gamma",
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.transpose",
   "tensorflow_probability.python.internal.dtype_util.base_dtype",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._square_scale_operator": {
  "lineno": 168,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._variance": {
  "lineno": 382,
  "symbols_in_volume": [
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.square"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator.df": {
  "lineno": 163,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator.dimension": {
  "lineno": 189,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator.input_output_cholesky": {
  "lineno": 184,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator.log_normalization": {
  "lineno": 408,
  "symbols_in_volume": [
   "math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator.mean_log_det": {
  "lineno": 401,
  "symbols_in_volume": [
   "math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator.scale": {
  "lineno": 172,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator.scale_operator": {
  "lineno": 179,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest": {
  "lineno": 56,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testBatchShape": {
  "lineno": 293,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.distributions.Wishart"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testEntropy": {
  "lineno": 59,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Wishart"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testEventShape": {
  "lineno": 315,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.distributions.Wishart"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testLogProbBroadcastOverDfInsideMixture": {
  "lineno": 444,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.float32",
   "numpy.matmul",
   "numpy.random.randn",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.MixtureSameFamily",
   "tensorflow_probability.python.distributions.Wishart"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testLogProbBroadcastsX": {
  "lineno": 421,
  "symbols_in_volume": [
   "numpy.concatenate",
   "numpy.float32",
   "numpy.matmul",
   "numpy.ones",
   "numpy.random.randn",
   "numpy.reshape",
   "tensorflow_probability.python.distributions.Wishart"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testLogProbEmptyDist": {
  "lineno": 142,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Wishart"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testMean": {
  "lineno": 96,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Wishart"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testMeanBroadcast": {
  "lineno": 102,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.newaxis",
   "tensorflow_probability.python.distributions.Wishart"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testMeanLogDetAndLogNormalizingConstant": {
  "lineno": 70,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Wishart"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testMeanLogDetAndLogNormalizingConstant.entropy_alt": {
  "lineno": 72,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testMode": {
  "lineno": 111,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Wishart"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testParamBroadcasting": {
  "lineno": 83,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.distributions.Wishart",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testProb": {
  "lineno": 218,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.reshape",
   "tensorflow_probability.python.distributions.Wishart"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testSample": {
  "lineno": 173,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.square",
   "tensorflow_probability.python.distributions.Wishart",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testSampleBroadcasts": {
  "lineno": 402,
  "symbols_in_volume": [
   "numpy.concatenate",
   "numpy.float32",
   "numpy.reshape",
   "tensorflow_probability.python.distributions.Wishart",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testSampleMultipleTimes": {
  "lineno": 195,
  "symbols_in_volume": [
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow_probability.python.distributions.Wishart",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testSampleWithSameSeed": {
  "lineno": 146,
  "symbols_in_volume": [
   "numpy.testing.assert_array_less",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow_probability.python.distributions.Wishart",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testSamplingEmptyDist": {
  "lineno": 138,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Wishart"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testStaticAssertNonFlatDfDoesntRaise": {
  "lineno": 460,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Wishart"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testStaticAsserts": {
  "lineno": 386,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.int32",
   "tensorflow_probability.python.distributions.Wishart"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testStd": {
  "lineno": 117,
  "symbols_in_volume": [
   "numpy.sqrt",
   "tensorflow_probability.python.distributions.Wishart"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testValidateArgs": {
  "lineno": 337,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.asarray",
   "numpy.float32",
   "numpy.ones",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.errors.InvalidArgumentError",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.distributions.Wishart"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testVariance": {
  "lineno": 124,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Wishart"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testVarianceBroadcast": {
  "lineno": 130,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow_probability.python.distributions.Wishart"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.chol": {
  "lineno": 42,
  "symbols_in_volume": [
   "scipy.linalg.cholesky"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.make_pd": {
  "lineno": 36,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.dot",
   "numpy.tril",
   "scipy.linalg.circulant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.wishart_var": {
  "lineno": 47,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.diagonal",
   "numpy.matmul",
   "numpy.newaxis",
   "numpy.sqrt"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf.__init__": {
  "lineno": 60,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float16",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.base_equal",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.dtype_util.is_floating",
   "tensorflow_probability.python.internal.dtype_util.name",
   "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._batch_shape": {
  "lineno": 146,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._batch_shape_tensor": {
  "lineno": 143,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._cdf": {
  "lineno": 181,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.floor",
   "tensorflow.compat.v2.math.zeta",
   "tensorflow.compat.v2.maximum",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._event_shape": {
  "lineno": 152,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._event_shape_tensor": {
  "lineno": 149,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._hat_integral": {
  "lineno": 295,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._hat_integral_inverse": {
  "lineno": 314,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.math.expm1",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._log_prob": {
  "lineno": 155,
  "symbols_in_volume": [
   "numpy.inf",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.floor",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.zeta",
   "tensorflow.compat.v2.maximum",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.distribution_util.embed_check_integer_casting_closed",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._mean": {
  "lineno": 198,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.zeta",
   "tensorflow.compat.v2.newaxis",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._mode": {
  "lineno": 211,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._parameter_control_dependencies": {
  "lineno": 320,
  "symbols_in_volume": [
   "numpy.ones",
   "tensorflow_probability.python.internal.assert_util.assert_greater",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._params_event_ndims": {
  "lineno": 124,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._sample_n": {
  "lineno": 214,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int64.max",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.reduce_any",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.while_loop",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
   "tensorflow_probability.python.internal.distribution_util.embed_check_integer_casting_closed",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.internal.dtype_util.is_integer",
   "tensorflow_probability.python.internal.dtype_util.min",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._sample_n.loop_body": {
  "lineno": 234,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.floor",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._variance": {
  "lineno": 204,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.zeta",
   "tensorflow.compat.v2.newaxis",
   "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf.interpolate_nondiscrete": {
  "lineno": 133,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf.power": {
  "lineno": 128,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf.sample_maximum_iterations": {
  "lineno": 138,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.assertAllBetween": {
  "lineno": 40,
  "symbols_in_volume": [
   "numpy.ndenumerate"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.assertBetween": {
  "lineno": 36,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testEventDtype": {
  "lineno": 77,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.int64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testInvalidEventDtype": {
  "lineno": 89,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float16",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testInvalidPower": {
  "lineno": 60,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testNanPower": {
  "lineno": 67,
  "symbols_in_volume": [
   "numpy.nan"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testValidPower_ImplicitlyConvertsToFloat32": {
  "lineno": 71,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfCdfMultidimensional_IntegerArgs": {
  "lineno": 279,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "scipy.stats.zipf.cdf",
   "scipy.stats.zipf.logcdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfCdfMultidimensional_NonIntegerArgs": {
  "lineno": 294,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.ceil",
   "numpy.float32",
   "numpy.floor",
   "scipy.stats.zipf.cdf",
   "scipy.stats.zipf.logcdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfCdf_IntegerArgs": {
  "lineno": 207,
  "symbols_in_volume": [
   "scipy.stats.zipf.cdf",
   "scipy.stats.zipf.logcdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfCdf_NonIntegerArgs": {
  "lineno": 258,
  "symbols_in_volume": [
   "numpy.ceil",
   "numpy.floor",
   "scipy.stats.zipf.cdf",
   "scipy.stats.zipf.logcdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfCdf_NonIntegerArgsInterpolated": {
  "lineno": 237,
  "symbols_in_volume": [
   "numpy.ceil",
   "numpy.floor",
   "scipy.stats.zipf.cdf",
   "scipy.stats.zipf.logcdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfCdf_NonIntegerArgsNoInterpolation": {
  "lineno": 222,
  "symbols_in_volume": [
   "scipy.stats.zipf.cdf",
   "scipy.stats.zipf.logcdf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfLogPmfMultidimensional_IntegerArgs": {
  "lineno": 171,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "scipy.stats.zipf.logpmf",
   "scipy.stats.zipf.pmf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfLogPmfMultidimensional_NonIntegerArgs": {
  "lineno": 186,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.ceil",
   "numpy.float32",
   "numpy.floor",
   "scipy.stats.zipf.logpmf",
   "scipy.stats.zipf.pmf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfLogPmf_IntegerArgs": {
  "lineno": 111,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "scipy.stats.zipf.logpmf",
   "scipy.stats.zipf.pmf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfLogPmf_InvalidArgs": {
  "lineno": 96,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfLogPmf_NonIntegerArgs": {
  "lineno": 125,
  "symbols_in_volume": [
   "numpy.ceil",
   "numpy.floor",
   "scipy.stats.zipf.logpmf",
   "scipy.stats.zipf.pmf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfLogPmf_NonIntegerArgsNoInterpolation": {
  "lineno": 152,
  "symbols_in_volume": [
   "scipy.stats.zipf.logpmf",
   "scipy.stats.zipf.pmf",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfMean": {
  "lineno": 315,
  "symbols_in_volume": [
   "scipy.stats.zipf.mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfMode": {
  "lineno": 335,
  "symbols_in_volume": [
   "numpy.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfSample": {
  "lineno": 341,
  "symbols_in_volume": [
   "scipy.stats.zipf.mean",
   "scipy.stats.zipf.std",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.int64",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfSampleMultidimensionalMean": {
  "lineno": 370,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.array",
   "numpy.float32",
   "numpy.float64",
   "numpy.vectorize",
   "scipy.stats.zipf.mean",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfSampleMultidimensionalStd": {
  "lineno": 383,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.array",
   "numpy.float32",
   "numpy.float64",
   "numpy.vectorize",
   "scipy.stats.zipf.std",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfSampleMultipleTimes": {
  "lineno": 397,
  "symbols_in_volume": [
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfSample_AvoidsInfiniteLoop": {
  "lineno": 412,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfSample_ValidateArgs": {
  "lineno": 358,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.int64",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfShape": {
  "lineno": 51,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfStd": {
  "lineno": 328,
  "symbols_in_volume": [
   "numpy.vectorize",
   "scipy.stats.zipf.std"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfVariance": {
  "lineno": 321,
  "symbols_in_volume": [
   "numpy.vectorize",
   "scipy.stats.zipf.var"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.edward2": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.python.util.all_util.remove_undocumented",
   "tensorflow_probability.python.experimental.edward2.generated_random_variables.rv_dict.keys",
   "warnings.warn"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.python.util.all_util.remove_undocumented"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.python.util.all_util.remove_undocumented"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching.allocation_strategy": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching.allocation_strategy._directly_calls": {
  "lineno": 186,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.FunctionCallOp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.allocation_strategy._directly_writes": {
  "lineno": 163,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.FunctionCallOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PopOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PrimOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_flatten"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.allocation_strategy._indirectly_writes": {
  "lineno": 199,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.allocation_strategy._optimize_1": {
  "lineno": 121,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.BranchOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.FunctionCallOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_flatten",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_traverse",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pc_var",
   "tensorflow_probability.python.experimental.auto_batching.liveness.liveness_analysis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.allocation_strategy._variable_crosses_block_boundary": {
  "lineno": 111,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.NULL",
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.REGISTER",
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.TEMPORARY"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.allocation_strategy._variable_crosses_function_call_boundary": {
  "lineno": 117,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.FULL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.allocation_strategy._variable_is_read": {
  "lineno": 106,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.NULL",
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.TEMPORARY"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.allocation_strategy._vars_read_by": {
  "lineno": 98,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.BranchOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.FunctionCallOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PrimOp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.allocation_strategy.optimize": {
  "lineno": 40,
  "symbols_in_volume": [
   "absl.logging.warning",
   "six.iteritems",
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.NULL",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_flatten",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pc_var"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.allocation_strategy_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching.allocation_strategy_test.AllocationStrategyTest": {
  "lineno": 46,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.allocation_strategy_test.AllocationStrategyTest.assertAllocates": {
  "lineno": 48,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.allocation_strategy.optimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.allocation_strategy_test.AllocationStrategyTest.testAllocatingConstantProgram": {
  "lineno": 52,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.REGISTER",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pc_var",
   "tensorflow_probability.python.experimental.auto_batching.test_programs.constant_program"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.allocation_strategy_test.AllocationStrategyTest.testAllocatingFibonacciProgram": {
  "lineno": 87,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.FULL",
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.REGISTER",
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.TEMPORARY",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pc_var",
   "tensorflow_probability.python.experimental.auto_batching.test_programs.fibonacci_function_calls"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.allocation_strategy_test.AllocationStrategyTest.testAllocatingIfProgram": {
  "lineno": 58,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.REGISTER",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pc_var",
   "tensorflow_probability.python.experimental.auto_batching.test_programs.single_if_program"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.allocation_strategy_test.AllocationStrategyTest.testAllocatingIsEvenProgram": {
  "lineno": 66,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.FULL",
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.REGISTER",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pc_var",
   "tensorflow_probability.python.experimental.auto_batching.test_programs.is_even_function_calls"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.allocation_strategy_test.AllocationStrategyTest.testAllocatingIsEvenProgramNoPops": {
  "lineno": 76,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.FULL",
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.REGISTER",
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.TEMPORARY",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pc_var",
   "tensorflow_probability.python.experimental.auto_batching.test_programs.is_even_function_calls"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.allocation_strategy_test.strip_pop_ops": {
  "lineno": 30,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.allocation_strategy_test.strip_pop_ops.walk_graph": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.PopOp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.backend_test_lib": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching.backend_test_lib.ModelVariable": {
  "lineno": 24,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.backend_test_lib.ModelVariable.__init__": {
  "lineno": 50,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.backend_test_lib.ModelVariable.pop": {
  "lineno": 117,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.backend_test_lib.ModelVariable.push": {
  "lineno": 93,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.backend_test_lib.ModelVariable.read": {
  "lineno": 54,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.backend_test_lib.ModelVariable.update": {
  "lineno": 69,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.backend_test_lib.VariableTestCase": {
  "lineno": 161,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.backend_test_lib.VariableTestCase.check_same_results": {
  "lineno": 164,
  "symbols_in_volume": [
   "absl.logging.info"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.backend_test_lib.VariableTestCase.check_same_results.check_read_agrees": {
  "lineno": 205,
  "symbols_in_volume": [
   "absl.logging.vlog"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.backend_test_lib.create_model_variable": {
  "lineno": 139,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl.ProgramBuilder": {
  "lineno": 40,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl.ProgramBuilder.__call__": {
  "lineno": 161,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl.ProgramBuilder.__init__": {
  "lineno": 100,
  "symbols_in_volume": [
   "collections.OrderedDict"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl.ProgramBuilder._append_block": {
  "lineno": 113,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.GotoOp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl.ProgramBuilder._fresh_block": {
  "lineno": 110,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.Block"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl.ProgramBuilder._mark_defined": {
  "lineno": 227,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl.ProgramBuilder._prepare_for_instruction": {
  "lineno": 122,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl.ProgramBuilder._update_last_instruction": {
  "lineno": 131,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl.ProgramBuilder.call": {
  "lineno": 664,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.FunctionCallOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_map",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_traverse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl.ProgramBuilder.const": {
  "lineno": 334,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl.ProgramBuilder.declare_function": {
  "lineno": 557,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.Function"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl.ProgramBuilder.define_function": {
  "lineno": 594,
  "symbols_in_volume": [
   "contextlib.contextmanager",
   "tensorflow_probability.python.experimental.auto_batching.instructions.ControlFlowGraph"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl.ProgramBuilder.else_": {
  "lineno": 408,
  "symbols_in_volume": [
   "contextlib.contextmanager"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl.ProgramBuilder.function": {
  "lineno": 496,
  "symbols_in_volume": [
   "contextlib.contextmanager"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl.ProgramBuilder.if_": {
  "lineno": 354,
  "symbols_in_volume": [
   "contextlib.contextmanager",
   "tensorflow_probability.python.experimental.auto_batching.instructions.BranchOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.GotoOp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl.ProgramBuilder.local": {
  "lineno": 193,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl.ProgramBuilder.locals_": {
  "lineno": 231,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl.ProgramBuilder.module": {
  "lineno": 707,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.Module",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Type"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl.ProgramBuilder.param": {
  "lineno": 250,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl.ProgramBuilder.primop": {
  "lineno": 271,
  "symbols_in_volume": [
   "inspect.getargspec",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_map",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_traverse",
   "tensorflow_probability.python.experimental.auto_batching.instructions.prim_op"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl.ProgramBuilder.program": {
  "lineno": 735,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl.ProgramBuilder.return_": {
  "lineno": 456,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.halt_op",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_map",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_traverse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl.ProgramBuilder.var": {
  "lineno": 134,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl._MagicPattern": {
  "lineno": 815,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl._MagicPattern.__init__": {
  "lineno": 821,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl._MagicPattern.pattern": {
  "lineno": 829,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_map",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_traverse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl._MagicVars": {
  "lineno": 764,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl._MagicVars.__getattr__": {
  "lineno": 799,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl._MagicVars.__init__": {
  "lineno": 778,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl._MagicVars.__setattr__": {
  "lineno": 781,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl._str_list": {
  "lineno": 840,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend",
   "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl_test.AutoBatchingTest": {
  "lineno": 118,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl_test.AutoBatchingTest.testAutoBatchingEvenOddNumpy": {
  "lineno": 158,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.bool",
   "numpy.int64",
   "tensorflow_probability.python.experimental.auto_batching.allocation_strategy.optimize",
   "tensorflow_probability.python.experimental.auto_batching.lowering.lower_function_calls",
   "tensorflow_probability.python.experimental.auto_batching.type_inference.infer_types"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl_test.AutoBatchingTest.testAutoBatchingEvenOddTF": {
  "lineno": 172,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.experimental.auto_batching.allocation_strategy.optimize",
   "tensorflow_probability.python.experimental.auto_batching.lowering.lower_function_calls",
   "tensorflow_probability.python.experimental.auto_batching.type_inference.infer_types"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl_test.AutoBatchingTest.testAutoBatchingFibonacciNumpy": {
  "lineno": 121,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int64",
   "tensorflow_probability.python.experimental.auto_batching.allocation_strategy.optimize",
   "tensorflow_probability.python.experimental.auto_batching.lowering.lower_function_calls",
   "tensorflow_probability.python.experimental.auto_batching.type_inference.infer_types"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl_test.AutoBatchingTest.testAutoBatchingFibonacciTF": {
  "lineno": 143,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.experimental.auto_batching.allocation_strategy.optimize",
   "tensorflow_probability.python.experimental.auto_batching.lowering.lower_function_calls",
   "tensorflow_probability.python.experimental.auto_batching.type_inference.infer_types"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl_test.AutoBatchingTest.testAutoBatchingMultivalueTF": {
  "lineno": 188,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int64",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.experimental.auto_batching.allocation_strategy.optimize",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_zip",
   "tensorflow_probability.python.experimental.auto_batching.lowering.lower_function_calls",
   "tensorflow_probability.python.experimental.auto_batching.type_inference.infer_types"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl_test._execute": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.virtual_machine.execute"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl_test.even_odd_program": {
  "lineno": 68,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.dsl.ProgramBuilder"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl_test.even_odd_program.pred_type": {
  "lineno": 71,
  "symbols_in_volume": [
   "numpy.bool",
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl_test.fibonacci_program": {
  "lineno": 45,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.dsl.ProgramBuilder"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl_test.fibonacci_program.fib_type": {
  "lineno": 48,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl_test.synthetic_pattern_program": {
  "lineno": 100,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.dsl.ProgramBuilder"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.dsl_test.synthetic_pattern_program.my_type": {
  "lineno": 102,
  "symbols_in_volume": [
   "numpy.int64",
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend": {
  "lineno": null,
  "symbols_in_volume": [
   "gast.Bytes",
   "gast.Ellipsis",
   "gast.NameConstant",
   "gast.Num",
   "gast.Str",
   "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend.Context": {
  "lineno": 401,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend.Context.__init__": {
  "lineno": 434,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend.Context._dry_run": {
  "lineno": 451,
  "symbols_in_volume": [
   "contextlib.contextmanager"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend.Context._tag_function": {
  "lineno": 447,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.type_inference"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend.Context.batch": {
  "lineno": 460,
  "symbols_in_volume": [
   "functools.partial",
   "tensorflow_probability.python.experimental.auto_batching.type_inference"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend.Context.batch_uncurried": {
  "lineno": 518,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.type_inference"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend.Context.batch_uncurried.batched": {
  "lineno": 532,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.stackless",
   "tensorflow_probability.python.experimental.auto_batching.stackless.execute",
   "tensorflow_probability.python.experimental.auto_batching.type_inference.signature",
   "tensorflow_probability.python.experimental.auto_batching.virtual_machine.execute"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend.Context.function_names": {
  "lineno": 578,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend.Context.lowered_for_args": {
  "lineno": 726,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.type_inference.signature"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend.Context.module": {
  "lineno": 581,
  "symbols_in_volume": [
   "tensorflow.python.autograph.pyct.compiler.ast_to_object",
   "tensorflow_probability.python.experimental.auto_batching.dsl.ProgramBuilder",
   "tensorflow_probability.python.experimental.auto_batching.type_inference"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend.Context.program": {
  "lineno": 613,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend.Context.program_compiled": {
  "lineno": 633,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.allocation_strategy.optimize",
   "tensorflow_probability.python.experimental.auto_batching.type_inference.infer_types_from_signature"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend.Context.program_lowered": {
  "lineno": 678,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.allocation_strategy.optimize",
   "tensorflow_probability.python.experimental.auto_batching.lowering.lower_function_calls",
   "tensorflow_probability.python.experimental.auto_batching.stack_optimization.fuse_pop_push",
   "tensorflow_probability.python.experimental.auto_batching.type_inference.infer_types_from_signature"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend._AutoBatchingTransformer": {
  "lineno": 144,
  "symbols_in_volume": [
   "tensorflow.python.autograph.pyct.transformer.Base"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend._AutoBatchingTransformer.__init__": {
  "lineno": 157,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend._AutoBatchingTransformer._assignment_construct": {
  "lineno": 308,
  "symbols_in_volume": [
   "gast.List",
   "gast.Tuple",
   "tensorflow.python.autograph.pyct.templates.replace_as_expression"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend._AutoBatchingTransformer._assignment_construct_recur": {
  "lineno": 315,
  "symbols_in_volume": [
   "gast.List",
   "gast.Load",
   "gast.Tuple",
   "tensorflow.python.autograph.pyct.templates.replace_as_expression"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend._AutoBatchingTransformer._primop": {
  "lineno": 287,
  "symbols_in_volume": [
   "tensorflow.python.autograph.pyct.anno.Static.SCOPE",
   "tensorflow.python.autograph.pyct.anno.getanno",
   "tensorflow.python.autograph.pyct.templates.replace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend._AutoBatchingTransformer._to_reference": {
  "lineno": 329,
  "symbols_in_volume": [
   "gast.Name",
   "tensorflow.python.autograph.pyct.qual_names.QN",
   "tensorflow.python.autograph.pyct.templates.replace_as_expression"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend._AutoBatchingTransformer._to_reference_list": {
  "lineno": 339,
  "symbols_in_volume": [
   "gast.List",
   "gast.Load"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend._AutoBatchingTransformer.visit_Assign": {
  "lineno": 236,
  "symbols_in_volume": [
   "gast.Call",
   "tensorflow.python.autograph.pyct.anno.Basic.QN",
   "tensorflow.python.autograph.pyct.anno.getanno",
   "tensorflow.python.autograph.pyct.anno.hasanno",
   "tensorflow.python.autograph.pyct.templates.replace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend._AutoBatchingTransformer.visit_FunctionDef": {
  "lineno": 177,
  "symbols_in_volume": [
   "gast.List",
   "gast.Name",
   "gast.Return",
   "gast.Store",
   "gast.Str",
   "tensorflow.python.autograph.pyct.templates.replace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend._AutoBatchingTransformer.visit_If": {
  "lineno": 343,
  "symbols_in_volume": [
   "gast.Module",
   "tensorflow.python.autograph.pyct.templates.replace",
   "tensorflow.python.autograph.pyct.templates.replace_as_expression"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend._AutoBatchingTransformer.visit_Return": {
  "lineno": 386,
  "symbols_in_volume": [
   "gast.Expr",
   "tensorflow.python.autograph.pyct.templates.replace_as_expression"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend._environment": {
  "lineno": 733,
  "symbols_in_volume": [
   "six.get_function_closure",
   "six.get_function_code",
   "six.get_function_globals",
   "six.iteritems"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend._is_literal": {
  "lineno": 136,
  "symbols_in_volume": [
   "gast.Name"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend._parse_and_analyze": {
  "lineno": 57,
  "symbols_in_volume": [
   "gast.Call",
   "gast.If",
   "tensorflow.python.autograph.converters.break_statements.transform",
   "tensorflow.python.autograph.converters.continue_statements.transform",
   "tensorflow.python.autograph.converters.return_statements.transform",
   "tensorflow.python.autograph.core.converter.ConversionOptions",
   "tensorflow.python.autograph.core.converter.EntityContext",
   "tensorflow.python.autograph.core.converter.ProgramContext",
   "tensorflow.python.autograph.core.converter.standard_analysis",
   "tensorflow.python.autograph.core.naming.Namer",
   "tensorflow.python.autograph.pyct.common_transformers.anf.ANY",
   "tensorflow.python.autograph.pyct.common_transformers.anf.ASTEdgePattern",
   "tensorflow.python.autograph.pyct.common_transformers.anf.REPLACE",
   "tensorflow.python.autograph.pyct.common_transformers.anf.transform",
   "tensorflow.python.autograph.pyct.inspect_utils.getfutureimports",
   "tensorflow.python.autograph.pyct.parser.parse_entity",
   "tensorflow.python.autograph.pyct.transformer.EntityInfo"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend._parse_and_analyze.maybe_replace_function_argument": {
  "lineno": 112,
  "symbols_in_volume": [
   "tensorflow.python.autograph.pyct.anno.Basic.QN",
   "tensorflow.python.autograph.pyct.anno.getanno",
   "tensorflow.python.autograph.pyct.anno.hasanno"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend._run_at_batch_size_one": {
  "lineno": 747,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_traverse",
   "tensorflow_probability.python.experimental.auto_batching.type_inference.type_of_pattern"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend.truthy": {
  "lineno": 769,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Tensor",
   "tensorflow_probability.python.experimental.auto_batching.stackless.is_running",
   "tensorflow_probability.python.experimental.auto_batching.type_inference.is_inferring",
   "tensorflow_probability.python.experimental.auto_batching.virtual_machine.is_staging"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend",
   "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest": {
  "lineno": 52,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testBatchDimensionSensitivePrimop": {
  "lineno": 346,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow_probability.python.experimental.auto_batching.frontend.Context"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testBatchDimensionSensitivePrimop.batchwise_reduce_sum": {
  "lineno": 347,
  "symbols_in_volume": [
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testBatchDimensionSensitivePrimop.function": {
  "lineno": 352,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testBatchDimensionSensitivePrimop.my_type": {
  "lineno": 350,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testBroadcastInputsToBatchSize": {
  "lineno": 392,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow_probability.python.experimental.auto_batching.frontend.Context"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testBroadcastInputsToBatchSize.function": {
  "lineno": 398,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testBroadcastInputsToBatchSize.my_type": {
  "lineno": 396,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testCalmerAnf": {
  "lineno": 536,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow_probability.python.experimental.auto_batching.frontend.Context"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testCalmerAnf.function": {
  "lineno": 544,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testCalmerAnf.int_type": {
  "lineno": 541,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testCompileCache": {
  "lineno": 414,
  "symbols_in_volume": [
   "numpy.int32",
   "numpy.int64",
   "tensorflow_probability.python.experimental.auto_batching.frontend.Context",
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testCompileCache.function": {
  "lineno": 418,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testCompileCache.my_type": {
  "lineno": 416,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testConsumeEmitMultipleValues": {
  "lineno": 281,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow_probability.python.experimental.auto_batching.frontend.Context"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testConsumeEmitMultipleValues.dup_type": {
  "lineno": 282,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testConsumeEmitMultipleValues.function": {
  "lineno": 284,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testConsumeEmitMultipleValuesNested": {
  "lineno": 297,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow_probability.python.experimental.auto_batching.frontend.Context"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testConsumeEmitMultipleValuesNested.caller": {
  "lineno": 305,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testConsumeEmitMultipleValuesNested.dup_type": {
  "lineno": 298,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testConsumeEmitMultipleValuesNested.function": {
  "lineno": 301,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testDisablingAutoBatching": {
  "lineno": 172,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.experimental.auto_batching.frontend.Context"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testDisablingAutoBatching.count_executions": {
  "lineno": 174,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testDisablingAutoBatching.function": {
  "lineno": 182,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testDisablingAutoBatching.id_type": {
  "lineno": 180,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testDisablingAutoBatchingNested": {
  "lineno": 213,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.experimental.auto_batching.frontend.Context"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testDisablingAutoBatchingNested.caller": {
  "lineno": 233,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testDisablingAutoBatchingNested.count_executions": {
  "lineno": 215,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testDisablingAutoBatchingNested.function": {
  "lineno": 225,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testDisablingAutoBatchingNested.id_type": {
  "lineno": 221,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testDryRunIf": {
  "lineno": 258,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int64",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.experimental.auto_batching.frontend.Context",
   "tensorflow_probability.python.experimental.auto_batching.frontend.truthy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testDryRunIf.batch_abs": {
  "lineno": 262,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testDryRunIf.id_type": {
  "lineno": 259,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testEvenOddWithContext": {
  "lineno": 88,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.bool",
   "numpy.int32",
   "tensorflow_probability.python.experimental.auto_batching.frontend.Context"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testEvenOddWithContext.even": {
  "lineno": 93,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testEvenOddWithContext.odd": {
  "lineno": 100,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testEvenOddWithContext.pred_type": {
  "lineno": 89,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testFibonacci": {
  "lineno": 55,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testFibonacciNumpy": {
  "lineno": 67,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int64",
   "tensorflow_probability.python.experimental.auto_batching.frontend.Context",
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testFibonacciNumpyStackless": {
  "lineno": 76,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int64",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.experimental.auto_batching.frontend.Context",
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testFieldReference": {
  "lineno": 561,
  "symbols_in_volume": [
   "collections.namedtuple",
   "numpy.array",
   "numpy.int32",
   "tensorflow_probability.python.experimental.auto_batching.frontend.Context"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testFieldReference.function": {
  "lineno": 569,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testFieldReference.int_type": {
  "lineno": 566,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testLoweringCache": {
  "lineno": 429,
  "symbols_in_volume": [
   "numpy.int32",
   "numpy.int64",
   "tensorflow_probability.python.experimental.auto_batching.frontend.Context",
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testLoweringCache.function": {
  "lineno": 433,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testLoweringCache.my_type": {
  "lineno": 431,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testNamedTuples": {
  "lineno": 142,
  "symbols_in_volume": [
   "collections.namedtuple",
   "numpy.array",
   "numpy.int64",
   "tensorflow_probability.python.experimental.auto_batching.frontend.Context"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testNamedTuples.caller": {
  "lineno": 157,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testNamedTuples.function": {
  "lineno": 153,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testNamedTuples.id_type": {
  "lineno": 151,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testNamedTuples.my_primop": {
  "lineno": 149,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testNestedMultipleValueReturns": {
  "lineno": 128,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int64",
   "tensorflow_probability.python.experimental.auto_batching.frontend.Context"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testNestedMultipleValueReturns.function": {
  "lineno": 133,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testNestedMultipleValueReturns.id_type": {
  "lineno": 131,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testNestedMultipleValueReturns.my_primop": {
  "lineno": 129,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testParameterSwapping": {
  "lineno": 475,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow_probability.python.experimental.auto_batching.frontend.Context"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testParameterSwapping.gcd": {
  "lineno": 488,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testParameterSwapping.gcd_type": {
  "lineno": 485,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testParameterSwapping.trace": {
  "lineno": 480,
  "symbols_in_volume": [
   "absl.logging.info"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testRestructureOnFunctionReturn": {
  "lineno": 321,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow_probability.python.experimental.auto_batching.frontend.Context"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testRestructureOnFunctionReturn.caller": {
  "lineno": 333,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testRestructureOnFunctionReturn.function": {
  "lineno": 325,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testRestructureOnFunctionReturn.id_type": {
  "lineno": 331,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testRestructureOnFunctionReturn.quad_type": {
  "lineno": 322,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testSelfTailCallOptimization": {
  "lineno": 444,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow_probability.python.experimental.auto_batching.frontend.Context",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PushGotoOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.FULL",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pc_var"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testSelfTailCallOptimization.iota_sum": {
  "lineno": 449,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testSelfTailCallOptimization.my_type": {
  "lineno": 445,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testSyncingAsExpected": {
  "lineno": 510,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int64",
   "tensorflow_probability.python.experimental.auto_batching.frontend.Context",
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testSyncingAsExpected.count_executions": {
  "lineno": 512,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testSyncingAsExpected.fibonacci_inst": {
  "lineno": 516,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testSyntheticMultipleValueReturns": {
  "lineno": 116,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int64",
   "tensorflow_probability.python.experimental.auto_batching.frontend.Context"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testSyntheticMultipleValueReturns.function": {
  "lineno": 119,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testSyntheticMultipleValueReturns.id_type": {
  "lineno": 117,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testUseDummyVariableForCall": {
  "lineno": 376,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow_probability.python.experimental.auto_batching.frontend.Context"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testUseDummyVariableForCall.callee": {
  "lineno": 379,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testUseDummyVariableForCall.function": {
  "lineno": 381,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testUseDummyVariableForCall.my_type": {
  "lineno": 377,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testUseDummyVariableForPrimop": {
  "lineno": 361,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow_probability.python.experimental.auto_batching.frontend.Context"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testUseDummyVariableForPrimop.callee": {
  "lineno": 364,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testUseDummyVariableForPrimop.function": {
  "lineno": 366,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.AutoGraphFrontendTest.testUseDummyVariableForPrimop.my_type": {
  "lineno": 362,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.TestTFDynamicBatchSize": {
  "lineno": 680,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.TestTFStaticBatchSize": {
  "lineno": 675,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test._TestHidingTFBatchSize": {
  "lineno": 585,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test._TestHidingTFBatchSize._build_tensor": {
  "lineno": 587,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test._TestHidingTFBatchSize._check_batch_size": {
  "lineno": 594,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test._TestHidingTFBatchSize.testCallingUntaggedFunctions": {
  "lineno": 633,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow_probability.python.experimental.auto_batching.frontend.Context"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test._TestHidingTFBatchSize.testCallingUntaggedFunctions.function": {
  "lineno": 640,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test._TestHidingTFBatchSize.testCallingUntaggedFunctions.id_type": {
  "lineno": 634,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test._TestHidingTFBatchSize.testCallingUntaggedFunctions.subroutine": {
  "lineno": 636,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test._TestHidingTFBatchSize.testFibonacciTF": {
  "lineno": 601,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int64",
   "tensorflow_probability.python.experimental.auto_batching.frontend.Context",
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test._TestHidingTFBatchSize.testOneArmedAndNestedIf": {
  "lineno": 610,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow_probability.python.experimental.auto_batching.frontend.Context"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test._TestHidingTFBatchSize.testOneArmedAndNestedIf.function": {
  "lineno": 614,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test._TestHidingTFBatchSize.testOneArmedAndNestedIf.int_type": {
  "lineno": 611,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test._TestHidingTFBatchSize.testReferToEnclosingScope": {
  "lineno": 658,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow_probability.python.experimental.auto_batching.frontend.Context"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test._TestHidingTFBatchSize.testReferToEnclosingScope.an_autobatch_function": {
  "lineno": 664,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test._TestHidingTFBatchSize.testReferToEnclosingScope.an_op_on_objects": {
  "lineno": 660,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test._TestHidingTFBatchSize.testReferToEnclosingScope.id_type": {
  "lineno": 662,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.frontend_test.fibonacci": {
  "lineno": 43,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Block": {
  "lineno": 357,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Block.__init__": {
  "lineno": 360,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Block.__str__": {
  "lineno": 417,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Block._string_for_instruction": {
  "lineno": 409,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Block.assign_instructions": {
  "lineno": 385,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Block.label_str": {
  "lineno": 401,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.BranchOp": {
  "lineno": 662,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.BranchOp.__str__": {
  "lineno": 676,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.ControlFlowGraph": {
  "lineno": 295,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.ControlFlowGraph.__init__": {
  "lineno": 298,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.ControlFlowGraph.__str__": {
  "lineno": 351,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.ControlFlowGraph.block": {
  "lineno": 319,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.ControlFlowGraph.block_index": {
  "lineno": 330,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.ControlFlowGraph.blocks": {
  "lineno": 315,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.ControlFlowGraph.enter_block": {
  "lineno": 347,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.ControlFlowGraph.exit_index": {
  "lineno": 343,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Environment": {
  "lineno": 933,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Environment.__init__": {
  "lineno": 945,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Environment.__setitem__": {
  "lineno": 1115,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Environment.env_dict": {
  "lineno": 1118,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Environment.initialize": {
  "lineno": 965,
  "symbols_in_volume": [
   "absl.logging.debug",
   "collections.defaultdict",
   "functools.partial",
   "six.iteritems"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Environment.initialize.mk_tensor": {
  "lineno": 986,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Environment.pop": {
  "lineno": 1066,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Environment.pop.do_pop": {
  "lineno": 1085,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Environment.push": {
  "lineno": 999,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Environment.push.do_push": {
  "lineno": 1027,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Environment.read": {
  "lineno": 1090,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Environment.read.do_read": {
  "lineno": 1110,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Environment.update": {
  "lineno": 1032,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Environment.update.do_update": {
  "lineno": 1060,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Function": {
  "lineno": 437,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Function.__init__": {
  "lineno": 440,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Function.__str__": {
  "lineno": 472,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Function.name": {
  "lineno": 463,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.FunctionCallOp": {
  "lineno": 494,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.FunctionCallOp.__str__": {
  "lineno": 529,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.FunctionCallOp.replace": {
  "lineno": 543,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.GotoOp": {
  "lineno": 690,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.GotoOp.__str__": {
  "lineno": 701,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.IndirectGotoOp": {
  "lineno": 742,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.IndirectGotoOp.__str__": {
  "lineno": 753,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Module": {
  "lineno": 214,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Module.__init__": {
  "lineno": 222,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Module.lookup": {
  "lineno": 226,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Module.program": {
  "lineno": 232,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.NullVariable": {
  "lineno": 801,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.NullVariable.pop": {
  "lineno": 822,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.NullVariable.push": {
  "lineno": 815,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.NullVariable.read": {
  "lineno": 819,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.NullVariable.update": {
  "lineno": 810,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.PopOp": {
  "lineno": 641,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.PopOp.__str__": {
  "lineno": 651,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.PrimOp": {
  "lineno": 552,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.PrimOp.__str__": {
  "lineno": 612,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.PrimOp.__str__.name": {
  "lineno": 621,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.PrimOp.replace": {
  "lineno": 632,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Program": {
  "lineno": 56,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Program.__init__": {
  "lineno": 106,
  "symbols_in_volume": [
   "numpy.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Program.__str__": {
  "lineno": 153,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Program.main_function": {
  "lineno": 149,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.Program.replace": {
  "lineno": 139,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.PushGotoOp": {
  "lineno": 718,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.PushGotoOp.__str__": {
  "lineno": 731,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.PythonBackend": {
  "lineno": 914,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.PythonBackend.create_variable": {
  "lineno": 921,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.PythonBackend.variable_class": {
  "lineno": 928,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.PythonVMVariable": {
  "lineno": 870,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.PythonVMVariable.__init__": {
  "lineno": 887,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.PythonVMVariable.__repr__": {
  "lineno": 910,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.PythonVMVariable.pop": {
  "lineno": 899,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.PythonVMVariable.push": {
  "lineno": 891,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.PythonVMVariable.read": {
  "lineno": 905,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.PythonVMVariable.update": {
  "lineno": 895,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.TemporaryVariable": {
  "lineno": 827,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.TemporaryVariable._empty": {
  "lineno": 840,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.TemporaryVariable.empty": {
  "lineno": 833,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.TemporaryVariable.pop": {
  "lineno": 863,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.TemporaryVariable.push": {
  "lineno": 852,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.TemporaryVariable.read": {
  "lineno": 858,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.TemporaryVariable.update": {
  "lineno": 848,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType": {
  "lineno": 198,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType.__repr__": {
  "lineno": 204,
  "symbols_in_volume": [
   "tensorflow.compat.v2.as_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType.__str__": {
  "lineno": 201,
  "symbols_in_volume": [
   "tensorflow.compat.v2.as_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation": {
  "lineno": 247,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.__init__": {
  "lineno": 280,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.__repr__": {
  "lineno": 286,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.__str__": {
  "lineno": 283,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions._detect_batch_size_one_input": {
  "lineno": 1509,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions._get_source_str": {
  "lineno": 1397,
  "symbols_in_volume": [
   "inspect.getsource",
   "textwrap.dedent"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions._invoke_fun": {
  "lineno": 1201,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions._isnamedtuple": {
  "lineno": 1363,
  "symbols_in_volume": [
   "inspect.getmro"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions._label_str": {
  "lineno": 1389,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions._render_comma_list": {
  "lineno": 1414,
  "symbols_in_volume": [
   "textwrap.wrap"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions._render_pattern": {
  "lineno": 1471,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions._sequence_like": {
  "lineno": 1377,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.detect_batch_size": {
  "lineno": 1489,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.extract_referenced_variables": {
  "lineno": 1209,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.halt": {
  "lineno": 785,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.halt_op": {
  "lineno": 790,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.interpret": {
  "lineno": 1123,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.is_return_op": {
  "lineno": 795,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_flatten": {
  "lineno": 1358,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_map": {
  "lineno": 1251,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_map2": {
  "lineno": 1320,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_traverse": {
  "lineno": 1273,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_zip": {
  "lineno": 1283,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.prim_op": {
  "lineno": 762,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.push_op": {
  "lineno": 768,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.push_op.assign": {
  "lineno": 779,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions.single_type": {
  "lineno": 210,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions_test.InstructionsTest": {
  "lineno": 29,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions_test.InstructionsTest.testConstant": {
  "lineno": 31,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions_test.InstructionsTest.testConstant.interpret": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.interpret",
   "tensorflow_probability.python.experimental.auto_batching.test_programs.constant_program"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions_test.InstructionsTest.testFibonacci": {
  "lineno": 52,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions_test.InstructionsTest.testFibonacci.interpret": {
  "lineno": 54,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.interpret",
   "tensorflow_probability.python.experimental.auto_batching.test_programs.fibonacci_program"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions_test.InstructionsTest.testFibonacciFunctions": {
  "lineno": 59,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions_test.InstructionsTest.testFibonacciFunctions.interpret": {
  "lineno": 61,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.interpret",
   "tensorflow_probability.python.experimental.auto_batching.test_programs.fibonacci_function_calls"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions_test.InstructionsTest.testPatternMatching": {
  "lineno": 67,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.interpret",
   "tensorflow_probability.python.experimental.auto_batching.test_programs.synthetic_pattern_program"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions_test.InstructionsTest.testPatternVariables": {
  "lineno": 46,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions_test.InstructionsTest.testPatternVariables.interpret": {
  "lineno": 47,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.interpret",
   "tensorflow_probability.python.experimental.auto_batching.test_programs.synthetic_pattern_variable_program"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions_test.InstructionsTest.testSingleIf": {
  "lineno": 38,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions_test.InstructionsTest.testSingleIf.interpret": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.interpret",
   "tensorflow_probability.python.experimental.auto_batching.test_programs.single_if_program"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions_test.PrettyPrintingTest": {
  "lineno": 224,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions_test.PrettyPrintingTest.testFibonacci": {
  "lineno": 233,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.test_programs.fibonacci_program"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions_test.PrettyPrintingTest.testFibonacciFunctions": {
  "lineno": 237,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.test_programs.fibonacci_function_calls"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions_test.PrettyPrintingTest.testFibonacciFunctionsNarrow": {
  "lineno": 242,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.test_programs.fibonacci_function_calls"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.instructions_test.PrettyPrintingTest.verify_program_pretty_print": {
  "lineno": 226,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.liveness": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching.liveness.liveness_analysis": {
  "lineno": 43,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.BranchOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.FunctionCallOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.GotoOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.IndirectGotoOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PopOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PrimOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PushGotoOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_flatten"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.lowering": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching.lowering.ControlFlowGraphBuilder": {
  "lineno": 146,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.lowering.ControlFlowGraphBuilder.__init__": {
  "lineno": 149,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.lowering.ControlFlowGraphBuilder.append_block": {
  "lineno": 155,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.lowering.ControlFlowGraphBuilder.append_instruction": {
  "lineno": 158,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.lowering.ControlFlowGraphBuilder.control_flow_graph": {
  "lineno": 216,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.ControlFlowGraph"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.lowering.ControlFlowGraphBuilder.cur_block": {
  "lineno": 152,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.lowering.ControlFlowGraphBuilder.end_block_with_tail_call": {
  "lineno": 182,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.GotoOp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.lowering.ControlFlowGraphBuilder.maybe_add_pop": {
  "lineno": 161,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.PopOp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.lowering.ControlFlowGraphBuilder.maybe_adjust_terminator": {
  "lineno": 194,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.BranchOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.IndirectGotoOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.is_return_op"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.lowering.ControlFlowGraphBuilder.split_block": {
  "lineno": 166,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.Block",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PushGotoOp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.lowering._definedness_analysis": {
  "lineno": 45,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.BranchOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.FunctionCallOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.GotoOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.IndirectGotoOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PopOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PrimOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PushGotoOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_flatten"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.lowering._definedness_analysis.check_live_variables_defined": {
  "lineno": 104,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.lowering._definedness_analysis.record_vars_defined_on_entry": {
  "lineno": 95,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.lowering._function_entry_stack_ops": {
  "lineno": 344,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.PopOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_flatten",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_zip",
   "tensorflow_probability.python.experimental.auto_batching.instructions.push_op"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.lowering._is_indirect_return_op": {
  "lineno": 326,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.GotoOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.is_return_op"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.lowering._is_return_block": {
  "lineno": 331,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.lowering._lower_function_calls_1": {
  "lineno": 220,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.FunctionCallOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PopOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PrimOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_flatten",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_traverse",
   "tensorflow_probability.python.experimental.auto_batching.instructions.push_op",
   "tensorflow_probability.python.experimental.auto_batching.liveness.liveness_analysis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.lowering._optimizable_tail_call": {
  "lineno": 335,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.lowering.lower_function_calls": {
  "lineno": 406,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.Program",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_flatten"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.lowering_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching.lowering_test.LoweringTest": {
  "lineno": 53,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.lowering_test.LoweringTest.testLoweringFibonacciNumpy": {
  "lineno": 55,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.lowering_test.LoweringTest.testLoweringIsEvenNumpy": {
  "lineno": 60,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.lowering_test._fibonacci_lowered_execute": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.allocation_strategy.optimize",
   "tensorflow_probability.python.experimental.auto_batching.lowering.lower_function_calls",
   "tensorflow_probability.python.experimental.auto_batching.test_programs.fibonacci_function_calls",
   "tensorflow_probability.python.experimental.auto_batching.virtual_machine.execute"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.lowering_test._is_even_lowered_execute": {
  "lineno": 44,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.allocation_strategy.optimize",
   "tensorflow_probability.python.experimental.auto_batching.lowering.lower_function_calls",
   "tensorflow_probability.python.experimental.auto_batching.test_programs.is_even_function_calls",
   "tensorflow_probability.python.experimental.auto_batching.virtual_machine.execute"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.FullNumpyVariable": {
  "lineno": 159,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.FullNumpyVariable.pop": {
  "lineno": 221,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.FullNumpyVariable.push": {
  "lineno": 201,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.FullNumpyVariable.read": {
  "lineno": 171,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.FullNumpyVariable.update": {
  "lineno": 183,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend": {
  "lineno": 247,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend.any": {
  "lineno": 497,
  "symbols_in_volume": [
   "numpy.any"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend.assert_matching_dtype": {
  "lineno": 323,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend.batch_size": {
  "lineno": 338,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend.broadcast_to_shape_of": {
  "lineno": 398,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend.cond": {
  "lineno": 416,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend.create_variable": {
  "lineno": 366,
  "symbols_in_volume": [
   "numpy.zeros",
   "tensorflow_probability.python.experimental.auto_batching.instructions.NullVariable",
   "tensorflow_probability.python.experimental.auto_batching.instructions.TemporaryVariable.empty",
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.NULL",
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.REGISTER",
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.TEMPORARY"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend.equal": {
  "lineno": 487,
  "symbols_in_volume": [
   "numpy.equal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend.fill": {
  "lineno": 350,
  "symbols_in_volume": [
   "numpy.full"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend.full_mask": {
  "lineno": 393,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.ones"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend.merge_dtypes": {
  "lineno": 296,
  "symbols_in_volume": [
   "numpy.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend.merge_shapes": {
  "lineno": 308,
  "symbols_in_volume": [
   "numpy.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend.not_equal": {
  "lineno": 492,
  "symbols_in_volume": [
   "numpy.not_equal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend.prepare_for_cond": {
  "lineno": 436,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend.reduce_min": {
  "lineno": 470,
  "symbols_in_volume": [
   "numpy.min"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend.run_on_dummies": {
  "lineno": 270,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_map"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend.run_on_dummies.at_tensor": {
  "lineno": 288,
  "symbols_in_volume": [
   "numpy.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend.static_value": {
  "lineno": 346,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend.switch_case": {
  "lineno": 482,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend.type_of": {
  "lineno": 257,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend.variable_class": {
  "lineno": 250,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.NullVariable",
   "tensorflow_probability.python.experimental.auto_batching.instructions.TemporaryVariable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend.where": {
  "lineno": 449,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend.while_loop": {
  "lineno": 475,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend.wrap_straightline_callable": {
  "lineno": 501,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.RegisterNumpyVariable": {
  "lineno": 39,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.RegisterNumpyVariable.pop": {
  "lineno": 62,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.RegisterNumpyVariable.push": {
  "lineno": 55,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.RegisterNumpyVariable.read": {
  "lineno": 59,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.RegisterNumpyVariable.update": {
  "lineno": 51,
  "symbols_in_volume": [
   "numpy.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.Stack": {
  "lineno": 69,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.Stack.pop": {
  "lineno": 80,
  "symbols_in_volume": [
   "numpy.any",
   "numpy.arange",
   "numpy.take"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend.Stack.push": {
  "lineno": 106,
  "symbols_in_volume": [
   "numpy.any",
   "numpy.arange",
   "numpy.equal",
   "numpy.newaxis",
   "numpy.repeat",
   "numpy.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend._create_stack": {
  "lineno": 141,
  "symbols_in_volume": [
   "numpy.int64",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend._where_leading_dims": {
  "lineno": 241,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.reshape",
   "numpy.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend_test.NumpyVariableTest": {
  "lineno": 47,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.backend_test_lib.VariableTestCase",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend_test.NumpyVariableTest.testNumpySmoke": {
  "lineno": 49,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.float32",
   "hypothesis.extra.numpy.ones",
   "hypothesis.extra.numpy.random.randn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend_test.NumpyVariableTest.testNumpyVariableRandomOps": {
  "lineno": 59,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.array_shapes",
   "hypothesis.extra.numpy.arrays",
   "hypothesis.extra.numpy.bool",
   "hypothesis.extra.numpy.scalar_dtypes",
   "hypothesis.given",
   "hypothesis.settings",
   "hypothesis.strategies.data",
   "hypothesis.strategies.integers",
   "hypothesis.strategies.just",
   "hypothesis.strategies.lists",
   "hypothesis.strategies.one_of",
   "hypothesis.strategies.tuples"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.numpy_backend_test.var_init": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType",
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.FULL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.stack_optimization": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching.stack_optimization.fuse_pop_push": {
  "lineno": 26,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "tensorflow_probability.python.experimental.auto_batching.instructions.FunctionCallOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PopOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PrimOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_traverse",
   "tensorflow_probability.python.experimental.auto_batching.instructions.prim_op"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.stack_optimization_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching.stack_optimization_test.StackOptimizationTest": {
  "lineno": 27,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.stack_optimization_test.StackOptimizationTest.testPopPushFusionPrettyPrint": {
  "lineno": 29,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.stack_optimization.fuse_pop_push",
   "tensorflow_probability.python.experimental.auto_batching.test_programs.fibonacci_program"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.stack_optimization_test.StackOptimizationTest.verify_program_pretty_print": {
  "lineno": 37,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.stackless": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching.stackless.ExecutionQueue": {
  "lineno": 248,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.stackless.ExecutionQueue.__init__": {
  "lineno": 263,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.stackless.ExecutionQueue.dequeue": {
  "lineno": 275,
  "symbols_in_volume": [
   "heapq.heappop"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.stackless.ExecutionQueue.enqueue": {
  "lineno": 270,
  "symbols_in_volume": [
   "heapq.heappush"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.stackless._interpret": {
  "lineno": 172,
  "symbols_in_volume": [
   "absl.logging.vlog",
   "functools.partial",
   "six.iteritems",
   "tensorflow_probability.python.experimental.auto_batching.instructions.BranchOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Environment",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Environment.initialize",
   "tensorflow_probability.python.experimental.auto_batching.instructions.FunctionCallOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.GotoOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.extract_referenced_variables",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_flatten",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_map",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_zip",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pc_var"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.stackless._invoke_fun": {
  "lineno": 238,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.Program"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.stackless._run_straightline": {
  "lineno": 149,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.Environment",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PopOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PrimOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_flatten",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_map",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_zip",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pc_var"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.stackless._split_fn_calls": {
  "lineno": 134,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions",
   "tensorflow_probability.python.experimental.auto_batching.instructions.FunctionCallOp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.stackless._stackless_running": {
  "lineno": 303,
  "symbols_in_volume": [
   "contextlib.contextmanager"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.stackless.execute": {
  "lineno": 35,
  "symbols_in_volume": [
   "six.iteritems",
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.FULL",
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.REGISTER",
   "tensorflow_probability.python.experimental.auto_batching.instructions.detect_batch_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.stackless.is_running": {
  "lineno": 288,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.stackless_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v1.enable_eager_execution",
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend",
   "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching.stackless_test.StacklessTest": {
  "lineno": 50,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.stackless_test.StacklessTest.testStacklessFibonacciNumpy": {
  "lineno": 52,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.stackless_test.StacklessTest.testStacklessFibonacciTF": {
  "lineno": 58,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.stackless_test.StacklessTest.testStacklessIsEvenNumpy": {
  "lineno": 65,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.stackless_test.StacklessTest.testStacklessIsEvenTF": {
  "lineno": 73,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.stackless_test._fibonacci_stackless_execute": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.allocation_strategy.optimize",
   "tensorflow_probability.python.experimental.auto_batching.stackless.execute",
   "tensorflow_probability.python.experimental.auto_batching.test_programs.fibonacci_function_calls"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.stackless_test._is_even_stackless_execute": {
  "lineno": 43,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.allocation_strategy.optimize",
   "tensorflow_probability.python.experimental.auto_batching.stackless.execute",
   "tensorflow_probability.python.experimental.auto_batching.test_programs.is_even_function_calls"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.test_programs": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching.test_programs._strip_types": {
  "lineno": 49,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.Type",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pc_var"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.test_programs.constant_program": {
  "lineno": 27,
  "symbols_in_volume": [
   "numpy.int64",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Block",
   "tensorflow_probability.python.experimental.auto_batching.instructions.ControlFlowGraph",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Program",
   "tensorflow_probability.python.experimental.auto_batching.instructions.halt_op",
   "tensorflow_probability.python.experimental.auto_batching.instructions.prim_op",
   "tensorflow_probability.python.experimental.auto_batching.instructions.single_type"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.test_programs.fibonacci_function_calls": {
  "lineno": 342,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.int64",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Block",
   "tensorflow_probability.python.experimental.auto_batching.instructions.BranchOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.ControlFlowGraph",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Function",
   "tensorflow_probability.python.experimental.auto_batching.instructions.FunctionCallOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Program",
   "tensorflow_probability.python.experimental.auto_batching.instructions.halt_op",
   "tensorflow_probability.python.experimental.auto_batching.instructions.prim_op",
   "tensorflow_probability.python.experimental.auto_batching.instructions.single_type"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.test_programs.fibonacci_program": {
  "lineno": 151,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.int64",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Block",
   "tensorflow_probability.python.experimental.auto_batching.instructions.BranchOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.ControlFlowGraph",
   "tensorflow_probability.python.experimental.auto_batching.instructions.IndirectGotoOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PopOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Program",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PushGotoOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.halt",
   "tensorflow_probability.python.experimental.auto_batching.instructions.prim_op",
   "tensorflow_probability.python.experimental.auto_batching.instructions.push_op",
   "tensorflow_probability.python.experimental.auto_batching.instructions.single_type"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.test_programs.is_even_function_calls": {
  "lineno": 235,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.int64",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Block",
   "tensorflow_probability.python.experimental.auto_batching.instructions.BranchOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.ControlFlowGraph",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Function",
   "tensorflow_probability.python.experimental.auto_batching.instructions.FunctionCallOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PopOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Program",
   "tensorflow_probability.python.experimental.auto_batching.instructions.halt_op",
   "tensorflow_probability.python.experimental.auto_batching.instructions.prim_op",
   "tensorflow_probability.python.experimental.auto_batching.instructions.single_type"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.test_programs.is_even_function_calls.pred_type": {
  "lineno": 252,
  "symbols_in_volume": [
   "numpy.bool",
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.test_programs.pea_nuts_program": {
  "lineno": 424,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.float32",
   "numpy.int64",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Block",
   "tensorflow_probability.python.experimental.auto_batching.instructions.BranchOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.ControlFlowGraph",
   "tensorflow_probability.python.experimental.auto_batching.instructions.GotoOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.IndirectGotoOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PopOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Program",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PushGotoOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.halt",
   "tensorflow_probability.python.experimental.auto_batching.instructions.prim_op",
   "tensorflow_probability.python.experimental.auto_batching.instructions.push_op",
   "tensorflow_probability.python.experimental.auto_batching.instructions.single_type"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.test_programs.single_if_program": {
  "lineno": 55,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.int64",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Block",
   "tensorflow_probability.python.experimental.auto_batching.instructions.BranchOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.ControlFlowGraph",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Program",
   "tensorflow_probability.python.experimental.auto_batching.instructions.halt_op",
   "tensorflow_probability.python.experimental.auto_batching.instructions.prim_op",
   "tensorflow_probability.python.experimental.auto_batching.instructions.single_type"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.test_programs.synthetic_pattern_program": {
  "lineno": 90,
  "symbols_in_volume": [
   "numpy.int64",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Block",
   "tensorflow_probability.python.experimental.auto_batching.instructions.ControlFlowGraph",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Program",
   "tensorflow_probability.python.experimental.auto_batching.instructions.halt_op",
   "tensorflow_probability.python.experimental.auto_batching.instructions.prim_op",
   "tensorflow_probability.python.experimental.auto_batching.instructions.single_type"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.test_programs.synthetic_pattern_variable_program": {
  "lineno": 118,
  "symbols_in_volume": [
   "numpy.int64",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Block",
   "tensorflow_probability.python.experimental.auto_batching.instructions.ControlFlowGraph",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Program",
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Type",
   "tensorflow_probability.python.experimental.auto_batching.instructions.halt_op",
   "tensorflow_probability.python.experimental.auto_batching.instructions.prim_op"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.FullTensorFlowVariable": {
  "lineno": 267,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.FullTensorFlowVariable._name": {
  "lineno": 281,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.FullTensorFlowVariable.pop": {
  "lineno": 326,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.FullTensorFlowVariable.push": {
  "lineno": 308,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.FullTensorFlowVariable.read": {
  "lineno": 285,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.FullTensorFlowVariable.update": {
  "lineno": 290,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.RegisterTensorFlowVariable": {
  "lineno": 67,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.RegisterTensorFlowVariable.ensure_initialized": {
  "lineno": 108,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.RegisterTensorFlowVariable.pop": {
  "lineno": 104,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.RegisterTensorFlowVariable.push": {
  "lineno": 94,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.RegisterTensorFlowVariable.read": {
  "lineno": 98,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.RegisterTensorFlowVariable.update": {
  "lineno": 79,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.Stack": {
  "lineno": 114,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.Stack._safety_checks": {
  "lineno": 124,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.Stack.pop": {
  "lineno": 128,
  "symbols_in_volume": [
   "tensorflow.compat.v1.assert_greater_equal",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.Stack.push": {
  "lineno": 167,
  "symbols_in_volume": [
   "tensorflow.compat.v1.assert_less",
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.one_hot",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.tile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend": {
  "lineno": 345,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.__init__": {
  "lineno": 348,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.any": {
  "lineno": 708,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_any"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.assert_matching_dtype": {
  "lineno": 467,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.batch_size": {
  "lineno": 485,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.broadcast_to_shape_of": {
  "lineno": 571,
  "symbols_in_volume": [
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.cond": {
  "lineno": 598,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cond",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.create_variable": {
  "lineno": 516,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.experimental.auto_batching.instructions.NullVariable",
   "tensorflow_probability.python.experimental.auto_batching.instructions.TemporaryVariable.empty",
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.NULL",
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.REGISTER",
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.TEMPORARY"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.create_variable.NamedVariable": {
  "lineno": 557,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.create_variable.NamedVariable._name": {
  "lineno": 560,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.equal": {
  "lineno": 698,
  "symbols_in_volume": [
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.fill": {
  "lineno": 497,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.fill",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.full_mask": {
  "lineno": 565,
  "symbols_in_volume": [
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.ones"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.merge_dtypes": {
  "lineno": 431,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.merge_shapes": {
  "lineno": 450,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.not_equal": {
  "lineno": 703,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.not_equal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.prepare_for_cond": {
  "lineno": 616,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.nest.flatten",
   "tensorflow.compat.v2.nest.pack_sequence_as"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.reduce_min": {
  "lineno": 667,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_min"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.run_on_dummies": {
  "lineno": 396,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_map"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.run_on_dummies.mk_placeholder": {
  "lineno": 423,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.static_value": {
  "lineno": 491,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.switch_case": {
  "lineno": 692,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.switch_case"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.type_of": {
  "lineno": 377,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Graph",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.variable_class": {
  "lineno": 370,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.NullVariable",
   "tensorflow_probability.python.experimental.auto_batching.instructions.TemporaryVariable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.where": {
  "lineno": 641,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.while_loop": {
  "lineno": 672,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.while_loop"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.wrap_straightline_callable": {
  "lineno": 712,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.wrap_straightline_callable._ensure_regvars_initialized": {
  "lineno": 723,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.wrap_straightline_callable._f": {
  "lineno": 717,
  "symbols_in_volume": [
   "tensorflow.compat.v2.device",
   "tensorflow.compat.v2.function",
   "tensorflow.compat.v2.xla.experimental.compile",
   "tensorflow_probability.python.experimental.auto_batching.xla.compile_nested_output"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend.wrap_straightline_callable._init_f": {
  "lineno": 728,
  "symbols_in_volume": [
   "six.iteritems",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_map"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.UnsafeStack": {
  "lineno": 226,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend.UnsafeStack._safety_checks": {
  "lineno": 229,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend._control_flow_v2": {
  "lineno": 39,
  "symbols_in_volume": [
   "contextlib.contextmanager",
   "tensorflow.python.ops.control_flow_util.ENABLE_CONTROL_FLOW_V2"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend._create_stack": {
  "lineno": 233,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.int64",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend._generalized_where": {
  "lineno": 49,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend._get_leftmost_dim_size": {
  "lineno": 743,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend_test": {
  "lineno": null,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.bool",
   "hypothesis.extra.numpy.float32",
   "hypothesis.extra.numpy.float64",
   "hypothesis.extra.numpy.int32",
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend_test.TFVariableTest": {
  "lineno": 52,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.experimental.auto_batching.backend_test_lib.VariableTestCase",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend_test.TFVariableTest.testClosingOverTensorDoesntRaise": {
  "lineno": 97,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.float32",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Type"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend_test.TFVariableTest.testClosingOverTensorDoesntRaise.f": {
  "lineno": 99,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend_test.TFVariableTest.testTFSmoke": {
  "lineno": 55,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.float32",
   "hypothesis.extra.numpy.ones",
   "hypothesis.extra.numpy.random.randn",
   "tensorflow.compat.v2.errors.InvalidArgumentError"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend_test.TFVariableTest.testTFVariableRandomOps": {
  "lineno": 67,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.array_shapes",
   "hypothesis.extra.numpy.arrays",
   "hypothesis.extra.numpy.bool",
   "hypothesis.given",
   "hypothesis.settings",
   "hypothesis.strategies.data",
   "hypothesis.strategies.integers",
   "hypothesis.strategies.just",
   "hypothesis.strategies.lists",
   "hypothesis.strategies.one_of",
   "hypothesis.strategies.tuples",
   "tensorflow.compat.v2.errors.InvalidArgumentError"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tf_backend_test.var_init": {
  "lineno": 43,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType",
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.FULL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tfp_xla_test_case": {
  "lineno": null,
  "symbols_in_volume": [
   "absl.flags.DEFINE_string",
   "absl.flags.FLAGS"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching.tfp_xla_test_case.TFPXLATestCase": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.tfp_xla_test_case.TFPXLATestCase.__init__": {
  "lineno": 41,
  "symbols_in_volume": [
   "os.environ"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tfp_xla_test_case.TFPXLATestCase.setUp": {
  "lineno": 47,
  "symbols_in_volume": [
   "tensorflow.python.ops.control_flow_util.ENABLE_CONTROL_FLOW_V2"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tfp_xla_test_case.TFPXLATestCase.tearDown": {
  "lineno": 53,
  "symbols_in_volume": [
   "tensorflow.python.ops.control_flow_util.ENABLE_CONTROL_FLOW_V2"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.tfp_xla_test_case.TFPXLATestCase.wrap_fn": {
  "lineno": 57,
  "symbols_in_volume": [
   "tensorflow.compat.v1.tpu.rewrite",
   "tensorflow.compat.v2.xla.experimental.compile",
   "tensorflow_probability.python.experimental.auto_batching.xla.compile_nested_output"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference": {
  "lineno": null,
  "symbols_in_volume": [
   "absl.logging.debug"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference._add_incompatible_batch_dim": {
  "lineno": 309,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Type",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_map",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_traverse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference._add_incompatible_batch_dim.add_batch_dim_one_var": {
  "lineno": 316,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Type",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_map"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference._is_determined": {
  "lineno": 45,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_traverse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference._merge_tensor_type": {
  "lineno": 55,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference._merge_var": {
  "lineno": 86,
  "symbols_in_volume": [
   "functools.partial",
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Type",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_map2"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference._merge_vars": {
  "lineno": 98,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.Type",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_zip"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference._process_block": {
  "lineno": 149,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.FunctionCallOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PrimOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Type",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_map",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_map2",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_traverse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference._process_graph": {
  "lineno": 197,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference._strip_batch_dim": {
  "lineno": 324,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_map"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference._type_inferring": {
  "lineno": 224,
  "symbols_in_volume": [
   "contextlib.contextmanager"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference.infer_types": {
  "lineno": 235,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference.infer_types_from_signature": {
  "lineno": 254,
  "symbols_in_volume": [
   "six.iteritems"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference.is_inferring": {
  "lineno": 209,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference.signature": {
  "lineno": 289,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference.type_of_pattern": {
  "lineno": 118,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Type",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_map2"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference.type_of_pattern.at_leaf": {
  "lineno": 129,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_map"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.python.experimental.auto_batching.numpy_backend.NumpyBackend",
   "tensorflow_probability.python.experimental.auto_batching.tf_backend.TensorFlowBackend"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference_test.TypeInferenceTest": {
  "lineno": 82,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference_test.TypeInferenceTest.assertSameTypes": {
  "lineno": 85,
  "symbols_in_volume": [
   "six.iteritems",
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_zip"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference_test.TypeInferenceTest.testFibonacciTypeInferenceNumpy": {
  "lineno": 132,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.array",
   "numpy.float32",
   "numpy.float64",
   "numpy.int32",
   "numpy.int64",
   "tensorflow.compat.v1.logging.debug",
   "tensorflow_probability.python.experimental.auto_batching.allocation_strategy.optimize",
   "tensorflow_probability.python.experimental.auto_batching.lowering.lower_function_calls",
   "tensorflow_probability.python.experimental.auto_batching.test_programs.fibonacci_function_calls",
   "tensorflow_probability.python.experimental.auto_batching.type_inference.infer_types"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference_test.TypeInferenceTest.testFibonacciTypeInferenceTF": {
  "lineno": 152,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.array",
   "numpy.float32",
   "numpy.float64",
   "numpy.int32",
   "numpy.int64",
   "tensorflow.compat.v1.logging.debug",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.experimental.auto_batching.allocation_strategy.optimize",
   "tensorflow_probability.python.experimental.auto_batching.lowering.lower_function_calls",
   "tensorflow_probability.python.experimental.auto_batching.test_programs.fibonacci_function_calls",
   "tensorflow_probability.python.experimental.auto_batching.type_inference.infer_types"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference_test.TypeInferenceTest.testIsEvenTypeInferenceNumpy": {
  "lineno": 169,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.array",
   "numpy.bool",
   "numpy.float32",
   "numpy.float64",
   "numpy.int32",
   "numpy.int64",
   "numpy.max",
   "tensorflow.compat.v1.logging.debug",
   "tensorflow_probability.python.experimental.auto_batching.allocation_strategy.optimize",
   "tensorflow_probability.python.experimental.auto_batching.lowering.lower_function_calls",
   "tensorflow_probability.python.experimental.auto_batching.test_programs.is_even_function_calls",
   "tensorflow_probability.python.experimental.auto_batching.type_inference.infer_types"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference_test.TypeInferenceTest.testIsEvenTypeInferenceTF": {
  "lineno": 191,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.array",
   "numpy.bool",
   "numpy.float32",
   "numpy.float64",
   "numpy.int32",
   "numpy.int64",
   "numpy.max",
   "tensorflow.compat.v1.logging.debug",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.experimental.auto_batching.allocation_strategy.optimize",
   "tensorflow_probability.python.experimental.auto_batching.lowering.lower_function_calls",
   "tensorflow_probability.python.experimental.auto_batching.test_programs.is_even_function_calls",
   "tensorflow_probability.python.experimental.auto_batching.type_inference.infer_types"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference_test.TypeInferenceTest.testProductTypeInferenceNumpy": {
  "lineno": 107,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int64",
   "tensorflow_probability.python.experimental.auto_batching.allocation_strategy.optimize",
   "tensorflow_probability.python.experimental.auto_batching.lowering.lower_function_calls",
   "tensorflow_probability.python.experimental.auto_batching.test_programs.synthetic_pattern_variable_program",
   "tensorflow_probability.python.experimental.auto_batching.type_inference.infer_types"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference_test.TypeInferenceTest.testProductTypeInferenceTF": {
  "lineno": 119,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int64",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.experimental.auto_batching.allocation_strategy.optimize",
   "tensorflow_probability.python.experimental.auto_batching.lowering.lower_function_calls",
   "tensorflow_probability.python.experimental.auto_batching.test_programs.synthetic_pattern_variable_program",
   "tensorflow_probability.python.experimental.auto_batching.type_inference.infer_types"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference_test.TypeInferenceTest.testShapeSequenceInferenceNumpy": {
  "lineno": 94,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.float32",
   "numpy.float64",
   "numpy.int32",
   "numpy.int64",
   "numpy.zeros",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pc_var",
   "tensorflow_probability.python.experimental.auto_batching.type_inference.infer_types"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference_test._execute": {
  "lineno": 77,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.virtual_machine.execute"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference_test.shape_sequence_program": {
  "lineno": 48,
  "symbols_in_volume": [
   "functools.partial",
   "numpy.int64",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Block",
   "tensorflow_probability.python.experimental.auto_batching.instructions.ControlFlowGraph",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Program",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Type",
   "tensorflow_probability.python.experimental.auto_batching.instructions.halt_op",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pc_var",
   "tensorflow_probability.python.experimental.auto_batching.instructions.prim_op",
   "tensorflow_probability.python.experimental.auto_batching.instructions.single_type"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.type_inference_test.shape_sequence_program.op": {
  "lineno": 61,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.virtual_machine": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching.virtual_machine._check_initial_dtypes": {
  "lineno": 303,
  "symbols_in_volume": [
   "six.iteritems",
   "tensorflow_probability.python.experimental.auto_batching.instructions.TensorType",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_zip"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.virtual_machine._choose_next_op": {
  "lineno": 223,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.pc_var"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.virtual_machine._initialize_environment": {
  "lineno": 229,
  "symbols_in_volume": [
   "six.iteritems",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Environment.initialize",
   "tensorflow_probability.python.experimental.auto_batching.instructions.detect_batch_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.virtual_machine._initialize_pc": {
  "lineno": 265,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.pc_var",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pc_var.tensors.dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.virtual_machine._run_block": {
  "lineno": 115,
  "symbols_in_volume": [
   "absl.logging.debug",
   "tensorflow_probability.python.experimental.auto_batching.instructions.BranchOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Environment",
   "tensorflow_probability.python.experimental.auto_batching.instructions.GotoOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.IndirectGotoOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PopOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PrimOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PushGotoOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_flatten",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_map",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_zip",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pc_var"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.virtual_machine._run_block.as_index": {
  "lineno": 144,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.virtual_machine._run_block.doit": {
  "lineno": 157,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.virtual_machine._vm_staging": {
  "lineno": 212,
  "symbols_in_volume": [
   "contextlib.contextmanager"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.virtual_machine.execute": {
  "lineno": 38,
  "symbols_in_volume": [
   "absl.logging.vlog",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Environment",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_map"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.virtual_machine.execute.body": {
  "lineno": 95,
  "symbols_in_volume": [
   "functools.partial",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Environment"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.virtual_machine.execute.cond": {
  "lineno": 92,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.virtual_machine.execute.make_run_block_callable": {
  "lineno": 80,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.virtual_machine.execute.make_run_block_callable.run_block_callable": {
  "lineno": 82,
  "symbols_in_volume": [
   "absl.logging.vlog"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.virtual_machine.is_staging": {
  "lineno": 197,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.virtual_machine.select_block_priority": {
  "lineno": 312,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.ControlFlowGraph",
   "tensorflow_probability.python.experimental.auto_batching.instructions.Program"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.virtual_machine.select_block_priority.sync_weight": {
  "lineno": 316,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.FunctionCallOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PrimOp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.xla": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.auto_batching.xla.compile_nested_output": {
  "lineno": 26,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.xla.compile_nested_output._wrapper": {
  "lineno": 41,
  "symbols_in_volume": [
   "tensorflow.compat.v2.nest"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.auto_batching.xla.compile_nested_output._wrapper._flattened": {
  "lineno": 44,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.python.util.all_util.remove_undocumented",
   "tensorflow_probability.python.experimental.edward2.generated_random_variables.rv_dict.keys"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.edward2.generated_random_variables": {
  "lineno": null,
  "symbols_in_volume": [
   "inspect.isclass",
   "six.iteritems",
   "tensorflow_probability.python.distributions.Distribution",
   "tensorflow_probability.python.distributions.__dict__"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.edward2.generated_random_variables._build_custom_rv": {
  "lineno": 42,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.edward2.interceptor.interceptable",
   "tensorflow_probability.python.experimental.edward2.random_variable.RandomVariable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.generated_random_variables._make_random_variable": {
  "lineno": 113,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.generated_random_variables._make_random_variable.func": {
  "lineno": 116,
  "symbols_in_volume": [
   "functools.wraps",
   "inspect.cleandoc",
   "tensorflow_probability.python.experimental.edward2.interceptor.interceptable",
   "tensorflow_probability.python.experimental.edward2.random_variable.RandomVariable",
   "tensorflow_probability.python.internal.docstring_util.expand_docstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.generated_random_variables.as_random_variable": {
  "lineno": 57,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.generated_random_variables_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.edward2.generated_random_variables_test.GeneratedRandomVariablesTest": {
  "lineno": 34,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.edward2.generated_random_variables_test.GeneratedRandomVariablesTest._testValueShapeAndDtype": {
  "lineno": 132,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.generated_random_variables_test.GeneratedRandomVariablesTest.testAllDistributionsAreRVs": {
  "lineno": 189,
  "symbols_in_volume": [
   "inspect.isclass",
   "six.iteritems",
   "tensorflow_probability.distributions.Distribution",
   "tensorflow_probability.distributions.__dict__",
   "tensorflow_probability.edward2.__dict__"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.generated_random_variables_test.GeneratedRandomVariablesTest.testAsRandomVariable": {
  "lineno": 163,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow_probability.distributions.Normal",
   "tensorflow_probability.edward2.make_log_joint_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.generated_random_variables_test.GeneratedRandomVariablesTest.testAsRandomVariable.model_builtin": {
  "lineno": 166,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.generated_random_variables_test.GeneratedRandomVariablesTest.testAsRandomVariable.model_scoped": {
  "lineno": 183,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.as_random_variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.generated_random_variables_test.GeneratedRandomVariablesTest.testAsRandomVariable.model_wrapped": {
  "lineno": 169,
  "symbols_in_volume": [
   "tensorflow_probability.distributions.Normal",
   "tensorflow_probability.edward2.as_random_variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.generated_random_variables_test.GeneratedRandomVariablesTest.testBernoulliDoc": {
  "lineno": 37,
  "symbols_in_volume": [
   "inspect.cleandoc",
   "tensorflow_probability.distributions.Bernoulli.__init__.__doc__",
   "tensorflow_probability.edward2.Bernoulli.__doc__",
   "tensorflow_probability.edward2.Bernoulli.__name__"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.generated_random_variables_test.GeneratedRandomVariablesTest.testBernoulliLogProb": {
  "lineno": 43,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "numpy.zeros",
   "tensorflow_probability.distributions.Bernoulli",
   "tensorflow_probability.edward2.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.generated_random_variables_test.GeneratedRandomVariablesTest.testBernoulliSample": {
  "lineno": 57,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "numpy.array",
   "tensorflow_probability.distributions.Bernoulli",
   "tensorflow_probability.edward2.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.generated_random_variables_test.GeneratedRandomVariablesTest.testShape": {
  "lineno": 83,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.edward2.Bernoulli",
   "tensorflow_probability.edward2.Dirichlet"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.generated_random_variables_test.GeneratedRandomVariablesTest.testValueMismatchRaises": {
  "lineno": 149,
  "symbols_in_volume": [
   "numpy.zeros",
   "tensorflow_probability.edward2.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.generated_random_variables_test.GeneratedRandomVariablesTest.testValueShapeAndDtype": {
  "lineno": 140,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "tensorflow_probability.edward2.Normal",
   "tensorflow_probability.edward2.Poisson"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.generated_random_variables_test.GeneratedRandomVariablesTest.testValueUnknownShape": {
  "lineno": 158,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.edward2.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor._InterceptorStack": {
  "lineno": 35,
  "symbols_in_volume": [
   "threading.local"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor._InterceptorStack.__init__": {
  "lineno": 38,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor.get_next_interceptor": {
  "lineno": 95,
  "symbols_in_volume": [
   "contextlib.contextmanager"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor.interceptable": {
  "lineno": 175,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor.interceptable.func_wrapped": {
  "lineno": 190,
  "symbols_in_volume": [
   "functools.wraps"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor.interception": {
  "lineno": 46,
  "symbols_in_volume": [
   "contextlib.contextmanager"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor.tape": {
  "lineno": 198,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "contextlib.contextmanager"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor.tape.record": {
  "lineno": 236,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest": {
  "lineno": 30,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest.testInterception": {
  "lineno": 33,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "tensorflow_probability.edward2.Bernoulli",
   "tensorflow_probability.edward2.Normal",
   "tensorflow_probability.edward2.interception"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest.testInterception.interceptor": {
  "lineno": 38,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest.testInterceptionException": {
  "lineno": 116,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.get_next_interceptor",
   "tensorflow_probability.edward2.interception"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest.testInterceptionException.f": {
  "lineno": 117,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest.testInterceptionException.interceptor": {
  "lineno": 119,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest.testInterceptionForwarding": {
  "lineno": 67,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.interception"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest.testInterceptionForwarding.double": {
  "lineno": 68,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.interceptable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest.testInterceptionForwarding.model": {
  "lineno": 78,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest.testInterceptionForwarding.set_xy": {
  "lineno": 71,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.interceptable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest.testInterceptionNonForwarding": {
  "lineno": 91,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.interception"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest.testInterceptionNonForwarding.double": {
  "lineno": 92,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest.testInterceptionNonForwarding.model": {
  "lineno": 103,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest.testInterceptionNonForwarding.set_xy": {
  "lineno": 96,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest.testTape": {
  "lineno": 134,
  "symbols_in_volume": [
   "six.iterkeys",
   "tensorflow_probability.edward2.tape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest.testTape.model": {
  "lineno": 135,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest.testTapeInnerForwarding": {
  "lineno": 177,
  "symbols_in_volume": [
   "six.iterkeys",
   "tensorflow_probability.edward2.interception",
   "tensorflow_probability.edward2.tape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest.testTapeInnerForwarding.double": {
  "lineno": 178,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.interceptable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest.testTapeInnerForwarding.model": {
  "lineno": 181,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest.testTapeNoName": {
  "lineno": 148,
  "symbols_in_volume": [
   "six.iterkeys",
   "tensorflow_probability.edward2.tape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest.testTapeNoName.model": {
  "lineno": 149,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest.testTapeOuterForwarding": {
  "lineno": 159,
  "symbols_in_volume": [
   "six.iterkeys",
   "tensorflow_probability.edward2.interception",
   "tensorflow_probability.edward2.tape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest.testTapeOuterForwarding.double": {
  "lineno": 160,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.interceptable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest.testTapeOuterForwarding.model": {
  "lineno": 163,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest.testTrivialInterceptorPreservesLogJoint": {
  "lineno": 50,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.make_log_joint_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest.testTrivialInterceptorPreservesLogJoint.model": {
  "lineno": 55,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest.testTrivialInterceptorPreservesLogJoint.transformed_model": {
  "lineno": 58,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.interception"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.interceptor_test.InterceptorTest.testTrivialInterceptorPreservesLogJoint.trivial_interceptor": {
  "lineno": 51,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.interceptable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations._get_function_inputs": {
  "lineno": 226,
  "symbols_in_volume": [
   "inspect.getargspec",
   "inspect.getfullargspec",
   "six.iteritems"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations.make_log_joint_fn": {
  "lineno": 138,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations.make_log_joint_fn.log_joint_fn": {
  "lineno": 175,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.edward2.interceptor.interception"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations.make_log_joint_fn.log_joint_fn.interceptor": {
  "lineno": 195,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations.make_value_setter": {
  "lineno": 34,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations.make_value_setter.set_values": {
  "lineno": 129,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.edward2.interceptor.interceptable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations_test.ProgramTransformationsTest": {
  "lineno": 30,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnConditional": {
  "lineno": 63,
  "symbols_in_volume": [
   "tensorflow.compat.v2.random.normal",
   "tensorflow_probability.edward2.make_log_joint_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnConditional.linear_regression": {
  "lineno": 65,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.rsqrt",
   "tensorflow.compat.v2.tensordot",
   "tensorflow_probability.edward2.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnConditional.true_log_joint": {
  "lineno": 81,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.rsqrt",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.tensordot",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnDynamic": {
  "lineno": 103,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.random.normal",
   "tensorflow_probability.edward2.make_log_joint_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnDynamic.mixture_of_real_and_int": {
  "lineno": 115,
  "symbols_in_volume": [
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.nn.softplus",
   "tensorflow_probability.edward2.Bernoulli",
   "tensorflow_probability.edward2.Normal",
   "tensorflow_probability.edward2.Poisson"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnDynamic.true_log_joint": {
  "lineno": 124,
  "symbols_in_volume": [
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.nn.softplus",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.Poisson"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnError": {
  "lineno": 187,
  "symbols_in_volume": [
   "tensorflow.compat.v2.random.normal",
   "tensorflow_probability.edward2.make_log_joint_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnError.normal_with_unknown_mean": {
  "lineno": 189,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnTemplate": {
  "lineno": 160,
  "symbols_in_volume": [
   "tensorflow.compat.v1.initialize_all_variables",
   "tensorflow.compat.v1.make_template",
   "tensorflow.compat.v1.trainable_variables",
   "tensorflow_probability.edward2.make_log_joint_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnTemplate.true_log_joint": {
  "lineno": 167,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnTemplate.variational": {
  "lineno": 162,
  "symbols_in_volume": [
   "tensorflow.compat.v1.get_variable",
   "tensorflow_probability.edward2.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnUnconditional": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.compat.v2.random.normal",
   "tensorflow_probability.edward2.make_log_joint_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnUnconditional.normal_with_unknown_mean": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnUnconditional.true_log_joint": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations_test.ProgramTransformationsTest.testMakeValueSetterSetsValues": {
  "lineno": 202,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.interception",
   "tensorflow_probability.edward2.make_value_setter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations_test.ProgramTransformationsTest.testMakeValueSetterSetsValues.normal_with_unknown_mean": {
  "lineno": 203,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations_test.ProgramTransformationsTest.testMakeValueSetterWorksWithPartialAssignment": {
  "lineno": 213,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.interception",
   "tensorflow_probability.edward2.make_log_joint_fn",
   "tensorflow_probability.edward2.make_value_setter",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations_test.ProgramTransformationsTest.testMakeValueSetterWorksWithPartialAssignment.model_with_observed_x": {
  "lineno": 228,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.interception",
   "tensorflow_probability.edward2.make_value_setter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.program_transformations_test.ProgramTransformationsTest.testMakeValueSetterWorksWithPartialAssignment.normal_with_unknown_mean": {
  "lineno": 214,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.register_tensor_conversion_function",
   "tensorflow.python.client.session.register_session_run_conversion_functions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable.RandomVariable": {
  "lineno": 48,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Tensor.__abs__",
   "tensorflow.compat.v2.Tensor.__add__",
   "tensorflow.compat.v2.Tensor.__and__",
   "tensorflow.compat.v2.Tensor.__bool__",
   "tensorflow.compat.v2.Tensor.__div__",
   "tensorflow.compat.v2.Tensor.__floordiv__",
   "tensorflow.compat.v2.Tensor.__ge__",
   "tensorflow.compat.v2.Tensor.__getitem__",
   "tensorflow.compat.v2.Tensor.__gt__",
   "tensorflow.compat.v2.Tensor.__invert__",
   "tensorflow.compat.v2.Tensor.__iter__",
   "tensorflow.compat.v2.Tensor.__le__",
   "tensorflow.compat.v2.Tensor.__lt__",
   "tensorflow.compat.v2.Tensor.__matmul__",
   "tensorflow.compat.v2.Tensor.__mod__",
   "tensorflow.compat.v2.Tensor.__mul__",
   "tensorflow.compat.v2.Tensor.__neg__",
   "tensorflow.compat.v2.Tensor.__nonzero__",
   "tensorflow.compat.v2.Tensor.__or__",
   "tensorflow.compat.v2.Tensor.__pow__",
   "tensorflow.compat.v2.Tensor.__radd__",
   "tensorflow.compat.v2.Tensor.__rand__",
   "tensorflow.compat.v2.Tensor.__rdiv__",
   "tensorflow.compat.v2.Tensor.__rfloordiv__",
   "tensorflow.compat.v2.Tensor.__rmatmul__",
   "tensorflow.compat.v2.Tensor.__rmod__",
   "tensorflow.compat.v2.Tensor.__rmul__",
   "tensorflow.compat.v2.Tensor.__ror__",
   "tensorflow.compat.v2.Tensor.__rpow__",
   "tensorflow.compat.v2.Tensor.__rsub__",
   "tensorflow.compat.v2.Tensor.__rtruediv__",
   "tensorflow.compat.v2.Tensor.__rxor__",
   "tensorflow.compat.v2.Tensor.__sub__",
   "tensorflow.compat.v2.Tensor.__truediv__",
   "tensorflow.compat.v2.Tensor.__xor__"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable.RandomVariable.__eq__": {
  "lineno": 231,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable.RandomVariable.__hash__": {
  "lineno": 228,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable.RandomVariable.__init__": {
  "lineno": 90,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable.RandomVariable.__ne__": {
  "lineno": 234,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable.RandomVariable.__repr__": {
  "lineno": 184,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable.RandomVariable.__str__": {
  "lineno": 173,
  "symbols_in_volume": [
   "tensorflow.python.framework.ops.EagerTensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable.RandomVariable.distribution": {
  "lineno": 123,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable.RandomVariable.dtype": {
  "lineno": 128,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable.RandomVariable.eval": {
  "lineno": 237,
  "symbols_in_volume": [
   "tensorflow.python.client.session"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable.RandomVariable.get_shape": {
  "lineno": 278,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable.RandomVariable.numpy": {
  "lineno": 271,
  "symbols_in_volume": [
   "tensorflow.python.framework.ops.EagerTensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable.RandomVariable.sample_shape": {
  "lineno": 133,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Tensor",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.get_static_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable.RandomVariable.sample_shape_tensor": {
  "lineno": 140,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.Tensor",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable.RandomVariable.shape": {
  "lineno": 155,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable.RandomVariable.value": {
  "lineno": 160,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable._numpy_text": {
  "lineno": 288,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable._operator": {
  "lineno": 33,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable._operator.func": {
  "lineno": 42,
  "symbols_in_volume": [
   "functools.wraps"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable._session_run_conversion_feed_function": {
  "lineno": 303,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable._session_run_conversion_feed_function_for_partial_run": {
  "lineno": 307,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable._session_run_conversion_fetch_function": {
  "lineno": 299,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable._tensor_conversion_function": {
  "lineno": 311,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.FakeDistribution": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.FakeDistribution.__init__": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.FULLY_REPARAMETERIZED"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest": {
  "lineno": 46,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testArrayPriority": {
  "lineno": 285,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testConstructor": {
  "lineno": 49,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.distributions.Poisson"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testConvertToTensor": {
  "lineno": 293,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testGradientsFirstOrder": {
  "lineno": 61,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.math.value_and_gradient",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testGradientsSecondOrder": {
  "lineno": 67,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.math.value_and_gradient",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testNumpy": {
  "lineno": 92,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testOperatorsAbs": {
  "lineno": 258,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testOperatorsAdd": {
  "lineno": 100,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testOperatorsBoolNonzero": {
  "lineno": 280,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testOperatorsDiv": {
  "lineno": 148,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testOperatorsEq": {
  "lineno": 271,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testOperatorsFloordiv": {
  "lineno": 164,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testOperatorsGe": {
  "lineno": 220,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testOperatorsGetitem": {
  "lineno": 228,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testOperatorsGt": {
  "lineno": 212,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testOperatorsHash": {
  "lineno": 265,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testOperatorsLe": {
  "lineno": 204,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testOperatorsLt": {
  "lineno": 196,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testOperatorsMod": {
  "lineno": 180,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testOperatorsMul": {
  "lineno": 132,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testOperatorsNe": {
  "lineno": 275,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testOperatorsNeg": {
  "lineno": 251,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testOperatorsPow": {
  "lineno": 235,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testOperatorsRadd": {
  "lineno": 108,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testOperatorsRdiv": {
  "lineno": 156,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testOperatorsRfloordiv": {
  "lineno": 172,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testOperatorsRmod": {
  "lineno": 188,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testOperatorsRmul": {
  "lineno": 140,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testOperatorsRpow": {
  "lineno": 243,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testOperatorsRsub": {
  "lineno": 124,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testOperatorsSub": {
  "lineno": 116,
  "symbols_in_volume": [
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testRandomTensorSample": {
  "lineno": 364,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.Poisson"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testRepr": {
  "lineno": 83,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testSessionEval": {
  "lineno": 298,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder",
   "tensorflow.compat.v2.errors.InvalidArgumentError",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testSessionRun": {
  "lineno": 312,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder",
   "tensorflow.compat.v2.errors.InvalidArgumentError",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testShape": {
  "lineno": 325,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.edward2.random_variable_test.RandomVariableTest.testStr": {
  "lineno": 74,
  "symbols_in_volume": [
   "re.escape",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.edward2.RandomVariable",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.python.util.all_util.remove_undocumented"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple",
   "tensorflow_probability.python.experimental.auto_batching.truthy"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts.NoUTurnSampler": {
  "lineno": 76,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.TransitionKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts.NoUTurnSampler.__init__": {
  "lineno": 108,
  "symbols_in_volume": [
   "tensorflow_probability.python.math.value_and_gradient",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts.NoUTurnSampler.bootstrap_results": {
  "lineno": 268,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.dtypes.cast",
   "tensorflow.compat.v2.fill",
   "tensorflow.compat.v2.int64",
   "tensorflow.compat.v2.nest.is_nested",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts.NoUTurnSampler.is_calibrated": {
  "lineno": 191,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts.NoUTurnSampler.one_step": {
  "lineno": 195,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.int64",
   "tensorflow.compat.v2.math.reduce_max",
   "tensorflow.compat.v2.nest.is_nested",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.experimental.auto_batching.TensorFlowBackend"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts.NoUTurnSampler.parameters": {
  "lineno": 187,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts._batchwise_reduce_sum": {
  "lineno": 614,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts._binomial_subtree_acceptance_batched": {
  "lineno": 731,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.minimum",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts._choose_direction_batched": {
  "lineno": 744,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.math.random_rademacher"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts._compute_num_states_batched": {
  "lineno": 707,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.int64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts._continue_test_batched": {
  "lineno": 723,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts._embed_no_none_gradient_check": {
  "lineno": 574,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts._embed_no_none_gradient_check.func_wrapped": {
  "lineno": 576,
  "symbols_in_volume": [
   "functools.wraps"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts._expand_dims_under_batch_dim": {
  "lineno": 689,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.is_tensor",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts._has_no_u_turn": {
  "lineno": 619,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts._leapfrog": {
  "lineno": 656,
  "symbols_in_volume": [
   "tensorflow.compat.v2.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts._leapfrog_base": {
  "lineno": 628,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts._log_joint": {
  "lineno": 699,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts._make_evolve_trajectory": {
  "lineno": 289,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.Context"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts._make_evolve_trajectory._build_tree": {
  "lineno": 467,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts._make_evolve_trajectory._build_tree_type": {
  "lineno": 461,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.int64",
   "tensorflow_probability.python.experimental.auto_batching.TensorType"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts._make_evolve_trajectory.evolve_trajectory": {
  "lineno": 361,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts._make_evolve_trajectory.evolve_trajectory_type": {
  "lineno": 357,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts._make_evolve_trajectory.many_steps": {
  "lineno": 319,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts._make_evolve_trajectory.many_steps_type": {
  "lineno": 315,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts._random_bernoulli": {
  "lineno": 715,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int64",
   "tensorflow.compat.v2.less",
   "tensorflow.compat.v2.random.uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts._start_trajectory_batched": {
  "lineno": 587,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts._tf_where": {
  "lineno": 752,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_map2"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest": {
  "lineno": 167,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest._correlated_mvn_nuts": {
  "lineno": 280,
  "symbols_in_volume": [
   "tensorflow.compat.v2.eye",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.experimental.mcmc.NoUTurnSampler",
   "tensorflow_probability.python.distributions.Wishart",
   "tensorflow_probability.python.internal.test_util.test_seed_stream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest._correlated_mvn_nuts.MVNCholPrecisionTriL": {
  "lineno": 286,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.TransformedDistribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest._correlated_mvn_nuts.MVNCholPrecisionTriL.__init__": {
  "lineno": 289,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.bijectors.Affine",
   "tensorflow_probability.python.bijectors.Chain",
   "tensorflow_probability.python.bijectors.Invert",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest.testCorrelatedMVNChain": {
  "lineno": 332,
  "symbols_in_volume": [
   "numpy.mean",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest.testCorrelatedMVNManySteps": {
  "lineno": 348,
  "symbols_in_volume": [
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest.testCorrelatedMVNOneStep": {
  "lineno": 316,
  "symbols_in_volume": [
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest.testDryRunMode": {
  "lineno": 243,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest.testLatentsOfMixedRank": {
  "lineno": 220,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.experimental.mcmc.NoUTurnSampler",
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest.testLatentsOfMixedRank.batched_synthetic_log_prob": {
  "lineno": 223,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest.testLeapfrogStepCounter": {
  "lineno": 170,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "itertools.product",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.experimental.mcmc.NoUTurnSampler",
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest.testLeapfrogStepCounter.never_u_turns_log_prob": {
  "lineno": 172,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest.testLogitBetaTargetConservation": {
  "lineno": 197,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest.testLogitBetaTargetConservation.mk_logit_beta": {
  "lineno": 198,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Invert",
   "tensorflow_probability.python.bijectors.Sigmoid",
   "tensorflow_probability.python.distributions.Beta"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest.testMultivariateNormalNd": {
  "lineno": 213,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest.testProgramProperties": {
  "lineno": 363,
  "symbols_in_volume": [
   "tensorflow_probability.experimental.mcmc.NoUTurnSampler",
   "tensorflow_probability.python.experimental.auto_batching.instructions.PushGotoOp",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pattern_traverse",
   "tensorflow_probability.python.experimental.auto_batching.instructions.pc_var"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest.testProgramProperties.full_var": {
  "lineno": 371,
  "symbols_in_volume": [
   "tensorflow_probability.python.experimental.auto_batching.instructions.VariableAllocation.FULL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest.testProgramProperties.target": {
  "lineno": 364,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest.testSigmoidBetaTargetConservation": {
  "lineno": 204,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest.testSigmoidBetaTargetConservation.mk_sigmoid_beta": {
  "lineno": 205,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Sigmoid",
   "tensorflow_probability.python.distributions.Beta"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest.testStacklessLogitBetaTargetConservation": {
  "lineno": 262,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest.testStacklessLogitBetaTargetConservation.mk_logit_beta": {
  "lineno": 264,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Invert",
   "tensorflow_probability.python.bijectors.Sigmoid",
   "tensorflow_probability.python.distributions.Beta"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest.testStacklessMode": {
  "lineno": 250,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest.testStacklessSigmoidBetaTargetConservation": {
  "lineno": 270,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest.testStacklessSigmoidBetaTargetConservation.mk_sigmoid_beta": {
  "lineno": 272,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Sigmoid",
   "tensorflow_probability.python.distributions.Beta"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest.testStacklessUnivariateNormalTargetConservation": {
  "lineno": 255,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest.testStacklessUnivariateNormalTargetConservation.mk_normal": {
  "lineno": 257,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest.testUnivariateNormalTargetConservation": {
  "lineno": 191,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.NutsTest.testUnivariateNormalTargetConservation.mk_normal": {
  "lineno": 192,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.assert_mvn_target_conservation": {
  "lineno": 135,
  "symbols_in_volume": [
   "tensorflow.compat.v1.assert_equal",
   "tensorflow.compat.v1.assert_greater_equal",
   "tensorflow.compat.v1.assert_less",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.eye",
   "tensorflow.compat.v2.linalg.norm",
   "tensorflow.compat.v2.math.reduce_mean",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.unique",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.MultivariateNormalFullCovariance",
   "tensorflow_probability.python.distributions.internal.statistical_testing.assert_multivariate_true_cdf_equal_on_projections_two_sample",
   "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_cdfs_detectable_by_dkwm_two_sample"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.assert_univariate_target_conservation": {
  "lineno": 78,
  "symbols_in_volume": [
   "tensorflow.compat.v1.assert_greater_equal",
   "tensorflow.compat.v1.assert_less",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.reduce_mean",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.unique",
   "tensorflow_probability.experimental.mcmc.NoUTurnSampler",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_cdf_equal_by_dkwm",
   "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_cdfs_detectable_by_dkwm",
   "tensorflow_probability.util.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.assert_univariate_target_conservation.target": {
  "lineno": 89,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.run_nuts_chain": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.experimental.mcmc.NoUTurnSampler",
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.mcmc.nuts_test.run_nuts_chain.target_log_prob_fn": {
  "lineno": 43,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.substrates": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.python.util.all_util.remove_undocumented",
   "tensorflow.python.util.lazy_loader.LazyLoader"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.substrates.jax": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.substrates.jax._ensure_jax_install": {
  "lineno": 26,
  "symbols_in_volume": [
   "jax"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.substrates.jax.internal": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.substrates.jax.jax_integration_test": {
  "lineno": null,
  "symbols_in_volume": [
   "absl.testing.absltest.main",
   "tensorflow_probability",
   "tensorflow_probability.bijectors",
   "tensorflow_probability.distributions",
   "tensorflow_probability.experimental.substrates.jax"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.substrates.jax.jax_integration_test.JaxIntegrationTest": {
  "lineno": 33,
  "symbols_in_volume": [
   "absl.testing.absltest.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.substrates.jax.jax_integration_test.JaxIntegrationTest.testBijector": {
  "lineno": 35,
  "symbols_in_volume": [
   "jax.jacfwd",
   "jax.jit",
   "jax.numpy.array",
   "jax.numpy.linspace",
   "jax.vmap"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.substrates.jax.jax_integration_test.JaxIntegrationTest.testBijector.f": {
  "lineno": 37,
  "symbols_in_volume": [
   "jax.numpy.arange"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.substrates.jax.jax_integration_test.JaxIntegrationTest.testDistribution": {
  "lineno": 55,
  "symbols_in_volume": [
   "jax.jacfwd",
   "jax.numpy.array",
   "jax.numpy.linspace",
   "jax.vmap"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.substrates.jax.jax_integration_test.JaxIntegrationTest.testDistribution.f": {
  "lineno": 57,
  "symbols_in_volume": [
   "jax.numpy.arange",
   "jax.random.PRNGKey"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.substrates.jax.math": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.substrates.jax.stats": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.substrates.jax.util": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.substrates.numpy": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.substrates.numpy.internal": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.substrates.numpy.math": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.substrates.numpy.numpy_integration_test": {
  "lineno": null,
  "symbols_in_volume": [
   "absl.testing.absltest.main",
   "tensorflow_probability",
   "tensorflow_probability.bijectors",
   "tensorflow_probability.distributions",
   "tensorflow_probability.experimental.substrates.numpy"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.substrates.numpy.numpy_integration_test.NumpyIntegrationTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "absl.testing.absltest.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.experimental.substrates.numpy.numpy_integration_test.NumpyIntegrationTest.testBijector": {
  "lineno": 34,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.substrates.numpy.numpy_integration_test.NumpyIntegrationTest.testBijector.f": {
  "lineno": 36,
  "symbols_in_volume": [
   "numpy.arange"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.substrates.numpy.numpy_integration_test.NumpyIntegrationTest.testDistribution": {
  "lineno": 42,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.substrates.numpy.numpy_integration_test.NumpyIntegrationTest.testDistribution.f": {
  "lineno": 44,
  "symbols_in_volume": [
   "numpy.arange"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.substrates.numpy.rewrite": {
  "lineno": null,
  "symbols_in_volume": [
   "absl.app.run",
   "absl.flags.DEFINE_boolean",
   "absl.flags.FLAGS",
   "sys.path.endswith",
   "sys.path.pop"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.substrates.numpy.rewrite.main": {
  "lineno": 62,
  "symbols_in_volume": [
   "collections.OrderedDict"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.experimental.substrates.numpy.stats": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.experimental.substrates.numpy.util": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.glm": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.python.util.all_util.remove_undocumented"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.glm.family": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.glm.family.Bernoulli": {
  "lineno": 239,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.glm.family.Bernoulli._call": {
  "lineno": 244,
  "symbols_in_volume": [
   "tensorflow.compat.v2.nn.sigmoid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.Bernoulli._log_prob": {
  "lineno": 249,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.BernoulliNormalCDF": {
  "lineno": 253,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.glm.family.BernoulliNormalCDF._call": {
  "lineno": 259,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.BernoulliNormalCDF._log_prob": {
  "lineno": 268,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.CustomExponentialFamily": {
  "lineno": 183,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.glm.family.CustomExponentialFamily.__init__": {
  "lineno": 187,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Bijector"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.CustomExponentialFamily._call": {
  "lineno": 225,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones_like",
   "tensorflow_probability.python.math.gradient.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.CustomExponentialFamily._log_prob": {
  "lineno": 234,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.CustomExponentialFamily.distribution_fn": {
  "lineno": 217,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.CustomExponentialFamily.linear_model_to_mean_fn": {
  "lineno": 221,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.ExponentialFamily": {
  "lineno": 48,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.glm.family.ExponentialFamily.__call__": {
  "lineno": 96,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.ExponentialFamily.__init__": {
  "lineno": 70,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.ExponentialFamily.__repr__": {
  "lineno": 169,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.ExponentialFamily.__str__": {
  "lineno": 164,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.ExponentialFamily._call": {
  "lineno": 92,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.ExponentialFamily._log_prob": {
  "lineno": 134,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.ExponentialFamily._name_scope": {
  "lineno": 174,
  "symbols_in_volume": [
   "contextlib.contextmanager",
   "tensorflow.compat.v1.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.ExponentialFamily.is_canonical": {
  "lineno": 82,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.ExponentialFamily.log_prob": {
  "lineno": 138,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.ExponentialFamily.name": {
  "lineno": 87,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.GammaExp": {
  "lineno": 276,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.glm.family.GammaExp._call": {
  "lineno": 282,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.GammaExp._log_prob": {
  "lineno": 287,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.exp",
   "tensorflow_probability.python.distributions.Gamma"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.GammaSoftplus": {
  "lineno": 293,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.glm.family.GammaSoftplus._call": {
  "lineno": 299,
  "symbols_in_volume": [
   "tensorflow.compat.v2.nn.sigmoid",
   "tensorflow.compat.v2.nn.softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.GammaSoftplus._log_prob": {
  "lineno": 305,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.nn.softplus",
   "tensorflow_probability.python.distributions.Gamma"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.LogNormal": {
  "lineno": 339,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.glm.family.LogNormal._call": {
  "lineno": 346,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.LogNormal._log_prob": {
  "lineno": 351,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.sqrt",
   "tensorflow.compat.v2.math.log",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.LogNormalSoftplus": {
  "lineno": 360,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.glm.family.LogNormalSoftplus._call": {
  "lineno": 367,
  "symbols_in_volume": [
   "tensorflow.compat.v2.nn.sigmoid",
   "tensorflow.compat.v2.nn.softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.LogNormalSoftplus._log_prob": {
  "lineno": 373,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.sqrt",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.nn.softplus",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.Normal": {
  "lineno": 382,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.glm.family.Normal._call": {
  "lineno": 387,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.Normal._log_prob": {
  "lineno": 392,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.NormalReciprocal": {
  "lineno": 397,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.glm.family.NormalReciprocal._call": {
  "lineno": 402,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.NormalReciprocal._log_prob": {
  "lineno": 408,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.Poisson": {
  "lineno": 312,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.glm.family.Poisson._call": {
  "lineno": 317,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.Poisson._log_prob": {
  "lineno": 321,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Poisson"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.PoissonSoftplus": {
  "lineno": 325,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.glm.family.PoissonSoftplus._call": {
  "lineno": 330,
  "symbols_in_volume": [
   "tensorflow.compat.v2.nn.sigmoid",
   "tensorflow.compat.v2.nn.softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.PoissonSoftplus._log_prob": {
  "lineno": 335,
  "symbols_in_volume": [
   "tensorflow.compat.v2.nn.softplus",
   "tensorflow_probability.python.distributions.Poisson"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.glm.family_test.BernoulliNormalCDFTest": {
  "lineno": 116,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.glm.family_test.BernoulliNormalCDFTest.setUp": {
  "lineno": 119,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow_probability.glm.BernoulliNormalCDF",
   "tensorflow_probability.glm.CustomExponentialFamily",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test.BernoulliNormalCDFTest.setUp.normal_cdf": {
  "lineno": 122,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test.BernoulliTest": {
  "lineno": 106,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.glm.family_test.BernoulliTest.setUp": {
  "lineno": 109,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.nn.sigmoid",
   "tensorflow_probability.glm.Bernoulli",
   "tensorflow_probability.glm.CustomExponentialFamily",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test.GammaExpTest": {
  "lineno": 131,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.glm.family_test.GammaExpTest.setUp": {
  "lineno": 134,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v2.exp",
   "tensorflow_probability.glm.CustomExponentialFamily",
   "tensorflow_probability.glm.GammaExp",
   "tensorflow_probability.python.distributions.Gamma"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test.GammaSoftplusTest": {
  "lineno": 143,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.glm.family_test.GammaSoftplusTest.setUp": {
  "lineno": 146,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v2.nn.softplus",
   "tensorflow_probability.glm.CustomExponentialFamily",
   "tensorflow_probability.glm.GammaSoftplus",
   "tensorflow_probability.python.distributions.Gamma"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test.LogNormalSoftplusTest": {
  "lineno": 165,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.glm.family_test.LogNormalSoftplusTest.setUp": {
  "lineno": 168,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.nn.softplus",
   "tensorflow_probability.glm.CustomExponentialFamily",
   "tensorflow_probability.glm.LogNormalSoftplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test.LogNormalTest": {
  "lineno": 155,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.glm.family_test.LogNormalTest.setUp": {
  "lineno": 158,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.exp",
   "tensorflow_probability.glm.CustomExponentialFamily",
   "tensorflow_probability.glm.LogNormal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test.NormalReciprocalTest": {
  "lineno": 185,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.glm.family_test.NormalReciprocalTest.setUp": {
  "lineno": 188,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.math.reciprocal",
   "tensorflow_probability.glm.CustomExponentialFamily",
   "tensorflow_probability.glm.NormalReciprocal",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test.NormalTest": {
  "lineno": 175,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.glm.family_test.NormalTest.setUp": {
  "lineno": 178,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.glm.CustomExponentialFamily",
   "tensorflow_probability.glm.Normal",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test.PoissonSoftplusTest": {
  "lineno": 205,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.glm.family_test.PoissonSoftplusTest.setUp": {
  "lineno": 208,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.nn.softplus",
   "tensorflow_probability.glm.CustomExponentialFamily",
   "tensorflow_probability.glm.PoissonSoftplus",
   "tensorflow_probability.python.distributions.Poisson"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test.PoissonTest": {
  "lineno": 195,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.glm.family_test.PoissonTest.setUp": {
  "lineno": 198,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.exp",
   "tensorflow_probability.glm.CustomExponentialFamily",
   "tensorflow_probability.glm.Poisson",
   "tensorflow_probability.python.distributions.Poisson"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test._GLMTestHarness": {
  "lineno": 39,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.glm.family_test._GLMTestHarness.testCallWorksCorrectly": {
  "lineno": 52,
  "symbols_in_volume": [
   "numpy.linspace",
   "numpy.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test._GLMTestHarness.testCorrectIsCanonicalSpecification": {
  "lineno": 41,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.linspace",
   "numpy.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test._GLMTestHarness.testLogProbWorksCorrectly": {
  "lineno": 82,
  "symbols_in_volume": [
   "numpy.linspace",
   "numpy.stack",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.identity"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test.make_lognormal": {
  "lineno": 32,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.sqrt",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log",
   "tensorflow_probability.python.distributions.LogNormal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.glm.fisher_scoring.calculate_linear_predictor": {
  "lineno": 657,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.linalg.matvec"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring.convergence_criteria_small_relative_norm_weights_change": {
  "lineno": 476,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring.convergence_criteria_small_relative_norm_weights_change.convergence_criteria_fn": {
  "lineno": 505,
  "symbols_in_volume": [
   "tensorflow.compat.v2.norm",
   "tensorflow.compat.v2.reduce_all"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring.fit": {
  "lineno": 37,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.int32",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.logical_not",
   "tensorflow.compat.v2.while_loop",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring.fit._body": {
  "lineno": 210,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring.fit_one_step": {
  "lineno": 272,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.inf",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.linalg.lstsq",
   "tensorflow.compat.v2.math.is_finite",
   "tensorflow.compat.v2.math.rsqrt",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.not_equal",
   "tensorflow_probability.python.internal.distribution_util.maybe_get_static_value",
   "tensorflow_probability.python.internal.prefer_static.cond",
   "tensorflow_probability.python.internal.prefer_static.logical_or",
   "tensorflow_probability.python.internal.prefer_static.reduce_all"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring.fit_one_step._embed_l2_regularization": {
  "lineno": 410,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.eye",
   "tensorflow.compat.v2.linalg.tensor_diag",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.python.internal.distribution_util.pad",
   "tensorflow_probability.python.internal.prefer_static.concat"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring.fit_one_step.mask_if_invalid": {
  "lineno": 371,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.fill",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring.num_cols": {
  "lineno": 669,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring.prepare_args": {
  "lineno": 551,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.zeros",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test.FitTestFast": {
  "lineno": 33,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test.FitTestFast.make_dataset": {
  "lineno": 39,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.sqrt",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.linalg.norm",
   "tensorflow.compat.v2.tensordot",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.SeedStream",
   "tensorflow_probability.python.distributions.Uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test.FitTestFast.testBatchedOperationConverges": {
  "lineno": 154,
  "symbols_in_volume": [
   "tensorflow_probability.glm.Normal",
   "tensorflow_probability.glm.fit"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test.FitTestFast.testLinearWorksCorrectly": {
  "lineno": 112,
  "symbols_in_volume": [
   "numpy.mean",
   "tensorflow_probability.glm.Normal",
   "tensorflow_probability.glm.fit"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test.FitTestFast.testOffsetWorksCorrectly": {
  "lineno": 169,
  "symbols_in_volume": [
   "numpy.mean",
   "tensorflow.compat.v2.fill",
   "tensorflow_probability.glm.BernoulliNormalCDF",
   "tensorflow_probability.glm.fit"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test.FitTestFast.testProbitWorksCorrectly": {
  "lineno": 68,
  "symbols_in_volume": [
   "numpy.mean",
   "tensorflow_probability.glm.BernoulliNormalCDF",
   "tensorflow_probability.glm.fit"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test.FitTestFast.testRegularizationWithPenaltyFactor": {
  "lineno": 206,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.array",
   "tensorflow_probability.glm.Normal",
   "tensorflow_probability.glm.fit"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test.FitTestSlow": {
  "lineno": 261,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test.FitTestSlow._testL2RegularizationWorksCorrectly": {
  "lineno": 268,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.glm.BernoulliNormalCDF",
   "tensorflow_probability.glm.fit"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test.FitTestSlow.testStaticL2RegularizationWorksCorrectly": {
  "lineno": 334,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.glm.proximal_hessian._fit_sparse_exact_hessian": {
  "lineno": 492,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow_probability.optimizer.proximal_hessian_sparse_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian._fit_sparse_exact_hessian._grad_and_hessian_loss_fn": {
  "lineno": 524,
  "symbols_in_volume": [
   "tensorflow.compat.v2.gradients",
   "tensorflow.compat.v2.hessians",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian._fit_sparse_exact_hessian._neg_log_likelihood": {
  "lineno": 519,
  "symbols_in_volume": [
   "tensorflow_probability.python.math.linalg.sparse_or_dense_matvecmul"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian._grad_neg_log_likelihood_and_fim": {
  "lineno": 42,
  "symbols_in_volume": [
   "numpy.inf",
   "tensorflow.compat.v2.math.is_finite",
   "tensorflow.compat.v2.not_equal",
   "tensorflow_probability.python.math.linalg.sparse_or_dense_matvecmul"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian._grad_neg_log_likelihood_and_fim._mask_if_invalid": {
  "lineno": 96,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.fill",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian.fit_sparse": {
  "lineno": 236,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow_probability.optimizer.proximal_hessian_sparse_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian.fit_sparse._grad_neg_log_likelihood_and_fim_fn": {
  "lineno": 474,
  "symbols_in_volume": [
   "tensorflow_probability.python.math.linalg.sparse_or_dense_matvecmul"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian.fit_sparse_one_step": {
  "lineno": 111,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow_probability.optimizer.proximal_hessian_sparse_one_step",
   "tensorflow_probability.python.math.linalg.sparse_or_dense_matvecmul"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test.ProximalHessianTestDynamicShapeFloat32": {
  "lineno": 395,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test.ProximalHessianTestDynamicShapeFloat64": {
  "lineno": 407,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float64",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test.ProximalHessianTestStaticShapeFloat32": {
  "lineno": 389,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test.ProximalHessianTestStaticShapeFloat64": {
  "lineno": 401,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float64",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest._adjust_dtype_and_shape_hints": {
  "lineno": 96,
  "symbols_in_volume": [
   "tensorflow.compat.v2.SparseTensor",
   "tensorflow.compat.v2.cast"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest._make_dataset": {
  "lineno": 47,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.sqrt",
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.linalg.norm",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.SeedStream",
   "tensorflow_probability.python.distributions.Uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest._make_placeholder": {
  "lineno": 92,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest._prepare_inputs_for_fit_sparse": {
  "lineno": 115,
  "symbols_in_volume": [
   "numpy.zeros",
   "tensorflow_probability.math.dense_to_sparse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest._test_compare_batch_to_single_instance": {
  "lineno": 301,
  "symbols_in_volume": [
   "numpy.stack",
   "tensorflow_probability.glm.Normal",
   "tensorflow_probability.glm.fit_sparse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest._test_fit_glm_from_data": {
  "lineno": 182,
  "symbols_in_volume": [
   "tensorflow_probability.glm.fit_sparse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest.testCompareBatchResultsToSingleInstance_Dense": {
  "lineno": 382,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest.testCompareBatchResultsToSingleInstance_Sparse": {
  "lineno": 385,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest.testFitGLMFromData_BatchOfRank1": {
  "lineno": 243,
  "symbols_in_volume": [
   "tensorflow_probability.glm.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest.testFitGLMFromData_BatchOfRank2": {
  "lineno": 252,
  "symbols_in_volume": [
   "tensorflow_probability.glm.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest.testFitGLMFromData_SimilarModel": {
  "lineno": 222,
  "symbols_in_volume": [
   "tensorflow_probability.glm.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest.testFitGLMFromData_SingleBatch": {
  "lineno": 234,
  "symbols_in_volume": [
   "tensorflow_probability.glm.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest.testFitGLMFromData_SparseTensorBatchOfRank1": {
  "lineno": 271,
  "symbols_in_volume": [
   "tensorflow_probability.glm.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest.testFitGLMFromData_SparseTensorBatchOfRank2": {
  "lineno": 281,
  "symbols_in_volume": [
   "tensorflow_probability.glm.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest.testFitGLMFromData_SparseTensorBatchOfRank3": {
  "lineno": 291,
  "symbols_in_volume": [
   "tensorflow_probability.glm.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest.testFitGLMFromData_SparseTensorSingleBatch": {
  "lineno": 261,
  "symbols_in_volume": [
   "tensorflow_probability.glm.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest.testTwoSweepsAreBetterThanOne": {
  "lineno": 133,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.glm.BernoulliNormalCDF",
   "tensorflow_probability.glm.fit_sparse_one_step"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest.testTwoSweepsAreBetterThanOne._joint_log_prob": {
  "lineno": 173,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.matvec",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.internal.assert_util": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v1.assert_equal",
   "tensorflow.compat.v1.assert_greater",
   "tensorflow.compat.v1.assert_greater_equal",
   "tensorflow.compat.v1.assert_integer",
   "tensorflow.compat.v1.assert_less",
   "tensorflow.compat.v1.assert_less_equal",
   "tensorflow.compat.v1.assert_near",
   "tensorflow.compat.v1.assert_negative",
   "tensorflow.compat.v1.assert_non_negative",
   "tensorflow.compat.v1.assert_non_positive",
   "tensorflow.compat.v1.assert_none_equal",
   "tensorflow.compat.v1.assert_positive",
   "tensorflow.compat.v1.assert_rank",
   "tensorflow.compat.v1.assert_rank_at_least",
   "tensorflow.compat.v1.assert_rank_in"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.assert_util.assert_finite": {
  "lineno": 46,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.isfinite",
   "tensorflow.compat.v1.assert_equal",
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.math.is_finite",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.assert_util.assert_rank_at_most": {
  "lineno": 78,
  "symbols_in_volume": [
   "tensorflow.compat.v1.assert_less_equal",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.backend.numpy.compat.function",
   "tensorflow_probability.python.internal.backend.numpy.compat.v2.Module",
   "tensorflow_probability.python.internal.backend.numpy.compat.v2.Variable",
   "tensorflow_probability.python.internal.backend.numpy.debugging.Assert",
   "tensorflow_probability.python.internal.backend.numpy.debugging.check_numerics",
   "tensorflow_probability.python.internal.backend.numpy.linalg.eye",
   "tensorflow_probability.python.internal.backend.numpy.linalg.matmul"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy._utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy._utils._FakeModule": {
  "lineno": 82,
  "symbols_in_volume": [
   "types.ModuleType"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.backend.numpy._utils._FakeModule.__dir__": {
  "lineno": 90,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy._utils._FakeModule.__getattr__": {
  "lineno": 93,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy._utils._FakeModule.__init__": {
  "lineno": 85,
  "symbols_in_volume": [
   "types.ModuleType.__init__"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy._utils.common_dtype": {
  "lineno": 59,
  "symbols_in_volume": [
   "tensorflow.compat.v2.as_dtype",
   "tensorflow.compat.v2.nest.flatten"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy._utils.copy_docstring": {
  "lineno": 41,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy._utils.is_complex": {
  "lineno": 77,
  "symbols_in_volume": [
   "numpy.complexfloating",
   "numpy.dtype",
   "numpy.issubdtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy._utils.numpy_dtype": {
  "lineno": 51,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy._utils.try_import": {
  "lineno": 97,
  "symbols_in_volume": [
   "importlib.import_module"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.compat": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2",
   "tensorflow_probability.python.internal.backend.numpy._utils",
   "tensorflow_probability.python.internal.backend.numpy.v2.function"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.control_flow": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.while_loop",
   "tensorflow_probability.python.internal.backend.numpy._utils.copy_docstring"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.control_flow._while_loop": {
  "lineno": 39,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.debugging": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.debugging.Assert",
   "tensorflow.compat.v2.debugging.check_numerics",
   "tensorflow_probability.python.internal.backend.numpy._utils.copy_docstring"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype": {
  "lineno": null,
  "symbols_in_volume": [
   "numpy",
   "numpy.bool",
   "numpy.complex128",
   "numpy.complex64",
   "numpy.double",
   "numpy.dtype",
   "numpy.float16",
   "numpy.float32",
   "numpy.float64",
   "numpy.int16",
   "numpy.int32",
   "numpy.int64",
   "numpy.int8",
   "numpy.real",
   "numpy.uint16",
   "numpy.uint32",
   "numpy.uint64",
   "numpy.uint8",
   "numpy.zeros",
   "tensorflow.compat.v2.as_dtype",
   "tensorflow_probability.python.internal.backend.numpy._utils.copy_docstring"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.errors": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2",
   "tensorflow.compat.v2.errors.InvalidArgumentError",
   "tensorflow.compat.v2.errors.UnimplementedError"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.functional_ops": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.map_fn",
   "tensorflow.compat.v2.scan",
   "tensorflow_probability.python.internal.backend.numpy._utils.copy_docstring"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.functional_ops._map_fn": {
  "lineno": 35,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.functional_ops._scan": {
  "lineno": 47,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.gen_linear_operators": {
  "lineno": null,
  "symbols_in_volume": [
   "absl.app.run",
   "absl.flags.DEFINE_string",
   "absl.flags.FLAGS",
   "sys.path.endswith",
   "sys.path.pop"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.gen_linear_operators.gen_module": {
  "lineno": 72,
  "symbols_in_volume": [
   "importlib.import_module",
   "inspect.getsource",
   "re.sub"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.gen_linear_operators.main": {
  "lineno": 131,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.initializers": {
  "lineno": null,
  "symbols_in_volume": [
   "numpy.ones",
   "tensorflow.compat.v1.initializers.constant",
   "tensorflow.compat.v2.dtypes.float32",
   "tensorflow_probability.python.internal.backend.numpy._utils.copy_docstring"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.keras": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.keras_layers": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.keras_layers.Layer": {
  "lineno": 29,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg_impl": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple",
   "numpy.diagonal",
   "numpy.linalg.cholesky",
   "numpy.linalg.det",
   "numpy.linalg.matrix_rank",
   "numpy.linalg.norm",
   "numpy.linalg.pinv",
   "numpy.linalg.slogdet",
   "numpy.reshape",
   "tensorflow.compat.v2.eye",
   "tensorflow.compat.v2.linalg.adjoint",
   "tensorflow.compat.v2.linalg.band_part",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.linalg.cholesky_solve",
   "tensorflow.compat.v2.linalg.det",
   "tensorflow.compat.v2.linalg.diag",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.linalg.lu",
   "tensorflow.compat.v2.linalg.matmul",
   "tensorflow.compat.v2.linalg.matrix_rank",
   "tensorflow.compat.v2.linalg.matrix_transpose",
   "tensorflow.compat.v2.linalg.pinv",
   "tensorflow.compat.v2.linalg.set_diag",
   "tensorflow.compat.v2.linalg.slogdet",
   "tensorflow.compat.v2.linalg.triangular_solve",
   "tensorflow.compat.v2.norm",
   "tensorflow_probability.python.internal.backend.numpy._utils.copy_docstring",
   "tensorflow_probability.python.internal.backend.numpy._utils.try_import"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg_impl._band_part": {
  "lineno": 78,
  "symbols_in_volume": [
   "numpy.tril",
   "numpy.triu"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg_impl._cholesky_solve": {
  "lineno": 88,
  "symbols_in_volume": [
   "numpy.broadcast",
   "numpy.broadcast_to",
   "numpy.empty_like",
   "numpy.prod",
   "numpy.size",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg_impl._diag": {
  "lineno": 113,
  "symbols_in_volume": [
   "numpy.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg_impl._eye": {
  "lineno": 120,
  "symbols_in_volume": [
   "numpy.eye",
   "numpy.ones",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.internal.backend.numpy._utils.numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg_impl._lu": {
  "lineno": 150,
  "symbols_in_volume": [
   "jax.lax_linalg.lu_pivots_to_permutation",
   "numpy.empty",
   "numpy.prod",
   "numpy.size",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.internal.backend.numpy._utils.numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg_impl._lu_pivot_to_permutation": {
  "lineno": 129,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg_impl._matmul": {
  "lineno": 181,
  "symbols_in_volume": [
   "numpy.matmul"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg_impl._matrix_transpose": {
  "lineno": 172,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.conj",
   "numpy.swapaxes"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg_impl._set_diag": {
  "lineno": 196,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.eye",
   "numpy.newaxis",
   "numpy.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg_impl._triangular_solve": {
  "lineno": 202,
  "symbols_in_volume": [
   "numpy.broadcast",
   "numpy.broadcast_to",
   "numpy.empty",
   "numpy.prod",
   "numpy.size",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.misc": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.argsort",
   "tensorflow.compat.v2.sort",
   "tensorflow_probability.python.internal.backend.numpy._utils.copy_docstring"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.misc._argsort": {
  "lineno": 51,
  "symbols_in_volume": [
   "numpy.argsort",
   "numpy.negative"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.misc._sort": {
  "lineno": 62,
  "symbols_in_volume": [
   "numpy.negative",
   "numpy.sort"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.nn": {
  "lineno": null,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.log",
   "numpy.max",
   "tensorflow.compat.v2.nn.l2_normalize",
   "tensorflow.compat.v2.nn.relu",
   "tensorflow.compat.v2.nn.sigmoid_cross_entropy_with_logits",
   "tensorflow.compat.v2.nn.softplus",
   "tensorflow.compat.v2.nn.sparse_softmax_cross_entropy_with_logits",
   "tensorflow_probability.python.internal.backend.numpy._utils.copy_docstring",
   "tensorflow_probability.python.internal.backend.numpy.numpy_math.l2_normalize",
   "tensorflow_probability.python.internal.backend.numpy.numpy_math.softplus"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.nn._sigmoid_cross_entropy_with_logits": {
  "lineno": 48,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.exp",
   "numpy.log1p",
   "numpy.maximum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.nn._sparse_softmax_cross_entropy_with_logits": {
  "lineno": 57,
  "symbols_in_volume": [
   "numpy.reshape",
   "numpy.sum",
   "tensorflow_probability.python.internal.backend.numpy.numpy_array.one_hot",
   "tensorflow_probability.python.internal.backend.numpy.numpy_math.reduce_logsumexp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_array": {
  "lineno": null,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.array",
   "numpy.concatenate",
   "numpy.expand_dims",
   "numpy.linspace",
   "numpy.meshgrid",
   "numpy.ones",
   "numpy.reshape",
   "numpy.roll",
   "numpy.split",
   "numpy.squeeze",
   "numpy.stack",
   "numpy.tile",
   "numpy.where",
   "numpy.zeros",
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.fill",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.gather_nd",
   "tensorflow.compat.v2.linspace",
   "tensorflow.compat.v2.meshgrid",
   "tensorflow.compat.v2.norm",
   "tensorflow.compat.v2.one_hot",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.pad",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.reverse",
   "tensorflow.compat.v2.roll",
   "tensorflow.compat.v2.searchsorted",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size",
   "tensorflow.compat.v2.slice",
   "tensorflow.compat.v2.split",
   "tensorflow.compat.v2.squeeze",
   "tensorflow.compat.v2.stack",
   "tensorflow.compat.v2.tile",
   "tensorflow.compat.v2.transpose",
   "tensorflow.compat.v2.unstack",
   "tensorflow.compat.v2.zeros",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.backend.numpy._utils.copy_docstring",
   "tensorflow_probability.python.internal.backend.numpy._utils.numpy_dtype",
   "tensorflow_probability.python.internal.backend.numpy.linalg_impl.norm",
   "tensorflow_probability.python.internal.backend.numpy.ops.convert_to_tensor"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_array._gather": {
  "lineno": 72,
  "symbols_in_volume": [
   "numpy.take"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_array._gather_nd": {
  "lineno": 89,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_array._one_hot": {
  "lineno": 98,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.arange",
   "numpy.float32",
   "numpy.moveaxis",
   "numpy.tile",
   "numpy.where",
   "numpy.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_array._ones_like": {
  "lineno": 125,
  "symbols_in_volume": [
   "numpy.generic",
   "numpy.ndarray",
   "numpy.ones",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.internal.backend.numpy._utils.numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_array._pad": {
  "lineno": 133,
  "symbols_in_volume": [
   "numpy.pad"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_array._reverse": {
  "lineno": 145,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.flip"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_array._searchsorted": {
  "lineno": 153,
  "symbols_in_volume": [
   "numpy.searchsorted",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_array._shape": {
  "lineno": 163,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.internal.backend.numpy._utils.numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_array._size": {
  "lineno": 167,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.prod",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.internal.backend.numpy._utils.numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_array._slice": {
  "lineno": 174,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_array._split": {
  "lineno": 180,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.cumsum",
   "numpy.split"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_array._transpose": {
  "lineno": 195,
  "symbols_in_volume": [
   "numpy.conjugate",
   "numpy.transpose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_array._zeros_like": {
  "lineno": 200,
  "symbols_in_volume": [
   "numpy.generic",
   "numpy.ndarray",
   "numpy.zeros",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.backend.numpy._utils.numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_logging": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v1.logging.DEBUG",
   "tensorflow.compat.v1.logging.ERROR",
   "tensorflow.compat.v1.logging.FATAL",
   "tensorflow.compat.v1.logging.INFO",
   "tensorflow.compat.v1.logging.TaskLevelStatusMessage",
   "tensorflow.compat.v1.logging.WARN",
   "tensorflow.compat.v1.logging.debug",
   "tensorflow.compat.v1.logging.error",
   "tensorflow.compat.v1.logging.fatal",
   "tensorflow.compat.v1.logging.flush",
   "tensorflow.compat.v1.logging.get_verbosity",
   "tensorflow.compat.v1.logging.info",
   "tensorflow.compat.v1.logging.log",
   "tensorflow.compat.v1.logging.log_every_n",
   "tensorflow.compat.v1.logging.log_first_n",
   "tensorflow.compat.v1.logging.log_if",
   "tensorflow.compat.v1.logging.set_verbosity",
   "tensorflow.compat.v1.logging.vlog",
   "tensorflow.compat.v1.logging.warn",
   "tensorflow.compat.v1.logging.warning",
   "tensorflow_probability.python.internal.backend.numpy._utils.copy_docstring"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_logging._TaskLevelStatusMessage": {
  "lineno": 53,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_logging._debug": {
  "lineno": 57,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_logging._error": {
  "lineno": 61,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_logging._fatal": {
  "lineno": 65,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_logging._flush": {
  "lineno": 69,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_logging._get_verbosity": {
  "lineno": 73,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_logging._info": {
  "lineno": 77,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_logging._log": {
  "lineno": 81,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_logging._log_every_n": {
  "lineno": 85,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_logging._log_first_n": {
  "lineno": 89,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_logging._log_if": {
  "lineno": 93,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_logging._set_verbosity": {
  "lineno": 97,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_logging._vlog": {
  "lineno": 101,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_logging._warn": {
  "lineno": 105,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_logging._warning": {
  "lineno": 109,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_math": {
  "lineno": null,
  "symbols_in_volume": [
   "functools.partial",
   "numpy.abs",
   "numpy.add",
   "numpy.all",
   "numpy.angle",
   "numpy.any",
   "numpy.arccos",
   "numpy.arccosh",
   "numpy.arcsin",
   "numpy.arcsinh",
   "numpy.arctan",
   "numpy.arctan2",
   "numpy.arctanh",
   "numpy.argmax",
   "numpy.argmin",
   "numpy.argsort",
   "numpy.around",
   "numpy.array",
   "numpy.broadcast_to",
   "numpy.ceil",
   "numpy.conj",
   "numpy.cos",
   "numpy.cosh",
   "numpy.count_nonzero",
   "numpy.cumprod",
   "numpy.cumsum",
   "numpy.divide",
   "numpy.equal",
   "numpy.exp",
   "numpy.expm1",
   "numpy.floor",
   "numpy.floor_divide",
   "numpy.greater",
   "numpy.greater_equal",
   "numpy.imag",
   "numpy.isfinite",
   "numpy.isinf",
   "numpy.isnan",
   "numpy.less",
   "numpy.less_equal",
   "numpy.linalg.norm",
   "numpy.log",
   "numpy.log1p",
   "numpy.logical_and",
   "numpy.logical_not",
   "numpy.logical_or",
   "numpy.logical_xor",
   "numpy.max",
   "numpy.maximum",
   "numpy.mean",
   "numpy.min",
   "numpy.minimum",
   "numpy.multiply",
   "numpy.negative",
   "numpy.not_equal",
   "numpy.polyval",
   "numpy.power",
   "numpy.prod",
   "numpy.real",
   "numpy.reciprocal",
   "numpy.round",
   "numpy.sign",
   "numpy.sin",
   "numpy.sinh",
   "numpy.sqrt",
   "numpy.square",
   "numpy.std",
   "numpy.subtract",
   "numpy.sum",
   "numpy.tan",
   "numpy.tanh",
   "numpy.true_divide",
   "numpy.var",
   "numpy.where",
   "numpy.zeros_like",
   "tensorflow.compat.v2.int64",
   "tensorflow.compat.v2.math.abs",
   "tensorflow.compat.v2.math.accumulate_n",
   "tensorflow.compat.v2.math.acos",
   "tensorflow.compat.v2.math.acosh",
   "tensorflow.compat.v2.math.add",
   "tensorflow.compat.v2.math.add_n",
   "tensorflow.compat.v2.math.angle",
   "tensorflow.compat.v2.math.argmax",
   "tensorflow.compat.v2.math.argmin",
   "tensorflow.compat.v2.math.asin",
   "tensorflow.compat.v2.math.asinh",
   "tensorflow.compat.v2.math.atan",
   "tensorflow.compat.v2.math.atan2",
   "tensorflow.compat.v2.math.atanh",
   "tensorflow.compat.v2.math.bessel_i0",
   "tensorflow.compat.v2.math.bessel_i0e",
   "tensorflow.compat.v2.math.bessel_i1",
   "tensorflow.compat.v2.math.bessel_i1e",
   "tensorflow.compat.v2.math.betainc",
   "tensorflow.compat.v2.math.bincount",
   "tensorflow.compat.v2.math.ceil",
   "tensorflow.compat.v2.math.conj",
   "tensorflow.compat.v2.math.cos",
   "tensorflow.compat.v2.math.cosh",
   "tensorflow.compat.v2.math.count_nonzero",
   "tensorflow.compat.v2.math.cumprod",
   "tensorflow.compat.v2.math.cumsum",
   "tensorflow.compat.v2.math.digamma",
   "tensorflow.compat.v2.math.divide",
   "tensorflow.compat.v2.math.divide_no_nan",
   "tensorflow.compat.v2.math.equal",
   "tensorflow.compat.v2.math.erf",
   "tensorflow.compat.v2.math.erfc",
   "tensorflow.compat.v2.math.exp",
   "tensorflow.compat.v2.math.expm1",
   "tensorflow.compat.v2.math.floor",
   "tensorflow.compat.v2.math.floordiv",
   "tensorflow.compat.v2.math.greater",
   "tensorflow.compat.v2.math.greater_equal",
   "tensorflow.compat.v2.math.igamma",
   "tensorflow.compat.v2.math.igammac",
   "tensorflow.compat.v2.math.imag",
   "tensorflow.compat.v2.math.invert_permutation",
   "tensorflow.compat.v2.math.is_finite",
   "tensorflow.compat.v2.math.is_inf",
   "tensorflow.compat.v2.math.is_nan",
   "tensorflow.compat.v2.math.is_non_decreasing",
   "tensorflow.compat.v2.math.is_strictly_increasing",
   "tensorflow.compat.v2.math.l2_normalize",
   "tensorflow.compat.v2.math.lbeta",
   "tensorflow.compat.v2.math.less",
   "tensorflow.compat.v2.math.less_equal",
   "tensorflow.compat.v2.math.lgamma",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.math.log_sigmoid",
   "tensorflow.compat.v2.math.log_softmax",
   "tensorflow.compat.v2.math.logical_and",
   "tensorflow.compat.v2.math.logical_not",
   "tensorflow.compat.v2.math.logical_or",
   "tensorflow.compat.v2.math.logical_xor",
   "tensorflow.compat.v2.math.maximum",
   "tensorflow.compat.v2.math.minimum",
   "tensorflow.compat.v2.math.multiply",
   "tensorflow.compat.v2.math.multiply_no_nan",
   "tensorflow.compat.v2.math.negative",
   "tensorflow.compat.v2.math.not_equal",
   "tensorflow.compat.v2.math.polygamma",
   "tensorflow.compat.v2.math.polyval",
   "tensorflow.compat.v2.math.pow",
   "tensorflow.compat.v2.math.real",
   "tensorflow.compat.v2.math.reciprocal",
   "tensorflow.compat.v2.math.reduce_all",
   "tensorflow.compat.v2.math.reduce_any",
   "tensorflow.compat.v2.math.reduce_logsumexp",
   "tensorflow.compat.v2.math.reduce_max",
   "tensorflow.compat.v2.math.reduce_mean",
   "tensorflow.compat.v2.math.reduce_min",
   "tensorflow.compat.v2.math.reduce_prod",
   "tensorflow.compat.v2.math.reduce_std",
   "tensorflow.compat.v2.math.reduce_sum",
   "tensorflow.compat.v2.math.reduce_variance",
   "tensorflow.compat.v2.math.rint",
   "tensorflow.compat.v2.math.round",
   "tensorflow.compat.v2.math.rsqrt",
   "tensorflow.compat.v2.math.sigmoid",
   "tensorflow.compat.v2.math.sign",
   "tensorflow.compat.v2.math.sin",
   "tensorflow.compat.v2.math.sinh",
   "tensorflow.compat.v2.math.softmax",
   "tensorflow.compat.v2.math.softplus",
   "tensorflow.compat.v2.math.softsign",
   "tensorflow.compat.v2.math.sqrt",
   "tensorflow.compat.v2.math.square",
   "tensorflow.compat.v2.math.squared_difference",
   "tensorflow.compat.v2.math.subtract",
   "tensorflow.compat.v2.math.tan",
   "tensorflow.compat.v2.math.tanh",
   "tensorflow.compat.v2.math.top_k",
   "tensorflow.compat.v2.math.truediv",
   "tensorflow.compat.v2.math.xdivy",
   "tensorflow.compat.v2.math.xlogy",
   "tensorflow.compat.v2.math.zeta",
   "tensorflow_probability.python.internal.backend.numpy._utils.copy_docstring",
   "tensorflow_probability.python.internal.backend.numpy._utils.numpy_dtype",
   "tensorflow_probability.python.internal.backend.numpy._utils.try_import"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_math._astuple": {
  "lineno": 158,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_math._bincount": {
  "lineno": 165,
  "symbols_in_volume": [
   "numpy.bincount",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.internal.backend.numpy._utils.numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_math._cumop": {
  "lineno": 170,
  "symbols_in_volume": [
   "numpy.pad",
   "tensorflow_probability.python.internal.backend.numpy.numpy_array._reverse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_math._lbeta": {
  "lineno": 195,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_math._max_mask_non_finite": {
  "lineno": 200,
  "symbols_in_volume": [
   "numpy.isfinite",
   "numpy.max",
   "numpy.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_math._reduce_logsumexp": {
  "lineno": 219,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.log",
   "numpy.sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_math._softmax": {
  "lineno": 211,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_math._top_k": {
  "lineno": 233,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_signal": {
  "lineno": null,
  "symbols_in_volume": [
   "numpy.fft.fftn",
   "numpy.fft.ifftn",
   "tensorflow.compat.v2.signal.fft",
   "tensorflow.compat.v2.signal.fft2d",
   "tensorflow.compat.v2.signal.fft3d",
   "tensorflow.compat.v2.signal.ifft",
   "tensorflow.compat.v2.signal.ifft2d",
   "tensorflow.compat.v2.signal.ifft3d",
   "tensorflow_probability.python.internal.backend.numpy._utils.copy_docstring"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test": {
  "lineno": null,
  "symbols_in_volume": [
   "functools.partial",
   "hypothesis.strategies.booleans",
   "hypothesis.strategies.integers",
   "hypothesis.strategies.tuples",
   "numpy.bool",
   "numpy.complex64",
   "numpy.linalg.cholesky",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.NumpyTest": {
  "lineno": 615,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.NumpyTest.evaluate": {
  "lineno": 633,
  "symbols_in_volume": [
   "tensorflow.compat.v1.get_default_session",
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.NumpyTest.testConsistency": {
  "lineno": 660,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.NumpyTest.testConsistency.check_consistency": {
  "lineno": 673,
  "symbols_in_volume": [
   "hypothesis.HealthCheck.too_slow",
   "hypothesis.given",
   "hypothesis.settings",
   "numpy.ndarray",
   "six.moves.zip_longest",
   "tensorflow.compat.v2.is_tensor",
   "tensorflow.compat.v2.nest.flatten",
   "tensorflow.compat.v2.nest.map_structure"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.NumpyTest.testConsistency.check_consistency.assert_same_shape": {
  "lineno": 689,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.NumpyTest.testLogEmptyTestCases": {
  "lineno": 644,
  "symbols_in_volume": [
   "absl.logging.warning",
   "absl.testing.parameterized.named_parameters"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.NumpyTest.test_convert_to_tensor": {
  "lineno": 617,
  "symbols_in_volume": [
   "numpy.complex64",
   "numpy.float64",
   "numpy.int32",
   "numpy.int64",
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.int64",
   "tensorflow_probability.python.internal.backend.numpy.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.TestCase": {
  "lineno": 57,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.TestCase.__init__": {
  "lineno": 60,
  "symbols_in_volume": [
   "tensorflow.compat.v2",
   "tensorflow_probability.python.internal.backend.numpy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.TestCase.__repr__": {
  "lineno": 69,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test._add_jax_prng_key_as_seed": {
  "lineno": 47,
  "symbols_in_volume": [
   "jax.random.PRNGKey"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test._getattr": {
  "lineno": 52,
  "symbols_in_volume": [
   "functools.reduce"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test._maybe_convert_to_tensors": {
  "lineno": 608,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.ndarray",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.array_and_diagonal": {
  "lineno": 174,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.arrays",
   "hypothesis.strategies.composite",
   "hypothesis.strategies.integers",
   "numpy.float64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.array_axis_tuples": {
  "lineno": 139,
  "symbols_in_volume": [
   "hypothesis.strategies.composite",
   "hypothesis.strategies.integers"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.complex_numbers": {
  "lineno": 85,
  "symbols_in_volume": [
   "hypothesis.strategies.complex_numbers"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.fft_shapes": {
  "lineno": 107,
  "symbols_in_volume": [
   "hypothesis.strategies.lists",
   "hypothesis.strategies.sampled_from",
   "hypothesis.strategies.tuples"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.floats": {
  "lineno": 78,
  "symbols_in_volume": [
   "hypothesis.strategies.floats"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.gamma_params": {
  "lineno": 222,
  "symbols_in_volume": [
   "hypothesis.strategies.booleans",
   "hypothesis.strategies.fixed_dictionaries",
   "hypothesis.strategies.sampled_from",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.gamma_params.dict_to_params": {
  "lineno": 223,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.matmul_compatible_pairs": {
  "lineno": 183,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.arrays",
   "hypothesis.strategies.composite",
   "hypothesis.strategies.integers",
   "numpy.float64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.n_same_shape": {
  "lineno": 115,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.arrays",
   "hypothesis.strategies.composite",
   "hypothesis.strategies.tuples",
   "numpy.array",
   "numpy.float64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.non_zero_floats": {
  "lineno": 93,
  "symbols_in_volume": [
   "hypothesis.strategies.composite",
   "numpy.all"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.nonsingular_matrices": {
  "lineno": 211,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.arrays",
   "hypothesis.strategies.composite",
   "hypothesis.strategies.sampled_from"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.one_hot_params": {
  "lineno": 160,
  "symbols_in_volume": [
   "hypothesis.strategies.composite",
   "hypothesis.strategies.integers",
   "hypothesis.strategies.just",
   "hypothesis.strategies.one_of",
   "hypothesis.strategies.sampled_from",
   "numpy.complex64",
   "numpy.float32",
   "numpy.int32",
   "numpy.max",
   "numpy.maximum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.pd_matrices": {
  "lineno": 198,
  "symbols_in_volume": [
   "hypothesis.strategies.composite",
   "numpy.eye",
   "numpy.matmul",
   "numpy.swapaxes"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.shapes": {
  "lineno": 100,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.array_shapes",
   "hypothesis.strategies.just",
   "hypothesis.strategies.one_of"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.sliceable_and_slices": {
  "lineno": 148,
  "symbols_in_volume": [
   "hypothesis.strategies.composite",
   "hypothesis.strategies.integers",
   "hypothesis.strategies.just",
   "hypothesis.strategies.one_of"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops": {
  "lineno": null,
  "symbols_in_volume": [
   "functools.partial",
   "numpy.array",
   "numpy.broadcast_to",
   "numpy.clip",
   "numpy.newaxis",
   "tensorflow.compat.v1.Dimension",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.broadcast_static_shape",
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.clip_by_value",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.custom_gradient",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.group",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.is_tensor",
   "tensorflow.compat.v2.stop_gradient",
   "tensorflow_probability.python.internal.backend.numpy._utils.copy_docstring",
   "tensorflow_probability.python.internal.backend.numpy._utils.numpy_dtype"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.GradientTape": {
  "lineno": 142,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.GradientTape.__enter__": {
  "lineno": 148,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.GradientTape.__exit__": {
  "lineno": 151,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.GradientTape.__init__": {
  "lineno": 145,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.GradientTape.batch_jacobian": {
  "lineno": 161,
  "symbols_in_volume": [
   "tensorflow.python.ops.unconnected_gradients.UnconnectedGradients.NONE"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.GradientTape.gradient": {
  "lineno": 157,
  "symbols_in_volume": [
   "tensorflow.python.ops.unconnected_gradients.UnconnectedGradients.NONE"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.GradientTape.watch": {
  "lineno": 154,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.Module": {
  "lineno": 337,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.Module.__init__": {
  "lineno": 342,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.Module._no_dependency": {
  "lineno": 345,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.Module.trainable_variables": {
  "lineno": 348,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.Module.variables": {
  "lineno": 352,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.NumpyVariable": {
  "lineno": 288,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.NumpyVariable.__array__": {
  "lineno": 310,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.NumpyVariable.__init__": {
  "lineno": 292,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.NumpyVariable.assign": {
  "lineno": 319,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.NumpyVariable.shape": {
  "lineno": 315,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.Tensor": {
  "lineno": 333,
  "symbols_in_volume": [
   "six.with_metaclass"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops._NullContext": {
  "lineno": 62,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops._NullContext.__enter__": {
  "lineno": 67,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops._NullContext.__exit__": {
  "lineno": 70,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops._NullContext.__init__": {
  "lineno": 64,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops._TensorMeta": {
  "lineno": 326,
  "symbols_in_volume": [
   "numpy.ndarray"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops._TensorMeta.__instancecheck__": {
  "lineno": 328,
  "symbols_in_volume": [
   "numpy.generic",
   "numpy.ndarray"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops._broadcast_static_shape": {
  "lineno": 74,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops._constant": {
  "lineno": 83,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.reshape",
   "tensorflow_probability.python.internal.backend.numpy._utils.numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops._control_dependencies": {
  "lineno": 90,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops._convert_to_tensor": {
  "lineno": 98,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.complexfloating",
   "numpy.floating",
   "numpy.integer",
   "numpy.issubdtype",
   "numpy.ndarray",
   "numpy.size",
   "tensorflow.compat.v2.is_tensor",
   "tensorflow_probability.python.internal.backend.numpy._utils.numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops._dimension_value": {
  "lineno": 129,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.dimension_at_index": {
  "lineno": 282,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.name_scope": {
  "lineno": 229,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.name_scope.__enter__": {
  "lineno": 265,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.name_scope.__exit__": {
  "lineno": 268,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.name_scope.__init__": {
  "lineno": 259,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.name_scope.name": {
  "lineno": 255,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.random.categorical",
   "tensorflow.compat.v2.random.gamma",
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.random.poisson",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow_probability.python.internal.backend.numpy._utils.copy_docstring"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators._categorical": {
  "lineno": 69,
  "symbols_in_volume": [
   "numpy.apply_along_axis",
   "numpy.array",
   "numpy.float32",
   "numpy.int64",
   "numpy.random",
   "numpy.random.RandomState",
   "tensorflow_probability.python.internal.backend.numpy._utils.numpy_dtype",
   "tensorflow_probability.python.internal.backend.numpy.numpy_math.softmax"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators._categorical_jax": {
  "lineno": 80,
  "symbols_in_volume": [
   "jax.random.gumbel",
   "numpy.argmax",
   "numpy.array",
   "numpy.expand_dims",
   "numpy.float32",
   "numpy.int64",
   "tensorflow_probability.python.internal.backend.numpy._utils.numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators._gamma": {
  "lineno": 92,
  "symbols_in_volume": [
   "numpy.random",
   "numpy.random.RandomState",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.internal.backend.numpy._utils.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators._gamma_jax": {
  "lineno": 101,
  "symbols_in_volume": [
   "jax.random.gamma",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.internal.backend.numpy._utils.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators._normal": {
  "lineno": 111,
  "symbols_in_volume": [
   "numpy.random",
   "numpy.random.RandomState",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.internal.backend.numpy._utils.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators._normal_jax": {
  "lineno": 119,
  "symbols_in_volume": [
   "jax.random.normal",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.internal.backend.numpy._utils.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators._poisson": {
  "lineno": 129,
  "symbols_in_volume": [
   "numpy.random",
   "numpy.random.RandomState",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.internal.backend.numpy._utils.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators._shape": {
  "lineno": 57,
  "symbols_in_volume": [
   "functools.reduce",
   "numpy.array",
   "numpy.broadcast"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators._uniform": {
  "lineno": 137,
  "symbols_in_volume": [
   "numpy.random",
   "numpy.random.RandomState",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.internal.backend.numpy._utils.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators._uniform_jax": {
  "lineno": 146,
  "symbols_in_volume": [
   "jax.random.uniform",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.internal.backend.numpy._utils.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.sets_lib": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.sets.difference",
   "tensorflow_probability.python.internal.backend.numpy._utils.copy_docstring"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.sets_lib._difference": {
  "lineno": 34,
  "symbols_in_volume": [
   "numpy.setdiff1d"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.sparse_lib": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.sparse.to_dense",
   "tensorflow_probability.python.internal.backend.numpy._utils.copy_docstring"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.sparse_lib._to_dense": {
  "lineno": 31,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.test_lib": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.test_lib.Benchmark": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.Benchmark"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.backend.numpy.test_lib.TestCase": {
  "lineno": 44,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.backend.numpy.test_lib.TestCase._GetNdArray": {
  "lineno": 50,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.test_lib.TestCase.assertEqual": {
  "lineno": 67,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.ndarray"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.test_lib.TestCase.assertRaisesOpError": {
  "lineno": 53,
  "symbols_in_volume": [
   "absl.logging.error",
   "contextlib.contextmanager",
   "re.search"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.test_lib.TestCase.evaluate": {
  "lineno": 47,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1": {
  "lineno": null,
  "symbols_in_volume": [
   "numpy.random.seed",
   "tensorflow.compat.v1.assert_equal",
   "tensorflow.compat.v1.assert_greater",
   "tensorflow.compat.v1.assert_greater_equal",
   "tensorflow.compat.v1.assert_integer",
   "tensorflow.compat.v1.assert_less",
   "tensorflow.compat.v1.assert_less_equal",
   "tensorflow.compat.v1.assert_near",
   "tensorflow.compat.v1.assert_negative",
   "tensorflow.compat.v1.assert_non_negative",
   "tensorflow.compat.v1.assert_non_positive",
   "tensorflow.compat.v1.assert_none_equal",
   "tensorflow.compat.v1.assert_positive",
   "tensorflow.compat.v1.assert_proper_iterable",
   "tensorflow.compat.v1.assert_rank",
   "tensorflow.compat.v1.assert_rank_at_least",
   "tensorflow.compat.v1.assert_rank_in",
   "tensorflow.compat.v1.assert_scalar",
   "tensorflow.compat.v1.colocate_with",
   "tensorflow.compat.v1.get_variable",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow.compat.v2",
   "tensorflow_probability.python.internal.backend.numpy._utils.copy_docstring"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.Session": {
  "lineno": 287,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.Session.__enter__": {
  "lineno": 289,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.Session.__exit__": {
  "lineno": 292,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.Session.run": {
  "lineno": 295,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1._assert_equal": {
  "lineno": 71,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.equal",
   "tensorflow_probability.python.internal.backend.numpy.ops.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1._assert_greater": {
  "lineno": 81,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1._assert_greater_equal": {
  "lineno": 97,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1._assert_integer": {
  "lineno": 101,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1._assert_less": {
  "lineno": 85,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1._assert_less_equal": {
  "lineno": 105,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1._assert_near": {
  "lineno": 109,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1._assert_negative": {
  "lineno": 113,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1._assert_non_negative": {
  "lineno": 117,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1._assert_non_positive": {
  "lineno": 121,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1._assert_none_equal": {
  "lineno": 125,
  "symbols_in_volume": [
   "numpy.any",
   "numpy.equal",
   "tensorflow_probability.python.internal.backend.numpy.ops.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1._assert_positive": {
  "lineno": 135,
  "symbols_in_volume": [
   "numpy.any",
   "tensorflow_probability.python.internal.backend.numpy.ops.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1._assert_proper_iterable": {
  "lineno": 145,
  "symbols_in_volume": [
   "numpy.ndarray",
   "six.text_type",
   "tensorflow_probability.python.internal.backend.numpy.ops.Tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1._assert_rank": {
  "lineno": 89,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1._assert_rank_at_least": {
  "lineno": 157,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1._assert_rank_in": {
  "lineno": 164,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1._assert_scalar": {
  "lineno": 93,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1._colocate_with": {
  "lineno": 168,
  "symbols_in_volume": [
   "contextlib.contextmanager"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1._get_variable": {
  "lineno": 173,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.backend.numpy.ops.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1._placeholder_with_default": {
  "lineno": 188,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.v2": {
  "lineno": null,
  "symbols_in_volume": [
   "collections",
   "collections.namedtuple",
   "tensorflow.compat.v2",
   "tensorflow.compat.v2.function",
   "tensorflow_probability.python.internal.backend.numpy._utils",
   "tensorflow_probability.python.internal.backend.numpy._utils.copy_docstring",
   "tensorflow_probability.python.internal.backend.numpy.linalg.eye",
   "tensorflow_probability.python.internal.backend.numpy.linalg.matmul"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.v2._function": {
  "lineno": 50,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.internal.distribution_util.AppendDocstring": {
  "lineno": 1534,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util.AppendDocstring.__call__": {
  "lineno": 1582,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.AppendDocstring.__call__._fn": {
  "lineno": 1584,
  "symbols_in_volume": [
   "functools.wraps"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.AppendDocstring.__init__": {
  "lineno": 1555,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util._convert_to_tensor": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util._is_integer_like_by_dtype": {
  "lineno": 877,
  "symbols_in_volume": [
   "tensorflow.compat.v2.bool"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util._is_known_dtype": {
  "lineno": 849,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util._is_known_signed_by_dtype": {
  "lineno": 836,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float16.get",
   "tensorflow.compat.v2.float32.get",
   "tensorflow.compat.v2.float64.get",
   "tensorflow.compat.v2.int16.get",
   "tensorflow.compat.v2.int32.get",
   "tensorflow.compat.v2.int64.get",
   "tensorflow.compat.v2.int8.get"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util._is_known_unsigned_by_dtype": {
  "lineno": 827,
  "symbols_in_volume": [
   "tensorflow.compat.v2.bool.get",
   "tensorflow.compat.v2.uint16.get",
   "tensorflow.compat.v2.uint8.get"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util._largest_integer_by_dtype": {
  "lineno": 854,
  "symbols_in_volume": [
   "numpy.finfo",
   "numpy.iinfo",
   "tensorflow.compat.v2.bool"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util._smallest_integer_by_dtype": {
  "lineno": 868,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.assert_categorical_event_shape": {
  "lineno": 884,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int64",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.assert_util.assert_greater_equal",
   "tensorflow_probability.python.internal.assert_util.assert_less_equal",
   "tensorflow_probability.python.internal.assert_util.assert_rank_at_least",
   "tensorflow_probability.python.internal.dtype_util.base_dtype",
   "tensorflow_probability.python.internal.dtype_util.is_floating",
   "tensorflow_probability.python.internal.dtype_util.name",
   "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.assert_integer_form": {
  "lineno": 613,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float16",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.int16",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.int64",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.no_op",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.dtype_util.base_dtype",
   "tensorflow_probability.python.internal.dtype_util.is_integer",
   "tensorflow_probability.python.internal.dtype_util.name"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.assert_nonnegative_integer_form": {
  "lineno": 663,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.assert_util.assert_non_negative",
   "tensorflow_probability.python.internal.dtype_util.is_integer"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.assert_symmetric": {
  "lineno": 657,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.matrix_transpose",
   "tensorflow_probability.python.internal.assert_util.assert_near"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.dimension_size": {
  "lineno": 1345,
  "symbols_in_volume": [
   "numpy.abs",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.embed_check_categorical_event_shape": {
  "lineno": 981,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.embed_check_integer_casting_closed": {
  "lineno": 1030,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.assert_util.assert_greater_equal",
   "tensorflow_probability.python.internal.assert_util.assert_less_equal",
   "tensorflow_probability.python.internal.assert_util.assert_non_negative",
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.dtype_util.is_floating",
   "tensorflow_probability.python.internal.dtype_util.name"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.embed_check_nonnegative_integer_form": {
  "lineno": 681,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.expand_to_vector": {
  "lineno": 1595,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.assert_util.assert_rank_at_most",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.gen_new_seed": {
  "lineno": 1336,
  "symbols_in_volume": [
   "hashlib.md5"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.get_broadcast_shape": {
  "lineno": 353,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.broadcast_static_shape",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.tensorshape_util.as_list",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs": {
  "lineno": 744,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.nn.softmax",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.sigmoid",
   "tensorflow_probability.python.internal.assert_util.assert_less_equal",
   "tensorflow_probability.python.internal.assert_util.assert_near",
   "tensorflow_probability.python.internal.assert_util.assert_non_negative",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.dtype_util.is_floating"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale": {
  "lineno": 377,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.LinearOperator",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow.compat.v2.linalg.LinearOperatorIdentity",
   "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.is_distribution_instance": {
  "lineno": 1689,
  "symbols_in_volume": [
   "tensorflow.python.util.tf_inspect.isclass"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.make_diag_scale": {
  "lineno": 180,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow.compat.v2.linalg.LinearOperatorIdentity",
   "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.make_diag_scale._maybe_attach_assertion": {
  "lineno": 219,
  "symbols_in_volume": [
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.assert_util.assert_none_equal",
   "tensorflow_probability.python.internal.assert_util.assert_positive"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.make_tril_scale": {
  "lineno": 85,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
   "tensorflow.compat.v2.linalg.band_part",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.linalg.set_diag",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.make_tril_scale._maybe_attach_assertion": {
  "lineno": 126,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.assert_util.assert_none_equal",
   "tensorflow_probability.python.internal.assert_util.assert_positive"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.maybe_check_scalar_distribution": {
  "lineno": 397,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.name",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.maybe_check_scalar_distribution.check_is_scalar": {
  "lineno": 445,
  "symbols_in_volume": [
   "tensorflow.compat.v2.get_static_value",
   "tensorflow_probability.python.internal.assert_util.assert_equal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.maybe_get_static_value": {
  "lineno": 719,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.get_static_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.mixture_stddev": {
  "lineno": 39,
  "symbols_in_volume": [
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.square",
   "tensorflow_probability.python.internal.tensorshape_util.assert_has_rank",
   "tensorflow_probability.python.internal.tensorshape_util.is_compatible_with"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.move_dimension": {
  "lineno": 543,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.prefer_static.cond"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.move_dimension.move_left_permutation": {
  "lineno": 582,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.range"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.move_dimension.move_right_permutation": {
  "lineno": 591,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.range"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.move_dimension.x_permuted": {
  "lineno": 600,
  "symbols_in_volume": [
   "tensorflow.compat.v2.transpose",
   "tensorflow_probability.python.internal.prefer_static.cond"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.pad": {
  "lineno": 1423,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.one_hot",
   "tensorflow.compat.v2.pad",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.stack",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.dtype_util.is_integer",
   "tensorflow_probability.python.internal.dtype_util.name",
   "tensorflow_probability.python.internal.tensorshape_util.concatenate",
   "tensorflow_probability.python.internal.tensorshape_util.rank",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.pad_mixture_dimensions": {
  "lineno": 464,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.pad_mixture_dimensions._get_ndims": {
  "lineno": 483,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.parent_frame_arguments": {
  "lineno": 1497,
  "symbols_in_volume": [
   "tensorflow.python.util.tf_inspect._inspect.getargvalues",
   "tensorflow.python.util.tf_inspect._inspect.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.pick_scalar_condition": {
  "lineno": 505,
  "symbols_in_volume": [
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.pick_vector": {
  "lineno": 1204,
  "symbols_in_volume": [
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.slice",
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.prefer_static_broadcast_shape": {
  "lineno": 1252,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.broadcast_static_shape",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.prefer_static_broadcast_shape.get_shape_tensor": {
  "lineno": 1279,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.internal.tensorshape_util.as_list",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.prefer_static_broadcast_shape.get_tensor_shape": {
  "lineno": 1271,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.get_static_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.prefer_static_broadcast_shape.make_shape_tensor": {
  "lineno": 1268,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.prefer_static_rank": {
  "lineno": 1297,
  "symbols_in_volume": [
   "tensorflow.compat.v2.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.prefer_static_shape": {
  "lineno": 1309,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.prefer_static_value": {
  "lineno": 1321,
  "symbols_in_volume": [
   "tensorflow.compat.v2.get_static_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.process_quadrature_grid_and_probs": {
  "lineno": 1356,
  "symbols_in_volume": [
   "numpy.linalg.norm",
   "numpy.polynomial.hermite.hermgauss",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.norm",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.process_quadrature_grid_and_probs._static_event_size": {
  "lineno": 1398,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.rotate_transpose": {
  "lineno": 1129,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.roll",
   "numpy.sign",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.less",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.transpose",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.assert_util.assert_integer",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.same_dynamic_shape": {
  "lineno": 689,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cond",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.same_dynamic_shape.all_shapes_equal": {
  "lineno": 705,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.reduce_all",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale": {
  "lineno": 282,
  "symbols_in_volume": [
   "numpy.reshape",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
   "tensorflow_probability.python.internal.tensorshape_util.rank",
   "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.with_dependencies": {
  "lineno": 1653,
  "symbols_in_volume": [
   "tensorflow.compat.v2.IndexedSlices",
   "tensorflow.compat.v2.Tensor",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest": {
  "lineno": 1236,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest.testKeywordArguments": {
  "lineno": 1268,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest.testKeywordArguments.foo": {
  "lineno": 1269,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.parent_frame_arguments"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest.testNoArguments": {
  "lineno": 1239,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest.testNoArguments.foo": {
  "lineno": 1240,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.parent_frame_arguments"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest.testNoVarargs": {
  "lineno": 1282,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest.testNoVarargs.foo": {
  "lineno": 1283,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.parent_frame_arguments"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest.testOverloadedArgumentValues": {
  "lineno": 1260,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest.testOverloadedArgumentValues.foo": {
  "lineno": 1261,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.parent_frame_arguments"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest.testPositionalArguments": {
  "lineno": 1245,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest.testPositionalArguments.bar": {
  "lineno": 1253,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.parent_frame_arguments"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest.testPositionalArguments.foo": {
  "lineno": 1246,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.parent_frame_arguments"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest.testPositionalKeywordArgs": {
  "lineno": 1274,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest.testPositionalKeywordArgs.foo": {
  "lineno": 1275,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.parent_frame_arguments"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.AssertCloseTest": {
  "lineno": 665,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.AssertCloseTest.testAssertIntegerForm": {
  "lineno": 668,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.python.internal.distribution_util.assert_integer_form"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.DynamicShapeTest": {
  "lineno": 969,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.DynamicShapeTest.testSameDynamicShape": {
  "lineno": 972,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.distribution_util.same_dynamic_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.EmbedCheckCategoricalEventShapeTest": {
  "lineno": 884,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.EmbedCheckCategoricalEventShapeTest.testTooLarge": {
  "lineno": 902,
  "symbols_in_volume": [
   "numpy.float16",
   "numpy.ones",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.float16",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.internal.distribution_util.embed_check_categorical_event_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.EmbedCheckCategoricalEventShapeTest.testTooSmall": {
  "lineno": 887,
  "symbols_in_volume": [
   "numpy.float16",
   "numpy.ones",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.internal.distribution_util.embed_check_categorical_event_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.EmbedCheckCategoricalEventShapeTest.testUnsupportedDtype": {
  "lineno": 917,
  "symbols_in_volume": [
   "numpy.ones",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.qint16",
   "tensorflow.compat.v2.qint16.as_numpy_dtype",
   "tensorflow_probability.python.internal.distribution_util.embed_check_categorical_event_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.EmbedCheckIntegerCastingClosedTest": {
  "lineno": 925,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.EmbedCheckIntegerCastingClosedTest.testCorrectlyAssersIntegerForm": {
  "lineno": 944,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float16",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.int16",
   "tensorflow_probability.python.internal.distribution_util.embed_check_integer_casting_closed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.EmbedCheckIntegerCastingClosedTest.testCorrectlyAssertsLargestPossibleInteger": {
  "lineno": 952,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.int16",
   "tensorflow_probability.python.internal.distribution_util.embed_check_integer_casting_closed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.EmbedCheckIntegerCastingClosedTest.testCorrectlyAssertsNonnegative": {
  "lineno": 928,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float16",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.int16",
   "tensorflow_probability.python.internal.distribution_util.embed_check_integer_casting_closed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.EmbedCheckIntegerCastingClosedTest.testCorrectlyAssertsPositive": {
  "lineno": 936,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float16",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.int16",
   "tensorflow_probability.python.internal.distribution_util.embed_check_integer_casting_closed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.EmbedCheckIntegerCastingClosedTest.testCorrectlyAssertsSmallestPossibleInteger": {
  "lineno": 960,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.uint16",
   "tensorflow_probability.python.internal.distribution_util.embed_check_integer_casting_closed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ExpandToVectorTest": {
  "lineno": 1294,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ExpandToVectorTest._check": {
  "lineno": 1302,
  "symbols_in_volume": [
   "numpy.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ExpandToVectorTest._check_static": {
  "lineno": 1297,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v2.get_static_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ExpandToVectorTest.test_expand_to_vector_on_constants": {
  "lineno": 1335,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.float64",
   "numpy.int64",
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ExpandToVectorTest.test_expand_to_vector_on_constants._expand_tensor": {
  "lineno": 1337,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.internal.distribution_util.expand_to_vector"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ExpandToVectorTest.test_expand_to_vector_on_literals": {
  "lineno": 1306,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow_probability.python.internal.distribution_util.expand_to_vector"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ExpandToVectorTest.test_expand_to_vector_on_tensors": {
  "lineno": 1356,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.float64",
   "numpy.int64",
   "tensorflow.compat.v2.errors.InvalidArgumentError",
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ExpandToVectorTest.test_expand_to_vector_on_tensors._expand_tensor": {
  "lineno": 1358,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.internal.distribution_util.expand_to_vector"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GenNewSeedTest": {
  "lineno": 1229,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GenNewSeedTest.testOnlyNoneReturnsNone": {
  "lineno": 1231,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.gen_new_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GetBroadcastShapeTest": {
  "lineno": 322,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GetBroadcastShapeTest.test_all_static_shapes_work": {
  "lineno": 325,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.internal.distribution_util.get_broadcast_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GetBroadcastShapeTest.test_with_some_dynamic_shapes_works": {
  "lineno": 332,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.internal.distribution_util.get_broadcast_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GetLogitsAndProbsTest": {
  "lineno": 734,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GetLogitsAndProbsTest.testImproperArguments": {
  "lineno": 737,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GetLogitsAndProbsTest.testLogits": {
  "lineno": 744,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GetLogitsAndProbsTest.testLogitsMultidimShape": {
  "lineno": 867,
  "symbols_in_volume": [
   "numpy.float16",
   "numpy.ones",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.float16",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GetLogitsAndProbsTest.testLogitsMultidimensional": {
  "lineno": 754,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.log",
   "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GetLogitsAndProbsTest.testProbability": {
  "lineno": 764,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GetLogitsAndProbsTest.testProbabilityMultidimensional": {
  "lineno": 773,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.log",
   "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GetLogitsAndProbsTest.testProbabilityValidateArgs": {
  "lineno": 782,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GetLogitsAndProbsTest.testProbabilityValidateArgsMultidimensional": {
  "lineno": 811,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GetLogitsAndProbsTest.testProbsMultidimShape": {
  "lineno": 852,
  "symbols_in_volume": [
   "numpy.float16",
   "numpy.ones",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.float16",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MakeDiagScaleTest": {
  "lineno": 167,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MakeDiagScaleTest._testLegalInputs": {
  "lineno": 170,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.make_diag_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MakeDiagScaleTest.testAssertPositive": {
  "lineno": 212,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.make_diag_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MakeDiagScaleTest.testLegalInputs": {
  "lineno": 188,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MakeDiagScaleTest.testLegalInputsMultidimensional": {
  "lineno": 197,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MakeDiagScaleTest.testValidateArgs": {
  "lineno": 206,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.make_diag_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MakeTrilScaleTest": {
  "lineno": 101,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MakeTrilScaleTest._testLegalInputs": {
  "lineno": 104,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.make_tril_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MakeTrilScaleTest.testAssertPositive": {
  "lineno": 158,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.make_tril_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MakeTrilScaleTest.testLegalInputs": {
  "lineno": 122,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MakeTrilScaleTest.testLegalInputsMultidimensional": {
  "lineno": 133,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MakeTrilScaleTest.testValidateArgs": {
  "lineno": 152,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.make_tril_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MakeTrilScaleTest.testZeroTriU": {
  "lineno": 148,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.distribution_util.make_tril_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MaybeGetStaticTest": {
  "lineno": 700,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MaybeGetStaticTest.testGetStaticConstant": {
  "lineno": 717,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float64",
   "numpy.int32",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.internal.distribution_util.maybe_get_static_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MaybeGetStaticTest.testGetStaticInt": {
  "lineno": 703,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float64",
   "tensorflow_probability.python.internal.distribution_util.maybe_get_static_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MaybeGetStaticTest.testGetStaticNumpyArray": {
  "lineno": 710,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float64",
   "numpy.int32",
   "tensorflow_probability.python.internal.distribution_util.maybe_get_static_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MaybeGetStaticTest.testGetStaticPlaceholder": {
  "lineno": 725,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float64",
   "numpy.int32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.internal.distribution_util.maybe_get_static_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MixtureStddevTest": {
  "lineno": 343,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MixtureStddevTest.test_mixture_dev": {
  "lineno": 346,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.distribution_util.mixture_stddev"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PadDynamicTest": {
  "lineno": 514,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PadDynamicTest.is_static_shape": {
  "lineno": 517,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PadMixtureDimensionsTest": {
  "lineno": 378,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PadMixtureDimensionsTest.test_pad_mixture_dimensions_mixture": {
  "lineno": 381,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.Mixture",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.internal.distribution_util.pad_mixture_dimensions",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PadMixtureDimensionsTest.test_pad_mixture_dimensions_mixture_same_family": {
  "lineno": 397,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.MixtureSameFamily",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.internal.distribution_util.pad_mixture_dimensions",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PadStaticTest": {
  "lineno": 506,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PadStaticTest.is_static_shape": {
  "lineno": 509,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PickScalarConditionTest": {
  "lineno": 522,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PickScalarConditionTest.test_pick_scalar_condition_dynamic": {
  "lineno": 543,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.float32",
   "numpy.random.randn",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.internal.distribution_util.pick_scalar_condition"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PickScalarConditionTest.test_pick_scalar_condition_static": {
  "lineno": 525,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.float32",
   "numpy.random.randn",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.distribution_util.pick_scalar_condition"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PickVectorTest": {
  "lineno": 1076,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PickVectorTest.testCorrectlyPicksVector": {
  "lineno": 1079,
  "symbols_in_volume": [
   "numpy.arange",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.less",
   "tensorflow_probability.python.internal.distribution_util.pick_vector"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticRankTest": {
  "lineno": 1094,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticRankTest.testDynamicRankEndsUpBeingEmpty": {
  "lineno": 1125,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticRankTest.testDynamicRankEndsUpBeingNonEmpty": {
  "lineno": 1118,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.zeros",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticRankTest.testDynamicRankEndsUpBeingScalar": {
  "lineno": 1132,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticRankTest.testEmptyConstantTensor": {
  "lineno": 1104,
  "symbols_in_volume": [
   "numpy.ndarray",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticRankTest.testNonEmptyConstantTensor": {
  "lineno": 1097,
  "symbols_in_volume": [
   "numpy.ndarray",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticRankTest.testScalarTensor": {
  "lineno": 1111,
  "symbols_in_volume": [
   "numpy.ndarray",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticShapeTest": {
  "lineno": 1140,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticShapeTest.testDynamicShapeEndsUpBeingEmpty": {
  "lineno": 1168,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticShapeTest.testDynamicShapeEndsUpBeingNonEmpty": {
  "lineno": 1161,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.zeros",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticShapeTest.testDynamicShapeEndsUpBeingScalar": {
  "lineno": 1175,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticShapeTest.testEmptyConstantTensor": {
  "lineno": 1149,
  "symbols_in_volume": [
   "numpy.ndarray",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticShapeTest.testNonEmptyConstantTensor": {
  "lineno": 1143,
  "symbols_in_volume": [
   "numpy.ndarray",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticShapeTest.testScalarTensor": {
  "lineno": 1155,
  "symbols_in_volume": [
   "numpy.ndarray",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticValueTest": {
  "lineno": 1183,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticValueTest.testDynamicValueEndsUpBeingEmpty": {
  "lineno": 1213,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticValueTest.testDynamicValueEndsUpBeingNonEmpty": {
  "lineno": 1205,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.zeros",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticValueTest.testDynamicValueEndsUpBeingScalar": {
  "lineno": 1220,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticValueTest.testEmptyConstantTensor": {
  "lineno": 1192,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.ndarray",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticValueTest.testNonEmptyConstantTensor": {
  "lineno": 1186,
  "symbols_in_volume": [
   "numpy.ndarray",
   "numpy.zeros",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticValueTest.testScalarTensor": {
  "lineno": 1198,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.ndarray",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.RotateTransposeTest": {
  "lineno": 1041,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.RotateTransposeTest._np_rotate_transpose": {
  "lineno": 1044,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.array",
   "numpy.ndarray",
   "numpy.roll",
   "numpy.transpose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.RotateTransposeTest.testRollDynamic": {
  "lineno": 1064,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.float32",
   "numpy.int32",
   "numpy.ones",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.internal.distribution_util.rotate_transpose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.RotateTransposeTest.testRollStatic": {
  "lineno": 1049,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.ones",
   "numpy.roll",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.internal.distribution_util.rotate_transpose",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ShapesFromLocAndScaleTest": {
  "lineno": 221,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ShapesFromLocAndScaleTest.test_dynamic_loc_dynamic_scale": {
  "lineno": 279,
  "symbols_in_volume": [
   "numpy.ones",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ShapesFromLocAndScaleTest.test_dynamic_loc_static_scale": {
  "lineno": 262,
  "symbols_in_volume": [
   "numpy.zeros",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ShapesFromLocAndScaleTest.test_none_loc_dynamic_scale": {
  "lineno": 307,
  "symbols_in_volume": [
   "numpy.ones",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ShapesFromLocAndScaleTest.test_none_loc_static_scale": {
  "lineno": 293,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ShapesFromLocAndScaleTest.test_static_loc_dynamic_scale": {
  "lineno": 245,
  "symbols_in_volume": [
   "numpy.ones",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ShapesFromLocAndScaleTest.test_static_loc_static_scale": {
  "lineno": 231,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ShapesFromLocAndScaleTest.test_static_loc_static_scale_non_matching_event_size_raises": {
  "lineno": 224,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.TestMoveDimension": {
  "lineno": 569,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.TestMoveDimension.test_move_dimension_dynamic_indices": {
  "lineno": 621,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.distribution_util.move_dimension"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.TestMoveDimension.test_move_dimension_dynamic_shape": {
  "lineno": 592,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.distribution_util.move_dimension"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.TestMoveDimension.test_move_dimension_static_shape": {
  "lineno": 572,
  "symbols_in_volume": [
   "tensorflow.compat.v2.random.normal",
   "tensorflow_probability.python.internal.distribution_util.move_dimension",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.WithDependenciesTestCase": {
  "lineno": 1394,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.TensorFlowTestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.WithDependenciesTestCase.testListDependencies": {
  "lineno": 1409,
  "symbols_in_volume": [
   "tensorflow.compat.v1.assign_add",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.WithDependenciesTestCase.testTupleDependencies": {
  "lineno": 1397,
  "symbols_in_volume": [
   "tensorflow.compat.v1.assign_add",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test._PadTest": {
  "lineno": 412,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test._PadTest.testNegAxisCorrectness": {
  "lineno": 414,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.int32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.distribution_util.pad"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test._PadTest.testPosAxisCorrectness": {
  "lineno": 463,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.int32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.distribution_util.pad"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test._logit": {
  "lineno": 40,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.log",
   "numpy.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test._make_diag_scale": {
  "lineno": 80,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.diag",
   "numpy.ones"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test._make_tril_scale": {
  "lineno": 61,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.ones",
   "numpy.tril"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test._matrix_diag": {
  "lineno": 51,
  "symbols_in_volume": [
   "numpy.diag",
   "numpy.prod",
   "numpy.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test._powerset": {
  "lineno": 45,
  "symbols_in_volume": [
   "itertools.chain.from_iterable",
   "itertools.combinations"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.docstring_util": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.internal.docstring_util.expand_docstring": {
  "lineno": 30,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.docstring_util.expand_docstring._fn_wrapped": {
  "lineno": 40,
  "symbols_in_volume": [
   "inspect.cleandoc",
   "re.sub",
   "six.iteritems"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.docstring_util_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.docstring_util_test.DocstringUtil": {
  "lineno": 27,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.docstring_util_test.DocstringUtil._testClassInit": {
  "lineno": 57,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.docstring_util_test.DocstringUtil._testClassInit.Foo": {
  "lineno": 61,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.internal.docstring_util_test.DocstringUtil._testClassInit.Foo.__init__": {
  "lineno": 63,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.docstring_util.expand_docstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.docstring_util_test.DocstringUtil._testFunction": {
  "lineno": 29,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.docstring_util_test.DocstringUtil._testFunction.foo": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.docstring_util.expand_docstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.internal.dtype_util._assert_same_base_type": {
  "lineno": 167,
  "symbols_in_volume": [
   "numpy.ones"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype": {
  "lineno": 48,
  "symbols_in_volume": [
   "tensorflow.compat.v2.as_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype": {
  "lineno": 220,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.base_dtype": {
  "lineno": 56,
  "symbols_in_volume": [
   "tensorflow.compat.v2.as_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.base_equal": {
  "lineno": 64,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.common_dtype": {
  "lineno": 69,
  "symbols_in_volume": [
   "numpy.ones",
   "tensorflow.compat.v2.as_dtype",
   "tensorflow.compat.v2.nest.flatten"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.is_bool": {
  "lineno": 88,
  "symbols_in_volume": [
   "numpy.dtype",
   "tensorflow.compat.v2.as_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.is_complex": {
  "lineno": 98,
  "symbols_in_volume": [
   "numpy.complex",
   "numpy.dtype",
   "numpy.issubdtype",
   "tensorflow.compat.v2.as_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.is_floating": {
  "lineno": 106,
  "symbols_in_volume": [
   "numpy.dtype",
   "numpy.float",
   "numpy.issubdtype",
   "tensorflow.compat.v2.as_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.is_integer": {
  "lineno": 114,
  "symbols_in_volume": [
   "numpy.dtype",
   "numpy.integer",
   "numpy.issubdtype",
   "tensorflow.compat.v2.as_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.max": {
  "lineno": 122,
  "symbols_in_volume": [
   "numpy.finfo",
   "numpy.iinfo",
   "tensorflow.compat.v2.as_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.min": {
  "lineno": 131,
  "symbols_in_volume": [
   "numpy.finfo",
   "numpy.iinfo",
   "tensorflow.compat.v2.as_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.name": {
  "lineno": 140,
  "symbols_in_volume": [
   "tensorflow.compat.v2.as_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.real_dtype": {
  "lineno": 158,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.as_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.size": {
  "lineno": 150,
  "symbols_in_volume": [
   "numpy.dtype",
   "tensorflow.compat.v2.as_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.dtype_util_test.DtypeUtilTest": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.dtype_util_test.DtypeUtilTest.testCommonDtypeAcceptsNone": {
  "lineno": 46,
  "symbols_in_volume": [
   "collections.namedtuple",
   "tensorflow.compat.v2.float16",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util_test.DtypeUtilTest.testCommonDtypeFromEdRV": {
  "lineno": 66,
  "symbols_in_volume": [
   "numpy.ones",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow_probability.edward2",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util_test.DtypeUtilTest.testCommonDtypeFromLinop": {
  "lineno": 61,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float16",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.linalg.LinearOperatorDiag",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util_test.DtypeUtilTest.testIsInteger": {
  "lineno": 36,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow_probability.python.internal.dtype_util.is_integer"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util_test.DtypeUtilTest.testNoModifyArgsList": {
  "lineno": 39,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util_test.FloatDTypeTest": {
  "lineno": 74,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.dtype_util_test.FloatDTypeTest.test_assert_same_float_dtype": {
  "lineno": 76,
  "symbols_in_volume": [
   "tensorflow.compat.v2.SparseTensor",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.int64",
   "tensorflow.python.framework.test_util.run_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib.Support": {
  "lineno": 121,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib._compute_rank_and_fullsize_reqd": {
  "lineno": 444,
  "symbols_in_volume": [
   "hypothesis.strategies.integers",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib._matrix_constrainer": {
  "lineno": 196,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib._scalar_constrainer": {
  "lineno": 153,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.math.sigmoid",
   "tensorflow.compat.v2.math.softplus",
   "tensorflow.compat.v2.math.tanh"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib._scalar_constrainer.nonzero": {
  "lineno": 156,
  "symbols_in_volume": [
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib._vector_constrainer": {
  "lineno": 173,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.cumsum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib._vector_constrainer.l1norm": {
  "lineno": 176,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.linalg.norm",
   "tensorflow.compat.v2.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib.all_supports": {
  "lineno": 143,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib.assert_no_excessive_var_usage": {
  "lineno": 87,
  "symbols_in_volume": [
   "contextlib.contextmanager"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib.broadcast_compatible_shape": {
  "lineno": 487,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib.broadcasting_named_shapes": {
  "lineno": 418,
  "symbols_in_volume": [
   "hypothesis.strategies.composite",
   "hypothesis.strategies.permutations"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib.broadcasting_params": {
  "lineno": 328,
  "symbols_in_volume": [
   "hypothesis.assume",
   "hypothesis.strategies.booleans",
   "hypothesis.strategies.composite",
   "hypothesis.strategies.integers",
   "hypothesis.strategies.sampled_from",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib.broadcasting_shapes": {
  "lineno": 495,
  "symbols_in_volume": [
   "hypothesis.strategies.booleans",
   "hypothesis.strategies.composite",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib.constrained_tensors": {
  "lineno": 233,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.arrays",
   "hypothesis.extra.numpy.float32",
   "hypothesis.strategies.floats"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib.constrained_tensors.mapper": {
  "lineno": 250,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.all",
   "hypothesis.extra.numpy.isfinite",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.internal.dtype_util.is_floating"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib.constrainer": {
  "lineno": 211,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib.defer_and_count_usage": {
  "lineno": 83,
  "symbols_in_volume": [
   "tensorflow_probability.python.util.deferred_tensor.DeferredTensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib.hypothesis_max_examples": {
  "lineno": 43,
  "symbols_in_volume": [
   "os.environ.get"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib.identity_fn": {
  "lineno": 324,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib.lower_tril": {
  "lineno": 558,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.band_part"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib.lower_tril_positive_definite": {
  "lineno": 553,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.band_part",
   "tensorflow_probability.python.distributions.deprecated_linalg.matrix_diag_transform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib.min_rank_for_support": {
  "lineno": 222,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib.positive_definite": {
  "lineno": 545,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.eye",
   "tensorflow.compat.v2.matmul",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib.randomize_hypothesis": {
  "lineno": 38,
  "symbols_in_volume": [
   "os.environ.get"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib.shapes": {
  "lineno": 296,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.array_shapes",
   "hypothesis.strategies.composite",
   "hypothesis.strategies.integers",
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib.shapes.resize_lastdim": {
  "lineno": 315,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib.softplus_plus_eps": {
  "lineno": 537,
  "symbols_in_volume": [
   "tensorflow.compat.v2.nn.softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib.symmetric": {
  "lineno": 541,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.matrix_transpose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib.tensors_in_support": {
  "lineno": 266,
  "symbols_in_volume": [
   "hypothesis.strategies.composite",
   "hypothesis.strategies.integers",
   "tensorflow_probability.python.internal.tensorshape_util.as_list"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib.tfp_hp_settings": {
  "lineno": 48,
  "symbols_in_volume": [
   "hypothesis.HealthCheck.too_slow",
   "hypothesis.PrintSettings.ALWAYS",
   "hypothesis.settings"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib.usage_counting_identity": {
  "lineno": 77,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity",
   "traceback.format_stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib_test.HypothesisTestlibTest": {
  "lineno": 35,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.hypothesis_testlib_test.HypothesisTestlibTest.testTensorsInSupportsAlwaysFinite": {
  "lineno": 38,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "hypothesis.given",
   "hypothesis.strategies.data",
   "numpy.all",
   "numpy.isfinite",
   "tensorflow_probability.python.internal.hypothesis_testlib.ALL_SUPPORTS",
   "tensorflow_probability.python.internal.hypothesis_testlib.tensors_in_support",
   "tensorflow_probability.python.internal.hypothesis_testlib.tfp_hp_settings"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.monte_carlo": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.internal.monte_carlo._get_samples": {
  "lineno": 349,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.monte_carlo._logspace_mean": {
  "lineno": 155,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.exp",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.stop_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.monte_carlo._sample_max": {
  "lineno": 344,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.reduce_max"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.monte_carlo._sample_mean": {
  "lineno": 339,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.reduce_mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.monte_carlo.expectation": {
  "lineno": 183,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.reduce_mean",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.stop_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.monte_carlo.expectation_importance_sampler": {
  "lineno": 30,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.exp",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.nn.relu"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.monte_carlo.expectation_importance_sampler._importance_sampler_positive_f": {
  "lineno": 80,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.monte_carlo.expectation_importance_sampler_logspace": {
  "lineno": 102,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.name_util": {
  "lineno": null,
  "symbols_in_volume": [
   "re.compile"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.name_util.camel_to_lower_snake": {
  "lineno": 40,
  "symbols_in_volume": [
   "re.sub"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.name_util.get_name_scope_name": {
  "lineno": 45,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.name_util.strip_invalid_chars": {
  "lineno": 36,
  "symbols_in_volume": [
   "re.sub"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.python.util.nest._is_namedtuple"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.nest_util._expand_as_kwargs": {
  "lineno": 82,
  "symbols_in_volume": [
   "collections.Mapping"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util._force_leaf": {
  "lineno": 70,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util._get_shallow_structure": {
  "lineno": 92,
  "symbols_in_volume": [
   "tensorflow.python.util.nest.get_traverse_shallow_structure"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util._maybe_convertible_to_tensor": {
  "lineno": 87,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util._nested_convert_to_tensor": {
  "lineno": 98,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.nest.is_nested",
   "tensorflow.python.util.nest.map_structure_up_to"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util.broadcast_structure": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow.compat.v2.nest.flatten",
   "tensorflow.compat.v2.nest.map_structure"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util.call_fn": {
  "lineno": 185,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util.convert_args_to_tensor": {
  "lineno": 116,
  "symbols_in_volume": [
   "tensorflow.python.util.nest.map_structure_up_to"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util.expand_as_args": {
  "lineno": 76,
  "symbols_in_volume": [
   "collections.Sequence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util_test": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple",
   "numpy.array",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.nest_util_test.LeafDict": {
  "lineno": 48,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.internal.nest_util_test.LeafDict.__repr__": {
  "lineno": 51,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util_test.LeafList": {
  "lineno": 34,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.internal.nest_util_test.LeafList.__repr__": {
  "lineno": 37,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util_test.LeafNamedTuple": {
  "lineno": 61,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.nest_util_test.LeafTuple": {
  "lineno": 41,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.internal.nest_util_test.LeafTuple.__repr__": {
  "lineno": 44,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util_test.NestUtilTest": {
  "lineno": 66,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.nest_util_test.NestUtilTest.testBroadcastStructure": {
  "lineno": 69,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "tensorflow_probability.python.internal.nest_util.broadcast_structure"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util_test.NestUtilTest.testCallFnLeafArgs": {
  "lineno": 167,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util_test.NestUtilTest.testCallFnLeafArgs.fn": {
  "lineno": 170,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util_test.NestUtilTest.testCallFnOneArg": {
  "lineno": 155,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "tensorflow.compat.v2.nest.flatten",
   "tensorflow_probability.python.internal.nest_util.call_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util_test.NestUtilTest.testCallFnOneArg.fn": {
  "lineno": 161,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util_test.NestUtilTest.testCallFnTwoArgs": {
  "lineno": 174,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "tensorflow_probability.python.internal.nest_util.call_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util_test.NestUtilTest.testCallFnTwoArgs.fn": {
  "lineno": 178,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util_test.NestUtilTest.testConvertArgsToTensor": {
  "lineno": 79,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "tensorflow.compat.v2.Tensor",
   "tensorflow.compat.v2.nest.assert_same_structure",
   "tensorflow.compat.v2.nest.map_structure",
   "tensorflow_probability.python.internal.nest_util.convert_args_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util_test.NestUtilTest.testConvertArgsToTensorErrors": {
  "lineno": 141,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.array",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.internal.nest_util.convert_args_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util_test.NestUtilTest.testConvertArgsToTensorWithDType": {
  "lineno": 115,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.int64",
   "tensorflow.compat.v2.Tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.int64",
   "tensorflow.compat.v2.nest.assert_same_structure",
   "tensorflow.compat.v2.nest.map_structure",
   "tensorflow_probability.python.internal.nest_util.convert_args_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static": {
  "lineno": null,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.any",
   "numpy.arange",
   "numpy.array",
   "numpy.concatenate",
   "numpy.equal",
   "numpy.greater",
   "numpy.int32",
   "numpy.less",
   "numpy.log",
   "numpy.logical_and",
   "numpy.logical_not",
   "numpy.logical_or",
   "numpy.maximum",
   "numpy.minimum",
   "numpy.ones",
   "numpy.pad",
   "numpy.prod",
   "numpy.reshape",
   "numpy.sum",
   "numpy.where",
   "numpy.zeros",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.greater",
   "tensorflow.compat.v2.less",
   "tensorflow.compat.v2.logical_and",
   "tensorflow.compat.v2.logical_not",
   "tensorflow.compat.v2.logical_or",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.maximum",
   "tensorflow.compat.v2.minimum",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.pad",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reduce_all",
   "tensorflow.compat.v2.reduce_any",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.sets.difference",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.prefer_static._copy_docstring": {
  "lineno": 60,
  "symbols_in_volume": [
   "tensorflow.python.util.tf_inspect.getfullargspec"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static._copy_docstring.wrap": {
  "lineno": 68,
  "symbols_in_volume": [
   "decorator.decorator"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static._get_static_predicate": {
  "lineno": 81,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.is_tensor",
   "tensorflow.python.pywrap_tensorflow.TF_TryEvaluateConstant_wrapper"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static._maybe_get_static_args": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.nest.flatten",
   "tensorflow.compat.v2.nest.pack_sequence_as"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static._numpy_dtype": {
  "lineno": 75,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static._ones_like": {
  "lineno": 282,
  "symbols_in_volume": [
   "numpy.ones",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static._prefer_static": {
  "lineno": 42,
  "symbols_in_volume": [
   "tensorflow.python.util.tf_inspect.getfullargspec"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static._prefer_static.wrap": {
  "lineno": 50,
  "symbols_in_volume": [
   "decorator.decorator"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static._setdiff1d": {
  "lineno": 323,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.setdiff1d",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.sets.difference",
   "tensorflow.compat.v2.sparse.to_dense",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static._shape": {
  "lineno": 364,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.object",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.tensorshape_util.as_list",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static._size": {
  "lineno": 351,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.object",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.size",
   "tensorflow_probability.python.internal.tensorshape_util.num_elements"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static._zeros_like": {
  "lineno": 387,
  "symbols_in_volume": [
   "numpy.zeros",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static.broadcast_shape": {
  "lineno": 123,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.broadcast_static_shape",
   "tensorflow.compat.v2.get_static_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static.case": {
  "lineno": 183,
  "symbols_in_volume": [
   "tensorflow.python.ops.control_flow_ops._case_helper"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static.case.maybe_static": {
  "lineno": 210,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static.cond": {
  "lineno": 149,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cond"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static.is_numpy": {
  "lineno": 416,
  "symbols_in_volume": [
   "numpy.generic",
   "numpy.ndarray"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static.non_negative_axis": {
  "lineno": 396,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.where",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static.rank_from_shape": {
  "lineno": 104,
  "symbols_in_volume": [
   "tensorflow.compat.v2.size",
   "tensorflow_probability.python.internal.tensorshape_util.num_elements",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.prefer_static_test.BroadcastShapeTest": {
  "lineno": 376,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.prefer_static_test.BroadcastShapeTest.test_dynamic": {
  "lineno": 387,
  "symbols_in_volume": [
   "numpy.zeros",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.prefer_static.broadcast_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.BroadcastShapeTest.test_static": {
  "lineno": 379,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.internal.prefer_static.broadcast_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.CaseTest": {
  "lineno": 215,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.prefer_static_test.CaseTest.test_false": {
  "lineno": 230,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.prefer_static.case"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.CaseTest.test_mix": {
  "lineno": 241,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.prefer_static.case"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.CaseTest.test_true": {
  "lineno": 218,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.equal",
   "tensorflow_probability.python.internal.prefer_static.case"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.CondTest": {
  "lineno": 187,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.prefer_static_test.CondTest.test_false": {
  "lineno": 197,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.multiply",
   "tensorflow_probability.python.internal.prefer_static.cond"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.CondTest.test_missing_arg1": {
  "lineno": 204,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.prefer_static.cond"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.CondTest.test_missing_arg2": {
  "lineno": 209,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.prefer_static.cond"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.CondTest.test_true": {
  "lineno": 190,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.multiply",
   "tensorflow_probability.python.internal.prefer_static.cond"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.GetStaticValueTest": {
  "lineno": 45,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.prefer_static_test.GetStaticValueTest.testStaticEvaluation": {
  "lineno": 48,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.internal.prefer_static._get_static_predicate"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.NonNegativeAxisTest": {
  "lineno": 353,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.prefer_static_test.NonNegativeAxisTest.test_dynamic_vector_index": {
  "lineno": 368,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.internal.prefer_static.non_negative_axis",
   "tensorflow_probability.python.internal.test_util.jax_disable_variable_test"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.NonNegativeAxisTest.test_static_scalar_negative_index": {
  "lineno": 360,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.non_negative_axis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.NonNegativeAxisTest.test_static_scalar_positive_index": {
  "lineno": 356,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.non_negative_axis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.NonNegativeAxisTest.test_static_vector_index": {
  "lineno": 364,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.non_negative_axis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.PadTest": {
  "lineno": 399,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.prefer_static_test.PadTest.test_num_paddings_dynamic": {
  "lineno": 402,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.internal.prefer_static.is_numpy",
   "tensorflow_probability.python.internal.prefer_static.pad"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.PadTest.test_num_paddings_static": {
  "lineno": 409,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.pad"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.PredicatesTest": {
  "lineno": 85,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.prefer_static_test.PredicatesTest.test_static_predicate": {
  "lineno": 88,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.equal",
   "tensorflow_probability.python.internal.prefer_static.equal",
   "tensorflow_probability.python.internal.prefer_static.greater",
   "tensorflow_probability.python.internal.prefer_static.less",
   "tensorflow_probability.python.internal.prefer_static.log",
   "tensorflow_probability.python.internal.prefer_static.logical_and",
   "tensorflow_probability.python.internal.prefer_static.logical_or",
   "tensorflow_probability.python.internal.prefer_static.reduce_all",
   "tensorflow_probability.python.internal.prefer_static.reduce_any"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.SetDiff1DTest": {
  "lineno": 306,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.prefer_static_test.SetDiff1DTest.test_dynamic": {
  "lineno": 320,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.array",
   "numpy.int32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.internal.prefer_static.setdiff1d"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.SetDiff1DTest.test_static": {
  "lineno": 309,
  "symbols_in_volume": [
   "numpy.arange",
   "tensorflow_probability.python.internal.prefer_static.setdiff1d"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.ShapeTest": {
  "lineno": 252,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.prefer_static_test.ShapeTest.test_rank_from_shape": {
  "lineno": 270,
  "symbols_in_volume": [
   "numpy.ones",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.internal.prefer_static.rank_from_shape",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.ShapeTest.test_shape": {
  "lineno": 255,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.SizeTest": {
  "lineno": 335,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.prefer_static_test.SizeTest.test_dynamic": {
  "lineno": 344,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.random.normal",
   "tensorflow_probability.python.internal.prefer_static.size",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.SizeTest.test_static": {
  "lineno": 338,
  "symbols_in_volume": [
   "tensorflow.compat.v2.random.normal",
   "tensorflow_probability.python.internal.prefer_static.size",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.raise_exception": {
  "lineno": 33,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.raise_exception_in_eager_mode": {
  "lineno": 37,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.raise_exception_in_eager_mode.f": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.reparameterization": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.internal.reparameterization.ReparameterizationType": {
  "lineno": 28,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.internal.reparameterization.ReparameterizationType.__eq__": {
  "lineno": 54,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.reparameterization.ReparameterizationType.__hash__": {
  "lineno": 51,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.reparameterization.ReparameterizationType.__init__": {
  "lineno": 45,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.reparameterization.ReparameterizationType.__repr__": {
  "lineno": 48,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math": {
  "lineno": null,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.float64"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.special_math._double_factorial": {
  "lineno": 431,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.prod"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math._log_ndtr_asymptotic_series": {
  "lineno": 390,
  "symbols_in_volume": [
   "tensorflow.compat.v2.square",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math._log_ndtr_lower": {
  "lineno": 382,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.square"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math._ndtr": {
  "lineno": 145,
  "symbols_in_volume": [
   "numpy.sqrt",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.erf",
   "tensorflow.compat.v2.math.erfc",
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math._ndtri": {
  "lineno": 187,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.expm1",
   "numpy.inf",
   "numpy.pi",
   "numpy.sqrt",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math._ndtri._create_polynomial": {
  "lineno": 244,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math.erfinv": {
  "lineno": 409,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.float64",
   "numpy.sqrt",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.internal.dtype_util.name"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math.log_cdf_laplace": {
  "lineno": 436,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math.log_ndtr": {
  "lineno": 290,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.maximum",
   "tensorflow.compat.v2.minimum",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.dtype_util.base_equal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math.ndtr": {
  "lineno": 110,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.float64",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math.ndtri": {
  "lineno": 158,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.float64",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.special_math_test.ErfInvTest": {
  "lineno": 302,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.special_math_test.ErfInvTest.testErfInvIntegerInput": {
  "lineno": 311,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "numpy.int64",
   "tensorflow_probability.python.internal.special_math.erfinv"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.ErfInvTest.testErfInvValues": {
  "lineno": 305,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.linspace",
   "scipy.special.erfinv",
   "tensorflow_probability.python.internal.special_math.erfinv"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.LogCDFLaplaceTest": {
  "lineno": 321,
  "symbols_in_volume": [
   "numpy.finfo",
   "numpy.float32",
   "numpy.float64",
   "numpy.log",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.special_math_test.LogCDFLaplaceTest._test_grid_log": {
  "lineno": 341,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.isfinite",
   "scipy.stats.laplace",
   "tensorflow_probability.python.internal.special_math.log_cdf_laplace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.LogCDFLaplaceTest.assertAllTrue": {
  "lineno": 338,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.LogCDFLaplaceTest.test_float32_all_segments_with_scipy_float64_ok": {
  "lineno": 370,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.float64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.LogCDFLaplaceTest.test_float32_extreme_values_result_and_gradient_finite_and_nonzero": {
  "lineno": 380,
  "symbols_in_volume": [
   "numpy.any",
   "numpy.float32",
   "numpy.isfinite",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.internal.special_math.log_cdf_laplace",
   "tensorflow_probability.python.math.gradient.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.LogCDFLaplaceTest.test_float32_lower_and_mid_segment_scipy_float32_ok": {
  "lineno": 361,
  "symbols_in_volume": [
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.LogCDFLaplaceTest.test_float64_extreme_values_result_and_gradient_finite_and_nonzero": {
  "lineno": 396,
  "symbols_in_volume": [
   "numpy.any",
   "numpy.float64",
   "numpy.isfinite",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.internal.special_math.log_cdf_laplace",
   "tensorflow_probability.python.math.gradient.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.LogNdtrGradientTest": {
  "lineno": 297,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.special_math_test.LogNdtrTestLower": {
  "lineno": 181,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT32_LOWER",
   "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT64_LOWER"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.special_math_test.LogNdtrTestMid": {
  "lineno": 198,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT32_LOWER",
   "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT32_UPPER",
   "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT64_LOWER",
   "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT64_UPPER"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.special_math_test.LogNdtrTestUpper": {
  "lineno": 212,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT32_UPPER",
   "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT64_UPPER"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtrGradientTest": {
  "lineno": 227,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtrGradientTest._test_grad_accuracy": {
  "lineno": 253,
  "symbols_in_volume": [
   "numpy.ceil",
   "numpy.float64",
   "numpy.isfinite",
   "numpy.isnan",
   "numpy.reshape",
   "scipy.special",
   "scipy.special.ndtr",
   "scipy.stats",
   "scipy.stats.norm.pdf",
   "tensorflow_probability.python.internal.special_math.log_ndtr",
   "tensorflow_probability.python.internal.special_math.ndtr",
   "tensorflow_probability.python.math.gradient.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtrGradientTest._test_grad_finite": {
  "lineno": 240,
  "symbols_in_volume": [
   "numpy.isfinite",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.special_math.log_ndtr",
   "tensorflow_probability.python.internal.special_math.ndtr",
   "tensorflow_probability.python.math.gradient.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtrGradientTest.assert_all_false": {
  "lineno": 237,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtrGradientTest.assert_all_true": {
  "lineno": 234,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtrGradientTest.test_float32": {
  "lineno": 288,
  "symbols_in_volume": [
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtrGradientTest.test_float64": {
  "lineno": 292,
  "symbols_in_volume": [
   "numpy.float64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtrTest": {
  "lineno": 111,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtrTest._test_grid": {
  "lineno": 120,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtrTest._test_grid_log": {
  "lineno": 126,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.isfinite",
   "scipy.special.log_ndtr",
   "tensorflow_probability.python.internal.special_math.log_ndtr"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtrTest._test_grid_no_log": {
  "lineno": 150,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.isfinite",
   "scipy.special.ndtr",
   "tensorflow_probability.python.internal.special_math.ndtr"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtrTest.test_float32": {
  "lineno": 174,
  "symbols_in_volume": [
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtrTest.test_float64": {
  "lineno": 177,
  "symbols_in_volume": [
   "numpy.float64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtriTest": {
  "lineno": 59,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtriTest._baseNdtriFiniteGradientTest": {
  "lineno": 87,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.special_math.ndtri",
   "tensorflow_probability.python.math.gradient.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtriTest.assertAllFinite": {
  "lineno": 62,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.isfinite",
   "numpy.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtriTest.testNdtri": {
  "lineno": 67,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.float64",
   "numpy.hstack",
   "numpy.linspace",
   "scipy.special.ndtri",
   "tensorflow_probability.python.internal.special_math.ndtri"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtriTest.testNdtriDynamicShape": {
  "lineno": 79,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "scipy.special.ndtri",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.internal.special_math.ndtri"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtriTest.testNdtriFiniteGradientFloat32": {
  "lineno": 104,
  "symbols_in_volume": [
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtriTest.testNdtriFiniteGradientFloat64": {
  "lineno": 107,
  "symbols_in_volume": [
   "numpy.float64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test._check_strictly_increasing": {
  "lineno": 37,
  "symbols_in_volume": [
   "numpy.diff",
   "numpy.testing.assert_array_less"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test._make_grid": {
  "lineno": 42,
  "symbols_in_volume": [
   "numpy.linspace",
   "numpy.prod",
   "numpy.random.RandomState",
   "numpy.reshape",
   "numpy.sort"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensor_util": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor": {
  "lineno": 31,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.internal.dtype_util.base_dtype",
   "tensorflow_probability.python.internal.dtype_util.name"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensor_util.is_ref": {
  "lineno": 113,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Module",
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensor_util_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.register_tensor_conversion_function",
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.tensor_util_test.ConvertNonrefToTensorTest": {
  "lineno": 56,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.tensor_util_test.ConvertNonrefToTensorTest.test_end_to_end": {
  "lineno": 91,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.exp",
   "tensorflow_probability.util.DeferredTensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensor_util_test.ConvertNonrefToTensorTest.test_np_object": {
  "lineno": 59,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.Tensor",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensor_util_test.ConvertNonrefToTensorTest.test_tf_module": {
  "lineno": 78,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensor_util_test.ConvertNonrefToTensorTest.test_tf_tensor": {
  "lineno": 65,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensor_util_test.ConvertNonrefToTensorTest.test_tf_variable": {
  "lineno": 70,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensor_util_test.FakeModule": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Module"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.tensor_util_test.FakeModule.__init__": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensor_util_test.FakeModule.dtype": {
  "lineno": 42,
  "symbols_in_volume": [
   "tensorflow.compat.v2.as_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensor_util_test.FakeModule.shape": {
  "lineno": 46,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensor_util_test.IsRefTest": {
  "lineno": 102,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.tensor_util_test.IsRefTest.test_various_types": {
  "lineno": 104,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensorshape_util": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.internal.tensorshape_util.as_list": {
  "lineno": 42,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensorshape_util.assert_has_rank": {
  "lineno": 60,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensorshape_util.assert_is_compatible_with": {
  "lineno": 78,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensorshape_util.concatenate": {
  "lineno": 99,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensorshape_util.constant_value_as_shape": {
  "lineno": 119,
  "symbols_in_volume": [
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.python.framework.tensor_util.constant_value_as_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensorshape_util.dims": {
  "lineno": 144,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.compat.dimension_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensorshape_util.is_compatible_with": {
  "lineno": 163,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined": {
  "lineno": 178,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensorshape_util.merge_with": {
  "lineno": 192,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensorshape_util.num_elements": {
  "lineno": 214,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensorshape_util.rank": {
  "lineno": 229,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensorshape_util.set_shape": {
  "lineno": 243,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least": {
  "lineno": 285,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_case": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.internal.test_case.TestCase": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.test_case.TestCase.assertAllFinite": {
  "lineno": 35,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.isfinite",
   "numpy.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_case.TestCase.assertAllNan": {
  "lineno": 45,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.isnan",
   "numpy.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_case.TestCase.assertAllNotNone": {
  "lineno": 55,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_case_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.test_case_test.TestCaseTestFloat32": {
  "lineno": 127,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.test_case_test.TestCaseTestFloat64": {
  "lineno": 132,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.test_case_test._TestCaseTest": {
  "lineno": 31,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.internal.test_case_test._TestCaseTest.setUp": {
  "lineno": 33,
  "symbols_in_volume": [
   "numpy.random.seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_case_test._TestCaseTest.test_assert_all_are_not_none": {
  "lineno": 116,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_case_test._TestCaseTest.test_assert_all_finite_input_finite": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.linspace",
   "tensorflow.compat.v2.reshape",
   "tensorflow_probability.python.internal.dtype_util.max",
   "tensorflow_probability.python.internal.dtype_util.min"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_case_test._TestCaseTest.test_assert_all_finite_input_inf": {
  "lineno": 65,
  "symbols_in_volume": [
   "numpy.inf",
   "numpy.linspace",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_case_test._TestCaseTest.test_assert_all_finite_input_nan": {
  "lineno": 55,
  "symbols_in_volume": [
   "numpy.linspace",
   "numpy.nan",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_case_test._TestCaseTest.test_assert_all_finite_input_py_literal": {
  "lineno": 75,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_case_test._TestCaseTest.test_assert_all_nan_input_all_nan": {
  "lineno": 86,
  "symbols_in_volume": [
   "numpy.full",
   "numpy.nan",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_case_test._TestCaseTest.test_assert_all_nan_input_inf": {
  "lineno": 103,
  "symbols_in_volume": [
   "numpy.full",
   "numpy.inf",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_case_test._TestCaseTest.test_assert_all_nan_input_numpy_rand": {
  "lineno": 98,
  "symbols_in_volume": [
   "numpy.random.rand",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_case_test._TestCaseTest.test_assert_all_nan_input_placeholder_with_default": {
  "lineno": 109,
  "symbols_in_volume": [
   "numpy.full",
   "numpy.nan",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_case_test._TestCaseTest.test_assert_all_nan_input_some_nan": {
  "lineno": 91,
  "symbols_in_volume": [
   "numpy.nan",
   "numpy.random.rand",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util": {
  "lineno": null,
  "symbols_in_volume": [
   "absl.flags.DEFINE_bool",
   "absl.flags.DEFINE_string",
   "absl.flags.FLAGS"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.test_util.DiscreteScalarDistributionTestHelpers": {
  "lineno": 211,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.internal.test_util.DiscreteScalarDistributionTestHelpers.histogram": {
  "lineno": 328,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.histogram_fixed_width",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reduce_max",
   "tensorflow.compat.v2.reduce_min",
   "tensorflow_probability.python.internal.dtype_util.base_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util.DiscreteScalarDistributionTestHelpers.run_test_sample_consistent_log_prob": {
  "lineno": 214,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.pad",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.unstack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util.DiscreteScalarDistributionTestHelpers.run_test_sample_consistent_mean_variance": {
  "lineno": 277,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.square"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers": {
  "lineno": 368,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers.run_test_sample_consistent_log_prob": {
  "lineno": 371,
  "symbols_in_volume": [
   "numpy.tile",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers.run_test_sample_consistent_log_prob.actual_hypersphere_volume": {
  "lineno": 450,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.lgamma",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers.run_test_sample_consistent_log_prob.monte_carlo_hypersphere_volume": {
  "lineno": 459,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.norm",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers.run_test_sample_consistent_mean_covariance": {
  "lineno": 492,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.sqrt"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util._vec_outer_square": {
  "lineno": 563,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util._wrap_seed": {
  "lineno": 160,
  "symbols_in_volume": [
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util._wrap_seed_jax": {
  "lineno": 167,
  "symbols_in_volume": [
   "jax.random.PRNGKey"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util.jax_disable_test_missing_functionality": {
  "lineno": 87,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util.jax_disable_test_missing_functionality.f": {
  "lineno": 90,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util.jax_disable_test_missing_functionality.f.new_test": {
  "lineno": 94,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util.jax_disable_variable_test": {
  "lineno": 74,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util.jax_disable_variable_test.new_test": {
  "lineno": 80,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util.numpy_disable_gradient_test": {
  "lineno": 60,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util.numpy_disable_gradient_test.new_test": {
  "lineno": 66,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.internal.backend.numpy.ops.NumpyVariable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util.test_seed": {
  "lineno": 104,
  "symbols_in_volume": [
   "absl.logging.warning",
   "os.urandom",
   "six.PY2"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util.test_seed_stream": {
  "lineno": 172,
  "symbols_in_volume": [
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util_test": {
  "lineno": null,
  "symbols_in_volume": [
   "absl.flags.FLAGS",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.internal.test_util_test.SeedSettingTest": {
  "lineno": 47,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.internal.test_util_test.SeedSettingTest.testFixing": {
  "lineno": 78,
  "symbols_in_volume": [
   "absl.testing.flagsaver.flagsaver",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util_test.SeedSettingTest.testSameness": {
  "lineno": 56,
  "symbols_in_volume": [
   "absl.testing.flagsaver.flagsaver",
   "tensorflow_probability.python.internal.test_util.test_seed",
   "tensorflow_probability.python.internal.test_util.test_seed_stream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util_test.SeedSettingTest.testTypeCorrectness": {
  "lineno": 50,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_util.test_seed_stream",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util_test.SeedSettingTest.testVariation": {
  "lineno": 66,
  "symbols_in_volume": [
   "absl.testing.flagsaver.flagsaver",
   "numpy.all",
   "tensorflow_probability.python.internal.test_util.test_seed",
   "tensorflow_probability.python.internal.test_util.test_seed_stream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util_test._maybe_jax": {
  "lineno": 39,
  "symbols_in_volume": [
   "jax.random.PRNGKey"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.layers.conv_variational": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.layers.conv_variational.Conv1DFlipout": {
  "lineno": 1130,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational.Conv1DFlipout.__init__": {
  "lineno": 1202,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.activations.get",
   "tensorflow_probability.python.distributions.kl_divergence",
   "tensorflow_probability.python.internal.docstring_util.expand_docstring",
   "tensorflow_probability.python.layers.util.default_mean_field_normal_fn",
   "tensorflow_probability.python.layers.util.default_multivariate_normal_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational.Conv1DReparameterization": {
  "lineno": 521,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational.Conv1DReparameterization.__init__": {
  "lineno": 594,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.activations.get",
   "tensorflow_probability.python.distributions.kl_divergence",
   "tensorflow_probability.python.internal.docstring_util.expand_docstring",
   "tensorflow_probability.python.layers.util.default_mean_field_normal_fn",
   "tensorflow_probability.python.layers.util.default_multivariate_normal_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational.Conv2DFlipout": {
  "lineno": 1272,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational.Conv2DFlipout.__init__": {
  "lineno": 1347,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.activations.get",
   "tensorflow_probability.python.distributions.kl_divergence",
   "tensorflow_probability.python.internal.docstring_util.expand_docstring",
   "tensorflow_probability.python.layers.util.default_mean_field_normal_fn",
   "tensorflow_probability.python.layers.util.default_multivariate_normal_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational.Conv2DReparameterization": {
  "lineno": 660,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational.Conv2DReparameterization.__init__": {
  "lineno": 736,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.activations.get",
   "tensorflow_probability.python.distributions.kl_divergence",
   "tensorflow_probability.python.internal.docstring_util.expand_docstring",
   "tensorflow_probability.python.layers.util.default_mean_field_normal_fn",
   "tensorflow_probability.python.layers.util.default_multivariate_normal_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational.Conv3DFlipout": {
  "lineno": 1423,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational.Conv3DFlipout.__init__": {
  "lineno": 1498,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.activations.get",
   "tensorflow_probability.python.distributions.kl_divergence",
   "tensorflow_probability.python.internal.docstring_util.expand_docstring",
   "tensorflow_probability.python.layers.util.default_mean_field_normal_fn",
   "tensorflow_probability.python.layers.util.default_multivariate_normal_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational.Conv3DReparameterization": {
  "lineno": 808,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational.Conv3DReparameterization.__init__": {
  "lineno": 880,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.activations.get",
   "tensorflow_probability.python.distributions.kl_divergence",
   "tensorflow_probability.python.internal.docstring_util.expand_docstring",
   "tensorflow_probability.python.layers.util.default_mean_field_normal_fn",
   "tensorflow_probability.python.layers.util.default_multivariate_normal_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvFlipout": {
  "lineno": 953,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvFlipout.__init__": {
  "lineno": 985,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.activations.get",
   "tensorflow_probability.python.distributions.kl_divergence",
   "tensorflow_probability.python.internal.docstring_util.expand_docstring",
   "tensorflow_probability.python.layers.util.default_mean_field_normal_fn",
   "tensorflow_probability.python.layers.util.default_multivariate_normal_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvFlipout._apply_variational_kernel": {
  "lineno": 1058,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.math.random_rademacher",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvFlipout.get_config": {
  "lineno": 1112,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvReparameterization": {
  "lineno": 415,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvReparameterization.__init__": {
  "lineno": 444,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.activations.get",
   "tensorflow_probability.python.distributions.kl_divergence",
   "tensorflow_probability.python.internal.docstring_util.expand_docstring",
   "tensorflow_probability.python.layers.util.default_mean_field_normal_fn",
   "tensorflow_probability.python.layers.util.default_multivariate_normal_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvReparameterization._apply_variational_kernel": {
  "lineno": 512,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvVariational": {
  "lineno": 79,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.layers.Layer"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvVariational.__init__": {
  "lineno": 100,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.activations.get",
   "tensorflow.compat.v2.keras.layers.InputSpec",
   "tensorflow.python.layers.utils.normalize_data_format",
   "tensorflow.python.layers.utils.normalize_padding",
   "tensorflow.python.layers.utils.normalize_tuple",
   "tensorflow_probability.python.distributions.kl_divergence",
   "tensorflow_probability.python.internal.docstring_util.expand_docstring",
   "tensorflow_probability.python.layers.util.default_mean_field_normal_fn",
   "tensorflow_probability.python.layers.util.default_multivariate_normal_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvVariational._apply_divergence": {
  "lineno": 402,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvVariational._apply_variational_bias": {
  "lineno": 366,
  "symbols_in_volume": [
   "tensorflow.compat.v2.nn.bias_add",
   "tensorflow.compat.v2.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvVariational.build": {
  "lineno": 171,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.as_dtype",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.keras.backend.floatx",
   "tensorflow.compat.v2.keras.layers.InputSpec",
   "tensorflow.python.layers.utils.convert_data_format",
   "tensorflow.python.ops.nn_ops.Convolution"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvVariational.call": {
  "lineno": 227,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvVariational.compute_output_shape": {
  "lineno": 250,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.python.layers.utils.conv_output_length"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvVariational.from_config": {
  "lineno": 333,
  "symbols_in_volume": [
   "tensorflow_probability.python.layers.util.deserialize_function"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvVariational.get_config": {
  "lineno": 287,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.activations.serialize",
   "tensorflow.compat.v2.keras.initializers.serialize",
   "tensorflow_probability.python.layers.util.serialize_function"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.python.ops.nn_ops.Convolution",
   "tensorflow.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.layers.conv_variational_test.CPUConvolution": {
  "lineno": 71,
  "symbols_in_volume": [
   "tensorflow.python.ops.nn_ops.Convolution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational_test.CPUConvolution.__call__": {
  "lineno": 98,
  "symbols_in_volume": [
   "tensorflow.compat.v2.transpose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.CPUConvolution.__init__": {
  "lineno": 79,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational": {
  "lineno": 181,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational._testConvFlipout": {
  "lineno": 422,
  "symbols_in_volume": [
   "tensorflow.TensorShape",
   "tensorflow.cast",
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow.concat",
   "tensorflow.expand_dims",
   "tensorflow.int64",
   "tensorflow.nn.bias_add",
   "tensorflow.python.layers.utils.convert_data_format",
   "tensorflow.python.ops.nn_ops.Convolution",
   "tensorflow.random.uniform",
   "tensorflow.shape",
   "tensorflow.zeros_like",
   "tensorflow_probability.util.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational._testConvReparameterization": {
  "lineno": 358,
  "symbols_in_volume": [
   "tensorflow.TensorShape",
   "tensorflow.nn.bias_add",
   "tensorflow.python.layers.utils.convert_data_format",
   "tensorflow.python.ops.nn_ops.Convolution"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational._testConvSetUp": {
  "lineno": 293,
  "symbols_in_volume": [
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow.random.uniform",
   "tensorflow_probability.layers.Convolution1DFlipout",
   "tensorflow_probability.layers.Convolution1DReparameterization",
   "tensorflow_probability.layers.Convolution2DFlipout",
   "tensorflow_probability.layers.Convolution2DReparameterization",
   "tensorflow_probability.layers.Convolution3DFlipout",
   "tensorflow_probability.layers.Convolution3DReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational._testKLPenaltyBoth": {
  "lineno": 260,
  "symbols_in_volume": [
   "tensorflow.random.uniform",
   "tensorflow_probability.layers.Convolution1DFlipout",
   "tensorflow_probability.layers.Convolution1DReparameterization",
   "tensorflow_probability.layers.Convolution2DFlipout",
   "tensorflow_probability.layers.Convolution2DReparameterization",
   "tensorflow_probability.layers.Convolution3DFlipout",
   "tensorflow_probability.layers.Convolution3DReparameterization",
   "tensorflow_probability.layers.default_mean_field_normal_fn",
   "tensorflow_probability.layers.default_multivariate_normal_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational._testKLPenaltyKernel": {
  "lineno": 232,
  "symbols_in_volume": [
   "tensorflow.random.uniform",
   "tensorflow_probability.layers.Convolution1DFlipout",
   "tensorflow_probability.layers.Convolution1DReparameterization",
   "tensorflow_probability.layers.Convolution2DFlipout",
   "tensorflow_probability.layers.Convolution2DReparameterization",
   "tensorflow_probability.layers.Convolution3DFlipout",
   "tensorflow_probability.layers.Convolution3DReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational._testKerasLayer": {
  "lineno": 191,
  "symbols_in_volume": [
   "tensorflow.keras.utils.CustomObjectScope",
   "tensorflow.python.keras.testing_utils.layer_test",
   "tensorflow_probability.layers.Convolution1DFlipout",
   "tensorflow_probability.layers.Convolution1DReparameterization",
   "tensorflow_probability.layers.Convolution2DFlipout",
   "tensorflow_probability.layers.Convolution2DReparameterization",
   "tensorflow_probability.layers.Convolution3DFlipout",
   "tensorflow_probability.layers.Convolution3DReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational._testKerasLayer.kernel_posterior_fn": {
  "lineno": 192,
  "symbols_in_volume": [
   "tensorflow.size",
   "tensorflow.zeros",
   "tensorflow_probability.distributions"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational._testLayerInSequential": {
  "lineno": 600,
  "symbols_in_volume": [
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.keras.Sequential",
   "tensorflow.random.uniform",
   "tensorflow_probability.layers.Convolution1DFlipout",
   "tensorflow_probability.layers.Convolution1DReparameterization",
   "tensorflow_probability.layers.Convolution2DFlipout",
   "tensorflow_probability.layers.Convolution2DReparameterization",
   "tensorflow_probability.layers.Convolution3DFlipout",
   "tensorflow_probability.layers.Convolution3DReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational._testRandomConvFlipout": {
  "lineno": 533,
  "symbols_in_volume": [
   "numpy.isclose",
   "numpy.prod",
   "numpy.sum",
   "tensorflow.random.uniform",
   "tensorflow_probability.layers.Convolution1DFlipout",
   "tensorflow_probability.layers.Convolution1DReparameterization",
   "tensorflow_probability.layers.Convolution2DFlipout",
   "tensorflow_probability.layers.Convolution2DReparameterization",
   "tensorflow_probability.layers.Convolution3DFlipout",
   "tensorflow_probability.layers.Convolution3DReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.maybe_transpose_inputs": {
  "lineno": 184,
  "symbols_in_volume": [
   "tensorflow.compat.v2.transpose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testConvolution1DFlipout": {
  "lineno": 685,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution1DFlipout"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testConvolution1DReparameterization": {
  "lineno": 676,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution1DReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testConvolution2DFlipout": {
  "lineno": 688,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution2DFlipout"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testConvolution2DReparameterization": {
  "lineno": 679,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution2DReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testConvolution3DFlipout": {
  "lineno": 691,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution3DFlipout"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testConvolution3DReparameterization": {
  "lineno": 682,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution3DReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testGradients": {
  "lineno": 715,
  "symbols_in_volume": [
   "tensorflow.GradientTape",
   "tensorflow.keras.Sequential",
   "tensorflow.zeros",
   "tensorflow_probability.layers.Convolution1DFlipout",
   "tensorflow_probability.layers.Convolution1DReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKLPenaltyBothConvolution1DFlipout": {
  "lineno": 667,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution1DFlipout"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKLPenaltyBothConvolution1DReparameterization": {
  "lineno": 658,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution1DReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKLPenaltyBothConvolution2DFlipout": {
  "lineno": 670,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution2DFlipout"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKLPenaltyBothConvolution2DReparameterization": {
  "lineno": 661,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution2DReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKLPenaltyBothConvolution3DFlipout": {
  "lineno": 673,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution3DFlipout"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKLPenaltyBothConvolution3DReparameterization": {
  "lineno": 664,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution3DReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKLPenaltyKernelConvolution1DFlipout": {
  "lineno": 649,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution1DFlipout"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKLPenaltyKernelConvolution1DReparameterization": {
  "lineno": 640,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution1DReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKLPenaltyKernelConvolution2DFlipout": {
  "lineno": 652,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution2DFlipout"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKLPenaltyKernelConvolution2DReparameterization": {
  "lineno": 643,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution2DReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKLPenaltyKernelConvolution3DFlipout": {
  "lineno": 655,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution3DFlipout"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKLPenaltyKernelConvolution3DReparameterization": {
  "lineno": 646,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution3DReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKerasLayerConvolution1DFlipout": {
  "lineno": 631,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution1DFlipout"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKerasLayerConvolution1DReparameterization": {
  "lineno": 622,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution1DReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKerasLayerConvolution2DFlipout": {
  "lineno": 634,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution2DFlipout"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKerasLayerConvolution2DReparameterization": {
  "lineno": 625,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution2DReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKerasLayerConvolution3DFlipout": {
  "lineno": 637,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution3DFlipout"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKerasLayerConvolution3DReparameterization": {
  "lineno": 628,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution3DReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testRandomConvolution1DFlipout": {
  "lineno": 694,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution1DFlipout"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testSequentialConvolution1DFlipout": {
  "lineno": 706,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution1DFlipout"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testSequentialConvolution1DReparameterization": {
  "lineno": 697,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution1DReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testSequentialConvolution2DFlipout": {
  "lineno": 709,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution2DFlipout"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testSequentialConvolution2DReparameterization": {
  "lineno": 700,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution2DReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testSequentialConvolution3DFlipout": {
  "lineno": 712,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution3DFlipout"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testSequentialConvolution3DReparameterization": {
  "lineno": 703,
  "symbols_in_volume": [
   "tensorflow_probability.layers.Convolution3DReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariationalTestChannelsFirst": {
  "lineno": 728,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariationalTestChannelsLast": {
  "lineno": 733,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational_test.Counter": {
  "lineno": 112,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational_test.Counter.__call__": {
  "lineno": 122,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.Counter.__init__": {
  "lineno": 115,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.Counter.value": {
  "lineno": 118,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.MockDistribution": {
  "lineno": 127,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational_test.MockDistribution.__init__": {
  "lineno": 130,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.MockDistribution.distribution": {
  "lineno": 152,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.MockDistribution.loc": {
  "lineno": 156,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.MockDistribution.log_prob": {
  "lineno": 144,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.MockDistribution.sample": {
  "lineno": 148,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.MockDistribution.scale": {
  "lineno": 161,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.MockKLDivergence": {
  "lineno": 167,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational_test.MockKLDivergence.__call__": {
  "lineno": 175,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.MockKLDivergence.__init__": {
  "lineno": 170,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.channels_first_to_last": {
  "lineno": 54,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.channels_last_to_first": {
  "lineno": 37,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.layers.dense_variational.DenseFlipout": {
  "lineno": 563,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.dense_variational.DenseFlipout.__init__": {
  "lineno": 630,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.kl_divergence",
   "tensorflow_probability.python.internal.docstring_util.expand_docstring",
   "tensorflow_probability.python.layers.util.default_mean_field_normal_fn",
   "tensorflow_probability.python.layers.util.default_multivariate_normal_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational.DenseFlipout._apply_variational_kernel": {
  "lineno": 674,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.math.random_rademacher",
   "tensorflow_probability.python.util.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational.DenseFlipout.get_config": {
  "lineno": 710,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational.DenseLocalReparameterization": {
  "lineno": 430,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.dense_variational.DenseLocalReparameterization.__init__": {
  "lineno": 505,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.kl_divergence",
   "tensorflow_probability.python.internal.docstring_util.expand_docstring",
   "tensorflow_probability.python.layers.util.default_mean_field_normal_fn",
   "tensorflow_probability.python.layers.util.default_multivariate_normal_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational.DenseLocalReparameterization._apply_variational_kernel": {
  "lineno": 544,
  "symbols_in_volume": [
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.square",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational.DenseReparameterization": {
  "lineno": 314,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.dense_variational.DenseReparameterization.__init__": {
  "lineno": 383,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.kl_divergence",
   "tensorflow_probability.python.internal.docstring_util.expand_docstring",
   "tensorflow_probability.python.layers.util.default_mean_field_normal_fn",
   "tensorflow_probability.python.layers.util.default_multivariate_normal_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational.DenseReparameterization._apply_variational_kernel": {
  "lineno": 422,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational._DenseVariational": {
  "lineno": 75,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.layers.Layer"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.dense_variational._DenseVariational.__init__": {
  "lineno": 93,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.activations.get",
   "tensorflow.compat.v2.keras.layers.InputSpec",
   "tensorflow_probability.python.distributions.kl_divergence",
   "tensorflow_probability.python.internal.docstring_util.expand_docstring",
   "tensorflow_probability.python.layers.util.default_mean_field_normal_fn",
   "tensorflow_probability.python.layers.util.default_multivariate_normal_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational._DenseVariational._apply_divergence": {
  "lineno": 294,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational._DenseVariational._apply_variational_bias": {
  "lineno": 286,
  "symbols_in_volume": [
   "tensorflow.compat.v2.nn.bias_add"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational._DenseVariational._matmul": {
  "lineno": 307,
  "symbols_in_volume": [
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.tensordot"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational._DenseVariational.build": {
  "lineno": 130,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.as_dtype",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.keras.backend.floatx",
   "tensorflow.compat.v2.keras.layers.InputSpec"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational._DenseVariational.call": {
  "lineno": 169,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational._DenseVariational.compute_output_shape": {
  "lineno": 190,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.compat.dimension_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational._DenseVariational.from_config": {
  "lineno": 253,
  "symbols_in_volume": [
   "tensorflow_probability.python.layers.util.deserialize_function"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational._DenseVariational.get_config": {
  "lineno": 212,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.activations.serialize",
   "tensorflow.compat.v2.keras.initializers.serialize",
   "tensorflow_probability.python.layers.util.serialize_function"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.layers.dense_variational_test.Counter": {
  "lineno": 35,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.dense_variational_test.Counter.__call__": {
  "lineno": 45,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.Counter.__init__": {
  "lineno": 38,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.Counter.value": {
  "lineno": 41,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational": {
  "lineno": 104,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational._testDenseSetUp": {
  "lineno": 177,
  "symbols_in_volume": [
   "tensorflow.random.uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational._testKLPenaltyBoth": {
  "lineno": 155,
  "symbols_in_volume": [
   "tensorflow.random.uniform",
   "tensorflow_probability.layers.default_mean_field_normal_fn",
   "tensorflow_probability.layers.default_multivariate_normal_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational._testKLPenaltyKernel": {
  "lineno": 137,
  "symbols_in_volume": [
   "tensorflow.random.uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational._testKerasLayer": {
  "lineno": 107,
  "symbols_in_volume": [
   "tensorflow.keras.utils.CustomObjectScope",
   "tensorflow.python.keras.testing_utils.layer_test"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational._testKerasLayer.kernel_posterior_fn": {
  "lineno": 108,
  "symbols_in_volume": [
   "tensorflow.ones",
   "tensorflow.size",
   "tensorflow.zeros",
   "tensorflow_probability.distributions"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testDenseFlipout": {
  "lineno": 378,
  "symbols_in_volume": [
   "tensorflow.cast",
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow.int64",
   "tensorflow.matmul",
   "tensorflow.random.uniform",
   "tensorflow.zeros_like",
   "tensorflow_probability.layers.DenseFlipout"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testDenseLayersInSequential": {
  "lineno": 505,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.uniform",
   "tensorflow.keras.Sequential",
   "tensorflow.nn.relu",
   "tensorflow.random.uniform",
   "tensorflow_probability.layers.DenseFlipout",
   "tensorflow_probability.layers.DenseLocalReparameterization",
   "tensorflow_probability.layers.DenseReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testDenseLocalReparameterization": {
  "lineno": 313,
  "symbols_in_volume": [
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow.matmul",
   "tensorflow_probability.layers.DenseLocalReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testDenseReparameterization": {
  "lineno": 250,
  "symbols_in_volume": [
   "tensorflow.matmul",
   "tensorflow_probability.layers.DenseReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testGradients": {
  "lineno": 524,
  "symbols_in_volume": [
   "tensorflow.GradientTape",
   "tensorflow.keras.Sequential",
   "tensorflow.zeros",
   "tensorflow_probability.layers.DenseFlipout",
   "tensorflow_probability.layers.DenseLocalReparameterization",
   "tensorflow_probability.layers.DenseReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testKLPenaltyBothFlipout": {
  "lineno": 247,
  "symbols_in_volume": [
   "tensorflow_probability.layers.DenseFlipout"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testKLPenaltyBothLocalReparameterization": {
  "lineno": 244,
  "symbols_in_volume": [
   "tensorflow_probability.layers.DenseLocalReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testKLPenaltyBothReparameterization": {
  "lineno": 241,
  "symbols_in_volume": [
   "tensorflow_probability.layers.DenseReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testKLPenaltyKernelFlipout": {
  "lineno": 238,
  "symbols_in_volume": [
   "tensorflow_probability.layers.DenseFlipout"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testKLPenaltyKernelLocalReparameterization": {
  "lineno": 235,
  "symbols_in_volume": [
   "tensorflow_probability.layers.DenseLocalReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testKLPenaltyKernelReparameterization": {
  "lineno": 232,
  "symbols_in_volume": [
   "tensorflow_probability.layers.DenseReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testKerasLayerFlipout": {
  "lineno": 229,
  "symbols_in_volume": [
   "tensorflow_probability.layers.DenseFlipout"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testKerasLayerLocalReparameterization": {
  "lineno": 226,
  "symbols_in_volume": [
   "tensorflow_probability.layers.DenseLocalReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testKerasLayerReparameterization": {
  "lineno": 223,
  "symbols_in_volume": [
   "tensorflow_probability.layers.DenseReparameterization"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testRandomDenseFlipout": {
  "lineno": 462,
  "symbols_in_volume": [
   "numpy.isclose",
   "numpy.sum",
   "tensorflow.random.uniform",
   "tensorflow_probability.layers.DenseFlipout"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.MockDistribution": {
  "lineno": 50,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.dense_variational_test.MockDistribution.__init__": {
  "lineno": 53,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.MockDistribution.distribution": {
  "lineno": 75,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.MockDistribution.loc": {
  "lineno": 79,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.MockDistribution.log_prob": {
  "lineno": 67,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.MockDistribution.sample": {
  "lineno": 71,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.MockDistribution.scale": {
  "lineno": 84,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.MockKLDivergence": {
  "lineno": 90,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.dense_variational_test.MockKLDivergence.__call__": {
  "lineno": 98,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.MockKLDivergence.__init__": {
  "lineno": 93,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_v2": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.layers.dense_variational_v2.DenseVariational": {
  "lineno": 27,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.layers.Layer"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.dense_variational_v2.DenseVariational.__init__": {
  "lineno": 45,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.activations.get",
   "tensorflow.compat.v2.keras.layers.InputSpec",
   "tensorflow.compat.v2.keras.regularizers.get"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_v2.DenseVariational.build": {
  "lineno": 94,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.as_dtype",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.keras.backend.floatx",
   "tensorflow.compat.v2.keras.layers.InputSpec"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_v2.DenseVariational.call": {
  "lineno": 118,
  "symbols_in_volume": [
   "tensorflow.compat.v2.as_dtype",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.keras.backend.floatx",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.nn.bias_add",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.split"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_v2._make_kl_divergence_penalty": {
  "lineno": 149,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_v2._make_kl_divergence_penalty._fn": {
  "lineno": 166,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_v2._make_kl_divergence_penalty.kl_divergence_fn": {
  "lineno": 159,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_v2_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.layers.dense_variational_v2_test.DenseVariationalLayerTest": {
  "lineno": 78,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.dense_variational_v2_test.DenseVariationalLayerTest.test_end_to_end": {
  "lineno": 81,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.Sequential",
   "tensorflow.compat.v2.optimizers.Adam",
   "tensorflow_probability.layers.DenseVariational",
   "tensorflow_probability.layers.DistributionLambda",
   "tensorflow_probability.python.distributions.Distribution",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_v2_test.create_dataset": {
  "lineno": 32,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "numpy.newaxis",
   "numpy.random.rand",
   "numpy.random.randn",
   "numpy.random.seed",
   "numpy.sin"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_v2_test.create_dataset.s": {
  "lineno": 40,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_v2_test.posterior_mean_field": {
  "lineno": 53,
  "symbols_in_volume": [
   "numpy.expm1",
   "numpy.log",
   "tensorflow.compat.v2.keras.Sequential",
   "tensorflow.compat.v2.nn.softplus",
   "tensorflow_probability.layers.DistributionLambda",
   "tensorflow_probability.layers.VariableLayer",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_v2_test.prior_trainable": {
  "lineno": 65,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.Sequential",
   "tensorflow_probability.layers.DistributionLambda",
   "tensorflow_probability.layers.VariableLayer",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.utils.get_custom_objects",
   "tensorflow.python.keras.utils.tf_utils.register_symbolic_tensor_type",
   "tensorflow_probability.python.distributions.Distribution.mean",
   "tensorflow_probability.python.distributions.Distribution.mode",
   "tensorflow_probability.python.distributions.Distribution.sample",
   "tensorflow_probability.python.distributions.Distribution.stddev",
   "tensorflow_probability.python.distributions.Distribution.variance",
   "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._TensorCoercible"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.layers.distribution_layer.CategoricalMixtureOfOneHotCategorical": {
  "lineno": 471,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.CategoricalMixtureOfOneHotCategorical.__init__": {
  "lineno": 527,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Distribution.sample"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.CategoricalMixtureOfOneHotCategorical.new": {
  "lineno": 562,
  "symbols_in_volume": [
   "functools.partial",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.distributions.Distribution.log_prob",
   "tensorflow_probability.python.distributions.Distribution.prob"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.CategoricalMixtureOfOneHotCategorical.params_size": {
  "lineno": 587,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.DistributionLambda": {
  "lineno": 90,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.layers.Lambda"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.DistributionLambda.__call__": {
  "lineno": 204,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.DistributionLambda.__init__": {
  "lineno": 124,
  "symbols_in_volume": [
   "six.string_types",
   "tensorflow_probability.python.distributions.Distribution.sample"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.DistributionLambda.__init__._fn": {
  "lineno": 159,
  "symbols_in_volume": [
   "collections.Sequence",
   "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._TensorCoercible",
   "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.DistributionLambda._variable_creator": {
  "lineno": 260,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.DistributionLambda.call": {
  "lineno": 211,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.DistributionLambda.get_config": {
  "lineno": 221,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentBernoulli": {
  "lineno": 599,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentBernoulli.__init__": {
  "lineno": 654,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Distribution.sample"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentBernoulli.get_config": {
  "lineno": 734,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentBernoulli.new": {
  "lineno": 697,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.distributions.Bernoulli.logits",
   "tensorflow_probability.python.distributions.Bernoulli.probs",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.internal.distribution_util.expand_to_vector"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentBernoulli.params_size": {
  "lineno": 724,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentLogistic": {
  "lineno": 773,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentLogistic.__init__": {
  "lineno": 798,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Distribution.sample"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentLogistic.get_config": {
  "lineno": 869,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentLogistic.new": {
  "lineno": 835,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.math.softplus",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size",
   "tensorflow.compat.v2.split",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Logistic",
   "tensorflow_probability.python.internal.distribution_util.expand_to_vector"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentLogistic.params_size": {
  "lineno": 859,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentNormal": {
  "lineno": 890,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentNormal.__init__": {
  "lineno": 915,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Distribution.sample"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentNormal.get_config": {
  "lineno": 986,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentNormal.new": {
  "lineno": 952,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.math.softplus",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size",
   "tensorflow.compat.v2.split",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.internal.distribution_util.expand_to_vector"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentNormal.params_size": {
  "lineno": 976,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentPoisson": {
  "lineno": 1007,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentPoisson.__init__": {
  "lineno": 1048,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Distribution.sample"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentPoisson.get_config": {
  "lineno": 1117,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentPoisson.new": {
  "lineno": 1085,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Poisson",
   "tensorflow_probability.python.internal.distribution_util.expand_to_vector"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentPoisson.params_size": {
  "lineno": 1107,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.KLDivergenceAddLoss": {
  "lineno": 1225,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.layers.Layer"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.KLDivergenceAddLoss.__init__": {
  "lineno": 1259,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.KLDivergenceAddLoss.call": {
  "lineno": 1305,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.KLDivergenceRegularizer": {
  "lineno": 1138,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.regularizers.Regularizer"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.KLDivergenceRegularizer.__call__": {
  "lineno": 1212,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.KLDivergenceRegularizer.__init__": {
  "lineno": 1174,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureLogistic": {
  "lineno": 1607,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureLogistic.__init__": {
  "lineno": 1647,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Distribution.sample"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureLogistic.get_config": {
  "lineno": 1711,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureLogistic.new": {
  "lineno": 1689,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureLogistic.params_size": {
  "lineno": 1703,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureNormal": {
  "lineno": 1482,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureNormal.__init__": {
  "lineno": 1522,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Distribution.sample"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureNormal.get_config": {
  "lineno": 1585,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureNormal.new": {
  "lineno": 1564,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureNormal.params_size": {
  "lineno": 1577,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureSameFamily": {
  "lineno": 1354,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureSameFamily.__init__": {
  "lineno": 1396,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Distribution.sample"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureSameFamily.new": {
  "lineno": 1428,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.MixtureSameFamily"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureSameFamily.params_size": {
  "lineno": 1452,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MultivariateNormalTriL": {
  "lineno": 270,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.MultivariateNormalTriL.__init__": {
  "lineno": 322,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Distribution.sample"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MultivariateNormalTriL.new": {
  "lineno": 348,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.bijectors.ScaleTriL",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MultivariateNormalTriL.params_size": {
  "lineno": 362,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.OneHotCategorical": {
  "lineno": 370,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.OneHotCategorical.__init__": {
  "lineno": 425,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Distribution.sample"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.OneHotCategorical.new": {
  "lineno": 455,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow_probability.python.distributions.OneHotCategorical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.OneHotCategorical.params_size": {
  "lineno": 465,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.VariationalGaussianProcess": {
  "lineno": 1733,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.VariationalGaussianProcess.__init__": {
  "lineno": 1747,
  "symbols_in_volume": [
   "tensorflow.compat.v1.initializers.constant",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.distributions.Distribution.sample"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.VariationalGaussianProcess.build": {
  "lineno": 1830,
  "symbols_in_volume": [
   "numpy.eye",
   "numpy.ones",
   "tensorflow.compat.v1.initializers.constant",
   "tensorflow.compat.v1.initializers.zeros",
   "tensorflow.compat.v2.nn.softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.VariationalGaussianProcess.new": {
  "lineno": 1881,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Transpose",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.TransformedDistribution",
   "tensorflow_probability.python.distributions.VariationalGaussianProcess"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.VariationalGaussianProcess.new._transposed_variational_loss": {
  "lineno": 1906,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer._TensorCloudPickler": {
  "lineno": 1966,
  "symbols_in_volume": [
   "cloudpickle.CloudPickler"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer._TensorCloudPickler.__init__": {
  "lineno": 1969,
  "symbols_in_volume": [
   "cloudpickle.CloudPickler.__init__"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer._TensorCloudPickler.dumps": {
  "lineno": 1984,
  "symbols_in_volume": [
   "io.BytesIO"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer._TensorCloudPickler.inject_addons": {
  "lineno": 1980,
  "symbols_in_volume": [
   "cloudpickle.CloudPickler.dispatch",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer._TensorCloudPickler.save_tensor": {
  "lineno": 1972,
  "symbols_in_volume": [
   "cloudpickle.CloudPickler.save_reduce",
   "numpy.array",
   "tensorflow.compat.v2.get_static_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer._deserialize": {
  "lineno": 1937,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.utils.deserialize_keras_object"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer._deserialize_function": {
  "lineno": 1999,
  "symbols_in_volume": [
   "codecs.decode",
   "pickle.loads"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer._eval_all_one_hot": {
  "lineno": 756,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.eye",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.pad",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.size",
   "tensorflow.compat.v2.transpose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer._event_size": {
  "lineno": 66,
  "symbols_in_volume": [
   "numpy.prod",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.reduce_prod"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer._get_convert_to_tensor_fn": {
  "lineno": 1945,
  "symbols_in_volume": [
   "six.string_types"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer._make_kl_divergence_fn": {
  "lineno": 1311,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.distributions.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer._make_kl_divergence_fn._fn": {
  "lineno": 1330,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer._make_kl_divergence_fn.kl_divergence_fn": {
  "lineno": 1323,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer._serialize": {
  "lineno": 1933,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.utils.serialize_keras_object"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer._serialize_function": {
  "lineno": 1994,
  "symbols_in_volume": [
   "codecs.encode"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras",
   "tensorflow.compat.v2.keras.layers",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.CategoricalMixtureOfOneHotCategoricalTest": {
  "lineno": 607,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.CategoricalMixtureOfOneHotCategoricalTest._check_distribution": {
  "lineno": 610,
  "symbols_in_volume": [
   "numpy.exp",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.reshape",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.MixtureSameFamily",
   "tensorflow_probability.python.distributions.OneHotCategorical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.CategoricalMixtureOfOneHotCategoricalTest.test_doc_string": {
  "lineno": 654,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.keras.Sequential",
   "tensorflow.compat.v2.keras.layers.Dense",
   "tensorflow.compat.v2.optimizers.Adam",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.MixtureSameFamily",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.OneHotCategorical",
   "tensorflow_probability.python.layers.CategoricalMixtureOfOneHotCategorical",
   "tensorflow_probability.python.layers.CategoricalMixtureOfOneHotCategorical.params_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.CategoricalMixtureOfOneHotCategoricalTest.test_layer": {
  "lineno": 644,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.layers.CategoricalMixtureOfOneHotCategorical",
   "tensorflow_probability.python.layers.CategoricalMixtureOfOneHotCategorical.params_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.CategoricalMixtureOfOneHotCategoricalTest.test_new": {
  "lineno": 635,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.layers.CategoricalMixtureOfOneHotCategorical.new",
   "tensorflow_probability.python.layers.CategoricalMixtureOfOneHotCategorical.params_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.DistributionLambdaSerializationTest": {
  "lineno": 286,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.DistributionLambdaSerializationTest._make_distribution": {
  "lineno": 356,
  "symbols_in_volume": [
   "tensorflow_probability.python.layers.IndependentNormal",
   "tensorflow_probability.python.layers.MixtureSameFamily.new"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.DistributionLambdaSerializationTest.assertExportable": {
  "lineno": 317,
  "symbols_in_volume": [
   "numpy.random.uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.DistributionLambdaSerializationTest.assertSerializable": {
  "lineno": 289,
  "symbols_in_volume": [
   "numpy.random.uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.DistributionLambdaSerializationTest.test_serialization": {
  "lineno": 338,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.layers.DistributionLambda"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.DistributionLambdaSerializationTest.test_serialization_closure_over_lambdas_tensors_and_numpy_array": {
  "lineno": 381,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.layers.DistributionLambda",
   "tensorflow_probability.python.layers.IndependentNormal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.DistributionLambdaSerializationTest.test_serialization_closure_over_lambdas_tensors_and_numpy_array.make_distribution": {
  "lineno": 385,
  "symbols_in_volume": [
   "tensorflow_probability.python.layers.MixtureSameFamily.new"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.DistributionLambdaSerializationTest.test_serialization_static_method": {
  "lineno": 360,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Distribution.mean",
   "tensorflow_probability.python.layers.DistributionLambda"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.DistributionLambdaVariableCreation": {
  "lineno": 404,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.DistributionLambdaVariableCreation.test_variable_creation": {
  "lineno": 407,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.rand",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.optimizers.Adam",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.layers.DistributionLambda"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.EndToEndTest": {
  "lineno": 54,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.EndToEndTest.setUp": {
  "lineno": 77,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.rand"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.EndToEndTest.test_keras_functional_api": {
  "lineno": 147,
  "symbols_in_volume": [
   "functools.reduce",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.optimizers.Adam",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.distributions.Bernoulli.logits",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.layers.IndependentBernoulli",
   "tensorflow_probability.python.layers.IndependentBernoulli.params_size",
   "tensorflow_probability.python.layers.KLDivergenceAddLoss",
   "tensorflow_probability.python.layers.MultivariateNormalTriL",
   "tensorflow_probability.python.layers.MultivariateNormalTriL.params_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.EndToEndTest.test_keras_model_api": {
  "lineno": 187,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.optimizers.Adam",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.distributions.Independent"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.EndToEndTest.test_keras_model_api.Decoder": {
  "lineno": 209,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.EndToEndTest.test_keras_model_api.Decoder.__init__": {
  "lineno": 212,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Bernoulli.logits",
   "tensorflow_probability.python.layers.IndependentBernoulli",
   "tensorflow_probability.python.layers.IndependentBernoulli.params_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.EndToEndTest.test_keras_model_api.Decoder.call": {
  "lineno": 220,
  "symbols_in_volume": [
   "functools.reduce"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.EndToEndTest.test_keras_model_api.Encoder": {
  "lineno": 190,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.EndToEndTest.test_keras_model_api.Encoder.__init__": {
  "lineno": 193,
  "symbols_in_volume": [
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.layers.KLDivergenceAddLoss",
   "tensorflow_probability.python.layers.MultivariateNormalTriL",
   "tensorflow_probability.python.layers.MultivariateNormalTriL.params_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.EndToEndTest.test_keras_model_api.Encoder.call": {
  "lineno": 206,
  "symbols_in_volume": [
   "functools.reduce"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.EndToEndTest.test_keras_sequential_api": {
  "lineno": 88,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.optimizers.Adam",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.distributions.Bernoulli.logits",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.layers.DistributionLambda",
   "tensorflow_probability.python.layers.IndependentBernoulli",
   "tensorflow_probability.python.layers.IndependentBernoulli.params_size",
   "tensorflow_probability.python.layers.KLDivergenceRegularizer",
   "tensorflow_probability.python.layers.MultivariateNormalTriL",
   "tensorflow_probability.python.layers.MultivariateNormalTriL.params_size",
   "tensorflow_probability.python.layers.VariableLayer"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.EndToEndTest.test_keras_sequential_api.accuracy": {
  "lineno": 126,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reduce_mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.EndToEndTest.test_keras_sequential_api_multiple_draws": {
  "lineno": 243,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.optimizers.Adam",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.distributions.Bernoulli.logits",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.layers.IndependentBernoulli",
   "tensorflow_probability.python.layers.IndependentBernoulli.params_size",
   "tensorflow_probability.python.layers.KLDivergenceAddLoss",
   "tensorflow_probability.python.layers.MultivariateNormalTriL",
   "tensorflow_probability.python.layers.MultivariateNormalTriL.params_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.IndependentBernoulliTestDynamicShape": {
  "lineno": 820,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.IndependentBernoulliTestStaticShape": {
  "lineno": 827,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.IndependentBernoulliTestStaticShape.test_doc_string": {
  "lineno": 833,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v2.keras.Sequential",
   "tensorflow.compat.v2.keras.layers.Dense",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.optimizers.Adam",
   "tensorflow.compat.v2.reshape",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.layers.IndependentBernoulli",
   "tensorflow_probability.python.layers.IndependentBernoulli.params_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.IndependentLogisticTestDynamicShape": {
  "lineno": 881,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.IndependentLogisticTestStaticShape": {
  "lineno": 888,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.IndependentLogisticTestStaticShape.test_doc_string": {
  "lineno": 894,
  "symbols_in_volume": [
   "numpy.random.randn",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.layers.IndependentLogistic",
   "tensorflow_probability.python.layers.IndependentLogistic.params_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.IndependentNormalTestDynamicShape": {
  "lineno": 966,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.IndependentNormalTestStaticShape": {
  "lineno": 973,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.IndependentNormalTestStaticShape.test_doc_string": {
  "lineno": 979,
  "symbols_in_volume": [
   "numpy.random.randn",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.layers.IndependentNormal",
   "tensorflow_probability.python.layers.IndependentNormal.params_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.IndependentPoissonTestDynamicShape": {
  "lineno": 1013,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.IndependentPoissonTestStaticShape": {
  "lineno": 1020,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.IndependentPoissonTestStaticShape.test_doc_string": {
  "lineno": 1026,
  "symbols_in_volume": [
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.optimizers.Adam",
   "tensorflow_probability.python.distributions.Poisson",
   "tensorflow_probability.python.distributions.Uniform",
   "tensorflow_probability.python.layers.IndependentPoisson",
   "tensorflow_probability.python.layers.IndependentPoisson.params_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.JointDistributionLayer": {
  "lineno": 1516,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.JointDistributionLayer.test_works": {
  "lineno": 1519,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.keras.Input",
   "tensorflow.compat.v2.keras.Model",
   "tensorflow.compat.v2.keras.layers.Dense",
   "tensorflow_probability.layers.DistributionLambda",
   "tensorflow_probability.layers.VariableLayer",
   "tensorflow_probability.python.distributions.Gamma",
   "tensorflow_probability.python.distributions.JointDistributionSequential",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.KLDivergenceAddLoss": {
  "lineno": 438,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.KLDivergenceAddLoss.test_approx_kl": {
  "lineno": 441,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.optimizers.Adam",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.bijectors.ScaleTriL",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL",
   "tensorflow_probability.python.distributions.kl_divergence",
   "tensorflow_probability.python.layers.KLDivergenceAddLoss",
   "tensorflow_probability.python.layers.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.MixtureLogisticTestDynamicShape": {
  "lineno": 1234,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.MixtureLogisticTestStaticShape": {
  "lineno": 1241,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.MixtureNormalTestDynamicShape": {
  "lineno": 1304,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.MixtureNormalTestStaticShape": {
  "lineno": 1311,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.MixtureSameFamilyTestDynamicShape": {
  "lineno": 1420,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.MixtureSameFamilyTestStaticShape": {
  "lineno": 1427,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.MultivariateNormalTriLTest": {
  "lineno": 484,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.MultivariateNormalTriLTest._check_distribution": {
  "lineno": 487,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow_probability.python.bijectors.ScaleTriL",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.MultivariateNormalTriLTest.test_doc_string": {
  "lineno": 508,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.log",
   "numpy.pad",
   "tensorflow.compat.v2.keras.Sequential",
   "tensorflow.compat.v2.keras.layers.Dense",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.optimizers.Adam",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.layers.MultivariateNormalTriL",
   "tensorflow_probability.python.layers.MultivariateNormalTriL.params_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.MultivariateNormalTriLTest.test_layer": {
  "lineno": 500,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Distribution.mean",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.layers.MultivariateNormalTriL",
   "tensorflow_probability.python.layers.MultivariateNormalTriL.params_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.MultivariateNormalTriLTest.test_new": {
  "lineno": 493,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.layers.MultivariateNormalTriL.new",
   "tensorflow_probability.python.layers.MultivariateNormalTriL.params_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.OneHotCategoricalTest": {
  "lineno": 550,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.OneHotCategoricalTest._check_distribution": {
  "lineno": 553,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.OneHotCategorical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.OneHotCategoricalTest.test_doc_string": {
  "lineno": 575,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.keras.Sequential",
   "tensorflow.compat.v2.keras.layers.Dense",
   "tensorflow.compat.v2.keras.layers.Lambda",
   "tensorflow.compat.v2.optimizers.Adam",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.OneHotCategorical",
   "tensorflow_probability.python.layers.OneHotCategorical",
   "tensorflow_probability.python.layers.OneHotCategorical.params_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.OneHotCategoricalTest.test_layer": {
  "lineno": 567,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.layers.OneHotCategorical",
   "tensorflow_probability.python.layers.OneHotCategorical.params_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.OneHotCategoricalTest.test_new": {
  "lineno": 560,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.layers.OneHotCategorical.new",
   "tensorflow_probability.python.layers.OneHotCategorical.params_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.VariationalGaussianProcessEndToEnd": {
  "lineno": 1434,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.VariationalGaussianProcessEndToEnd.testEndToEnd": {
  "lineno": 1437,
  "symbols_in_volume": [
   "numpy.expand_dims",
   "numpy.eye",
   "numpy.float64",
   "numpy.linspace",
   "numpy.newaxis",
   "numpy.random.rand",
   "numpy.random.randn",
   "numpy.random.seed",
   "numpy.sin",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v1.initializers.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.keras.Sequential",
   "tensorflow.compat.v2.keras.layers.Dense",
   "tensorflow.compat.v2.keras.layers.InputLayer",
   "tensorflow.compat.v2.optimizers.Adam",
   "tensorflow_probability.layers.VariationalGaussianProcess"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.VariationalGaussianProcessEndToEnd.testEndToEnd.KernelFn": {
  "lineno": 1455,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.layers.Layer"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.VariationalGaussianProcessEndToEnd.testEndToEnd.KernelFn.__init__": {
  "lineno": 1457,
  "symbols_in_volume": [
   "tensorflow.compat.v1.initializers.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.VariationalGaussianProcessEndToEnd.testEndToEnd.KernelFn.call": {
  "lineno": 1465,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.VariationalGaussianProcessEndToEnd.testEndToEnd.KernelFn.kernel": {
  "lineno": 1468,
  "symbols_in_volume": [
   "tensorflow.compat.v2.nn.softplus",
   "tensorflow_probability.positive_semidefinite_kernels.ExponentiatedQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.VariationalGaussianProcessEndToEnd.testEndToEnd.s": {
  "lineno": 1446,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentBernoulliTest": {
  "lineno": 810,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.layers.IndependentBernoulli"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentBernoulliTest._distribution_to_params": {
  "lineno": 815,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentLayerTest": {
  "lineno": 698,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentLayerTest._build_tensor": {
  "lineno": 714,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentLayerTest._check_distribution": {
  "lineno": 721,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Independent"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentLayerTest._distribution_to_params": {
  "lineno": 710,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentLayerTest.test_layer": {
  "lineno": 742,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v2.concat",
   "tensorflow_probability.python.distributions.Uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentLayerTest.test_model_export": {
  "lineno": 782,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentLayerTest.test_new": {
  "lineno": 730,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v2.concat",
   "tensorflow_probability.python.distributions.Uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentLayerTest.test_serialization": {
  "lineno": 754,
  "symbols_in_volume": [
   "numpy.ones",
   "tensorflow_probability.python.distributions.Uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentLogisticTest": {
  "lineno": 868,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.distributions.Logistic",
   "tensorflow_probability.python.layers.IndependentLogistic"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentLogisticTest._distribution_to_params": {
  "lineno": 873,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.reshape",
   "tensorflow_probability.math.softplus_inverse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentNormalTest": {
  "lineno": 918,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.layers.IndependentNormal"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentNormalTest._distribution_to_params": {
  "lineno": 923,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.reshape",
   "tensorflow_probability.python.distributions.softplus_inverse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentNormalTest.test_keras_sequential_with_unknown_input_size": {
  "lineno": 930,
  "symbols_in_volume": [
   "numpy.int32",
   "numpy.random.randn",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.layers.IndependentNormal",
   "tensorflow_probability.python.layers.IndependentNormal.params_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentNormalTest.test_keras_sequential_with_unknown_input_size.reshape": {
  "lineno": 935,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentPoissonTest": {
  "lineno": 1003,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.distributions.Poisson",
   "tensorflow_probability.python.layers.IndependentPoisson"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentPoissonTest._distribution_to_params": {
  "lineno": 1008,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureLayerTest": {
  "lineno": 1056,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureLayerTest._build_tensor": {
  "lineno": 1072,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureLayerTest._check_distribution": {
  "lineno": 1079,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.MixtureSameFamily"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureLayerTest._distribution_to_params": {
  "lineno": 1068,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureLayerTest.test_layer": {
  "lineno": 1105,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v2.concat",
   "tensorflow_probability.python.distributions.Uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureLayerTest.test_model_export": {
  "lineno": 1149,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureLayerTest.test_new": {
  "lineno": 1092,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v2.concat",
   "tensorflow_probability.python.distributions.Uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureLayerTest.test_serialization": {
  "lineno": 1120,
  "symbols_in_volume": [
   "numpy.ones",
   "tensorflow_probability.python.distributions.Uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureLogisticTest": {
  "lineno": 1178,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.distributions.Logistic",
   "tensorflow_probability.python.layers.MixtureLogistic"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureLogisticTest._distribution_to_params": {
  "lineno": 1183,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.distributions.softplus_inverse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureLogisticTest.test_doc_string": {
  "lineno": 1198,
  "symbols_in_volume": [
   "numpy.int32",
   "numpy.pi",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.cos",
   "tensorflow.compat.v2.optimizers.Adam",
   "tensorflow.compat.v2.sin",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.Uniform",
   "tensorflow_probability.python.layers.MixtureLogistic",
   "tensorflow_probability.python.layers.MixtureNormal.params_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureNormalTest": {
  "lineno": 1248,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.layers.MixtureNormal"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureNormalTest._distribution_to_params": {
  "lineno": 1253,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.distributions.softplus_inverse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureNormalTest.test_doc_string": {
  "lineno": 1268,
  "symbols_in_volume": [
   "numpy.int32",
   "numpy.pi",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.cos",
   "tensorflow.compat.v2.optimizers.Adam",
   "tensorflow.compat.v2.sin",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.Uniform",
   "tensorflow_probability.python.layers.MixtureNormal",
   "tensorflow_probability.python.layers.MixtureNormal.params_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureSameFamilyTest": {
  "lineno": 1318,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureSameFamilyTest._build_tensor": {
  "lineno": 1321,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureSameFamilyTest._check_distribution": {
  "lineno": 1328,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.bijectors.ScaleTriL",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.MixtureSameFamily",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureSameFamilyTest.test_doc_string": {
  "lineno": 1382,
  "symbols_in_volume": [
   "numpy.int32",
   "numpy.pi",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.cos",
   "tensorflow.compat.v2.optimizers.Adam",
   "tensorflow.compat.v2.sin",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.Uniform",
   "tensorflow_probability.python.layers.IndependentNormal",
   "tensorflow_probability.python.layers.IndependentNormal.params_size",
   "tensorflow_probability.python.layers.MixtureSameFamily",
   "tensorflow_probability.python.layers.MixtureSameFamily.params_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureSameFamilyTest.test_layer": {
  "lineno": 1365,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v2.concat",
   "tensorflow_probability.python.distributions.Uniform",
   "tensorflow_probability.python.layers.MixtureSameFamily",
   "tensorflow_probability.python.layers.MixtureSameFamily.params_size",
   "tensorflow_probability.python.layers.MultivariateNormalTriL",
   "tensorflow_probability.python.layers.MultivariateNormalTriL.params_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureSameFamilyTest.test_new": {
  "lineno": 1350,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v2.concat",
   "tensorflow_probability.python.distributions.Uniform",
   "tensorflow_probability.python.layers.MixtureSameFamily.new",
   "tensorflow_probability.python.layers.MixtureSameFamily.params_size",
   "tensorflow_probability.python.layers.MultivariateNormalTriL",
   "tensorflow_probability.python.layers.MultivariateNormalTriL.params_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._logit_avg_expit": {
  "lineno": 39,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.nn.softplus",
   "tensorflow.compat.v2.reduce_logsumexp",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._vec_pad": {
  "lineno": 47,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.pad",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.initializers": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.utils.get_custom_objects"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.layers.initializers.BlockwiseInitializer": {
  "lineno": 28,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.initializers.Initializer"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.initializers.BlockwiseInitializer.__call__": {
  "lineno": 58,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.concatenate",
   "numpy.generic",
   "numpy.int32",
   "numpy.ndarray",
   "tensorflow.compat.v1.assert_equal",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.as_dtype",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.is_tensor",
   "tensorflow.compat.v2.keras.backend.floatx",
   "tensorflow.compat.v2.keras.initializers.get",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.split"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.initializers.BlockwiseInitializer.__init__": {
  "lineno": 31,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.initializers.BlockwiseInitializer.from_config": {
  "lineno": 119,
  "symbols_in_volume": [
   "tensorflow.compat.v2.initializers.deserialize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.initializers.BlockwiseInitializer.get_config": {
  "lineno": 107,
  "symbols_in_volume": [
   "tensorflow.compat.v2.initializers.serialize",
   "tensorflow.compat.v2.keras.initializers.get"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.initializers.BlockwiseInitializer.initializers": {
  "lineno": 46,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.initializers.BlockwiseInitializer.sizes": {
  "lineno": 50,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.initializers.BlockwiseInitializer.validate_args": {
  "lineno": 54,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.initializers_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.layers.initializers_test.BlockwiseInitializerTest": {
  "lineno": 30,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.initializers_test.BlockwiseInitializerTest.test_de_serialization": {
  "lineno": 40,
  "symbols_in_volume": [
   "numpy.zeros",
   "tensorflow.compat.v2.initializers.deserialize",
   "tensorflow.compat.v2.initializers.serialize",
   "tensorflow_probability.layers.BlockwiseInitializer"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.initializers_test.BlockwiseInitializerTest.test_works_correctly": {
  "lineno": 33,
  "symbols_in_volume": [
   "numpy.zeros",
   "tensorflow_probability.layers.BlockwiseInitializer"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._DistributionAndTensorCoercibleMeta": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution",
   "tensorflow_probability.python.util.deferred_tensor.TensorMetaClass"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._TensorCoercible": {
  "lineno": 40,
  "symbols_in_volume": [
   "six.add_metaclass",
   "tensorflow_probability.python.distributions.distribution.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._TensorCoercible.__init__": {
  "lineno": 63,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.distribution.Distribution.sample"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._TensorCoercible.__new__": {
  "lineno": 46,
  "symbols_in_volume": [
   "copy.copy",
   "tensorflow_probability.python.distributions.distribution",
   "tensorflow_probability.python.distributions.distribution.Distribution",
   "tensorflow_probability.python.distributions.distribution.Distribution.sample",
   "tensorflow_probability.python.distributions.distribution.__class__"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._TensorCoercible._value": {
  "lineno": 74,
  "symbols_in_volume": [
   "tensorflow.compat.v2.is_tensor",
   "tensorflow.python.framework.composite_tensor.CompositeTensor",
   "tensorflow_probability.python.distributions.distribution._convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._TensorCoercible.shape": {
  "lineno": 69,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.python.layers.internal.distribution_tensor_coercible"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest": {
  "lineno": 66,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest._testWhileLoop": {
  "lineno": 216,
  "symbols_in_volume": [
   "tensorflow.compat.v1.control_flow_v2_enabled",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.while_loop",
   "tensorflow_probability.python.distributions.Distribution.mean",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest._testWhileLoop._body": {
  "lineno": 235,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Distribution.stddev",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testArrayPriority": {
  "lineno": 105,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow_probability.python.distributions.Distribution.mean",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testConvertFromExplicit": {
  "lineno": 87,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testConvertToTensor": {
  "lineno": 79,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.distributions.Distribution.mean",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testErrorsByDefault": {
  "lineno": 70,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testOperatorBinary": {
  "lineno": 111,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.array",
   "numpy.float32",
   "operator.add",
   "operator.floordiv",
   "operator.ge",
   "operator.gt",
   "operator.le",
   "operator.lt",
   "operator.mod",
   "operator.mul",
   "operator.pow",
   "operator.sub",
   "operator.truediv",
   "tensorflow_probability.python.distributions.Distribution.mean",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testOperatorBinaryLogical": {
  "lineno": 147,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.array",
   "operator.and_",
   "operator.or_",
   "operator.xor",
   "tensorflow_probability.python.distributions.Distribution.mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testOperatorBoolNonzero": {
  "lineno": 168,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow_probability.python.distributions.Distribution.mean",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testOperatorGetitem": {
  "lineno": 175,
  "symbols_in_volume": [
   "numpy.linspace",
   "tensorflow_probability.python.distributions.Distribution.mean",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testOperatorIter": {
  "lineno": 181,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.distributions.Distribution.mean",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testOperatorUnary": {
  "lineno": 137,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.array",
   "numpy.float32",
   "operator.abs",
   "operator.neg",
   "tensorflow_probability.python.distributions.Distribution.mean",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testOperatorUnaryLogical": {
  "lineno": 163,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.distributions.Distribution.mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testReproducible": {
  "lineno": 95,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.distributions.Distribution.sample",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.Uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testUserCustomOperators": {
  "lineno": 193,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Tensor",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.distributions.Distribution.variance"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testWhileLoop": {
  "lineno": 268,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testWhileLoopWithControlFlowV2": {
  "lineno": 271,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.enable_control_flow_v2"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.FakeBoolDistribution": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Distribution"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.FakeBoolDistribution.__init__": {
  "lineno": 41,
  "symbols_in_volume": [
   "tensorflow.compat.v2.bool",
   "tensorflow_probability.python.distributions.FULLY_REPARAMETERIZED"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.FakeBoolDistribution._mean": {
  "lineno": 48,
  "symbols_in_volume": [
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.MemoryLeakTest": {
  "lineno": 276,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.MemoryLeakTest.testTypeObjectLeakage": {
  "lineno": 279,
  "symbols_in_volume": [
   "gc.collect",
   "gc.get_objects",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.distributions.Categorical",
   "tensorflow_probability.layers.DistributionLambda"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.Normal": {
  "lineno": 52,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.Normal.__add__": {
  "lineno": 55,
  "symbols_in_volume": [
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.python.framework.composite_tensor.CompositeTensor"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple.__getitem__": {
  "lineno": 62,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple.__init__": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple.__iter__": {
  "lineno": 65,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple.__len__": {
  "lineno": 59,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple.__repr__": {
  "lineno": 68,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple.__str__": {
  "lineno": 71,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple._from_components": {
  "lineno": 48,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple._is_graph_tensor": {
  "lineno": 55,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple._shape_invariant_to_components": {
  "lineno": 52,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple._to_components": {
  "lineno": 45,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple._type_spec": {
  "lineno": 41,
  "symbols_in_volume": [
   "tensorflow.python.framework.type_spec.TypeSpec.from_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTupleSpec": {
  "lineno": 75,
  "symbols_in_volume": [
   "tensorflow.python.framework.type_spec.BatchableTypeSpec"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTupleSpec.__init__": {
  "lineno": 83,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTupleSpec._batch": {
  "lineno": 99,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTupleSpec._component_specs": {
  "lineno": 89,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTupleSpec._from_components": {
  "lineno": 96,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTupleSpec._serialize": {
  "lineno": 86,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTupleSpec._to_components": {
  "lineno": 93,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTupleSpec._unbatch": {
  "lineno": 103,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTupleSpec.value_type": {
  "lineno": 79,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.register_tensor_conversion_function",
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.CustomConvertToCompositeTensorTest": {
  "lineno": 51,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.TensorFlowTestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.CustomConvertToCompositeTensorTest.test_getitem": {
  "lineno": 69,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.python.framework.ops.convert_to_tensor_or_composite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.CustomConvertToCompositeTensorTest.test_iter": {
  "lineno": 54,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.is_tensor",
   "tensorflow.python.framework.ops.convert_to_tensor_or_composite",
   "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.CustomConvertToCompositeTensorTest.test_shape_invariant": {
  "lineno": 111,
  "symbols_in_volume": [
   "tensorflow.python.framework.ops.convert_to_tensor_or_composite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.CustomConvertToCompositeTensorTest.test_str_repr": {
  "lineno": 85,
  "symbols_in_volume": [
   "re.compile",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.python.framework.ops.convert_to_tensor_or_composite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.CustomConvertToCompositeTensorTest.test_str_repr._strip": {
  "lineno": 97,
  "symbols_in_volume": [
   "re.sub"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.CustomConvertToCompositeTensorTest.test_to_from": {
  "lineno": 77,
  "symbols_in_volume": [
   "tensorflow.python.framework.ops.convert_to_tensor_or_composite",
   "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple",
   "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple._from_components"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.MyTuple": {
  "lineno": 31,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.MyTuple.__getitem__": {
  "lineno": 37,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.MyTuple.__init__": {
  "lineno": 34,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.MyTuple.__iter__": {
  "lineno": 43,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.MyTuple.__len__": {
  "lineno": 40,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.masked_autoregressive": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.layers.masked_autoregressive.AutoregressiveTransform": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow_probability.python.layers.distribution_layer.DistributionLambda"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.masked_autoregressive.AutoregressiveTransform.__init__": {
  "lineno": 125,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.masked_autoregressive.AutoregressiveTransform._transform": {
  "lineno": 148,
  "symbols_in_volume": [
   "tensorflow.compat.v2.unstack",
   "tensorflow_probability.python.bijectors.MaskedAutoregressiveFlow",
   "tensorflow_probability.python.distributions.TransformedDistribution"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.masked_autoregressive.AutoregressiveTransform.build": {
  "lineno": 140,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.Sequential",
   "tensorflow.compat.v2.keras.layers.InputLayer"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.masked_autoregressive_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras",
   "tensorflow.compat.v2.keras.layers",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.layers.masked_autoregressive_test.AutoregressiveTransformTest": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.masked_autoregressive_test.AutoregressiveTransformTest.test_doc_string": {
  "lineno": 37,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.randn",
   "numpy.stack",
   "numpy.zeros",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.optimizers.Adam",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.bijectors.AutoregressiveLayer",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.layers.AutoregressiveTransform",
   "tensorflow_probability.python.layers.DistributionLambda"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.util": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.layers.util.default_loc_scale_fn": {
  "lineno": 41,
  "symbols_in_volume": [
   "tensorflow.compat.v1.initializers.random_normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.util.default_loc_scale_fn._fn": {
  "lineno": 95,
  "symbols_in_volume": [
   "numpy.finfo",
   "tensorflow.compat.v2.nn.softplus",
   "tensorflow_probability.python.util.DeferredTensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.util.default_mean_field_normal_fn": {
  "lineno": 122,
  "symbols_in_volume": [
   "tensorflow.compat.v1.initializers.random_normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.util.default_mean_field_normal_fn._fn": {
  "lineno": 173,
  "symbols_in_volume": [
   "tensorflow.compat.v2.size",
   "tensorflow_probability.python.distributions.Deterministic",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.util.default_multivariate_normal_fn": {
  "lineno": 199,
  "symbols_in_volume": [
   "tensorflow.compat.v2.size",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.util.deserialize_function": {
  "lineno": 222,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.utils.deserialize_keras_object",
   "tensorflow.python.keras.utils.generic_utils.func_load"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.util.serialize_function": {
  "lineno": 263,
  "symbols_in_volume": [
   "tensorflow.python.keras.utils.generic_utils.func_dump",
   "types.LambdaType"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.variable_input": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.layers.variable_input.VariableLayer": {
  "lineno": 27,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.layers.Layer"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.variable_input.VariableLayer.__init__": {
  "lineno": 76,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.keras.activations.get",
   "tensorflow.compat.v2.keras.constraints.get",
   "tensorflow.compat.v2.keras.initializers.get",
   "tensorflow.compat.v2.keras.regularizers.get"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.variable_input.VariableLayer.call": {
  "lineno": 135,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.variable_input_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.layers.variable_input_test.VariableInputLayerTest": {
  "lineno": 29,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.variable_input_test.VariableInputLayerTest.test_functional_api": {
  "lineno": 72,
  "symbols_in_volume": [
   "tensorflow.compat.v2.as_dtype",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.keras.Input",
   "tensorflow.compat.v2.keras.Model",
   "tensorflow.compat.v2.keras.layers.Dense",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.layers.DistributionLambda",
   "tensorflow_probability.layers.VariableLayer",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.variable_input_test.VariableInputLayerTest.test_sequential_api": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.compat.v2.as_dtype",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.keras.layers.Dense",
   "tensorflow.compat.v2.keras.models.Sequential",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.layers.DistributionLambda",
   "tensorflow_probability.layers.VariableLayer",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.weight_norm": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.layers.weight_norm.WeightNorm": {
  "lineno": 26,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.layers.Wrapper"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.weight_norm.WeightNorm.__init__": {
  "lineno": 57,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras.layers.Layer",
   "warnings.warn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.weight_norm.WeightNorm._compute_weights": {
  "lineno": 88,
  "symbols_in_volume": [
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.nn.l2_normalize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.weight_norm.WeightNorm._data_dep_init": {
  "lineno": 103,
  "symbols_in_volume": [
   "tensorflow.compat.v2.nn.moments",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.weight_norm.WeightNorm._init_norm": {
  "lineno": 97,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.square"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.weight_norm.WeightNorm.build": {
  "lineno": 131,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.keras.layers.InputSpec"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.weight_norm.WeightNorm.call": {
  "lineno": 173,
  "symbols_in_volume": [
   "tensorflow.compat.v2.function"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.weight_norm.WeightNorm.compute_output_shape": {
  "lineno": 189,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.weight_norm_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.keras",
   "tensorflow.compat.v2.keras.layers",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.layers.weight_norm_test.WeightNormTest": {
  "lineno": 36,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.layers.weight_norm_test.WeightNormTest._calculate_true_initial_variables_conv": {
  "lineno": 99,
  "symbols_in_volume": [
   "numpy.mean",
   "numpy.sqrt",
   "numpy.var",
   "tensorflow.compat.v2.nn.l2_normalize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.weight_norm_test.WeightNormTest._calculate_true_initial_variables_dense": {
  "lineno": 88,
  "symbols_in_volume": [
   "numpy.linalg.norm",
   "numpy.matmul",
   "numpy.mean",
   "numpy.ones",
   "numpy.sqrt",
   "numpy.var"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.weight_norm_test.WeightNormTest._define_model": {
  "lineno": 53,
  "symbols_in_volume": [
   "tensorflow_probability.python.layers.weight_norm.WeightNorm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.weight_norm_test.WeightNormTest._get_maybe_norm_layer": {
  "lineno": 82,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.layers.weight_norm_test.WeightNormTest.setUp": {
  "lineno": 39,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.rand"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.weight_norm_test.WeightNormTest.testConv2DInitializedCorrectly": {
  "lineno": 298,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "tensorflow_probability.python.layers.weight_norm.WeightNorm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.weight_norm_test.WeightNormTest.testCorrectInitialValues": {
  "lineno": 154,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.random.rand"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.weight_norm_test.WeightNormTest.testGradientValues": {
  "lineno": 177,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.diag",
   "numpy.matmul",
   "numpy.transpose",
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.nn.l2_normalize",
   "tensorflow.compat.v2.norm",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.square"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.weight_norm_test.WeightNormTest.testNoDataDependentInitialization": {
  "lineno": 281,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.ones",
   "tensorflow.compat.v2.norm",
   "tensorflow.compat.v2.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.weight_norm_test.WeightNormTest.testTrainableVariableInitializationInModelFit": {
  "lineno": 226,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.random.rand",
   "tensorflow.compat.v2.keras.optimizers.SGD"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.weight_norm_test.WeightNormTest.testTrainableVariablesAreCreatedByBuild": {
  "lineno": 139,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.weight_norm_test.WeightNormTest.testTrainableVariablesAreCreatedByCall": {
  "lineno": 131,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.layers.weight_norm_test.WeightNormTest.testVariableCreationNoBias": {
  "lineno": 147,
  "symbols_in_volume": [
   "tensorflow_probability.python.layers.weight_norm.WeightNorm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.python.util.all_util.remove_undocumented"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.custom_gradient": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.math.custom_gradient.custom_gradient": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size",
   "tensorflow.compat.v2.stop_gradient",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.dtype_util.base_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.custom_gradient.custom_gradient.maybe_stop": {
  "lineno": 76,
  "symbols_in_volume": [
   "tensorflow.compat.v2.stop_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.custom_gradient.identity": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.identity"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.custom_gradient.is_list_like": {
  "lineno": 32,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.custom_gradient_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.custom_gradient_test.CustomGradientTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.custom_gradient_test.CustomGradientTest.test_works_correctly": {
  "lineno": 35,
  "symbols_in_volume": [
   "numpy.concatenate",
   "numpy.linspace",
   "tensorflow_probability.math.custom_gradient",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.custom_gradient_test.CustomGradientTest.test_works_correctly_both_f_g_zero": {
  "lineno": 44,
  "symbols_in_volume": [
   "numpy.concatenate",
   "numpy.linspace",
   "tensorflow_probability.math.custom_gradient",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.custom_gradient_test.CustomGradientTest.test_works_correctly_fx_gx_manually_stopped": {
  "lineno": 91,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.square",
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.square",
   "tensorflow.compat.v2.stop_gradient",
   "tensorflow_probability.math.custom_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.custom_gradient_test.CustomGradientTest.test_works_correctly_side_vars": {
  "lineno": 71,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.square",
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.square",
   "tensorflow_probability.math.custom_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.custom_gradient_test.CustomGradientTest.test_works_correctly_vector_of_vars": {
  "lineno": 53,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.math.custom_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.diag_jacobian": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.math.diag_jacobian._is_list_like": {
  "lineno": 248,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.diag_jacobian.diag_jacobian": {
  "lineno": 31,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorArray",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size",
   "tensorflow.compat.v2.transpose",
   "tensorflow.compat.v2.while_loop",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.diag_jacobian.diag_jacobian.fn_slice": {
  "lineno": 194,
  "symbols_in_volume": [
   "tensorflow.compat.v2.expand_dims"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.diag_jacobian.diag_jacobian.fn_slice.fn_broadcast": {
  "lineno": 196,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.diag_jacobian.diag_jacobian.loop_body": {
  "lineno": 155,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.gradients",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.diag_jacobian.diag_jacobian.make_loop_body": {
  "lineno": 208,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.diag_jacobian.diag_jacobian.make_loop_body._fn": {
  "lineno": 210,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.math.gradient.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.diag_jacobian_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.diag_jacobian_test.JacobianTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.diag_jacobian_test.JacobianTest.testJacobianDiagonal3DListInput": {
  "lineno": 35,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "numpy.zeros",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.math.diag_jacobian",
   "tensorflow_probability.math.value_and_gradient",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.diag_jacobian_test.JacobianTest.testJacobianDiagonal3DListInput.target_fn": {
  "lineno": 46,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.diag_jacobian_test.JacobianTest.testJacobianDiagonal4D": {
  "lineno": 82,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.zeros",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.math.diag_jacobian",
   "tensorflow_probability.math.value_and_gradient",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.diag_jacobian_test.JacobianTest.testJacobianDiagonal4D.target_fn": {
  "lineno": 94,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.generic": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.math.generic.log_add_exp": {
  "lineno": 354,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.math.softplus",
   "tensorflow.compat.v2.maximum",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.generic.log_combinations": {
  "lineno": 41,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.lgamma",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.generic.reduce_logmeanexp": {
  "lineno": 76,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_logsumexp",
   "tensorflow_probability.python.internal.prefer_static.size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.generic.reduce_weighted_logsumexp": {
  "lineno": 111,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.is_inf",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.reduce_logsumexp",
   "tensorflow.compat.v2.reduce_max",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.sign",
   "tensorflow.compat.v2.squeeze",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.generic.soft_threshold": {
  "lineno": 205,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.maximum",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.sign"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.generic.softplus_inverse": {
  "lineno": 300,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.finfo",
   "numpy.log",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.expm1",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.generic_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.generic_test.LogAddExp": {
  "lineno": 314,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.generic_test.LogAddExp.test_big": {
  "lineno": 333,
  "symbols_in_volume": [
   "numpy.eye",
   "tensorflow_probability.math.log_add_exp",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.generic_test.LogAddExp.test_medium": {
  "lineno": 325,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.log",
   "tensorflow_probability.math.log_add_exp",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.generic_test.LogAddExp.test_small": {
  "lineno": 317,
  "symbols_in_volume": [
   "numpy.eye",
   "tensorflow_probability.math.log_add_exp",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.generic_test.LogCombinationsTest": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.generic_test.LogCombinationsTest.testLogCombinationsBinomial": {
  "lineno": 41,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.log",
   "scipy.special.binom",
   "tensorflow_probability.math.log_combinations"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.generic_test.LogCombinationsTest.testLogCombinationsShape": {
  "lineno": 53,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow_probability.math.log_combinations"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.generic_test.ReduceLogMeanExp": {
  "lineno": 342,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.generic_test.ReduceLogMeanExp.test_vector_axis_and_keepdims": {
  "lineno": 345,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.exp",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.math.reduce_logmeanexp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.generic_test.ReduceWeightedLogSumExp": {
  "lineno": 64,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.generic_test.ReduceWeightedLogSumExp._reduce_weighted_logsumexp": {
  "lineno": 67,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.log",
   "numpy.max",
   "numpy.sign",
   "numpy.squeeze",
   "numpy.sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.generic_test.ReduceWeightedLogSumExp.testDocString": {
  "lineno": 139,
  "symbols_in_volume": [
   "numpy.errstate",
   "numpy.log",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.reduce_weighted_logsumexp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.generic_test.ReduceWeightedLogSumExp.testKeepDims": {
  "lineno": 122,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.reduce_weighted_logsumexp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.generic_test.ReduceWeightedLogSumExp.testNegativeWeights": {
  "lineno": 106,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.reduce_weighted_logsumexp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.generic_test.ReduceWeightedLogSumExp.testNoWeights": {
  "lineno": 75,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.reduce_logsumexp",
   "tensorflow_probability.math.reduce_weighted_logsumexp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.generic_test.SoftThresholdTest": {
  "lineno": 175,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.compat.v2.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.generic_test.SoftThresholdTest.test_soft_threshold": {
  "lineno": 183,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.math.soft_threshold",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.generic_test.SoftplusInverseTest": {
  "lineno": 208,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.generic_test.SoftplusInverseTest._npSoftplus": {
  "lineno": 211,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.logaddexp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.generic_test.SoftplusInverseTest._testSoftplus": {
  "lineno": 216,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.bool",
   "numpy.isfinite",
   "numpy.ones_like",
   "tensorflow.compat.v2.math.softplus",
   "tensorflow_probability.math.softplus_inverse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.generic_test.SoftplusInverseTest.testGradient": {
  "lineno": 285,
  "symbols_in_volume": [
   "tensorflow.compat.v1.logging.vlog",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.softplus",
   "tensorflow.python.ops.gradient_checker_v2.compute_gradient",
   "tensorflow.python.ops.gradient_checker_v2.max_error"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.generic_test.SoftplusInverseTest.testInverseSoftplusGradientFinite": {
  "lineno": 303,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.float16",
   "numpy.isfinite",
   "numpy.logspace",
   "numpy.ones_like",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.softplus_inverse",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.generic_test.SoftplusInverseTest.testInverseSoftplusGradientNeverNan": {
  "lineno": 295,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.float16",
   "numpy.isnan",
   "numpy.logspace",
   "numpy.zeros_like",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.softplus_inverse",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.generic_test.SoftplusInverseTest.testNumbers": {
  "lineno": 242,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.finfo",
   "numpy.float16",
   "numpy.float16.get",
   "numpy.float32",
   "numpy.float32.get",
   "numpy.float64",
   "numpy.float64.get",
   "numpy.linspace",
   "numpy.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.gradient": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.math.gradient._prepare_args": {
  "lineno": 30,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.gradient.batch_jacobian": {
  "lineno": 159,
  "symbols_in_volume": [
   "jax.jacrev",
   "jax.vmap"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.gradient.value_and_batch_jacobian": {
  "lineno": 156,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.gradient.value_and_gradient": {
  "lineno": 135,
  "symbols_in_volume": [
   "jax.grad",
   "jax.vmap"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.gradient_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.gradient_test.GradientTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.gradient_test.GradientTest.test_list": {
  "lineno": 43,
  "symbols_in_volume": [
   "numpy.linspace",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.gradient_test.GradientTest.test_non_list": {
  "lineno": 35,
  "symbols_in_volume": [
   "numpy.concatenate",
   "numpy.linspace",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.gradient_test.GradientTest.test_output_gradients": {
  "lineno": 52,
  "symbols_in_volume": [
   "numpy.dot",
   "numpy.float32",
   "numpy.ones",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.squeeze",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.math.interpolation._assert_ndims_statically": {
  "lineno": 826,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation._batch_gather_with_broadcast": {
  "lineno": 917,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation._batch_interp_with_gather_nd": {
  "lineno": 672,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.clip_by_value",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.debugging.is_numeric_tensor",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.fill",
   "tensorflow.compat.v2.floor",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.gather_nd",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.math.add_n",
   "tensorflow.compat.v2.math.is_nan",
   "tensorflow.compat.v2.maximum",
   "tensorflow.compat.v2.minimum",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reduce_any",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.stack",
   "tensorflow.compat.v2.unstack",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation._batch_interp_with_gather_nd._expand_x_fn": {
  "lineno": 735,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation._binary_count": {
  "lineno": 945,
  "symbols_in_volume": [
   "itertools.product"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation._interp_regular_1d_grid_impl": {
  "lineno": 39,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.clip_by_value",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.fill",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.floor",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.math.is_nan",
   "tensorflow.compat.v2.maximum",
   "tensorflow.compat.v2.minimum",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.prefer_static.non_negative_axis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation._make_expand_x_fn_for_batch_interpolation": {
  "lineno": 880,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation._make_expand_x_fn_for_batch_interpolation.expand_right_dims": {
  "lineno": 892,
  "symbols_in_volume": [
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.dtype_util.is_bool"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation._make_expand_x_fn_for_non_batch_interpolation": {
  "lineno": 843,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation._make_expand_x_fn_for_non_batch_interpolation.expand_ends": {
  "lineno": 854,
  "symbols_in_volume": [
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.pad",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.dtype_util.is_bool"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation.batch_interp_regular_1d_grid": {
  "lineno": 361,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation.batch_interp_regular_nd_grid": {
  "lineno": 490,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.prefer_static.non_negative_axis",
   "tensorflow_probability.python.internal.tensorshape_util.assert_has_rank",
   "tensorflow_probability.python.internal.tensorshape_util.assert_is_compatible_with"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation.batch_interp_regular_nd_grid._batch_of_zeros_with_rightmost_singletons": {
  "lineno": 651,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation.interp_regular_1d_grid": {
  "lineno": 230,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest": {
  "lineno": 297,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest.setUp": {
  "lineno": 301,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest.test_gradients_and_propagation_of_nan_in_x": {
  "lineno": 550,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.linspace",
   "numpy.nan",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.gradients",
   "tensorflow_probability.math.batch_interp_regular_1d_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest.test_on_1d_array_constant_extension_fill_value": {
  "lineno": 353,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.linspace",
   "tensorflow_probability.math.batch_interp_regular_1d_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest.test_on_1d_array_different_below_above_fill_values": {
  "lineno": 326,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.linspace",
   "tensorflow_probability.math.batch_interp_regular_1d_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest.test_on_1d_array_extrapolate_fill_value": {
  "lineno": 379,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.linspace",
   "tensorflow_probability.math.batch_interp_regular_1d_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest.test_on_1d_array_log_spaced_grid": {
  "lineno": 401,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.linspace",
   "tensorflow.compat.v2.math.log",
   "tensorflow_probability.math.batch_interp_regular_1d_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest.test_on_1d_array_nan_fill_value": {
  "lineno": 305,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.linspace",
   "numpy.nan",
   "tensorflow_probability.math.batch_interp_regular_1d_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest.test_scalar_valued_interpolation_with_1_batch_dim": {
  "lineno": 424,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.log",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.linspace",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.math.batch_interp_regular_1d_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest.test_scalar_valued_interpolation_with_1_batch_dim_x_has_empty_batch": {
  "lineno": 445,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.log",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.linspace",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.math.batch_interp_regular_1d_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest.test_scalar_valued_with_1_batch_dim_x_and_x_minmax_have_empty_batch": {
  "lineno": 467,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.linspace",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.math.batch_interp_regular_1d_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest.test_vector_valued_interpolation_with_1_batch_dim_batch_minmax": {
  "lineno": 518,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.linspace",
   "numpy.log",
   "numpy.stack",
   "tensorflow_probability.math.batch_interp_regular_1d_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest.test_vector_valued_interpolation_with_1_batch_dim_scalar_minmax": {
  "lineno": 502,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.linspace",
   "numpy.stack",
   "tensorflow_probability.math.batch_interp_regular_1d_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest.test_vector_valued_interpolation_with_empty_batch_shape": {
  "lineno": 486,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.log",
   "numpy.stack",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.linspace",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.math.batch_interp_regular_1d_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest": {
  "lineno": 576,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_1d_scalar_valued_function": {
  "lineno": 642,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linspace",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow_probability.math.batch_interp_regular_nd_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_1d_scalar_valued_function.func": {
  "lineno": 650,
  "symbols_in_volume": [
   "tensorflow.compat.v2.sin"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_1d_scalar_valued_function_with_batch_dims": {
  "lineno": 669,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linspace",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.math.batch_interp_regular_nd_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_1d_scalar_valued_function_with_batch_dims.func": {
  "lineno": 681,
  "symbols_in_volume": [
   "tensorflow.compat.v2.sin"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_2d_scalar_valued_function": {
  "lineno": 701,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linspace",
   "tensorflow.compat.v2.meshgrid",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.math.batch_interp_regular_nd_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_2d_scalar_valued_function.func": {
  "lineno": 712,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cos",
   "tensorflow.compat.v2.sin"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_2d_scalar_valued_no_leading_dims": {
  "lineno": 579,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow_probability.math.batch_interp_regular_nd_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_2d_scalar_valued_no_leading_dims_fill_value_provided": {
  "lineno": 618,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow_probability.math.batch_interp_regular_nd_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_2d_vector_valued_function": {
  "lineno": 736,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linspace",
   "tensorflow.compat.v2.meshgrid",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.math.batch_interp_regular_nd_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_2d_vector_valued_function.func": {
  "lineno": 747,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cos",
   "tensorflow.compat.v2.sin",
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_2d_vector_valued_function_with_batch_dims": {
  "lineno": 772,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linspace",
   "tensorflow.compat.v2.meshgrid",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.math.batch_interp_regular_nd_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_2d_vector_valued_function_with_batch_dims.func": {
  "lineno": 787,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cos",
   "tensorflow.compat.v2.sin",
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_3d_vector_valued_function_and_fill_value": {
  "lineno": 814,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linspace",
   "tensorflow.compat.v2.meshgrid",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.math.batch_interp_regular_nd_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_3d_vector_valued_function_and_fill_value.func": {
  "lineno": 826,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cos",
   "tensorflow.compat.v2.sin",
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_axis_set_too_large_raises": {
  "lineno": 861,
  "symbols_in_volume": [
   "tensorflow_probability.math.batch_interp_regular_nd_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_float64": {
  "lineno": 908,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float64",
   "tensorflow_probability.math.batch_interp_regular_nd_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_gradients_nonzero_at_reference_points": {
  "lineno": 866,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_gradients_nonzero_at_reference_points.func": {
  "lineno": 901,
  "symbols_in_volume": [
   "tensorflow_probability.math.batch_interp_regular_nd_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_gradients_nonzero_at_reference_points.y_func": {
  "lineno": 873,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest": {
  "lineno": 31,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest._check_sinusoid": {
  "lineno": 179,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "numpy.newaxis",
   "numpy.pi",
   "numpy.prod",
   "numpy.sin",
   "numpy.zeros",
   "scipy.interpolate.interp1d",
   "tensorflow_probability.math.interp_regular_1d_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.setUp": {
  "lineno": 35,
  "symbols_in_volume": [
   "numpy.random.RandomState"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.test_axis_1_shape_2_50_3_4_fvextrapolate_32bit": {
  "lineno": 231,
  "symbols_in_volume": [
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.test_axis_1_shape_2_50_3_4_fvscalar_64bit": {
  "lineno": 239,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.nan"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.test_axis_3_shape_2_3_4_50_fvscalar_32bit": {
  "lineno": 263,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.inf"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.test_axis_n1_shape_2_3_4_50_fvextrapolate_32bit": {
  "lineno": 255,
  "symbols_in_volume": [
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.test_axis_n2_shape_2_3_50_4_fvextrapolate_64bit": {
  "lineno": 247,
  "symbols_in_volume": [
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.test_gradients_and_propagation_of_nan_in_x": {
  "lineno": 271,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.linspace",
   "numpy.nan",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.gradients",
   "tensorflow_probability.math.interp_regular_1d_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.test_matrix_interpolation": {
  "lineno": 149,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow_probability.math.interp_regular_1d_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.test_on_1d_array_constant_extension_fill_value": {
  "lineno": 82,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.linspace",
   "tensorflow_probability.math.interp_regular_1d_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.test_on_1d_array_different_below_above_fill_values": {
  "lineno": 60,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.linspace",
   "tensorflow_probability.math.interp_regular_1d_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.test_on_1d_array_extrapolate_fill_value": {
  "lineno": 104,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.linspace",
   "tensorflow_probability.math.interp_regular_1d_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.test_on_1d_array_log_spaced_grid": {
  "lineno": 126,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.linspace",
   "tensorflow.compat.v2.math.log",
   "tensorflow_probability.math.interp_regular_1d_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.test_on_1d_array_nan_fill_value": {
  "lineno": 39,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.linspace",
   "numpy.nan",
   "tensorflow_probability.math.interp_regular_1d_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.test_scalar_valued_function_and_get_matrix_of_results": {
  "lineno": 171,
  "symbols_in_volume": [
   "numpy.exp",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.linspace",
   "tensorflow_probability.math.interp_regular_1d_grid"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.matrix_rank",
   "tensorflow.compat.v2.linalg.pinv",
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.linalg._get_shape": {
  "lineno": 1078,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.internal.tensorshape_util.as_list",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg._invert_permutation": {
  "lineno": 198,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.math.top_k",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg._lu_solve_assertions": {
  "lineno": 745,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.assert_util.assert_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg._maybe_validate_matrix": {
  "lineno": 1149,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_rank_at_least",
   "tensorflow_probability.python.internal.dtype_util.is_floating",
   "tensorflow_probability.python.internal.dtype_util.name",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg._sparse_block_diag": {
  "lineno": 1125,
  "symbols_in_volume": [
   "tensorflow.compat.v2.SparseTensor",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.eye",
   "tensorflow.compat.v2.int64",
   "tensorflow.compat.v2.matmul"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg._sparse_tensor_dense_matmul": {
  "lineno": 1088,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.sparse.reshape",
   "tensorflow.compat.v2.sparse.sparse_dense_matmul"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg._swap_m_with_i": {
  "lineno": 160,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.int64",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.prefer_static.rank",
   "tensorflow_probability.python.internal.prefer_static.shape",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.cholesky_concat": {
  "lineno": 102,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.linalg.matrix_transpose",
   "tensorflow.compat.v2.math.conj",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow.python.ops.linalg.linear_operator_util.matrix_triangular_solve_with_broadcast",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.fill_triangular": {
  "lineno": 860,
  "symbols_in_volume": [
   "numpy.floor",
   "numpy.int32",
   "numpy.sqrt",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.linalg.band_part",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.reverse",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.python.internal.prefer_static.rank",
   "tensorflow_probability.python.internal.tensorshape_util.as_list",
   "tensorflow_probability.python.internal.tensorshape_util.concatenate",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape",
   "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.fill_triangular_inverse": {
  "lineno": 1009,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.reverse",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.prefer_static.rank",
   "tensorflow_probability.python.internal.tensorshape_util.concatenate",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape",
   "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.lu_matrix_inverse": {
  "lineno": 577,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.eye",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.lu_reconstruct": {
  "lineno": 639,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.gather_nd",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.linalg.band_part",
   "tensorflow.compat.v2.linalg.set_diag",
   "tensorflow.compat.v2.map_fn",
   "tensorflow.compat.v2.math.invert_permutation",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.lu_reconstruct_assertions": {
  "lineno": 711,
  "symbols_in_volume": [
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.split",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.assert_util.assert_rank",
   "tensorflow_probability.python.internal.assert_util.assert_rank_at_least",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.lu_solve": {
  "lineno": 478,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.gather_nd",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.linalg.band_part",
   "tensorflow.compat.v2.linalg.set_diag",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.stack",
   "tensorflow.python.ops.linalg.linear_operator_util.matrix_triangular_solve_with_broadcast",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.matrix_rank": {
  "lineno": 54,
  "symbols_in_volume": [
   "numpy.finfo",
   "numpy.max",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.linalg.svd",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_max",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.pinv": {
  "lineno": 341,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.finfo",
   "numpy.inf",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.linalg.svd",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.maximum",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reduce_max",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.pinv.get_dim_size": {
  "lineno": 421,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.pivoted_cholesky": {
  "lineno": 204,
  "symbols_in_volume": [
   "numpy.int64",
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int64",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.linalg.matrix_transpose",
   "tensorflow.compat.v2.minimum",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_max",
   "tensorflow.compat.v2.while_loop",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.prefer_static.range",
   "tensorflow_probability.python.internal.prefer_static.shape",
   "tensorflow_probability.python.internal.tensorshape_util.concatenate",
   "tensorflow_probability.python.internal.tensorshape_util.rank",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.pivoted_cholesky.batch_gather": {
  "lineno": 269,
  "symbols_in_volume": [
   "tensorflow.compat.v2.gather"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.pivoted_cholesky.body": {
  "lineno": 272,
  "symbols_in_volume": [
   "tensorflow.compat.v2.argmax",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.int64",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.pad",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.prefer_static.rank",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.pivoted_cholesky.cond": {
  "lineno": 260,
  "symbols_in_volume": [
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.linalg.norm",
   "tensorflow.compat.v2.reduce_max"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.sparse_or_dense_matmul": {
  "lineno": 772,
  "symbols_in_volume": [
   "tensorflow.compat.v1.SparseTensorValue",
   "tensorflow.compat.v2.SparseTensor",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.assert_util.assert_rank_at_least"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.sparse_or_dense_matvecmul": {
  "lineno": 823,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.squeeze"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.linalg_test.CholeskyExtend32Static": {
  "lineno": 101,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.CholeskyExtend64Dynamic": {
  "lineno": 107,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.FillTriangularInverseTest": {
  "lineno": 623,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.FillTriangularInverseTest._run_test": {
  "lineno": 626,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.asarray",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.stop_gradient",
   "tensorflow_probability.math.fill_triangular",
   "tensorflow_probability.math.fill_triangular_inverse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test.FillTriangularTest": {
  "lineno": 532,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.FillTriangularTest._fill_triangular": {
  "lineno": 535,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.asarray",
   "hypothesis.extra.numpy.concatenate",
   "hypothesis.extra.numpy.floor",
   "hypothesis.extra.numpy.int32",
   "hypothesis.extra.numpy.sqrt",
   "hypothesis.extra.numpy.tril",
   "hypothesis.extra.numpy.triu"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test.FillTriangularTest._run_test": {
  "lineno": 556,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.asarray",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.math.fill_triangular",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test.FillTriangularTest._run_test._zeros_like": {
  "lineno": 567,
  "symbols_in_volume": [
   "tensorflow.compat.v2.stop_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test.FillTriangularTest.testCorrectlyMakes1x1TriLower": {
  "lineno": 582,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.random.randn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test.FillTriangularTest.testCorrectlyMakes1x1TriUpper": {
  "lineno": 600,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.random.randn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test.FillTriangularTest.testCorrectlyMakesBatch7x7TriLower": {
  "lineno": 597,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.random.randn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test.FillTriangularTest.testCorrectlyMakesBatch7x7TriLowerUnknownShape": {
  "lineno": 594,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.random.randn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test.FillTriangularTest.testCorrectlyMakesBatch7x7TriUpper": {
  "lineno": 619,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.random.randn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test.FillTriangularTest.testCorrectlyMakesBatch7x7TriUpperUnknownShape": {
  "lineno": 614,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.random.randn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test.FillTriangularTest.testCorrectlyMakesBatchTriLower": {
  "lineno": 588,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.random.randn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test.FillTriangularTest.testCorrectlyMakesBatchTriLowerUnknownShape": {
  "lineno": 591,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.random.randn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test.FillTriangularTest.testCorrectlyMakesBatchTriUpper": {
  "lineno": 606,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.random.randn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test.FillTriangularTest.testCorrectlyMakesBatchTriUpperUnknownShape": {
  "lineno": 609,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.random.randn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test.FillTriangularTest.testCorrectlyMakesNoBatchTriLower": {
  "lineno": 585,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.random.randn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test.FillTriangularTest.testCorrectlyMakesNoBatchTriUpper": {
  "lineno": 603,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.random.randn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test.LUMatrixInverseDynamic": {
  "lineno": 340,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.LUMatrixInverseStatic": {
  "lineno": 335,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.LUReconstructDynamic": {
  "lineno": 292,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.LUReconstructStatic": {
  "lineno": 287,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.LUSolveDynamic": {
  "lineno": 405,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.LUSolveStatic": {
  "lineno": 400,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.PivotedCholesky32Static": {
  "lineno": 228,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.PivotedCholesky64Dynamic": {
  "lineno": 234,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.SparseOrDenseMatmulDynamic": {
  "lineno": 514,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.SparseOrDenseMatmulDynamicSparse": {
  "lineno": 525,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.SparseOrDenseMatmulStatic": {
  "lineno": 509,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.SparseOrDenseMatmulStaticSparse": {
  "lineno": 519,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test._CholeskyExtend": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test._CholeskyExtend.testCholeskyExtension": {
  "lineno": 38,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.random.random",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.newaxis",
   "tensorflow_probability.math.cholesky_concat",
   "tensorflow_probability.positive_semidefinite_kernels.MaternOneHalf"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._CholeskyExtend.testCholeskyExtensionRandomized": {
  "lineno": 56,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.array_shapes",
   "hypothesis.extra.numpy.min",
   "hypothesis.extra.numpy.newaxis",
   "hypothesis.extra.numpy.random.seed",
   "hypothesis.extra.numpy.random.uniform",
   "hypothesis.extra.numpy.zeros",
   "hypothesis.given",
   "hypothesis.strategies.data",
   "hypothesis.strategies.integers",
   "hypothesis.strategies.just",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.broadcast_static_shape",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.linalg.eye",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.math.cholesky_concat",
   "tensorflow_probability.positive_semidefinite_kernels.MaternOneHalf",
   "tensorflow_probability.python.internal.hypothesis_testlib.broadcasting_shapes",
   "tensorflow_probability.python.internal.hypothesis_testlib.tfp_hp_settings"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._LUMatrixInverse": {
  "lineno": 297,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.float32"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test._LUMatrixInverse.test_batch": {
  "lineno": 313,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.array",
   "hypothesis.extra.numpy.linalg.inv",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.linalg.lu",
   "tensorflow_probability.math.lu_matrix_inverse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._LUMatrixInverse.test_non_batch": {
  "lineno": 301,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.array",
   "hypothesis.extra.numpy.linalg.inv",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.linalg.lu",
   "tensorflow_probability.math.lu_matrix_inverse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._LUReconstruct": {
  "lineno": 251,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.float32"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test._LUReconstruct.test_batch": {
  "lineno": 269,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.array",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.linalg.lu",
   "tensorflow_probability.math.lu_reconstruct"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._LUReconstruct.test_non_batch": {
  "lineno": 255,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.array",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.linalg.lu",
   "tensorflow_probability.math.lu_reconstruct"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._LUSolve": {
  "lineno": 345,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.float32"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test._LUSolve.test_batch_broadcast": {
  "lineno": 370,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.array",
   "hypothesis.extra.numpy.linalg.solve",
   "hypothesis.extra.numpy.newaxis",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.linalg.lu",
   "tensorflow_probability.math.lu_solve"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._LUSolve.test_non_batch": {
  "lineno": 349,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.array",
   "hypothesis.extra.numpy.linalg.solve",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.linalg.lu",
   "tensorflow_probability.math.lu_solve"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._PivotedCholesky": {
  "lineno": 115,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test._PivotedCholesky._random_batch_psd": {
  "lineno": 117,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.arange",
   "hypothesis.extra.numpy.diag",
   "hypothesis.extra.numpy.matmul",
   "hypothesis.extra.numpy.random.random",
   "hypothesis.extra.numpy.swapaxes",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._PivotedCholesky.testGradient": {
  "lineno": 155,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.norm",
   "tensorflow_probability.math.pivoted_cholesky",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._PivotedCholesky.testGradientTapeCFv2": {
  "lineno": 164,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.linalg.norm",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.python.framework.test_util.enable_control_flow_v2",
   "tensorflow_probability.math.pivoted_cholesky"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._PivotedCholesky.testOracleExamples": {
  "lineno": 177,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "hypothesis.extra.numpy.array",
   "hypothesis.extra.numpy.matmul",
   "tensorflow_probability.math.pivoted_cholesky"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._PivotedCholesky.testPivotedCholesky": {
  "lineno": 126,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.arange",
   "hypothesis.extra.numpy.bool",
   "hypothesis.extra.numpy.finfo",
   "hypothesis.extra.numpy.ones",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.linalg.norm",
   "tensorflow.compat.v2.math.count_nonzero",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.math.pivoted_cholesky"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._SparseOrDenseMatmul": {
  "lineno": 410,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.float32"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test._SparseOrDenseMatmul._make_placeholder": {
  "lineno": 415,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._SparseOrDenseMatmul._make_sparse_placeholder": {
  "lineno": 419,
  "symbols_in_volume": [
   "tensorflow.compat.v2.SparseTensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._SparseOrDenseMatmul.test_batch_matmul": {
  "lineno": 481,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._SparseOrDenseMatmul.test_batch_matvecmul": {
  "lineno": 494,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._SparseOrDenseMatmul.test_non_batch_matmul": {
  "lineno": 471,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._SparseOrDenseMatmul.test_non_batch_matvecmul": {
  "lineno": 476,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._SparseOrDenseMatmul.verify_sparse_dense_matmul": {
  "lineno": 433,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.matmul",
   "tensorflow_probability.math.dense_to_sparse",
   "tensorflow_probability.math.sparse_or_dense_matmul"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._SparseOrDenseMatmul.verify_sparse_dense_matvecmul": {
  "lineno": 450,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.matmul",
   "hypothesis.extra.numpy.newaxis",
   "tensorflow_probability.math.dense_to_sparse",
   "tensorflow_probability.math.sparse_or_dense_matvecmul"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test.make_tensor_hiding_attributes": {
  "lineno": 243,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.minimize": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.math.minimize.minimize": {
  "lineno": 27,
  "symbols_in_volume": [
   "numpy.arange",
   "tensorflow.compat.v2.TensorSpec",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.nest.flatten",
   "tensorflow.compat.v2.nest.map_structure",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.scan",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.minimize.minimize.train_loop_body": {
  "lineno": 106,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.function",
   "tensorflow.compat.v2.identity"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.minimize_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.minimize_test.MinimizeTests": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.minimize_test.MinimizeTests.test_custom_trace_fn": {
  "lineno": 36,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.optimizers.Adam",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.math.minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.minimize_test.MinimizeTests.test_custom_trace_fn.trace_fn": {
  "lineno": 45,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.minimize_test.MinimizeTests.test_respects_trainable_variables": {
  "lineno": 59,
  "symbols_in_volume": [
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.optimizers.Adam",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.math.minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.minimize_test.MinimizeTests.test_works_when_results_have_dynamic_shape": {
  "lineno": 77,
  "symbols_in_volume": [
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v1.train.AdamOptimizer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.math.minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.numeric": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.math.numeric.clip_by_value_preserve_gradient": {
  "lineno": 68,
  "symbols_in_volume": [
   "tensorflow.compat.v2.clip_by_value",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.stop_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.numeric.log1psquare": {
  "lineno": 33,
  "symbols_in_volume": [
   "numpy.finfo",
   "numpy.float64",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.square",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.numeric_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.numeric_test.ClipByValuePreserveGrad32": {
  "lineno": 67,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.compat.v2.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.numeric_test.ClipByValuePreserveGrad32.test_clip_by_value_preserve_grad": {
  "lineno": 74,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.ones_like",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.math.clip_by_value_preserve_gradient",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.numeric_test.ClipByValuePreserveGrad64": {
  "lineno": 93,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.numeric_test.Log1pSquareTest32": {
  "lineno": 32,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.compat.v2.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.numeric_test.Log1pSquareTest32.test_log1psquare": {
  "lineno": 40,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.math.log1psquare",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.numeric_test.Log1pSquareTest64": {
  "lineno": 62,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.ode": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.math.ode.base": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.math.ode.base.ChosenBySolver": {
  "lineno": 364,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.ode.base.Diagnostics": {
  "lineno": 310,
  "symbols_in_volume": [
   "abc.ABCMeta",
   "six.add_metaclass"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.ode.base.Diagnostics.num_jacobian_evaluations": {
  "lineno": 324,
  "symbols_in_volume": [
   "abc.abstractproperty"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.base.Diagnostics.num_matrix_factorizations": {
  "lineno": 334,
  "symbols_in_volume": [
   "abc.abstractproperty"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.base.Diagnostics.num_ode_fn_evaluations": {
  "lineno": 314,
  "symbols_in_volume": [
   "abc.abstractproperty"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.base.Diagnostics.status": {
  "lineno": 344,
  "symbols_in_volume": [
   "abc.abstractproperty"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.base.Diagnostics.success": {
  "lineno": 354,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.base.Results": {
  "lineno": 292,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.ode.base.Solver": {
  "lineno": 40,
  "symbols_in_volume": [
   "abc.ABCMeta",
   "six.add_metaclass"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.ode.base.Solver.__init__": {
  "lineno": 44,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.base.Solver._solve": {
  "lineno": 276,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.base.Solver.solve": {
  "lineno": 49,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.base.Solver.solve.gradient_helper": {
  "lineno": 154,
  "symbols_in_volume": [
   "tensorflow.compat.v2.custom_gradient",
   "tensorflow.compat.v2.stop_gradient",
   "tensorflow_probability.python.math.ode.util.stop_gradient_of_real_or_complex_entries"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.base.Solver.solve.gradient_helper.grad_fn": {
  "lineno": 176,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.TensorArray",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.nest.pack_sequence_as",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.while_loop",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.math.ode.util.get_jacobian_fn_mat",
   "tensorflow_probability.python.math.ode.util.get_ode_fn_vec"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.base.Solver.solve.gradient_helper.grad_fn.augmented_ode_fn_vec": {
  "lineno": 221,
  "symbols_in_volume": [
   "tensorflow_probability.python.math.ode.util.right_mult_by_jacobian_mat"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.base.Solver.solve.gradient_helper.grad_fn.reverse_to_result_time": {
  "lineno": 237,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.base._compose_augmented": {
  "lineno": 378,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.base._decompose_augmented": {
  "lineno": 383,
  "symbols_in_volume": [
   "tensorflow.compat.v2.split"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow_probability.python.math.ode.base.Solver"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF.__init__": {
  "lineno": 83,
  "symbols_in_volume": [
   "tensorflow_probability.python.math.ode.bdf_util.MAX_ORDER"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF._solve": {
  "lineno": 186,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorArray",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.ensure_shape",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.logging.warn",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size",
   "tensorflow.compat.v2.stack",
   "tensorflow.compat.v2.while_loop",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.math.ode.base.ChosenBySolver",
   "tensorflow_probability.python.math.ode.base.Results",
   "tensorflow_probability.python.math.ode.bdf_util.MAX_ORDER",
   "tensorflow_probability.python.math.ode.bdf_util.ORDERS",
   "tensorflow_probability.python.math.ode.bdf_util.RECIPROCAL_SUMS",
   "tensorflow_probability.python.math.ode.bdf_util.first_step_size",
   "tensorflow_probability.python.math.ode.util.error_if_not_real_or_complex",
   "tensorflow_probability.python.math.ode.util.error_if_not_vector",
   "tensorflow_probability.python.math.ode.util.get_jacobian_fn_mat",
   "tensorflow_probability.python.math.ode.util.get_ode_fn_vec"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF._solve.advance_to_solution_time": {
  "lineno": 288,
  "symbols_in_volume": [
   "tensorflow.compat.v2.while_loop"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF._solve.advance_to_solution_time.step_cond": {
  "lineno": 292,
  "symbols_in_volume": [
   "tensorflow.compat.v2.equal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF._solve.advance_to_solution_time_cond": {
  "lineno": 679,
  "symbols_in_volume": [
   "tensorflow.compat.v2.equal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF._solve.assert_ops": {
  "lineno": 240,
  "symbols_in_volume": [
   "numpy.inf",
   "tensorflow.compat.v1.assert_near",
   "tensorflow.compat.v2.Assert",
   "tensorflow.compat.v2.norm",
   "tensorflow_probability.python.math.ode.bdf_util.MAX_ORDER",
   "tensorflow_probability.python.math.ode.util.assert_increasing",
   "tensorflow_probability.python.math.ode.util.assert_nonnegative",
   "tensorflow_probability.python.math.ode.util.assert_positive"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF._solve.maybe_step": {
  "lineno": 343,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.TensorArray",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.clip_by_value",
   "tensorflow.compat.v2.cond",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.logical_not",
   "tensorflow.compat.v2.norm",
   "tensorflow_probability.python.math.ode.bdf_util.MAX_ORDER",
   "tensorflow_probability.python.math.ode.bdf_util.error_ratio",
   "tensorflow_probability.python.math.ode.bdf_util.interpolate_backward_differences",
   "tensorflow_probability.python.math.ode.bdf_util.newton",
   "tensorflow_probability.python.math.ode.bdf_util.update_backward_differences",
   "tensorflow_probability.python.math.ode.util.next_step_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF._solve.maybe_step.maybe_update_factorization": {
  "lineno": 384,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cond"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF._solve.maybe_step.update_factorization": {
  "lineno": 369,
  "symbols_in_volume": [
   "tensorflow_probability.python.math.ode.bdf_util.newton_qr"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF._solve.maybe_step.update_jacobian_and_factorization": {
  "lineno": 376,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF._solve.step": {
  "lineno": 309,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.while_loop"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF._solve.step.maybe_step_cond": {
  "lineno": 327,
  "symbols_in_volume": [
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.logical_not"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF._solve.step_cond": {
  "lineno": 665,
  "symbols_in_volume": [
   "tensorflow.compat.v2.equal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf._BDFDiagnostics": {
  "lineno": 706,
  "symbols_in_volume": [
   "collections.namedtuple",
   "tensorflow_probability.python.math.ode.base.Diagnostics"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.ode.bdf._BDFSolverInternalState": {
  "lineno": 731,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.ode.bdf_util": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple",
   "numpy.arange",
   "numpy.concatenate",
   "numpy.cumsum",
   "numpy.nan"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.ode.bdf_util.error_ratio": {
  "lineno": 31,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.norm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf_util.first_step_size": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.clip_by_value",
   "tensorflow.compat.v2.math.rsqrt",
   "tensorflow.compat.v2.norm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf_util.interpolate_backward_differences": {
  "lineno": 68,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.stack",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf_util.interpolation_matrix": {
  "lineno": 88,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.math.cumprod",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.transpose",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf_util.newton": {
  "lineno": 109,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.newaxis",
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.logical_not",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.while_loop",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf_util.newton.newton_body": {
  "lineno": 130,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.linalg.triangular_solve",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.norm",
   "tensorflow.compat.v2.squeeze",
   "tensorflow.compat.v2.transpose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf_util.newton_qr": {
  "lineno": 205,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.eye",
   "tensorflow.compat.v2.linalg.qr",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf_util.update_backward_differences": {
  "lineno": 215,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorArray",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.while_loop"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf_util.update_backward_differences.body": {
  "lineno": 235,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf_util_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.ode.bdf_util_test.BDFUtilTest": {
  "lineno": 30,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "absl.testing.parameterized.named_parameters",
   "tensorflow.compat.v2.complex128",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.ode.bdf_util_test.BDFUtilTest.test_first_step_size_is_large_when_ode_fn_is_constant": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.math.ode.bdf_util.first_step_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf_util_test.BDFUtilTest.test_interpolate_backward_differences_zeroth_order_is_unchanged": {
  "lineno": 75,
  "symbols_in_volume": [
   "numpy.random.normal",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.math.ode.bdf_util.MAX_ORDER",
   "tensorflow_probability.python.math.ode.bdf_util.interpolate_backward_differences"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf_util_test.BDFUtilTest.test_interpolation_matrix_unit_step_size_ratio": {
  "lineno": 61,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.math.ode.bdf_util.MAX_ORDER",
   "tensorflow_probability.python.math.ode.bdf_util.interpolation_matrix"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf_util_test.BDFUtilTest.test_newton_order_one": {
  "lineno": 89,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.math.ode.bdf_util.newton",
   "tensorflow_probability.python.math.ode.bdf_util.newton_qr"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.ode.ode_test.GeneralTest": {
  "lineno": 269,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "absl.testing.parameterized.named_parameters",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.math.ode.BDF",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.ode.ode_test.GeneralTest.test_bad_initial_state_dtype": {
  "lineno": 273,
  "symbols_in_volume": [
   "numpy.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.GeneralTest.test_diagnostics": {
  "lineno": 283,
  "symbols_in_volume": [
   "numpy.float64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.GeneralTest.test_previous_solver_internal_state": {
  "lineno": 305,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.float64",
   "numpy.newaxis",
   "tensorflow_probability.math.ode.ChosenBySolver"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.GradientTest": {
  "lineno": 215,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "absl.testing.parameterized.named_parameters",
   "tensorflow_probability.math.ode.BDF",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.ode.ode_test.GradientTest.test_linear_dense": {
  "lineno": 218,
  "symbols_in_volume": [
   "numpy.dot",
   "numpy.float64",
   "numpy.ones",
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.GradientTest.test_linear_dense.ode_fn": {
  "lineno": 225,
  "symbols_in_volume": [
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.squeeze"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.GradientTest.test_riccati": {
  "lineno": 247,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.NonStiffTest": {
  "lineno": 33,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "absl.testing.parameterized.named_parameters",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.math.ode.BDF",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.ode.ode_test.NonStiffTest.test_linear": {
  "lineno": 87,
  "symbols_in_volume": [
   "numpy.diag",
   "numpy.exp",
   "numpy.float64",
   "numpy.newaxis",
   "tensorflow_probability.math.ode.ChosenBySolver"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.NonStiffTest.test_linear_complex": {
  "lineno": 121,
  "symbols_in_volume": [
   "numpy.complex128",
   "numpy.diag",
   "numpy.exp",
   "numpy.newaxis",
   "tensorflow_probability.math.ode.ChosenBySolver"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.NonStiffTest.test_linear_dense": {
  "lineno": 139,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.float64",
   "numpy.linalg.eig",
   "numpy.linalg.inv",
   "numpy.matmul",
   "numpy.random.randn",
   "numpy.random.seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.NonStiffTest.test_linear_dense.ode_fn": {
  "lineno": 146,
  "symbols_in_volume": [
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.squeeze"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.NonStiffTest.test_linear_jacobian_fn_unspecified": {
  "lineno": 105,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.float64",
   "numpy.newaxis",
   "tensorflow_probability.math.ode.ChosenBySolver"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.NonStiffTest.test_ode_fn_is_zero": {
  "lineno": 71,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.ones",
   "numpy.zeros",
   "numpy.zeros_like",
   "tensorflow_probability.math.ode.ChosenBySolver"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.NonStiffTest.test_riccati": {
  "lineno": 167,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow_probability.math.ode.ChosenBySolver"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.NonStiffTest.test_state_with_matrix_shape": {
  "lineno": 53,
  "symbols_in_volume": [
   "numpy.concatenate",
   "numpy.diag",
   "numpy.exp",
   "numpy.float64",
   "numpy.newaxis",
   "numpy.ones",
   "numpy.reshape",
   "tensorflow_probability.math.ode.ChosenBySolver"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.NonStiffTest.test_zero_dims": {
  "lineno": 37,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.float64",
   "tensorflow_probability.math.ode.ChosenBySolver"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.StiffTest": {
  "lineno": 184,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "absl.testing.parameterized.named_parameters",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.math.ode.BDF",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.ode.ode_test.StiffTest.test_van_der_pol": {
  "lineno": 188,
  "symbols_in_volume": [
   "numpy.float64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.StiffTest.test_van_der_pol.jacobian_fn": {
  "lineno": 196,
  "symbols_in_volume": [
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.StiffTest.test_van_der_pol.ode_fn": {
  "lineno": 190,
  "symbols_in_volume": [
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.math.ode.util._AutomaticJacobian": {
  "lineno": 197,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.math.ode.util._AutomaticJacobian.__call__": {
  "lineno": 204,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.size",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util._AutomaticJacobian.__init__": {
  "lineno": 200,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util.assert_increasing": {
  "lineno": 26,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Assert",
   "tensorflow.compat.v2.reduce_all"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util.assert_nonnegative": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Assert",
   "tensorflow.compat.v2.reduce_all",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util.assert_positive": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Assert",
   "tensorflow.compat.v2.reduce_all",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util.error_if_not_real_or_complex": {
  "lineno": 47,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util.error_if_not_vector": {
  "lineno": 55,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util.get_jacobian_fn_mat": {
  "lineno": 61,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util.get_jacobian_fn_mat.constant_jacobian_fn_mat": {
  "lineno": 86,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util.get_jacobian_fn_mat.jacobian_fn_mat": {
  "lineno": 91,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util.get_ode_fn_vec": {
  "lineno": 99,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util.get_ode_fn_vec.ode_fn_vec": {
  "lineno": 115,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util.next_step_size": {
  "lineno": 121,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.clip_by_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util.right_mult_by_jacobian_mat": {
  "lineno": 168,
  "symbols_in_volume": [
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reshape",
   "tensorflow_probability.python.math.gradient.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util.stop_gradient_of_real_or_complex_entries": {
  "lineno": 152,
  "symbols_in_volume": [
   "tensorflow.compat.v2.nest.flatten",
   "tensorflow.compat.v2.nest.pack_sequence_as",
   "tensorflow.compat.v2.stop_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.ode.util_test.JacobianTest": {
  "lineno": 30,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.ode.util_test.JacobianTest.test_right_mult_by_jacobian_mat": {
  "lineno": 39,
  "symbols_in_volume": [
   "numpy.dot",
   "numpy.float32",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.math.ode.util.get_jacobian_fn_mat",
   "tensorflow_probability.python.math.ode.util.get_ode_fn_vec",
   "tensorflow_probability.python.math.ode.util.right_mult_by_jacobian_mat"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util_test.JacobianTest.test_right_mult_by_jacobian_mat.ode_fn": {
  "lineno": 46,
  "symbols_in_volume": [
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.squeeze"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.python.util.all_util.remove_undocumented"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.psd_kernels.exp_sin_squared": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.math.psd_kernels.exp_sin_squared.ExpSinSquared": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.exp_sin_squared.ExpSinSquared.__init__": {
  "lineno": 47,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor",
   "tensorflow_probability.python.math.psd_kernels.internal.util.maybe_get_common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.exp_sin_squared.ExpSinSquared._apply": {
  "lineno": 88,
  "symbols_in_volume": [
   "numpy.pi",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.sin",
   "tensorflow_probability.python.math.psd_kernels.internal.util.pad_shape_with_ones",
   "tensorflow_probability.python.math.psd_kernels.internal.util.sum_rightmost_ndims_preserving_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.exp_sin_squared.ExpSinSquared._batch_shape": {
  "lineno": 128,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.exp_sin_squared.ExpSinSquared._batch_shape_tensor": {
  "lineno": 136,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.exp_sin_squared.ExpSinSquared._parameter_control_dependencies": {
  "lineno": 143,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.exp_sin_squared.ExpSinSquared.amplitude": {
  "lineno": 113,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.exp_sin_squared.ExpSinSquared.length_scale": {
  "lineno": 118,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.exp_sin_squared.ExpSinSquared.period": {
  "lineno": 123,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.exp_sin_squared_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.psd_kernels.exp_sin_squared_test.ExpSinSquaredTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.exp_sin_squared_test.ExpSinSquaredTest._exp_sin_squared_kernel": {
  "lineno": 42,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.exp",
   "numpy.pi",
   "numpy.sin",
   "numpy.sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.exp_sin_squared_test.ExpSinSquaredTest.testMismatchedFloatTypesAreBad": {
  "lineno": 35,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.float64",
   "tensorflow_probability.math.psd_kernels.ExpSinSquared"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.exp_sin_squared_test.ExpSinSquaredTest.testNoneShapes": {
  "lineno": 75,
  "symbols_in_volume": [
   "numpy.reshape",
   "tensorflow_probability.math.psd_kernels.ExpSinSquared"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.exp_sin_squared_test.ExpSinSquaredTest.testShapesAreCorrect": {
  "lineno": 80,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.math.psd_kernels.ExpSinSquared"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.exp_sin_squared_test.ExpSinSquaredTest.testValidateArgs": {
  "lineno": 107,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.errors.InvalidArgumentError",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.math.psd_kernels.ExpSinSquared"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.exp_sin_squared_test.ExpSinSquaredTest.testValuesAreCorrect": {
  "lineno": 48,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.array",
   "numpy.float32",
   "numpy.float64",
   "numpy.random.seed",
   "numpy.random.uniform",
   "tensorflow_probability.math.psd_kernels.ExpSinSquared"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.exponentiated_quadratic": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.math.psd_kernels.exponentiated_quadratic.ExponentiatedQuadratic": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.exponentiated_quadratic.ExponentiatedQuadratic.__init__": {
  "lineno": 45,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor",
   "tensorflow_probability.python.math.psd_kernels.internal.util.maybe_get_common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.exponentiated_quadratic.ExponentiatedQuadratic._apply": {
  "lineno": 102,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.squared_difference",
   "tensorflow_probability.python.math.psd_kernels.internal.util.pad_shape_with_ones",
   "tensorflow_probability.python.math.psd_kernels.internal.util.sum_rightmost_ndims_preserving_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.exponentiated_quadratic.ExponentiatedQuadratic._batch_shape": {
  "lineno": 91,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.exponentiated_quadratic.ExponentiatedQuadratic._batch_shape_tensor": {
  "lineno": 97,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.exponentiated_quadratic.ExponentiatedQuadratic._parameter_control_dependencies": {
  "lineno": 118,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.exponentiated_quadratic.ExponentiatedQuadratic.amplitude": {
  "lineno": 81,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.exponentiated_quadratic.ExponentiatedQuadratic.length_scale": {
  "lineno": 86,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.exponentiated_quadratic_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.psd_kernels.exponentiated_quadratic_test.ExponentiatedQuadraticTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.exponentiated_quadratic_test.ExponentiatedQuadraticTest.testMismatchedFloatTypesAreBad": {
  "lineno": 35,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.float64",
   "tensorflow_probability.math.psd_kernels.ExponentiatedQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.exponentiated_quadratic_test.ExponentiatedQuadraticTest.testNoneShapes": {
  "lineno": 67,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.reshape",
   "tensorflow_probability.math.psd_kernels.ExponentiatedQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.exponentiated_quadratic_test.ExponentiatedQuadraticTest.testShapesAreCorrect": {
  "lineno": 72,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.math.psd_kernels.ExponentiatedQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.exponentiated_quadratic_test.ExponentiatedQuadraticTest.testValidateArgs": {
  "lineno": 98,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.errors.InvalidArgumentError",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.math.psd_kernels.ExponentiatedQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.exponentiated_quadratic_test.ExponentiatedQuadraticTest.testValuesAreCorrect": {
  "lineno": 44,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.exp",
   "numpy.float32",
   "numpy.random.seed",
   "numpy.random.uniform",
   "numpy.sum",
   "tensorflow_probability.math.psd_kernels.ExponentiatedQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_scaled": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_scaled.FeatureScaled": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow_probability.python.math.psd_kernels.feature_transformed.FeatureTransformed"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_scaled.FeatureScaled.__init__": {
  "lineno": 48,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_scaled.FeatureScaled.__init__.rescale_input": {
  "lineno": 71,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.math.psd_kernels.internal.util.pad_shape_with_ones"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_scaled.FeatureScaled._batch_shape": {
  "lineno": 92,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_scaled.FeatureScaled._batch_shape_tensor": {
  "lineno": 97,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_scaled.FeatureScaled._parameter_control_dependencies": {
  "lineno": 102,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_scaled.FeatureScaled.scale_diag": {
  "lineno": 88,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_scaled_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_scaled_test.FeatureScaledFloat32Test": {
  "lineno": 115,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_scaled_test.FeatureScaledFloat64Test": {
  "lineno": 119,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_scaled_test._FeatureScaledTest": {
  "lineno": 47,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_scaled_test._FeatureScaledTest.testBatchShape": {
  "lineno": 50,
  "symbols_in_volume": [
   "numpy.random.uniform",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.math.psd_kernels.ExponentiatedQuadratic",
   "tensorflow_probability.math.psd_kernels.FeatureScaled"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_scaled_test._FeatureScaledTest.testKernelParametersBroadcast": {
  "lineno": 65,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.expand_dims",
   "numpy.random.uniform",
   "tensorflow_probability.math.psd_kernels.ExponentiatedQuadratic",
   "tensorflow_probability.math.psd_kernels.FeatureScaled"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_scaled_test._numpy_exp_quad": {
  "lineno": 32,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_scaled_test._numpy_exp_quad_matrix": {
  "lineno": 38,
  "symbols_in_volume": [
   "numpy.expand_dims"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_transformed": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_transformed.FeatureTransformed": {
  "lineno": 27,
  "symbols_in_volume": [
   "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_transformed.FeatureTransformed.__init__": {
  "lineno": 80,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_transformed.FeatureTransformed._apply": {
  "lineno": 110,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_transformed.FeatureTransformed.kernel": {
  "lineno": 118,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_transformed.FeatureTransformed.transformation_fn": {
  "lineno": 123,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_transformed_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_transformed_test.FeatureTransformedFloat32Test": {
  "lineno": 203,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_transformed_test.FeatureTransformedFloat64Test": {
  "lineno": 208,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_transformed_test._FeatureTransformedTest": {
  "lineno": 47,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_transformed_test._FeatureTransformedTest.testKernelParametersBroadcast": {
  "lineno": 139,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.random.uniform",
   "tensorflow_probability.math.psd_kernels.ExponentiatedQuadratic",
   "tensorflow_probability.math.psd_kernels.FeatureTransformed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_transformed_test._FeatureTransformedTest.testKernelParametersBroadcast.vector_transform": {
  "lineno": 161,
  "symbols_in_volume": [
   "tensorflow_probability.python.math.psd_kernels.internal.util.pad_shape_with_ones"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_transformed_test._FeatureTransformedTest.testValuesAreCorrectIdentity": {
  "lineno": 50,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.random.uniform",
   "tensorflow_probability.math.psd_kernels.ExponentiatedQuadratic",
   "tensorflow_probability.math.psd_kernels.FeatureTransformed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_transformed_test._FeatureTransformedTest.testValuesAreCorrectScalarTransform": {
  "lineno": 73,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.random.uniform",
   "tensorflow_probability.bijectors.AffineScalar",
   "tensorflow_probability.math.psd_kernels.ExponentiatedQuadratic",
   "tensorflow_probability.math.psd_kernels.FeatureTransformed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_transformed_test._FeatureTransformedTest.testValuesAreCorrectScalarTransform.scale_transform": {
  "lineno": 89,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_transformed_test._FeatureTransformedTest.testValuesAreCorrectVectorTransform": {
  "lineno": 103,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.random.uniform",
   "tensorflow_probability.bijectors.Affine",
   "tensorflow_probability.math.psd_kernels.ExponentiatedQuadratic",
   "tensorflow_probability.math.psd_kernels.FeatureTransformed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_transformed_test._FeatureTransformedTest.testValuesAreCorrectVectorTransform.vector_transform": {
  "lineno": 121,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_transformed_test._numpy_exp_quad": {
  "lineno": 32,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.feature_transformed_test._numpy_exp_quad_matrix": {
  "lineno": 38,
  "symbols_in_volume": [
   "numpy.expand_dims"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.hypothesis_testlib": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.math.psd_kernels.hypothesis_testlib.kernel_input": {
  "lineno": 27,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.arrays",
   "hypothesis.extra.numpy.float32",
   "hypothesis.strategies.composite",
   "hypothesis.strategies.floats",
   "hypothesis.strategies.integers"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.internal": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.math.psd_kernels.internal.util": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.math.psd_kernels.internal.util.maybe_get_common_dtype": {
  "lineno": 172,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.internal.util.pad_shape_with_ones": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.pad",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.internal.util.sqrt_with_finite_grads": {
  "lineno": 105,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.custom_gradient",
   "tensorflow.compat.v2.sqrt"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.internal.util.sqrt_with_finite_grads.grad": {
  "lineno": 164,
  "symbols_in_volume": [
   "numpy.finfo",
   "numpy.sqrt",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.math.rsqrt",
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.internal.util.sum_rightmost_ndims_preserving_shape": {
  "lineno": 84,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.internal.util_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.psd_kernels.internal.util_test.UtilTest": {
  "lineno": 31,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.internal.util_test.UtilTest.testPadShapeMiddleWithOnes": {
  "lineno": 47,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "tensorflow_probability.python.math.psd_kernels.internal.util.pad_shape_with_ones"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.internal.util_test.UtilTest.testPadShapeRightWithOnes": {
  "lineno": 33,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "tensorflow_probability.python.math.psd_kernels.internal.util.pad_shape_with_ones"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.internal.util_test.UtilTest.testPadShapeRightWithOnesCanBeGraphNoop": {
  "lineno": 80,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "tensorflow.compat.v2.Graph",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.math.psd_kernels.internal.util.pad_shape_with_ones"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.internal.util_test.UtilTest.testPadShapeRightWithOnesDynamicShape": {
  "lineno": 62,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.math.psd_kernels.internal.util.pad_shape_with_ones"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.internal.util_test.UtilTest.testPadShapeStartWithOnes": {
  "lineno": 40,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "tensorflow_probability.python.math.psd_kernels.internal.util.pad_shape_with_ones"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.internal.util_test.UtilTest.testSqrtWithFiniteGradsBackpropsCorrectly": {
  "lineno": 142,
  "symbols_in_volume": [
   "numpy.linspace",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.python.math.gradient.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.internal.util_test.UtilTest.testSqrtWithFiniteGradsBackpropsCorrectly.f": {
  "lineno": 147,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.internal.util_test.UtilTest.testSqrtWithFiniteGradsBackpropsCorrectly.g": {
  "lineno": 150,
  "symbols_in_volume": [
   "tensorflow_probability.python.math.psd_kernels.internal.util.sqrt_with_finite_grads"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.internal.util_test.UtilTest.testSqrtWithFiniteGradsBackpropsCorrectly.h": {
  "lineno": 153,
  "symbols_in_volume": [
   "tensorflow.compat.v2.sin"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.internal.util_test.UtilTest.testSqrtWithFiniteGradsHasCorrectGradients": {
  "lineno": 128,
  "symbols_in_volume": [
   "numpy.isnan",
   "numpy.linspace",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.python.math.gradient.value_and_gradient",
   "tensorflow_probability.python.math.psd_kernels.internal.util.sqrt_with_finite_grads"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.internal.util_test.UtilTest.testSqrtWithFiniteGradsHasCorrectValues": {
  "lineno": 121,
  "symbols_in_volume": [
   "numpy.isnan",
   "numpy.linspace",
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.python.math.psd_kernels.internal.util.sqrt_with_finite_grads"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.internal.util_test.UtilTest.testSqrtWithFiniteGradsWithDynamicShape": {
  "lineno": 165,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.python.math.gradient.value_and_gradient",
   "tensorflow_probability.python.math.psd_kernels.internal.util.sqrt_with_finite_grads"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.internal.util_test.UtilTest.testSumRightmostNdimsPreservingShapeDynamicRank": {
  "lineno": 111,
  "symbols_in_volume": [
   "numpy.ones",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.math.psd_kernels.internal.util.sum_rightmost_ndims_preserving_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.internal.util_test.UtilTest.testSumRightmostNdimsPreservingShapeStaticRank": {
  "lineno": 99,
  "symbols_in_volume": [
   "numpy.ones",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.math.psd_kernels.internal.util.sum_rightmost_ndims_preserving_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.kumaraswamy_transformed": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.math.psd_kernels.kumaraswamy_transformed.KumaraswamyTransformed": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow_probability.python.math.psd_kernels.feature_transformed.FeatureTransformed"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.kumaraswamy_transformed.KumaraswamyTransformed.__init__": {
  "lineno": 42,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.kumaraswamy_transformed.KumaraswamyTransformed.__init__.transform_by_kumaraswamy": {
  "lineno": 69,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.kumaraswamy.Kumaraswamy",
   "tensorflow_probability.python.math.psd_kernels.internal.util.pad_shape_with_ones"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.kumaraswamy_transformed.KumaraswamyTransformed._batch_shape": {
  "lineno": 97,
  "symbols_in_volume": [
   "functools.reduce",
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.kumaraswamy_transformed.KumaraswamyTransformed._batch_shape_tensor": {
  "lineno": 104,
  "symbols_in_volume": [
   "functools.reduce",
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.kumaraswamy_transformed.KumaraswamyTransformed._parameter_control_dependencies": {
  "lineno": 111,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.kumaraswamy_transformed.KumaraswamyTransformed.concentration0": {
  "lineno": 93,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.kumaraswamy_transformed.KumaraswamyTransformed.concentration1": {
  "lineno": 89,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.kumaraswamy_transformed_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.psd_kernels.kumaraswamy_transformed_test.KumaraswamyTransformedFloat32Test": {
  "lineno": 147,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.kumaraswamy_transformed_test.KumaraswamyTransformedFloat64Test": {
  "lineno": 152,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.kumaraswamy_transformed_test._KumaraswamyTransformedTest": {
  "lineno": 51,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.kumaraswamy_transformed_test._KumaraswamyTransformedTest.testKernelParametersBroadcast": {
  "lineno": 93,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.expand_dims",
   "numpy.random.uniform",
   "tensorflow_probability.math.psd_kernels.ExponentiatedQuadratic",
   "tensorflow_probability.math.psd_kernels.KumaraswamyTransformed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.kumaraswamy_transformed_test._KumaraswamyTransformedTest.testRetrieveIdentityTransform": {
  "lineno": 54,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.random.uniform",
   "tensorflow_probability.math.psd_kernels.ExponentiatedQuadratic",
   "tensorflow_probability.math.psd_kernels.KumaraswamyTransformed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.kumaraswamy_transformed_test._kumaraswamy_warp": {
  "lineno": 32,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.kumaraswamy_transformed_test._numpy_exp_quad": {
  "lineno": 36,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.kumaraswamy_transformed_test._numpy_exp_quad_matrix": {
  "lineno": 42,
  "symbols_in_volume": [
   "numpy.expand_dims"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.matern": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.math.psd_kernels.matern.MaternFiveHalves": {
  "lineno": 223,
  "symbols_in_volume": [
   "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.matern.MaternFiveHalves.__init__": {
  "lineno": 237,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.matern.MaternFiveHalves._apply": {
  "lineno": 267,
  "symbols_in_volume": [
   "numpy.sqrt",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.math.squared_difference",
   "tensorflow_probability.python.math.psd_kernels.internal.util.pad_shape_with_ones",
   "tensorflow_probability.python.math.psd_kernels.internal.util.sqrt_with_finite_grads",
   "tensorflow_probability.python.math.psd_kernels.internal.util.sum_rightmost_ndims_preserving_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.matern.MaternOneHalf": {
  "lineno": 92,
  "symbols_in_volume": [
   "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.matern.MaternOneHalf.__init__": {
  "lineno": 110,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.matern.MaternOneHalf._apply": {
  "lineno": 139,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.squared_difference",
   "tensorflow_probability.python.math.psd_kernels.internal.util.pad_shape_with_ones",
   "tensorflow_probability.python.math.psd_kernels.internal.util.sqrt_with_finite_grads",
   "tensorflow_probability.python.math.psd_kernels.internal.util.sum_rightmost_ndims_preserving_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.matern.MaternThreeHalves": {
  "lineno": 159,
  "symbols_in_volume": [
   "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.matern.MaternThreeHalves.__init__": {
  "lineno": 173,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.matern.MaternThreeHalves._apply": {
  "lineno": 203,
  "symbols_in_volume": [
   "numpy.sqrt",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.math.squared_difference",
   "tensorflow_probability.python.math.psd_kernels.internal.util.pad_shape_with_ones",
   "tensorflow_probability.python.math.psd_kernels.internal.util.sqrt_with_finite_grads",
   "tensorflow_probability.python.math.psd_kernels.internal.util.sum_rightmost_ndims_preserving_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.matern._AmplitudeLengthScaleMixin": {
  "lineno": 36,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.matern._AmplitudeLengthScaleMixin._batch_shape": {
  "lineno": 67,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.matern._AmplitudeLengthScaleMixin._batch_shape_tensor": {
  "lineno": 73,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.matern._AmplitudeLengthScaleMixin._init_params": {
  "lineno": 39,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor",
   "tensorflow_probability.python.math.psd_kernels.internal.util.maybe_get_common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.matern._AmplitudeLengthScaleMixin._parameter_control_dependencies": {
  "lineno": 78,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.matern._AmplitudeLengthScaleMixin.amplitude": {
  "lineno": 57,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.matern._AmplitudeLengthScaleMixin.length_scale": {
  "lineno": 62,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.matern_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.psd_kernels.matern_test.MaternFiveHalvesTest": {
  "lineno": 170,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.math.psd_kernels.MaternFiveHalves"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.matern_test.MaternFiveHalvesTest._numpy_kernel": {
  "lineno": 175,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.sqrt",
   "numpy.sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.matern_test.MaternOneHalfTest": {
  "lineno": 150,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.math.psd_kernels.MaternOneHalf"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.matern_test.MaternOneHalfTest._numpy_kernel": {
  "lineno": 155,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.sqrt",
   "numpy.sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.matern_test.MaternThreeHalvesTest": {
  "lineno": 160,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.math.psd_kernels.MaternThreeHalves"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.matern_test.MaternThreeHalvesTest._numpy_kernel": {
  "lineno": 165,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.sqrt",
   "numpy.sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.matern_test._MaternTestCase": {
  "lineno": 32,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.matern_test._MaternTestCase.testBatchShape": {
  "lineno": 44,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.uniform",
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.matern_test._MaternTestCase.testBatchShapeWithNone": {
  "lineno": 51,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.uniform",
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.matern_test._MaternTestCase.testGradsAtIdenticalInputsAreZeroNotNaN": {
  "lineno": 135,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.float32",
   "numpy.zeros",
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.matern_test._MaternTestCase.testMismatchedFloatTypesAreBad": {
  "lineno": 38,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.float64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.matern_test._MaternTestCase.testShapesAreCorrect": {
  "lineno": 111,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.matern_test._MaternTestCase.testValidateArgs": {
  "lineno": 57,
  "symbols_in_volume": [
   "tensorflow.compat.v2.errors.InvalidArgumentError",
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.matern_test._MaternTestCase.testValuesAreCorrect": {
  "lineno": 72,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.array",
   "numpy.float32",
   "numpy.float64",
   "numpy.random.seed",
   "numpy.random.uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial.Linear": {
  "lineno": 209,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial.Linear.__init__": {
  "lineno": 224,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial.Polynomial": {
  "lineno": 48,
  "symbols_in_volume": [
   "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial.Polynomial.__init__": {
  "lineno": 72,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor",
   "tensorflow_probability.python.math.psd_kernels.internal.util.maybe_get_common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial.Polynomial._apply": {
  "lineno": 163,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.math.psd_kernels.internal.util.pad_shape_with_ones",
   "tensorflow_probability.python.math.psd_kernels.internal.util.sum_rightmost_ndims_preserving_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial.Polynomial._batch_shape": {
  "lineno": 151,
  "symbols_in_volume": [
   "functools.reduce",
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial.Polynomial._batch_shape_tensor": {
  "lineno": 157,
  "symbols_in_volume": [
   "functools.reduce",
   "tensorflow.compat.v2.broadcast_dynamic_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial.Polynomial._parameter_control_dependencies": {
  "lineno": 195,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial.Polynomial.bias_variance": {
  "lineno": 131,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial.Polynomial.exponent": {
  "lineno": 146,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial.Polynomial.shift": {
  "lineno": 141,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial.Polynomial.slope_variance": {
  "lineno": 136,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial._maybe_shape_dynamic": {
  "lineno": 42,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial._maybe_shape_static": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial_test.LinearTest": {
  "lineno": 252,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial_test.LinearTest.testIsPolynomial": {
  "lineno": 256,
  "symbols_in_volume": [
   "tensorflow_probability.math.psd_kernels.Linear",
   "tensorflow_probability.math.psd_kernels.Polynomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial_test.LinearTest.testValuesAreCorrect": {
  "lineno": 261,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.uniform",
   "tensorflow_probability.math.psd_kernels.Linear"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial_test.PolynomialTest": {
  "lineno": 33,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial_test.PolynomialTest.testBatchShape": {
  "lineno": 85,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "tensorflow_probability.math.psd_kernels.Polynomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial_test.PolynomialTest.testFloat32": {
  "lineno": 132,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "tensorflow_probability.math.psd_kernels.Polynomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial_test.PolynomialTest.testFloat32Fallback": {
  "lineno": 45,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow_probability.math.psd_kernels.Polynomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial_test.PolynomialTest.testFloat64": {
  "lineno": 144,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.ones",
   "tensorflow_probability.math.psd_kernels.Polynomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial_test.PolynomialTest.testNoneShapes": {
  "lineno": 80,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.reshape",
   "tensorflow_probability.math.psd_kernels.Polynomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial_test.PolynomialTest.testShapesAreCorrectApply": {
  "lineno": 156,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "numpy.float32",
   "numpy.ones",
   "tensorflow_probability.math.psd_kernels.Polynomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial_test.PolynomialTest.testShapesAreCorrectBroadcast": {
  "lineno": 218,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "tensorflow_probability.math.psd_kernels.Polynomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial_test.PolynomialTest.testShapesAreCorrectMatrix": {
  "lineno": 184,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "numpy.float32",
   "numpy.ones",
   "tensorflow_probability.math.psd_kernels.Polynomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial_test.PolynomialTest.testShifttNonPositiveIsOk": {
  "lineno": 65,
  "symbols_in_volume": [
   "tensorflow_probability.math.psd_kernels.Polynomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial_test.PolynomialTest.testValidateArgsNonPositiveAreBad": {
  "lineno": 53,
  "symbols_in_volume": [
   "tensorflow_probability.math.psd_kernels.Polynomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial_test.PolynomialTest.testValidateArgsNoneIsOk": {
  "lineno": 70,
  "symbols_in_volume": [
   "tensorflow_probability.math.psd_kernels.Polynomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial_test.PolynomialTest.testValuesAreCorrect": {
  "lineno": 233,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.uniform",
   "tensorflow_probability.math.psd_kernels.Polynomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.polynomial_test.PolynomialTest.test_mismatched_float_types_are_bad": {
  "lineno": 37,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.float64",
   "tensorflow_probability.math.psd_kernels.Polynomial"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel": {
  "lineno": 36,
  "symbols_in_volume": [
   "abc.ABCMeta",
   "six.add_metaclass",
   "tensorflow.compat.v2.Module"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.__add__": {
  "lineno": 833,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.__iadd__": {
  "lineno": 839,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.__imul__": {
  "lineno": 848,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.__init__": {
  "lineno": 180,
  "symbols_in_volume": [
   "tensorflow.compat.v2.group",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.__mul__": {
  "lineno": 842,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.__repr__": {
  "lineno": 865,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.__str__": {
  "lineno": 851,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel._apply": {
  "lineno": 446,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel._batch_shape": {
  "lineno": 826,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel._batch_shape_tensor": {
  "lineno": 829,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel._name_and_control_scope": {
  "lineno": 307,
  "symbols_in_volume": [
   "contextlib.contextmanager",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel._parameter_control_dependencies": {
  "lineno": 877,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.apply": {
  "lineno": 322,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.squeeze"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.batch_shape": {
  "lineno": 262,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.batch_shape_tensor": {
  "lineno": 293,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.dtype": {
  "lineno": 247,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.feature_ndims": {
  "lineno": 227,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.matrix": {
  "lineno": 490,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.name": {
  "lineno": 252,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.tensor": {
  "lineno": 657,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.math.psd_kernels.internal.util.pad_shape_with_ones"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.validate_args": {
  "lineno": 257,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel._ProductKernel": {
  "lineno": 1010,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel._ProductKernel.__init__": {
  "lineno": 1030,
  "symbols_in_volume": [
   "tensorflow_probability.python.math.psd_kernels.internal.util.maybe_get_common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel._ProductKernel._apply": {
  "lineno": 1067,
  "symbols_in_volume": [
   "functools.reduce",
   "operator.mul"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel._ProductKernel._batch_shape": {
  "lineno": 1072,
  "symbols_in_volume": [
   "functools.reduce",
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel._ProductKernel._batch_shape_tensor": {
  "lineno": 1076,
  "symbols_in_volume": [
   "functools.reduce",
   "tensorflow.compat.v2.broadcast_dynamic_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel._ProductKernel.kernels": {
  "lineno": 1062,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel._SumKernel": {
  "lineno": 931,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel._SumKernel.__init__": {
  "lineno": 961,
  "symbols_in_volume": [
   "tensorflow_probability.python.math.psd_kernels.internal.util.maybe_get_common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel._SumKernel._apply": {
  "lineno": 998,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel._SumKernel._batch_shape": {
  "lineno": 1001,
  "symbols_in_volume": [
   "functools.reduce",
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel._SumKernel._batch_shape_tensor": {
  "lineno": 1005,
  "symbols_in_volume": [
   "functools.reduce",
   "tensorflow.compat.v2.broadcast_dynamic_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel._SumKernel.kernels": {
  "lineno": 993,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel._flatten_multiplicand_list": {
  "lineno": 912,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel._flatten_summand_list": {
  "lineno": 893,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.IncompletelyDefinedKernel": {
  "lineno": 42,
  "symbols_in_volume": [
   "tensorflow_probability.math.psd_kernels.PositiveSemidefiniteKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.IncompletelyDefinedKernel.__init__": {
  "lineno": 45,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest": {
  "lineno": 88,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.createKernelInputs": {
  "lineno": 93,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testApplyOutputWithDynamicShapes": {
  "lineno": 224,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.errors.InvalidArgumentError"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testApplyOutputWithStaticShapes": {
  "lineno": 204,
  "symbols_in_volume": [
   "tensorflow.compat.v2.errors.InvalidArgumentError"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testDynamicBatchShape": {
  "lineno": 196,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testDynamicShapesAndValuesOfProduct": {
  "lineno": 353,
  "symbols_in_volume": [
   "functools.reduce",
   "operator.mul",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testDynamicShapesAndValuesOfSum": {
  "lineno": 321,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testFeatureNdimsExceptions": {
  "lineno": 172,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testFeatureNdimsExceptions.FeatureNdimsKernel": {
  "lineno": 179,
  "symbols_in_volume": [
   "tensorflow_probability.math.psd_kernels.PositiveSemidefiniteKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testFeatureNdimsExceptions.FeatureNdimsKernel.__init__": {
  "lineno": 181,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testMatrixOutputWithDynamicShapes": {
  "lineno": 277,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testMatrixOutputWithStaticShapes": {
  "lineno": 242,
  "symbols_in_volume": [
   "tensorflow.compat.v2.errors.InvalidArgumentError"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testNotImplementedExceptions": {
  "lineno": 160,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testOperatorOverloads": {
  "lineno": 294,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testProductOfKernelsWithNoneDtypes": {
  "lineno": 385,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.float64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testRepr": {
  "lineno": 143,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testReprUnknownBatchShape": {
  "lineno": 134,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testStaticBatchShape": {
  "lineno": 186,
  "symbols_in_volume": [
   "absl.testing.parameterized.named_parameters"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testStaticShapesAndValuesOfProduct": {
  "lineno": 336,
  "symbols_in_volume": [
   "functools.reduce",
   "operator.mul",
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testStaticShapesAndValuesOfSum": {
  "lineno": 306,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testStr": {
  "lineno": 117,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testStrUnknownBatchShape": {
  "lineno": 109,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testSumOfKernelsWithNoneDtypes": {
  "lineno": 371,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.float64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.TestKernel": {
  "lineno": 49,
  "symbols_in_volume": [
   "tensorflow_probability.math.psd_kernels.PositiveSemidefiniteKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.TestKernel.__init__": {
  "lineno": 57,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.TestKernel._apply": {
  "lineno": 75,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.math.psd_kernels.internal.util.pad_shape_with_ones"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.TestKernel._batch_shape": {
  "lineno": 68,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.TestKernel._batch_shape_tensor": {
  "lineno": 71,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel_test.TestKernel.multiplier": {
  "lineno": 64,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.psd_kernel_properties_test": {
  "lineno": null,
  "symbols_in_volume": [
   "absl.flags.DEFINE_enum",
   "absl.flags.FLAGS",
   "tensorflow.compat.v2.enable_v2_behavior",
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.python.internal.hypothesis_testlib.softplus_plus_eps"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.psd_kernels.psd_kernel_properties_test.KernelPropertiesTest": {
  "lineno": 390,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.psd_kernel_properties_test.KernelPropertiesTest.testKernelGradient": {
  "lineno": 393,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "hypothesis.HealthCheck.data_too_large",
   "hypothesis.HealthCheck.too_slow",
   "hypothesis.given",
   "hypothesis.strategies.data",
   "hypothesis.strategies.integers",
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.python.internal.hypothesis_testlib.assert_no_excessive_var_usage",
   "tensorflow_probability.python.internal.hypothesis_testlib.broadcast_compatible_shape",
   "tensorflow_probability.python.internal.hypothesis_testlib.tfp_hp_settings",
   "tensorflow_probability.python.math.psd_kernels.hypothesis_testlib.kernel_input"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.psd_kernel_properties_test.assert_no_none_grad": {
  "lineno": 383,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.psd_kernel_properties_test.base_kernels": {
  "lineno": 272,
  "symbols_in_volume": [
   "hypothesis.note",
   "hypothesis.strategies.composite",
   "hypothesis.strategies.integers",
   "hypothesis.strategies.sampled_from",
   "tensorflow_probability.python.internal.hypothesis_testlib.shapes",
   "tensorflow_probability.python.internal.tensor_util.is_ref",
   "tensorflow_probability.python.math.psd_kernels"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.psd_kernel_properties_test.broadcasting_params": {
  "lineno": 81,
  "symbols_in_volume": [
   "hypothesis.strategies.composite",
   "tensorflow_probability.python.internal.hypothesis_testlib.broadcasting_params"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.psd_kernel_properties_test.broadcasting_params._constraint": {
  "lineno": 92,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.psd_kernel_properties_test.constraint_for": {
  "lineno": 455,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.hypothesis_testlib.identity_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.psd_kernel_properties_test.depths": {
  "lineno": 105,
  "symbols_in_volume": [
   "hypothesis.strategies.integers"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.psd_kernel_properties_test.feature_scaleds": {
  "lineno": 111,
  "symbols_in_volume": [
   "hypothesis.note",
   "hypothesis.strategies.booleans",
   "hypothesis.strategies.composite",
   "hypothesis.strategies.integers",
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.positive_semidefinite_kernels.FeatureScaled",
   "tensorflow_probability.python.internal.hypothesis_testlib.shapes",
   "tensorflow_probability.python.internal.hypothesis_testlib.softplus_plus_eps",
   "tensorflow_probability.python.math.psd_kernels.hypothesis_testlib.kernel_input"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.psd_kernel_properties_test.kernels": {
  "lineno": 311,
  "symbols_in_volume": [
   "hypothesis.strategies.composite",
   "hypothesis.strategies.just",
   "hypothesis.strategies.one_of",
   "hypothesis.strategies.sampled_from"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.psd_kernel_properties_test.schur_complements": {
  "lineno": 184,
  "symbols_in_volume": [
   "hypothesis.extra.numpy.arrays",
   "hypothesis.extra.numpy.float32",
   "hypothesis.note",
   "hypothesis.strategies.booleans",
   "hypothesis.strategies.composite",
   "hypothesis.strategies.floats",
   "hypothesis.strategies.integers",
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.positive_semidefinite_kernels.SchurComplement",
   "tensorflow_probability.python.internal.hypothesis_testlib.defer_and_count_usage",
   "tensorflow_probability.python.internal.hypothesis_testlib.shapes",
   "tensorflow_probability.python.math.psd_kernels.hypothesis_testlib.kernel_input"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.rational_quadratic": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.math.psd_kernels.rational_quadratic.RationalQuadratic": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.rational_quadratic.RationalQuadratic.__init__": {
  "lineno": 76,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor",
   "tensorflow_probability.python.math.psd_kernels.internal.util.maybe_get_common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.rational_quadratic.RationalQuadratic._apply": {
  "lineno": 123,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.squared_difference",
   "tensorflow_probability.python.math.psd_kernels.internal.util.pad_shape_with_ones",
   "tensorflow_probability.python.math.psd_kernels.internal.util.sum_rightmost_ndims_preserving_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.rational_quadratic.RationalQuadratic._batch_shape": {
  "lineno": 165,
  "symbols_in_volume": [
   "functools.reduce",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.rational_quadratic.RationalQuadratic._batch_shape_tensor": {
  "lineno": 177,
  "symbols_in_volume": [
   "functools.reduce",
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.rational_quadratic.RationalQuadratic._parameter_control_dependencies": {
  "lineno": 187,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.assert_util.assert_positive",
   "tensorflow_probability.python.internal.tensor_util.is_ref"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.rational_quadratic.RationalQuadratic.amplitude": {
  "lineno": 150,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.rational_quadratic.RationalQuadratic.length_scale": {
  "lineno": 155,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.rational_quadratic.RationalQuadratic.scale_mixture_rate": {
  "lineno": 160,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.rational_quadratic_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.psd_kernels.rational_quadratic_test.RationalQuadraticTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.rational_quadratic_test.RationalQuadraticTest._rational_quadratic": {
  "lineno": 35,
  "symbols_in_volume": [
   "numpy.sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.rational_quadratic_test.RationalQuadraticTest.testBatchShape": {
  "lineno": 44,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.uniform",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.math.psd_kernels.RationalQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.rational_quadratic_test.RationalQuadraticTest.testMismatchedFloatTypesAreBad": {
  "lineno": 40,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.float64",
   "tensorflow_probability.math.psd_kernels.RationalQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.rational_quadratic_test.RationalQuadraticTest.testNoneScaleMixture": {
  "lineno": 79,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.seed",
   "numpy.random.uniform",
   "tensorflow_probability.math.psd_kernels.RationalQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.rational_quadratic_test.RationalQuadraticTest.testShapesAreCorrect": {
  "lineno": 97,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.math.psd_kernels.RationalQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.rational_quadratic_test.RationalQuadraticTest.testValidateArgs": {
  "lineno": 124,
  "symbols_in_volume": [
   "tensorflow.compat.v2.errors.InvalidArgumentError",
   "tensorflow_probability.math.psd_kernels.RationalQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.rational_quadratic_test.RationalQuadraticTest.testValuesAreCorrect": {
  "lineno": 54,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.array",
   "numpy.float32",
   "numpy.float64",
   "numpy.random.seed",
   "numpy.random.uniform",
   "tensorflow_probability.math.psd_kernels.RationalQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement.SchurComplement": {
  "lineno": 51,
  "symbols_in_volume": [
   "tensorflow_probability.python.math.psd_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement.SchurComplement.__init__": {
  "lineno": 168,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.bijectors.cholesky_outer_product.CholeskyOuterProduct",
   "tensorflow_probability.python.bijectors.invert.Invert",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.tensor_util.convert_nonref_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement.SchurComplement._apply": {
  "lineno": 247,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
   "tensorflow.compat.v2.linalg.matrix_transpose",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.math.psd_kernels.internal.util.pad_shape_with_ones"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement.SchurComplement._batch_shape": {
  "lineno": 229,
  "symbols_in_volume": [
   "functools.reduce",
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement.SchurComplement._batch_shape_tensor": {
  "lineno": 238,
  "symbols_in_volume": [
   "functools.reduce",
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement.SchurComplement._divisor_matrix": {
  "lineno": 323,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.newaxis",
   "tensorflow_probability.python.internal.distribution_util.get_broadcast_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement.SchurComplement._divisor_matrix_cholesky": {
  "lineno": 339,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement.SchurComplement._is_fixed_inputs_empty": {
  "lineno": 218,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement.SchurComplement.base_kernel": {
  "lineno": 311,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement.SchurComplement.cholesky_bijector": {
  "lineno": 319,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement.SchurComplement.diag_shift": {
  "lineno": 315,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement.SchurComplement.divisor_matrix": {
  "lineno": 336,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement.SchurComplement.divisor_matrix_cholesky": {
  "lineno": 343,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement.SchurComplement.fixed_inputs": {
  "lineno": 307,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement._add_diagonal_shift": {
  "lineno": 46,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.linalg.set_diag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement._validate_arg_if_not_none": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.identity"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement_test.SchurComplementTest": {
  "lineno": 56,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement_test.SchurComplementTest.testApplyShapesAreCorrect": {
  "lineno": 123,
  "symbols_in_volume": [
   "itertools.count",
   "numpy.float64",
   "numpy.ones",
   "numpy.random.uniform",
   "tensorflow_probability.math.psd_kernels.ExponentiatedQuadratic",
   "tensorflow_probability.math.psd_kernels.SchurComplement"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement_test.SchurComplementTest.testBaseKernelNoneDtype": {
  "lineno": 223,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.float32",
   "numpy.float64",
   "tensorflow_probability.math.psd_kernels.ExponentiatedQuadratic",
   "tensorflow_probability.math.psd_kernels.SchurComplement"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement_test.SchurComplementTest.testEmptyFixedInputs": {
  "lineno": 193,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.math.psd_kernels.ExponentiatedQuadratic",
   "tensorflow_probability.math.psd_kernels.SchurComplement"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement_test.SchurComplementTest.testMismatchedFloatTypesAreBad": {
  "lineno": 59,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.float64",
   "numpy.random.uniform",
   "tensorflow_probability.math.psd_kernels.ExponentiatedQuadratic",
   "tensorflow_probability.math.psd_kernels.SchurComplement"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement_test.SchurComplementTest.testNoneFixedInputs": {
  "lineno": 212,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "tensorflow_probability.math.psd_kernels.ExponentiatedQuadratic",
   "tensorflow_probability.math.psd_kernels.SchurComplement"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement_test.SchurComplementTest.testTensorShapesAreCorrect": {
  "lineno": 152,
  "symbols_in_volume": [
   "itertools.count",
   "numpy.float64",
   "numpy.ones",
   "numpy.random.uniform",
   "tensorflow_probability.math.psd_kernels.ExponentiatedQuadratic",
   "tensorflow_probability.math.psd_kernels.SchurComplement"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement_test.SchurComplementTest.testValuesAreCorrect": {
  "lineno": 75,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.einsum",
   "numpy.expand_dims",
   "numpy.float64",
   "numpy.random.seed",
   "numpy.random.uniform",
   "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow_probability.math.psd_kernels.ExponentiatedQuadratic",
   "tensorflow_probability.math.psd_kernels.SchurComplement"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement_test.broadcast_shapes": {
  "lineno": 36,
  "symbols_in_volume": [
   "functools.reduce"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement_test.broadcast_shapes._broadcast_2": {
  "lineno": 41,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.psd_kernels.schur_complement_test.broadcast_shapes._broadcast_ab": {
  "lineno": 37,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.math.random_ops": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.math.random_ops.random_rademacher": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.compat.v2.as_dtype",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.int64",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.random.uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.random_ops.random_rayleigh": {
  "lineno": 61,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.sqrt"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.random_ops_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.random_ops_test.RandomRademacherDynamic32": {
  "lineno": 53,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.random_ops_test.RandomRademacherDynamic64": {
  "lineno": 59,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.random_ops_test.RandomRayleighDynamic32": {
  "lineno": 98,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.random_ops_test.RandomRayleighDynamic64": {
  "lineno": 104,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.random_ops_test._RandomRademacher": {
  "lineno": 33,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.math.random_ops_test._RandomRademacher.test_expected_value": {
  "lineno": 35,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "numpy.mean",
   "numpy.reshape",
   "numpy.unique",
   "numpy.zeros",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.random_rademacher",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.random_ops_test._RandomRayleigh": {
  "lineno": 65,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.math.random_ops_test._RandomRayleigh.test_expected_value": {
  "lineno": 67,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.bool",
   "numpy.int32",
   "numpy.linspace",
   "numpy.ones_like",
   "numpy.pi",
   "numpy.sqrt",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.squared_difference",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.math.random_rayleigh",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.root_search": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.root_search.secant_root": {
  "lineno": 46,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Assert",
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_all",
   "tensorflow.compat.v2.sign",
   "tensorflow.compat.v2.while_loop",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.dtype_util.base_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.root_search.secant_root._body": {
  "lineno": 252,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.root_search.secant_root._should_continue": {
  "lineno": 225,
  "symbols_in_volume": [
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.root_search_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.root_search_test.RootSearchTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.root_search_test.RootSearchTest.test_secant_finds_all_roots_from_one_initial_position": {
  "lineno": 35,
  "symbols_in_volume": [
   "scipy.optimize.newton",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float64",
   "tensorflow_probability.math.secant_root"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.root_search_test.RootSearchTest.test_secant_finds_all_roots_from_two_initial_positions": {
  "lineno": 75,
  "symbols_in_volume": [
   "scipy.optimize.newton",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float64",
   "tensorflow_probability.math.secant_root"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.root_search_test.RootSearchTest.test_secant_finds_all_roots_using_float32": {
  "lineno": 117,
  "symbols_in_volume": [
   "scipy.optimize.newton",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.math.secant_root"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.root_search_test.RootSearchTest.test_secant_finds_any_root_from_one_initial_position": {
  "lineno": 51,
  "symbols_in_volume": [
   "scipy.optimize.newton",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.reduce_any",
   "tensorflow_probability.math.secant_root"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.root_search_test.RootSearchTest.test_secant_finds_any_roots_from_two_initial_positions": {
  "lineno": 92,
  "symbols_in_volume": [
   "scipy.optimize.newton",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.reduce_any",
   "tensorflow_probability.math.secant_root"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.root_search_test.RootSearchTest.test_secant_invalid_max_iterations": {
  "lineno": 163,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.errors.InvalidArgumentError",
   "tensorflow.compat.v2.float64",
   "tensorflow_probability.math.secant_root"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.root_search_test.RootSearchTest.test_secant_invalid_position_tolerance": {
  "lineno": 145,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.errors.InvalidArgumentError",
   "tensorflow.compat.v2.float64",
   "tensorflow_probability.math.secant_root"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.root_search_test.RootSearchTest.test_secant_invalid_value_tolerance": {
  "lineno": 154,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.errors.InvalidArgumentError",
   "tensorflow.compat.v2.float64",
   "tensorflow_probability.math.secant_root"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.root_search_test.RootSearchTest.test_secant_skips_iteration": {
  "lineno": 133,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float64",
   "tensorflow_probability.math.secant_root"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.sparse": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.math.sparse.dense_to_sparse": {
  "lineno": 31,
  "symbols_in_volume": [
   "tensorflow.compat.v2.SparseTensor",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.gather_nd",
   "tensorflow.compat.v2.int64",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.not_equal",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.string",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.internal.dtype_util.base_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.sparse_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.math.sparse_test.SparseTest": {
  "lineno": 45,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.math.sparse_test.SparseTest.test_dense_to_sparse_1d": {
  "lineno": 50,
  "symbols_in_volume": [
   "numpy.int32",
   "numpy.int64",
   "tensorflow_probability.math.dense_to_sparse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.sparse_test.SparseTest.test_dense_to_sparse_1d_bool": {
  "lineno": 70,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.int64",
   "tensorflow_probability.math.dense_to_sparse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.sparse_test.SparseTest.test_dense_to_sparse_1d_float": {
  "lineno": 60,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.int64",
   "tensorflow_probability.math.dense_to_sparse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.sparse_test.SparseTest.test_dense_to_sparse_1d_str": {
  "lineno": 80,
  "symbols_in_volume": [
   "numpy.int64",
   "numpy.object",
   "tensorflow_probability.math.dense_to_sparse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.sparse_test.SparseTest.test_dense_to_sparse_1d_str_special_ignore": {
  "lineno": 90,
  "symbols_in_volume": [
   "numpy.int64",
   "numpy.object",
   "tensorflow_probability.math.dense_to_sparse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.sparse_test.SparseTest.test_dense_to_sparse_2d": {
  "lineno": 101,
  "symbols_in_volume": [
   "tensorflow_probability.math.dense_to_sparse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.sparse_test.SparseTest.test_dense_to_sparse_3d": {
  "lineno": 109,
  "symbols_in_volume": [
   "tensorflow_probability.math.dense_to_sparse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.sparse_test.SparseTest.test_dense_to_sparse_unknown_1d_shape": {
  "lineno": 129,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.math.dense_to_sparse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.sparse_test.SparseTest.test_dense_to_sparse_unknown_3d_shape": {
  "lineno": 138,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.math.dense_to_sparse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.sparse_test.SparseTest.test_dense_to_sparse_unknown_rank": {
  "lineno": 158,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.math.dense_to_sparse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.math.sparse_test._assert_sparse_tensor_value": {
  "lineno": 33,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.diagnostic": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.diagnostic._axis_size": {
  "lineno": 499,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic._broadcast_maybelist_arg": {
  "lineno": 511,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic._effective_sample_size_single_state": {
  "lineno": 176,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.cumsum",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.maximum",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.reshape",
   "tensorflow_probability.python.stats.auto_correlation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic._effective_sample_size_single_state._sum_pairs": {
  "lineno": 212,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic._is_list_like": {
  "lineno": 506,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic._potential_scale_reduction_single_state": {
  "lineno": 398,
  "symbols_in_volume": [
   "tensorflow.compat.v1.assert_greater",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.transpose",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies",
   "tensorflow_probability.python.internal.prefer_static.concat",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic._reduce_variance": {
  "lineno": 487,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.squared_difference",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic.effective_sample_size": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic.potential_scale_reduction": {
  "lineno": 256,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.EffectiveSampleSizeDynamicTest": {
  "lineno": 333,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.EffectiveSampleSizeDynamicTest.use_static_shape": {
  "lineno": 337,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.EffectiveSampleSizeStaticTest": {
  "lineno": 324,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.EffectiveSampleSizeStaticTest.use_static_shape": {
  "lineno": 328,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.PotentialScaleReductionDynamicTest": {
  "lineno": 545,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.PotentialScaleReductionDynamicTest.assertRaisesError": {
  "lineno": 553,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.PotentialScaleReductionDynamicTest.use_static_shape": {
  "lineno": 549,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.PotentialScaleReductionStaticTest": {
  "lineno": 528,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.PotentialScaleReductionStaticTest.assertRaisesError": {
  "lineno": 536,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.PotentialScaleReductionStaticTest.testIndependentNdimsLessThanOneRaises": {
  "lineno": 539,
  "symbols_in_volume": [
   "numpy.random.rand",
   "tensorflow_probability.mcmc.potential_scale_reduction"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.PotentialScaleReductionStaticTest.use_static_shape": {
  "lineno": 532,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.ReduceVarianceTestDynamicShape": {
  "lineno": 620,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.ReduceVarianceTestDynamicShape.use_static_shape": {
  "lineno": 623,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.ReduceVarianceTestStaticShape": {
  "lineno": 612,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.ReduceVarianceTestStaticShape.use_static_shape": {
  "lineno": 615,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest._check_versus_expected_effective_sample_size": {
  "lineno": 42,
  "symbols_in_volume": [
   "numpy.ones_like",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.mcmc.effective_sample_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest.testIidRank1NormalHasFullEssMaxLagInitialPositive": {
  "lineno": 114,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.randn",
   "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest.testIidRank1NormalHasFullEssMaxLagInitialPositiveOddLength": {
  "lineno": 139,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.randn",
   "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest.testIidRank1NormalHasFullEssMaxLagThresholdZero": {
  "lineno": 89,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.randn",
   "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest.testIidRank1NormalHasFullEssMaxLags10": {
  "lineno": 65,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.randn",
   "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest.testIidRank2NormalHasFullEssMaxLagInitialPositive": {
  "lineno": 128,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.randn",
   "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest.testIidRank2NormalHasFullEssMaxLagThresholdZero": {
  "lineno": 104,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.randn",
   "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest.testIidRank2NormalHasFullEssMaxLags10": {
  "lineno": 79,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.randn",
   "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest.testInitialPositiveAndLag": {
  "lineno": 274,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map",
   "tensorflow_probability.mcmc.effective_sample_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest.testInitialPositiveSuperEfficient": {
  "lineno": 305,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.exp",
   "numpy.float32",
   "numpy.linspace",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map",
   "tensorflow_probability.mcmc.effective_sample_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest.testLength10CorrelationHasEssOneTenthTotalLengthUsingMaxLags50": {
  "lineno": 150,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "numpy.random.randn",
   "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest.testLength10CorrelationHasEssOneTenthTotalLengthUsingMaxLagsInitialPos": {
  "lineno": 181,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "numpy.random.randn",
   "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest.testLength10CorrelationHasEssOneTenthTotalLengthUsingMaxLagsThresholdZero": {
  "lineno": 165,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "numpy.random.randn",
   "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest.testListArgs": {
  "lineno": 198,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "numpy.random.randn",
   "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map",
   "tensorflow_probability.mcmc.effective_sample_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest.testMaxLagsArgsAddInAnOrManner": {
  "lineno": 249,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "numpy.random.randn",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map",
   "tensorflow_probability.mcmc.effective_sample_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest.testMaxLagsThresholdLessThanNeg1SameAsNone": {
  "lineno": 222,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "numpy.random.randn",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map",
   "tensorflow_probability.mcmc.effective_sample_size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest.use_static_shape": {
  "lineno": 37,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest": {
  "lineno": 342,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest.check_results": {
  "lineno": 377,
  "symbols_in_volume": [
   "numpy.ones_like",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.mcmc.potential_scale_reduction"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest.iid_normal_chains_should_pass_wrapper": {
  "lineno": 402,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.rand",
   "numpy.random.randn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest.offset_normal_chains_should_fail_wrapper": {
  "lineno": 458,
  "symbols_in_volume": [
   "numpy.linspace",
   "numpy.prod",
   "numpy.random.randn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest.testFailingOffsetNdimsAreSampleOneIndependentOneOtherOne": {
  "lineno": 473,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest.testLinearTrendFailsIfSplitChains": {
  "lineno": 490,
  "symbols_in_volume": [
   "numpy.linspace",
   "numpy.random.randn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest.testLinearTrendPassesIfNoSplitChains": {
  "lineno": 477,
  "symbols_in_volume": [
   "numpy.linspace",
   "numpy.random.randn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest.testListOfStatesWhereFirstPassesSecondFails": {
  "lineno": 350,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.ones_like",
   "numpy.random.randn",
   "tensorflow_probability.mcmc.potential_scale_reduction"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest.testNotEnoughSamplesNoSplitChainsFailsIfValidateArgs": {
  "lineno": 502,
  "symbols_in_volume": [
   "numpy.random.rand",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.mcmc.potential_scale_reduction"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest.testNotEnoughSamplesWithSplitChainsFailsIfValidateArgs": {
  "lineno": 514,
  "symbols_in_volume": [
   "numpy.random.rand",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.mcmc.potential_scale_reduction"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest.testPassingIIDNdimsAreIndependentOneOtherOne": {
  "lineno": 428,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest.testPassingIIDNdimsAreIndependentOneOtherOneSplitChainsEvenNSamples": {
  "lineno": 432,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest.testPassingIIDNdimsAreIndependentOneOtherOneSplitChainsOddNSamples": {
  "lineno": 439,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest.testPassingIIDNdimsAreIndependentOneOtherTwo": {
  "lineno": 447,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest.testPassingIIDNdimsAreIndependentOneOtherZero": {
  "lineno": 424,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest.testPassingIIDNdimsAreIndependentTwoOtherTwo64Bit": {
  "lineno": 451,
  "symbols_in_volume": [
   "numpy.float64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest.use_static_shape": {
  "lineno": 345,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._ReduceVarianceTest": {
  "lineno": 559,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._ReduceVarianceTest.check_versus_numpy": {
  "lineno": 567,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.isnan",
   "numpy.var",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.mcmc.diagnostic._reduce_variance"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._ReduceVarianceTest.testScalarBiasedFalse": {
  "lineno": 591,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._ReduceVarianceTest.testScalarBiasedTrue": {
  "lineno": 588,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._ReduceVarianceTest.testShape2x3x4Axis1BiasedFalseKeepdimsTrue": {
  "lineno": 599,
  "symbols_in_volume": [
   "numpy.random.randn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._ReduceVarianceTest.testShape2x3x4AxisNoneBiasedFalseKeepdimsFalse": {
  "lineno": 595,
  "symbols_in_volume": [
   "numpy.random.randn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._ReduceVarianceTest.testShape2x3x4x5Axis13BiasedFalseKeepdimsFalse": {
  "lineno": 607,
  "symbols_in_volume": [
   "numpy.random.randn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._ReduceVarianceTest.testShape2x3x4x5Axis13BiasedFalseKeepdimsTrue": {
  "lineno": 603,
  "symbols_in_volume": [
   "numpy.random.randn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._ReduceVarianceTest.use_static_shape": {
  "lineno": 562,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation.DualAveragingStepSizeAdaptation": {
  "lineno": 97,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.kernel.TransitionKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation.DualAveragingStepSizeAdaptation.__init__": {
  "lineno": 210,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.mcmc.internal.util.enable_store_parameters_in_results",
   "tensorflow_probability.python.mcmc.internal.util.make_name"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation.DualAveragingStepSizeAdaptation._one_step_part": {
  "lineno": 326,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.math.exp",
   "tensorflow.compat.v2.math.sqrt",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.prefer_static.maximum",
   "tensorflow_probability.python.internal.prefer_static.minimum",
   "tensorflow_probability.python.internal.prefer_static.pad",
   "tensorflow_probability.python.internal.prefer_static.range",
   "tensorflow_probability.python.internal.prefer_static.rank",
   "tensorflow_probability.python.internal.prefer_static.shape",
   "tensorflow_probability.python.math.generic.reduce_logmeanexp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation.DualAveragingStepSizeAdaptation.bootstrap_results": {
  "lineno": 503,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.nest.flatten",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.prefer_static.minimum",
   "tensorflow_probability.python.internal.prefer_static.range",
   "tensorflow_probability.python.internal.prefer_static.rank",
   "tensorflow_probability.python.math.generic.reduce_logmeanexp",
   "tensorflow_probability.python.mcmc.internal.util.make_name"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation.DualAveragingStepSizeAdaptation.inner_kernel": {
  "lineno": 299,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation.DualAveragingStepSizeAdaptation.is_calibrated": {
  "lineno": 548,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation.DualAveragingStepSizeAdaptation.log_accept_prob_getter_fn": {
  "lineno": 318,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation.DualAveragingStepSizeAdaptation.name": {
  "lineno": 303,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation.DualAveragingStepSizeAdaptation.num_adaptation_steps": {
  "lineno": 307,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation.DualAveragingStepSizeAdaptation.one_step": {
  "lineno": 447,
  "symbols_in_volume": [
   "functools.partial",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.nest.flatten",
   "tensorflow.compat.v2.nest.map_structure",
   "tensorflow.compat.v2.nest.pack_sequence_as",
   "tensorflow.compat.v2.rank",
   "tensorflow_probability.python.mcmc.internal.util.make_name"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation.DualAveragingStepSizeAdaptation.parameters": {
  "lineno": 321,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation.DualAveragingStepSizeAdaptation.step_size_getter_fn": {
  "lineno": 315,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation.DualAveragingStepSizeAdaptation.step_size_setter_fn": {
  "lineno": 311,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation.DualAveragingStepSizeAdaptationResults": {
  "lineno": 61,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation._get_differing_dims": {
  "lineno": 51,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.where",
   "tensorflow.compat.v2.not_equal",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation._hmc_like_log_accept_prob_getter_fn": {
  "lineno": 46,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.minimum",
   "tensorflow_probability.python.mcmc.internal.util.make_innermost_getter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation._hmc_like_step_size_getter_fn": {
  "lineno": 41,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.make_innermost_getter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation._hmc_like_step_size_setter_fn": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.make_innermost_setter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation._maybe_validate_target_accept_prob": {
  "lineno": 552,
  "symbols_in_volume": [
   "tensorflow.compat.v2.assert_greater",
   "tensorflow.compat.v2.assert_less",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.DualAveragingStepSizeAdaptationDynamicBroadcastingTest": {
  "lineno": 386,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.DualAveragingStepSizeAdaptationStaticBroadcastingTest": {
  "lineno": 313,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.DualAveragingStepSizeAdaptationStaticBroadcastingTest.testBroadcasting": {
  "lineno": 319,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.array",
   "numpy.float64",
   "numpy.log",
   "numpy.ones",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.mcmc.DualAveragingStepSizeAdaptation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.DualAveragingStepSizeAdaptationTest": {
  "lineno": 141,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.DualAveragingStepSizeAdaptationTest.testChainLogProbChainTarget": {
  "lineno": 231,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.exp",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.minimum",
   "tensorflow.compat.v2.stack",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.mcmc.DualAveragingStepSizeAdaptation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.DualAveragingStepSizeAdaptationTest.testChainLogProbScalarTarget": {
  "lineno": 205,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.exp",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.minimum",
   "tensorflow.compat.v2.stack",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.mcmc.DualAveragingStepSizeAdaptation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.DualAveragingStepSizeAdaptationTest.testExample": {
  "lineno": 280,
  "symbols_in_volume": [
   "tensorflow.compat.v1.random.set_random_seed",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.minimum",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.mcmc.DualAveragingStepSizeAdaptation",
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.JointDistributionSequential",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.DualAveragingStepSizeAdaptationTest.testListStep": {
  "lineno": 156,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.exp",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.stack",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.mcmc.DualAveragingStepSizeAdaptation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.DualAveragingStepSizeAdaptationTest.testTargetAcceptanceProbChecks": {
  "lineno": 258,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "tensorflow.compat.v2.errors.InvalidArgumentError"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.DualAveragingStepSizeAdaptationTest.testTargetAcceptanceProbChecks._impl": {
  "lineno": 264,
  "symbols_in_volume": [
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.mcmc.DualAveragingStepSizeAdaptation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.DualAveragingStepSizeAdaptationTest.testTurnOnStoreParametersInKernelResults": {
  "lineno": 145,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.DualAveragingStepSizeAdaptation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.DualAveragingStepSizeAdaptationTest.testWrapped": {
  "lineno": 181,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.exp",
   "tensorflow.compat.v2.math.log",
   "tensorflow_probability.mcmc.DualAveragingStepSizeAdaptation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.FakeMHKernel": {
  "lineno": 61,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.TransitionKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.FakeMHKernel.__init__": {
  "lineno": 63,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.FakeMHKernel.bootstrap_results": {
  "lineno": 79,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.FakeMHKernel.is_calibrated": {
  "lineno": 87,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.FakeMHKernel.one_step": {
  "lineno": 73,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.FakeSteppedKernel": {
  "lineno": 95,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.TransitionKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.FakeSteppedKernel.__init__": {
  "lineno": 97,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.FakeSteppedKernel.bootstrap_results": {
  "lineno": 105,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.nest.map_structure"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.FakeSteppedKernel.is_calibrated": {
  "lineno": 110,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.FakeSteppedKernel.one_step": {
  "lineno": 102,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.FakeWrapperKernel": {
  "lineno": 118,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.TransitionKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.FakeWrapperKernel.__init__": {
  "lineno": 120,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.FakeWrapperKernel.bootstrap_results": {
  "lineno": 133,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.FakeWrapperKernel.inner_kernel": {
  "lineno": 123,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.FakeWrapperKernel.is_calibrated": {
  "lineno": 137,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test.FakeWrapperKernel.one_step": {
  "lineno": 127,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.dual_averaging_step_size_adaptation_test._set_seed": {
  "lineno": 49,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.EightSchoolsHmcBenchmarkTestHarness": {
  "lineno": 133,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.EightSchoolsHmcBenchmarkTestHarness.__init__": {
  "lineno": 136,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.EightSchoolsHmcBenchmarkTestHarness.benchmark_eight_schools_hmc_num_leapfrog_1": {
  "lineno": 139,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.EightSchoolsHmcBenchmarkTestHarness.benchmark_eight_schools_hmc_num_leapfrog_10": {
  "lineno": 154,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.EightSchoolsHmcBenchmarkTestHarness.benchmark_eight_schools_hmc_num_leapfrog_2": {
  "lineno": 144,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.EightSchoolsHmcBenchmarkTestHarness.benchmark_eight_schools_hmc_num_leapfrog_20": {
  "lineno": 159,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.EightSchoolsHmcBenchmarkTestHarness.benchmark_eight_schools_hmc_num_leapfrog_3": {
  "lineno": 149,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.benchmark_eight_schools_hmc": {
  "lineno": 64,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.sum",
   "tensorflow.compat.v1.Session",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.function",
   "tensorflow_probability.mcmc.sample_chain",
   "time.time"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.benchmark_eight_schools_hmc.computation": {
  "lineno": 93,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.benchmark_eight_schools_hmc.unnormalized_posterior_log_prob": {
  "lineno": 81,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.eight_schools_joint_log_prob": {
  "lineno": 45,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.mvn": {
  "lineno": 38,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc_eager_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v1.enable_eager_execution",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc_eager_test.EagerEightSchoolsHmcBenchmark": {
  "lineno": 23,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.Benchmark",
   "tensorflow_probability.python.mcmc.eight_schools_hmc.EightSchoolsHmcBenchmarkTestHarness"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc_graph_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc_graph_test.GraphEightSchoolsHmcBenchmark": {
  "lineno": 19,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.Benchmark",
   "tensorflow_probability.python.mcmc.eight_schools_hmc.EightSchoolsHmcBenchmarkTestHarness"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.hmc": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo": {
  "lineno": 168,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.kernel.TransitionKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo.__init__": {
  "lineno": 396,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated_args",
   "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastings"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo.bootstrap_results": {
  "lineno": 559,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo.is_calibrated": {
  "lineno": 515,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo.name": {
  "lineno": 506,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo.num_leapfrog_steps": {
  "lineno": 479,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo.one_step": {
  "lineno": 519,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.python.mcmc.internal.util.is_list_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo.parameters": {
  "lineno": 510,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo.seed": {
  "lineno": 502,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo.state_gradients_are_stopped": {
  "lineno": 494,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo.step_size": {
  "lineno": 464,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo.step_size_update_fn": {
  "lineno": 498,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo.target_log_prob_fn": {
  "lineno": 460,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo": {
  "lineno": 570,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.kernel.TransitionKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo.__init__": {
  "lineno": 581,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.mcmc.internal.util.warn_if_parameters_are_not_simple_tensors",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo._store_parameters_in_results": {
  "lineno": 692,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo.bootstrap_results": {
  "lineno": 760,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.nest.map_structure",
   "tensorflow.compat.v2.stop_gradient",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.mcmc.internal.util.is_list_like",
   "tensorflow_probability.python.mcmc.internal.util.make_name",
   "tensorflow_probability.python.mcmc.internal.util.maybe_call_fn_and_grads",
   "tensorflow_probability.python.mcmc.internal.util.set_doc"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo.is_calibrated": {
  "lineno": 688,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo.name": {
  "lineno": 679,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo.num_leapfrog_steps": {
  "lineno": 656,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo.one_step": {
  "lineno": 696,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.stop_gradient",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_rank",
   "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.SimpleLeapfrogIntegrator",
   "tensorflow_probability.python.mcmc.internal.util.make_name",
   "tensorflow_probability.python.mcmc.internal.util.set_doc"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo.one_step.maybe_flatten": {
  "lineno": 744,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.is_list_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo.parameters": {
  "lineno": 683,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo.seed": {
  "lineno": 675,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo.state_gradients_are_stopped": {
  "lineno": 671,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo.step_size": {
  "lineno": 641,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo.target_log_prob_fn": {
  "lineno": 637,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc._compute_log_acceptance_correction": {
  "lineno": 799,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reduce_logsumexp",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.python.mcmc.internal.util.safe_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc._log_sum_sq": {
  "lineno": 934,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.reduce_logsumexp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc._prepare_args": {
  "lineno": 893,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.stop_gradient",
   "tensorflow_probability.python.mcmc.internal.util.is_list_like",
   "tensorflow_probability.python.mcmc.internal.util.maybe_call_fn_and_grads"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc._prepare_args.maybe_flatten": {
  "lineno": 924,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.is_list_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.make_simple_step_size_update_policy": {
  "lineno": 61,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "tensorflow.compat.v1.get_variable",
   "tensorflow.compat.v2.int32",
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.make_simple_step_size_update_policy.step_size_simple_update_fn": {
  "lineno": 117,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.cond",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.minimum",
   "tensorflow.compat.v2.reduce_logsumexp",
   "tensorflow.compat.v2.size",
   "tensorflow_probability.python.mcmc.internal.util.is_list_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.make_simple_step_size_update_policy.step_size_simple_update_fn.build_assign_op": {
  "lineno": 147,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow_probability.python.mcmc.internal.util.is_list_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v1.disable_control_flow_v2",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCAdaptiveStepSize": {
  "lineno": 814,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCAdaptiveStepSize.setUp": {
  "lineno": 817,
  "symbols_in_volume": [
   "numpy.random.seed",
   "tensorflow.compat.v1.random.set_random_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCAdaptiveStepSize.test_finite_adaptation": {
  "lineno": 898,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.int32",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
   "tensorflow_probability.mcmc.make_simple_step_size_update_policy",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCAdaptiveStepSize.test_multiple_step_sizes_different_dtype": {
  "lineno": 853,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float64",
   "numpy.int32",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
   "tensorflow_probability.mcmc.make_simple_step_size_update_policy",
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCAdaptiveStepSize.test_multiple_step_sizes_different_dtype.target_log_prob_fn": {
  "lineno": 869,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCAdaptiveStepSize.test_multiple_step_sizes_different_ranks": {
  "lineno": 821,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCAdaptiveStepSize.test_multiple_step_sizes_different_ranks.target_log_prob_fn": {
  "lineno": 832,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCAdaptiveStepSize.test_reuse_step_counter": {
  "lineno": 951,
  "symbols_in_volume": [
   "tensorflow.compat.v1.AUTO_REUSE",
   "tensorflow.compat.v1.get_variable_scope",
   "tensorflow.compat.v1.variable_scope",
   "tensorflow_probability.mcmc.make_simple_step_size_update_policy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCEMAdaptiveStepSize": {
  "lineno": 958,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCEMAdaptiveStepSize.make_response_likelihood": {
  "lineno": 979,
  "symbols_in_volume": [
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones_like",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCEMAdaptiveStepSize.make_training_data": {
  "lineno": 966,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.random.randn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCEMAdaptiveStepSize.make_weights_prior": {
  "lineno": 974,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCEMAdaptiveStepSize.setUp": {
  "lineno": 962,
  "symbols_in_volume": [
   "numpy.random.seed",
   "tensorflow.compat.v1.random.set_random_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCEMAdaptiveStepSize.test_mcem_converges": {
  "lineno": 986,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.random.randn",
   "numpy.zeros",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v1.logging.vlog",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.optimizers.SGD"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCEMAdaptiveStepSize.test_mcem_converges.mcem_iter": {
  "lineno": 1002,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.minimum",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
   "tensorflow_probability.mcmc.SimpleStepSizeAdaptation",
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCEMAdaptiveStepSize.test_mcem_converges.mcem_iter.trace_fn": {
  "lineno": 1013,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCEMAdaptiveStepSize.test_mcem_converges.mcem_iter.unnormalized_posterior_log_prob": {
  "lineno": 1006,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCEMAdaptiveStepSize.test_step_size_adapts": {
  "lineno": 1091,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
   "tensorflow_probability.mcmc.SimpleStepSizeAdaptation",
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCEMAdaptiveStepSize.test_step_size_adapts.trace_fn": {
  "lineno": 1097,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCEMAdaptiveStepSize.test_step_size_adapts.unnormalized_log_prob": {
  "lineno": 1094,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCHandlesLists32": {
  "lineno": 804,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCHandlesLists64": {
  "lineno": 809,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest": {
  "lineno": 56,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest._chain_gets_correct_expectations": {
  "lineno": 135,
  "symbols_in_volume": [
   "collections.Counter",
   "numpy.bool",
   "numpy.exp",
   "numpy.log",
   "numpy.minimum",
   "numpy.ones_like",
   "tensorflow.compat.v1.logging.vlog",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.math.digamma",
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest._chain_gets_correct_expectations.log_gamma_log_prob": {
  "lineno": 137,
  "symbols_in_volume": [
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest._chain_gets_correct_expectations_wrapper": {
  "lineno": 183,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.rand",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest._kernel_leaves_target_invariant": {
  "lineno": 294,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.minimum",
   "scipy.stats.ks_2samp",
   "tensorflow.compat.v1.logging.vlog",
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest._kernel_leaves_target_invariant.fake_log_prob": {
  "lineno": 300,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest._kernel_leaves_target_invariant.log_gamma_log_prob": {
  "lineno": 296,
  "symbols_in_volume": [
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest._kernel_leaves_target_invariant_wrapper": {
  "lineno": 367,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.log",
   "numpy.random.gamma",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest._log_gamma_log_prob": {
  "lineno": 69,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest._testChainWorksDtype": {
  "lineno": 477,
  "symbols_in_volume": [
   "numpy.zeros",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.assertAllFinite": {
  "lineno": 66,
  "symbols_in_volume": [
   "numpy.isfinite",
   "numpy.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.setUp": {
  "lineno": 59,
  "symbols_in_volume": [
   "numpy.random.seed",
   "tensorflow.compat.v1.random.set_random_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testAdaptiveIncompatibleWithStepSizeAdaptation": {
  "lineno": 611,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
   "tensorflow_probability.mcmc.make_simple_step_size_update_policy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testAdaptiveParameters": {
  "lineno": 584,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testChainWorksCorrelatedMultivariate": {
  "lineno": 499,
  "symbols_in_volume": [
   "collections.Counter",
   "numpy.float32",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testChainWorksCorrelatedMultivariate.target_log_prob": {
  "lineno": 506,
  "symbols_in_volume": [
   "numpy.linalg.cholesky",
   "tensorflow.compat.v2.linalg.triangular_solve",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.squeeze",
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testChainWorksIn16Bit": {
  "lineno": 496,
  "symbols_in_volume": [
   "numpy.float16"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testChainWorksIn64Bit": {
  "lineno": 493,
  "symbols_in_volume": [
   "numpy.float64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testHMCChainExpectations1": {
  "lineno": 190,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testHMCChainExpectations2": {
  "lineno": 193,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testHMCChainExpectationsNullShape": {
  "lineno": 187,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testHMCPreservesStaticShape": {
  "lineno": 567,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testKernelLeavesTargetInvariant1": {
  "lineno": 388,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testKernelLeavesTargetInvariant2": {
  "lineno": 391,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testKernelLeavesTargetInvariant3": {
  "lineno": 394,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testKernelResultsUsingTruncatedDistribution": {
  "lineno": 196,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.isnan",
   "numpy.isneginf",
   "numpy.isposinf",
   "numpy.minimum",
   "numpy.testing.assert_array_less",
   "numpy.zeros_like",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testKernelResultsUsingTruncatedDistribution.log_prob": {
  "lineno": 197,
  "symbols_in_volume": [
   "numpy.inf",
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.fill"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testNanFromGradsDontPropagate": {
  "lineno": 434,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.minimum",
   "tensorflow.compat.v1.control_flow_v2_enabled",
   "tensorflow.compat.v1.logging.vlog",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.gradients",
   "tensorflow.compat.v2.linspace",
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testNanFromGradsDontPropagate._nan_log_prob_with_nan_gradient": {
  "lineno": 439,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testNanRejection": {
  "lineno": 397,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.minimum",
   "tensorflow.compat.v1.logging.vlog",
   "tensorflow.compat.v2.linspace",
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testNanRejection._unbounded_exponential_log_prob": {
  "lineno": 406,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.fill",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testSampleChainSeedReproducibleWorksCorrectly": {
  "lineno": 83,
  "symbols_in_volume": [
   "numpy.random.rand",
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testSampleChainSeedReproducibleWorksCorrectly.log_gamma_log_prob": {
  "lineno": 87,
  "symbols_in_volume": [
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testSoftplusCreatedOutsideKernelDoesNotKillGradients": {
  "lineno": 639,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.bijectors.Softplus",
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testSoftplusCreatedOutsideKernelDoesNotKillGradients.target_log_prob_fn": {
  "lineno": 641,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testUncalibratedHMCPreservesStaticShape": {
  "lineno": 550,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.mcmc.UncalibratedHamiltonianMonteCarlo"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testWarnMutableParameters": {
  "lineno": 627,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
   "warnings.catch_warnings",
   "warnings.simplefilter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.LogCorrectionTest16": {
  "lineno": 738,
  "symbols_in_volume": [
   "numpy.float16",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.hmc_test.LogCorrectionTest32": {
  "lineno": 743,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.hmc_test.LogCorrectionTest64": {
  "lineno": 748,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.hmc_test._HMCHandlesLists": {
  "lineno": 753,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.hmc_test._HMCHandlesLists.testStateParts": {
  "lineno": 755,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
   "tensorflow_probability.mcmc.TransformedTransitionKernel",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.bijectors.Exp",
   "tensorflow_probability.python.bijectors.Identity",
   "tensorflow_probability.python.distributions.Gamma",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test._HMCHandlesLists.testStateParts.target_log_prob": {
  "lineno": 762,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test._LogCorrectionTest": {
  "lineno": 658,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.hmc_test._LogCorrectionTest.testHandlesNanFromKinetic": {
  "lineno": 701,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.inf",
   "numpy.isfinite",
   "numpy.isnan",
   "numpy.meshgrid",
   "numpy.nan",
   "numpy.ones_like",
   "numpy.reshape",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.gradients",
   "tensorflow_probability.python.mcmc.hmc._compute_log_acceptance_correction"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test._LogCorrectionTest.testHandlesNanFromPotential": {
  "lineno": 660,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.inf",
   "numpy.isfinite",
   "numpy.meshgrid",
   "numpy.nan",
   "numpy.ones_like",
   "numpy.zeros",
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test._LogCorrectionTest.testHandlesNanFromPotential.make_trick_fun": {
  "lineno": 667,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test._LogCorrectionTest.testHandlesNanFromPotential.make_trick_fun._fn": {
  "lineno": 670,
  "symbols_in_volume": [
   "tensorflow.compat.v2.stop_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test._reduce_variance": {
  "lineno": 48,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.squared_difference",
   "tensorflow.compat.v2.reduce_mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test._set_seed": {
  "lineno": 39,
  "symbols_in_volume": [
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.LeapfrogIntegrator": {
  "lineno": 34,
  "symbols_in_volume": [
   "abc.ABCMeta",
   "six.add_metaclass"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.LeapfrogIntegrator.__call__": {
  "lineno": 49,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.SimpleLeapfrogIntegrator": {
  "lineno": 78,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.SimpleLeapfrogIntegrator.__call__": {
  "lineno": 226,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.while_loop",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.SimpleLeapfrogIntegrator.__init__": {
  "lineno": 136,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.SimpleLeapfrogIntegrator._one_step": {
  "lineno": 307,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.mcmc.internal.util.maybe_call_fn_and_grads"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.SimpleLeapfrogIntegrator.num_steps": {
  "lineno": 222,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.SimpleLeapfrogIntegrator.step_sizes": {
  "lineno": 218,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.SimpleLeapfrogIntegrator.target_fn": {
  "lineno": 214,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.process_args": {
  "lineno": 348,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.mcmc.internal.util.maybe_call_fn_and_grads"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test.LeapfrogIntegratorTest": {
  "lineno": 30,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test.LeapfrogIntegratorTest._integrator_conserves_energy": {
  "lineno": 57,
  "symbols_in_volume": [
   "numpy.prod",
   "tensorflow.compat.v1.logging.vlog",
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.SimpleLeapfrogIntegrator"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test.LeapfrogIntegratorTest._integrator_conserves_energy_wrapper": {
  "lineno": 86,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.rand",
   "tensorflow.compat.v2.constant"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test.LeapfrogIntegratorTest._log_gamma_log_prob": {
  "lineno": 43,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test.LeapfrogIntegratorTest.assertAllFinite": {
  "lineno": 40,
  "symbols_in_volume": [
   "numpy.isfinite",
   "numpy.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test.LeapfrogIntegratorTest.setUp": {
  "lineno": 33,
  "symbols_in_volume": [
   "numpy.random.seed",
   "tensorflow.compat.v1.random.set_random_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test.LeapfrogIntegratorTest.testIntegratorEnergyConservation1": {
  "lineno": 103,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test.LeapfrogIntegratorTest.testIntegratorEnergyConservation2": {
  "lineno": 106,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test.LeapfrogIntegratorTest.testIntegratorEnergyConservation3": {
  "lineno": 109,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test.LeapfrogIntegratorTest.testIntegratorEnergyConservationNullShape": {
  "lineno": 100,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.slice_sampler_utils": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.internal.slice_sampler_utils._find_best_interval_idx": {
  "lineno": 93,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.argmax",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.slice_sampler_utils._left_doubling_increments": {
  "lineno": 28,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.cumsum",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reshape",
   "tensorflow_probability.python.distributions.bernoulli.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.slice_sampler_utils._sample_with_shrinkage": {
  "lineno": 308,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.reduce_all",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.while_loop",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.slice_sampler_utils._sample_with_shrinkage._body": {
  "lineno": 355,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.random.uniform"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.slice_sampler_utils._test_acceptance": {
  "lineno": 228,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.while_loop",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.slice_sampler_utils._test_acceptance.body": {
  "lineno": 278,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.slice_sampler_utils._test_acceptance.cond": {
  "lineno": 273,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_all"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.slice_sampler_utils.slice_bounds_by_doubling": {
  "lineno": 132,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.gather_nd",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.map_fn",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reduce_any",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.slice_sampler_utils.slice_sampler_one_dim": {
  "lineno": 386,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.random.gamma",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.internal.util._choose_base_case": {
  "lineno": 75,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util._choose_base_case._expand_is_accepted_like": {
  "lineno": 80,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.tile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util._choose_base_case._where": {
  "lineno": 97,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util._is_tensor_like": {
  "lineno": 479,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.object",
   "tensorflow.compat.v2.Tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util._value_and_gradients": {
  "lineno": 178,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.math.gradient.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util._value_and_gradients._convert_to_tensor": {
  "lineno": 183,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util._value_and_gradients.fn_slice": {
  "lineno": 210,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.choose": {
  "lineno": 116,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.enable_store_parameters_in_results": {
  "lineno": 442,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.enable_store_parameters_in_results._recreate_kernel": {
  "lineno": 461,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.silence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.is_list_like": {
  "lineno": 52,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.is_namedtuple_like": {
  "lineno": 57,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.make_innermost_getter": {
  "lineno": 416,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.make_innermost_getter._new_getter": {
  "lineno": 429,
  "symbols_in_volume": [
   "functools.wraps"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.make_innermost_setter": {
  "lineno": 384,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.make_innermost_setter._new_setter": {
  "lineno": 398,
  "symbols_in_volume": [
   "functools.wraps"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.make_name": {
  "lineno": 67,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.maybe_call_fn_and_grads": {
  "lineno": 223,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.safe_sum": {
  "lineno": 134,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.inf",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.fill",
   "tensorflow.compat.v2.math.is_finite",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.set_doc": {
  "lineno": 170,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.set_doc._doc": {
  "lineno": 172,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.smart_for_loop": {
  "lineno": 249,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v1.get_default_graph",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.while_loop",
   "tensorflow.python.ops.control_flow_util.GraphOrParentsInXlaContext"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.trace_scan": {
  "lineno": 295,
  "symbols_in_volume": [
   "tensorflow.compat.v1.get_variable_scope",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v1.variable_scope",
   "tensorflow.compat.v2.TensorArray",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.nest.map_structure",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.while_loop"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.trace_scan._body": {
  "lineno": 359,
  "symbols_in_volume": [
   "tensorflow.compat.v2.nest.flatten",
   "tensorflow.compat.v2.nest.pack_sequence_as"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.trace_scan._merge_static_length": {
  "lineno": 376,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.warn_if_parameters_are_not_simple_tensors": {
  "lineno": 485,
  "symbols_in_volume": [
   "warnings.warn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.register_tensor_conversion_function",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.ChooseTest": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.ChooseTest.test_selects_batch_members_from_list_of_arrays": {
  "lineno": 75,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.ones",
   "numpy.zeros",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.mcmc.internal.util.choose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.ChooseTest.test_works_for_nested_namedtuple": {
  "lineno": 40,
  "symbols_in_volume": [
   "collections.namedtuple",
   "numpy.float32",
   "numpy.float64",
   "numpy.int32",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.mcmc.internal.util.choose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.EnableStoreParametersInResultsTest": {
  "lineno": 326,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.EnableStoreParametersInResultsTest.testAllCases": {
  "lineno": 329,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "tensorflow_probability.python.mcmc.internal.util.enable_store_parameters_in_results"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.EnableStoreParametersInResultsTest.testNoParameters": {
  "lineno": 364,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.enable_store_parameters_in_results"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.FakeInnerNew": {
  "lineno": 315,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.FakeInnerNew.__init__": {
  "lineno": 317,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.FakeInnerNoParameters": {
  "lineno": 322,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.FakeInnerOld": {
  "lineno": 309,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.FakeInnerOld.__init__": {
  "lineno": 311,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.FakeWrapperNew": {
  "lineno": 301,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.FakeWrapperNew.__init__": {
  "lineno": 303,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.FakeWrapperOld": {
  "lineno": 295,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.FakeWrapperOld.__init__": {
  "lineno": 297,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.GradientTest": {
  "lineno": 117,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.GradientTest.testGradientComputesCorrectly": {
  "lineno": 119,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.mcmc.internal.util.maybe_call_fn_and_grads"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.GradientTest.testGradientComputesCorrectly.fn": {
  "lineno": 121,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.GradientTest.testGradientWorksDespiteBijectorCaching": {
  "lineno": 133,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.distributions.LogNormal",
   "tensorflow_probability.python.mcmc.internal.util.maybe_call_fn_and_grads"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.GradientTest.testNoGradientsNiceError": {
  "lineno": 140,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.mcmc.internal.util.maybe_call_fn_and_grads"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.GradientTest.testNoGradientsNiceError.fn": {
  "lineno": 143,
  "symbols_in_volume": [
   "tensorflow.compat.v2.stop_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.IsNamedTupleLikeTest": {
  "lineno": 97,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.IsNamedTupleLikeTest.test_false_for_base_case": {
  "lineno": 109,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.mcmc.internal.util.is_namedtuple_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.IsNamedTupleLikeTest.test_true_for_namedtuple_with_fields": {
  "lineno": 104,
  "symbols_in_volume": [
   "collections.namedtuple",
   "tensorflow_probability.python.mcmc.internal.util.is_namedtuple_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.IsNamedTupleLikeTest.test_true_for_namedtuple_without_fields": {
  "lineno": 99,
  "symbols_in_volume": [
   "collections.namedtuple",
   "tensorflow_probability.python.mcmc.internal.util.is_namedtuple_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.MakeInnermostGetterTest": {
  "lineno": 265,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.MakeInnermostGetterTest.testNoWrapper": {
  "lineno": 267,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.make_innermost_getter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.MakeInnermostGetterTest.testNoWrapperArg": {
  "lineno": 272,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.make_innermost_getter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.MakeInnermostGetterTest.testNoWrapperKwarg": {
  "lineno": 277,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.make_innermost_getter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.MakeInnermostGetterTest.testOneWrapper": {
  "lineno": 282,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.make_innermost_getter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.MakeInnermostGetterTest.testTwoWrappers": {
  "lineno": 287,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.make_innermost_getter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.MakeInnermostSetterTest": {
  "lineno": 231,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.MakeInnermostSetterTest.testNoWrapper": {
  "lineno": 233,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.make_innermost_setter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.MakeInnermostSetterTest.testNoWrapperArg": {
  "lineno": 238,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.make_innermost_setter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.MakeInnermostSetterTest.testNoWrapperKwarg": {
  "lineno": 243,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.make_innermost_setter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.MakeInnermostSetterTest.testOneWrapper": {
  "lineno": 249,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.make_innermost_setter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.MakeInnermostSetterTest.testTwoWrappers": {
  "lineno": 255,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.make_innermost_setter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.SimpleTensorWarningTest": {
  "lineno": 378,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.SimpleTensorWarningTest.testNoWarn": {
  "lineno": 394,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.array",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.mcmc.internal.util.warn_if_parameters_are_not_simple_tensors",
   "warnings.catch_warnings",
   "warnings.simplefilter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.SimpleTensorWarningTest.testWarn": {
  "lineno": 382,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "tensorflow.compat.v2.Variable",
   "tensorflow_probability.python.mcmc.internal.util.warn_if_parameters_are_not_simple_tensors",
   "warnings.catch_warnings",
   "warnings.simplefilter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.SmartForLoopTest": {
  "lineno": 162,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.SmartForLoopTest.test_python_for_loop": {
  "lineno": 165,
  "symbols_in_volume": [
   "collections.Counter",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.int64",
   "tensorflow_probability.python.mcmc.internal.util.smart_for_loop"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.SmartForLoopTest.test_python_for_loop.body": {
  "lineno": 173,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.SmartForLoopTest.test_tf_while_loop": {
  "lineno": 182,
  "symbols_in_volume": [
   "collections.Counter",
   "numpy.int64",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.python.mcmc.internal.util.smart_for_loop"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.SmartForLoopTest.test_tf_while_loop.body": {
  "lineno": 186,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.TensorConvertible": {
  "lineno": 370,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.TraceScanTest": {
  "lineno": 197,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.TraceScanTest.testBasic": {
  "lineno": 200,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.trace_scan"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.TraceScanTest.testBasic._loop_fn": {
  "lineno": 202,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.TraceScanTest.testBasic._trace_fn": {
  "lineno": 205,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test._test_setter_fn": {
  "lineno": 227,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.kernel": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.kernel.TransitionKernel": {
  "lineno": 34,
  "symbols_in_volume": [
   "abc.ABCMeta",
   "six.add_metaclass"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.kernel.TransitionKernel.bootstrap_results": {
  "lineno": 75,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.kernel.TransitionKernel.is_calibrated": {
  "lineno": 66,
  "symbols_in_volume": [
   "abc.abstractproperty"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.kernel.TransitionKernel.one_step": {
  "lineno": 45,
  "symbols_in_volume": [
   "abc.abstractmethod"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm": {
  "lineno": 54,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.kernel.TransitionKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm.__init__": {
  "lineno": 245,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastings"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm.bootstrap_results": {
  "lineno": 362,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm.is_calibrated": {
  "lineno": 334,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm.name": {
  "lineno": 325,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm.one_step": {
  "lineno": 338,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm.parallel_iterations": {
  "lineno": 321,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm.parameters": {
  "lineno": 329,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm.seed": {
  "lineno": 317,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm.step_size": {
  "lineno": 313,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm.target_log_prob_fn": {
  "lineno": 305,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm.volatility_fn": {
  "lineno": 309,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin": {
  "lineno": 367,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.kernel.TransitionKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.__init__": {
  "lineno": 383,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.bootstrap_results": {
  "lineno": 585,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.mcmc.internal.util.is_list_like",
   "tensorflow_probability.python.mcmc.internal.util.make_name",
   "tensorflow_probability.python.mcmc.internal.util.set_doc"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.bootstrap_results.maybe_flatten": {
  "lineno": 616,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.is_list_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.compute_acceptance": {
  "lineno": 458,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.is_calibrated": {
  "lineno": 479,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.name": {
  "lineno": 470,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.one_step": {
  "lineno": 483,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.cond",
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_rank",
   "tensorflow_probability.python.mcmc.internal.util.make_name",
   "tensorflow_probability.python.mcmc.internal.util.set_doc"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.one_step.maybe_flatten": {
  "lineno": 553,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.is_list_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.parallel_iterations": {
  "lineno": 466,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.parameters": {
  "lineno": 474,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.seed": {
  "lineno": 462,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.step_size": {
  "lineno": 450,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.target_log_prob_fn": {
  "lineno": 446,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.volatility_fn": {
  "lineno": 454,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin._compute_log_acceptance_correction": {
  "lineno": 747,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.python.mcmc.internal.util.safe_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin._euler_method": {
  "lineno": 629,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.sqrt"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin._get_drift": {
  "lineno": 690,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.square"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin._maybe_broadcast_volatility": {
  "lineno": 924,
  "symbols_in_volume": [
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin._maybe_call_volatility_fn_and_grads": {
  "lineno": 871,
  "symbols_in_volume": [
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.math.diag_jacobian",
   "tensorflow_probability.python.mcmc.internal.util.is_list_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin._prepare_args": {
  "lineno": 931,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_shape",
   "tensorflow_probability.python.mcmc.internal.util.is_list_like",
   "tensorflow_probability.python.mcmc.internal.util.maybe_call_fn_and_grads"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.langevin_test.LangevinTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.langevin_test.LangevinTest.testLangevin1DNormal": {
  "lineno": 35,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.math.squared_difference",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.mcmc.MetropolisAdjustedLangevinAlgorithm",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin_test.LangevinTest.testLangevin3DNormal": {
  "lineno": 61,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "numpy.squeeze",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.transpose",
   "tensorflow_probability.mcmc.MetropolisAdjustedLangevinAlgorithm",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin_test.LangevinTest.testLangevin3DNormal.target_log_prob": {
  "lineno": 75,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin_test.LangevinTest.testLangevin3DNormalDynamicVolatility": {
  "lineno": 109,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "numpy.squeeze",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.transpose",
   "tensorflow_probability.mcmc.MetropolisAdjustedLangevinAlgorithm",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin_test.LangevinTest.testLangevin3DNormalDynamicVolatility.target_log_prob": {
  "lineno": 123,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin_test.LangevinTest.testLangevin3DNormalDynamicVolatility.volatility_fn": {
  "lineno": 129,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin_test.LangevinTest.testLangevinCorrectVolatilityGradient": {
  "lineno": 164,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "numpy.zeros",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow_probability.mcmc.MetropolisAdjustedLangevinAlgorithm",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin_test.LangevinTest.testLangevinCorrectVolatilityGradient.target_log_prob": {
  "lineno": 175,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin_test.LangevinTest.testLangevinCorrectVolatilityGradient.volatility_fn": {
  "lineno": 180,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple",
   "warnings.filterwarnings"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastings": {
  "lineno": 55,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.kernel.TransitionKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastings.__init__": {
  "lineno": 118,
  "symbols_in_volume": [
   "tensorflow_probability.python.util.seed_stream.SeedStream",
   "warnings.warn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastings.bootstrap_results": {
  "lineno": 247,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.mcmc.internal.util.make_name"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastings.inner_kernel": {
  "lineno": 144,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastings.is_calibrated": {
  "lineno": 161,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastings.name": {
  "lineno": 152,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastings.one_step": {
  "lineno": 165,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.mcmc.internal.util.choose",
   "tensorflow_probability.python.mcmc.internal.util.is_list_like",
   "tensorflow_probability.python.mcmc.internal.util.make_name",
   "tensorflow_probability.python.mcmc.internal.util.safe_sum",
   "warnings.warn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastings.parameters": {
  "lineno": 156,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastings.seed": {
  "lineno": 148,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.has_target_log_prob": {
  "lineno": 280,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.FakeTransitionKernel": {
  "lineno": 57,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.TransitionKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.FakeTransitionKernel.__init__": {
  "lineno": 60,
  "symbols_in_volume": [
   "collections.Counter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.FakeTransitionKernel.bootstrap_results": {
  "lineno": 79,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.FakeTransitionKernel.call_count": {
  "lineno": 66,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.FakeTransitionKernel.is_calibrated": {
  "lineno": 70,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.FakeTransitionKernel.one_step": {
  "lineno": 75,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.MetropolisHastingsTest": {
  "lineno": 133,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.MetropolisHastingsTest.setUp": {
  "lineno": 136,
  "symbols_in_volume": [
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.MetropolisHastingsTest.testCorrectlyWorksWithCorrection": {
  "lineno": 238,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.mcmc.MetropolisHastings"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.MetropolisHastingsTest.testCorrectlyWorksWithoutCorrection": {
  "lineno": 139,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.mcmc.MetropolisHastings"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.MetropolisHastingsTest.testWarnings": {
  "lineno": 337,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.mcmc.MetropolisHastings",
   "warnings.catch_warnings"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.make_bootstrap_results_fn": {
  "lineno": 115,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.make_bootstrap_results_fn.bootstrap_results": {
  "lineno": 117,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.make_one_step_fn": {
  "lineno": 84,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.make_one_step_fn.one_step": {
  "lineno": 85,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.python.mcmc.internal.util.is_list_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple",
   "tensorflow.compat.v2.int32"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.nuts.NoUTurnSampler": {
  "lineno": 129,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.kernel.TransitionKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.nuts.NoUTurnSampler.__init__": {
  "lineno": 161,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.nest.is_nested",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts.NoUTurnSampler._build_sub_tree": {
  "lineno": 647,
  "symbols_in_volume": [
   "numpy.inf",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.fill",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_any",
   "tensorflow.compat.v2.while_loop",
   "tensorflow.compat.v2.zeros",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts.NoUTurnSampler._loop_build_sub_tree": {
  "lineno": 724,
  "symbols_in_volume": [
   "numpy.inf",
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.clip_by_value",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.math.is_nan",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.tensor_scatter_nd_update",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.prefer_static.rank",
   "tensorflow_probability.python.internal.prefer_static.shape",
   "tensorflow_probability.python.math.generic.log_add_exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts.NoUTurnSampler._start_trajectory_batched": {
  "lineno": 452,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow_probability.python.internal.prefer_static.shape",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts.NoUTurnSampler.bootstrap_results": {
  "lineno": 392,
  "symbols_in_volume": [
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.nest.is_nested",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.prefer_static.shape",
   "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.process_args"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts.NoUTurnSampler.bootstrap_results._init": {
  "lineno": 408,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.concat",
   "tensorflow_probability.python.internal.prefer_static.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts.NoUTurnSampler.is_calibrated": {
  "lineno": 277,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts.NoUTurnSampler.loop_tree_doubling": {
  "lineno": 478,
  "symbols_in_volume": [
   "tensorflow.compat.v2.bitwise.left_shift",
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.math.is_nan",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.log1p",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.nest.flatten",
   "tensorflow.compat.v2.nest.map_structure",
   "tensorflow.compat.v2.nest.pack_sequence_as",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.stack",
   "tensorflow.compat.v2.where",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.prefer_static.rank",
   "tensorflow_probability.python.internal.prefer_static.rank_from_shape",
   "tensorflow_probability.python.internal.prefer_static.shape",
   "tensorflow_probability.python.math.generic.log_add_exp",
   "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.SimpleLeapfrogIntegrator"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts.NoUTurnSampler.max_energy_diff": {
  "lineno": 253,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts.NoUTurnSampler.max_tree_depth": {
  "lineno": 249,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts.NoUTurnSampler.name": {
  "lineno": 261,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts.NoUTurnSampler.one_step": {
  "lineno": 281,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorArray",
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.nest.is_nested",
   "tensorflow.compat.v2.nest.map_structure",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.reduce_any",
   "tensorflow.compat.v2.while_loop",
   "tensorflow.compat.v2.zeros",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts.NoUTurnSampler.one_step._copy": {
  "lineno": 294,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.ones",
   "tensorflow_probability.python.internal.prefer_static.pad",
   "tensorflow_probability.python.internal.prefer_static.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts.NoUTurnSampler.parameters": {
  "lineno": 273,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts.NoUTurnSampler.read_instruction": {
  "lineno": 269,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts.NoUTurnSampler.step_size": {
  "lineno": 245,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts.NoUTurnSampler.target_log_prob_fn": {
  "lineno": 241,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts.NoUTurnSampler.unrolled_leapfrog_steps": {
  "lineno": 257,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts.NoUTurnSampler.write_instruction": {
  "lineno": 265,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts._rightmost_expand_to_rank": {
  "lineno": 929,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reshape",
   "tensorflow_probability.python.internal.prefer_static.maximum",
   "tensorflow_probability.python.internal.prefer_static.pad",
   "tensorflow_probability.python.internal.prefer_static.rank",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts.build_tree_uturn_instruction": {
  "lineno": 941,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "numpy.unique"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts.build_tree_uturn_instruction._buildtree": {
  "lineno": 944,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts.compute_hamiltonian": {
  "lineno": 1004,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.square",
   "tensorflow_probability.python.internal.prefer_static.range",
   "tensorflow_probability.python.internal.prefer_static.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts.generate_efficient_write_read_instruction": {
  "lineno": 959,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.max",
   "numpy.sum",
   "numpy.where",
   "numpy.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts.has_not_u_turn": {
  "lineno": 908,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.prefer_static.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts.has_not_u_turn_at_all_index": {
  "lineno": 874,
  "symbols_in_volume": [
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.while_loop"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts.has_not_u_turn_at_all_index._get_left_state_and_check_u_turn": {
  "lineno": 879,
  "symbols_in_volume": [
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.nuts_test.NutsTest": {
  "lineno": 142,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.nuts_test.NutsTest.testCorrelated2dNormalwithinMCError": {
  "lineno": 286,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.asarray",
   "numpy.float32",
   "numpy.hstack",
   "numpy.linalg.cholesky",
   "numpy.zeros",
   "tensorflow_probability.python.internal.test_util.test_seed_stream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts_test.NutsTest.testCorrelated2dNormalwithinMCError.run_chain_and_get_estimation_error": {
  "lineno": 300,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.function",
   "tensorflow.compat.v2.math.reduce_std",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.square",
   "tensorflow_probability.mcmc.NoUTurnSampler",
   "tensorflow_probability.mcmc.effective_sample_size",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts_test.NutsTest.testDivergence": {
  "lineno": 355,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow_probability.python.distributions.JointDistributionSequential",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.Sample",
   "tensorflow_probability.python.distributions.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts_test.NutsTest.testDivergence.run_chain_and_get_divergence": {
  "lineno": 366,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.function",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.mcmc.NoUTurnSampler",
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts_test.NutsTest.testDynamicShape": {
  "lineno": 334,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.float32",
   "numpy.zeros",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.mcmc.NoUTurnSampler",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts_test.NutsTest.testLatentsOfMixedRank": {
  "lineno": 171,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.reshape",
   "tensorflow_probability.mcmc.NoUTurnSampler",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_cdf_equal_by_dkwm_two_sample",
   "tensorflow_probability.python.internal.test_util.test_seed_stream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts_test.NutsTest.testLatentsOfMixedRank.log_prob0": {
  "lineno": 185,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.squeeze",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts_test.NutsTest.testLatentsOfMixedRank.log_prob1": {
  "lineno": 202,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.squeeze",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts_test.NutsTest.testLogitBetaTargetConservation": {
  "lineno": 150,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Invert",
   "tensorflow_probability.python.bijectors.Sigmoid",
   "tensorflow_probability.python.distributions.Beta"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts_test.NutsTest.testMultivariateNormalNd": {
  "lineno": 164,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts_test.NutsTest.testMultivariateNormalNdConvergence": {
  "lineno": 229,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.any",
   "numpy.arange",
   "numpy.asarray",
   "numpy.diagflat",
   "numpy.isin",
   "numpy.linalg.cholesky",
   "numpy.random.rand",
   "numpy.random.randn",
   "numpy.unique",
   "numpy.zeros",
   "tensorflow_probability.python.internal.test_util.test_seed_stream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts_test.NutsTest.testMultivariateNormalNdConvergence.run_chain_and_get_summary": {
  "lineno": 241,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.function",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.mcmc.NoUTurnSampler",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.stats.covariance"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts_test.NutsTest.testMultivariateNormalNdConvergence.run_chain_and_get_summary.target_log_prob_fn": {
  "lineno": 243,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts_test.NutsTest.testMultivariateNormalNdConvergence.run_chain_and_get_summary.trace_fn": {
  "lineno": 255,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts_test.NutsTest.testSampleEndtoEnd": {
  "lineno": 385,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.ones_like",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.python.distributions.HalfNormal",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.JointDistributionSequential",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.StudentT",
   "tensorflow_probability.python.internal.test_util.test_seed_stream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts_test.NutsTest.testSampleEndtoEnd.run_chain_and_get_diagnostic": {
  "lineno": 421,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.function",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.mcmc.DualAveragingStepSizeAdaptation",
   "tensorflow_probability.mcmc.NoUTurnSampler",
   "tensorflow_probability.mcmc.TransformedTransitionKernel",
   "tensorflow_probability.mcmc.potential_scale_reduction",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.bijectors.Exp",
   "tensorflow_probability.python.bijectors.Identity"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts_test.NutsTest.testSampleEndtoEnd.run_chain_and_get_diagnostic.trace_fn": {
  "lineno": 433,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts_test.NutsTest.testSigmoidBetaTargetConservation": {
  "lineno": 156,
  "symbols_in_volume": [
   "tensorflow_probability.python.bijectors.Identity",
   "tensorflow_probability.python.bijectors.Sigmoid",
   "tensorflow_probability.python.distributions.Beta"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts_test.NutsTest.testUnivariateNormalTargetConservation": {
  "lineno": 145,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts_test.assert_mvn_target_conservation": {
  "lineno": 112,
  "symbols_in_volume": [
   "tensorflow.compat.v2.eye",
   "tensorflow.compat.v2.linalg.norm",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.MultivariateNormalFullCovariance",
   "tensorflow_probability.python.distributions.internal.statistical_testing.assert_multivariate_true_cdf_equal_on_projections_two_sample",
   "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_cdfs_detectable_by_dkwm_two_sample",
   "tensorflow_probability.python.internal.assert_util.assert_equal",
   "tensorflow_probability.python.internal.assert_util.assert_greater_equal",
   "tensorflow_probability.python.internal.assert_util.assert_less"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts_test.assert_univariate_target_conservation": {
  "lineno": 70,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_cdf_equal_by_dkwm",
   "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_cdfs_detectable_by_dkwm",
   "tensorflow_probability.python.internal.assert_util.assert_greater_equal",
   "tensorflow_probability.python.internal.assert_util.assert_less",
   "tensorflow_probability.python.internal.test_util.test_seed_stream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts_test.assert_univariate_target_conservation.run_chain": {
  "lineno": 80,
  "symbols_in_volume": [
   "tensorflow.compat.v2.function",
   "tensorflow_probability.mcmc.NoUTurnSampler",
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts_test.run_nuts_chain": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow.compat.v2.function",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.mcmc.NoUTurnSampler",
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.nuts_test.run_nuts_chain.target_log_prob_fn": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.RandomWalkMetropolis": {
  "lineno": 174,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.kernel.TransitionKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.RandomWalkMetropolis.__init__": {
  "lineno": 351,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastings"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.RandomWalkMetropolis.bootstrap_results": {
  "lineno": 443,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.RandomWalkMetropolis.is_calibrated": {
  "lineno": 410,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.RandomWalkMetropolis.name": {
  "lineno": 406,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.RandomWalkMetropolis.new_state_fn": {
  "lineno": 398,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.RandomWalkMetropolis.one_step": {
  "lineno": 419,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.RandomWalkMetropolis.parameters": {
  "lineno": 414,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.RandomWalkMetropolis.seed": {
  "lineno": 402,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.RandomWalkMetropolis.target_log_prob_fn": {
  "lineno": 394,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalk": {
  "lineno": 448,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.kernel.TransitionKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalk.__init__": {
  "lineno": 460,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.set_doc",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalk.bootstrap_results": {
  "lineno": 538,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.mcmc.internal.util.is_list_like",
   "tensorflow_probability.python.mcmc.internal.util.set_doc"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalk.is_calibrated": {
  "lineno": 499,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalk.name": {
  "lineno": 490,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalk.new_state_fn": {
  "lineno": 482,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalk.one_step": {
  "lineno": 503,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.mcmc.internal.util.is_list_like",
   "tensorflow_probability.python.mcmc.internal.util.make_name",
   "tensorflow_probability.python.mcmc.internal.util.set_doc"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalk.one_step.maybe_flatten": {
  "lineno": 525,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.is_list_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalk.parameters": {
  "lineno": 494,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalk.seed": {
  "lineno": 486,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalk.target_log_prob_fn": {
  "lineno": 478,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis._maybe_call_fn": {
  "lineno": 551,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.is_list_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.random_walk_normal_fn": {
  "lineno": 49,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.random_walk_normal_fn._fn": {
  "lineno": 74,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.mcmc.internal.util.is_list_like",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.random_walk_uniform_fn": {
  "lineno": 113,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.random_walk_uniform_fn._fn": {
  "lineno": 136,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.mcmc.internal.util.is_list_like",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test.RWMTest": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test.RWMTest.testRWM1DCauchy": {
  "lineno": 94,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.math.reduce_mean",
   "tensorflow.compat.v2.math.sqrt",
   "tensorflow.compat.v2.math.squared_difference",
   "tensorflow_probability.mcmc.RandomWalkMetropolis",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test.RWMTest.testRWM1DCauchy.cauchy_new_state_fn": {
  "lineno": 102,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Cauchy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test.RWMTest.testRWM1DCauchy.cauchy_new_state_fn._fn": {
  "lineno": 104,
  "symbols_in_volume": [
   "tensorflow_probability.util.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test.RWMTest.testRWM1DNormal": {
  "lineno": 69,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.math.reduce_mean",
   "tensorflow.compat.v2.math.sqrt",
   "tensorflow.compat.v2.math.squared_difference",
   "tensorflow_probability.mcmc.RandomWalkMetropolis",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test.RWMTest.testRWM1DUniform": {
  "lineno": 43,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.math.reduce_mean",
   "tensorflow.compat.v2.math.sqrt",
   "tensorflow.compat.v2.math.squared_difference",
   "tensorflow_probability.mcmc.RandomWalkMetropolis",
   "tensorflow_probability.mcmc.random_walk_uniform_fn",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test.RWMTest.testRWM2DNormal": {
  "lineno": 134,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "numpy.squeeze",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.linalg.matmul",
   "tensorflow.compat.v2.math.reduce_mean",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.mcmc.RandomWalkMetropolis",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test.RWMTest.testRWM2DNormal.target_log_prob": {
  "lineno": 147,
  "symbols_in_volume": [
   "tensorflow.compat.v2.squeeze",
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test._reduce_variance": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.reduce_mean",
   "tensorflow.compat.v2.math.squared_difference"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC": {
  "lineno": 113,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.kernel.TransitionKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC.__init__": {
  "lineno": 231,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC._get_exchanged_states": {
  "lineno": 420,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.TensorArray",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.stack",
   "tensorflow.compat.v2.while_loop"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC._get_exchanged_states._swap": {
  "lineno": 461,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow_probability.python.mcmc.internal.util.choose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC._get_exchanged_states.body": {
  "lineno": 471,
  "symbols_in_volume": [
   "tensorflow.compat.v2.unstack",
   "tensorflow_probability.python.mcmc.internal.util.safe_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC._get_exchanged_states.cond": {
  "lineno": 468,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC._insert_old_states_where_no_exchange_was_proposed": {
  "lineno": 501,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.while_loop"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC._insert_old_states_where_no_exchange_was_proposed.body": {
  "lineno": 509,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC._insert_old_states_where_no_exchange_was_proposed.cond": {
  "lineno": 506,
  "symbols_in_volume": [
   "tensorflow.compat.v2.size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC.bootstrap_results": {
  "lineno": 520,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.mcmc.internal.util.is_list_like",
   "tensorflow_probability.python.mcmc.internal.util.make_name"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC.exchange_proposed_fn": {
  "lineno": 296,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC.inverse_temperatures": {
  "lineno": 288,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC.is_calibrated": {
  "lineno": 313,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC.name": {
  "lineno": 304,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC.num_replica": {
  "lineno": 292,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC.one_step": {
  "lineno": 317,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v1.setdiff1d",
   "tensorflow.compat.v2.TensorArray",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.mcmc.internal.util.is_list_like",
   "tensorflow_probability.python.mcmc.internal.util.make_name"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC.parameters": {
  "lineno": 308,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC.seed": {
  "lineno": 300,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC.target_log_prob_fn": {
  "lineno": 284,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc._get_field": {
  "lineno": 570,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc._replica_log_prob_fn": {
  "lineno": 560,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc._replica_log_prob_fn._replica_log_prob_fn_": {
  "lineno": 563,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.default_exchange_proposed_fn": {
  "lineno": 50,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.default_exchange_proposed_fn.default_exchange_proposed_fn_": {
  "lineno": 80,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cond",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.default_exchange_proposed_fn.default_exchange_proposed_fn_._exchange": {
  "lineno": 96,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.default_exchange_proposed_fn.default_exchange_proposed_fn_._null_exchange": {
  "lineno": 102,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.DefaultExchangeProposedFnTest": {
  "lineno": 41,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.DefaultExchangeProposedFnTest.generate_exchanges": {
  "lineno": 47,
  "symbols_in_volume": [
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.scan"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.DefaultExchangeProposedFnTest.generate_exchanges._scan_fn": {
  "lineno": 49,
  "symbols_in_volume": [
   "tensorflow.compat.v1.assert_equal",
   "tensorflow.compat.v1.assert_greater_equal",
   "tensorflow.compat.v1.assert_less",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size",
   "tensorflow.compat.v2.unique"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.DefaultExchangeProposedFnTest.setUp": {
  "lineno": 44,
  "symbols_in_volume": [
   "tensorflow.compat.v1.set_random_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.DefaultExchangeProposedFnTest.testProbExchange0p0": {
  "lineno": 142,
  "symbols_in_volume": [
   "numpy.mean",
   "tensorflow_probability.mcmc.default_exchange_proposed_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.DefaultExchangeProposedFnTest.testProbExchange0p5NumReplica2": {
  "lineno": 64,
  "symbols_in_volume": [
   "numpy.mean",
   "tensorflow_probability.mcmc.default_exchange_proposed_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.DefaultExchangeProposedFnTest.testProbExchange0p5NumReplica3": {
  "lineno": 97,
  "symbols_in_volume": [
   "numpy.mean",
   "tensorflow_probability.mcmc.default_exchange_proposed_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.DefaultExchangeProposedFnTest.testProbExchange0p5NumReplica4": {
  "lineno": 79,
  "symbols_in_volume": [
   "numpy.mean",
   "tensorflow_probability.mcmc.default_exchange_proposed_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.DefaultExchangeProposedFnTest.testProbExchange0p5NumReplica5": {
  "lineno": 112,
  "symbols_in_volume": [
   "numpy.mean",
   "tensorflow_probability.mcmc.default_exchange_proposed_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.DefaultExchangeProposedFnTest.testProbExchange1p0": {
  "lineno": 127,
  "symbols_in_volume": [
   "numpy.mean",
   "tensorflow_probability.mcmc.default_exchange_proposed_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest": {
  "lineno": 158,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest._getNormalREMCSamples": {
  "lineno": 164,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.function",
   "tensorflow_probability.mcmc.ReplicaExchangeMC",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest._getNormalREMCSamples.make_kernel_fn": {
  "lineno": 173,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.setUp": {
  "lineno": 161,
  "symbols_in_volume": [
   "tensorflow.compat.v1.set_random_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testInverseTemperaturesValueError": {
  "lineno": 469,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.function",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.linspace",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow_probability.mcmc.ReplicaExchangeMC",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testInverseTemperaturesValueError.make_kernel_fn": {
  "lineno": 477,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testMultipleCorrelatedStatesWithFourBatchDims": {
  "lineno": 418,
  "symbols_in_volume": [
   "numpy.cov",
   "numpy.float32",
   "tensorflow.compat.v2.function",
   "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.mcmc.ReplicaExchangeMC",
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testMultipleCorrelatedStatesWithFourBatchDims.make_kernel_fn": {
  "lineno": 435,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testMultipleCorrelatedStatesWithFourBatchDims.target_log_prob": {
  "lineno": 428,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testMultipleCorrelatedStatesWithNoBatchDims": {
  "lineno": 317,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.function",
   "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.mcmc.ReplicaExchangeMC",
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testMultipleCorrelatedStatesWithNoBatchDims.make_kernel_fn": {
  "lineno": 334,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testMultipleCorrelatedStatesWithNoBatchDims.target_log_prob": {
  "lineno": 327,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testNormalEvenNumReplicas": {
  "lineno": 206,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testNormalEvenNumReplicasLowTolerance": {
  "lineno": 222,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testNormalHighTemperatureOnlyHasLargerStddev": {
  "lineno": 230,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testNormalLowTemperatureOnlyHasSmallerStddev": {
  "lineno": 238,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testNormalOddNumReplicas": {
  "lineno": 198,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testNormalOddNumReplicasLowTolerance": {
  "lineno": 214,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testNormalWithTwoBatchDimsAndThreeReplicas": {
  "lineno": 367,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.cov",
   "numpy.float32",
   "tensorflow.compat.v2.function",
   "tensorflow_probability.mcmc.ReplicaExchangeMC",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testNormalWithTwoBatchDimsAndThreeReplicas.make_kernel_fn": {
  "lineno": 382,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testRWM2DMixNormal": {
  "lineno": 246,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "numpy.sqrt",
   "tensorflow.compat.v1.logging.vlog",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.function",
   "tensorflow.compat.v2.linspace",
   "tensorflow.compat.v2.math.squared_difference",
   "tensorflow.compat.v2.minimum",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.mcmc.ReplicaExchangeMC",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.MixtureSameFamily",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testRWM2DMixNormal._trace_log_accept_ratio": {
  "lineno": 283,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testRWM2DMixNormal.make_kernel_fn": {
  "lineno": 265,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test._set_seed": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample": {
  "lineno": null,
  "symbols_in_volume": [
   "warnings.filterwarnings"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.sample.CheckpointableStatesAndTrace": {
  "lineno": 62,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.sample.StatesAndTrace": {
  "lineno": 46,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.sample.sample_chain": {
  "lineno": 82,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.nest.map_structure",
   "tensorflow.compat.v2.one_hot",
   "tensorflow_probability.python.mcmc.internal.util.trace_scan",
   "warnings.warn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample.sample_chain._trace_scan_fn": {
  "lineno": 341,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.smart_for_loop"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance.sample_annealed_importance_chain": {
  "lineno": 44,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.while_loop",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.mcmc.internal.util.is_list_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance.sample_annealed_importance_chain._bootstrap_results": {
  "lineno": 234,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.fill",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance.sample_annealed_importance_chain._loop_body": {
  "lineno": 216,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow_probability.python.mcmc.internal.util.is_list_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance.sample_annealed_importance_chain._make_convex_combined_log_prob_fn": {
  "lineno": 206,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance.sample_annealed_importance_chain._make_convex_combined_log_prob_fn._fn": {
  "lineno": 207,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.identity"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest": {
  "lineno": 47,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest._ais_gets_correct_log_normalizer": {
  "lineno": 73,
  "symbols_in_volume": [
   "collections.Counter",
   "tensorflow.compat.v1.logging.vlog",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.lgamma",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.reduce_logsumexp",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size",
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.mcmc.sample_annealed_importance_chain",
   "tensorflow_probability.util.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest._ais_gets_correct_log_normalizer.make_kernel": {
  "lineno": 90,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest._ais_gets_correct_log_normalizer.proposal_log_prob": {
  "lineno": 76,
  "symbols_in_volume": [
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest._ais_gets_correct_log_normalizer.target_log_prob": {
  "lineno": 83,
  "symbols_in_volume": [
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest._ais_gets_correct_log_normalizer_wrapper": {
  "lineno": 155,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.normal",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest._log_gamma_log_prob": {
  "lineno": 57,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest.setUp": {
  "lineno": 50,
  "symbols_in_volume": [
   "numpy.random.seed",
   "tensorflow.compat.v1.random.set_random_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest.testAIS1": {
  "lineno": 162,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest.testAIS2": {
  "lineno": 165,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest.testAIS3": {
  "lineno": 168,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest.testSampleAIChainSeedReproducibleWorksCorrectly": {
  "lineno": 171,
  "symbols_in_volume": [
   "numpy.random.rand",
   "tensorflow_probability.mcmc.sample_annealed_importance_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest.testSampleAIChainSeedReproducibleWorksCorrectly.make_kernel": {
  "lineno": 184,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest.testSampleAIChainSeedReproducibleWorksCorrectly.proposal_log_prob": {
  "lineno": 175,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.pi",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest.testSampleAIChainSeedReproducibleWorksCorrectly.target_log_prob": {
  "lineno": 180,
  "symbols_in_volume": [
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test._compute_sample_variance": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.squared_difference",
   "tensorflow.compat.v2.reduce_mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence._base_expansion_size": {
  "lineno": 346,
  "symbols_in_volume": [
   "tensorflow.compat.v2.floor",
   "tensorflow.compat.v2.math.log"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence._get_indices": {
  "lineno": 305,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence._get_permutations": {
  "lineno": 269,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.unstack",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence._get_permutations.generate_one": {
  "lineno": 294,
  "symbols_in_volume": [
   "tensorflow.compat.v2.map_fn",
   "tensorflow.compat.v2.random.shuffle",
   "tensorflow.compat.v2.range"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence._primes_less_than": {
  "lineno": 369,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.bool",
   "numpy.nonzero",
   "numpy.ones",
   "numpy.r_"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence._randomize": {
  "lineno": 252,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.cumsum",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence.sample_halton_sequence": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.math.floordiv",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reduce_max",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.tile",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.HaltonSequenceTest": {
  "lineno": 43,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.HaltonSequenceTest.test_docstring_example": {
  "lineno": 127,
  "symbols_in_volume": [
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow_probability.mcmc.sample_halton_sequence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.HaltonSequenceTest.test_dtypes_works_correctly": {
  "lineno": 82,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.float64",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow_probability.mcmc.sample_halton_sequence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.HaltonSequenceTest.test_dynamic_num_samples": {
  "lineno": 57,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.mcmc.sample_halton_sequence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.HaltonSequenceTest.test_known_values_small_bases": {
  "lineno": 46,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow_probability.mcmc.sample_halton_sequence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.HaltonSequenceTest.test_normal_integral_mean_and_var_correctly_estimated": {
  "lineno": 92,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.square",
   "tensorflow_probability.mcmc.sample_halton_sequence",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.internal.monte_carlo.expectation_importance_sampler"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.HaltonSequenceTest.test_partial_sum_func_qmc": {
  "lineno": 177,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.log",
   "numpy.mean",
   "tensorflow_probability.mcmc.sample_halton_sequence",
   "tensorflow_probability.util.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.HaltonSequenceTest.test_partial_sum_func_qmc.func_estimate": {
  "lineno": 206,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.squared_difference",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.HaltonSequenceTest.test_randomized_qmc_basic": {
  "lineno": 159,
  "symbols_in_volume": [
   "numpy.mean",
   "numpy.std",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.mcmc.sample_halton_sequence",
   "tensorflow_probability.util.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.HaltonSequenceTest.test_seed_implies_deterministic_results": {
  "lineno": 227,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.sample_halton_sequence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.HaltonSequenceTest.test_sequence_indices": {
  "lineno": 70,
  "symbols_in_volume": [
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.range",
   "tensorflow_probability.mcmc.sample_halton_sequence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test._set_seed": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.sample_test.SampleChainTest": {
  "lineno": 53,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.sample_test.SampleChainTest.setUp": {
  "lineno": 55,
  "symbols_in_volume": [
   "numpy.random.seed",
   "tensorflow.compat.v1.random.set_random_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.SampleChainTest.testBasicOperation": {
  "lineno": 107,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.SampleChainTest.testBurnin": {
  "lineno": 121,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.SampleChainTest.testChainWorksCorrelatedMultivariate": {
  "lineno": 62,
  "symbols_in_volume": [
   "collections.Counter",
   "numpy.float32",
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.SampleChainTest.testChainWorksCorrelatedMultivariate.target_log_prob": {
  "lineno": 69,
  "symbols_in_volume": [
   "numpy.linalg.cholesky",
   "tensorflow.compat.v2.linalg.triangular_solve",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.squeeze",
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.SampleChainTest.testCheckpointing": {
  "lineno": 194,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.SampleChainTest.testCustomTrace": {
  "lineno": 175,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.SampleChainTest.testDefaultTraceNamedTuple": {
  "lineno": 152,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.SampleChainTest.testNoTraceFn": {
  "lineno": 165,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.SampleChainTest.testNoWarningsExplicit": {
  "lineno": 221,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.sample_chain",
   "warnings.catch_warnings"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.SampleChainTest.testThinning": {
  "lineno": 135,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.SampleChainTest.testWarningsDefault": {
  "lineno": 213,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.sample_chain",
   "warnings.catch_warnings"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.TestTransitionKernel": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.mcmc.TransitionKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.sample_test.TestTransitionKernel.bootstrap_results": {
  "lineno": 46,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.TestTransitionKernel.is_calibrated": {
  "lineno": 49,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.TestTransitionKernel.one_step": {
  "lineno": 41,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptation": {
  "lineno": 93,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.kernel.TransitionKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptation.__init__": {
  "lineno": 199,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.mcmc.internal.util.enable_store_parameters_in_results",
   "tensorflow_probability.python.mcmc.internal.util.make_name"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptation.bootstrap_results": {
  "lineno": 405,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.mcmc.internal.util.make_name"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptation.inner_kernel": {
  "lineno": 287,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptation.is_calibrated": {
  "lineno": 421,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptation.log_accept_prob_getter_fn": {
  "lineno": 306,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptation.name": {
  "lineno": 291,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptation.num_adaptation_steps": {
  "lineno": 295,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptation.one_step": {
  "lineno": 314,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.minimum",
   "tensorflow.compat.v2.nest.flatten",
   "tensorflow.compat.v2.nest.pack_sequence_as",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank",
   "tensorflow_probability.python.mcmc.internal.util.choose",
   "tensorflow_probability.python.mcmc.internal.util.make_name"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptation.parameters": {
  "lineno": 309,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptation.step_size_getter_fn": {
  "lineno": 303,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptation.step_size_setter_fn": {
  "lineno": 299,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptationResults": {
  "lineno": 71,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation._get_differing_dims": {
  "lineno": 58,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.where",
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.not_equal",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation._hmc_like_log_accept_prob_getter_fn": {
  "lineno": 44,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.minimum",
   "tensorflow_probability.python.mcmc.internal.util.make_innermost_getter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation._hmc_like_step_size_getter_fn": {
  "lineno": 39,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.make_innermost_getter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation._hmc_like_step_size_setter_fn": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.make_innermost_setter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation._maybe_validate_target_accept_prob": {
  "lineno": 425,
  "symbols_in_volume": [
   "tensorflow.compat.v1.assert_less",
   "tensorflow.compat.v1.assert_positive",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation._reduce_logmeanexp": {
  "lineno": 50,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.reduce_mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeMHKernel": {
  "lineno": 52,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.TransitionKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeMHKernel.__init__": {
  "lineno": 54,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeMHKernel.bootstrap_results": {
  "lineno": 70,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeMHKernel.is_calibrated": {
  "lineno": 78,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeMHKernel.one_step": {
  "lineno": 64,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeSteppedKernel": {
  "lineno": 86,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.TransitionKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeSteppedKernel.__init__": {
  "lineno": 88,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeSteppedKernel.bootstrap_results": {
  "lineno": 96,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.nest.map_structure"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeSteppedKernel.is_calibrated": {
  "lineno": 101,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeSteppedKernel.one_step": {
  "lineno": 93,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeWrapperKernel": {
  "lineno": 109,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.TransitionKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeWrapperKernel.__init__": {
  "lineno": 111,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeWrapperKernel.bootstrap_results": {
  "lineno": 124,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeWrapperKernel.inner_kernel": {
  "lineno": 114,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeWrapperKernel.is_calibrated": {
  "lineno": 128,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeWrapperKernel.one_step": {
  "lineno": 118,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationDynamicBroadcastingTest": {
  "lineno": 451,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationStaticBroadcastingTest": {
  "lineno": 382,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationStaticBroadcastingTest.testBroadcasting": {
  "lineno": 387,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.array",
   "numpy.float64",
   "numpy.log",
   "numpy.ones",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.mcmc.SimpleStepSizeAdaptation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationTest": {
  "lineno": 132,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationTest.testAdaptationSteps": {
  "lineno": 194,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.SimpleStepSizeAdaptation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationTest.testAdaptiveAdaptation": {
  "lineno": 218,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.stack",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.mcmc.SimpleStepSizeAdaptation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationTest.testChainLogProbChainTarget": {
  "lineno": 308,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.minimum",
   "tensorflow.compat.v2.stack",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.mcmc.SimpleStepSizeAdaptation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationTest.testChainLogProbScalarTarget": {
  "lineno": 286,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.minimum",
   "tensorflow.compat.v2.stack",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.mcmc.SimpleStepSizeAdaptation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationTest.testExample": {
  "lineno": 353,
  "symbols_in_volume": [
   "tensorflow.compat.v1.random.set_random_seed",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.minimum",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
   "tensorflow_probability.mcmc.SimpleStepSizeAdaptation",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationTest.testListStep": {
  "lineno": 243,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.stack",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.mcmc.SimpleStepSizeAdaptation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationTest.testStepSizeDecreases": {
  "lineno": 170,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.stack",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.mcmc.SimpleStepSizeAdaptation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationTest.testStepSizeIncreases": {
  "lineno": 147,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.stack",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.mcmc.SimpleStepSizeAdaptation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationTest.testTargetAcceptanceProbChecks": {
  "lineno": 331,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "tensorflow.compat.v2.errors.InvalidArgumentError"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationTest.testTargetAcceptanceProbChecks._impl": {
  "lineno": 337,
  "symbols_in_volume": [
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.mcmc.SimpleStepSizeAdaptation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationTest.testTurnOnStoreParametersInKernelResults": {
  "lineno": 135,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.SimpleStepSizeAdaptation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationTest.testWrapped": {
  "lineno": 265,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.mcmc.SimpleStepSizeAdaptation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test._set_seed": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSampler": {
  "lineno": 50,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.kernel.TransitionKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSampler.__init__": {
  "lineno": 194,
  "symbols_in_volume": [
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSampler.bootstrap_results": {
  "lineno": 337,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.zeros",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.mcmc.internal.util.is_list_like",
   "tensorflow_probability.python.mcmc.internal.util.make_name"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSampler.is_calibrated": {
  "lineno": 254,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSampler.max_doublings": {
  "lineno": 237,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSampler.name": {
  "lineno": 245,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSampler.one_step": {
  "lineno": 258,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_rank",
   "tensorflow_probability.python.mcmc.internal.util.make_name"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSampler.one_step.maybe_flatten": {
  "lineno": 323,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.is_list_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSampler.parameters": {
  "lineno": 249,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSampler.seed": {
  "lineno": 241,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSampler.step_size": {
  "lineno": 233,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSampler.target_log_prob_fn": {
  "lineno": 229,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel._choose_random_direction": {
  "lineno": 355,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.python.util.seed_stream.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel._maybe_call_fn": {
  "lineno": 539,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.is_list_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel._prepare_args": {
  "lineno": 582,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.mcmc.internal.util.is_list_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel._prepare_args.maybe_flatten": {
  "lineno": 608,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.is_list_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel._right_pad": {
  "lineno": 554,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel._sample_next": {
  "lineno": 380,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.add_n",
   "tensorflow.compat.v2.math.rsqrt",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.mcmc.internal.slice_sampler_utils.slice_sampler_one_dim"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel._sample_next._get_rank": {
  "lineno": 474,
  "symbols_in_volume": [
   "tensorflow.compat.v2.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel._sample_next._step_along_direction": {
  "lineno": 479,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel._sample_next.projected_target_log_prob_fn": {
  "lineno": 503,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test.SliceSamplerTest": {
  "lineno": 31,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test.SliceSamplerTest.testFourDimNormal": {
  "lineno": 212,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "numpy.zeros_like",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.mcmc.SliceSampler",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test.SliceSamplerTest.testOneDimNormal": {
  "lineno": 34,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v2.math.squared_difference",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.mcmc.SliceSampler",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test.SliceSamplerTest.testTwoDimNormal": {
  "lineno": 61,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "numpy.squeeze",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.mcmc.SliceSampler",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test.SliceSamplerTest.testTwoDimNormal.target_log_prob": {
  "lineno": 74,
  "symbols_in_volume": [
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test.SliceSamplerTest.testTwoDimNormalDynamicRank": {
  "lineno": 161,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "numpy.squeeze",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.mcmc.SliceSampler",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test.SliceSamplerTest.testTwoDimNormalDynamicRank.target_log_prob": {
  "lineno": 175,
  "symbols_in_volume": [
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test.SliceSamplerTest.testTwoDimNormalDynamicShape": {
  "lineno": 109,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones",
   "numpy.squeeze",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.mcmc.SliceSampler",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test.SliceSamplerTest.testTwoDimNormalDynamicShape.target_log_prob": {
  "lineno": 124,
  "symbols_in_volume": [
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.TextMessagesHmcBenchmarkTestHarness": {
  "lineno": 157,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.TextMessagesHmcBenchmarkTestHarness.__init__": {
  "lineno": 160,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.TextMessagesHmcBenchmarkTestHarness.benchmark_text_messages_hmc_num_leapfrog_1": {
  "lineno": 163,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.TextMessagesHmcBenchmarkTestHarness.benchmark_text_messages_hmc_num_leapfrog_10": {
  "lineno": 178,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.TextMessagesHmcBenchmarkTestHarness.benchmark_text_messages_hmc_num_leapfrog_2": {
  "lineno": 168,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.TextMessagesHmcBenchmarkTestHarness.benchmark_text_messages_hmc_num_leapfrog_20": {
  "lineno": 183,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.TextMessagesHmcBenchmarkTestHarness.benchmark_text_messages_hmc_num_leapfrog_3": {
  "lineno": 173,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.benchmark_text_messages_hmc": {
  "lineno": 65,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.sum",
   "tensorflow.compat.v1.Session",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v1.reset_default_graph",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.function",
   "tensorflow_probability.mcmc.sample_chain",
   "time.time"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.benchmark_text_messages_hmc.computation": {
  "lineno": 102,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.bijectors.Exp",
   "tensorflow_probability.bijectors.Sigmoid",
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
   "tensorflow_probability.mcmc.TransformedTransitionKernel",
   "tensorflow_probability.mcmc.make_simple_step_size_update_policy"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.benchmark_text_messages_hmc.unnormalized_log_posterior": {
  "lineno": 88,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.mvn": {
  "lineno": 38,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.text_messages_joint_log_prob": {
  "lineno": 45,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc_eager_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v1.enable_eager_execution",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc_eager_test.EagerTextMessagesHmcBenchmark": {
  "lineno": 23,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.Benchmark",
   "tensorflow_probability.python.mcmc.text_messages_hmc.TextMessagesHmcBenchmarkTestHarness"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc_graph_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc_graph_test.GraphTextMessagesHmcBenchmark": {
  "lineno": 19,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.Benchmark",
   "tensorflow_probability.python.mcmc.text_messages_hmc.TextMessagesHmcBenchmarkTestHarness"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.TransformedTransitionKernel": {
  "lineno": 78,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.kernel.TransitionKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.TransformedTransitionKernel.__init__": {
  "lineno": 162,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.silence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.TransformedTransitionKernel.__init__.new_target_log_prob": {
  "lineno": 190,
  "symbols_in_volume": [
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.TransformedTransitionKernel.bijector": {
  "lineno": 214,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.TransformedTransitionKernel.bootstrap_results": {
  "lineno": 276,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.mcmc.internal.util.is_list_like",
   "tensorflow_probability.python.mcmc.internal.util.make_name"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.TransformedTransitionKernel.inner_kernel": {
  "lineno": 210,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.TransformedTransitionKernel.is_calibrated": {
  "lineno": 227,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.TransformedTransitionKernel.name": {
  "lineno": 218,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.TransformedTransitionKernel.one_step": {
  "lineno": 231,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow_probability.python.mcmc.internal.util.is_list_like",
   "tensorflow_probability.python.mcmc.internal.util.make_name"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.TransformedTransitionKernel.parameters": {
  "lineno": 222,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.forward_log_det_jacobian_fn": {
  "lineno": 43,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.is_list_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.forward_log_det_jacobian_fn.fn": {
  "lineno": 48,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.forward_transform_fn": {
  "lineno": 57,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.is_list_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.forward_transform_fn.fn": {
  "lineno": 62,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.inverse_transform_fn": {
  "lineno": 68,
  "symbols_in_volume": [
   "tensorflow_probability.python.mcmc.internal.util.is_list_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.inverse_transform_fn.fn": {
  "lineno": 72,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.FakeInnerKernel": {
  "lineno": 47,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.TransitionKernel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.FakeInnerKernel.__init__": {
  "lineno": 50,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.FakeInnerKernel.bootstrap_results": {
  "lineno": 64,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.FakeInnerKernel.is_calibrated": {
  "lineno": 57,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.FakeInnerKernel.one_step": {
  "lineno": 61,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.FakeInnerKernel.parameters": {
  "lineno": 53,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest": {
  "lineno": 69,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest.setUp": {
  "lineno": 72,
  "symbols_in_volume": [
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest.test_bootstrap_correctly_untransforms": {
  "lineno": 273,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow_probability.mcmc.TransformedTransitionKernel",
   "tensorflow_probability.python.bijectors.Exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest.test_bootstrap_correctly_untransforms.fake_target_log_prob": {
  "lineno": 274,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest.test_bootstrap_requires_xor_args": {
  "lineno": 258,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow_probability.mcmc.TransformedTransitionKernel",
   "tensorflow_probability.python.bijectors.Exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest.test_bootstrap_requires_xor_args.fake_target_log_prob": {
  "lineno": 259,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest.test_copy_works": {
  "lineno": 288,
  "symbols_in_volume": [
   "tensorflow_probability.mcmc.TransformedTransitionKernel",
   "tensorflow_probability.python.bijectors.AffineScalar"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest.test_copy_works.fake_target_log_prob": {
  "lineno": 289,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest.test_end_to_end_works_correctly": {
  "lineno": 206,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.function",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
   "tensorflow_probability.mcmc.TransformedTransitionKernel",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.bijectors.AffineScalar"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest.test_end_to_end_works_correctly.target_log_prob": {
  "lineno": 211,
  "symbols_in_volume": [
   "numpy.linalg.cholesky",
   "tensorflow.compat.v2.linalg.triangular_solve",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.squeeze",
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest.test_support_works_correctly_with_HMC": {
  "lineno": 76,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.function",
   "tensorflow.compat.v2.math.squared_difference",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
   "tensorflow_probability.mcmc.TransformedTransitionKernel",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.bijectors.Sigmoid",
   "tensorflow_probability.python.distributions.Beta"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest.test_support_works_correctly_with_MALA": {
  "lineno": 122,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.function",
   "tensorflow.compat.v2.math.squared_difference",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.mcmc.MetropolisAdjustedLangevinAlgorithm",
   "tensorflow_probability.mcmc.TransformedTransitionKernel",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.bijectors.Sigmoid",
   "tensorflow_probability.python.distributions.Beta"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest.test_support_works_correctly_with_RWM": {
  "lineno": 164,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.function",
   "tensorflow.compat.v2.math.squared_difference",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.mcmc.RandomWalkMetropolis",
   "tensorflow_probability.mcmc.TransformedTransitionKernel",
   "tensorflow_probability.mcmc.random_walk_normal_fn",
   "tensorflow_probability.mcmc.sample_chain",
   "tensorflow_probability.python.bijectors.Sigmoid",
   "tensorflow_probability.python.distributions.Beta"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test._maybe_seed": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.monte_carlo": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.python.util.all_util.remove_undocumented"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.monte_carlo.expectation": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.monte_carlo.expectation._get_samples": {
  "lineno": 207,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.monte_carlo.expectation._sample_max": {
  "lineno": 202,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_max"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.monte_carlo.expectation._sample_mean": {
  "lineno": 197,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.monte_carlo.expectation.expectation": {
  "lineno": 30,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.nest.map_structure",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.stop_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test.ExpectationTest": {
  "lineno": 67,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test.ExpectationTest.test_docstring_example_bernoulli": {
  "lineno": 162,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.monte_carlo.expectation",
   "tensorflow_probability.python.distributions.Bernoulli",
   "tensorflow_probability.python.distributions.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.distributions.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test.ExpectationTest.test_docstring_example_normal": {
  "lineno": 117,
  "symbols_in_volume": [
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.monte_carlo.expectation",
   "tensorflow_probability.python.distributions.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.kl_divergence"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test.ExpectationTest.test_works_correctly": {
  "lineno": 69,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.isfinite",
   "numpy.ones_like",
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.monte_carlo.expectation",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test.ExpectationTest.test_works_with_structured_samples": {
  "lineno": 220,
  "symbols_in_volume": [
   "tensorflow_probability.monte_carlo.expectation",
   "tensorflow_probability.python.distributions.JointDistributionNamed",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test.GetSamplesTest": {
  "lineno": 31,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test.GetSamplesTest.test_raises_if_both_z_and_n_are_none": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.monte_carlo.expectation._get_samples"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test.GetSamplesTest.test_raises_if_both_z_and_n_are_not_none": {
  "lineno": 42,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.monte_carlo.expectation._get_samples"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test.GetSamplesTest.test_returns_n_samples_if_n_provided": {
  "lineno": 50,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.monte_carlo.expectation._get_samples"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test.GetSamplesTest.test_returns_z_if_z_provided": {
  "lineno": 58,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.monte_carlo.expectation._get_samples"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.python.util.all_util.remove_undocumented"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.bfgs": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.bfgs._batch_transpose": {
  "lineno": 496,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.transpose",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs._bfgs_inv_hessian_update": {
  "lineno": 357,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs._bfgs_inv_hessian_update._expand_scalar": {
  "lineno": 423,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs._get_search_direction": {
  "lineno": 324,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs._inv_hessian_control_inputs": {
  "lineno": 291,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Assert",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.math.is_finite",
   "tensorflow.compat.v2.reduce_all",
   "tensorflow_probability.python.optimizer.bfgs_utils.norm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs._mul_right": {
  "lineno": 438,
  "symbols_in_volume": [
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.squeeze"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs._tensor_product": {
  "lineno": 478,
  "symbols_in_volume": [
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.matmul"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs._update_inv_hessian": {
  "lineno": 329,
  "symbols_in_volume": [
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.reduce_any",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.prefer_static.cond"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs._update_inv_hessian._do_update_inv_hessian": {
  "lineno": 341,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow_probability.python.optimizer.bfgs_utils.update_fields"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs.minimize": {
  "lineno": 73,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.eye",
   "tensorflow.compat.v2.while_loop",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_shape",
   "tensorflow_probability.python.optimizer.bfgs_utils.converged_all",
   "tensorflow_probability.python.optimizer.bfgs_utils.get_initial_state_args"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs.minimize._body": {
  "lineno": 244,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.optimizer.bfgs_utils.line_search_step",
   "tensorflow_probability.python.optimizer.bfgs_utils.update_fields"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs.minimize._cond": {
  "lineno": 239,
  "symbols_in_volume": [
   "tensorflow.compat.v2.logical_not"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest": {
  "lineno": 45,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_asymmetric_inverse_hessian_spec": {
  "lineno": 105,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.errors.InvalidArgumentError",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.optimizer.bfgs_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_asymmetric_inverse_hessian_spec.quadratic": {
  "lineno": 110,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_bad_inverse_hessian_spec": {
  "lineno": 88,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.errors.InvalidArgumentError",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.optimizer.bfgs_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_bad_inverse_hessian_spec.quadratic": {
  "lineno": 93,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_data_fitting": {
  "lineno": 323,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.random.choice",
   "numpy.random.geometric",
   "numpy.random.seed",
   "numpy.sum",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.optimizer.bfgs_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_data_fitting.neg_log_likelihood": {
  "lineno": 335,
  "symbols_in_volume": [
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.reduce_logsumexp",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.squeeze",
   "tensorflow.compat.v2.stack",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_determinism": {
  "lineno": 360,
  "symbols_in_volume": [
   "numpy.random.rand"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_determinism.get_results": {
  "lineno": 389,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.bfgs_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_determinism.rastrigin": {
  "lineno": 364,
  "symbols_in_volume": [
   "numpy.pi",
   "tensorflow.compat.v2.cos",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_dynamic_shapes": {
  "lineno": 407,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v1.placeholder",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.optimizer.bfgs_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_dynamic_shapes.quadratic": {
  "lineno": 413,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_himmelblau": {
  "lineno": 227,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.bfgs_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_himmelblau.himmelblau": {
  "lineno": 240,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_himmelblau_batch_all": {
  "lineno": 264,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.any",
   "numpy.array",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.bfgs_minimize",
   "tensorflow_probability.optimizer.converged_all"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_himmelblau_batch_all.himmelblau": {
  "lineno": 265,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_himmelblau_batch_any": {
  "lineno": 291,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.any",
   "numpy.array",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.bfgs_minimize",
   "tensorflow_probability.optimizer.converged_any"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_himmelblau_batch_any.himmelblau": {
  "lineno": 292,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_inverse_hessian_spec": {
  "lineno": 67,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.bfgs_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_inverse_hessian_spec.quadratic": {
  "lineno": 72,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_quadratic_bowl_10d": {
  "lineno": 122,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.random.randn",
   "numpy.random.seed",
   "tensorflow.compat.v2.ones_like",
   "tensorflow_probability.optimizer.bfgs_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_quadratic_bowl_10d.quadratic": {
  "lineno": 129,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_quadratic_bowl_2d": {
  "lineno": 49,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.bfgs_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_quadratic_bowl_2d.quadratic": {
  "lineno": 54,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_quadratic_with_skew": {
  "lineno": 142,
  "symbols_in_volume": [
   "numpy.diag",
   "numpy.dot",
   "numpy.exp",
   "numpy.random.randn",
   "numpy.random.seed",
   "numpy.transpose",
   "scipy.stats.special_ortho_group.rvs",
   "tensorflow.compat.v2.ones_like",
   "tensorflow_probability.optimizer.bfgs_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_quadratic_with_skew.quadratic": {
  "lineno": 151,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.tensordot"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_quadratic_with_strong_skew": {
  "lineno": 166,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.diag",
   "numpy.dot",
   "numpy.random.randn",
   "numpy.random.seed",
   "numpy.transpose",
   "scipy.stats.special_ortho_group.rvs",
   "tensorflow.compat.v2.ones_like",
   "tensorflow_probability.optimizer.bfgs_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_quadratic_with_strong_skew.quadratic": {
  "lineno": 174,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.tensordot"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_rosenbrock_2d": {
  "lineno": 190,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.bfgs_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_rosenbrock_2d.rosenbrock": {
  "lineno": 199,
  "symbols_in_volume": [
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test._make_val_and_grad_fn": {
  "lineno": 34,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test._make_val_and_grad_fn.val_and_grad": {
  "lineno": 35,
  "symbols_in_volume": [
   "functools.wraps",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test._norm": {
  "lineno": 41,
  "symbols_in_volume": [
   "numpy.inf",
   "numpy.linalg.norm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils._broadcast": {
  "lineno": 325,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils._check_convergence": {
  "lineno": 309,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils._restrict_along_direction": {
  "lineno": 202,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils._restrict_along_direction._restricted_func": {
  "lineno": 245,
  "symbols_in_volume": [
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils._update_position": {
  "lineno": 258,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.is_finite",
   "tensorflow.compat.v2.reduce_all"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils.converged_all": {
  "lineno": 43,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_all"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils.converged_any": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_all",
   "tensorflow.compat.v2.reduce_any"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils.get_initial_state_args": {
  "lineno": 48,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils.line_search_step": {
  "lineno": 95,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.prefer_static.cond",
   "tensorflow_probability.python.optimizer.linesearch.hager_zhang"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils.line_search_step._do_update_position": {
  "lineno": 163,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils.norm": {
  "lineno": 287,
  "symbols_in_volume": [
   "numpy.inf",
   "tensorflow.compat.v2.math.abs",
   "tensorflow.compat.v2.norm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils.update_fields": {
  "lineno": 183,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.differential_evolution.DifferentialEvolutionOptimizerResults": {
  "lineno": 83,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.differential_evolution._binary_crossover": {
  "lineno": 608,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.math.equal",
   "tensorflow.compat.v2.one_hot",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution._check_convergence": {
  "lineno": 522,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.abs",
   "tensorflow.compat.v2.math.reduce_all",
   "tensorflow.compat.v2.math.reduce_max",
   "tensorflow.compat.v2.math.reduce_min"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution._check_convergence.part_converged": {
  "lineno": 548,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.abs",
   "tensorflow.compat.v2.math.reduce_max"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution._check_failure": {
  "lineno": 508,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.is_inf",
   "tensorflow.compat.v2.math.reduce_all"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution._ensure_list": {
  "lineno": 772,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution._find_best_in_population": {
  "lineno": 513,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.math.equal",
   "tensorflow.compat.v2.math.reduce_min"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution._get_initial_args": {
  "lineno": 462,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution._get_mixing_indices": {
  "lineno": 713,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.math.maximum",
   "tensorflow.compat.v2.math.minimum",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.python.distributions.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution._get_mutants": {
  "lineno": 675,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution._get_mutants._mutant_part": {
  "lineno": 704,
  "symbols_in_volume": [
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.math.reduce_sum",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.transpose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution._get_starting_population": {
  "lineno": 557,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.distributions.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution.minimize": {
  "lineno": 217,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.while_loop"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution.minimize.evolve_body": {
  "lineno": 403,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution.minimize.evolve_cond": {
  "lineno": 426,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution.one_step": {
  "lineno": 122,
  "symbols_in_volume": [
   "numpy.inf",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.math.is_nan",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.distributions.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_abs_function": {
  "lineno": 156,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float64",
   "tensorflow_probability.optimizer.differential_evolution_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_abs_function.abs_func": {
  "lineno": 159,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_docstring_example": {
  "lineno": 206,
  "symbols_in_volume": [
   "numpy.pi",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float64",
   "tensorflow_probability.optimizer.differential_evolution_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_docstring_example.easom": {
  "lineno": 208,
  "symbols_in_volume": [
   "numpy.pi",
   "tensorflow.compat.v2.cos",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_quadratic_bowl_10d": {
  "lineno": 68,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.random.randn",
   "numpy.random.seed",
   "tensorflow.compat.v2.ones_like",
   "tensorflow_probability.optimizer.differential_evolution_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_quadratic_bowl_10d.quadratic": {
  "lineno": 75,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_quadratic_bowl_2d": {
  "lineno": 36,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.differential_evolution_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_quadratic_bowl_2d.quadratic": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_quadratic_bowl_with_initial_simplex": {
  "lineno": 52,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow_probability.optimizer.differential_evolution_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_quadratic_bowl_with_initial_simplex.quadratic": {
  "lineno": 56,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_quadratic_with_skew": {
  "lineno": 88,
  "symbols_in_volume": [
   "numpy.diag",
   "numpy.dot",
   "numpy.exp",
   "numpy.random.randn",
   "numpy.random.seed",
   "numpy.transpose",
   "scipy.stats.special_ortho_group.rvs",
   "tensorflow.compat.v2.ones_like",
   "tensorflow_probability.optimizer.differential_evolution_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_quadratic_with_skew.objective_func": {
  "lineno": 102,
  "symbols_in_volume": [
   "tensorflow.compat.v2.map_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_quadratic_with_skew.quadratic_single": {
  "lineno": 96,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.tensordot"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_quadratic_with_strong_skew": {
  "lineno": 115,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.diag",
   "numpy.dot",
   "numpy.random.randn",
   "numpy.random.seed",
   "numpy.transpose",
   "scipy.stats.special_ortho_group.rvs",
   "tensorflow.compat.v2.ones_like",
   "tensorflow_probability.optimizer.differential_evolution_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_quadratic_with_strong_skew.objective_func": {
  "lineno": 127,
  "symbols_in_volume": [
   "tensorflow.compat.v2.map_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_quadratic_with_strong_skew.quadratic": {
  "lineno": 122,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.tensordot"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_rosenbrock_2d": {
  "lineno": 172,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.differential_evolution_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_rosenbrock_2d.rosenbrock": {
  "lineno": 181,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_sqrt_quadratic_function": {
  "lineno": 140,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.differential_evolution_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_sqrt_quadratic_function.sqrt_quad": {
  "lineno": 143,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.sqrt"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.lbfgs._get_initial_state": {
  "lineno": 264,
  "symbols_in_volume": [
   "tensorflow_probability.python.optimizer.bfgs_utils.get_initial_state_args"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs._get_search_direction": {
  "lineno": 278,
  "symbols_in_volume": [
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.minimum",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_shape",
   "tensorflow_probability.python.internal.prefer_static.cond"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs._get_search_direction._two_loop_algorithm": {
  "lineno": 319,
  "symbols_in_volume": [
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.scan",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs._get_search_direction._two_loop_algorithm.first_loop": {
  "lineno": 330,
  "symbols_in_volume": [
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs._get_search_direction._two_loop_algorithm.second_loop": {
  "lineno": 351,
  "symbols_in_volume": [
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs._make_empty_queue_for": {
  "lineno": 370,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs._queue_push": {
  "lineno": 404,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.newaxis",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs.minimize": {
  "lineno": 81,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.while_loop",
   "tensorflow_probability.python.optimizer.bfgs_utils.converged_all"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs.minimize._body": {
  "lineno": 228,
  "symbols_in_volume": [
   "tensorflow_probability.python.optimizer.bfgs_utils.line_search_step",
   "tensorflow_probability.python.optimizer.bfgs_utils.update_fields"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs.minimize._cond": {
  "lineno": 223,
  "symbols_in_volume": [
   "tensorflow.compat.v2.logical_not"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest": {
  "lineno": 44,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_data_fitting": {
  "lineno": 274,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.random.choice",
   "numpy.random.geometric",
   "numpy.random.seed",
   "numpy.sum",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.optimizer.lbfgs_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_data_fitting.neg_log_likelihood": {
  "lineno": 286,
  "symbols_in_volume": [
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.reduce_logsumexp",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.squeeze",
   "tensorflow.compat.v2.stack",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_determinism": {
  "lineno": 307,
  "symbols_in_volume": [
   "numpy.random.rand"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_determinism.get_results": {
  "lineno": 336,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.lbfgs_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_determinism.rastrigin": {
  "lineno": 311,
  "symbols_in_volume": [
   "numpy.pi",
   "tensorflow.compat.v2.cos",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_dynamic_shapes": {
  "lineno": 356,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.ones",
   "tensorflow.compat.v1.placeholder",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.float32",
   "tensorflow_probability.optimizer.lbfgs_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_dynamic_shapes.quadratic": {
  "lineno": 363,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_high_dims_quadratic_bowl_trivial": {
  "lineno": 64,
  "symbols_in_volume": [
   "numpy.ones",
   "numpy.zeros",
   "tensorflow_probability.optimizer.lbfgs_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_high_dims_quadratic_bowl_trivial.quadratic": {
  "lineno": 70,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_himmelblau": {
  "lineno": 178,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.lbfgs_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_himmelblau.himmelblau": {
  "lineno": 194,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_himmelblau_batch_all": {
  "lineno": 215,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.any",
   "numpy.array",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.converged_all",
   "tensorflow_probability.optimizer.lbfgs_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_himmelblau_batch_all.himmelblau": {
  "lineno": 216,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_himmelblau_batch_any": {
  "lineno": 242,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.any",
   "numpy.array",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.converged_any",
   "tensorflow_probability.optimizer.lbfgs_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_himmelblau_batch_any.himmelblau": {
  "lineno": 243,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_quadratic_bowl_2d": {
  "lineno": 48,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.lbfgs_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_quadratic_bowl_2d.quadratic": {
  "lineno": 53,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_quadratic_bowl_40d": {
  "lineno": 82,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.random.randn",
   "numpy.random.seed",
   "tensorflow.compat.v2.ones_like",
   "tensorflow_probability.optimizer.lbfgs_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_quadratic_bowl_40d.quadratic": {
  "lineno": 89,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_quadratic_with_skew": {
  "lineno": 100,
  "symbols_in_volume": [
   "numpy.diag",
   "numpy.dot",
   "numpy.exp",
   "numpy.random.randn",
   "numpy.random.seed",
   "numpy.transpose",
   "scipy.stats.special_ortho_group.rvs",
   "tensorflow.compat.v2.ones_like",
   "tensorflow_probability.optimizer.lbfgs_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_quadratic_with_skew.quadratic": {
  "lineno": 109,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.tensordot"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_quadratic_with_strong_skew": {
  "lineno": 122,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.diag",
   "numpy.dot",
   "numpy.random.randn",
   "numpy.random.seed",
   "numpy.transpose",
   "scipy.stats.special_ortho_group.rvs",
   "tensorflow.compat.v2.ones_like",
   "tensorflow_probability.optimizer.lbfgs_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_quadratic_with_strong_skew.quadratic": {
  "lineno": 130,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.tensordot"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_rosenbrock_2d": {
  "lineno": 143,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.lbfgs_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_rosenbrock_2d.rosenbrock": {
  "lineno": 152,
  "symbols_in_volume": [
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test._make_val_and_grad_fn": {
  "lineno": 33,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test._make_val_and_grad_fn.val_and_grad": {
  "lineno": 34,
  "symbols_in_volume": [
   "functools.wraps",
   "tensorflow_probability.math.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test._norm": {
  "lineno": 40,
  "symbols_in_volume": [
   "numpy.inf",
   "numpy.linalg.norm"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.python.util.all_util.remove_undocumented"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._bracket_and_search": {
  "lineno": 334,
  "symbols_in_volume": [
   "tensorflow.compat.v2.greater_equal",
   "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.bracket"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._fix_step_size": {
  "lineno": 300,
  "symbols_in_volume": [
   "numpy.ceil",
   "numpy.log2",
   "tensorflow.compat.v2.while_loop",
   "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.is_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._fix_step_size._body": {
  "lineno": 313,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.is_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._fix_step_size._cond": {
  "lineno": 309,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_any"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._line_search_after_bracketing": {
  "lineno": 422,
  "symbols_in_volume": [
   "tensorflow.compat.v2.while_loop"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._line_search_after_bracketing._loop_body": {
  "lineno": 490,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_any",
   "tensorflow_probability.python.internal.prefer_static.cond",
   "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.secant2"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._line_search_after_bracketing._loop_body._do_check_shrinkage": {
  "lineno": 505,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_any",
   "tensorflow_probability.python.internal.prefer_static.cond"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._line_search_after_bracketing._loop_body._do_check_shrinkage._apply_inner_bisect": {
  "lineno": 521,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._line_search_after_bracketing._loop_cond": {
  "lineno": 484,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_any"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._line_search_inner_bisection": {
  "lineno": 547,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_any",
   "tensorflow_probability.python.internal.prefer_static.cond",
   "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.is_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._line_search_inner_bisection._apply_update": {
  "lineno": 563,
  "symbols_in_volume": [
   "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.update"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._machine_eps": {
  "lineno": 46,
  "symbols_in_volume": [
   "numpy.finfo",
   "tensorflow.compat.v2.DType"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._prepare_args": {
  "lineno": 581,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._print": {
  "lineno": 669,
  "symbols_in_volume": [
   "tensorflow.compat.v1.Print"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._to_str": {
  "lineno": 659,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.fill"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._very_close": {
  "lineno": 655,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.nextafter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang.hager_zhang": {
  "lineno": 70,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.is_finite",
   "tensorflow.compat.v2.reduce_any",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.prefer_static.cond",
   "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.is_finite",
   "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.val_where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang.hager_zhang._apply_bracket_and_search": {
  "lineno": 286,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest": {
  "lineno": 48,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest._test_eval_count_eager": {
  "lineno": 186,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.linesearch.hager_zhang"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest._test_eval_count_eager.get_val_and_grad_fn": {
  "lineno": 189,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest._test_eval_count_eager.get_val_and_grad_fn._val_and_grad_fn": {
  "lineno": 190,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest._test_eval_count_graph": {
  "lineno": 205,
  "symbols_in_volume": [
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.linesearch.hager_zhang"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest._test_eval_count_graph.get_fn": {
  "lineno": 207,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest._test_eval_count_graph.get_fn._fdf": {
  "lineno": 209,
  "symbols_in_volume": [
   "tensorflow.compat.v1.assign_add",
   "tensorflow.compat.v2.control_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_approx_wolfe": {
  "lineno": 232,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.linesearch.hager_zhang"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_approx_wolfe.fdf": {
  "lineno": 240,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_batched_multiple_minima": {
  "lineno": 107,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.array",
   "tensorflow_probability.optimizer.linesearch.hager_zhang"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_batched_multiple_minima.fdf": {
  "lineno": 110,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_consistency": {
  "lineno": 293,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float64",
   "tensorflow_probability.optimizer.linesearch.hager_zhang"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_consistency.rastrigin": {
  "lineno": 295,
  "symbols_in_volume": [
   "numpy.cos",
   "numpy.pi",
   "numpy.sin",
   "tensorflow.compat.v2.cos",
   "tensorflow.compat.v2.sin"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_determinism": {
  "lineno": 272,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_determinism.get_results": {
  "lineno": 276,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.linesearch.hager_zhang"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_eval_count": {
  "lineno": 179,
  "symbols_in_volume": [
   "tensorflow.compat.v2.executing_eagerly"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_multiple_minima": {
  "lineno": 82,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.linesearch.hager_zhang"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_multiple_minima.fdf": {
  "lineno": 85,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_quadratic": {
  "lineno": 52,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.linesearch.hager_zhang"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_rosenbrock": {
  "lineno": 139,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.linesearch.hager_zhang"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_rosenbrock.fdf": {
  "lineno": 169,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_rosenbrock.rosenbrock": {
  "lineno": 148,
  "symbols_in_volume": [
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test._is_approx_wolfe": {
  "lineno": 38,
  "symbols_in_volume": [
   "numpy.abs"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test._is_exact_wolfe": {
  "lineno": 32,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._bisect": {
  "lineno": 598,
  "symbols_in_volume": [
   "tensorflow.compat.v2.while_loop"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._bisect._loop_body": {
  "lineno": 604,
  "symbols_in_volume": [
   "tensorflow.compat.v2.equal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._bisect._loop_cond": {
  "lineno": 600,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_all"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._satisfies_wolfe": {
  "lineno": 665,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._secant": {
  "lineno": 732,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._secant2_inner": {
  "lineno": 178,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.reduce_any",
   "tensorflow_probability.python.internal.prefer_static.cond"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._secant2_inner._apply_inner_update": {
  "lineno": 225,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.cond"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._secant2_inner_update": {
  "lineno": 240,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_any",
   "tensorflow_probability.python.internal.prefer_static.cond"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._secant2_inner_update._apply_update": {
  "lineno": 264,
  "symbols_in_volume": [
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._secant2_inner_update._default": {
  "lineno": 277,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.bisect": {
  "lineno": 547,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.bracket": {
  "lineno": 425,
  "symbols_in_volume": [
   "tensorflow.compat.v2.while_loop"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.bracket._loop_body": {
  "lineno": 512,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.bracket._loop_cond": {
  "lineno": 508,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_all"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.is_finite": {
  "lineno": 645,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.is_finite"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.secant2": {
  "lineno": 61,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.reduce_any",
   "tensorflow_probability.python.internal.prefer_static.cond"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.secant2._apply_secant2_inner": {
  "lineno": 162,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.update": {
  "lineno": 300,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.val_where": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.Tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.HagerZhangLibTest": {
  "lineno": 88,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.HagerZhangLibTest.test_bisect_batching": {
  "lineno": 305,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.array",
   "tensorflow.compat.v2.abs",
   "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.bisect"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.HagerZhangLibTest.test_bisect_simple": {
  "lineno": 290,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.abs",
   "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.bisect"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.HagerZhangLibTest.test_bracket_batching": {
  "lineno": 253,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.array",
   "tensorflow.compat.v2.abs",
   "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.bracket"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.HagerZhangLibTest.test_bracket_simple": {
  "lineno": 229,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.abs",
   "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.bracket"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.HagerZhangLibTest.test_secant2_batching_vs_mapping": {
  "lineno": 91,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.HagerZhangLibTest.test_secant2_batching_vs_mapping.eval_secant2": {
  "lineno": 106,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.secant2"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.HagerZhangLibTest.test_update_batching": {
  "lineno": 159,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.array",
   "tensorflow.compat.v2.abs",
   "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.update"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.HagerZhangLibTest.test_update_batching_vs_mapping": {
  "lineno": 198,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.HagerZhangLibTest.test_update_batching_vs_mapping.eval_update": {
  "lineno": 212,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.update"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.HagerZhangLibTest.test_update_simple": {
  "lineno": 136,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.abs",
   "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.update"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test._interval": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.test_function_x_y": {
  "lineno": 51,
  "symbols_in_volume": [
   "numpy.polyfit",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.test_function_x_y.f": {
  "lineno": 67,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.math.polyval",
   "tensorflow.compat.v2.squeeze",
   "tensorflow.compat.v2.tile",
   "tensorflow_probability.python.math.gradient.value_and_gradient"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.test_function_x_y_dy": {
  "lineno": 78,
  "symbols_in_volume": [
   "numpy.concatenate"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._accept_reflected_fn": {
  "lineno": 460,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._accept_reflected_fn._replace_worst_with_reflected": {
  "lineno": 466,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._check_convergence": {
  "lineno": 610,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.reduce_max"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._default_step_sizes": {
  "lineno": 755,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._evaluate_objective_multiple": {
  "lineno": 847,
  "symbols_in_volume": [
   "tensorflow.compat.v2.map_fn",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._expansion_fn": {
  "lineno": 474,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._expansion_fn._expand_and_maybe_replace": {
  "lineno": 483,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.cond"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._inside_contraction_fn": {
  "lineno": 542,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._inside_contraction_fn._contraction": {
  "lineno": 553,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.cond"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._inside_contraction_fn._contraction._accept_contraction": {
  "lineno": 559,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._inside_contraction_fn._contraction._reject_contraction": {
  "lineno": 572,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._outside_contraction_fn": {
  "lineno": 501,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._outside_contraction_fn._contraction": {
  "lineno": 513,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.cond"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._outside_contraction_fn._contraction._accept_contraction": {
  "lineno": 518,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._outside_contraction_fn._contraction._reject_contraction": {
  "lineno": 529,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._prepare_args": {
  "lineno": 650,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._prepare_args_with_initial_simplex": {
  "lineno": 765,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._prepare_args_with_initial_vertex": {
  "lineno": 792,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.eye",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._replace_at_index": {
  "lineno": 603,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.expand_dims"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._resolve_parameters": {
  "lineno": 832,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._shrink_towards_best": {
  "lineno": 582,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead.minimize": {
  "lineno": 63,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.argsort",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.while_loop"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead.minimize._is_converged": {
  "lineno": 308,
  "symbols_in_volume": [
   "tensorflow.compat.v2.logical_not"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead.minimize._loop_body": {
  "lineno": 292,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead.nelder_mead_one_step": {
  "lineno": 344,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.argsort",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.prefer_static.case"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead.nelder_mead_one_step._converged_fn": {
  "lineno": 395,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_abs_function": {
  "lineno": 164,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float64",
   "tensorflow_probability.optimizer.nelder_mead_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_abs_function.abs_func": {
  "lineno": 167,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_batch_consistent_with_nonbatch": {
  "lineno": 211,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.float64",
   "tensorflow_probability.optimizer.nelder_mead_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_batch_consistent_with_nonbatch.easom": {
  "lineno": 213,
  "symbols_in_volume": [
   "numpy.pi",
   "tensorflow.compat.v2.cos",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_determinism": {
  "lineno": 253,
  "symbols_in_volume": [
   "numpy.random.rand"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_determinism.get_results": {
  "lineno": 279,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.nelder_mead_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_determinism.rastrigin": {
  "lineno": 256,
  "symbols_in_volume": [
   "numpy.pi",
   "tensorflow.compat.v2.cos",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_max_iteration_bounds_work": {
  "lineno": 301,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.nelder_mead_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_max_iteration_bounds_work.beale": {
  "lineno": 303,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_quadratic_bowl_10d": {
  "lineno": 86,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.random.randn",
   "numpy.random.seed",
   "tensorflow.compat.v2.ones_like",
   "tensorflow_probability.optimizer.nelder_mead_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_quadratic_bowl_10d.quadratic": {
  "lineno": 93,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_quadratic_bowl_2d": {
  "lineno": 36,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.nelder_mead_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_quadratic_bowl_2d.quadratic": {
  "lineno": 40,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_quadratic_bowl_with_initial_simplex": {
  "lineno": 51,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.nelder_mead_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_quadratic_bowl_with_initial_simplex.quadratic": {
  "lineno": 55,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_quadratic_bowl_with_step_sizes": {
  "lineno": 67,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.nelder_mead_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_quadratic_bowl_with_step_sizes.quadratic": {
  "lineno": 71,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_quadratic_with_skew": {
  "lineno": 105,
  "symbols_in_volume": [
   "numpy.diag",
   "numpy.dot",
   "numpy.exp",
   "numpy.random.randn",
   "numpy.random.seed",
   "numpy.transpose",
   "scipy.stats.special_ortho_group.rvs",
   "tensorflow.compat.v2.ones_like",
   "tensorflow_probability.optimizer.nelder_mead_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_quadratic_with_skew.quadratic": {
  "lineno": 113,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.tensordot"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_quadratic_with_strong_skew": {
  "lineno": 128,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.diag",
   "numpy.dot",
   "numpy.random.randn",
   "numpy.random.seed",
   "numpy.transpose",
   "scipy.stats.special_ortho_group.rvs",
   "tensorflow.compat.v2.ones_like",
   "tensorflow_probability.optimizer.nelder_mead_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_quadratic_with_strong_skew.quadratic": {
  "lineno": 135,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.tensordot"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_rosenbrock_2d": {
  "lineno": 178,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.nelder_mead_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_rosenbrock_2d.rosenbrock": {
  "lineno": 187,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_sqrt_quadratic_function": {
  "lineno": 149,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.optimizer.nelder_mead_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_sqrt_quadratic_function.sqrt_quad": {
  "lineno": 152,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.sqrt"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse._add_ignoring_nones": {
  "lineno": 55,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse._get_shape": {
  "lineno": 67,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse._mul_ignoring_nones": {
  "lineno": 59,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse._mul_or_none": {
  "lineno": 63,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse._one_hot_like": {
  "lineno": 109,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.one_hot",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse._reduce_exiting_on_none": {
  "lineno": 48,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse._reduce_ignoring_nones": {
  "lineno": 40,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse._sparse_or_dense_matmul_onehot": {
  "lineno": 75,
  "symbols_in_volume": [
   "tensorflow.compat.v1.SparseTensorValue",
   "tensorflow.compat.v2.SparseTensor",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.int64",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.sparse.slice",
   "tensorflow.compat.v2.sparse.to_dense",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse.minimize": {
  "lineno": 472,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.int32",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.while_loop",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse.minimize._loop_body": {
  "lineno": 570,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse.minimize._loop_cond": {
  "lineno": 565,
  "symbols_in_volume": [
   "tensorflow.compat.v2.logical_and",
   "tensorflow.compat.v2.logical_not"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse.minimize_one_step": {
  "lineno": 120,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.norm",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reduce_all",
   "tensorflow.compat.v2.roll",
   "tensorflow.compat.v2.transpose",
   "tensorflow.compat.v2.while_loop",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse.minimize_one_step._hessian_diag_elt_with_l2": {
  "lineno": 243,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse.minimize_one_step._loop_body": {
  "lineno": 289,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.reduce_all",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.prefer_static.cond",
   "tensorflow_probability.python.math.generic.soft_threshold"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse.minimize_one_step._loop_body._do_update": {
  "lineno": 380,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.roll",
   "tensorflow.compat.v2.tensor_scatter_nd_add",
   "tensorflow.compat.v2.transpose",
   "tensorflow_probability.python.math.linalg.sparse_or_dense_matvecmul"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse.minimize_one_step._loop_cond": {
  "lineno": 278,
  "symbols_in_volume": [
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.reduce_any"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test.ProximalHessianTestDynamicShapeFloat32": {
  "lineno": 222,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test.ProximalHessianTestDynamicShapeFloat64": {
  "lineno": 236,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test.ProximalHessianTestStaticShapeFloat32": {
  "lineno": 215,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test.ProximalHessianTestStaticShapeFloat64": {
  "lineno": 229,
  "symbols_in_volume": [
   "tensorflow.compat.v2.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest": {
  "lineno": 32,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest._adjust_dtype_and_shape_hints": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow.compat.v2.SparseTensor",
   "tensorflow.compat.v2.cast"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest._make_placeholder": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest._test_finding_sparse_solution": {
  "lineno": 60,
  "symbols_in_volume": [
   "numpy.concatenate",
   "numpy.full",
   "numpy.random.random",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.optimizer.proximal_hessian_sparse_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest._test_finding_sparse_solution._grad_and_hessian_unregularized_loss_fn": {
  "lineno": 89,
  "symbols_in_volume": [
   "numpy.ndindex",
   "numpy.product",
   "tensorflow.compat.v2.SparseTensor",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest.testFindingSparseSolution_BatchOfRank2": {
  "lineno": 132,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest.testFindingSparseSolution_SingleBatch": {
  "lineno": 129,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest.testFindingSparseSolution_SingleInstance": {
  "lineno": 126,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest.testL2Regularization": {
  "lineno": 135,
  "symbols_in_volume": [
   "numpy.random.random",
   "numpy.random.seed",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.optimizer.proximal_hessian_sparse_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest.testL2Regularization._grad_and_hessian_unregularized_loss_fn": {
  "lineno": 148,
  "symbols_in_volume": [
   "tensorflow.compat.v2.eye",
   "tensorflow.compat.v2.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest.testNumIter": {
  "lineno": 170,
  "symbols_in_volume": [
   "numpy.random.random",
   "numpy.random.seed",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.optimizer.proximal_hessian_sparse_minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest.testNumIter._grad_and_hessian_unregularized_loss_fn": {
  "lineno": 191,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.tensor_diag",
   "tensorflow.compat.v2.ones_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.sgld.StochasticGradientLangevinDynamics": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow.compat.v2.optimizers.Optimizer"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.sgld.StochasticGradientLangevinDynamics.__init__": {
  "lineno": 149,
  "symbols_in_volume": [
   "tensorflow.compat.v1.assert_greater",
   "tensorflow.compat.v1.assert_integer",
   "tensorflow.compat.v1.assert_less_equal",
   "tensorflow.compat.v1.assert_non_negative",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.int64",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld.StochasticGradientLangevinDynamics._apply_noisy_update": {
  "lineno": 262,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.int64",
   "tensorflow.compat.v2.math.rsqrt",
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.square",
   "tensorflow.compat.v2.squeeze",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.math.diag_jacobian"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld.StochasticGradientLangevinDynamics._create_slots": {
  "lineno": 216,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld.StochasticGradientLangevinDynamics._prepare": {
  "lineno": 225,
  "symbols_in_volume": [
   "tensorflow.compat.v1.assert_non_negative",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld.StochasticGradientLangevinDynamics._resource_apply_dense": {
  "lineno": 241,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.python.training.training_ops.resource_apply_gradient_descent"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld.StochasticGradientLangevinDynamics._resource_apply_sparse": {
  "lineno": 250,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld.StochasticGradientLangevinDynamics.get_config": {
  "lineno": 220,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld.StochasticGradientLangevinDynamics.variable_scope": {
  "lineno": 257,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.sgld_test.StochasticGradientLangevinDynamicsOptimizerTest": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.sgld_test.StochasticGradientLangevinDynamicsOptimizerTest.testBasic": {
  "lineno": 37,
  "symbols_in_volume": [
   "numpy.sqrt",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.half",
   "tensorflow_probability.optimizer.StochasticGradientLangevinDynamics"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld_test.StochasticGradientLangevinDynamicsOptimizerTest.testBasicMultiInstance": {
  "lineno": 75,
  "symbols_in_volume": [
   "numpy.sqrt",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.half",
   "tensorflow_probability.optimizer.StochasticGradientLangevinDynamics"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld_test.StochasticGradientLangevinDynamicsOptimizerTest.testBurnin": {
  "lineno": 184,
  "symbols_in_volume": [
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int16",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.int64",
   "tensorflow.compat.v2.int8",
   "tensorflow_probability.optimizer.StochasticGradientLangevinDynamics"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld_test.StochasticGradientLangevinDynamicsOptimizerTest.testDiffusionBehavesCorrectly": {
  "lineno": 350,
  "symbols_in_volume": [
   "numpy.concatenate",
   "numpy.float32",
   "numpy.mean",
   "numpy.zeros",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow.compat.v1.train.get_or_create_global_step",
   "tensorflow.compat.v1.train.polynomial_decay",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow_probability.optimizer.StochasticGradientLangevinDynamics"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld_test.StochasticGradientLangevinDynamicsOptimizerTest.testDiffusionBehavesCorrectly.loss_fn": {
  "lineno": 367,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.linalg.cholesky_solve",
   "tensorflow.compat.v2.linalg.matvec"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld_test.StochasticGradientLangevinDynamicsOptimizerTest.testGradWrtRef": {
  "lineno": 168,
  "symbols_in_volume": [
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.half",
   "tensorflow.python.framework.test_util.run_deprecated_v1",
   "tensorflow_probability.optimizer.StochasticGradientLangevinDynamics"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld_test.StochasticGradientLangevinDynamicsOptimizerTest.testPreconditionerComputedCorrectly": {
  "lineno": 287,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.gradients",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.math.rsqrt",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.square",
   "tensorflow_probability.optimizer.StochasticGradientLangevinDynamics",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL",
   "tensorflow_probability.python.math.diag_jacobian"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld_test.StochasticGradientLangevinDynamicsOptimizerTest.testPreconditionerComputedCorrectly.target_fn": {
  "lineno": 311,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld_test.StochasticGradientLangevinDynamicsOptimizerTest.testSparseBasic": {
  "lineno": 251,
  "symbols_in_volume": [
   "numpy.sqrt",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.IndexedSlices",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.half",
   "tensorflow_probability.optimizer.StochasticGradientLangevinDynamics"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld_test.StochasticGradientLangevinDynamicsOptimizerTest.testTensorLearningRate": {
  "lineno": 132,
  "symbols_in_volume": [
   "numpy.sqrt",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.half",
   "tensorflow_probability.optimizer.StochasticGradientLangevinDynamics"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld_test.StochasticGradientLangevinDynamicsOptimizerTest.testWithGlobalStep": {
  "lineno": 209,
  "symbols_in_volume": [
   "numpy.sqrt",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.int64",
   "tensorflow_probability.optimizer.StochasticGradientLangevinDynamics"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.variational_sgd.VariationalSGD": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.compat.v2.optimizers.Optimizer"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.variational_sgd.VariationalSGD.__init__": {
  "lineno": 83,
  "symbols_in_volume": [
   "tensorflow.compat.v1.assert_greater",
   "tensorflow.compat.v1.assert_integer",
   "tensorflow.compat.v1.assert_less_equal",
   "tensorflow.compat.v1.assert_non_negative",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int64",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd.VariationalSGD._create_slots": {
  "lineno": 165,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd.VariationalSGD._get_coordinatewise_learning_rate": {
  "lineno": 178,
  "symbols_in_volume": [
   "tensorflow.compat.v1.scatter_add",
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.IndexedSlices",
   "tensorflow.compat.v2.Tensor",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.clip_by_value",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.errors.InvalidArgumentError",
   "tensorflow.compat.v2.gather_nd",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.square",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd.VariationalSGD._prepare": {
  "lineno": 170,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd.VariationalSGD._resource_apply_dense": {
  "lineno": 229,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.clip_by_value",
   "tensorflow.compat.v2.int64",
   "tensorflow.python.training.training_ops.resource_apply_gradient_descent"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd.VariationalSGD._resource_apply_sparse": {
  "lineno": 245,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.clip_by_value",
   "tensorflow.compat.v2.int64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd.VariationalSGD.get_config": {
  "lineno": 159,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.variational_sgd_test.VariationalSGDTest": {
  "lineno": 30,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.variational_sgd_test.VariationalSGDTest.testBasic": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.half",
   "tensorflow_probability.optimizer.VariationalSGD"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd_test.VariationalSGDTest.testBasicMultiInstance": {
  "lineno": 66,
  "symbols_in_volume": [
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.half",
   "tensorflow_probability.optimizer.VariationalSGD"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd_test.VariationalSGDTest.testBurnin": {
  "lineno": 164,
  "symbols_in_volume": [
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int16",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.int64",
   "tensorflow.compat.v2.int8",
   "tensorflow_probability.optimizer.VariationalSGD"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd_test.VariationalSGDTest.testGradWrtRef": {
  "lineno": 253,
  "symbols_in_volume": [
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.half",
   "tensorflow.python.framework.test_util.run_deprecated_v1",
   "tensorflow_probability.optimizer.VariationalSGD"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd_test.VariationalSGDTest.testSparseBasic": {
  "lineno": 311,
  "symbols_in_volume": [
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.IndexedSlices",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.half",
   "tensorflow_probability.optimizer.VariationalSGD"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd_test.VariationalSGDTest.testTensorDecayLearningRate": {
  "lineno": 197,
  "symbols_in_volume": [
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.errors.InvalidArgumentError",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.half",
   "tensorflow_probability.optimizer.VariationalSGD"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd_test.VariationalSGDTest.testTensorLearningRate": {
  "lineno": 128,
  "symbols_in_volume": [
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow_probability.optimizer.VariationalSGD"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd_test.VariationalSGDTest.testWithGlobalStep": {
  "lineno": 266,
  "symbols_in_volume": [
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.half",
   "tensorflow.compat.v2.int64",
   "tensorflow_probability.optimizer.VariationalSGD"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.python.util.all_util.remove_undocumented",
   "warnings.warn"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.stats": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.python.util.all_util.remove_undocumented"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.stats.calibration": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.stats.calibration._compute_calibration_bin_statistics": {
  "lineno": 203,
  "symbols_in_volume": [
   "numpy.finfo",
   "tensorflow.compat.v1.batch_gather",
   "tensorflow.compat.v2.argmax",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.histogram_fixed_width_bins",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.math.bincount",
   "tensorflow.compat.v2.math.unsorted_segment_sum",
   "tensorflow.compat.v2.nn.softmax",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.size",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.calibration._make_flatten_unflatten_fns": {
  "lineno": 321,
  "symbols_in_volume": [
   "numpy.int32",
   "numpy.prod"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.calibration._make_flatten_unflatten_fns.flatten_fn": {
  "lineno": 327,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.calibration._make_flatten_unflatten_fns.unflatten_fn": {
  "lineno": 335,
  "symbols_in_volume": [
   "tensorflow.compat.v2.reshape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.calibration._reduce_log_l2_exp": {
  "lineno": 344,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.reduce_logsumexp",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.python.math.reduce_weighted_logsumexp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.calibration.brier_decomposition": {
  "lineno": 41,
  "symbols_in_volume": [
   "numpy.finfo",
   "tensorflow.compat.v2.argmax",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.map_fn",
   "tensorflow.compat.v2.math.confusion_matrix",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.reduce_logsumexp",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.square",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.calibration.brier_decomposition.fn_to_map": {
  "lineno": 102,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.confusion_matrix"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.calibration.brier_score": {
  "lineno": 159,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.softmax",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.one_hot",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.square"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.calibration.expected_calibration_error": {
  "lineno": 257,
  "symbols_in_volume": [
   "numpy.finfo",
   "numpy.float32",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.calibration_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.enable_v2_behavior",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.stats.calibration_test.CalibrationTest": {
  "lineno": 29,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.stats.calibration_test.CalibrationTest._compute_perturbed_reliability": {
  "lineno": 92,
  "symbols_in_volume": [
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.random.normal",
   "tensorflow_probability.stats.brier_decomposition"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.calibration_test.CalibrationTest._generate_linear_dataset": {
  "lineno": 104,
  "symbols_in_volume": [
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.random.set_seed",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.size",
   "tensorflow_probability.distributions.Categorical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.calibration_test.CalibrationTest._generate_perfect_calibration_logits": {
  "lineno": 160,
  "symbols_in_volume": [
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.random.set_seed",
   "tensorflow_probability.distributions.Categorical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.calibration_test.CalibrationTest._generate_random_calibration_logits": {
  "lineno": 181,
  "symbols_in_volume": [
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.random.set_seed",
   "tensorflow_probability.distributions.Categorical"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.calibration_test.CalibrationTest.test_brier_decomposition": {
  "lineno": 35,
  "symbols_in_volume": [
   "absl.logging.info",
   "absl.testing.parameterized.parameters",
   "itertools.product",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.random.set_seed",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.stats.brier_decomposition",
   "tensorflow_probability.stats.brier_score"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.calibration_test.CalibrationTest.test_brier_decomposition_batching": {
  "lineno": 70,
  "symbols_in_volume": [
   "numpy.int32",
   "numpy.prod",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.random.set_seed",
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.stats.brier_decomposition"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.calibration_test.CalibrationTest.test_expected_calibration_error": {
  "lineno": 146,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.math.log",
   "tensorflow_probability.stats.expected_calibration_error"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.calibration_test.CalibrationTest.test_expected_calibration_error_uncalibrated": {
  "lineno": 223,
  "symbols_in_volume": [
   "absl.logging.info",
   "absl.testing.parameterized.parameters",
   "tensorflow_probability.stats.expected_calibration_error"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.calibration_test.CalibrationTest.test_expected_calibration_error_wellcalibrated": {
  "lineno": 203,
  "symbols_in_volume": [
   "absl.logging.info",
   "absl.testing.parameterized.parameters",
   "tensorflow_probability.stats.expected_calibration_error"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.calibration_test.CalibrationTest.test_reliability_experiment": {
  "lineno": 117,
  "symbols_in_volume": [
   "absl.logging.info",
   "absl.testing.parameterized.parameters",
   "numpy.array",
   "numpy.linspace",
   "numpy.mean",
   "numpy.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.leave_one_out": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.stats.leave_one_out._log_loosum_exp_impl": {
  "lineno": 187,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.inf",
   "numpy.int32",
   "numpy.object",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.not_equal",
   "tensorflow.compat.v2.reduce_logsumexp",
   "tensorflow.compat.v2.reduce_max",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.internal.prefer_static.cast",
   "tensorflow_probability.python.internal.prefer_static.is_numpy",
   "tensorflow_probability.python.internal.prefer_static.log",
   "tensorflow_probability.python.internal.prefer_static.non_negative_axis",
   "tensorflow_probability.python.internal.prefer_static.range",
   "tensorflow_probability.python.internal.prefer_static.rank",
   "tensorflow_probability.python.internal.prefer_static.setdiff1d",
   "tensorflow_probability.python.internal.prefer_static.shape",
   "tensorflow_probability.python.internal.prefer_static.size",
   "tensorflow_probability.python.internal.tensorshape_util.set_shape",
   "tensorflow_probability.python.math.generic.softplus_inverse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.leave_one_out._log_soosum_exp_impl": {
  "lineno": 166,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.prefer_static.log",
   "tensorflow_probability.python.math.generic.log_add_exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.leave_one_out.log_loomean_exp": {
  "lineno": 68,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.leave_one_out.log_loosum_exp": {
  "lineno": 42,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.leave_one_out.log_soomean_exp": {
  "lineno": 130,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.leave_one_out.log_soosum_exp": {
  "lineno": 94,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.leave_one_out_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.stats.leave_one_out_test.LogLooMeanTest": {
  "lineno": 250,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.stats.leave_one_out_test.LogLooMeanTest.test_sum_vs_mean": {
  "lineno": 255,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.log",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.stats.log_loomean_exp",
   "tensorflow_probability.stats.log_loosum_exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.leave_one_out_test.LogSooMeanTest": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.stats.leave_one_out_test.LogSooMeanTest._make_flatteners": {
  "lineno": 37,
  "symbols_in_volume": [
   "numpy.argsort",
   "numpy.array",
   "numpy.concatenate",
   "numpy.setdiff1d",
   "numpy.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.leave_one_out_test.LogSooMeanTest._make_flatteners._flatten": {
  "lineno": 45,
  "symbols_in_volume": [
   "numpy.reshape",
   "numpy.transpose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.leave_one_out_test.LogSooMeanTest._make_flatteners._unflatten": {
  "lineno": 50,
  "symbols_in_volume": [
   "numpy.reshape",
   "numpy.transpose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.leave_one_out_test.LogSooMeanTest._numpy_grad_log_soomean_exp": {
  "lineno": 86,
  "symbols_in_volume": [
   "numpy.diag",
   "numpy.newaxis",
   "numpy.sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.leave_one_out_test.LogSooMeanTest._numpy_log_soomean_exp": {
  "lineno": 79,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.stats.leave_one_out_test.LogSooMeanTest._numpy_log_soomean_exp_impl": {
  "lineno": 54,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float128",
   "numpy.log",
   "numpy.mean",
   "numpy.sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.leave_one_out_test.LogSooMeanTest.test_log_soomean_exp_1": {
  "lineno": 107,
  "symbols_in_volume": [
   "numpy.linspace",
   "tensorflow_probability.stats.log_soomean_exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.leave_one_out_test.LogSooMeanTest.test_log_soomean_exp_2": {
  "lineno": 117,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow_probability.stats.log_soomean_exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.leave_one_out_test.LogSooMeanTest.test_log_soomean_exp_3": {
  "lineno": 128,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow_probability.stats.log_soomean_exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.leave_one_out_test.LogSooMeanTest.test_log_soomean_exp_gradient_using_finite_difference_1": {
  "lineno": 138,
  "symbols_in_volume": [
   "numpy.linspace",
   "numpy.ones_like",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient",
   "tensorflow_probability.stats.log_soomean_exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.leave_one_out_test.LogSooMeanTest.test_log_soomean_exp_gradient_using_finite_difference_2": {
  "lineno": 165,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones_like",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient",
   "tensorflow_probability.stats.log_soomean_exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.leave_one_out_test.LogSooMeanTest.test_log_soomean_exp_gradient_using_finite_difference_3": {
  "lineno": 199,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.ones_like",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient",
   "tensorflow_probability.stats.log_soomean_exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.leave_one_out_test.LogSooMeanTest.test_sum_vs_mean": {
  "lineno": 233,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.log",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.stats.log_soomean_exp",
   "tensorflow_probability.stats.log_soosum_exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.stats.quantiles._get_best_effort_ndims": {
  "lineno": 784,
  "symbols_in_volume": [
   "tensorflow.compat.v2.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles._get_static_ndims": {
  "lineno": 720,
  "symbols_in_volume": [
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles._insert_back_keep_dims": {
  "lineno": 799,
  "symbols_in_volume": [
   "tensorflow.compat.v2.expand_dims"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles._make_static_axis_non_negative_list": {
  "lineno": 814,
  "symbols_in_volume": [
   "numpy.zeros",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow_probability.python.internal.prefer_static.non_negative_axis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles._move_dims_to_flat_end": {
  "lineno": 841,
  "symbols_in_volume": [
   "numpy.prod",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.transpose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles._sort_tensor": {
  "lineno": 881,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.top_k",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles.count_integers": {
  "lineno": 42,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.map_fn",
   "tensorflow.compat.v2.math.bincount",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.transpose"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles.count_integers.one_bincount": {
  "lineno": 131,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.bincount"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles.find_bins": {
  "lineno": 159,
  "symbols_in_volume": [
   "numpy.nan",
   "tensorflow.compat.v2.as_dtype",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.clip_by_value",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.int64",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.searchsorted",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.distribution_util.rotate_transpose",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.dtype_util.is_floating"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles.histogram": {
  "lineno": 291,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles.percentile": {
  "lineno": 402,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.nan",
   "tensorflow.compat.v2.bfloat16",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float16",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.math.ceil",
   "tensorflow.compat.v2.math.is_nan",
   "tensorflow.compat.v2.maximum",
   "tensorflow.compat.v2.minimum",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.pad",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reduce_any",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.assert_util.assert_greater_equal",
   "tensorflow_probability.python.internal.assert_util.assert_less_equal",
   "tensorflow_probability.python.internal.assert_util.assert_rank_in",
   "tensorflow_probability.python.internal.distribution_util.rotate_transpose",
   "tensorflow_probability.python.internal.distribution_util.with_dependencies",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.internal.dtype_util.is_integer"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles.percentile._get_indices": {
  "lineno": 544,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.clip_by_value",
   "tensorflow.compat.v2.floor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.math.ceil",
   "tensorflow.compat.v2.round",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles.quantiles": {
  "lineno": 621,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float64",
   "tensorflow.compat.v2.linspace",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test": {
  "lineno": null,
  "symbols_in_volume": [
   "numpy.random.RandomState",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.stats.quantiles_test.BincountTest": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.stats.quantiles_test.BincountTest.test_2d_arr_axis_0_yes_weights": {
  "lineno": 71,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v2.math.bincount",
   "tensorflow_probability.stats.count_integers"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.BincountTest.test_3d_arr_axis_1_neg1_no_weights": {
  "lineno": 50,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v2.math.bincount",
   "tensorflow_probability.stats.count_integers"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.BincountTest.test_like_tf_math_bincount_if_axis_is_all_the_dims": {
  "lineno": 43,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v2.math.bincount",
   "tensorflow_probability.stats.count_integers"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.BincountTest.test_like_tf_math_bincount_if_axis_is_none": {
  "lineno": 36,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v2.math.bincount",
   "tensorflow_probability.stats.count_integers"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.FindBinsTest": {
  "lineno": 93,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.stats.quantiles_test.FindBinsTest.test_1d_array_extend_lower_and_upper": {
  "lineno": 105,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow_probability.stats.find_bins"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.FindBinsTest.test_1d_array_no_extend_lower_and_upper": {
  "lineno": 115,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.nan",
   "tensorflow_probability.stats.find_bins"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.FindBinsTest.test_1d_array_no_extend_lower_and_upper_dtype_int64": {
  "lineno": 96,
  "symbols_in_volume": [
   "numpy.int64",
   "tensorflow.compat.v2.int64",
   "tensorflow_probability.stats.find_bins"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.FindBinsTest.test_3d_array_has_expected_bins": {
  "lineno": 147,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.linspace",
   "numpy.ones",
   "numpy.ravel",
   "numpy.zeros",
   "tensorflow_probability.stats.find_bins"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.FindBinsTest.test_large_random_array_has_expected_bin_fractions": {
  "lineno": 161,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.linspace",
   "numpy.ones",
   "numpy.zeros",
   "tensorflow_probability.stats.find_bins"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.FindBinsTest.test_large_random_array_has_expected_bin_fractions_with_broadcast": {
  "lineno": 177,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.linspace",
   "numpy.ones",
   "tensorflow_probability.stats.find_bins"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.FindBinsTest.test_too_few_edges_raises": {
  "lineno": 193,
  "symbols_in_volume": [
   "tensorflow_probability.stats.find_bins"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.FindBinsTest.test_x_is_2d_array_dtype_int32": {
  "lineno": 125,
  "symbols_in_volume": [
   "numpy.int32",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.stats.find_bins"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.HistogramTest": {
  "lineno": 200,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.stats.quantiles_test.HistogramTest.test_2d_uniform_reduce_axis_0": {
  "lineno": 232,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.sqrt",
   "numpy.stack",
   "tensorflow_probability.stats.histogram"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.HistogramTest.test_2d_uniform_reduce_axis_0_edges_is_2d": {
  "lineno": 314,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.sqrt",
   "numpy.stack",
   "tensorflow_probability.stats.histogram"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.HistogramTest.test_2d_uniform_reduce_axis_1_and_change_dtype": {
  "lineno": 273,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.float64",
   "numpy.sqrt",
   "numpy.stack",
   "tensorflow_probability.stats.histogram"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.HistogramTest.test_uniform_dist_in_1d_specify_extend_interval_and_dtype": {
  "lineno": 203,
  "symbols_in_volume": [
   "numpy.int32",
   "numpy.sqrt",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.stats.histogram"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithHigherInterpolation": {
  "lineno": 657,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLinearInterpolation": {
  "lineno": 550,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLinearInterpolation.test_grads_at_sample_pts_with_no_preserve_gradients": {
  "lineno": 559,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float64",
   "numpy.ones",
   "numpy.pi",
   "numpy.sqrt",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.distributions.Normal",
   "tensorflow_probability.math.value_and_gradient",
   "tensorflow_probability.stats.percentile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLinearInterpolation.test_grads_at_sample_pts_with_yes_preserve_gradients": {
  "lineno": 605,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float64",
   "numpy.ones",
   "numpy.pi",
   "numpy.sqrt",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.distributions.Normal",
   "tensorflow_probability.math.value_and_gradient",
   "tensorflow_probability.stats.percentile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLinearInterpolation.test_integer_dtype_raises": {
  "lineno": 555,
  "symbols_in_volume": [
   "tensorflow_probability.stats.percentile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation": {
  "lineno": 360,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_four_dimensional_input": {
  "lineno": 439,
  "symbols_in_volume": [
   "numpy.percentile",
   "tensorflow_probability.stats.percentile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_four_dimensional_input_and_keepdims": {
  "lineno": 471,
  "symbols_in_volume": [
   "numpy.percentile",
   "tensorflow_probability.stats.percentile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_four_dimensional_input_and_keepdims_x_static_ndims_dynamic_sz": {
  "lineno": 499,
  "symbols_in_volume": [
   "numpy.percentile",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.stats.percentile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_four_dimensional_input_q_vector": {
  "lineno": 449,
  "symbols_in_volume": [
   "numpy.percentile",
   "tensorflow_probability.stats.percentile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_four_dimensional_input_q_vector_and_keepdims": {
  "lineno": 460,
  "symbols_in_volume": [
   "numpy.percentile",
   "tensorflow_probability.stats.percentile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_four_dimensional_input_x_static_ndims_but_dynamic_sizes": {
  "lineno": 489,
  "symbols_in_volume": [
   "numpy.percentile",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.stats.percentile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_nan_propagation": {
  "lineno": 530,
  "symbols_in_volume": [
   "numpy.isnan",
   "numpy.percentile",
   "tensorflow.compat.v2.math.is_nan",
   "tensorflow_probability.stats.percentile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_one_dim_even_input": {
  "lineno": 385,
  "symbols_in_volume": [
   "numpy.percentile",
   "tensorflow_probability.stats.percentile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_one_dim_odd_input": {
  "lineno": 365,
  "symbols_in_volume": [
   "numpy.percentile",
   "tensorflow_probability.stats.percentile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_one_dim_odd_input_vector_q": {
  "lineno": 375,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.percentile",
   "tensorflow_probability.stats.percentile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_simple": {
  "lineno": 409,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.percentile",
   "tensorflow_probability.stats.percentile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_two_dim_even_axis_0": {
  "lineno": 419,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.percentile",
   "tensorflow_probability.stats.percentile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_two_dim_even_input_and_keep_dims_true": {
  "lineno": 429,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.percentile",
   "tensorflow_probability.stats.percentile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_two_dim_odd_input_axis_0": {
  "lineno": 394,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.percentile",
   "tensorflow_probability.stats.percentile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_with_integer_dtype": {
  "lineno": 517,
  "symbols_in_volume": [
   "numpy.percentile",
   "tensorflow.compat.v2.int32",
   "tensorflow_probability.stats.percentile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithMidpointInterpolation": {
  "lineno": 647,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithMidpointInterpolation.test_integer_dtype_raises": {
  "lineno": 652,
  "symbols_in_volume": [
   "tensorflow_probability.stats.percentile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithNearestInterpolation": {
  "lineno": 663,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithNearestInterpolation.test_2d_q_raises_dynamic": {
  "lineno": 696,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.stats.percentile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithNearestInterpolation.test_2d_q_raises_static": {
  "lineno": 691,
  "symbols_in_volume": [
   "tensorflow_probability.stats.percentile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithNearestInterpolation.test_finds_max_of_long_array": {
  "lineno": 705,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linspace",
   "tensorflow_probability.stats.percentile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithNearestInterpolation.test_invalid_interpolation_raises": {
  "lineno": 686,
  "symbols_in_volume": [
   "tensorflow_probability.stats.percentile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithNearestInterpolation.test_one_dim_even_input": {
  "lineno": 677,
  "symbols_in_volume": [
   "numpy.percentile",
   "tensorflow_probability.stats.percentile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithNearestInterpolation.test_one_dim_odd_input": {
  "lineno": 668,
  "symbols_in_volume": [
   "numpy.percentile",
   "tensorflow_probability.stats.percentile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.QuantilesTest": {
  "lineno": 716,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.stats.quantiles_test.QuantilesTest.test_deciles_of_rank_3_tensor": {
  "lineno": 727,
  "symbols_in_volume": [
   "numpy.linspace",
   "tensorflow_probability.stats.quantiles"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.QuantilesTest.test_quartiles_of_vector": {
  "lineno": 720,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linspace",
   "tensorflow_probability.stats.quantiles"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.stats.sample_stats._assert_array_equal": {
  "lineno": 756,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.assert_util.assert_equal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats._is_list_like": {
  "lineno": 771,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats._log_average_probs_maybe_check_args": {
  "lineno": 733,
  "symbols_in_volume": [
   "numpy.array_equal",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow_probability.python.internal.prefer_static.is_numpy",
   "tensorflow_probability.python.internal.prefer_static.setdiff1d"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats._log_average_probs_process_args": {
  "lineno": 715,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.prefer_static.non_negative_axis",
   "tensorflow_probability.python.internal.prefer_static.range",
   "tensorflow_probability.python.internal.prefer_static.rank",
   "tensorflow_probability.python.internal.prefer_static.reshape",
   "tensorflow_probability.python.internal.prefer_static.setdiff1d"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats._log_softmax": {
  "lineno": 699,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.math.log_softmax",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_logsumexp",
   "tensorflow_probability.python.internal.prefer_static.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats._make_list_or_1d_tensor": {
  "lineno": 776,
  "symbols_in_volume": [
   "numpy.zeros",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats._make_positive_axis": {
  "lineno": 794,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats._squeeze": {
  "lineno": 816,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.squeeze",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.prefer_static.setdiff1d"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats.auto_correlation": {
  "lineno": 46,
  "symbols_in_volume": [
   "numpy.float64",
   "numpy.int32",
   "numpy.log",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.complex",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.math.ceil",
   "tensorflow.compat.v2.math.conj",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.minimum",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.pow",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.signal.fft",
   "tensorflow.compat.v2.signal.ifft",
   "tensorflow_probability.python.internal.distribution_util.pad",
   "tensorflow_probability.python.internal.distribution_util.rotate_transpose",
   "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
   "tensorflow_probability.python.internal.dtype_util.is_complex",
   "tensorflow_probability.python.internal.dtype_util.is_floating",
   "tensorflow_probability.python.internal.dtype_util.real_dtype",
   "tensorflow_probability.python.internal.prefer_static.rank",
   "tensorflow_probability.python.internal.prefer_static.shape",
   "tensorflow_probability.python.internal.tensorshape_util.as_list",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats.cholesky_covariance": {
  "lineno": 220,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.linalg.cholesky",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats.correlation": {
  "lineno": 471,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats.covariance": {
  "lineno": 291,
  "symbols_in_volume": [
   "numpy.diff",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.math.conj",
   "tensorflow.compat.v2.math.invert_permutation",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.reduce_prod",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.size",
   "tensorflow.compat.v2.transpose",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.prefer_static.setdiff1d",
   "tensorflow_probability.python.internal.tensorshape_util.assert_is_compatible_with",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats.log_average_probs": {
  "lineno": 646,
  "symbols_in_volume": [
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.math.softplus",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.math.generic.reduce_logmeanexp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats.stddev": {
  "lineno": 557,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.sqrt"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats.variance": {
  "lineno": 607,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test": {
  "lineno": null,
  "symbols_in_volume": [
   "numpy.random.RandomState",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.stats.sample_stats_test.AutoCorrelationTestDynamicShapeFloat32": {
  "lineno": 257,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.stats.sample_stats_test.AutoCorrelationTestDynamicShapeFloat32.dtype": {
  "lineno": 261,
  "symbols_in_volume": [
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.AutoCorrelationTestDynamicShapeFloat32.use_static_shape": {
  "lineno": 265,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.AutoCorrelationTestStaticShapeComplex64": {
  "lineno": 244,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.stats.sample_stats_test.AutoCorrelationTestStaticShapeComplex64.dtype": {
  "lineno": 248,
  "symbols_in_volume": [
   "numpy.complex64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.AutoCorrelationTestStaticShapeComplex64.use_static_shape": {
  "lineno": 252,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.AutoCorrelationTestStaticShapeFloat32": {
  "lineno": 231,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.stats.sample_stats_test.AutoCorrelationTestStaticShapeFloat32.dtype": {
  "lineno": 235,
  "symbols_in_volume": [
   "numpy.float32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.AutoCorrelationTestStaticShapeFloat32.use_static_shape": {
  "lineno": 239,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CholeskyCovarianceTest": {
  "lineno": 485,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CholeskyCovarianceTest.test_batch_vector_sampaxis1_eventaxis2": {
  "lineno": 488,
  "symbols_in_volume": [
   "numpy.eye",
   "numpy.squeeze",
   "numpy.stack",
   "tensorflow_probability.stats.cholesky_covariance"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CorrelationTest": {
  "lineno": 425,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CorrelationTest._np_corr_1d": {
  "lineno": 428,
  "symbols_in_volume": [
   "numpy.sqrt"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CorrelationTest.test_batch_scalar": {
  "lineno": 436,
  "symbols_in_volume": [
   "tensorflow_probability.stats.correlation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CorrelationTest.test_batch_vector_sampaxis0_eventaxisn1": {
  "lineno": 459,
  "symbols_in_volume": [
   "tensorflow_probability.stats.correlation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CorrelationTest.test_diagonal_of_correlation_matrix_x_with_x_is_one": {
  "lineno": 450,
  "symbols_in_volume": [
   "numpy.diag",
   "numpy.float32",
   "tensorflow_probability.stats.correlation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CovarianceTest": {
  "lineno": 270,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CovarianceTest._np_cov_1d": {
  "lineno": 273,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CovarianceTest.test_batch_scalar": {
  "lineno": 276,
  "symbols_in_volume": [
   "tensorflow_probability.stats.covariance"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CovarianceTest.test_batch_vector_sampaxis02_eventaxis1": {
  "lineno": 342,
  "symbols_in_volume": [
   "numpy.reshape",
   "numpy.transpose",
   "tensorflow_probability.stats.covariance"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CovarianceTest.test_batch_vector_sampaxis03_eventaxis12_dynamic": {
  "lineno": 368,
  "symbols_in_volume": [
   "numpy.reshape",
   "numpy.transpose",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.stats.covariance"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CovarianceTest.test_batch_vector_sampaxis0_eventaxisn1": {
  "lineno": 290,
  "symbols_in_volume": [
   "tensorflow_probability.stats.covariance"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CovarianceTest.test_batch_vector_sampaxis13_eventaxis2": {
  "lineno": 315,
  "symbols_in_volume": [
   "numpy.reshape",
   "numpy.transpose",
   "tensorflow_probability.stats.covariance"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CovarianceTest.test_batch_vector_shape_dtype_ok": {
  "lineno": 416,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.stats.covariance"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CovarianceTest.test_non_contiguous_event_axis_raises": {
  "lineno": 400,
  "symbols_in_volume": [
   "tensorflow_probability.stats.covariance"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CovarianceTest.test_overlapping_axis_raises": {
  "lineno": 408,
  "symbols_in_volume": [
   "tensorflow_probability.stats.covariance"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.LogAverageProbsTest": {
  "lineno": 554,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.stats.sample_stats_test.LogAverageProbsTest.test_bad_axis_dynamic": {
  "lineno": 583,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.random.normal",
   "tensorflow_probability.stats.log_average_probs"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.LogAverageProbsTest.test_bad_axis_static": {
  "lineno": 574,
  "symbols_in_volume": [
   "tensorflow.compat.v2.random.normal",
   "tensorflow_probability.stats.log_average_probs"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.LogAverageProbsTest.test_mathematical_correctness_bernoulli": {
  "lineno": 557,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.sigmoid",
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.stats.log_average_probs"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.LogAverageProbsTest.test_mathematical_correctness_categorical": {
  "lineno": 565,
  "symbols_in_volume": [
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.math.softmax",
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow_probability.stats.log_average_probs"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.StddevTest": {
  "lineno": 534,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.stats.sample_stats_test.StddevTest.test_independent_uniform_samples": {
  "lineno": 538,
  "symbols_in_volume": [
   "numpy.std",
   "tensorflow_probability.stats.stddev"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.VarianceTest": {
  "lineno": 514,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.stats.sample_stats_test.VarianceTest.test_independent_uniform_samples": {
  "lineno": 518,
  "symbols_in_volume": [
   "numpy.var",
   "tensorflow_probability.stats.variance"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.check_results_versus_brute_force": {
  "lineno": 73,
  "symbols_in_volume": [
   "numpy.concatenate",
   "numpy.conj",
   "numpy.take",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map",
   "tensorflow_probability.stats.auto_correlation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.dtype": {
  "lineno": 43,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.test_axis_0_center_true_max_lags_none": {
  "lineno": 137,
  "symbols_in_volume": [
   "numpy.complex64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.test_axis_2_center_true_max_lags_1": {
  "lineno": 144,
  "symbols_in_volume": [
   "numpy.complex64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.test_axis_2_center_true_max_lags_100": {
  "lineno": 151,
  "symbols_in_volume": [
   "numpy.complex64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.test_axis_n1_center_false_max_lags_none": {
  "lineno": 109,
  "symbols_in_volume": [
   "numpy.complex64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.test_axis_n1_center_false_max_lags_none_normalize_true": {
  "lineno": 123,
  "symbols_in_volume": [
   "numpy.complex64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.test_axis_n2_center_false_max_lags_none": {
  "lineno": 116,
  "symbols_in_volume": [
   "numpy.complex64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.test_axis_n2_center_false_max_lags_none_normalize_true": {
  "lineno": 130,
  "symbols_in_volume": [
   "numpy.complex64"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.test_constant_sequence_axis_0_max_lags_none_center_false": {
  "lineno": 47,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map",
   "tensorflow_probability.stats.auto_correlation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.test_constant_sequence_axis_0_max_lags_none_center_true": {
  "lineno": 60,
  "symbols_in_volume": [
   "numpy.array",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map",
   "tensorflow_probability.stats.auto_correlation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.test_long_orthonormal_sequence_has_corr_length_0": {
  "lineno": 160,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.zeros",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map",
   "tensorflow_probability.stats.auto_correlation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.test_normalization": {
  "lineno": 209,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.zeros",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map",
   "tensorflow_probability.stats.auto_correlation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.test_step_function_sequence": {
  "lineno": 179,
  "symbols_in_volume": [
   "numpy.diff",
   "numpy.ones",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map",
   "tensorflow_probability.stats.auto_correlation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.use_static_shape": {
  "lineno": 39,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.python.util.all_util.remove_undocumented"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.sts.autoregressive": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.sts.autoregressive.Autoregressive": {
  "lineno": 261,
  "symbols_in_volume": [
   "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.autoregressive.Autoregressive.__init__": {
  "lineno": 287,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.bijectors.AffineScalar",
   "tensorflow_probability.python.bijectors.Chain",
   "tensorflow_probability.python.bijectors.Softplus",
   "tensorflow_probability.python.bijectors.Tanh",
   "tensorflow_probability.python.distributions.LogNormal",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.sts.internal.util.canonicalize_observed_time_series_with_mask",
   "tensorflow_probability.python.sts.internal.util.empirical_statistics",
   "tensorflow_probability.python.sts.structural_time_series.Parameter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.autoregressive.Autoregressive._make_state_space_model": {
  "lineno": 403,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.autoregressive.Autoregressive.initial_state_prior": {
  "lineno": 399,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.autoregressive.AutoregressiveStateSpaceModel": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.autoregressive.AutoregressiveStateSpaceModel.__init__": {
  "lineno": 131,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.stack",
   "tensorflow.compat.v2.zeros",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.autoregressive.AutoregressiveStateSpaceModel.coefficients": {
  "lineno": 215,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.autoregressive.AutoregressiveStateSpaceModel.level_scale": {
  "lineno": 219,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.autoregressive.AutoregressiveStateSpaceModel.order": {
  "lineno": 211,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.autoregressive.make_ar_transition_matrix": {
  "lineno": 224,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.expand_dims",
   "tensorflow.compat.v2.eye",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.autoregressive_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.sts.autoregressive_test.AutoregressiveStateSpaceModelTestDynamicShape32": {
  "lineno": 172,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.autoregressive_test.AutoregressiveStateSpaceModelTestStaticShape32": {
  "lineno": 165,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.autoregressive_test.AutoregressiveStateSpaceModelTestStaticShape64": {
  "lineno": 179,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.autoregressive_test._AutoregressiveStateSpaceModelTest": {
  "lineno": 54,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.autoregressive_test._AutoregressiveStateSpaceModelTest._build_placeholder": {
  "lineno": 148,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.autoregressive_test._AutoregressiveStateSpaceModelTest.testBatchShape": {
  "lineno": 120,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.ones",
   "numpy.random.randn",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.AutoregressiveStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.autoregressive_test._AutoregressiveStateSpaceModelTest.testEqualsLocalLevel": {
  "lineno": 56,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.random.randn",
   "tensorflow_probability.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.AutoregressiveStateSpaceModel",
   "tensorflow_probability.python.sts.LocalLevelStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.autoregressive_test._AutoregressiveStateSpaceModelTest.testLogprobCorrectness": {
  "lineno": 97,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.random.randn",
   "tensorflow.compat.v2.newaxis",
   "tensorflow_probability.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.AutoregressiveStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.autoregressive_test.ar_explicit_logp": {
  "lineno": 33,
  "symbols_in_volume": [
   "numpy.dot",
   "numpy.zeros",
   "tensorflow_probability.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.decomposition": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.sts.decomposition._decompose_from_posterior_marginals": {
  "lineno": 41,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.split",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_value",
   "tensorflow_probability.python.sts.internal.util.mix_over_posterior_draws"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.decomposition._split_covariance_into_marginals": {
  "lineno": 30,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.decomposition.decompose_by_component": {
  "lineno": 110,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_value",
   "tensorflow_probability.python.sts.internal.util.canonicalize_observed_time_series_with_mask"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.decomposition.decompose_forecast_by_component": {
  "lineno": 223,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow_probability.python.internal.distribution_util.move_dimension"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.decomposition_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.sts.decomposition_test.DecompositionTestDynamic64": {
  "lineno": 161,
  "symbols_in_volume": [
   "numpy.float64"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.decomposition_test.DecompositionTestStatic32": {
  "lineno": 154,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.decomposition_test._DecompositionTest": {
  "lineno": 31,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.decomposition_test._DecompositionTest._build_model_and_params": {
  "lineno": 33,
  "symbols_in_volume": [
   "numpy.random.randn",
   "numpy.random.seed",
   "tensorflow_probability.python.internal.test_util.test_seed_stream",
   "tensorflow_probability.sts.LocalLinearTrend",
   "tensorflow_probability.sts.Seasonal",
   "tensorflow_probability.sts.Sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.decomposition_test._DecompositionTest._build_tensor": {
  "lineno": 137,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.decomposition_test._DecompositionTest._check_component_shapes_helper": {
  "lineno": 120,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.decomposition_test._DecompositionTest._get_tensor_shape": {
  "lineno": 130,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.decomposition_test._DecompositionTest.testDecomposeByComponentSupportsBatchShape": {
  "lineno": 60,
  "symbols_in_volume": [
   "tensorflow_probability.sts.decompose_by_component"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.decomposition_test._DecompositionTest.testDecomposeByComponentSupportsMissingData": {
  "lineno": 76,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.isfinite",
   "numpy.nan",
   "numpy.zeros",
   "tensorflow_probability.sts.MaskedTimeSeries",
   "tensorflow_probability.sts.decompose_by_component"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.decomposition_test._DecompositionTest.testDecomposeForecastByComponentSupportsBatchShape": {
  "lineno": 101,
  "symbols_in_volume": [
   "tensorflow_probability.sts.decompose_forecast_by_component",
   "tensorflow_probability.sts.forecast"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.dynamic_regression": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.sts.dynamic_regression.DynamicLinearRegression": {
  "lineno": 232,
  "symbols_in_volume": [
   "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.dynamic_regression.DynamicLinearRegression.__init__": {
  "lineno": 253,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.bijectors.AffineScalar",
   "tensorflow_probability.python.bijectors.Chain",
   "tensorflow_probability.python.bijectors.Softplus",
   "tensorflow_probability.python.distributions.LogNormal",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.prefer_static.shape",
   "tensorflow_probability.python.sts.internal.util.empirical_statistics",
   "tensorflow_probability.python.sts.structural_time_series.Parameter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.dynamic_regression.DynamicLinearRegression._make_state_space_model": {
  "lineno": 335,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.dynamic_regression.DynamicLinearRegression.design_matrix": {
  "lineno": 330,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.dynamic_regression.DynamicLinearRegression.initial_state_prior": {
  "lineno": 325,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.dynamic_regression.DynamicLinearRegressionStateSpaceModel": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.dynamic_regression.DynamicLinearRegressionStateSpaceModel.__init__": {
  "lineno": 128,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.linalg.LinearOperatorIdentity",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.internal.distribution_util.move_dimension",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.internal.prefer_static.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.dynamic_regression.DynamicLinearRegressionStateSpaceModel.__init__.observation_matrix_fn": {
  "lineno": 192,
  "symbols_in_volume": [
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.linalg.LinearOperatorFullMatrix",
   "tensorflow.compat.v2.newaxis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.dynamic_regression.DynamicLinearRegressionStateSpaceModel.drift_scale": {
  "lineno": 221,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.dynamic_regression.DynamicLinearRegressionStateSpaceModel.observation_noise_scale": {
  "lineno": 226,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test.DynamicRegressionStateSpaceModelTestDynamicShape32": {
  "lineno": 153,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test.DynamicRegressionStateSpaceModelTestStaticShape32": {
  "lineno": 146,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test.DynamicRegressionStateSpaceModelTestStaticShape64": {
  "lineno": 160,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test._DynamicLinearRegressionStateSpaceModelTest": {
  "lineno": 34,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test._DynamicLinearRegressionStateSpaceModelTest._build_placeholder": {
  "lineno": 140,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test._DynamicLinearRegressionStateSpaceModelTest.test_basic_statistics_no_latent_variance": {
  "lineno": 36,
  "symbols_in_volume": [
   "numpy.random.randn",
   "tensorflow.compat.v2.linalg.matmul",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.DynamicLinearRegressionStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test._DynamicLinearRegressionStateSpaceModelTest.test_initial_state_broadcasts_over_batch": {
  "lineno": 64,
  "symbols_in_volume": [
   "numpy.random.randn",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.DynamicLinearRegressionStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test._DynamicLinearRegressionStateSpaceModelTest.test_matrices_from_component": {
  "lineno": 98,
  "symbols_in_volume": [
   "numpy.eye",
   "numpy.random.randn",
   "numpy.square",
   "numpy.zeros",
   "tensorflow.compat.v2.newaxis",
   "tensorflow_probability.python.sts.DynamicLinearRegression"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.sts.fitting._build_posterior_for_one_parameter": {
  "lineno": 69,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.fill",
   "tensorflow.compat.v2.nn.softplus",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.distributions.TransformedDistribution",
   "tensorflow_probability.python.util.DeferredTensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting.build_factored_surrogate_posterior": {
  "lineno": 98,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.distributions.JointDistributionNamed",
   "tensorflow_probability.python.distributions.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting.build_factored_variational_loss": {
  "lineno": 193,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.python.util.deprecation.deprecated",
   "tensorflow_probability.python.distributions.SeedStream",
   "tensorflow_probability.python.sts.internal.util.pad_batch_dimension_for_multiple_chains",
   "tensorflow_probability.python.vi.monte_carlo_variational_loss"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting.fit_with_hmc": {
  "lineno": 363,
  "symbols_in_volume": [
   "tensorflow.compat.v1.train.AdamOptimizer",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.distributions.SeedStream",
   "tensorflow_probability.python.sts.internal.util.pad_batch_dimension_for_multiple_chains",
   "tensorflow_probability.python.vi.fit_surrogate_posterior"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting.fit_with_hmc.run_hmc": {
  "lineno": 598,
  "symbols_in_volume": [
   "tensorflow.compat.v2.function",
   "tensorflow_probability.python.mcmc.DualAveragingStepSizeAdaptation",
   "tensorflow_probability.python.mcmc.HamiltonianMonteCarlo",
   "tensorflow_probability.python.mcmc.TransformedTransitionKernel",
   "tensorflow_probability.python.mcmc.sample_chain"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting.sample_uniform_initial_state": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.compat.v2.random.uniform",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.sts.fitting_test.HMCTestsDynamic32": {
  "lineno": 313,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.fitting_test.HMCTestsStatic32": {
  "lineno": 275,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.fitting_test.HMCTestsStatic32.test_chain_batch_shape": {
  "lineno": 284,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "numpy.random.randn",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow_probability.sts.fit_with_hmc"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting_test.HMCTestsStatic64": {
  "lineno": 319,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.fitting_test.VariationalInferenceTestsDynamic32": {
  "lineno": 146,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.fitting_test.VariationalInferenceTestsStatic64": {
  "lineno": 138,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.fitting_test._HMCTests": {
  "lineno": 152,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.sts.fitting_test._HMCTests._batch_shape_as_list": {
  "lineno": 245,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting_test._HMCTests._build_model": {
  "lineno": 154,
  "symbols_in_volume": [
   "tensorflow_probability.sts.LocalLinearTrend",
   "tensorflow_probability.sts.Seasonal",
   "tensorflow_probability.sts.Sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting_test._HMCTests._build_tensor": {
  "lineno": 257,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting_test._HMCTests._event_shape_as_list": {
  "lineno": 251,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting_test._HMCTests._shape_as_list": {
  "lineno": 239,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting_test._HMCTests.test_basic_hmc_example": {
  "lineno": 165,
  "symbols_in_volume": [
   "numpy.mean",
   "numpy.random.randn",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow_probability.sts.fit_with_hmc"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting_test._HMCTests.test_multiple_chains_example": {
  "lineno": 196,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.mean",
   "numpy.random.randn",
   "numpy.reshape",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow_probability.sts.MaskedTimeSeries",
   "tensorflow_probability.sts.fit_with_hmc"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting_test._VariationalInferenceTests": {
  "lineno": 29,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.sts.fitting_test._VariationalInferenceTests._build_model": {
  "lineno": 31,
  "symbols_in_volume": [
   "tensorflow_probability.sts.LocalLinearTrend",
   "tensorflow_probability.sts.Seasonal",
   "tensorflow_probability.sts.Sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting_test._VariationalInferenceTests._build_tensor": {
  "lineno": 120,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting_test._VariationalInferenceTests.test_basic_variational_fitting": {
  "lineno": 42,
  "symbols_in_volume": [
   "numpy.mean",
   "numpy.random.randn",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v1.train.AdamOptimizer",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow_probability.sts.build_factored_surrogate_posterior",
   "tensorflow_probability.vi.fit_surrogate_posterior"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting_test._VariationalInferenceTests.test_custom_eager_optimization_loop": {
  "lineno": 65,
  "symbols_in_volume": [
   "numpy.mean",
   "numpy.random.randn",
   "tensorflow.compat.v1.train.AdamOptimizer",
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow_probability.sts.build_factored_surrogate_posterior"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting_test._VariationalInferenceTests.test_custom_eager_optimization_loop.loss_fn": {
  "lineno": 81,
  "symbols_in_volume": [
   "tensorflow.compat.v2.function",
   "tensorflow_probability.vi.monte_carlo_variational_loss"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting_test._VariationalInferenceTests.test_init_is_valid_for_large_observations": {
  "lineno": 103,
  "symbols_in_volume": [
   "numpy.isfinite",
   "numpy.random.randn",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow_probability.sts.build_factored_variational_loss"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.forecast": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.sts.forecast._prefer_static_event_ndims": {
  "lineno": 28,
  "symbols_in_volume": [
   "tensorflow.compat.v2.size"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.forecast.forecast": {
  "lineno": 171,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.MixtureSameFamily",
   "tensorflow_probability.python.distributions.MultivariateNormalFullCovariance",
   "tensorflow_probability.python.internal.distribution_util.move_dimension",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_value",
   "tensorflow_probability.python.sts.internal.util.canonicalize_observed_time_series_with_mask"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.forecast.impute_missing_values": {
  "lineno": 362,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_value",
   "tensorflow_probability.python.sts.internal.util.canonicalize_observed_time_series_with_mask",
   "tensorflow_probability.python.sts.internal.util.mix_over_posterior_draws"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.forecast.one_step_predictive": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_value",
   "tensorflow_probability.python.sts.internal.util.canonicalize_observed_time_series_with_mask",
   "tensorflow_probability.python.sts.internal.util.mix_over_posterior_draws"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.forecast_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg",
   "tensorflow.python.platform.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.sts.forecast_test.ForecastTestDynamic32": {
  "lineno": 330,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.forecast_test.ForecastTestStatic32": {
  "lineno": 323,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.forecast_test.ForecastTestStatic64": {
  "lineno": 336,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.forecast_test._ForecastTest": {
  "lineno": 32,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.sts.forecast_test._ForecastTest._build_model": {
  "lineno": 34,
  "symbols_in_volume": [
   "numpy.zeros",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.sts.Seasonal",
   "tensorflow_probability.sts.Sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.forecast_test._ForecastTest._build_tensor": {
  "lineno": 305,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.forecast_test._ForecastTest.test_forecast_correctness": {
  "lineno": 114,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.concatenate",
   "numpy.sqrt",
   "tensorflow_probability.sts.forecast"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.forecast_test._ForecastTest.test_forecast_from_hmc": {
  "lineno": 153,
  "symbols_in_volume": [
   "numpy.random.randn",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow_probability.sts.fit_with_hmc",
   "tensorflow_probability.sts.forecast"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.forecast_test._ForecastTest.test_forecast_with_batch_shape": {
  "lineno": 189,
  "symbols_in_volume": [
   "numpy.random.randn",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow_probability.sts.forecast"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.forecast_test._ForecastTest.test_impute_missing": {
  "lineno": 257,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.nan",
   "numpy.sqrt",
   "tensorflow.compat.v2.math.is_nan",
   "tensorflow_probability.sts.MaskedTimeSeries",
   "tensorflow_probability.sts.impute_missing_values"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.forecast_test._ForecastTest.test_methods_handle_masked_inputs": {
  "lineno": 220,
  "symbols_in_volume": [
   "numpy.all",
   "numpy.bool",
   "numpy.isfinite",
   "numpy.nan",
   "numpy.random.randn",
   "tensorflow_probability.sts.MaskedTimeSeries",
   "tensorflow_probability.sts.forecast",
   "tensorflow_probability.sts.one_step_predictive"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.forecast_test._ForecastTest.test_one_step_predictive_correctness": {
  "lineno": 50,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.concatenate",
   "numpy.sqrt",
   "numpy.zeros",
   "tensorflow_probability.sts.one_step_predictive"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.forecast_test._ForecastTest.test_one_step_predictive_with_batch_shape": {
  "lineno": 91,
  "symbols_in_volume": [
   "numpy.random.randn",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow_probability.sts.one_step_predictive"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util.MaskedTimeSeries": {
  "lineno": 29,
  "symbols_in_volume": [
   "collections.namedtuple"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util.initial_value_of_masked_time_series": {
  "lineno": 147,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.reduce_max",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.squeeze"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util.moments_of_masked_time_series": {
  "lineno": 116,
  "symbols_in_volume": [
   "tensorflow.compat.v1.where",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util_test._MissingValuesUtilityTests": {
  "lineno": 30,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util_test._MissingValuesUtilityTests._build_tensor": {
  "lineno": 66,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util_test._MissingValuesUtilityTests.testInitialValueOfMaskedTimeSeries": {
  "lineno": 50,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.bool",
   "numpy.random.randn",
   "tensorflow_probability.python.sts.internal.missing_values_util.initial_value_of_masked_time_series"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util_test._MissingValuesUtilityTests.testMoments": {
  "lineno": 32,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.bool",
   "numpy.mean",
   "numpy.random.randn",
   "numpy.var",
   "tensorflow_probability.python.sts.internal.missing_values_util.moments_of_masked_time_series"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util_test._MissingValuesUtilityTestsDynamicFloat32": {
  "lineno": 84,
  "symbols_in_volume": [
   "numpy.float32"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util_test._MissingValuesUtilityTestsStaticFloat64": {
  "lineno": 89,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.internal.util": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.sts.internal.util._maybe_expand_trailing_dim": {
  "lineno": 251,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.cond",
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util.broadcast_batch_shape": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.broadcast_static_shape",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.distributions",
   "tensorflow_probability.python.distributions.batch_shape",
   "tensorflow_probability.python.distributions.batch_shape_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util.canonicalize_observed_time_series_with_mask": {
  "lineno": 291,
  "symbols_in_volume": [
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow_probability.python.sts.internal.missing_values_util.MaskedTimeSeries"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util.empirical_statistics": {
  "lineno": 198,
  "symbols_in_volume": [
   "tensorflow.compat.v1.logging.warn",
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.broadcast_to",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.nn.moments",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.python.sts.internal.missing_values_util.initial_value_of_masked_time_series",
   "tensorflow_probability.python.sts.internal.missing_values_util.moments_of_masked_time_series"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util.factored_joint_mvn": {
  "lineno": 120,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.debugging.assert_same_float_dtype",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.distributions",
   "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util.mix_over_posterior_draws": {
  "lineno": 327,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.Categorical",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.MixtureSameFamily",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.internal.distribution_util.move_dimension",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util.pad_batch_dimension_for_multiple_chains": {
  "lineno": 53,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_rank",
   "tensorflow_probability.python.internal.prefer_static.cond",
   "tensorflow_probability.python.sts.internal.missing_values_util.MaskedTimeSeries"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util.pad_batch_dimension_for_multiple_chains.do_padding": {
  "lineno": 89,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util.sum_mvns": {
  "lineno": 163,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.python.distributions",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.sts.internal.util_test.MultivariateNormalUtilsTest": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.internal.util_test.MultivariateNormalUtilsTest.test_factored_joint_mvn_broadcast_batch_shape": {
  "lineno": 63,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.standard_normal",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.ones_like",
   "tensorflow_probability.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.internal.util.factored_joint_mvn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util_test.MultivariateNormalUtilsTest.test_factored_joint_mvn_diag_full": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.distributions.MultivariateNormalDiag",
   "tensorflow_probability.distributions.MultivariateNormalFullCovariance",
   "tensorflow_probability.python.sts.internal.util.factored_joint_mvn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util_test.MultivariateNormalUtilsTest.test_sum_mvns": {
  "lineno": 106,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.float32",
   "numpy.random.standard_normal",
   "tensorflow_probability.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.internal.util.sum_mvns"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util_test.MultivariateNormalUtilsTest.test_sum_mvns_broadcast_batch_shape": {
  "lineno": 124,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.float32",
   "numpy.random.standard_normal",
   "tensorflow_probability.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.internal.util.sum_mvns"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util_test.UtilityTestsDynamicFloat32": {
  "lineno": 297,
  "symbols_in_volume": [
   "numpy.float32"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.internal.util_test.UtilityTestsStaticFloat64": {
  "lineno": 302,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.internal.util_test._UtilityTests": {
  "lineno": 148,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.internal.util_test._UtilityTests._build_tensor": {
  "lineno": 280,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util_test._UtilityTests._shape_as_list": {
  "lineno": 274,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util_test._UtilityTests.test_broadcast_batch_shape": {
  "lineno": 150,
  "symbols_in_volume": [
   "numpy.ones",
   "numpy.zeros",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.distributions",
   "tensorflow_probability.distributions.Normal",
   "tensorflow_probability.python.sts.internal.util.broadcast_batch_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util_test._UtilityTests.test_dont_pad_batch_dimension_when_input_has_no_sample_shape": {
  "lineno": 255,
  "symbols_in_volume": [
   "numpy.random.randn",
   "tensorflow_probability.distributions.Normal",
   "tensorflow_probability.python.sts.internal.util.pad_batch_dimension_for_multiple_chains",
   "tensorflow_probability.sts.LocalLevel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util_test._UtilityTests.test_empirical_statistics_accepts_masked_values": {
  "lineno": 182,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.broadcast_to",
   "numpy.random.randn",
   "tensorflow_probability.python.sts.internal.missing_values_util.MaskedTimeSeries",
   "tensorflow_probability.python.sts.internal.util.empirical_statistics"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util_test._UtilityTests.test_maybe_expand_trailing_dim": {
  "lineno": 167,
  "symbols_in_volume": [
   "numpy.zeros",
   "tensorflow_probability.python.sts.internal.util._maybe_expand_trailing_dim"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util_test._UtilityTests.test_mix_over_posterior_draws": {
  "lineno": 214,
  "symbols_in_volume": [
   "numpy.concatenate",
   "numpy.exp",
   "numpy.mean",
   "numpy.random.randn",
   "tensorflow_probability.python.sts.internal.util.mix_over_posterior_draws"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util_test._UtilityTests.test_pad_batch_dimension_when_input_has_sample_shape": {
  "lineno": 235,
  "symbols_in_volume": [
   "numpy.random.randn",
   "tensorflow_probability.distributions.Normal",
   "tensorflow_probability.python.sts.internal.util.pad_batch_dimension_for_multiple_chains",
   "tensorflow_probability.sts.LocalLevel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_level": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.sts.local_level.LocalLevel": {
  "lineno": 196,
  "symbols_in_volume": [
   "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.local_level.LocalLevel.__init__": {
  "lineno": 210,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.newaxis",
   "tensorflow_probability.python.bijectors.AffineScalar",
   "tensorflow_probability.python.bijectors.Chain",
   "tensorflow_probability.python.bijectors.Softplus",
   "tensorflow_probability.python.distributions.LogNormal",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.internal.dtype_util.common_dtype",
   "tensorflow_probability.python.sts.internal.util.empirical_statistics",
   "tensorflow_probability.python.sts.structural_time_series.Parameter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_level.LocalLevel._make_state_space_model": {
  "lineno": 284,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_level.LocalLevel.initial_state_prior": {
  "lineno": 279,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_level.LocalLevelStateSpaceModel": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.local_level.LocalLevelStateSpaceModel.__init__": {
  "lineno": 108,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.newaxis",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_level.LocalLevelStateSpaceModel.level_scale": {
  "lineno": 185,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_level.LocalLevelStateSpaceModel.observation_noise_scale": {
  "lineno": 190,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_level_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.sts.local_level_test.LocalLevelStateSpaceModelTestDynamicShape32": {
  "lineno": 113,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.local_level_test.LocalLevelStateSpaceModelTestStaticShape32": {
  "lineno": 106,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.local_level_test.LocalLevelStateSpaceModelTestStaticShape64": {
  "lineno": 120,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.local_level_test._LocalLevelStateSpaceModelTest": {
  "lineno": 35,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.local_level_test._LocalLevelStateSpaceModelTest._build_placeholder": {
  "lineno": 89,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_level_test._LocalLevelStateSpaceModelTest.test_batch_shape": {
  "lineno": 72,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.random.randn",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.LocalLevelStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_level_test._LocalLevelStateSpaceModelTest.test_logprob": {
  "lineno": 38,
  "symbols_in_volume": [
   "numpy.newaxis",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.LocalLevelStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_level_test._LocalLevelStateSpaceModelTest.test_stats": {
  "lineno": 51,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.newaxis",
   "numpy.zeros",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.LocalLevelStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_linear_trend": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.sts.local_linear_trend.LocalLinearTrend": {
  "lineno": 225,
  "symbols_in_volume": [
   "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.local_linear_trend.LocalLinearTrend.__init__": {
  "lineno": 248,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.debugging.assert_same_float_dtype",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.python.bijectors.AffineScalar",
   "tensorflow_probability.python.bijectors.Chain",
   "tensorflow_probability.python.bijectors.Softplus",
   "tensorflow_probability.python.distributions.LogNormal",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.sts.internal.util.empirical_statistics",
   "tensorflow_probability.python.sts.structural_time_series.Parameter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_linear_trend.LocalLinearTrend._make_state_space_model": {
  "lineno": 344,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_linear_trend.LocalLinearTrend.initial_state_prior": {
  "lineno": 339,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_linear_trend.LocalLinearTrendStateSpaceModel": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.local_linear_trend.LocalLinearTrendStateSpaceModel.__init__": {
  "lineno": 117,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.internal.distribution_util.get_broadcast_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_linear_trend.LocalLinearTrendStateSpaceModel.level_scale": {
  "lineno": 209,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_linear_trend.LocalLinearTrendStateSpaceModel.observation_noise_scale": {
  "lineno": 219,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_linear_trend.LocalLinearTrendStateSpaceModel.slope_scale": {
  "lineno": 214,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test.LocalLinearTrendStateSpaceModelTestDynamicShape32": {
  "lineno": 120,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test.LocalLinearTrendStateSpaceModelTestStaticShape32": {
  "lineno": 113,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test.LocalLinearTrendStateSpaceModelTestStaticShape64": {
  "lineno": 127,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test._LocalLinearTrendStateSpaceModelTest": {
  "lineno": 35,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test._LocalLinearTrendStateSpaceModelTest._build_placeholder": {
  "lineno": 96,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test._LocalLinearTrendStateSpaceModelTest.test_batch_shape": {
  "lineno": 76,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.random.randn",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.LocalLinearTrendStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test._LocalLinearTrendStateSpaceModelTest.test_logprob": {
  "lineno": 37,
  "symbols_in_volume": [
   "numpy.newaxis",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.LocalLinearTrendStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test._LocalLinearTrendStateSpaceModelTest.test_stats": {
  "lineno": 52,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.array",
   "numpy.newaxis",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.LocalLinearTrendStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.sts.regression.LinearRegression": {
  "lineno": 52,
  "symbols_in_volume": [
   "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.regression.LinearRegression.__init__": {
  "lineno": 140,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.debugging.assert_same_float_dtype",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.bijectors.Identity",
   "tensorflow_probability.python.distributions.StudentT",
   "tensorflow_probability.python.distributions.TransformedDistribution",
   "tensorflow_probability.python.sts.structural_time_series.Parameter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression.LinearRegression._make_state_space_model": {
  "lineno": 230,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel",
   "tensorflow_probability.python.internal.distribution_util.move_dimension"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression.LinearRegression.design_matrix": {
  "lineno": 225,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression.SparseLinearRegression": {
  "lineno": 260,
  "symbols_in_volume": [
   "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.regression.SparseLinearRegression.__init__": {
  "lineno": 388,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.bijectors.Identity",
   "tensorflow_probability.python.bijectors.Softplus",
   "tensorflow_probability.python.distributions.HalfNormal",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.InverseGamma",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.sts.structural_time_series.Parameter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression.SparseLinearRegression._make_state_space_model": {
  "lineno": 493,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel",
   "tensorflow_probability.python.internal.distribution_util.move_dimension"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression.SparseLinearRegression.design_matrix": {
  "lineno": 470,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression.SparseLinearRegression.params_to_weights": {
  "lineno": 479,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.sqrt"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression.SparseLinearRegression.weights_prior_scale": {
  "lineno": 475,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression._observe_timeseries_fn": {
  "lineno": 42,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression._observe_timeseries_fn.observation_noise_fn": {
  "lineno": 44,
  "symbols_in_volume": [
   "tensorflow.compat.v2.gather",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression._zero_dimensional_mvndiag": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg",
   "tensorflow.python.platform.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.sts.regression_test.LinearRegressionTestDynamicShape32": {
  "lineno": 210,
  "symbols_in_volume": [
   "numpy.float32"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.regression_test.LinearRegressionTestStaticShape64": {
  "lineno": 205,
  "symbols_in_volume": [
   "numpy.float64"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.regression_test.SparseLinearRegressionTestDynamicShape32": {
  "lineno": 220,
  "symbols_in_volume": [
   "numpy.float32"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.regression_test.SparseLinearRegressionTestStaticShape64": {
  "lineno": 215,
  "symbols_in_volume": [
   "numpy.float64"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.regression_test._LinearRegressionTest": {
  "lineno": 38,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.regression_test._LinearRegressionTest._build_placeholder": {
  "lineno": 142,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression_test._LinearRegressionTest.test_basic_statistics": {
  "lineno": 40,
  "symbols_in_volume": [
   "numpy.random.randn",
   "tensorflow.compat.v2.linalg.matmul",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow.python.framework.test_util.run_in_graph_and_eager_modes",
   "tensorflow_probability.python.sts.LinearRegression"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression_test._LinearRegressionTest.test_scalar_priors_broadcast": {
  "lineno": 112,
  "symbols_in_volume": [
   "numpy.random.randn",
   "tensorflow.python.framework.test_util.run_in_graph_and_eager_modes",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.sts.LinearRegression"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression_test._LinearRegressionTest.test_simple_regression_correctness": {
  "lineno": 63,
  "symbols_in_volume": [
   "numpy.ones",
   "numpy.random.randn",
   "numpy.zeros",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v1.train.AdamOptimizer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.linalg.matmul",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.Cauchy",
   "tensorflow_probability.python.distributions.Independent",
   "tensorflow_probability.python.distributions.LogNormal",
   "tensorflow_probability.python.sts.LinearRegression",
   "tensorflow_probability.python.sts.Sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression_test._LinearRegressionTest.test_simple_regression_correctness.build_loss": {
  "lineno": 90,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression_test._SparseLinearRegressionTest": {
  "lineno": 159,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.regression_test._SparseLinearRegressionTest._build_placeholder": {
  "lineno": 188,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression_test._SparseLinearRegressionTest.test_builds_without_errors": {
  "lineno": 161,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.int32",
   "numpy.random.randn",
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow.compat.v2.shape",
   "tensorflow.python.framework.test_util.run_in_graph_and_eager_modes",
   "tensorflow_probability.python.sts.SparseLinearRegression"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.sts.seasonal.ConstrainedSeasonalStateSpaceModel": {
  "lineno": 291,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.seasonal.ConstrainedSeasonalStateSpaceModel.__init__": {
  "lineno": 411,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.squeeze",
   "numpy.tile",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.ConstrainedSeasonalStateSpaceModel.drift_scale": {
  "lineno": 493,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.ConstrainedSeasonalStateSpaceModel.num_seasons": {
  "lineno": 503,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.ConstrainedSeasonalStateSpaceModel.num_steps_per_season": {
  "lineno": 508,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.ConstrainedSeasonalStateSpaceModel.observation_noise_scale": {
  "lineno": 498,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.Seasonal": {
  "lineno": 695,
  "symbols_in_volume": [
   "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.seasonal.Seasonal.__init__": {
  "lineno": 775,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.debugging.assert_same_float_dtype",
   "tensorflow.compat.v2.linalg.LinearOperatorFullMatrix",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.python.bijectors.AffineScalar",
   "tensorflow_probability.python.bijectors.Chain",
   "tensorflow_probability.python.bijectors.Softplus",
   "tensorflow_probability.python.distributions.LogNormal",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.distributions.MultivariateNormalFullCovariance",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.sts.internal.util.empirical_statistics",
   "tensorflow_probability.python.sts.structural_time_series.Parameter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.Seasonal._make_state_space_model": {
  "lineno": 908,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.Seasonal.constrain_mean_effect_to_zero": {
  "lineno": 888,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.Seasonal.initial_state_prior": {
  "lineno": 903,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.Seasonal.num_seasons": {
  "lineno": 893,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.Seasonal.num_steps_per_season": {
  "lineno": 898,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.SeasonalStateSpaceModel": {
  "lineno": 80,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.seasonal.SeasonalStateSpaceModel.__init__": {
  "lineno": 195,
  "symbols_in_volume": [
   "numpy.asarray",
   "numpy.squeeze",
   "numpy.tile",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.internal.docstring_util.expand_docstring"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.SeasonalStateSpaceModel.drift_scale": {
  "lineno": 270,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.SeasonalStateSpaceModel.num_seasons": {
  "lineno": 280,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.SeasonalStateSpaceModel.num_steps_per_season": {
  "lineno": 285,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.SeasonalStateSpaceModel.observation_noise_scale": {
  "lineno": 275,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.build_constrained_seasonal_transition_noise": {
  "lineno": 629,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.build_constrained_seasonal_transition_noise.seasonal_transition_noise": {
  "lineno": 684,
  "symbols_in_volume": [
   "tensorflow.compat.v2.zeros",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL",
   "tensorflow_probability.python.internal.distribution_util.pick_scalar_condition"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.build_effects_to_residuals_matrix": {
  "lineno": 530,
  "symbols_in_volume": [
   "numpy.eye",
   "numpy.linalg.inv",
   "tensorflow.compat.v2.cast"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.build_is_last_day_of_season": {
  "lineno": 514,
  "symbols_in_volume": [
   "numpy.cumsum",
   "numpy.ravel",
   "numpy.sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.build_is_last_day_of_season.is_last_day_of_season": {
  "lineno": 518,
  "symbols_in_volume": [
   "tensorflow.compat.v2.equal",
   "tensorflow.compat.v2.math.floormod",
   "tensorflow.compat.v2.reduce_any",
   "tensorflow_probability.python.internal.distribution_util.maybe_get_static_value"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.build_seasonal_transition_matrix": {
  "lineno": 574,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.concatenate",
   "numpy.eye",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.eye",
   "tensorflow.compat.v2.matmul",
   "tensorflow.compat.v2.shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.build_seasonal_transition_matrix.seasonal_transition_matrix": {
  "lineno": 598,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg.LinearOperatorFullMatrix",
   "tensorflow_probability.python.internal.distribution_util.pick_scalar_condition"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.build_seasonal_transition_noise": {
  "lineno": 608,
  "symbols_in_volume": [
   "tensorflow.compat.v2.stack",
   "tensorflow.compat.v2.zeros_like"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.build_seasonal_transition_noise.seasonal_transition_noise": {
  "lineno": 618,
  "symbols_in_volume": [
   "tensorflow.compat.v2.zeros",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.internal.distribution_util.pick_scalar_condition"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.sts.seasonal_test.ConstrainedSeasonalStateSpaceModelTestDynamicShape32": {
  "lineno": 393,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.seasonal_test.ConstrainedSeasonalStateSpaceModelTestStaticShape32": {
  "lineno": 386,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.seasonal_test.ConstrainedSeasonalStateSpaceModelTestStaticShape64": {
  "lineno": 400,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.seasonal_test.SeasonalStateSpaceModelTestDynamicShape32": {
  "lineno": 298,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.seasonal_test.SeasonalStateSpaceModelTestStaticShape32": {
  "lineno": 292,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.seasonal_test.SeasonalStateSpaceModelTestStaticShape64": {
  "lineno": 304,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.seasonal_test._ConstrainedSeasonalStateSpaceModelTest": {
  "lineno": 310,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.seasonal_test._ConstrainedSeasonalStateSpaceModelTest._build_placeholder": {
  "lineno": 369,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal_test._ConstrainedSeasonalStateSpaceModelTest.test_batch_shape": {
  "lineno": 314,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.random.randn",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.ConstrainedSeasonalStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal_test._SeasonalStateSpaceModelTest": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.seasonal_test._SeasonalStateSpaceModelTest._build_placeholder": {
  "lineno": 275,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal_test._SeasonalStateSpaceModelTest.test_batch_shape": {
  "lineno": 222,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.random.randn",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.SeasonalStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal_test._SeasonalStateSpaceModelTest.test_day_of_week_example": {
  "lineno": 38,
  "symbols_in_volume": [
   "numpy.ones",
   "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.SeasonalStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal_test._SeasonalStateSpaceModelTest.test_month_of_year_example": {
  "lineno": 91,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.linspace",
   "numpy.ones",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.SeasonalStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal_test._SeasonalStateSpaceModelTest.test_month_of_year_with_leap_day_example": {
  "lineno": 155,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.linspace",
   "numpy.ones",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.SeasonalStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrend": {
  "lineno": 300,
  "symbols_in_volume": [
   "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrend.__init__": {
  "lineno": 326,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.stack",
   "tensorflow_probability.python.bijectors.AffineScalar",
   "tensorflow_probability.python.bijectors.Chain",
   "tensorflow_probability.python.bijectors.Identity",
   "tensorflow_probability.python.bijectors.Sigmoid",
   "tensorflow_probability.python.bijectors.Softplus",
   "tensorflow_probability.python.bijectors.Tanh",
   "tensorflow_probability.python.distributions.LogNormal",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.sts.internal.util.empirical_statistics",
   "tensorflow_probability.python.sts.structural_time_series.Parameter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrend._make_state_space_model": {
  "lineno": 458,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrend.initial_state_prior": {
  "lineno": 453,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrendStateSpaceModel": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrendStateSpaceModel.__init__": {
  "lineno": 127,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.newaxis",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrendStateSpaceModel.autoregressive_coef": {
  "lineno": 233,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrendStateSpaceModel.level_scale": {
  "lineno": 221,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrendStateSpaceModel.observation_noise_scale": {
  "lineno": 237,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrendStateSpaceModel.slope_mean": {
  "lineno": 225,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrendStateSpaceModel.slope_scale": {
  "lineno": 229,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.semilocal_linear_trend_transition_matrix": {
  "lineno": 242,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.linalg.LinearOperatorFullMatrix",
   "tensorflow.compat.v2.newaxis"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.semilocal_linear_trend_transition_noise": {
  "lineno": 267,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.stack",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.internal.distribution_util.get_broadcast_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test.SemiLocalLinearTrendStateSpaceModelTestDynamicShape32": {
  "lineno": 196,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test.SemiLocalLinearTrendStateSpaceModelTestStaticShape32": {
  "lineno": 189,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test.SemiLocalLinearTrendStateSpaceModelTestStaticShape64": {
  "lineno": 203,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test._SemiLocalLinearTrendStateSpaceModelTest": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test._SemiLocalLinearTrendStateSpaceModelTest._build_placeholder": {
  "lineno": 172,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test._SemiLocalLinearTrendStateSpaceModelTest.test_batch_shape": {
  "lineno": 141,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.random.randn",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.SemiLocalLinearTrendStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test._SemiLocalLinearTrendStateSpaceModelTest.test_logprob": {
  "lineno": 37,
  "symbols_in_volume": [
   "numpy.newaxis",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.SemiLocalLinearTrendStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test._SemiLocalLinearTrendStateSpaceModelTest.test_matches_locallineartrend": {
  "lineno": 55,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.LocalLinearTrendStateSpaceModel",
   "tensorflow_probability.python.sts.SemiLocalLinearTrendStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test._SemiLocalLinearTrendStateSpaceModelTest.test_slope_mean_and_variance": {
  "lineno": 97,
  "symbols_in_volume": [
   "numpy.sqrt",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.SemiLocalLinearTrendStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.smooth_seasonal": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.sts.smooth_seasonal.SmoothSeasonal": {
  "lineno": 321,
  "symbols_in_volume": [
   "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.smooth_seasonal.SmoothSeasonal.__init__": {
  "lineno": 364,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.bijectors.AffineScalar",
   "tensorflow_probability.python.bijectors.Chain",
   "tensorflow_probability.python.bijectors.Softplus",
   "tensorflow_probability.python.distributions.LogNormal",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.internal.util.empirical_statistics",
   "tensorflow_probability.python.sts.structural_time_series.Parameter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.smooth_seasonal.SmoothSeasonal._make_state_space_model": {
  "lineno": 455,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.smooth_seasonal.SmoothSeasonal.frequency_multipliers": {
  "lineno": 445,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.smooth_seasonal.SmoothSeasonal.initial_state_prior": {
  "lineno": 450,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.smooth_seasonal.SmoothSeasonal.period": {
  "lineno": 440,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.smooth_seasonal.SmoothSeasonalStateSpaceModel": {
  "lineno": 33,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.smooth_seasonal.SmoothSeasonalStateSpaceModel.__init__": {
  "lineno": 151,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.tile",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.internal.dtype_util.common_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.smooth_seasonal.SmoothSeasonalStateSpaceModel.drift_scale": {
  "lineno": 258,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.smooth_seasonal.SmoothSeasonalStateSpaceModel.frequency_multipliers": {
  "lineno": 273,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.smooth_seasonal.SmoothSeasonalStateSpaceModel.observation_noise_scale": {
  "lineno": 263,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.smooth_seasonal.SmoothSeasonalStateSpaceModel.period": {
  "lineno": 268,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.smooth_seasonal.build_smooth_seasonal_transition_matrix": {
  "lineno": 279,
  "symbols_in_volume": [
   "numpy.pi",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.cos",
   "tensorflow.compat.v2.linalg.LinearOperatorBlockDiag",
   "tensorflow.compat.v2.linalg.LinearOperatorFullMatrix",
   "tensorflow.compat.v2.reshape",
   "tensorflow.compat.v2.sin",
   "tensorflow.compat.v2.stack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.smooth_seasonal.static_num_frequencies": {
  "lineno": 304,
  "symbols_in_volume": [
   "tensorflow.compat.v2.compat.dimension_value",
   "tensorflow.compat.v2.convert_to_tensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.smooth_seasonal_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.sts.smooth_seasonal_test.SmoothSeasonalStateSpaceModelTestDynamicShape32": {
  "lineno": 150,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.smooth_seasonal_test.SmoothSeasonalStateSpaceModelTestStaticShape32": {
  "lineno": 143,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.smooth_seasonal_test.SmoothSeasonalStateSpaceModelTestStaticShape64": {
  "lineno": 157,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.smooth_seasonal_test._SmoothSeasonalStateSpaceModelTest": {
  "lineno": 34,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.sts.smooth_seasonal_test._SmoothSeasonalStateSpaceModelTest._build_placeholder": {
  "lineno": 137,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.smooth_seasonal_test._SmoothSeasonalStateSpaceModelTest.test_accepts_tensor_valued_period_and_frequency_multipliers": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.python.sts.SmoothSeasonal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.smooth_seasonal_test._SmoothSeasonalStateSpaceModelTest.test_basic_statistics_no_latent_variance_one_frequency": {
  "lineno": 51,
  "symbols_in_volume": [
   "numpy.ones",
   "tensorflow.compat.v2.cos",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.sin",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.SmoothSeasonalStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.smooth_seasonal_test._SmoothSeasonalStateSpaceModelTest.test_matrices_from_component": {
  "lineno": 83,
  "symbols_in_volume": [
   "numpy.eye",
   "numpy.pi",
   "numpy.square",
   "numpy.zeros",
   "tensorflow.compat.v2.cos",
   "tensorflow.compat.v2.linalg.LinearOperatorBlockDiag",
   "tensorflow.compat.v2.linalg.LinearOperatorFullMatrix",
   "tensorflow.compat.v2.sin",
   "tensorflow_probability.python.sts.SmoothSeasonal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series": {
  "lineno": null,
  "symbols_in_volume": [
   "collections.namedtuple",
   "tensorflow.compat.v2.linalg"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries": {
  "lineno": 35,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries.__init__": {
  "lineno": 47,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries._canonicalize_param_vals_as_map": {
  "lineno": 112,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries.batch_shape": {
  "lineno": 80,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.broadcast_static_shape"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries.batch_shape_tensor": {
  "lineno": 97,
  "symbols_in_volume": [
   "tensorflow.compat.v2.broadcast_dynamic_shape",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.int32"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries.joint_log_prob": {
  "lineno": 212,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.internal.distribution_util.prefer_static_value",
   "tensorflow_probability.python.sts.internal.util.canonicalize_observed_time_series_with_mask"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries.joint_log_prob.log_joint_fn": {
  "lineno": 247,
  "symbols_in_volume": [
   "tensorflow.compat.v2.maximum",
   "tensorflow.compat.v2.range",
   "tensorflow.compat.v2.rank",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries.latent_size": {
  "lineno": 70,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries.make_state_space_model": {
  "lineno": 135,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries.name": {
  "lineno": 75,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries.parameters": {
  "lineno": 65,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries.prior_sample": {
  "lineno": 162,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow_probability.python.distributions.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.AutoregressiveTest": {
  "lineno": 258,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.AutoregressiveTest._build_sts": {
  "lineno": 261,
  "symbols_in_volume": [
   "tensorflow_probability.python.sts.Autoregressive"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.DynamicLinearRegressionTest": {
  "lineno": 402,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.DynamicLinearRegressionTest._build_sts": {
  "lineno": 405,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.randn",
   "tensorflow_probability.python.sts.DynamicLinearRegression"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.LinearRegressionTest": {
  "lineno": 348,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.LinearRegressionTest._build_sts": {
  "lineno": 351,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.randn",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.bijectors.Identity",
   "tensorflow_probability.python.distributions.Laplace",
   "tensorflow_probability.python.distributions.TransformedDistribution",
   "tensorflow_probability.python.sts.LinearRegression",
   "tensorflow_probability.python.sts.Sum",
   "tensorflow_probability.python.sts.internal.util.canonicalize_observed_time_series_with_mask"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.LocalLevelTest": {
  "lineno": 265,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.LocalLevelTest._build_sts": {
  "lineno": 268,
  "symbols_in_volume": [
   "tensorflow_probability.python.sts.LocalLevel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.LocalLinearTrendTest": {
  "lineno": 272,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.LocalLinearTrendTest._build_sts": {
  "lineno": 275,
  "symbols_in_volume": [
   "tensorflow_probability.python.sts.LocalLinearTrend"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SeasonalTest": {
  "lineno": 279,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SeasonalTest._build_sts": {
  "lineno": 282,
  "symbols_in_volume": [
   "tensorflow_probability.python.sts.Seasonal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SeasonalWithMultipleStepsAndNoiseTest": {
  "lineno": 306,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SeasonalWithMultipleStepsAndNoiseTest._build_sts": {
  "lineno": 310,
  "symbols_in_volume": [
   "tensorflow_probability.sts.Seasonal",
   "tensorflow_probability.sts.Sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SeasonalWithZeroMeanConstraintTest": {
  "lineno": 296,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SeasonalWithZeroMeanConstraintTest._build_sts": {
  "lineno": 299,
  "symbols_in_volume": [
   "tensorflow_probability.python.sts.Seasonal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SemiLocalLinearTrendTest": {
  "lineno": 319,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SemiLocalLinearTrendTest._build_sts": {
  "lineno": 322,
  "symbols_in_volume": [
   "tensorflow_probability.python.sts.SemiLocalLinearTrend"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SmoothSeasonalTest": {
  "lineno": 326,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SmoothSeasonalTest._build_sts": {
  "lineno": 329,
  "symbols_in_volume": [
   "tensorflow_probability.python.sts.SmoothSeasonal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SparseLinearRegressionTest": {
  "lineno": 377,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SparseLinearRegressionTest._build_sts": {
  "lineno": 380,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.randn",
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.sts.SparseLinearRegression",
   "tensorflow_probability.python.sts.Sum",
   "tensorflow_probability.python.sts.internal.util.canonicalize_observed_time_series_with_mask"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.StructuralTimeSeriesTestsDynamicShape32": {
  "lineno": 117,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.StructuralTimeSeriesTestsStaticShape32": {
  "lineno": 110,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.StructuralTimeSeriesTestsStaticShape64": {
  "lineno": 124,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SumTest": {
  "lineno": 335,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SumTest._build_sts": {
  "lineno": 338,
  "symbols_in_volume": [
   "tensorflow_probability.python.sts.LocalLinearTrend",
   "tensorflow_probability.python.sts.Sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test._StructuralTimeSeriesTests": {
  "lineno": 44,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test._StructuralTimeSeriesTests._build_placeholder": {
  "lineno": 89,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test._StructuralTimeSeriesTests.test_broadcast_batch_shapes": {
  "lineno": 46,
  "symbols_in_volume": [
   "numpy.random.randn",
   "tensorflow.compat.v2.ones_like",
   "tensorflow_probability.python.distributions.LogNormal",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.python.sts.LocalLinearTrend",
   "tensorflow_probability.python.sts.Seasonal",
   "tensorflow_probability.python.sts.Sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test._StsTestHarness": {
  "lineno": 131,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test._StsTestHarness.test_default_priors_follow_batch_shapes": {
  "lineno": 233,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.randn",
   "tensorflow_probability.python.internal.test_util.test_seed_stream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test._StsTestHarness.test_log_joint": {
  "lineno": 157,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.random.standard_normal",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.internal.test_util.test_seed_stream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test._StsTestHarness.test_log_joint_with_missing_observations": {
  "lineno": 198,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.bool",
   "numpy.float32",
   "numpy.inf",
   "numpy.isfinite",
   "numpy.nan",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.internal.test_util.test_seed_stream",
   "tensorflow_probability.sts.MaskedTimeSeries"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test._StsTestHarness.test_prior_sample": {
  "lineno": 221,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test._StsTestHarness.test_state_space_model": {
  "lineno": 133,
  "symbols_in_volume": [
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.internal.test_util.test_seed_stream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.sts.sum.AdditiveStateSpaceModel": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.sum.AdditiveStateSpaceModel.__init__": {
  "lineno": 160,
  "symbols_in_volume": [
   "tensorflow.compat.v1.assert_equal",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.concat",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.debugging.assert_same_float_dtype",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.int32",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones",
   "tensorflow_probability.python.sts.internal.util.broadcast_batch_shape",
   "tensorflow_probability.python.sts.internal.util.factored_joint_mvn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum.AdditiveStateSpaceModel.__init__.observation_matrix_fn": {
  "lineno": 291,
  "symbols_in_volume": [
   "tensorflow.compat.v2.concat"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum.AdditiveStateSpaceModel.__init__.observation_noise_fn": {
  "lineno": 309,
  "symbols_in_volume": [
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.python.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.internal.util.sum_mvns"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum.AdditiveStateSpaceModel.__init__.transition_matrix_fn": {
  "lineno": 268,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum.AdditiveStateSpaceModel.__init__.transition_noise_fn": {
  "lineno": 273,
  "symbols_in_volume": [
   "tensorflow_probability.python.sts.internal.util.factored_joint_mvn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum.Sum": {
  "lineno": 330,
  "symbols_in_volume": [
   "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.sum.Sum.__init__": {
  "lineno": 379,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.math.log",
   "tensorflow_probability.python.bijectors.AffineScalar",
   "tensorflow_probability.python.bijectors.Chain",
   "tensorflow_probability.python.bijectors.Softplus",
   "tensorflow_probability.python.distributions.LogNormal",
   "tensorflow_probability.python.sts.internal.util.empirical_statistics",
   "tensorflow_probability.python.sts.structural_time_series.Parameter"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum.Sum._make_state_space_model": {
  "lineno": 522,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum.Sum.components": {
  "lineno": 464,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum.Sum.components_by_name": {
  "lineno": 469,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum.Sum.constant_offset": {
  "lineno": 474,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum.Sum.make_component_state_space_models": {
  "lineno": 479,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.linalg",
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.sts.sum_test.AdditiveStateSpaceModelTestDynamicShape32": {
  "lineno": 430,
  "symbols_in_volume": [
   "numpy.float32"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.sum_test.AdditiveStateSpaceModelTestDynamicShape32.test_dynamic_num_timesteps": {
  "lineno": 434,
  "symbols_in_volume": [
   "tensorflow.compat.v1.placeholder_with_default",
   "tensorflow_probability.python.sts.AdditiveStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test.AdditiveStateSpaceModelTestStaticShape32": {
  "lineno": 424,
  "symbols_in_volume": [
   "numpy.float32",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.sum_test.AdditiveStateSpaceModelTestStaticShape64": {
  "lineno": 453,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest._build_placeholder": {
  "lineno": 374,
  "symbols_in_volume": [
   "numpy.asarray",
   "tensorflow.compat.v1.placeholder_with_default"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest._dummy_model": {
  "lineno": 392,
  "symbols_in_volume": [
   "numpy.eye",
   "numpy.ones",
   "numpy.random.standard_normal",
   "tensorflow_probability.distributions.LinearGaussianStateSpaceModel",
   "tensorflow_probability.distributions.MultivariateNormalDiag"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest.test_batch_shape": {
  "lineno": 159,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.sts.AdditiveStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest.test_batch_shape_ignores_component_state_priors": {
  "lineno": 349,
  "symbols_in_volume": [
   "numpy.ones",
   "tensorflow_probability.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.AdditiveStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest.test_broadcasting_batch_shape": {
  "lineno": 217,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.sts.AdditiveStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest.test_broadcasting_correctness": {
  "lineno": 240,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.ones",
   "numpy.random.randn",
   "tensorflow_probability.distributions.LinearGaussianStateSpaceModel",
   "tensorflow_probability.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.AdditiveStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest.test_constant_offset": {
  "lineno": 319,
  "symbols_in_volume": [
   "tensorflow_probability.python.sts.AdditiveStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest.test_identity": {
  "lineno": 38,
  "symbols_in_volume": [
   "numpy.newaxis",
   "tensorflow_probability.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.AdditiveStateSpaceModel",
   "tensorflow_probability.python.sts.LocalLinearTrendStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest.test_mismatched_dtype_error": {
  "lineno": 312,
  "symbols_in_volume": [
   "numpy.float16",
   "tensorflow_probability.python.sts.AdditiveStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest.test_mismatched_num_timesteps_error": {
  "lineno": 202,
  "symbols_in_volume": [
   "tensorflow_probability.python.sts.AdditiveStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest.test_mismatched_observation_size_error": {
  "lineno": 299,
  "symbols_in_volume": [
   "tensorflow_probability.python.sts.AdditiveStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest.test_multivariate_observations": {
  "lineno": 174,
  "symbols_in_volume": [
   "tensorflow.compat.v2.shape",
   "tensorflow_probability.python.sts.AdditiveStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest.test_nesting_additive_ssms": {
  "lineno": 59,
  "symbols_in_volume": [
   "tensorflow_probability.python.sts.AdditiveStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest.test_sum_of_local_linear_trends": {
  "lineno": 94,
  "symbols_in_volume": [
   "numpy.float32",
   "numpy.newaxis",
   "numpy.sqrt",
   "tensorflow_probability.distributions.MultivariateNormalDiag",
   "tensorflow_probability.python.sts.AdditiveStateSpaceModel",
   "tensorflow_probability.python.sts.LocalLinearTrendStateSpaceModel"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.python.util.all_util.remove_undocumented"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.bernoulli": {
  "lineno": 218,
  "symbols_in_volume": [
   "tensorflow.compat.v1.layers.dense",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.squeeze",
   "tensorflow.python.util.deprecation.deprecated",
   "tensorflow_probability.python.distributions.Bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.multivariate_normal_tril": {
  "lineno": 105,
  "symbols_in_volume": [
   "tensorflow.compat.v1.layers.dense",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.python.util.deprecation.deprecated",
   "tensorflow_probability.python.distributions.MultivariateNormalTriL"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.normal": {
  "lineno": 307,
  "symbols_in_volume": [
   "tensorflow.compat.v1.layers.dense",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.squeeze",
   "tensorflow.python.util.deprecation.deprecated",
   "tensorflow_probability.python.distributions.Normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.poisson": {
  "lineno": 418,
  "symbols_in_volume": [
   "tensorflow.compat.v1.layers.dense",
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.squeeze",
   "tensorflow.python.util.deprecation.deprecated",
   "tensorflow_probability.python.distributions.Poisson"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.softplus_and_shift": {
  "lineno": 45,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.nn.softplus",
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.tril_with_diag_softplus_and_shift": {
  "lineno": 72,
  "symbols_in_volume": [
   "tensorflow.compat.v1.name_scope",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.linalg.set_diag",
   "tensorflow.python.util.deprecation.deprecated",
   "tensorflow_probability.python.math.fill_triangular"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestBernoulli": {
  "lineno": 119,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestBernoulli.setUp": {
  "lineno": 122,
  "symbols_in_volume": [
   "numpy.random.seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestBernoulli.testDefaultsYieldCorrectShape": {
  "lineno": 125,
  "symbols_in_volume": [
   "numpy.concatenate",
   "numpy.random.randn",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.trainable_distributions.bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestBernoulli.testNonDefaultsYieldCorrectShapeAndValues": {
  "lineno": 148,
  "symbols_in_volume": [
   "numpy.concatenate",
   "numpy.random.randn",
   "numpy.sum",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.trainable_distributions.bernoulli"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestMVNTriL": {
  "lineno": 32,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestMVNTriL.setUp": {
  "lineno": 35,
  "symbols_in_volume": [
   "numpy.random.seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestMVNTriL.testDefaultsYieldCorrectShapesAndValues": {
  "lineno": 38,
  "symbols_in_volume": [
   "numpy.bool",
   "numpy.concatenate",
   "numpy.ones_like",
   "numpy.random.randn",
   "numpy.zeros_like",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.linalg.band_part",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.linalg.set_diag",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.trainable_distributions.multivariate_normal_tril"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestMVNTriL.testNonDefaultsYieldCorrectShapesAndValues": {
  "lineno": 75,
  "symbols_in_volume": [
   "numpy.concatenate",
   "numpy.random.randn",
   "numpy.zeros_like",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.linalg.band_part",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.zeros_like",
   "tensorflow_probability.math.fill_triangular",
   "tensorflow_probability.trainable_distributions.multivariate_normal_tril"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestMakePositiveFunctions": {
  "lineno": 296,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestMakePositiveFunctions.softplus": {
  "lineno": 299,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.log1p"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestMakePositiveFunctions.testPositiveTriLWorks": {
  "lineno": 302,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.float32",
   "tensorflow_probability.trainable_distributions.tril_with_diag_softplus_and_shift"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestMakePositiveFunctions.testPositiveWorks": {
  "lineno": 320,
  "symbols_in_volume": [
   "numpy.arange",
   "numpy.float32",
   "tensorflow_probability.trainable_distributions.softplus_and_shift"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestNormal": {
  "lineno": 178,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestNormal.setUp": {
  "lineno": 181,
  "symbols_in_volume": [
   "numpy.random.seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestNormal.testDefaultsYieldCorrectShape": {
  "lineno": 184,
  "symbols_in_volume": [
   "numpy.concatenate",
   "numpy.random.randn",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.trainable_distributions.normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestNormal.testNonDefaultsYieldCorrectShapeAndValues": {
  "lineno": 207,
  "symbols_in_volume": [
   "numpy.concatenate",
   "numpy.random.randn",
   "numpy.sum",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.trainable_distributions.normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestPoisson": {
  "lineno": 237,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestPoisson.setUp": {
  "lineno": 240,
  "symbols_in_volume": [
   "numpy.random.seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestPoisson.testDefaultsYieldCorrectShape": {
  "lineno": 243,
  "symbols_in_volume": [
   "numpy.concatenate",
   "numpy.random.randn",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.trainable_distributions.poisson"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestPoisson.testNonDefaultsYieldCorrectShapeAndValues": {
  "lineno": 266,
  "symbols_in_volume": [
   "numpy.concatenate",
   "numpy.random.randn",
   "numpy.sum",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.trainable_distributions.poisson"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.util": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.python.util.all_util.remove_undocumented"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.util.deferred_tensor": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.util.deferred_tensor.DeferredTensor": {
  "lineno": 91,
  "symbols_in_volume": [
   "six.add_metaclass",
   "tensorflow.compat.v2.Module"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.util.deferred_tensor.DeferredTensor.__getitem__": {
  "lineno": 251,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.util.deferred_tensor.DeferredTensor.__init__": {
  "lineno": 135,
  "symbols_in_volume": [
   "tensorflow.compat.v2.TensorShape",
   "tensorflow_probability.python.internal.dtype_util.base_dtype",
   "tensorflow_probability.python.internal.name_util.camel_to_lower_snake",
   "tensorflow_probability.python.internal.name_util.get_name_scope_name",
   "tensorflow_probability.python.internal.name_util.strip_invalid_chars"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.util.deferred_tensor.DeferredTensor.__repr__": {
  "lineno": 244,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.util.deferred_tensor.DeferredTensor._value": {
  "lineno": 254,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.python.internal.dtype_util.base_dtype",
   "tensorflow_probability.python.internal.dtype_util.name",
   "tensorflow_probability.python.internal.tensorshape_util.is_compatible_with"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.util.deferred_tensor.DeferredTensor.dtype": {
  "lineno": 206,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.util.deferred_tensor.DeferredTensor.get_shape": {
  "lineno": 217,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.util.deferred_tensor.DeferredTensor.name": {
  "lineno": 221,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.util.deferred_tensor.DeferredTensor.pretransformed_input": {
  "lineno": 201,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.util.deferred_tensor.DeferredTensor.set_shape": {
  "lineno": 226,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.util.deferred_tensor.DeferredTensor.shape": {
  "lineno": 211,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.util.deferred_tensor.DeferredTensor.transform_fn": {
  "lineno": 196,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.util.deferred_tensor.TensorMetaClass": {
  "lineno": 64,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.util.deferred_tensor.TensorMetaClass.__new__": {
  "lineno": 67,
  "symbols_in_volume": [
   "tensorflow.compat.v2.Tensor",
   "tensorflow.compat.v2.Tensor.OVERLOADABLE_OPERATORS",
   "tensorflow.compat.v2.register_tensor_conversion_function"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.util.deferred_tensor._tensorize": {
  "lineno": 59,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.util.deferred_tensor._wrap_method": {
  "lineno": 34,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.util.deferred_tensor._wrap_method.wrapped": {
  "lineno": 53,
  "symbols_in_volume": [
   "functools.wraps"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.util.deferred_tensor_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.util.deferred_tensor_test.DeferredTensorBehavesLikeTensorTest": {
  "lineno": 63,
  "symbols_in_volume": [
   "absl.testing.parameterized.TestCase",
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.util.deferred_tensor_test.DeferredTensorBehavesLikeTensorTest.testArrayPriority": {
  "lineno": 67,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.math.exp",
   "tensorflow_probability.util.DeferredTensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.util.deferred_tensor_test.DeferredTensorBehavesLikeTensorTest.testOperatorBinary": {
  "lineno": 73,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "operator.add",
   "operator.floordiv",
   "operator.ge",
   "operator.gt",
   "operator.le",
   "operator.lt",
   "operator.mod",
   "operator.mul",
   "operator.pow",
   "operator.sub",
   "operator.truediv",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.math.exp",
   "tensorflow_probability.util.DeferredTensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.util.deferred_tensor_test.DeferredTensorBehavesLikeTensorTest.testOperatorBinaryLogical": {
  "lineno": 108,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "operator.and_",
   "operator.or_",
   "operator.xor",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.cast",
   "tensorflow_probability.util.DeferredTensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.util.deferred_tensor_test.DeferredTensorBehavesLikeTensorTest.testOperatorBoolNonzero": {
  "lineno": 132,
  "symbols_in_volume": [
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.cast",
   "tensorflow_probability.util.DeferredTensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.util.deferred_tensor_test.DeferredTensorBehavesLikeTensorTest.testOperatorGetitem": {
  "lineno": 139,
  "symbols_in_volume": [
   "numpy.exp",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.math.exp",
   "tensorflow_probability.util.DeferredTensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.util.deferred_tensor_test.DeferredTensorBehavesLikeTensorTest.testOperatorIter": {
  "lineno": 144,
  "symbols_in_volume": [
   "numpy.exp",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.math.exp",
   "tensorflow_probability.util.DeferredTensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.util.deferred_tensor_test.DeferredTensorBehavesLikeTensorTest.testOperatorUnary": {
  "lineno": 99,
  "symbols_in_volume": [
   "absl.testing.parameterized.parameters",
   "operator.abs",
   "operator.neg",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.identity",
   "tensorflow_probability.util.DeferredTensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.util.deferred_tensor_test.DeferredTensorBehavesLikeTensorTest.testOperatorUnaryLogical": {
  "lineno": 126,
  "symbols_in_volume": [
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow_probability.util.DeferredTensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.util.deferred_tensor_test.DeferredTensorTest": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.util.deferred_tensor_test.DeferredTensorTest.test_docstring_example": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.math.exp",
   "tensorflow_probability.python.distributions.Normal",
   "tensorflow_probability.util.DeferredTensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.util.deferred_tensor_test.DeferredTensorTest.test_properties": {
  "lineno": 51,
  "symbols_in_volume": [
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.math.exp",
   "tensorflow_probability.util.DeferredTensor"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.util.seed_stream": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.util.seed_stream.SeedStream": {
  "lineno": 29,
  "symbols_in_volume": [],
  "type": "class"
 },
 "tensorflow_probability.python.util.seed_stream.SeedStream.__call__": {
  "lineno": 181,
  "symbols_in_volume": [
   "hashlib.sha512"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.util.seed_stream.SeedStream.__init__": {
  "lineno": 164,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.util.seed_stream.SeedStream._call_jax": {
  "lineno": 205,
  "symbols_in_volume": [
   "hashlib.sha512",
   "jax.random.fold_in"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.util.seed_stream.SeedStream.original_seed": {
  "lineno": 219,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.util.seed_stream.SeedStream.salt": {
  "lineno": 223,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.util.seed_stream_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.util.seed_stream_test.SeedStreamTest": {
  "lineno": 28,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.util.seed_stream_test.SeedStreamTest.assertAllUnique": {
  "lineno": 31,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.util.seed_stream_test.SeedStreamTest.testInitFromOtherSeedStream": {
  "lineno": 72,
  "symbols_in_volume": [
   "tensorflow_probability.util.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.util.seed_stream_test.SeedStreamTest.testNestingRobustness": {
  "lineno": 62,
  "symbols_in_volume": [
   "tensorflow_probability.util.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.util.seed_stream_test.SeedStreamTest.testNonRepetition": {
  "lineno": 34,
  "symbols_in_volume": [
   "tensorflow_probability.util.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.util.seed_stream_test.SeedStreamTest.testReproducibility": {
  "lineno": 42,
  "symbols_in_volume": [
   "tensorflow_probability.util.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.util.seed_stream_test.SeedStreamTest.testSaltedDistinctness": {
  "lineno": 56,
  "symbols_in_volume": [
   "tensorflow_probability.util.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.util.seed_stream_test.SeedStreamTest.testSeededDistinctness": {
  "lineno": 50,
  "symbols_in_volume": [
   "tensorflow_probability.util.SeedStream"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.version": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.vi": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.python.util.all_util.remove_undocumented"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.vi.csiszar_divergence": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.amari_alpha": {
  "lineno": 58,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.get_static_value",
   "tensorflow.compat.v2.math.expm1",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.arithmetic_geometric": {
  "lineno": 285,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.nn.softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.chi_square": {
  "lineno": 596,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.expm1",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.csiszar_vimco": {
  "lineno": 1086,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.nest.map_structure",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.stop_gradient",
   "tensorflow_probability.python.internal.nest_util.call_fn",
   "tensorflow_probability.python.stats.leave_one_out.log_soomean_exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.csiszar_vimco_helper": {
  "lineno": 1188,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.python.util.deprecation.deprecated",
   "tensorflow_probability.python.stats.leave_one_out.log_soomean_exp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.dual_csiszar_function": {
  "lineno": 672,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.jeffreys": {
  "lineno": 558,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.expm1",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.jensen_shannon": {
  "lineno": 225,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.nn.softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.kl_forward": {
  "lineno": 177,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.kl_reverse": {
  "lineno": 129,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.log1p_abs": {
  "lineno": 514,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.expm1",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.modified_gan": {
  "lineno": 628,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.expm1",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.nn.softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.monte_carlo_csiszar_f_divergence": {
  "lineno": 972,
  "symbols_in_volume": [
   "tensorflow.python.util.deprecation.deprecated"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.monte_carlo_variational_loss": {
  "lineno": 791,
  "symbols_in_volume": [
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.nest.flatten",
   "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
   "tensorflow_probability.python.monte_carlo.expectation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.monte_carlo_variational_loss.divergence_fn": {
  "lineno": 935,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.nest_util.call_fn"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.pearson": {
  "lineno": 370,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.expm1",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.square"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.squared_hellinger": {
  "lineno": 402,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.symmetrized_csiszar_function": {
  "lineno": 720,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.t_power": {
  "lineno": 472,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.expm1",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.where",
   "tensorflow_probability.python.internal.dtype_util.base_dtype"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.total_variation": {
  "lineno": 338,
  "symbols_in_volume": [
   "tensorflow.compat.v2.abs",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.math.expm1",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.triangular": {
  "lineno": 437,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.name_scope"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.AmariAlphaTest": {
  "lineno": 43,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.AmariAlphaTest.setUp": {
  "lineno": 46,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.linspace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.AmariAlphaTest.test_at_zero": {
  "lineno": 50,
  "symbols_in_volume": [
   "tensorflow_probability.vi.amari_alpha"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.AmariAlphaTest.test_correct_when_alpha0": {
  "lineno": 59,
  "symbols_in_volume": [
   "tensorflow_probability.vi.amari_alpha"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.AmariAlphaTest.test_correct_when_alpha1": {
  "lineno": 69,
  "symbols_in_volume": [
   "tensorflow_probability.vi.amari_alpha"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.AmariAlphaTest.test_correct_when_alpha_not_01": {
  "lineno": 79,
  "symbols_in_volume": [
   "tensorflow_probability.vi.amari_alpha"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.ArithmeticGeometricMeanTest": {
  "lineno": 180,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.ArithmeticGeometricMeanTest.setUp": {
  "lineno": 183,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.linspace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.ArithmeticGeometricMeanTest.test_at_zero": {
  "lineno": 187,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow_probability.vi.arithmetic_geometric"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.ArithmeticGeometricMeanTest.test_correct": {
  "lineno": 200,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.sqrt",
   "tensorflow_probability.vi.arithmetic_geometric"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.ArithmeticGeometricMeanTest.test_symmetric": {
  "lineno": 194,
  "symbols_in_volume": [
   "tensorflow_probability.vi.arithmetic_geometric",
   "tensorflow_probability.vi.symmetrized_csiszar_function"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.ChiSquareTest": {
  "lineno": 369,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.ChiSquareTest.setUp": {
  "lineno": 372,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.linspace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.ChiSquareTest.test_at_zero": {
  "lineno": 376,
  "symbols_in_volume": [
   "tensorflow_probability.vi.chi_square"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.ChiSquareTest.test_correct": {
  "lineno": 379,
  "symbols_in_volume": [
   "tensorflow_probability.vi.chi_square"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.CsiszarVIMCOTest": {
  "lineno": 751,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.CsiszarVIMCOTest._csiszar_vimco_helper": {
  "lineno": 754,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float128",
   "numpy.log",
   "numpy.mean",
   "numpy.sum"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.CsiszarVIMCOTest.test_vimco_and_gradient": {
  "lineno": 783,
  "symbols_in_volume": [
   "numpy.mean",
   "numpy.sum",
   "tensorflow.compat.v1.set_random_seed",
   "tensorflow.compat.v2.GradientTape",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.executing_eagerly",
   "tensorflow.compat.v2.stop_gradient",
   "tensorflow.compat.v2.tile",
   "tensorflow_probability.python.internal.test_util.test_seed",
   "tensorflow_probability.vi.csiszar_vimco",
   "tensorflow_probability.vi.csiszar_vimco_helper",
   "tensorflow_probability.vi.kl_reverse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.CsiszarVIMCOTest.test_vimco_with_joint_q": {
  "lineno": 879,
  "symbols_in_volume": [
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.python.internal.test_util.test_seed",
   "tensorflow_probability.vi.csiszar_vimco",
   "tensorflow_probability.vi.kl_reverse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.CsiszarVIMCOTest.test_vimco_with_joint_q.p_log_prob": {
  "lineno": 882,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.DualCsiszarFunctionTest": {
  "lineno": 448,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.DualCsiszarFunctionTest.setUp": {
  "lineno": 451,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.linspace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.DualCsiszarFunctionTest.test_kl_forward": {
  "lineno": 455,
  "symbols_in_volume": [
   "tensorflow_probability.vi.dual_csiszar_function",
   "tensorflow_probability.vi.kl_forward",
   "tensorflow_probability.vi.kl_reverse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.DualCsiszarFunctionTest.test_kl_reverse": {
  "lineno": 461,
  "symbols_in_volume": [
   "tensorflow_probability.vi.dual_csiszar_function",
   "tensorflow_probability.vi.kl_forward",
   "tensorflow_probability.vi.kl_reverse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.JeffreysTest": {
  "lineno": 347,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.JeffreysTest.setUp": {
  "lineno": 350,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.linspace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.JeffreysTest.test_at_zero": {
  "lineno": 354,
  "symbols_in_volume": [
   "tensorflow_probability.vi.jeffreys"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.JeffreysTest.test_correct": {
  "lineno": 363,
  "symbols_in_volume": [
   "tensorflow_probability.vi.jeffreys"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.JeffreysTest.test_symmetric": {
  "lineno": 357,
  "symbols_in_volume": [
   "tensorflow_probability.vi.jeffreys",
   "tensorflow_probability.vi.symmetrized_csiszar_function"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.JensenShannonTest": {
  "lineno": 143,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.JensenShannonTest.setUp": {
  "lineno": 146,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.linspace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.JensenShannonTest.test_at_zero": {
  "lineno": 150,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow_probability.vi.jensen_shannon"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.JensenShannonTest.test_correct": {
  "lineno": 167,
  "symbols_in_volume": [
   "numpy.log",
   "numpy.log1p",
   "tensorflow_probability.vi.jensen_shannon"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.JensenShannonTest.test_symmetric": {
  "lineno": 154,
  "symbols_in_volume": [
   "tensorflow_probability.vi.jensen_shannon",
   "tensorflow_probability.vi.symmetrized_csiszar_function"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.KLForwardTest": {
  "lineno": 120,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.KLForwardTest.setUp": {
  "lineno": 123,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.linspace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.KLForwardTest.test_at_zero": {
  "lineno": 127,
  "symbols_in_volume": [
   "tensorflow_probability.vi.kl_forward"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.KLForwardTest.test_correct": {
  "lineno": 133,
  "symbols_in_volume": [
   "tensorflow_probability.vi.kl_forward"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.KLReverseTest": {
  "lineno": 97,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.KLReverseTest.setUp": {
  "lineno": 100,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.linspace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.KLReverseTest.test_at_zero": {
  "lineno": 104,
  "symbols_in_volume": [
   "tensorflow_probability.vi.kl_reverse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.KLReverseTest.test_correct": {
  "lineno": 110,
  "symbols_in_volume": [
   "tensorflow_probability.vi.kl_reverse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.Log1pAbsTest": {
  "lineno": 331,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.Log1pAbsTest.setUp": {
  "lineno": 334,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.linspace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.Log1pAbsTest.test_at_zero": {
  "lineno": 338,
  "symbols_in_volume": [
   "tensorflow_probability.vi.log1p_abs"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.Log1pAbsTest.test_correct": {
  "lineno": 341,
  "symbols_in_volume": [
   "numpy.sign",
   "tensorflow_probability.vi.log1p_abs"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.ModifiedGanTest": {
  "lineno": 385,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.ModifiedGanTest.setUp": {
  "lineno": 388,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.linspace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.ModifiedGanTest.test_at_zero": {
  "lineno": 392,
  "symbols_in_volume": [
   "numpy.log",
   "tensorflow_probability.vi.modified_gan"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.ModifiedGanTest.test_correct": {
  "lineno": 399,
  "symbols_in_volume": [
   "numpy.log1p",
   "tensorflow_probability.vi.modified_gan"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.MonteCarloVariationalLossTest": {
  "lineno": 468,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.MonteCarloVariationalLossTest.test_kl_forward": {
  "lineno": 471,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.ones",
   "tensorflow_probability.python.internal.test_util.test_seed",
   "tensorflow_probability.vi.kl_forward",
   "tensorflow_probability.vi.monte_carlo_variational_loss"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.MonteCarloVariationalLossTest.test_kl_forward_multidim": {
  "lineno": 541,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_util.test_seed",
   "tensorflow_probability.vi.kl_forward",
   "tensorflow_probability.vi.monte_carlo_variational_loss"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.MonteCarloVariationalLossTest.test_kl_reverse": {
  "lineno": 506,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.ones",
   "tensorflow_probability.python.internal.test_util.test_seed",
   "tensorflow_probability.vi.kl_reverse",
   "tensorflow_probability.vi.monte_carlo_variational_loss"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.MonteCarloVariationalLossTest.test_kl_reverse_multidim": {
  "lineno": 580,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_util.test_seed",
   "tensorflow_probability.vi.kl_reverse",
   "tensorflow_probability.vi.monte_carlo_variational_loss"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.MonteCarloVariationalLossTest.test_kl_with_joint_q": {
  "lineno": 620,
  "symbols_in_volume": [
   "tensorflow.compat.v2.sqrt",
   "tensorflow_probability.python.internal.test_util.test_seed",
   "tensorflow_probability.vi.kl_reverse",
   "tensorflow_probability.vi.monte_carlo_variational_loss"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.MonteCarloVariationalLossTest.test_kl_with_joint_q.target_log_prob_fn": {
  "lineno": 623,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.MonteCarloVariationalLossTest.test_score_trick": {
  "lineno": 659,
  "symbols_in_volume": [
   "tensorflow.compat.v2.constant",
   "tensorflow_probability.math.value_and_gradient",
   "tensorflow_probability.python.internal.test_util.test_seed",
   "tensorflow_probability.vi.kl_reverse"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.MonteCarloVariationalLossTest.test_score_trick.construct_monte_carlo_csiszar_f_divergence": {
  "lineno": 669,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.MonteCarloVariationalLossTest.test_score_trick.construct_monte_carlo_csiszar_f_divergence._fn": {
  "lineno": 671,
  "symbols_in_volume": [
   "tensorflow.compat.v2.tile",
   "tensorflow_probability.vi.monte_carlo_variational_loss"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.MonteCarloVariationalLossTest.test_score_trick.exact_kl": {
  "lineno": 698,
  "symbols_in_volume": [
   "tensorflow.compat.v2.tile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.PearsonTest": {
  "lineno": 227,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.PearsonTest.setUp": {
  "lineno": 230,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.linspace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.PearsonTest.test_at_zero": {
  "lineno": 234,
  "symbols_in_volume": [
   "tensorflow_probability.vi.pearson"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.PearsonTest.test_correct": {
  "lineno": 237,
  "symbols_in_volume": [
   "numpy.square",
   "tensorflow_probability.vi.pearson"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.SquaredHellingerTest": {
  "lineno": 243,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.SquaredHellingerTest.setUp": {
  "lineno": 246,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.linspace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.SquaredHellingerTest.test_at_zero": {
  "lineno": 250,
  "symbols_in_volume": [
   "tensorflow_probability.vi.squared_hellinger"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.SquaredHellingerTest.test_correct": {
  "lineno": 259,
  "symbols_in_volume": [
   "numpy.sqrt",
   "numpy.square",
   "tensorflow_probability.vi.squared_hellinger"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.SquaredHellingerTest.test_symmetric": {
  "lineno": 253,
  "symbols_in_volume": [
   "tensorflow_probability.vi.squared_hellinger",
   "tensorflow_probability.vi.symmetrized_csiszar_function"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.SymmetrizedCsiszarFunctionTest": {
  "lineno": 409,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.SymmetrizedCsiszarFunctionTest.setUp": {
  "lineno": 412,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.linspace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.SymmetrizedCsiszarFunctionTest.test_jeffreys": {
  "lineno": 436,
  "symbols_in_volume": [
   "tensorflow_probability.vi.jeffreys",
   "tensorflow_probability.vi.kl_forward",
   "tensorflow_probability.vi.kl_reverse",
   "tensorflow_probability.vi.symmetrized_csiszar_function"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.SymmetrizedCsiszarFunctionTest.test_jensen_shannon": {
  "lineno": 416,
  "symbols_in_volume": [
   "tensorflow_probability.vi.jensen_shannon",
   "tensorflow_probability.vi.symmetrized_csiszar_function"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.SymmetrizedCsiszarFunctionTest.test_jensen_shannon.js1": {
  "lineno": 419,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.nn.softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.SymmetrizedCsiszarFunctionTest.test_jensen_shannon.js2": {
  "lineno": 424,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow.compat.v2.nn.softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TPowerTest": {
  "lineno": 287,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TPowerTest.setUp": {
  "lineno": 290,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.linspace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TPowerTest.test_at_zero": {
  "lineno": 294,
  "symbols_in_volume": [
   "tensorflow_probability.vi.t_power"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TPowerTest.test_correct": {
  "lineno": 305,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow_probability.vi.t_power"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TPowerTest.test_correct_self_normalized": {
  "lineno": 316,
  "symbols_in_volume": [
   "numpy.float64",
   "tensorflow_probability.vi.t_power"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TotalVariationTest": {
  "lineno": 211,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TotalVariationTest.setUp": {
  "lineno": 214,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.linspace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TotalVariationTest.test_at_zero": {
  "lineno": 218,
  "symbols_in_volume": [
   "tensorflow_probability.vi.total_variation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TotalVariationTest.test_correct": {
  "lineno": 221,
  "symbols_in_volume": [
   "numpy.abs",
   "tensorflow_probability.vi.total_variation"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TriangularTest": {
  "lineno": 265,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TriangularTest.setUp": {
  "lineno": 268,
  "symbols_in_volume": [
   "numpy.exp",
   "numpy.linspace"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TriangularTest.test_at_zero": {
  "lineno": 272,
  "symbols_in_volume": [
   "tensorflow_probability.vi.triangular"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TriangularTest.test_correct": {
  "lineno": 281,
  "symbols_in_volume": [
   "numpy.square",
   "tensorflow_probability.vi.triangular"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TriangularTest.test_symmetric": {
  "lineno": 275,
  "symbols_in_volume": [
   "tensorflow_probability.vi.symmetrized_csiszar_function",
   "tensorflow_probability.vi.triangular"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.tridiag": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow.compat.v2.eye",
   "tensorflow.compat.v2.fill",
   "tensorflow.compat.v2.linalg.band_part"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.mutual_information": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "tensorflow_probability.python.vi.mutual_information._check_and_get_mask": {
  "lineno": 53,
  "symbols_in_volume": [
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.eye",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.unstack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.mutual_information._check_mask_shape": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.ones_like",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow_probability.python.internal.assert_util.assert_equal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.mutual_information._get_masked_scores": {
  "lineno": 98,
  "symbols_in_volume": [
   "numpy.inf",
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.constant",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.mutual_information._masked_logmeanexp": {
  "lineno": 118,
  "symbols_in_volume": [
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_logsumexp",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.where"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.mutual_information._maybe_assert_float_matrix": {
  "lineno": 147,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.unstack",
   "tensorflow_probability.python.internal.assert_util.assert_greater_equal",
   "tensorflow_probability.python.internal.assert_util.assert_rank_at_least",
   "tensorflow_probability.python.internal.dtype_util.is_floating",
   "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
   "tensorflow_probability.python.internal.tensorshape_util.rank"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.mutual_information.lower_bound_barber_agakov": {
  "lineno": 176,
  "symbols_in_volume": [
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.mutual_information.lower_bound_info_nce": {
  "lineno": 244,
  "symbols_in_volume": [
   "tensorflow.compat.v2.boolean_mask",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.math.log",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_logsumexp",
   "tensorflow.compat.v2.reduce_mean"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.mutual_information.lower_bound_jensen_shannon": {
  "lineno": 349,
  "symbols_in_volume": [
   "tensorflow.compat.v2.boolean_mask",
   "tensorflow.compat.v2.cast",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.math.softplus",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.nn.softplus",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.reduce_sum",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.unstack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.mutual_information.lower_bound_nguyen_wainwright_jordan": {
  "lineno": 469,
  "symbols_in_volume": [
   "tensorflow.compat.v2.bool",
   "tensorflow.compat.v2.boolean_mask",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.convert_to_tensor",
   "tensorflow.compat.v2.eye",
   "tensorflow.compat.v2.float32",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.math.exp",
   "tensorflow.compat.v2.name_scope",
   "tensorflow.compat.v2.reduce_mean",
   "tensorflow.compat.v2.shape",
   "tensorflow.compat.v2.unstack"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.mutual_information_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.distributions",
   "tensorflow_probability.vi.mutual_information"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.vi.mutual_information_test.MutualInformationTest": {
  "lineno": 36,
  "symbols_in_volume": [
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.vi.mutual_information_test.MutualInformationTest.setUp": {
  "lineno": 38,
  "symbols_in_volume": [
   "numpy.e",
   "numpy.float32",
   "numpy.log",
   "numpy.pi",
   "numpy.random.normal",
   "numpy.random.seed",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.random.normal",
   "tensorflow.compat.v2.split",
   "tensorflow.compat.v2.sqrt",
   "tensorflow.compat.v2.square",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.test_util.test_seed"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.mutual_information_test.MutualInformationTest.test_check_and_get_mask": {
  "lineno": 69,
  "symbols_in_volume": [
   "numpy.eye",
   "tensorflow.compat.v2.ones"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.mutual_information_test.MutualInformationTest.test_get_masked_scores": {
  "lineno": 78,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.inf"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.mutual_information_test.MutualInformationTest.test_lower_bound_barber_agakov": {
  "lineno": 110,
  "symbols_in_volume": [
   "numpy.mean",
   "tensorflow.compat.v2.linalg.diag_part",
   "tensorflow.compat.v2.random.normal"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.mutual_information_test.MutualInformationTest.test_lower_bound_info_nce": {
  "lineno": 141,
  "symbols_in_volume": [
   "numpy.eye",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.tile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.mutual_information_test.MutualInformationTest.test_lower_bound_jensen_shannon": {
  "lineno": 165,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.diag",
   "numpy.exp",
   "numpy.eye",
   "numpy.float32",
   "numpy.log",
   "numpy.maximum",
   "numpy.mean",
   "numpy.sum",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.tile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.mutual_information_test.MutualInformationTest.test_lower_bound_nguyen_wainwright_jordan": {
  "lineno": 197,
  "symbols_in_volume": [
   "numpy.eye",
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.tile"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.mutual_information_test.MutualInformationTest.test_masked_logmeanexp": {
  "lineno": 87,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.exp",
   "numpy.float32",
   "numpy.inf",
   "numpy.log",
   "numpy.mean",
   "numpy.sum",
   "scipy.special.logsumexp"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.optimization": {
  "lineno": null,
  "symbols_in_volume": [
   "functools.partial",
   "tensorflow_probability.python.vi.csiszar_divergence.kl_reverse",
   "tensorflow_probability.python.vi.csiszar_divergence.monte_carlo_variational_loss"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.vi.optimization.fit_surrogate_posterior": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow_probability.python.math.minimize"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.optimization.fit_surrogate_posterior.complete_variational_loss_fn": {
  "lineno": 276,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.vi.optimization_test": {
  "lineno": null,
  "symbols_in_volume": [
   "tensorflow.compat.v2.test.main",
   "tensorflow_probability.bijectors",
   "tensorflow_probability.distributions"
  ],
  "type": "module"
 },
 "tensorflow_probability.python.vi.optimization_test.OptimizationTests": {
  "lineno": 37,
  "symbols_in_volume": [
   "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
   "tensorflow_probability.python.internal.test_case.TestCase"
  ],
  "type": "class"
 },
 "tensorflow_probability.python.vi.optimization_test.OptimizationTests.test_fit_posterior_with_joint_q": {
  "lineno": 90,
  "symbols_in_volume": [
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.TensorShape",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.optimizers.Adam",
   "tensorflow_probability.python.internal.test_util.test_seed",
   "tensorflow_probability.util.DeferredTensor",
   "tensorflow_probability.vi.fit_surrogate_posterior"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.optimization_test.OptimizationTests.test_fit_posterior_with_joint_q.p_log_prob": {
  "lineno": 93,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.vi.optimization_test.OptimizationTests.test_fit_posterior_with_joint_q.trainable_q_fn": {
  "lineno": 102,
  "symbols_in_volume": [],
  "type": "function"
 },
 "tensorflow_probability.python.vi.optimization_test.OptimizationTests.test_imhogeneous_poisson_process_example": {
  "lineno": 120,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.float32",
   "numpy.log",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.ones",
   "tensorflow.compat.v2.optimizers.Adam",
   "tensorflow.compat.v2.zeros",
   "tensorflow_probability.python.internal.test_util.test_seed",
   "tensorflow_probability.vi.fit_surrogate_posterior"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.optimization_test.OptimizationTests.test_imhogeneous_poisson_process_example.model_fn": {
  "lineno": 134,
  "symbols_in_volume": [
   "tensorflow.compat.v2.exp",
   "tensorflow_probability.positive_semidefinite_kernels.ExponentiatedQuadratic"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.optimization_test.OptimizationTests.test_imhogeneous_poisson_process_example.variational_model_fn": {
  "lineno": 152,
  "symbols_in_volume": [
   "tensorflow.compat.v2.nn.softplus"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.optimization_test.OptimizationTests.test_variational_em": {
  "lineno": 40,
  "symbols_in_volume": [
   "numpy.random.randn",
   "numpy.random.seed",
   "numpy.sqrt",
   "tensorflow.compat.v1.global_variables_initializer",
   "tensorflow.compat.v2.Variable",
   "tensorflow.compat.v2.control_dependencies",
   "tensorflow.compat.v2.identity",
   "tensorflow.compat.v2.nn.softplus",
   "tensorflow.compat.v2.optimizers.Adam",
   "tensorflow_probability.python.internal.test_util.test_seed",
   "tensorflow_probability.util.DeferredTensor",
   "tensorflow_probability.vi.fit_surrogate_posterior"
  ],
  "type": "function"
 },
 "tensorflow_probability.python.vi.optimization_test.OptimizationTests.test_variational_em.trainable_log_prob": {
  "lineno": 54,
  "symbols_in_volume": [
   "tensorflow.compat.v2.newaxis",
   "tensorflow.compat.v2.reduce_sum"
  ],
  "type": "function"
 }
}