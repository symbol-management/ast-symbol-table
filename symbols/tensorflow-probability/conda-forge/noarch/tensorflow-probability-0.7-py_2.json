{
 "*": {
  "data": {
   "imports": [
    "tensorflow_probability.python.edward2.generated_random_variables"
   ]
  },
  "type": "star-import"
 },
 "tensorflow_probability": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability._ensure_tf_install"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.__version__": {
  "data": {
   "shadows": "tensorflow_probability.python.version.__version__"
  },
  "type": "import"
 },
 "tensorflow_probability._ensure_tf_install": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "ImportError",
    "print",
    "tensorflow.__version__"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.distutils.version": {
  "data": {
   "shadows": "distutils.version"
  },
  "type": "import"
 },
 "tensorflow_probability.python": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.python.util.all_util.remove_undocumented",
    "tensorflow_probability.python._allowed_symbols"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python._allowed_symbols": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "tensorflow_probability.python.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.AbsoluteValue": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.absolute_value.AbsoluteValue"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.Affine": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.affine.Affine"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.AffineLinearOperator": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.AffineScalar": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.affine_scalar.AffineScalar"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.AutoregressiveLayer": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.masked_autoregressive.AutoregressiveLayer"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.AutoregressiveNetwork": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.masked_autoregressive.AutoregressiveNetwork"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.BatchNormalization": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.batch_normalization.BatchNormalization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.Bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector.Bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.Blockwise": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.blockwise.Blockwise"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.Chain": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.chain.Chain"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.CholeskyOuterProduct": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.cholesky_outer_product.CholeskyOuterProduct"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.CholeskyToInvCholesky": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky.CholeskyToInvCholesky"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.ConditionalBijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector.ConditionalBijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.CorrelationCholesky": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.correlation_cholesky.CorrelationCholesky"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.Cumsum": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.cumsum.Cumsum"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.DiscreteCosineTransform": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.discrete_cosine_transform.DiscreteCosineTransform"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.Exp": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.exp.Exp"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.Expm1": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.expm1.Expm1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.FillTriangular": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.Gumbel": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.gumbel.Gumbel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.Identity": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.identity.Identity"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.Inline": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.inline.Inline"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.Invert": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.invert.Invert"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.IteratedSigmoidCentered": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.IteratedSigmoidCentered"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.Kumaraswamy": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.kumaraswamy.Kumaraswamy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.MaskedAutoregressiveFlow": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.masked_autoregressive.MaskedAutoregressiveFlow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.MatrixInverseTriL": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.matrix_inverse_tril.MatrixInverseTriL"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.MatvecLU": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.matveclu.MatvecLU"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.NormalCDF": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.normal_cdf.NormalCDF"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.Ordered": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.ordered.Ordered"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.Permute": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.permute.Permute"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.PowerTransform": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.power_transform.PowerTransform"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.RealNVP": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.real_nvp.RealNVP"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.Reciprocal": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.reciprocal.Reciprocal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.Reshape": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.reshape.Reshape"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.ScaleTriL": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.scale_tril.ScaleTriL"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.Sigmoid": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.sigmoid.Sigmoid"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.SinhArcsinh": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.sinh_arcsinh.SinhArcsinh"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.SoftmaxCentered": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.softmax_centered.SoftmaxCentered"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.Softplus": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.softplus.Softplus"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.Softsign": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.softsign.Softsign"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.Square": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.square.Square"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.Tanh": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.tanh.Tanh"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.TransformDiagonal": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.transform_diagonal.TransformDiagonal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.Transpose": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.transpose.Transpose"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.Weibull": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.weibull.Weibull"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.__all__": {
  "data": {
   "lineno": 75
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.absolute_value": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.absolute_value.AbsoluteValue": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.absolute_value.AbsoluteValue.__init__": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.absolute_value.AbsoluteValue"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.absolute_value.AbsoluteValue._forward": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "tensorflow.compat.v2.abs"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.absolute_value.AbsoluteValue._inverse": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.assert_util.assert_non_negative",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.absolute_value.AbsoluteValue._inverse_log_det_jacobian": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.python.internal.assert_util.assert_non_negative",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.absolute_value.AbsoluteValue._is_injective": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.absolute_value.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.absolute_value.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.absolute_value.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.absolute_value.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.absolute_value.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.absolute_value.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.absolute_value.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.absolute_value.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.absolute_value_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.absolute_value_test.AbsoluteValueTest": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.absolute_value_test.AbsoluteValueTest.testBijectorVersusNumpyRewriteOfBasicFunctionsEventNdims0": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.python.bijectors.AbsoluteValue"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.absolute_value_test.AbsoluteValueTest.testNegativeYRaisesForILDJIfValidateArgs": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.AbsoluteValue"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.absolute_value_test.AbsoluteValueTest.testNegativeYRaisesForInverseIfValidateArgs": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.AbsoluteValue"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.absolute_value_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.absolute_value_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.absolute_value_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.absolute_value_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.absolute_value_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.absolute_value_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.affine.Affine": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.affine.Affine.__init__": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.is_tensor",
    "tensorflow_probability.python.bijectors.affine.Affine",
    "tensorflow_probability.python.internal.dtype_util.base_equal",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine.Affine._create_scale_operator": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.LinearOperatorLowRankUpdate",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.bijectors.affine._as_tensor",
    "tensorflow_probability.python.internal.assert_util.assert_none_equal",
    "tensorflow_probability.python.internal.distribution_util.dimension_size",
    "tensorflow_probability.python.internal.distribution_util.make_tril_scale",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine.Affine._forward": {
  "data": {
   "lineno": 326,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.math.conj",
    "tensorflow_probability.python.internal.dtype_util.is_complex"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine.Affine._forward_log_det_jacobian": {
  "data": {
   "lineno": 356,
   "symbols_in_volume": [
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine.Affine._inverse": {
  "data": {
   "lineno": 343,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.conj",
    "tensorflow_probability.python.internal.dtype_util.is_complex"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine.Affine._maybe_check_scale": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine.Affine.adjoint": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine.Affine.scale": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine.Affine.shift": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.affine._as_tensor": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow.compat.v2.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator.__init__": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "isinstance",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.linalg.LinearOperator",
    "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator",
    "tensorflow_probability.python.internal.dtype_util.base_dtype",
    "tensorflow_probability.python.internal.dtype_util.base_equal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator._forward": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator._forward_log_det_jacobian": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow_probability.python.internal.dtype_util.base_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator._inverse": {
  "data": {
   "lineno": 154
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator._maybe_collect_assertions": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator.adjoint": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator.scale": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator.shift": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator_test.AffineLinearOperatorTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator_test.AffineLinearOperatorTest.testDiag": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "numpy.abs",
    "numpy.array",
    "numpy.float32",
    "numpy.log",
    "numpy.sum",
    "tensorflow.compat.v2.linalg.LinearOperatorDiag",
    "tensorflow_probability.python.bijectors.AffineLinearOperator"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator_test.AffineLinearOperatorTest.testIdentity": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.bijectors.AffineLinearOperator"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator_test.AffineLinearOperatorTest.testTriL": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "numpy.abs",
    "numpy.array",
    "numpy.diagonal",
    "numpy.expand_dims",
    "numpy.float32",
    "numpy.log",
    "numpy.matmul",
    "numpy.squeeze",
    "numpy.sum",
    "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
    "tensorflow_probability.python.bijectors.AffineLinearOperator"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator_test.AffineLinearOperatorTest.testTriLAdjoint": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "numpy.abs",
    "numpy.array",
    "numpy.diagonal",
    "numpy.float32",
    "numpy.log",
    "numpy.matmul",
    "numpy.newaxis",
    "numpy.sum",
    "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
    "tensorflow_probability.python.bijectors.AffineLinearOperator"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_linear_operator_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_scalar": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.affine_scalar.AffineScalar": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.affine_scalar.AffineScalar.__init__": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.bijectors.affine_scalar.AffineScalar",
    "tensorflow_probability.python.internal.assert_util.assert_none_equal",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar.AffineScalar._forward": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "tensorflow.compat.v2.identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar.AffineScalar._forward_log_det_jacobian": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.math.log",
    "tensorflow_probability.python.internal.dtype_util.base_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar.AffineScalar._inverse": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "tensorflow.compat.v2.identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar.AffineScalar.scale": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar.AffineScalar.shift": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.affine_scalar.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_scalar.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_scalar.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_scalar.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_scalar.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_scalar.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_scalar.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_scalar.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.bijectors"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.AffineScalarBijectorTest": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.AffineScalarBijectorTest.testNoBatchScalar": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "numpy.log",
    "run",
    "tensorflow_probability.python.bijectors.affine_scalar_test.tfb"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.AffineScalarBijectorTest.testNoBatchScalar.dynamic_run": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "fun",
    "numpy.array",
    "numpy.float32",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.AffineScalarBijectorTest.testNoBatchScalar.static_run": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "fun"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.AffineScalarBijectorTest.testOneBatchScalarViaIdentityIn64BitUserProvidesScaleOnly": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.log",
    "run",
    "tensorflow_probability.python.bijectors.affine_scalar_test.tfb"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.AffineScalarBijectorTest.testOneBatchScalarViaIdentityIn64BitUserProvidesScaleOnly.dynamic_run": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "fun",
    "numpy.array",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.AffineScalarBijectorTest.testOneBatchScalarViaIdentityIn64BitUserProvidesScaleOnly.static_run": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "fun"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.AffineScalarBijectorTest.testOneBatchScalarViaIdentityIn64BitUserProvidesShiftOnly": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "numpy.float64",
    "run",
    "tensorflow_probability.python.bijectors.affine_scalar_test.tfb"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.AffineScalarBijectorTest.testOneBatchScalarViaIdentityIn64BitUserProvidesShiftOnly.dynamic_run": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "fun",
    "numpy.array",
    "numpy.float64",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.AffineScalarBijectorTest.testOneBatchScalarViaIdentityIn64BitUserProvidesShiftOnly.static_run": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "fun"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.AffineScalarBijectorTest.testProperties": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.affine_scalar_test.tfb"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.AffineScalarBijectorTest.testScalarCongruency": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.affine_scalar_test.tfb",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.AffineScalarBijectorTest.testTwoBatchScalarIdentityViaIdentity": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "run",
    "tensorflow_probability.python.bijectors.affine_scalar_test.tfb"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.AffineScalarBijectorTest.testTwoBatchScalarIdentityViaIdentity.dynamic_run": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "fun",
    "numpy.array",
    "numpy.float32",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.AffineScalarBijectorTest.testTwoBatchScalarIdentityViaIdentity.static_run": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "fun"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.AffineScalarBijectorTest.testTwoBatchScalarIdentityViaScale": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "numpy.log",
    "run",
    "tensorflow_probability.python.bijectors.affine_scalar_test.tfb"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.AffineScalarBijectorTest.testTwoBatchScalarIdentityViaScale.dynamic_run": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "fun",
    "numpy.array",
    "numpy.float32",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.AffineScalarBijectorTest.testTwoBatchScalarIdentityViaScale.static_run": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "fun"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.tfb": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.affine_scalar_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest._makeScale": {
  "data": {
   "lineno": 421,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.matmul",
    "numpy.ones_like",
    "numpy.swapaxes"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest._matrix_diag": {
  "data": {
   "lineno": 466,
   "symbols_in_volume": [
    "int",
    "numpy.diag",
    "numpy.prod",
    "numpy.reshape",
    "range"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest._testLegalInputs": {
  "data": {
   "lineno": 475,
   "symbols_in_volume": [
    "ValueError",
    "_powerset",
    "dict",
    "len",
    "numpy.abs",
    "numpy.expand_dims",
    "numpy.linalg.det",
    "numpy.linalg.solve",
    "numpy.log",
    "numpy.matmul",
    "numpy.ones",
    "numpy.reshape",
    "numpy.squeeze",
    "tensorflow_probability.python.bijectors.Affine"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest._testLegalInputs._powerset": {
  "data": {
   "lineno": 477,
   "symbols_in_volume": [
    "len",
    "list",
    "range",
    "tensorflow_probability.python.bijectors.affine_test.itertools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest._testScaledIdentityComplexAdjoint": {
  "data": {
   "lineno": 611,
   "symbols_in_volume": [
    "numpy.abs",
    "numpy.array",
    "numpy.complex",
    "numpy.conj",
    "numpy.log",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.identity",
    "tensorflow_probability.python.bijectors.Affine"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testBatchMultivariateDiag": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "numpy.log",
    "run",
    "tensorflow_probability.python.bijectors.Affine"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testBatchMultivariateDiag.dynamic_run": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "fun",
    "numpy.array",
    "numpy.float32",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testBatchMultivariateDiag.static_run": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "fun"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testBatchMultivariateFullDynamic": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.log",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.bijectors.Affine"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testBatchMultivariateIdentity": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "numpy.log",
    "run",
    "tensorflow_probability.python.bijectors.Affine"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testBatchMultivariateIdentity.dynamic_run": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "fun",
    "numpy.array",
    "numpy.float32",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testBatchMultivariateIdentity.static_run": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "fun"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testDiagWithTriL": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": [
    "numpy.log",
    "run",
    "tensorflow_probability.python.bijectors.Affine"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testDiagWithTriL.dynamic_run": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "fun",
    "numpy.array",
    "numpy.float32",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testDiagWithTriL.static_run": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": [
    "fun"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testDiagWithVDVTUpdate": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": [
    "numpy.log",
    "run",
    "tensorflow_probability.python.bijectors.Affine"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testDiagWithVDVTUpdate.dynamic_run": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": [
    "fun",
    "numpy.array",
    "numpy.float32",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testDiagWithVDVTUpdate.static_run": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": [
    "fun"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testIdentityAndDiagWithTriL": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": [
    "numpy.log",
    "run",
    "tensorflow_probability.python.bijectors.Affine"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testIdentityAndDiagWithTriL.dynamic_run": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "fun",
    "numpy.array",
    "numpy.float32",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testIdentityAndDiagWithTriL.static_run": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "fun"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testIdentityWithDiagUpdate": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "numpy.log",
    "run",
    "tensorflow_probability.python.bijectors.Affine"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testIdentityWithDiagUpdate.dynamic_run": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "fun",
    "numpy.array",
    "numpy.float32",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testIdentityWithDiagUpdate.static_run": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "fun"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testIdentityWithTriL": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "numpy.log",
    "run",
    "tensorflow_probability.python.bijectors.Affine"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testIdentityWithTriL.dynamic_run": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "fun",
    "numpy.array",
    "numpy.float32",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testIdentityWithTriL.static_run": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "fun"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testIdentityWithVDVTUpdate": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": [
    "numpy.log",
    "run",
    "tensorflow_probability.python.bijectors.Affine"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testIdentityWithVDVTUpdate.dynamic_run": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": [
    "fun",
    "numpy.array",
    "numpy.float32",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testIdentityWithVDVTUpdate.static_run": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": [
    "fun"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testLegalInputs": {
  "data": {
   "lineno": 526,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testLegalInputsWithBatch": {
  "data": {
   "lineno": 541,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testNegativeDetTrilPlusVDVT": {
  "data": {
   "lineno": 556,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testNoBatchMultivariateDiag": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "numpy.log",
    "run",
    "tensorflow_probability.python.bijectors.Affine"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testNoBatchMultivariateDiag.dynamic_run": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "fun",
    "numpy.array",
    "numpy.float32",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testNoBatchMultivariateDiag.static_run": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "fun"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testNoBatchMultivariateFullDynamic": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.log",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.bijectors.Affine"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testNoBatchMultivariateIdentity": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "run",
    "tensorflow_probability.python.bijectors.Affine"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testNoBatchMultivariateIdentity.dynamic_run": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "fun",
    "numpy.array",
    "numpy.float32",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testNoBatchMultivariateIdentity.static_run": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "fun"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testNoBatchMultivariateRaisesWhenSingular": {
  "data": {
   "lineno": 411,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Affine"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testProperties": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Affine"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testScaledIdentityComplexAdjointDynamic": {
  "data": {
   "lineno": 637
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testScaledIdentityComplexAdjointStatic": {
  "data": {
   "lineno": 640
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testTriLWithVDVTUpdate": {
  "data": {
   "lineno": 343,
   "symbols_in_volume": [
    "numpy.log",
    "run",
    "tensorflow_probability.python.bijectors.Affine"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testTriLWithVDVTUpdate.dynamic_run": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": [
    "fun",
    "numpy.array",
    "numpy.float32",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testTriLWithVDVTUpdate.static_run": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": [
    "fun"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testTriLWithVDVTUpdateAdjoint": {
  "data": {
   "lineno": 572,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.diagonal",
    "numpy.float32",
    "numpy.linalg.solve",
    "numpy.log",
    "numpy.matmul",
    "numpy.prod",
    "run",
    "tensorflow_probability.python.bijectors.Affine"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testTriLWithVDVTUpdateAdjoint.dynamic_run": {
  "data": {
   "lineno": 576,
   "symbols_in_volume": [
    "fun",
    "numpy.array",
    "numpy.float32",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testTriLWithVDVTUpdateAdjoint.static_run": {
  "data": {
   "lineno": 573,
   "symbols_in_volume": [
    "fun"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testTriLWithVDVTUpdateNoDiagonal": {
  "data": {
   "lineno": 377,
   "symbols_in_volume": [
    "numpy.log",
    "run",
    "tensorflow_probability.python.bijectors.Affine"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testTriLWithVDVTUpdateNoDiagonal.dynamic_run": {
  "data": {
   "lineno": 381,
   "symbols_in_volume": [
    "fun",
    "numpy.array",
    "numpy.float32",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.AffineBijectorTest.testTriLWithVDVTUpdateNoDiagonal.static_run": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": [
    "fun"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.affine_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_test.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.affine_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.batch_normalization": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.BatchNormalization": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.BatchNormalization.__init__": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "int",
    "isinstance",
    "len",
    "super",
    "tensorflow.keras.layers.BatchNormalization",
    "tensorflow.nn.relu",
    "tensorflow_probability.python.bijectors.batch_normalization.BatchNormalization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.BatchNormalization._de_normalize": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "broadcast_fn",
    "tensorflow_probability.python.bijectors.batch_normalization._undo_batch_normalization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.BatchNormalization._forward": {
  "data": {
   "lineno": 214
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.BatchNormalization._forward_log_det_jacobian": {
  "data": {
   "lineno": 220
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.BatchNormalization._get_broadcast_fn": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "len",
    "range"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.BatchNormalization._get_broadcast_fn._broadcast": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "len",
    "list",
    "range",
    "tensorflow.reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.BatchNormalization._inverse": {
  "data": {
   "lineno": 217
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.BatchNormalization._inverse_log_det_jacobian": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "len",
    "range",
    "tensorflow.cast",
    "tensorflow.float32",
    "tensorflow.logical_not",
    "tensorflow.logical_or",
    "tensorflow.math.log",
    "tensorflow.nn.moments",
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.BatchNormalization._normalize": {
  "data": {
   "lineno": 199
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.BatchNormalization._validate_bn_layer": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "ValueError",
    "isinstance",
    "tensorflow.compat.v1.layers.BatchNormalization",
    "tensorflow.keras.layers.BatchNormalization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.batch_normalization._undo_batch_normalization": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow.compat.v2.name_scope",
    "tensorflow.sqrt"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.batch_normalization.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.batch_normalization_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.batch_normalization_test.BatchNormTest": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.VectorDistributionTestHelpers",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.batch_normalization_test.BatchNormTest._reduction_axes": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "enumerate",
    "int",
    "isinstance",
    "len",
    "list",
    "range",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization_test.BatchNormTest.testForwardInverse": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "len",
    "numpy.arange",
    "numpy.float32",
    "numpy.log",
    "numpy.mean",
    "numpy.squeeze",
    "numpy.sum",
    "numpy.var",
    "numpy.zeros_like",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.control_dependencies",
    "tensorflow.identity",
    "tensorflow.keras.layers.BatchNormalization",
    "tensorflow_probability.python.bijectors.BatchNormalization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization_test.BatchNormTest.testInvertMutuallyConsistent": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "absl.testing.parameterized.named_parameters",
    "int",
    "layer_cls",
    "tensorflow.compat.v1.layers.BatchNormalization",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.keras.layers.BatchNormalization",
    "tensorflow_probability.python.bijectors.BatchNormalization",
    "tensorflow_probability.python.bijectors.Invert",
    "tensorflow_probability.python.distributions.Normal",
    "tensorflow_probability.python.distributions.TransformedDistribution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization_test.BatchNormTest.testLogProb": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "absl.testing.parameterized.named_parameters",
    "int",
    "isinstance",
    "layer_cls",
    "numpy.float32",
    "numpy.prod",
    "numpy.zeros",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v1.layers.BatchNormalization",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.keras.layers.BatchNormalization",
    "tensorflow_probability.python.bijectors.BatchNormalization",
    "tensorflow_probability.python.bijectors.Reshape",
    "tensorflow_probability.python.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.distributions.TransformedDistribution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization_test.BatchNormTest.testMutuallyConsistent": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "absl.testing.parameterized.named_parameters",
    "int",
    "layer_cls",
    "tensorflow.compat.v1.layers.BatchNormalization",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.keras.layers.BatchNormalization",
    "tensorflow_probability.python.bijectors.BatchNormalization",
    "tensorflow_probability.python.distributions.Normal",
    "tensorflow_probability.python.distributions.TransformedDistribution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization_test.BatchNormTest.testWithKeras": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.random.normal",
    "numpy.zeros",
    "tensorflow.keras.Input",
    "tensorflow.keras.Model",
    "tensorflow_probability.python.bijectors.BatchNormalization",
    "tensorflow_probability.python.distributions.Normal",
    "tensorflow_probability.python.distributions.TransformedDistribution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.batch_normalization_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.batch_normalization_test.distributions": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.batch_normalization_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.batch_normalization_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.batch_normalization_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.batch_normalization_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.batch_normalization_test.test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.batch_normalization_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.batch_normalization_test.tf_test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.batch_normalization_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": [
    "object",
    "tensorflow_probability.python.bijectors.bijector.abc",
    "tensorflow_probability.python.bijectors.bijector.six"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.__call__": {
  "data": {
   "lineno": 718,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "self",
    "self._call_forward",
    "tensorflow_probability.python.bijectors.bijector.Bijector",
    "tensorflow_probability.python.bijectors.chain.Chain",
    "tensorflow_probability.python.distributions.distribution.Distribution",
    "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.__init__": {
  "data": {
   "lineno": 562,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "camel_to_snake",
    "enumerate",
    "int",
    "isinstance",
    "self",
    "self._constant_ildj",
    "self._dtype",
    "self._forward_min_event_ndims",
    "self._from_x",
    "self._from_y",
    "self._graph_parents",
    "self._inverse_min_event_ndims",
    "self._is_constant_jacobian",
    "self._name",
    "self._validate_args",
    "tensorflow.is_tensor",
    "tensorflow_probability.python.bijectors.bijector.WeakKeyDefaultDict",
    "tensorflow_probability.python.bijectors.bijector.abc",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.__init__.camel_to_snake": {
  "data": {
   "lineno": 650,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.re"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._cache_by_x": {
  "data": {
   "lineno": 1310,
   "symbols_in_volume": [
    "ValueError",
    "self._from_x",
    "self._lookup"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._cache_by_y": {
  "data": {
   "lineno": 1320,
   "symbols_in_volume": [
    "ValueError",
    "self._from_y",
    "self._lookup"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._cache_update": {
  "data": {
   "lineno": 1330,
   "symbols_in_volume": [
    "self._cache_by_x",
    "self._cache_by_y",
    "self._from_x",
    "self._from_y"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._call_forward": {
  "data": {
   "lineno": 897,
   "symbols_in_volume": [
    "self._cache_by_x",
    "self._cache_by_y",
    "self._forward",
    "self._is_injective",
    "self._lookup",
    "self._maybe_assert_dtype",
    "self._name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.executing_eagerly"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._call_forward_log_det_jacobian": {
  "data": {
   "lineno": 1226,
   "symbols_in_volume": [
    "NotImplementedError",
    "self._check_valid_event_ndims",
    "self._compute_inverse_log_det_jacobian_with_caching",
    "self._is_injective",
    "self._maybe_assert_dtype",
    "self._name_scope",
    "self.forward_min_event_ndims",
    "tensorflow.control_dependencies",
    "tensorflow.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._call_inverse": {
  "data": {
   "lineno": 939,
   "symbols_in_volume": [
    "self._cache_by_x",
    "self._cache_by_y",
    "self._inverse",
    "self._is_injective",
    "self._lookup",
    "self._maybe_assert_dtype",
    "self._name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.executing_eagerly"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._call_inverse_log_det_jacobian": {
  "data": {
   "lineno": 1146,
   "symbols_in_volume": [
    "self._check_valid_event_ndims",
    "self._compute_inverse_log_det_jacobian_with_caching",
    "self._inverse_log_det_jacobian",
    "self._is_injective",
    "self._maybe_assert_dtype",
    "self._name_scope",
    "self._reduce_jacobian_det_over_event",
    "self.inverse_min_event_ndims",
    "tensorflow.control_dependencies",
    "tensorflow.convert_to_tensor",
    "tensorflow.shape",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._check_valid_event_ndims": {
  "data": {
   "lineno": 1373,
   "symbols_in_volume": [
    "ValueError",
    "self.validate_args",
    "tensorflow.convert_to_tensor",
    "tensorflow.get_static_value",
    "tensorflow_probability.python.internal.assert_util.assert_greater_equal",
    "tensorflow_probability.python.internal.assert_util.assert_rank",
    "tensorflow_probability.python.internal.dtype_util.is_integer",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._compute_inverse_log_det_jacobian_with_caching": {
  "data": {
   "lineno": 979,
   "symbols_in_volume": [
    "NotImplementedError",
    "hasattr",
    "self",
    "self._compute_unreduced_constant_ildj_with_caching",
    "self._compute_unreduced_nonconstant_ildj_with_caching",
    "self._reduce_jacobian_det_over_event",
    "self.forward",
    "self.forward_min_event_ndims",
    "self.inverse",
    "self.inverse_min_event_ndims",
    "self.is_constant_jacobian",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._compute_unreduced_constant_ildj_with_caching": {
  "data": {
   "lineno": 1112,
   "symbols_in_volume": [
    "self._constant_ildj",
    "self._forward_log_det_jacobian",
    "self._inverse_log_det_jacobian",
    "tensorflow_probability.python.bijectors.bijector._get_current_graph"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._compute_unreduced_nonconstant_ildj_with_caching": {
  "data": {
   "lineno": 1067,
   "symbols_in_volume": [
    "self._cache_update",
    "self._forward_log_det_jacobian",
    "self._inverse_log_det_jacobian",
    "self._lookup"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._forward": {
  "data": {
   "lineno": 893,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._forward_event_shape": {
  "data": {
   "lineno": 829
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._forward_event_shape_tensor": {
  "data": {
   "lineno": 805
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._get_event_reduce_dims": {
  "data": {
   "lineno": 1363,
   "symbols_in_volume": [
    "range",
    "self._maybe_get_static_event_ndims",
    "tensorflow.range"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._inverse": {
  "data": {
   "lineno": 935,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._inverse_event_shape": {
  "data": {
   "lineno": 873,
   "symbols_in_volume": [
    "tensorflow.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._inverse_event_shape_tensor": {
  "data": {
   "lineno": 849
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._is_injective": {
  "data": {
   "lineno": 687,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._lookup": {
  "data": {
   "lineno": 1337,
   "symbols_in_volume": [
    "self._from_x.get",
    "self._from_y.get",
    "tensorflow_probability.python.bijectors.bijector._Mapping"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._maybe_assert_dtype": {
  "data": {
   "lineno": 1303,
   "symbols_in_volume": [
    "TypeError",
    "self.dtype",
    "tensorflow_probability.python.internal.dtype_util.base_equal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._maybe_get_static_event_ndims": {
  "data": {
   "lineno": 1407,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "isinstance",
    "len",
    "numpy.generic",
    "numpy.int32",
    "numpy.int64",
    "numpy.ndarray",
    "tensorflow_probability.python.internal.distribution_util.maybe_get_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._name_scope": {
  "data": {
   "lineno": 1296,
   "symbols_in_volume": [
    "self.name",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.bijectors.bijector.contextlib"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector._reduce_jacobian_det_over_event": {
  "data": {
   "lineno": 1349,
   "symbols_in_volume": [
    "self._get_event_reduce_dims",
    "tensorflow.ones",
    "tensorflow.reduce_sum",
    "tensorflow.size"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.dtype": {
  "data": {
   "lineno": 708,
   "symbols_in_volume": [
    "property",
    "self._dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.forward": {
  "data": {
   "lineno": 917,
   "symbols_in_volume": [
    "self._call_forward"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.forward_event_shape": {
  "data": {
   "lineno": 834,
   "symbols_in_volume": [
    "self._forward_event_shape",
    "tensorflow.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.forward_event_shape_tensor": {
  "data": {
   "lineno": 810,
   "symbols_in_volume": [
    "self._forward_event_shape_tensor",
    "self._name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.forward_log_det_jacobian": {
  "data": {
   "lineno": 1266,
   "symbols_in_volume": [
    "self._call_forward_log_det_jacobian"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.forward_min_event_ndims": {
  "data": {
   "lineno": 665,
   "symbols_in_volume": [
    "property",
    "self._forward_min_event_ndims"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.graph_parents": {
  "data": {
   "lineno": 660,
   "symbols_in_volume": [
    "property",
    "self._graph_parents"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.inverse": {
  "data": {
   "lineno": 959,
   "symbols_in_volume": [
    "self._call_inverse"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.inverse_event_shape": {
  "data": {
   "lineno": 878,
   "symbols_in_volume": [
    "self._inverse_event_shape",
    "tensorflow.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.inverse_event_shape_tensor": {
  "data": {
   "lineno": 854,
   "symbols_in_volume": [
    "self._inverse_event_shape_tensor",
    "self._name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.inverse_log_det_jacobian": {
  "data": {
   "lineno": 1191,
   "symbols_in_volume": [
    "self._call_inverse_log_det_jacobian"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.inverse_min_event_ndims": {
  "data": {
   "lineno": 670,
   "symbols_in_volume": [
    "property",
    "self._inverse_min_event_ndims"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.is_constant_jacobian": {
  "data": {
   "lineno": 675,
   "symbols_in_volume": [
    "property",
    "self._is_constant_jacobian"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.name": {
  "data": {
   "lineno": 713,
   "symbols_in_volume": [
    "property",
    "self._name"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.Bijector.validate_args": {
  "data": {
   "lineno": 703,
   "symbols_in_volume": [
    "property",
    "self._validate_args"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.ConditionalBijector": {
  "data": {
   "lineno": 1424,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector.ConditionalBijector.__new__": {
  "data": {
   "lineno": 1427,
   "symbols_in_volume": [
    "super",
    "tensorflow.python.util.deprecation.deprecated",
    "tensorflow_probability.python.bijectors.bijector.ConditionalBijector"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.HashableWeakRef": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.weakref"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector.HashableWeakRef.__eq__": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "id",
    "isinstance",
    "numpy.ndarray",
    "other",
    "self",
    "super",
    "tensorflow_probability.python.bijectors.bijector.HashableWeakRef"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.HashableWeakRef.__hash__": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "hash",
    "id",
    "isinstance",
    "numpy.ndarray",
    "self",
    "str"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.HashableWeakRef.__repr__": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "repr",
    "self"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.HashableWeakRef.__str__": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "self",
    "str"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.WeakKeyDefaultDict": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector.WeakKeyDefaultDict.__contains__": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "HashableWeakRef",
    "super",
    "tensorflow_probability.python.bijectors.bijector.WeakKeyDefaultDict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.WeakKeyDefaultDict.__getitem__": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "HashableWeakRef",
    "super",
    "tensorflow_probability.python.bijectors.bijector.WeakKeyDefaultDict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.WeakKeyDefaultDict.__missing__": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "HashableWeakRef",
    "isinstance",
    "super",
    "tensorflow_probability.python.bijectors.bijector.WeakKeyDefaultDict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.WeakKeyDefaultDict.__setitem__": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.WeakKeyDefaultDict.setdefault": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.WeakKeyDefaultDict.update": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector._Mapping": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.collections"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector._Mapping.__new__": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.bijector._Mapping"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector._Mapping._deep_tuple": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "dict",
    "isinstance",
    "list",
    "map",
    "sorted",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector._Mapping._merge": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector._Mapping.merge": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "ValueError",
    "any",
    "tensorflow_probability.python.bijectors.bijector._Mapping"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector._Mapping.remove": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector._Mapping"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector._Mapping.subkey": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.__all__": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.bijector._get_current_graph": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "tensorflow.compat.v1.get_default_graph",
    "tensorflow.executing_eagerly"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector.chain": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.chain"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector.contextlib": {
  "data": {
   "shadows": "contextlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector.deprecation": {
  "data": {
   "shadows": "tensorflow.python.util.deprecation"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector.six": {
  "data": {
   "shadows": "six"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector.transformed_distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.transformed_distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector.weakref": {
  "data": {
   "shadows": "weakref"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.bijectors",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.bijectors.bijector_test.try_import"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BaseBijectorTest": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BaseBijectorTest.testDefaults": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "NotImplementedError",
    "_BareBonesBijector"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BaseBijectorTest.testDefaults._BareBonesBijector": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector_test.tfb"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BaseBijectorTest.testDefaults._BareBonesBijector.__init__": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BaseBijectorTest.testIsAbstract": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "TypeError",
    "tensorflow_probability.python.bijectors.bijector_test.tfb"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorCachingTest": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorCachingTest.testCachingGarbageCollection": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": [
    "range",
    "ref",
    "sum",
    "tensorflow.executing_eagerly",
    "tensorflow.zeros",
    "tensorflow_probability.python.bijectors.bijector_test.ForwardOnlyBijector",
    "tensorflow_probability.python.bijectors.bijector_test.weakref"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorCachingTest.testCachingOfForwardResults": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "NotImplementedError",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.bijectors.bijector_test.ForwardOnlyBijector"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorCachingTest.testCachingOfInverseResults": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": [
    "NotImplementedError",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.bijectors.bijector_test.InverseOnlyBijector"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorCompositionTest": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorCompositionTest.testComposeFromChainBijector": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": [
    "chain",
    "isinstance",
    "tensorflow.constant",
    "tensorflow.nn.sigmoid",
    "tensorflow_probability.python.bijectors.bijector_test.functools",
    "tensorflow_probability.python.bijectors.bijector_test.tfb"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorCompositionTest.testComposeFromNonTransformedDistribution": {
  "data": {
   "lineno": 372,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.python.bijectors.bijector_test.tfb",
    "tensorflow_probability.python.bijectors.bijector_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorCompositionTest.testComposeFromTDSubclassWithAlternateCtorArgs": {
  "data": {
   "lineno": 368,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector_test.tfb",
    "tensorflow_probability.python.bijectors.bijector_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorCompositionTest.testComposeFromTensor": {
  "data": {
   "lineno": 381,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.exp",
    "tensorflow_probability.python.bijectors.bijector_test.tfb"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorCompositionTest.testComposeFromTransformedDistribution": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.python.bijectors.bijector_test.tfb",
    "tensorflow_probability.python.bijectors.bijector_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorCompositionTest.testHandlesKwargs": {
  "data": {
   "lineno": 387,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.zeros",
    "tensorflow_probability.python.bijectors.bijector_test.tfb",
    "tensorflow_probability.python.bijectors.bijector_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorConstILDJLeakTest": {
  "data": {
   "lineno": 417,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorConstILDJLeakTest.testConstILDJLeak": {
  "data": {
   "lineno": 421,
   "symbols_in_volume": [
    "call_fldj",
    "func1",
    "func2",
    "tensorflow_probability.python.bijectors.bijector_test.ConstantJacobian"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorConstILDJLeakTest.testConstILDJLeak.func1": {
  "data": {
   "lineno": 426,
   "symbols_in_volume": [
    "call_fldj",
    "tensorflow.function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorConstILDJLeakTest.testConstILDJLeak.func2": {
  "data": {
   "lineno": 431,
   "symbols_in_volume": [
    "call_fldj",
    "tensorflow.function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorLDJCachingTest": {
  "data": {
   "lineno": 397,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorLDJCachingTest.testShapeCachingIssue": {
  "data": {
   "lineno": 399,
   "symbols_in_volume": [
    "numpy.random.uniform",
    "tensorflow.compat.v1.placeholder",
    "tensorflow.executing_eagerly",
    "tensorflow.float32",
    "tensorflow_probability.python.bijectors.bijector_test.ConstantJacobian"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorReduceEventDimsTest": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorReduceEventDimsTest.testHandlesNonStaticEventNdims": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": [
    "numpy.log",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.bijectors.bijector_test.ExpOnlyJacobian"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorReduceEventDimsTest.testReduceEventNdimsForward": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.sum",
    "tensorflow_probability.python.bijectors.bijector_test.ExpOnlyJacobian"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorReduceEventDimsTest.testReduceEventNdimsForwardConstJacobian": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector_test.ConstantJacobian"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorReduceEventDimsTest.testReduceEventNdimsForwardRaiseError": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.bijectors.bijector_test.ExpOnlyJacobian"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorReduceEventDimsTest.testReduceEventNdimsInverse": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.sum",
    "tensorflow_probability.python.bijectors.bijector_test.ExpOnlyJacobian"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorReduceEventDimsTest.testReduceEventNdimsInverseConstJacobian": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector_test.ConstantJacobian"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorReduceEventDimsTest.testReduceEventNdimsInverseRaiseError": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.bijectors.bijector_test.ExpOnlyJacobian"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorTestEventNdims": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorTestEventNdims.assertRaisesError": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorTestEventNdims.testBijectorArrayEventNdims": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.bijectors.bijector_test.ExpOnlyJacobian"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorTestEventNdims.testBijectorDynamicEventNdims": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.bijectors.bijector_test.ExpOnlyJacobian"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.BijectorTestEventNdims.testBijectorNonIntegerEventNdims": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.bijectors.bijector_test.ExpOnlyJacobian"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.ConstantJacobian": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector_test.tfb"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.ConstantJacobian.__init__": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.bijector_test.ConstantJacobian"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.ConstantJacobian._forward_log_det_jacobian": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "tensorflow.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.ConstantJacobian._inverse_log_det_jacobian": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "tensorflow.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.ExpOnlyJacobian": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector_test.tfb"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.ExpOnlyJacobian.__init__": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.bijector_test.ExpOnlyJacobian"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.ExpOnlyJacobian._forward_log_det_jacobian": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "tensorflow.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.ExpOnlyJacobian._inverse_log_det_jacobian": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "tensorflow.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.ForwardOnlyBijector": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector_test.tfb"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.ForwardOnlyBijector.__init__": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.bijector_test.ForwardOnlyBijector"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.ForwardOnlyBijector._forward": {
  "data": {
   "lineno": 116
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.ForwardOnlyBijector._forward_log_det_jacobian": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "tensorflow.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.IntentionallyMissingError": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.InverseOnlyBijector": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector_test.tfb"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.InverseOnlyBijector.__init__": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.bijector_test.InverseOnlyBijector"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.InverseOnlyBijector._inverse": {
  "data": {
   "lineno": 132
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.InverseOnlyBijector._inverse_log_det_jacobian": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "tensorflow.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.NumpyArrayCaching": {
  "data": {
   "lineno": 446,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.bijector_test.NumpyArrayCaching.test_caches": {
  "data": {
   "lineno": 449,
   "symbols_in_volume": [
    "k",
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "numpy.ndarray",
    "tensorflow",
    "tensorflow.compat.v2",
    "tensorflow.compat.v2.math",
    "tensorflow_probability.python.bijectors.bijector_test.mock",
    "tensorflow_probability.python.bijectors.bijector_test.tfb"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector_test.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector_test.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector_test.mock": {
  "data": {
   "lineno": 46
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.bijector_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector_test.tfb": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.bijector_test.tfd": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.bijector_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector_test.try_import": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "ImportError",
    "str",
    "tensorflow.compat.v1.logging.warning",
    "tensorflow_probability.python.bijectors.bijector_test.importlib"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test.weakref": {
  "data": {
   "shadows": "weakref"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector_test_util": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.bijector_test_util.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "eval_func",
    "numpy.testing.assert_allclose",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test_util.assert_finite": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "AssertionError",
    "numpy.isfinite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "eval_func",
    "int",
    "numpy.divide",
    "numpy.float32",
    "numpy.linspace",
    "numpy.testing.assert_allclose",
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.reduce_mean",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_strictly_monotonic",
    "tensorflow_probability.python.distributions.uniform.Uniform",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test_util.assert_strictly_decreasing": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "numpy.diff",
    "numpy.testing.assert_array_less"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test_util.assert_strictly_increasing": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "numpy.diff",
    "numpy.testing.assert_array_less"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test_util.assert_strictly_monotonic": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_strictly_decreasing",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_strictly_increasing"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test_util.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector_test_util.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector_test_util.get_fldj_theoretical": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": [
    "tensorflow.compat.v2.GradientTape",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.linalg.slogdet",
    "tensorflow.compat.v2.matmul",
    "tensorflow_probability.python.bijectors.reshape.Reshape",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.bijector_test_util.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector_test_util.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector_test_util.reshape_bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.reshape"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector_test_util.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector_test_util.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.bijector_test_util.uniform_distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.uniform"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.blockwise": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.blockwise.Blockwise": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.blockwise.Blockwise.__init__": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "NotImplementedError",
    "ValueError",
    "_validate_block_sizes",
    "len",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.ones",
    "tensorflow_probability.python.bijectors.bijector",
    "tensorflow_probability.python.bijectors.bijector.forward_min_event_ndims",
    "tensorflow_probability.python.bijectors.bijector.inverse_min_event_ndims",
    "tensorflow_probability.python.bijectors.blockwise.Blockwise"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise.Blockwise._forward": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "len",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.split",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise.Blockwise._forward_log_det_jacobian": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "len",
    "sum",
    "tensorflow.compat.v2.split",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise.Blockwise._inverse": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "len",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.split",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise.Blockwise._inverse_log_det_jacobian": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "len",
    "sum",
    "tensorflow.compat.v2.split",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise.Blockwise.bijectors": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise.Blockwise.block_sizes": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.blockwise._validate_block_sizes": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.rank",
    "tensorflow.compat.v2.size",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
    "tensorflow_probability.python.internal.tensorshape_util.num_elements",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.blockwise.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.blockwise.bijector_base": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.blockwise.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.blockwise.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.blockwise.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.blockwise.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.blockwise_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.BlockwiseBijectorTest": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.BlockwiseBijectorTest.testBijectiveAndFinite": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.float32",
    "tensorflow.identity",
    "tensorflow_probability.python.bijectors.Affine",
    "tensorflow_probability.python.bijectors.Blockwise",
    "tensorflow_probability.python.bijectors.Exp",
    "tensorflow_probability.python.bijectors.Softplus",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.BlockwiseBijectorTest.testExplicitBlocks": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "sum",
    "tensorflow.cast",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.expand_dims",
    "tensorflow.float32",
    "tensorflow.identity",
    "tensorflow.shape",
    "tensorflow.tile",
    "tensorflow_probability.python.bijectors.Affine",
    "tensorflow_probability.python.bijectors.Blockwise",
    "tensorflow_probability.python.bijectors.Exp",
    "tensorflow_probability.python.bijectors.Softplus",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.BlockwiseBijectorTest.testImplicitBlocks": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Affine",
    "tensorflow_probability.python.bijectors.Blockwise",
    "tensorflow_probability.python.bijectors.Exp",
    "tensorflow_probability.python.bijectors.Softplus"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.BlockwiseBijectorTest.testName": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Affine",
    "tensorflow_probability.python.bijectors.Blockwise",
    "tensorflow_probability.python.bijectors.Exp",
    "tensorflow_probability.python.bijectors.Softplus"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.BlockwiseBijectorTest.testNameOneBijector": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Blockwise",
    "tensorflow_probability.python.bijectors.Exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.BlockwiseBijectorTest.testRaisesBadBijectors": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "NotImplementedError",
    "tensorflow_probability.python.bijectors.Blockwise",
    "tensorflow_probability.python.bijectors.Reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.BlockwiseBijectorTest.testRaisesBadBlocks": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.bijectors.Blockwise",
    "tensorflow_probability.python.bijectors.Exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.BlockwiseBijectorTest.testRaisesBadBlocksDynamic": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.bijectors.Blockwise",
    "tensorflow_probability.python.bijectors.Exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.BlockwiseBijectorTest.testRaisesEmptyBijectors": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.bijectors.Blockwise"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.blockwise_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete.__init__": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "_maybe_check_valid_map_values",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete._forward": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.gather",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.size",
    "tensorflow_probability.python.internal.assert_util.assert_equal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete._inverse": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.argmin",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.gather_nd",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.maximum",
    "tensorflow.compat.v2.minimum",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.searchsorted",
    "tensorflow.compat.v2.size",
    "tensorflow.compat.v2.stack",
    "tensorflow_probability.python.internal.assert_util.assert_near"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete._inverse_log_det_jacobian": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete.map_values": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete.__all__": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete._maybe_check_valid_map_values": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.compat.v2.math.is_strictly_increasing",
    "tensorflow.compat.v2.size",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.assert_util.assert_greater",
    "tensorflow_probability.python.internal.assert_util.assert_rank",
    "tensorflow_probability.python.internal.tensorshape_util.num_elements",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.CategoricalToDiscreteTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.CategoricalToDiscreteTest.testBijectiveAndFinite16bit": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.float16",
    "numpy.int32",
    "numpy.logspace",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite",
    "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.CategoricalToDiscreteTest.testBijectiveAndFinite32bit": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.float32",
    "numpy.int32",
    "numpy.logspace",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite",
    "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.CategoricalToDiscreteTest.testBijectorForward": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.CategoricalToDiscreteTest.testBijectorForwardOutOfBoundIndicesRaises": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.CategoricalToDiscreteTest.testBijectorInverse": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.CategoricalToDiscreteTest.testBijectorInverseValueNotFoundRaises": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.CategoricalToDiscreteTest.testInverseLogDetJacobian": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.CategoricalToDiscreteTest.testMapValuesRankNotEqualToOneRaises": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.CategoricalToDiscreteTest.testMapValuesSizeZeroRaises": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.CategoricalToDiscreteTest.testUnsortedValuesRaises": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.categorical_to_discrete.CategoricalToDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.categorical_to_discrete": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.categorical_to_discrete"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.categorical_to_discrete_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.chain": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.chain.Chain": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.chain.Chain.__init__": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "NotImplementedError",
    "ValueError",
    "all",
    "len",
    "list",
    "set",
    "super",
    "tensorflow_probability.python.bijectors.chain.Chain",
    "tensorflow_probability.python.bijectors.chain._compute_min_event_ndims",
    "tensorflow_probability.python.bijectors.chain.itertools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain.Chain._forward": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "reversed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain.Chain._forward_event_shape": {
  "data": {
   "lineno": 209
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain.Chain._forward_event_shape_tensor": {
  "data": {
   "lineno": 213
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain.Chain._forward_log_det_jacobian": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": [
    "reversed",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.rank",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.size",
    "tensorflow_probability.python.bijectors.chain._use_static_shape",
    "tensorflow_probability.python.internal.distribution_util.maybe_get_static_value",
    "tensorflow_probability.python.internal.dtype_util.base_dtype",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain.Chain._inverse": {
  "data": {
   "lineno": 225
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain.Chain._inverse_event_shape": {
  "data": {
   "lineno": 217
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain.Chain._inverse_event_shape_tensor": {
  "data": {
   "lineno": 221
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain.Chain._inverse_log_det_jacobian": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.rank",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.size",
    "tensorflow_probability.python.bijectors.chain._use_static_shape",
    "tensorflow_probability.python.internal.distribution_util.maybe_get_static_value",
    "tensorflow_probability.python.internal.dtype_util.base_dtype",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain.Chain._shape_helper": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "ValueError",
    "func",
    "getattr",
    "reversed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain.Chain.bijectors": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain.__all__": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.chain._compute_min_event_ndims": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "max",
    "reversed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain._use_static_shape": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "int",
    "isinstance",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.chain.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.chain.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.chain.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.chain.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.chain.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.chain.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.chain.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.chain.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.chain_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testBijector": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "numpy.asarray",
    "numpy.exp",
    "numpy.log",
    "numpy.sum",
    "tensorflow_probability.python.bijectors.Chain",
    "tensorflow_probability.python.bijectors.Exp",
    "tensorflow_probability.python.bijectors.Softplus"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testBijectorIdentity": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "numpy.asarray",
    "tensorflow_probability.python.bijectors.Chain"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testChainAffineExp": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.log",
    "numpy.sum",
    "tensorflow_probability.python.bijectors.Affine",
    "tensorflow_probability.python.bijectors.Chain",
    "tensorflow_probability.python.bijectors.Exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testChainDynamicToStatic": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.bijectors.Chain",
    "tensorflow_probability.python.bijectors.Inline",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testChainDynamicToStatic.ldj": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "tensorflow.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testChainDynamicToStatic.xform_dynamic": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testChainDynamicToStatic.xform_static": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testChainExpAffine": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.log",
    "numpy.sum",
    "tensorflow_probability.python.bijectors.Affine",
    "tensorflow_probability.python.bijectors.Chain",
    "tensorflow_probability.python.bijectors.Exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testChainIldjWithPlaceholder": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.zeros",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.bijectors.Chain",
    "tensorflow_probability.python.bijectors.Exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testMinEventNdimsChain": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Affine",
    "tensorflow_probability.python.bijectors.Chain",
    "tensorflow_probability.python.bijectors.Exp",
    "tensorflow_probability.python.bijectors.Softplus"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testMinEventNdimsShapeChangingAddDims": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Affine",
    "tensorflow_probability.python.bijectors.Chain",
    "tensorflow_probability.python.bijectors.chain_test.ShapeChanging"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testMinEventNdimsShapeChangingAddRemoveDims": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Chain",
    "tensorflow_probability.python.bijectors.chain_test.ShapeChanging"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testMinEventNdimsShapeChangingRemoveDims": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Affine",
    "tensorflow_probability.python.bijectors.Chain",
    "tensorflow_probability.python.bijectors.chain_test.ShapeChanging"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testScalarCongruency": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Chain",
    "tensorflow_probability.python.bijectors.Exp",
    "tensorflow_probability.python.bijectors.Softplus",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ChainBijectorTest.testShapeGetters": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow_probability.python.bijectors.Chain",
    "tensorflow_probability.python.bijectors.SoftmaxCentered",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.ShapeChanging": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.chain_test.ShapeChanging.__init__": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.chain_test.ShapeChanging"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.chain_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.chain_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.chain_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.chain_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.chain_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.chain_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.chain_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.chain_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.chain_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product.CholeskyOuterProduct": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product.CholeskyOuterProduct.__init__": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.cholesky_outer_product.CholeskyOuterProduct"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product.CholeskyOuterProduct._forward": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.band_part",
    "tensorflow.compat.v2.matmul",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.assert_util.assert_rank_at_least",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product.CholeskyOuterProduct._forward_log_det_jacobian": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.int32",
    "numpy.log",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.equal",
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.linspace",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.matmul",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.rank",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.squeeze",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.assert_util.assert_rank_at_least",
    "tensorflow_probability.python.internal.distribution_util.pick_vector",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product.CholeskyOuterProduct._inverse": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.cholesky"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product.CholeskyOuterProduct._make_columnar": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.int32",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.equal",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.rank",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.distribution_util.pick_vector",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product.__all__": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product_test.CholeskyOuterProductBijectorTest": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product_test.CholeskyOuterProductBijectorTest.testBatchDeferred": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.bijectors.CholeskyOuterProduct"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product_test.CholeskyOuterProductBijectorTest.testBatchStatic": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.bijectors.CholeskyOuterProduct"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product_test.CholeskyOuterProductBijectorTest.testBijectorMatrix": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "numpy.asarray",
    "numpy.log",
    "numpy.matmul",
    "numpy.sqrt",
    "numpy.sum",
    "numpy.transpose",
    "tensorflow_probability.python.bijectors.CholeskyOuterProduct"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product_test.CholeskyOuterProductBijectorTest.testNoBatchDeferred": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.bijectors.CholeskyOuterProduct"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product_test.CholeskyOuterProductBijectorTest.testNoBatchDynamicJacobian": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "numpy.eye",
    "numpy.float32",
    "numpy.log",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.bijectors.CholeskyOuterProduct"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product_test.CholeskyOuterProductBijectorTest.testNoBatchStatic": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.bijectors.CholeskyOuterProduct"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product_test.CholeskyOuterProductBijectorTest.testNoBatchStaticJacobian": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "numpy.eye",
    "numpy.log",
    "tensorflow_probability.python.bijectors.CholeskyOuterProduct"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_outer_product_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky.CholeskyOuterProduct": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.cholesky_outer_product.CholeskyOuterProduct"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky.CholeskyToInvCholesky": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky.CholeskyToInvCholesky.__init__": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.cholesky_outer_product.CholeskyOuterProduct",
    "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky.CholeskyToInvCholesky"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky.CholeskyToInvCholesky._assertions": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.band_part",
    "tensorflow.compat.v2.linalg.diag",
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.assert_util.assert_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky.CholeskyToInvCholesky._forward": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.eye",
    "tensorflow.compat.v2.linalg.cholesky",
    "tensorflow.compat.v2.linalg.triangular_solve",
    "tensorflow.compat.v2.matmul",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.dtype_util.base_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky.CholeskyToInvCholesky._forward_log_det_jacobian": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky_test.CholeskyToInvCholeskyTest": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky_test.CholeskyToInvCholeskyTest._get_fldj_numerical": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.eye",
    "tensorflow.compat.v2.linalg.det",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.bijectors.Identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky_test.CholeskyToInvCholeskyTest.testBijector": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.linalg.cholesky",
    "numpy.linalg.inv",
    "tensorflow_probability.python.bijectors.CholeskyToInvCholesky"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky_test.CholeskyToInvCholeskyTest.testBijectorWithTensors": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.bijectors.CholeskyToInvCholesky"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky_test.CholeskyToInvCholeskyTest.testJacobian": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float64",
    "tensorflow_probability.python.bijectors.CholeskyToInvCholesky",
    "tensorflow_probability.python.bijectors.Exp",
    "tensorflow_probability.python.bijectors.Invert",
    "tensorflow_probability.python.bijectors.ScaleTriL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky_test.CholeskyToInvCholeskyTest.testJacobianWithTensors": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.bijectors.CholeskyToInvCholesky"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cholesky_to_inv_cholesky_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.conditional_bijector_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.conditional_bijector_test.ConditionalBijectorTest": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.conditional_bijector_test.ConditionalBijectorTest.testConditionalBijector": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "ValueError",
    "getattr",
    "method",
    "tensorflow_probability.python.bijectors.conditional_bijector_test._TestBijector"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.conditional_bijector_test.ConditionalBijectorTest.testNestedCondition": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "ValueError",
    "getattr",
    "method",
    "tensorflow_probability.python.bijectors.conditional_bijector_test._TestBijector"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.conditional_bijector_test._TestBijector": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.ConditionalBijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.conditional_bijector_test._TestBijector.__init__": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v2.float32",
    "tensorflow_probability.python.bijectors.conditional_bijector_test._TestBijector"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.conditional_bijector_test._TestBijector._forward": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.conditional_bijector_test._TestBijector._forward_log_det_jacobian": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.conditional_bijector_test._TestBijector._inverse": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.conditional_bijector_test._TestBijector._inverse_log_det_jacobian": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.conditional_bijector_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.conditional_bijector_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.conditional_bijector_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.conditional_bijector_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.conditional_bijector_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.conditional_bijector_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.CorrelationCholesky": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.CorrelationCholesky.__init__": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.correlation_cholesky.CorrelationCholesky"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.CorrelationCholesky._forward": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.linalg.set_diag",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.norm",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.pad",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular",
    "tensorflow_probability.python.internal.prefer_static.rank",
    "tensorflow_probability.python.internal.prefer_static.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.CorrelationCholesky._forward_event_shape": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.CorrelationCholesky._forward_event_shape_tensor": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.CorrelationCholesky._forward_log_det_jacobian": {
  "data": {
   "lineno": 179
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.CorrelationCholesky._inverse": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.linalg.set_diag",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular",
    "tensorflow_probability.python.internal.prefer_static.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.CorrelationCholesky._inverse_event_shape": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.CorrelationCholesky._inverse_event_shape_tensor": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.CorrelationCholesky._inverse_log_det_jacobian": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.internal.prefer_static.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.fill_triangular": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.fill_triangular"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.prefer_static": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.prefer_static"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.CorrelationCholeskyBijectorTest": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.CorrelationCholeskyBijectorTest.testBijector": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.log",
    "numpy.sum",
    "tensorflow_probability.python.bijectors.CorrelationCholesky"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.CorrelationCholeskyBijectorTest.testBijectorBatch": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.log",
    "numpy.sum",
    "tensorflow_probability.python.bijectors.CorrelationCholesky"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.CorrelationCholeskyBijectorTest.testBijectorWithVariables": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.log",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.int32",
    "tensorflow_probability.python.bijectors.CorrelationCholesky"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.CorrelationCholeskyBijectorTest.testShape": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.ones",
    "tensorflow_probability.python.bijectors.CorrelationCholesky",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.CorrelationCholeskyBijectorTest.testShapeError": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.compat.v2.TensorShape",
    "tensorflow_probability.python.bijectors.FillTriangular",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.CorrelationCholeskyBijectorTest.testTheoreticalFldj": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.linspace",
    "tensorflow_probability.python.bijectors.CorrelationCholesky",
    "tensorflow_probability.python.bijectors.FillTriangular",
    "tensorflow_probability.python.bijectors.Invert",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite",
    "tensorflow_probability.python.bijectors.bijector_test_util.get_fldj_theoretical"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.CorrelationCholeskyBijectorTest.testWithLKJSamples": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.float64",
    "tensorflow_probability.python.bijectors.CorrelationCholesky",
    "tensorflow_probability.python.bijectors.FillTriangular",
    "tensorflow_probability.python.bijectors.Invert",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite",
    "tensorflow_probability.python.bijectors.bijector_test_util.get_fldj_theoretical",
    "tensorflow_probability.python.bijectors.correlation_cholesky_test.itertools",
    "tensorflow_probability.python.distributions.lkj.LKJ"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.lkj": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.lkj"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.correlation_cholesky_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cumsum": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.cumsum.Cumsum": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.cumsum.Cumsum.__init__": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "int",
    "isinstance",
    "super",
    "tensorflow_probability.python.bijectors.cumsum.Cumsum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cumsum.Cumsum._forward": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "tensorflow.cumsum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cumsum.Cumsum._forward_log_det_jacobian": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "tensorflow.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cumsum.Cumsum._inverse": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "tensorflow.dtypes.int32",
    "tensorflow.one_hot",
    "tensorflow.pad",
    "tensorflow.slice",
    "tensorflow.zeros",
    "tensorflow_probability.python.internal.prefer_static.rank",
    "tensorflow_probability.python.internal.prefer_static.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cumsum.Cumsum.axis": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cumsum.__all__": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.cumsum.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cumsum.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cumsum.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cumsum.prefer_static": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.prefer_static"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cumsum.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cumsum.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cumsum_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.python.bijectors.cumsum_test._CumsumBijectorTest"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.cumsum_test.CumsumBijectorTestWithDynamicShape": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow_probability.python.bijectors.cumsum_test._CumsumBijectorTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.cumsum_test.CumsumBijectorTestWithStaticShape": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow_probability.python.bijectors.cumsum_test._CumsumBijectorTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.cumsum_test._CumsumBijectorTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.cumsum_test._CumsumBijectorTest._build_tensor": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "numpy.asarray",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cumsum_test._CumsumBijectorTest._checkBijectorInAllDims": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "range",
    "tensorflow.cumsum",
    "tensorflow.rank",
    "tensorflow_probability.python.bijectors.Cumsum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cumsum_test._CumsumBijectorTest._checkEqualTheoreticalFldj": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "int",
    "numpy.zeros_like",
    "tensorflow.rank",
    "tensorflow_probability.python.bijectors.Cumsum",
    "tensorflow_probability.python.bijectors.bijector_test_util.get_fldj_theoretical"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cumsum_test._CumsumBijectorTest.testBijectiveAndFinite": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "numpy.cumsum",
    "numpy.float32",
    "numpy.linspace",
    "tensorflow_probability.python.bijectors.Cumsum",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cumsum_test._CumsumBijectorTest.testBijector": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cumsum_test._CumsumBijectorTest.testInvalidAxis": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "tensorflow_probability.python.bijectors.Cumsum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cumsum_test._CumsumBijectorTest.testJacobian": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.expand_dims",
    "numpy.reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.cumsum_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cumsum_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cumsum_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cumsum_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cumsum_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cumsum_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cumsum_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.cumsum_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform.DiscreteCosineTransform": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform.DiscreteCosineTransform.__init__": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "NotImplementedError",
    "super",
    "tensorflow_probability.python.bijectors.discrete_cosine_transform.DiscreteCosineTransform"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform.DiscreteCosineTransform._forward": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "tensorflow.compat.v2.signal.dct"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform.DiscreteCosineTransform._forward_log_det_jacobian": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.python.internal.dtype_util.base_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform.DiscreteCosineTransform._inverse": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "tensorflow.compat.v2.signal.idct"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform.DiscreteCosineTransform._inverse_log_det_jacobian": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.python.internal.dtype_util.base_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform_test.DiscreteCosineTransformTest": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform_test.DiscreteCosineTransformTest.testBijectiveAndFinite": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.linspace",
    "tensorflow_probability.python.bijectors.DiscreteCosineTransform",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform_test.DiscreteCosineTransformTest.testBijector": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.random.randn",
    "scipy.fftpack.dct",
    "tensorflow_probability.python.bijectors.DiscreteCosineTransform"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform_test.DiscreteCosineTransformTest.testBijector_dct3": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.random.randn",
    "scipy.fftpack.dct",
    "tensorflow_probability.python.bijectors.DiscreteCosineTransform"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform_test.fftpack": {
  "data": {
   "shadows": "scipy.fftpack"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.discrete_cosine_transform_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.exp": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.exp.Exp": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.power_transform.PowerTransform"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.exp.Exp.__init__": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.exp.Exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.exp.__all__": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.exp.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.exp.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.exp.power_transform": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.power_transform"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.exp.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.exp_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.exp_test.ExpBijectorTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.exp_test.ExpBijectorTest.testBijectiveAndFinite": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.linspace",
    "numpy.logspace",
    "tensorflow_probability.python.bijectors.Exp",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.exp_test.ExpBijectorTest.testBijector": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.log",
    "numpy.squeeze",
    "tensorflow_probability.python.bijectors.Exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.exp_test.ExpBijectorTest.testJacobian": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "numpy.expand_dims",
    "numpy.linspace",
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.python.bijectors.Exp",
    "tensorflow_probability.python.bijectors.bijector_test_util.get_fldj_theoretical"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.exp_test.ExpBijectorTest.testScalarCongruency": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Exp",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.exp_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.exp_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.exp_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.exp_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.exp_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.exp_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.exp_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.exp_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.expm1": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.expm1.Expm1": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.expm1.Expm1.__init__": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.expm1.Expm1"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.expm1.Expm1._forward": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.expm1"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.expm1.Expm1._forward_log_det_jacobian": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "tensorflow.compat.v2.identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.expm1.Expm1._inverse": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log1p"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.expm1.Expm1._inverse_log_det_jacobian": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log1p"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.expm1.__all__": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.expm1.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.expm1.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.expm1.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.expm1.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.expm1.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.expm1_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.expm1_test.Expm1BijectorTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.expm1_test.Expm1BijectorTest.testBijectiveAndFinite": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.linspace",
    "numpy.logspace",
    "tensorflow_probability.python.bijectors.Expm1",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.expm1_test.Expm1BijectorTest.testBijector": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "numpy.expm1",
    "numpy.log1p",
    "numpy.squeeze",
    "tensorflow_probability.python.bijectors.Expm1"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.expm1_test.Expm1BijectorTest.testMatchesExpm1": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "numpy.expm1",
    "numpy.random.randn",
    "tensorflow.compat.v2.identity",
    "tensorflow_probability.python.bijectors.Expm1"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.expm1_test.Expm1BijectorTest.testScalarCongruency": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Expm1",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.expm1_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.expm1_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.expm1_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.expm1_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.expm1_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.expm1_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.expm1_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.expm1_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.fill_triangular": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular.__init__": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular._forward": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.fill_triangular"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular._forward_event_shape": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow_probability.python.internal.tensorshape_util.concatenate",
    "vector_size_to_square_matrix_size"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular._forward_event_shape_tensor": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "vector_size_to_square_matrix_size"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular._forward_log_det_jacobian": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "tensorflow.compat.v2.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular._inverse": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.fill_triangular_inverse"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular._inverse_event_shape": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow_probability.python.internal.tensorshape_util.concatenate"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular._inverse_event_shape_tensor": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.identity",
    "tensorflow_probability.python.internal.assert_util.assert_equal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular._inverse_log_det_jacobian": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "tensorflow.compat.v2.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.__all__": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.fill_triangular.vector_size_to_square_matrix_size": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "ValueError",
    "float",
    "int",
    "isinstance",
    "numpy.generic",
    "numpy.ndarray",
    "numpy.sqrt",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.sqrt",
    "tensorflow_probability.python.internal.assert_util.assert_equal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.fill_triangular_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.fill_triangular_test.FillTriangularBijectorTest": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.fill_triangular_test.FillTriangularBijectorTest.testBijector": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.bijectors.FillTriangular"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.fill_triangular_test.FillTriangularBijectorTest.testShape": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.ones",
    "tensorflow_probability.python.bijectors.FillTriangular",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.fill_triangular_test.FillTriangularBijectorTest.testShapeError": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.compat.v2.TensorShape",
    "tensorflow_probability.python.bijectors.FillTriangular",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.fill_triangular_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.fill_triangular_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.fill_triangular_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.fill_triangular_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.fill_triangular_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.fill_triangular_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.fill_triangular_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.fill_triangular_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.gumbel": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.gumbel.Gumbel": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.gumbel.Gumbel.__init__": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow_probability.python.bijectors.gumbel.Gumbel",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.gumbel.Gumbel._forward": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "tensorflow.compat.v2.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.gumbel.Gumbel._forward_log_det_jacobian": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.gumbel.Gumbel._inverse": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.gumbel.Gumbel._inverse_log_det_jacobian": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.gumbel.Gumbel._maybe_assert_valid_y": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.python.internal.assert_util.assert_less_equal",
    "tensorflow_probability.python.internal.assert_util.assert_non_negative",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.gumbel.Gumbel.loc": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.gumbel.Gumbel.scale": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.gumbel.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.gumbel.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.gumbel.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.gumbel.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.gumbel.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.gumbel.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.gumbel.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.gumbel.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.gumbel.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.gumbel_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.gumbel_test.GumbelBijectorTest": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.gumbel_test.GumbelBijectorTest.testBijectiveAndFinite": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.linspace",
    "tensorflow_probability.python.bijectors.Gumbel",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.gumbel_test.GumbelBijectorTest.testBijector": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.squeeze",
    "scipy.stats.gumbel_r",
    "tensorflow_probability.python.bijectors.Gumbel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.gumbel_test.GumbelBijectorTest.testScalarCongruency": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Gumbel",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.gumbel_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.gumbel_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.gumbel_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.gumbel_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.gumbel_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.gumbel_test.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.gumbel_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.gumbel_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.gumbel_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability.bijectors",
    "tensorflow_probability.python.bijectors.hypothesis_testlib.collections"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.BIJECTOR_SUPPORTS": {
  "data": {
   "lineno": 93
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.BijectorSupport": {
  "data": {
   "lineno": 91
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.INSTANTIABLE_BIJECTORS": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.SPECIAL_BIJECTORS": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.Support": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.bijector_supports": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "ValueError",
    "set",
    "tensorflow_probability.python.bijectors.hypothesis_testlib.BIJECTOR_SUPPORTS",
    "tensorflow_probability.python.bijectors.hypothesis_testlib.BijectorSupport",
    "tensorflow_probability.python.bijectors.hypothesis_testlib.Support",
    "tensorflow_probability.python.bijectors.hypothesis_testlib.instantiable_bijectors"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.distribution_filter_for": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "isinstance",
    "tensorflow_probability.python.bijectors.hypothesis_testlib.tfb"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.distribution_filter_for.additional_check": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "int",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.distribution_filter_for.distribution_filter": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "additional_check",
    "tensorflow_probability.python.internal.dtype_util.is_floating",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.hps": {
  "data": {
   "shadows": "hypothesis.strategies"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.instantiable_bijectors": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "absl.logging.warning",
    "bijector_class",
    "issubclass",
    "set",
    "sorted",
    "tensorflow_probability.python.bijectors.hypothesis_testlib.INSTANTIABLE_BIJECTORS",
    "tensorflow_probability.python.bijectors.hypothesis_testlib.SPECIAL_BIJECTORS",
    "tensorflow_probability.python.bijectors.hypothesis_testlib.inspect",
    "tensorflow_probability.python.bijectors.hypothesis_testlib.six",
    "tensorflow_probability.python.bijectors.hypothesis_testlib.tfb"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.logging": {
  "data": {
   "shadows": "absl.logging"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.six": {
  "data": {
   "shadows": "six"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.tfb": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.hypothesis_testlib.unconstrained_bijectors": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "draw",
    "hypothesis.strategies.just",
    "hypothesis.strategies.one_of",
    "map",
    "tensorflow_probability.python.bijectors.hypothesis_testlib.bijector_supports",
    "tensorflow_probability.python.bijectors.hypothesis_testlib.instantiable_bijectors",
    "tensorflow_probability.python.bijectors.hypothesis_testlib.tfb"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.identity": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.identity.Identity": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.identity.Identity.__init__": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.identity.Identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.identity.Identity._forward": {
  "data": {
   "lineno": 53
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.identity.Identity._forward_log_det_jacobian": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.identity.Identity._inverse": {
  "data": {
   "lineno": 56
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.identity.Identity._inverse_log_det_jacobian": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.identity.__all__": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.identity.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.identity.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.identity.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.identity.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.identity.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.identity_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.identity_test.IdentityTest": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.identity_test.IdentityTest.testBijector": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.identity_test.IdentityTest.testScalarCongruency": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Identity",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.identity_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.identity_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.identity_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.identity_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.identity_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.identity_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.identity_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.inline": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.inline.Inline": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.inline.Inline.__init__": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.inline.Inline"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.inline.Inline._forward": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "NotImplementedError",
    "callable"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.inline.Inline._forward_event_shape": {
  "data": {
   "lineno": 102
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.inline.Inline._forward_event_shape_tensor": {
  "data": {
   "lineno": 108
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.inline.Inline._forward_log_det_jacobian": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "NotImplementedError",
    "callable"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.inline.Inline._inverse": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "NotImplementedError",
    "callable"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.inline.Inline._inverse_event_shape": {
  "data": {
   "lineno": 114
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.inline.Inline._inverse_event_shape_tensor": {
  "data": {
   "lineno": 120
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.inline.Inline._inverse_log_det_jacobian": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "NotImplementedError",
    "callable"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.inline.__all__": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.inline.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.inline.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.inline.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.inline.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.inline_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.inline_test.InlineBijectorTest": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.inline_test.InlineBijectorTest.testBijector": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.log",
    "numpy.sum",
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.math.log",
    "tensorflow_probability.python.bijectors.Exp",
    "tensorflow_probability.python.bijectors.Inline"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.inline_test.InlineBijectorTest.testShapeGetters": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape",
    "tensorflow.compat.v2.concat",
    "tensorflow_probability.python.bijectors.Inline",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.inline_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.inline_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.inline_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.inline_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.inline_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.inline_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.inline_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.inline_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.invert": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.invert.Invert": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.invert.Invert.__init__": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "NotImplementedError",
    "super",
    "tensorflow_probability.python.bijectors.bijector",
    "tensorflow_probability.python.bijectors.bijector._is_injective",
    "tensorflow_probability.python.bijectors.bijector.dtype",
    "tensorflow_probability.python.bijectors.bijector.forward_min_event_ndims",
    "tensorflow_probability.python.bijectors.bijector.graph_parents",
    "tensorflow_probability.python.bijectors.bijector.inverse_min_event_ndims",
    "tensorflow_probability.python.bijectors.bijector.is_constant_jacobian",
    "tensorflow_probability.python.bijectors.bijector.name",
    "tensorflow_probability.python.bijectors.invert.Invert"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert.Invert.bijector": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert.Invert.forward": {
  "data": {
   "lineno": 93
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert.Invert.forward_event_shape": {
  "data": {
   "lineno": 77
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert.Invert.forward_event_shape_tensor": {
  "data": {
   "lineno": 80
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert.Invert.forward_log_det_jacobian": {
  "data": {
   "lineno": 102
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert.Invert.inverse": {
  "data": {
   "lineno": 96
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert.Invert.inverse_event_shape": {
  "data": {
   "lineno": 83
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert.Invert.inverse_event_shape_tensor": {
  "data": {
   "lineno": 86
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert.Invert.inverse_log_det_jacobian": {
  "data": {
   "lineno": 99
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert.__all__": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.invert.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.invert.bijector_lib": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.invert.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.invert.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.invert_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.invert_test.InvertBijectorTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.invert_test.InvertBijectorTest.testBijector": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Affine",
    "tensorflow_probability.python.bijectors.Exp",
    "tensorflow_probability.python.bijectors.Identity",
    "tensorflow_probability.python.bijectors.Invert",
    "tensorflow_probability.python.bijectors.SoftmaxCentered",
    "tensorflow_probability.python.bijectors.Softplus"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert_test.InvertBijectorTest.testDocstringExample": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.bijectors.Exp",
    "tensorflow_probability.python.bijectors.Invert",
    "tensorflow_probability.python.distributions.Gamma",
    "tensorflow_probability.python.distributions.TransformedDistribution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert_test.InvertBijectorTest.testScalarCongruency": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Exp",
    "tensorflow_probability.python.bijectors.Invert",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert_test.InvertBijectorTest.testShapeGetters": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape",
    "tensorflow_probability.python.bijectors.Invert",
    "tensorflow_probability.python.bijectors.SoftmaxCentered",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.invert_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.invert_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.invert_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.invert_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.invert_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.invert_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.invert_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.invert_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.invert_test.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.IteratedSigmoidCentered": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.IteratedSigmoidCentered.__init__": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.IteratedSigmoidCentered"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.IteratedSigmoidCentered._forward": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.math.cumprod",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.nn.sigmoid",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.dtype_util.base_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.IteratedSigmoidCentered._forward_event_shape": {
  "data": {
   "lineno": 83
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.IteratedSigmoidCentered._forward_event_shape_tensor": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.IteratedSigmoidCentered._inverse": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.math.cumsum",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.math.log1p",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.dtype_util.base_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.IteratedSigmoidCentered._inverse_event_shape": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.IteratedSigmoidCentered._inverse_event_shape_tensor": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow_probability.python.internal.assert_util.assert_greater"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.IteratedSigmoidCentered._inverse_log_det_jacobian": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.cumsum",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.math.log1p",
    "tensorflow.compat.v2.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test.IteratedSigmoidCenteredBijectorTestFloat32": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test._IteratedSigmoidCenteredBijectorTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test.IteratedSigmoidCenteredBijectorTestFloat64": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test._IteratedSigmoidCenteredBijectorTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test._IteratedSigmoidCenteredBijectorTest": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "object",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test._IteratedSigmoidCenteredBijectorTest.testBijectiveAndFinite": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.mgrid.reshape",
    "numpy.ones",
    "numpy.random.rand",
    "tensorflow_probability.python.bijectors.IteratedSigmoidCentered",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test._IteratedSigmoidCenteredBijectorTest.testBijectorUnknownShape": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.sum",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.bijectors.IteratedSigmoidCentered"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test._IteratedSigmoidCenteredBijectorTest.testBijectorVector": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.sum",
    "tensorflow_probability.python.bijectors.IteratedSigmoidCentered"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test._IteratedSigmoidCenteredBijectorTest.testJacobianConsistent": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "numpy.random.rand",
    "tensorflow.GradientTape",
    "tensorflow.constant",
    "tensorflow.linalg.slogdet",
    "tensorflow_probability.python.bijectors.IteratedSigmoidCentered"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test._IteratedSigmoidCenteredBijectorTest.testShapeGetters": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow_probability.python.bijectors.IteratedSigmoidCentered",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.iterated_sigmoid_centered_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy.Kumaraswamy": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy.Kumaraswamy.__init__": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow_probability.python.bijectors.kumaraswamy.Kumaraswamy"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy.Kumaraswamy._forward": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.math.log1p"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy.Kumaraswamy._inverse": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.math.log1p"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy.Kumaraswamy._inverse_log_det_jacobian": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.math.log1p",
    "tensorflow.compat.v2.math.xlogy"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy.Kumaraswamy._maybe_assert_valid": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "tensorflow.compat.v2.ones",
    "tensorflow_probability.python.internal.assert_util.assert_less_equal",
    "tensorflow_probability.python.internal.assert_util.assert_non_negative",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy.Kumaraswamy._maybe_assert_valid_concentration": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy.Kumaraswamy.concentration0": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy.Kumaraswamy.concentration1": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy_test.KumaraswamyBijectorTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy_test.KumaraswamyBijectorTest.testBijectiveAndFinite": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.linspace",
    "tensorflow_probability.python.bijectors.Kumaraswamy",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy_test.KumaraswamyBijectorTest.testBijector": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.log",
    "numpy.log1p",
    "numpy.squeeze",
    "tensorflow_probability.python.bijectors.Kumaraswamy"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy_test.KumaraswamyBijectorTest.testBijectorConcentration1LogDetJacobianFiniteAtZero": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.float32",
    "numpy.isfinite",
    "numpy.logspace",
    "numpy.ones_like",
    "tensorflow_probability.python.bijectors.Kumaraswamy"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy_test.KumaraswamyBijectorTest.testScalarCongruency": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "int",
    "tensorflow_probability.python.bijectors.Kumaraswamy",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.kumaraswamy_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.AutoregressiveLayer": {
  "data": {
   "lineno": 904,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.masked_autoregressive.AutoregressiveNetwork"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.AutoregressiveLayer.__new__": {
  "data": {
   "lineno": 907,
   "symbols_in_volume": [
    "super",
    "tensorflow.python.util.deprecation.deprecated",
    "tensorflow_probability.python.bijectors.masked_autoregressive.AutoregressiveLayer"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.AutoregressiveNetwork": {
  "data": {
   "lineno": 531,
   "symbols_in_volume": [
    "tensorflow.keras.layers.Layer"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.AutoregressiveNetwork.__init__": {
  "data": {
   "lineno": 726,
   "symbols_in_volume": [
    "ValueError",
    "_list",
    "kernel_initializer",
    "len",
    "super",
    "tensorflow.keras.constraints.get",
    "tensorflow_probability.python.bijectors.masked_autoregressive.AutoregressiveNetwork"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.AutoregressiveNetwork.build": {
  "data": {
   "lineno": 816,
   "symbols_in_volume": [
    "ValueError",
    "_create_degrees",
    "_create_input_order",
    "_create_masks",
    "_make_masked_constraint",
    "_make_masked_initializer",
    "len",
    "numpy.reshape",
    "numpy.tile",
    "range",
    "super",
    "tensorflow.compat.dimension_value",
    "tensorflow.keras.Sequential",
    "tensorflow.keras.layers.Dense",
    "tensorflow.keras.layers.InputLayer",
    "tensorflow.newaxis",
    "tensorflow_probability.python.bijectors.masked_autoregressive.AutoregressiveNetwork"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.AutoregressiveNetwork.call": {
  "data": {
   "lineno": 880,
   "symbols_in_volume": [
    "tensorflow.compat.v2.name_scope",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.newaxis",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.AutoregressiveNetwork.compute_output_shape": {
  "data": {
   "lineno": 891
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.AutoregressiveNetwork.event_shape": {
  "data": {
   "lineno": 895,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.AutoregressiveNetwork.params": {
  "data": {
   "lineno": 899,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.MASK_EXCLUSIVE": {
  "data": {
   "lineno": 305
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.MASK_INCLUSIVE": {
  "data": {
   "lineno": 304
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.MaskedAutoregressiveFlow": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.MaskedAutoregressiveFlow.__init__": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.masked_autoregressive.MaskedAutoregressiveFlow"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.MaskedAutoregressiveFlow._forward": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "ValueError",
    "range",
    "tensorflow.exp",
    "tensorflow.reduce_prod",
    "tensorflow.shape",
    "tensorflow.while_loop",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.internal.tensorshape_util.num_elements",
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.MaskedAutoregressiveFlow._forward._loop_body": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "tensorflow.compat.v1.get_variable_scope",
    "tensorflow.compat.v1.variable_scope",
    "tensorflow.executing_eagerly",
    "tensorflow.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.MaskedAutoregressiveFlow._inverse": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": [
    "tensorflow.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.MaskedAutoregressiveFlow._inverse_log_det_jacobian": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.range",
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.__all__": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive._create_degrees": {
  "data": {
   "lineno": 940,
   "symbols_in_volume": [
    "ValueError",
    "float",
    "isinstance",
    "min",
    "numpy.arange",
    "numpy.ceil",
    "numpy.int32",
    "numpy.maximum",
    "numpy.min",
    "numpy.random.randint",
    "tensorflow_probability.python.bijectors.masked_autoregressive._create_input_order",
    "tensorflow_probability.python.bijectors.masked_autoregressive.six"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive._create_input_order": {
  "data": {
   "lineno": 923,
   "symbols_in_volume": [
    "ValueError",
    "isinstance",
    "numpy.all",
    "numpy.arange",
    "numpy.array",
    "numpy.random.shuffle",
    "numpy.sort",
    "tensorflow_probability.python.bijectors.masked_autoregressive.six"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive._create_masks": {
  "data": {
   "lineno": 994,
   "symbols_in_volume": [
    "numpy.newaxis",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive._gen_mask": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": [
    "numpy.zeros",
    "tensorflow.float32",
    "tensorflow_probability.python.bijectors.masked_autoregressive.MASK_EXCLUSIVE",
    "tensorflow_probability.python.bijectors.masked_autoregressive._gen_slices"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive._gen_slices": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": [
    "range",
    "slice",
    "tensorflow_probability.python.bijectors.masked_autoregressive.MASK_EXCLUSIVE"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive._list": {
  "data": {
   "lineno": 915,
   "symbols_in_volume": [
    "TypeError",
    "list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive._make_masked_constraint": {
  "data": {
   "lineno": 1021,
   "symbols_in_volume": [
    "tensorflow.keras.constraints.get"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive._make_masked_constraint.masked_constraint": {
  "data": {
   "lineno": 1023,
   "symbols_in_volume": [
    "constraint",
    "tensorflow.cast",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive._make_masked_initializer": {
  "data": {
   "lineno": 1006,
   "symbols_in_volume": [
    "tensorflow.keras.initializers.get"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive._make_masked_initializer.masked_initializer": {
  "data": {
   "lineno": 1009,
   "symbols_in_volume": [
    "initializer",
    "tensorflow.cast"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.clip_by_value_preserve_gradient": {
  "data": {
   "shadows": "tensorflow_probability.python.math.numeric.clip_by_value_preserve_gradient"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.deprecation": {
  "data": {
   "shadows": "tensorflow.python.util.deprecation"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.masked_autoregressive_default_template": {
  "data": {
   "lineno": 412,
   "symbols_in_volume": [
    "tensorflow.compat.v1.make_template",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.nn.relu"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.masked_autoregressive_default_template._fn": {
  "data": {
   "lineno": 488,
   "symbols_in_volume": [
    "NotImplementedError",
    "enumerate",
    "numpy.int32",
    "tensorflow.clip_by_value",
    "tensorflow.compat.dimension_value",
    "tensorflow.concat",
    "tensorflow.newaxis",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow.unstack",
    "tensorflow_probability.python.bijectors.masked_autoregressive.masked_dense",
    "tensorflow_probability.python.internal.tensorshape_util.as_list",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least",
    "tensorflow_probability.python.math.numeric.clip_by_value_preserve_gradient",
    "which_clip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.masked_dense": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": [
    "NotImplementedError",
    "tensorflow.compat.dimension_value",
    "tensorflow.compat.v1.glorot_normal_initializer",
    "tensorflow.compat.v1.layers.Dense",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.bijectors.masked_autoregressive.MASK_EXCLUSIVE",
    "tensorflow_probability.python.bijectors.masked_autoregressive.MASK_INCLUSIVE",
    "tensorflow_probability.python.bijectors.masked_autoregressive._gen_mask",
    "tensorflow_probability.python.internal.dtype_util.base_dtype",
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.masked_dense.masked_initializer": {
  "data": {
   "lineno": 395,
   "symbols_in_volume": [
    "kernel_initializer"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.six": {
  "data": {
   "shadows": "six"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_default_template": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.masked_autoregressive.masked_autoregressive_default_template"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.keras",
    "tensorflow.keras.layers",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.AutoregressiveNetworkTest": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.AutoregressiveNetworkTest._count_trainable_params": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": [
    "layer.trainable_weights",
    "numpy.prod"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.AutoregressiveNetworkTest.assertIsAutoregressive": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": [
    "ValueError",
    "f",
    "isinstance",
    "list",
    "numpy.all",
    "numpy.arange",
    "numpy.array",
    "numpy.random.randn",
    "numpy.sort",
    "numpy.zeros",
    "numpy.zeros_like",
    "range",
    "tensorflow_probability.python.bijectors.masked_autoregressive_test.six"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.AutoregressiveNetworkTest.test_doc_string": {
  "data": {
   "lineno": 406,
   "symbols_in_volume": [
    "made",
    "numpy.float32",
    "numpy.ones",
    "numpy.random.randn",
    "numpy.stack",
    "numpy.zeros",
    "tensorflow.compat.v1.train.AdamOptimizer",
    "tensorflow.float32",
    "tensorflow.unstack",
    "tensorflow_probability.python.bijectors.AutoregressiveNetwork",
    "tensorflow_probability.python.bijectors.MaskedAutoregressiveFlow",
    "tensorflow_probability.python.bijectors.masked_autoregressive_test.tfk",
    "tensorflow_probability.python.bijectors.masked_autoregressive_test.tfkl",
    "tensorflow_probability.python.distributions.Normal",
    "tensorflow_probability.python.distributions.TransformedDistribution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.AutoregressiveNetworkTest.test_doc_string_images_case_1": {
  "data": {
   "lineno": 444,
   "symbols_in_volume": [
    "made",
    "numpy.float32",
    "numpy.random.choice",
    "numpy.reshape",
    "numpy.zeros",
    "tensorflow.compat.v1.train.AdamOptimizer",
    "tensorflow.float32",
    "tensorflow.unstack",
    "tensorflow.zeros",
    "tensorflow_probability.python.bijectors.AutoregressiveNetwork",
    "tensorflow_probability.python.bijectors.masked_autoregressive_test.tfk",
    "tensorflow_probability.python.bijectors.masked_autoregressive_test.tfkl",
    "tensorflow_probability.python.distributions.Autoregressive",
    "tensorflow_probability.python.distributions.Bernoulli",
    "tensorflow_probability.python.distributions.Independent"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.AutoregressiveNetworkTest.test_doc_string_images_case_2": {
  "data": {
   "lineno": 489,
   "symbols_in_volume": [
    "made",
    "numpy.float32",
    "numpy.random.choice",
    "numpy.reshape",
    "numpy.transpose",
    "numpy.zeros",
    "tensorflow.compat.v1.train.AdamOptimizer",
    "tensorflow.float32",
    "tensorflow.unstack",
    "tensorflow.zeros",
    "tensorflow_probability.python.bijectors.AutoregressiveNetwork",
    "tensorflow_probability.python.bijectors.masked_autoregressive_test.tfk",
    "tensorflow_probability.python.bijectors.masked_autoregressive_test.tfkl",
    "tensorflow_probability.python.distributions.Autoregressive",
    "tensorflow_probability.python.distributions.Bernoulli",
    "tensorflow_probability.python.distributions.Independent"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.AutoregressiveNetworkTest.test_layer_callable_activation": {
  "data": {
   "lineno": 359,
   "symbols_in_volume": [
    "made",
    "made._input_order",
    "made.trainable_variables",
    "numpy.zeros",
    "tensorflow.compat.v1.initializers.variables",
    "tensorflow.executing_eagerly",
    "tensorflow.math.exp",
    "tensorflow_probability.python.bijectors.AutoregressiveNetwork",
    "tensorflow_probability.python.bijectors.masked_autoregressive_test.tfk"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.AutoregressiveNetworkTest.test_layer_no_hidden_units": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": [
    "made",
    "made.trainable_variables",
    "numpy.zeros",
    "tensorflow.compat.v1.initializers.variables",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.bijectors.AutoregressiveNetwork"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.AutoregressiveNetworkTest.test_layer_right_to_left_float64": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": [
    "made",
    "made.trainable_variables",
    "numpy.float64",
    "numpy.zeros",
    "tensorflow.compat.v1.initializers.variables",
    "tensorflow.executing_eagerly",
    "tensorflow.float64",
    "tensorflow_probability.python.bijectors.AutoregressiveNetwork"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.AutoregressiveNetworkTest.test_layer_smaller_hidden_layers_than_input": {
  "data": {
   "lineno": 371,
   "symbols_in_volume": [
    "made",
    "made.trainable_variables",
    "numpy.zeros",
    "tensorflow.compat.v1.initializers.variables",
    "tensorflow.executing_eagerly",
    "tensorflow.math.abs",
    "tensorflow_probability.python.bijectors.AutoregressiveNetwork",
    "tensorflow_probability.python.bijectors.masked_autoregressive_test.tfk"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.AutoregressiveNetworkTest.test_layer_v2_kernel_initializer": {
  "data": {
   "lineno": 394,
   "symbols_in_volume": [
    "made",
    "made.trainable_variables",
    "numpy.zeros",
    "tensorflow.compat.v1.initializers.variables",
    "tensorflow.compat.v2.keras.initializers.GlorotNormal",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.bijectors.AutoregressiveNetwork"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.GenMaskTest": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.GenMaskTest.test346Exclusive": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.bijectors.masked_autoregressive._gen_mask"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.GenMaskTest.test346Inclusive": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.bijectors.masked_autoregressive._gen_mask"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressive2DLayerTest": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressive2DLayerTest._autoregressive_flow_kwargs": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": [
    "numpy.prod",
    "property",
    "tensorflow_probability.python.bijectors.masked_autoregressive_test._masked_autoregressive_shift_and_log_scale_fn",
    "tensorflow_probability.python.bijectors.masked_autoregressive_test.masked_autoregressive_2d_template"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressive2DTest": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressive2DTest._autoregressive_flow_kwargs": {
  "data": {
   "lineno": 279,
   "symbols_in_volume": [
    "numpy.prod",
    "property",
    "tensorflow_probability.python.bijectors.masked_autoregressive_default_template",
    "tensorflow_probability.python.bijectors.masked_autoregressive_test.masked_autoregressive_2d_template"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowShiftOnlyLayerTest": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowShiftOnlyLayerTest._autoregressive_flow_kwargs": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": [
    "property",
    "tensorflow_probability.python.bijectors.masked_autoregressive_test._masked_autoregressive_shift_and_log_scale_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowShiftOnlyTest": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowShiftOnlyTest._autoregressive_flow_kwargs": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "property",
    "tensorflow_probability.python.bijectors.masked_autoregressive_default_template"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowTest": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowTest._autoregressive_flow_kwargs": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "property",
    "tensorflow_probability.python.bijectors.masked_autoregressive_default_template"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowTest.testBatchedBijector": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "len",
    "numpy.arange",
    "numpy.float32",
    "numpy.prod",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.constant",
    "tensorflow.identity",
    "tensorflow_probability.python.bijectors.MaskedAutoregressiveFlow"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowTest.testInvertMutuallyConsistent": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "int",
    "len",
    "numpy.prod",
    "tensorflow.zeros",
    "tensorflow_probability.python.bijectors.Chain",
    "tensorflow_probability.python.bijectors.Invert",
    "tensorflow_probability.python.bijectors.MaskedAutoregressiveFlow",
    "tensorflow_probability.python.bijectors.Reshape",
    "tensorflow_probability.python.distributions.Independent",
    "tensorflow_probability.python.distributions.Normal",
    "tensorflow_probability.python.distributions.TransformedDistribution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowTest.testMutuallyConsistent": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "int",
    "len",
    "numpy.prod",
    "tensorflow.zeros",
    "tensorflow_probability.python.bijectors.Chain",
    "tensorflow_probability.python.bijectors.MaskedAutoregressiveFlow",
    "tensorflow_probability.python.bijectors.Reshape",
    "tensorflow_probability.python.distributions.Independent",
    "tensorflow_probability.python.distributions.Normal",
    "tensorflow_probability.python.distributions.TransformedDistribution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowTest.testNonBatchedBijector": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "len",
    "numpy.arange",
    "numpy.float32",
    "numpy.prod",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.constant",
    "tensorflow.identity",
    "tensorflow_probability.python.bijectors.MaskedAutoregressiveFlow"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowUnrollLoopLayerTest": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowUnrollLoopLayerTest._autoregressive_flow_kwargs": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "property",
    "tensorflow_probability.python.bijectors.masked_autoregressive_test._masked_autoregressive_shift_and_log_scale_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowUnrollLoopTest": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.MaskedAutoregressiveFlowUnrollLoopTest._autoregressive_flow_kwargs": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "property",
    "tensorflow_probability.python.bijectors.masked_autoregressive_default_template"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test._gen_mask": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.masked_autoregressive._gen_mask"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test._masked_autoregressive_shift_and_log_scale_fn": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "layer",
    "tensorflow.unstack",
    "tensorflow_probability.python.bijectors.AutoregressiveNetwork"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.masked_autoregressive_2d_template": {
  "data": {
   "lineno": 37
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.masked_autoregressive_2d_template.wrapper": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "base_template",
    "len",
    "tensorflow.concat",
    "tensorflow.reshape",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.six": {
  "data": {
   "shadows": "six"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.tfk": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.tfkl": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.masked_autoregressive_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.masked_dense": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.masked_autoregressive.masked_dense"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril.MatrixInverseTriL": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril.MatrixInverseTriL.__init__": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.matrix_inverse_tril.MatrixInverseTriL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril.MatrixInverseTriL._assertions": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.linalg.band_part",
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.linalg.set_diag",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.zeros",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.assert_util.assert_none_equal",
    "tensorflow_probability.python.internal.assert_util.assert_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril.MatrixInverseTriL._forward": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.eye",
    "tensorflow.compat.v2.linalg.triangular_solve",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril.MatrixInverseTriL._forward_log_det_jacobian": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.dtype_util.base_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril.MatrixInverseTriL._inverse": {
  "data": {
   "lineno": 79
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.MatrixInverseTriLBijectorTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.MatrixInverseTriLBijectorTest._inv": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "numpy.linalg.inv",
    "numpy.ndindex",
    "numpy.triu_indices"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.MatrixInverseTriLBijectorTest.testBatch": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.bijectors.MatrixInverseTriL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.MatrixInverseTriLBijectorTest.testComputesCorrectValues": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.linalg.inv",
    "tensorflow_probability.python.bijectors.MatrixInverseTriL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.MatrixInverseTriLBijectorTest.testErrorOnInputNotLowerTriangular": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.compat.v2.errors.InvalidArgumentError",
    "tensorflow_probability.python.bijectors.MatrixInverseTriL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.MatrixInverseTriLBijectorTest.testErrorOnInputRankTooLow": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "ValueError",
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.bijectors.MatrixInverseTriL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.MatrixInverseTriLBijectorTest.testErrorOnInputSingular": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.bijectors.MatrixInverseTriL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.MatrixInverseTriLBijectorTest.testJacobian": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.random.uniform",
    "numpy.tril",
    "range",
    "tensorflow_probability.python.bijectors.FillTriangular",
    "tensorflow_probability.python.bijectors.Invert",
    "tensorflow_probability.python.bijectors.MatrixInverseTriL",
    "tensorflow_probability.python.bijectors.bijector_test_util.get_fldj_theoretical"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.MatrixInverseTriLBijectorTest.testOneByOneMatrix": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.bijectors.MatrixInverseTriL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.MatrixInverseTriLBijectorTest.testZeroByZeroMatrix": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "numpy.eye",
    "numpy.float32",
    "tensorflow_probability.python.bijectors.MatrixInverseTriL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matrix_inverse_tril_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matveclu": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.matveclu.MatvecLU": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.matveclu.MatvecLU.__init__": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.bijectors.matveclu.MatvecLU"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matveclu.MatvecLU._forward": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.matvec",
    "tensorflow_probability.python.math.linalg.lu_reconstruct"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matveclu.MatvecLU._forward_log_det_jacobian": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.linalg.tensor_diag_part",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matveclu.MatvecLU._inverse": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "tensorflow.compat.v2.newaxis",
    "tensorflow_probability.python.math.linalg.lu_solve"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matveclu.MatvecLU.lower_upper": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matveclu.MatvecLU.permutation": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matveclu.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.matveclu.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matveclu.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matveclu.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matveclu.lu_reconstruct": {
  "data": {
   "shadows": "tensorflow_probability.python.math.linalg.lu_reconstruct"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matveclu.lu_solve": {
  "data": {
   "shadows": "tensorflow_probability.python.math.linalg.lu_solve"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matveclu.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matveclu.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matveclu_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.matveclu_test.MatvecLUTest": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.matveclu_test.MatvecLUTest.test_invertible_from_lu": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "numpy.abs",
    "numpy.mean",
    "tensorflow.compat.dimension_value",
    "tensorflow.linalg.lu",
    "tensorflow.random.uniform",
    "tensorflow_probability.python.bijectors.MatvecLU"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matveclu_test.MatvecLUTest.test_invertible_from_trainable_lu_factorization": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "numpy.abs",
    "numpy.mean",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.random.uniform",
    "tensorflow_probability.python.bijectors.MatvecLU",
    "tensorflow_probability.python.bijectors.matveclu_test.trainable_lu_factorization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.matveclu_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matveclu_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matveclu_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matveclu_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matveclu_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matveclu_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matveclu_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.matveclu_test.trainable_lu_factorization": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.compat.v2.Variable",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.int32",
    "tensorflow.linalg.lu",
    "tensorflow.linalg.qr",
    "tensorflow.random.uniform"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.normal_cdf": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.normal_cdf.NormalCDF": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.normal_cdf.NormalCDF.__init__": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.normal_cdf.NormalCDF"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.normal_cdf.NormalCDF._forward": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.special_math.ndtr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.normal_cdf.NormalCDF._forward_log_det_jacobian": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.pi",
    "tensorflow.compat.v2.square"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.normal_cdf.NormalCDF._inverse": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.special_math.ndtri"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.normal_cdf.NormalCDF._maybe_assert_valid_y": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.python.internal.assert_util.assert_less_equal",
    "tensorflow_probability.python.internal.assert_util.assert_non_negative",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.normal_cdf.__all__": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.normal_cdf.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.normal_cdf.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.normal_cdf.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.normal_cdf.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.normal_cdf.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.normal_cdf.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.normal_cdf.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.normal_cdf.special_math": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.special_math"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.normal_cdf.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.normal_cdf_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.normal_cdf_test.NormalCDFBijectorTest": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.normal_cdf_test.NormalCDFBijectorTest.testBijectiveAndFinite": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.linspace",
    "tensorflow_probability.python.bijectors.NormalCDF",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.normal_cdf_test.NormalCDFBijectorTest.testBijector": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float64",
    "numpy.squeeze",
    "scipy.stats.norm",
    "tensorflow_probability.python.bijectors.NormalCDF"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.normal_cdf_test.NormalCDFBijectorTest.testScalarCongruency": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.NormalCDF",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.normal_cdf_test.NormalCDFBijectorTest.testValidateArgs": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.NormalCDF"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.normal_cdf_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.normal_cdf_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.normal_cdf_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.normal_cdf_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.normal_cdf_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.normal_cdf_test.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.normal_cdf_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.normal_cdf_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.normal_cdf_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.ordered": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.ordered.Ordered": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.ordered.Ordered.__init__": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.ordered.Ordered"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.ordered.Ordered._forward": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.newaxis"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.ordered.Ordered._forward_log_det_jacobian": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.ordered.Ordered._inverse": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.cumsum",
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.newaxis"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.ordered.Ordered._inverse_log_det_jacobian": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "tensorflow.compat.v2.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.ordered.Ordered._maybe_assert_valid_x": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.ordered.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.ordered.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.ordered.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.ordered.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.ordered.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.ordered.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.ordered.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.ordered.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.ordered_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.bijectors",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.ordered_test.OrderedBijectorTest": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.ordered_test.OrderedBijectorTest.setUp": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.ordered_test.OrderedBijectorTest.testBijectiveAndFinite": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.sort",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite",
    "tensorflow_probability.python.bijectors.ordered_test.tfb"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.ordered_test.OrderedBijectorTest.testBijectorUnknownShape": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "numpy.asarray",
    "numpy.float32",
    "numpy.log",
    "numpy.sum",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.bijectors.ordered_test.tfb"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.ordered_test.OrderedBijectorTest.testBijectorVector": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "numpy.asarray",
    "numpy.log",
    "numpy.sum",
    "tensorflow_probability.python.bijectors.ordered_test.tfb"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.ordered_test.OrderedBijectorTest.testShapeGetters": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow_probability.python.bijectors.ordered_test.tfb",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.ordered_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.ordered_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.ordered_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.ordered_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.ordered_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.ordered_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.ordered_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.ordered_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.ordered_test.tfb": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.ordered_test.tfd": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.ordered_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.permute": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.permute.Permute": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.permute.Permute.__init__": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "NotImplementedError",
    "TypeError",
    "ValueError",
    "int",
    "numpy.abs",
    "numpy.arange",
    "set",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.nn.top_k",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.size",
    "tensorflow_probability.python.bijectors.permute.Permute",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.is_integer",
    "tensorflow_probability.python.internal.dtype_util.name"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute.Permute._forward": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "tensorflow.compat.v2.gather",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute.Permute._forward_log_det_jacobian": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.python.internal.dtype_util.base_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute.Permute._inverse": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "tensorflow.compat.v2.gather",
    "tensorflow.compat.v2.math.invert_permutation",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute.Permute._inverse_log_det_jacobian": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.python.internal.dtype_util.base_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute.Permute.axis": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute.Permute.permutation": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute.__all__": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.permute.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.permute.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.permute.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.permute.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.permute.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.permute.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.permute.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.permute.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.permute.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.permute.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.permute_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.permute_test.PermuteBijectorTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.permute_test.PermuteBijectorTest.assertRaisesError": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute_test.PermuteBijectorTest.setUp": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute_test.PermuteBijectorTest.testBijectiveAndFinite": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "numpy.int32",
    "numpy.random.randn",
    "tensorflow_probability.python.bijectors.Permute",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute_test.PermuteBijectorTest.testBijectiveAndFiniteAxis": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "numpy.int32",
    "numpy.random.randn",
    "tensorflow_probability.python.bijectors.Permute",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute_test.PermuteBijectorTest.testBijector": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "numpy.int32",
    "numpy.random.randn",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.bijectors.Permute"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute_test.PermuteBijectorTest.testPreservesShape": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "tensorflow.keras.Input",
    "tensorflow_probability.python.bijectors.Permute"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute_test.PermuteBijectorTest.testRaisesOpError": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.bijectors.Permute"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.permute_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.permute_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.permute_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.permute_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.permute_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.permute_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.permute_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.permute_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.power_transform": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.power_transform.PowerTransform": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.power_transform.PowerTransform.__init__": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "ValueError",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow_probability.python.bijectors.power_transform.PowerTransform"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.power_transform.PowerTransform._forward": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.math.log1p"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.power_transform.PowerTransform._forward_log_det_jacobian": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log1p"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.power_transform.PowerTransform._inverse": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.expm1",
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.power_transform.PowerTransform._inverse_log_det_jacobian": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.power_transform.PowerTransform._maybe_assert_valid_x": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.assert_util.assert_non_negative",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.power_transform.PowerTransform._maybe_assert_valid_y": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.power_transform.PowerTransform.power": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.power_transform.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.power_transform.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.power_transform.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.power_transform.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.power_transform.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.power_transform.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.power_transform.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.power_transform.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.power_transform_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.power_transform_test.PowerTransformBijectorTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.power_transform_test.PowerTransformBijectorTest.testBijectiveAndFinite": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.linspace",
    "numpy.logspace",
    "tensorflow_probability.python.bijectors.PowerTransform",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.power_transform_test.PowerTransformBijectorTest.testBijector": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.log",
    "numpy.sum",
    "tensorflow_probability.python.bijectors.PowerTransform"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.power_transform_test.PowerTransformBijectorTest.testScalarCongruency": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.PowerTransform",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.power_transform_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.power_transform_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.power_transform_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.power_transform_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.power_transform_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.power_transform_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.power_transform_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.power_transform_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.real_nvp": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.real_nvp.RealNVP": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.real_nvp.RealNVP.__init__": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "ValueError",
    "super",
    "tensorflow_probability.python.bijectors.real_nvp.RealNVP"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp.RealNVP._cache_input_depth": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "NotImplementedError",
    "ValueError",
    "tensorflow.compat.dimension_value",
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp.RealNVP._forward": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "tensorflow.concat",
    "tensorflow.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp.RealNVP._forward_log_det_jacobian": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp.RealNVP._inverse": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "tensorflow.concat",
    "tensorflow.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp.RealNVP._inverse_log_det_jacobian": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.real_nvp.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.real_nvp.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.real_nvp.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.real_nvp.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.real_nvp.real_nvp_default_template": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "tensorflow.compat.v1.make_template",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.nn.relu"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp.real_nvp_default_template._fn": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": [
    "NotImplementedError",
    "reshape_output",
    "tensorflow.compat.v1.layers.dense",
    "tensorflow.newaxis",
    "tensorflow.split",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.real_nvp.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.real_nvp_default_template": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.real_nvp.real_nvp_default_template"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.NICETest": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.NICETest._real_nvp_kwargs": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": [
    "property",
    "tensorflow_probability.python.bijectors.real_nvp_default_template"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPConstantShiftScaleTest": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPConstantShiftScaleTest._real_nvp_kwargs": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPConstantShiftScaleTest._real_nvp_kwargs.constant_shift_log_scale_fn": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "tensorflow.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPTest": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPTest._real_nvp_kwargs": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "property",
    "tensorflow_probability.python.bijectors.real_nvp_default_template"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPTest.testBatchedBijectorWithMLPTransform": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.random.normal",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.constant",
    "tensorflow.identity",
    "tensorflow_probability.python.bijectors.RealNVP"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPTest.testBijectorConditionKwargs": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.linspace",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v1.make_template",
    "tensorflow.constant",
    "tensorflow.float32",
    "tensorflow.identity",
    "tensorflow.random.normal",
    "tensorflow_probability.python.bijectors.RealNVP"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPTest.testBijectorConditionKwargs._condition_shift_and_log_scale_fn": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "tensorflow.compat.v1.layers.dense",
    "tensorflow.concat",
    "tensorflow.split"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPTest.testBijectorWithTrivialTransform": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.random.normal",
    "tensorflow.constant",
    "tensorflow.identity",
    "tensorflow_probability.python.bijectors.RealNVP"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPTest.testInvertMutuallyConsistent": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "int",
    "tensorflow_probability.python.bijectors.Invert",
    "tensorflow_probability.python.bijectors.RealNVP",
    "tensorflow_probability.python.distributions.Normal",
    "tensorflow_probability.python.distributions.TransformedDistribution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPTest.testMutuallyConsistent": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "int",
    "tensorflow_probability.python.bijectors.RealNVP",
    "tensorflow_probability.python.distributions.Normal",
    "tensorflow_probability.python.distributions.TransformedDistribution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.RealNVPTest.testNonBatchedBijectorWithMLPTransform": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.random.normal",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.constant",
    "tensorflow.identity",
    "tensorflow_probability.python.bijectors.RealNVP"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.real_nvp_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reciprocal": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.reciprocal.Reciprocal": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.reciprocal.Reciprocal.__init__": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.reciprocal.Reciprocal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reciprocal.Reciprocal._forward": {
  "data": {
   "lineno": 64
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reciprocal.Reciprocal._forward_log_det_jacobian": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reciprocal.Reciprocal._maybe_assert_valid": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.assert_util.assert_none_equal",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reciprocal.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.reciprocal.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reciprocal.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reciprocal.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reciprocal.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reciprocal.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reciprocal.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reciprocal.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reciprocal_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.reciprocal_test.ReciprocalTest": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.reciprocal_test.ReciprocalTest.testBijectiveAndFinite": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "absl.testing.parameterized.named_parameters",
    "dict",
    "numpy.float32",
    "numpy.linspace",
    "tensorflow_probability.python.bijectors.Reciprocal",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reciprocal_test.ReciprocalTest.testBijector": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "absl.testing.parameterized.named_parameters",
    "dict",
    "tensorflow.compat.v2.linspace",
    "tensorflow_probability.python.bijectors.Reciprocal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reciprocal_test.ReciprocalTest.testScalarCongruency": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "absl.testing.parameterized.named_parameters",
    "dict",
    "tensorflow_probability.python.bijectors.Reciprocal",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reciprocal_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reciprocal_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reciprocal_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reciprocal_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reciprocal_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reciprocal_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reciprocal_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reciprocal_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reciprocal_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reshape": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.reshape.Reshape": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.reshape.Reshape.__init__": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "NotImplementedError",
    "_maybe_check_valid_shape",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.bijectors.reshape.Reshape",
    "tensorflow_probability.python.internal.tensorshape_util.num_elements"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape.Reshape._forward": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "_replace_event_shape_in_shape_tensor",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape.Reshape._forward_event_shape": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "_replace_event_shape_in_tensorshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape.Reshape._forward_event_shape_tensor": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "_replace_event_shape_in_shape_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape.Reshape._forward_log_det_jacobian": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape.Reshape._inverse": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "_replace_event_shape_in_shape_tensor",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape.Reshape._inverse_event_shape": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "_replace_event_shape_in_tensorshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape.Reshape._inverse_event_shape_tensor": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "_replace_event_shape_in_shape_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape.Reshape._inverse_log_det_jacobian": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape.__all__": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.reshape._maybe_check_valid_shape": {
  "data": {
   "lineno": 385,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "numpy.any",
    "sum",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.equal",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.rank",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.internal.assert_util.assert_greater",
    "tensorflow_probability.python.internal.assert_util.assert_less",
    "tensorflow_probability.python.internal.dtype_util.is_integer",
    "tensorflow_probability.python.internal.dtype_util.name",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape._replace_event_shape_in_shape_tensor": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "_replace_event_shape_in_tensorshape",
    "map",
    "tensorflow.compat.v2.boolean_mask",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.size",
    "tensorflow.compat.v2.split",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.tensorshape_util.constant_value_as_shape",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
    "tensorflow_probability.python.internal.tensorshape_util.num_elements"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape._replace_event_shape_in_tensorshape": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": [
    "ValueError",
    "all",
    "numpy.int32",
    "tensorflow.compat.v2.TensorShape",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow_probability.python.internal.tensorshape_util.concatenate",
    "tensorflow_probability.python.internal.tensorshape_util.constant_value_as_shape",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
    "tensorflow_probability.python.internal.tensorshape_util.num_elements",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reshape.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reshape.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reshape.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reshape.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reshape.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reshape.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reshape.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reshape.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reshape_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestDynamic": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": [
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.bijectors.reshape_test._ReshapeBijectorTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestDynamic.assertRaisesError": {
  "data": {
   "lineno": 328,
   "symbols_in_volume": [
    "Exception",
    "tensorflow.executing_eagerly"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestDynamic.build_shapes": {
  "data": {
   "lineno": 318,
   "symbols_in_volume": [
    "len",
    "numpy.array",
    "numpy.int32",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestDynamic.testEventShape": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.bijectors.Reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestDynamic.testInputOutputMismatchOpError": {
  "data": {
   "lineno": 359
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestDynamic.testInvalidDimensionsOpError": {
  "data": {
   "lineno": 372,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestDynamic.testMultipleUnspecifiedDimensionsOpError": {
  "data": {
   "lineno": 363,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestDynamic.testUnknownShapeRank": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": [
    "NotImplementedError",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.bijectors.Reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestStatic": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.bijectors.reshape_test._ReshapeBijectorTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestStatic.assertRaisesError": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestStatic.build_shapes": {
  "data": {
   "lineno": 223
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestStatic.testBijectiveAndFinite": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "numpy.random.randn",
    "numpy.reshape",
    "tensorflow_probability.python.bijectors.Reshape",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestStatic.testEventShape": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.bijectors.Reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestStatic.testInputOutputMismatchOpError": {
  "data": {
   "lineno": 311
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestStatic.testInvalidDimensionsOpError": {
  "data": {
   "lineno": 303,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.bijectors.Reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestStatic.testMultipleUnspecifiedDimensionsOpError": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.bijectors.Reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.ReshapeBijectorTestStatic.testWorksWithChain": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": [
    "len",
    "numpy.zeros",
    "tensorflow_probability.python.bijectors.Chain",
    "tensorflow_probability.python.bijectors.Identity",
    "tensorflow_probability.python.bijectors.Reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test._ReshapeBijectorTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.reshape_test._ReshapeBijectorTest._testInputOutputMismatchOpError": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "numpy.random.randn",
    "tensorflow_probability.python.bijectors.Reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test._ReshapeBijectorTest.build_shapes": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test._ReshapeBijectorTest.testBijector": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "numpy.random.randn",
    "numpy.reshape",
    "tensorflow_probability.python.bijectors.Reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test._ReshapeBijectorTest.testBothShapesPartiallySpecified": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "numpy.random.randn",
    "numpy.reshape",
    "tensorflow_probability.python.bijectors.Reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test._ReshapeBijectorTest.testDefaultVectorShape": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": [
    "numpy.random.randn",
    "numpy.reshape",
    "tensorflow_probability.python.bijectors.Reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test._ReshapeBijectorTest.testEventShapeTensor": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test._ReshapeBijectorTest.testOneShapePartiallySpecified": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "numpy.random.randn",
    "numpy.reshape",
    "tensorflow_probability.python.bijectors.Reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test._ReshapeBijectorTest.testScalarReshape": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "numpy.random.randn",
    "numpy.reshape",
    "tensorflow_probability.python.bijectors.Reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test._ReshapeBijectorTest.testValidButNonMatchingInputOpError": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "numpy.random.randn",
    "tensorflow_probability.python.bijectors.Reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test._ReshapeBijectorTest.testValidButNonMatchingInputPartiallySpecifiedOpError": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "numpy.random.randn",
    "tensorflow_probability.python.bijectors.Reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.reshape_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reshape_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reshape_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reshape_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reshape_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reshape_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reshape_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.reshape_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.scale_tril": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.scale_tril.ScaleTriL": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.chain.Chain"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.scale_tril.ScaleTriL.__init__": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.bijectors.affine_scalar.AffineScalar",
    "tensorflow_probability.python.bijectors.chain.Chain",
    "tensorflow_probability.python.bijectors.fill_triangular.FillTriangular",
    "tensorflow_probability.python.bijectors.scale_tril.ScaleTriL",
    "tensorflow_probability.python.bijectors.softplus.Softplus",
    "tensorflow_probability.python.bijectors.transform_diagonal.TransformDiagonal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.scale_tril.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.scale_tril.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.scale_tril.affine_scalar": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.affine_scalar"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.scale_tril.chain": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.chain"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.scale_tril.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.scale_tril.fill_triangular": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.fill_triangular"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.scale_tril.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.scale_tril.softplus": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.softplus"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.scale_tril.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.scale_tril.transform_diagonal": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.transform_diagonal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.scale_tril_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.scale_tril_test.ScaleTriLBijectorTest": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.scale_tril_test.ScaleTriLBijectorTest.setUp": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.scale_tril_test.ScaleTriLBijectorTest.testComputesCorrectValues": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "tensorflow_probability.python.bijectors.Exp",
    "tensorflow_probability.python.bijectors.ScaleTriL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.scale_tril_test.ScaleTriLBijectorTest.testInvertible": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow_probability.python.bijectors.ScaleTriL",
    "tensorflow_probability.python.bijectors.Softplus"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.scale_tril_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.scale_tril_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.scale_tril_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.scale_tril_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.scale_tril_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.scale_tril_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.scale_tril_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sigmoid": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.sigmoid.Sigmoid": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.sigmoid.Sigmoid.__init__": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.sigmoid.Sigmoid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sigmoid.Sigmoid._forward": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "tensorflow.compat.v2.sigmoid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sigmoid.Sigmoid._forward_log_det_jacobian": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "tensorflow.compat.v2.nn.softplus"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sigmoid.Sigmoid._inverse": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.math.log1p"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sigmoid.__all__": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.sigmoid.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sigmoid.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sigmoid.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sigmoid.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sigmoid.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sigmoid_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.sigmoid_test.SigmoidBijectorTest": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.sigmoid_test.SigmoidBijectorTest.testBijectiveAndFinite": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.linspace",
    "tensorflow_probability.python.bijectors.Sigmoid",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sigmoid_test.SigmoidBijectorTest.testBijector": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.linspace",
    "numpy.log",
    "numpy.log1p",
    "scipy.special.expit",
    "tensorflow_probability.python.bijectors.Sigmoid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sigmoid_test.SigmoidBijectorTest.testScalarCongruency": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Sigmoid",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sigmoid_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sigmoid_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sigmoid_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sigmoid_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sigmoid_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sigmoid_test.special": {
  "data": {
   "shadows": "scipy.special"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sigmoid_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sigmoid_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sigmoid_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.SinhArcsinh": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.SinhArcsinh.__init__": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow_probability.python.bijectors.sinh_arcsinh.SinhArcsinh",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.SinhArcsinh._forward": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "tensorflow.compat.v2.asinh",
    "tensorflow.compat.v2.sinh"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.SinhArcsinh._forward_log_det_jacobian": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "tensorflow.compat.v2.asinh",
    "tensorflow.compat.v2.cosh",
    "tensorflow.compat.v2.math.log",
    "tensorflow_probability.python.bijectors.sinh_arcsinh._sqrtx2p1"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.SinhArcsinh._inverse": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "tensorflow.compat.v2.asinh",
    "tensorflow.compat.v2.sinh"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.SinhArcsinh._inverse_log_det_jacobian": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "tensorflow.compat.v2.asinh",
    "tensorflow.compat.v2.cosh",
    "tensorflow.compat.v2.math.log",
    "tensorflow_probability.python.bijectors.sinh_arcsinh._sqrtx2p1"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.SinhArcsinh.skewness": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.SinhArcsinh.tailweight": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.__all__": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh._sqrtx2p1": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "numpy.finfo",
    "numpy.sqrt",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.sqrt",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.SinhArcsinhBijectorTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.SinhArcsinhBijectorTest.testBijectiveAndFiniteSkewness1Tailweight3": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "numpy.concatenate",
    "numpy.float32",
    "numpy.logspace",
    "tensorflow_probability.python.bijectors.SinhArcsinh",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.SinhArcsinhBijectorTest.testBijectiveAndFiniteSkewnessNeg1Tailweight0p5": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "numpy.concatenate",
    "numpy.float32",
    "numpy.logspace",
    "tensorflow_probability.python.bijectors.SinhArcsinh",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.SinhArcsinhBijectorTest.testBijectorEndpoints": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "dtype",
    "numpy.array",
    "numpy.finfo",
    "numpy.float32",
    "numpy.float64",
    "tensorflow_probability.python.bijectors.SinhArcsinh",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.SinhArcsinhBijectorTest.testBijectorOverRange": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "dtype",
    "numpy.amax",
    "numpy.amin",
    "numpy.arcsinh",
    "numpy.array",
    "numpy.cosh",
    "numpy.e",
    "numpy.fabs",
    "numpy.finfo",
    "numpy.float128",
    "numpy.float32",
    "numpy.float64",
    "numpy.log",
    "numpy.logspace",
    "numpy.sinh",
    "numpy.sqrt",
    "numpy.swapaxes",
    "tensorflow_probability.python.bijectors.SinhArcsinh"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.SinhArcsinhBijectorTest.testBijectorVersusNumpyRewriteOfBasicFunctions": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "numpy.arcsinh",
    "numpy.array",
    "numpy.cosh",
    "numpy.float32",
    "numpy.log",
    "numpy.sinh",
    "numpy.sqrt",
    "numpy.sum",
    "tensorflow_probability.python.bijectors.SinhArcsinh"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.SinhArcsinhBijectorTest.testDefaultDtypeIsFloat32": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow_probability.python.bijectors.SinhArcsinh"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.SinhArcsinhBijectorTest.testLargerTailWeightPutsMoreWeightInTails": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.SinhArcsinh"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.SinhArcsinhBijectorTest.testScalarCongruencySkewness1Tailweight0p5": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.SinhArcsinh",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.SinhArcsinhBijectorTest.testScalarCongruencySkewnessNeg1Tailweight1p5": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.SinhArcsinh",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.SinhArcsinhBijectorTest.testSkew": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "numpy.abs",
    "tensorflow_probability.python.bijectors.SinhArcsinh"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.SinhArcsinhBijectorTest.testZeroTailweightRaises": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.SinhArcsinh"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.sinh_arcsinh_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softmax_centered": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.SoftmaxCentered": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.SoftmaxCentered.__init__": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.softmax_centered.SoftmaxCentered"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.SoftmaxCentered._forward": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow.compat.v2.nn.softmax",
    "tensorflow_probability.python.internal.distribution_util.pad",
    "tensorflow_probability.python.internal.tensorshape_util.concatenate",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.SoftmaxCentered._forward_event_shape": {
  "data": {
   "lineno": 71
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.SoftmaxCentered._forward_event_shape_tensor": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.SoftmaxCentered._forward_log_det_jacobian": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "tensorflow.compat.v2.nn.softplus",
    "tensorflow.compat.v2.reduce_logsumexp",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow.compat.v2.squeeze"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.SoftmaxCentered._inverse": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.newaxis",
    "tensorflow_probability.python.internal.tensorshape_util.concatenate",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.SoftmaxCentered._inverse_event_shape": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.SoftmaxCentered._inverse_event_shape_tensor": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow_probability.python.internal.assert_util.assert_greater",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.SoftmaxCentered._inverse_log_det_jacobian": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softmax_centered.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softmax_centered_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "numpy.random.RandomState",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.softmax_centered_test.SoftmaxCenteredBijectorTest": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.softmax_centered_test.SoftmaxCenteredBijectorTest.testBijectiveAndFinite": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.linspace",
    "numpy.ones",
    "tensorflow_probability.python.bijectors.SoftmaxCentered",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite",
    "tensorflow_probability.python.bijectors.softmax_centered_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered_test.SoftmaxCenteredBijectorTest.testBijectorUnknownShape": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.log",
    "numpy.sum",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.bijectors.SoftmaxCentered"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered_test.SoftmaxCenteredBijectorTest.testBijectorVector": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.sum",
    "tensorflow_probability.python.bijectors.SoftmaxCentered"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered_test.SoftmaxCenteredBijectorTest.testShapeGetersWithBatchShape": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow_probability.python.bijectors.SoftmaxCentered",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered_test.SoftmaxCenteredBijectorTest.testShapeGetters": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow_probability.python.bijectors.SoftmaxCentered",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered_test.SoftmaxCenteredBijectorTest.testShapeGettersWithDynamicShape": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.bijectors.SoftmaxCentered"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softmax_centered_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softmax_centered_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softmax_centered_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softmax_centered_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softmax_centered_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softmax_centered_test.rng": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.softmax_centered_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softmax_centered_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softmax_centered_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softmax_centered_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softplus": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.softplus.Softplus": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.softplus.Softplus.__init__": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.bijectors.softplus.Softplus",
    "tensorflow_probability.python.internal.assert_util.assert_none_equal",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus.Softplus._forward": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.nn.softplus"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus.Softplus._forward_log_det_jacobian": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.nn.softplus"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus.Softplus._inverse": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow_probability.python.internal.distribution_util.softplus_inverse"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus.Softplus._inverse_log_det_jacobian": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.math.expm1",
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus.Softplus.hinge_softness": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.softplus.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softplus.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softplus.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softplus.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softplus.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softplus.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softplus.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softplus.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softplus_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "numpy.random.RandomState",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest._softplus": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest._softplus_ildj_before_reduction": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest._softplus_inverse": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest.testBijectiveAndFinite16bit": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "numpy.float16",
    "numpy.linspace",
    "numpy.logspace",
    "tensorflow_probability.python.bijectors.Softplus",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest.testBijectiveAndFinite32bit": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.linspace",
    "numpy.logspace",
    "tensorflow_probability.python.bijectors.Softplus",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest.testBijectiveAndFiniteWithNegativeHingeSoftness32Bit": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.linspace",
    "numpy.logspace",
    "tensorflow_probability.python.bijectors.Softplus",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest.testBijectiveAndFiniteWithPositiveHingeSoftness32Bit": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.linspace",
    "numpy.logspace",
    "tensorflow_probability.python.bijectors.Softplus",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest.testBijectorForwardInverseEventDimsOne": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Softplus",
    "tensorflow_probability.python.bijectors.softplus_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest.testBijectorForwardInverseEventDimsZero": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Softplus",
    "tensorflow_probability.python.bijectors.softplus_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest.testBijectorForwardInverseWithHingeSoftnessEventDimsZero": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Softplus",
    "tensorflow_probability.python.bijectors.softplus_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest.testBijectorLogDetJacobianEventDimsOne": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "numpy.sum",
    "tensorflow_probability.python.bijectors.Softplus",
    "tensorflow_probability.python.bijectors.softplus_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest.testBijectorLogDetJacobianEventDimsZero": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Softplus",
    "tensorflow_probability.python.bijectors.softplus_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest.testHingeSoftnessZeroRaises": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Softplus"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest.testScalarCongruency": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Softplus",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest.testScalarCongruencyWithNegativeHingeSoftness": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Softplus",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.SoftplusBijectorTest.testScalarCongruencyWithPositiveHingeSoftness": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Softplus",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softplus_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softplus_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softplus_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softplus_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softplus_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softplus_test.rng": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.softplus_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softplus_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softplus_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softsign": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.softsign.Softsign": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.softsign.Softsign.__init__": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.softsign.Softsign"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign.Softsign._forward": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "tensorflow.compat.v2.abs"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign.Softsign._forward_log_det_jacobian": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.math.log1p"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign.Softsign._inverse": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "tensorflow.compat.v2.abs"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign.Softsign._inverse_log_det_jacobian": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.math.log1p"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign.Softsign._maybe_assert_valid_y": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.assert_util.assert_greater",
    "tensorflow_probability.python.internal.assert_util.assert_less",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.softsign.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softsign.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softsign.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softsign.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softsign.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softsign.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softsign.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softsign.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softsign_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.softsign_test.SoftsignBijectorTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.softsign_test.SoftsignBijectorTest._softsign": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "numpy.abs"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign_test.SoftsignBijectorTest._softsign_ildj_before_reduction": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "numpy.abs",
    "numpy.log1p"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign_test.SoftsignBijectorTest.setUp": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign_test.SoftsignBijectorTest.testBijectiveAndFinite": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.linspace",
    "tensorflow_probability.python.bijectors.Softsign",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign_test.SoftsignBijectorTest.testBijectorBounds": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Softsign"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign_test.SoftsignBijectorTest.testBijectorForwardInverse": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Softsign"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign_test.SoftsignBijectorTest.testBijectorForwardInverseEventDimsOne": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Softsign"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign_test.SoftsignBijectorTest.testBijectorLogDetJacobianEventDimsOne": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "numpy.sum",
    "tensorflow_probability.python.bijectors.Softsign"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign_test.SoftsignBijectorTest.testBijectorLogDetJacobianEventDimsZero": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Softsign"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign_test.SoftsignBijectorTest.testScalarCongruency": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Softsign",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.softsign_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softsign_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softsign_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softsign_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softsign_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softsign_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softsign_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.softsign_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.square": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.square.Square": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.square.Square.__init__": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.square.Square"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.square.Square._forward": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "tensorflow.compat.v2.square"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.square.Square._forward_log_det_jacobian": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "numpy.log",
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.square.Square._inverse": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "tensorflow.compat.v2.sqrt"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.square.Square._maybe_assert_valid": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.assert_util.assert_non_negative",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.square.__all__": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.square.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.square.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.square.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.square.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.square.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.square.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.square.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.square.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.square_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.square_test.SquareBijectorTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.square_test.SquareBijectorTest.testBijectorScalar": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.sqrt",
    "numpy.square",
    "tensorflow_probability.python.bijectors.Square"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.square_test.SquareBijectorTest.testScalarCongruency": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Square",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.square_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.square_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.square_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.square_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.square_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.square_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.square_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.square_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.tanh": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.tanh.Tanh": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.tanh.Tanh.__init__": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.tanh.Tanh"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.tanh.Tanh._forward": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "tensorflow.compat.v2.nn.tanh"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.tanh.Tanh._forward_log_det_jacobian": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "numpy.log",
    "tensorflow.compat.v2.nn.softplus"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.tanh.Tanh._inverse": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "tensorflow.compat.v2.atanh"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.tanh.__all__": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.tanh.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.tanh.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.tanh.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.tanh.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.tanh.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.tanh.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.tanh_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.tanh_test.TanhBijectorTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.tanh_test.TanhBijectorTest.testBijectiveAndFinite": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.linspace",
    "tensorflow_probability.python.bijectors.Tanh",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.tanh_test.TanhBijectorTest.testBijector": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.linspace",
    "numpy.log1p",
    "numpy.square",
    "numpy.tanh",
    "tensorflow_probability.python.bijectors.Tanh"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.tanh_test.TanhBijectorTest.testMatchWithAffineTransform": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "numpy.linspace",
    "numpy.tanh",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.float64",
    "tensorflow_probability.python.bijectors.AffineScalar",
    "tensorflow_probability.python.bijectors.Chain",
    "tensorflow_probability.python.bijectors.Sigmoid",
    "tensorflow_probability.python.bijectors.Tanh"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.tanh_test.TanhBijectorTest.testScalarCongruency": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "int",
    "tensorflow_probability.python.bijectors.Tanh",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.tanh_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.tanh_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.tanh_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.tanh_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.tanh_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.tanh_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.tanh_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.tanh_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal.TransformDiagonal": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal.TransformDiagonal.__init__": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.transform_diagonal.TransformDiagonal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal.TransformDiagonal._forward": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.linalg.set_diag"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal.TransformDiagonal._forward_log_det_jacobian": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.diag_part"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal.TransformDiagonal._inverse": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.linalg.set_diag"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal.TransformDiagonal._inverse_log_det_jacobian": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.diag_part"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal.TransformDiagonal.diag_bijector": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal.__all__": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal_test.TransformDiagonalBijectorTest": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal_test.TransformDiagonalBijectorTest.setUp": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal_test.TransformDiagonalBijectorTest.testBijector": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.diag",
    "numpy.exp",
    "numpy.fill_diagonal",
    "numpy.float32",
    "numpy.random.randn",
    "range",
    "tensorflow_probability.python.bijectors.Exp",
    "tensorflow_probability.python.bijectors.TransformDiagonal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transform_diagonal_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transpose": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose.__init__": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "NotImplementedError",
    "ValueError",
    "_maybe_validate_perm",
    "_maybe_validate_rightmost_transposed_ndims",
    "int",
    "numpy.int32",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.size",
    "tensorflow_probability.python.bijectors.transpose.Transpose",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose._event_shape": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "ValueError",
    "enumerate",
    "int",
    "numpy.argsort",
    "static_perm_to_shape",
    "sum",
    "tensorflow.compat.v2.TensorShape",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose._forward": {
  "data": {
   "lineno": 181
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose._forward_event_shape": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "static_perm_to_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose._forward_event_shape.static_perm_to_shape": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose._forward_event_shape_tensor": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "tensorflow.compat.v2.gather",
    "tensorflow.compat.v2.size"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose._forward_log_det_jacobian": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose._inverse": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "tensorflow.compat.v2.argsort"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose._inverse_event_shape": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "static_perm_to_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose._inverse_event_shape.static_perm_to_shape": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "enumerate",
    "len",
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose._inverse_event_shape_tensor": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "tensorflow.compat.v2.argsort",
    "tensorflow.compat.v2.gather",
    "tensorflow.compat.v2.size"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose._inverse_log_det_jacobian": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose._make_perm": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.range",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose._transpose": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "tensorflow.compat.v2.rank",
    "tensorflow.compat.v2.transpose"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose.perm": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.Transpose.rightmost_transposed_ndims": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.__all__": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.transpose._maybe_validate_perm": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "numpy.all",
    "numpy.arange",
    "numpy.size",
    "numpy.sort",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.size",
    "tensorflow.compat.v2.sort",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.assert_util.assert_rank",
    "tensorflow_probability.python.internal.dtype_util.is_integer",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose._maybe_validate_rightmost_transposed_ndims": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.internal.assert_util.assert_non_negative",
    "tensorflow_probability.python.internal.assert_util.assert_rank",
    "tensorflow_probability.python.internal.dtype_util.is_integer",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transpose.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transpose.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transpose.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transpose.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transpose.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transpose.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transpose.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transpose.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transpose.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transpose_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.transpose_test.TransposeBijectorDynamicTest": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.bijectors.transpose_test._TransposeBijectorTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.transpose_test.TransposeBijectorStaticTest": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.bijectors.transpose_test._TransposeBijectorTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.transpose_test._TransposeBijectorTest": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.transpose_test._TransposeBijectorTest.testEventShapes": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "event_shape",
    "make_bijector",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.constant",
    "tensorflow.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose_test._TransposeBijectorTest.testEventShapes.event_shape": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "getattr",
    "len",
    "shape_fn",
    "shape_tensor_fn",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose_test._TransposeBijectorTest.testEventShapes.make_bijector": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.bijectors.Transpose"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose_test._TransposeBijectorTest.testInvalidEventNdimsException": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.bijectors.Transpose"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose_test._TransposeBijectorTest.testInvalidPermException": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.bijectors.Transpose"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose_test._TransposeBijectorTest.testPartialStaticPermEventShapes": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.constant",
    "tensorflow.convert_to_tensor",
    "tensorflow.executing_eagerly",
    "tensorflow.get_static_value",
    "tensorflow_probability.python.bijectors.Transpose"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose_test._TransposeBijectorTest.testTransformedDist": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "tensorflow.zeros",
    "tensorflow_probability.python.bijectors.Invert",
    "tensorflow_probability.python.bijectors.Transpose",
    "tensorflow_probability.python.distributions.Independent",
    "tensorflow_probability.python.distributions.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose_test._TransposeBijectorTest.testTransposeFromEventNdim": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.int32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.constant",
    "tensorflow_probability.python.bijectors.Transpose"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose_test._TransposeBijectorTest.testTransposeFromPerm": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.constant",
    "tensorflow_probability.python.bijectors.Transpose"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.transpose_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transpose_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transpose_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transpose_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transpose_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transpose_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transpose_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transpose_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.transpose_test.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.weibull": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.weibull.Weibull": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.bijector.Bijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.weibull.Weibull.__init__": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow_probability.python.bijectors.weibull.Weibull",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull.Weibull._forward": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.expm1"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull.Weibull._forward_log_det_jacobian": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.math.xlogy"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull.Weibull._inverse": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log1p"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull.Weibull._inverse_log_det_jacobian": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.math.log1p",
    "tensorflow.compat.v2.math.xlogy"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull.Weibull._maybe_assert_valid_x": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.assert_util.assert_non_negative",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull.Weibull._maybe_assert_valid_y": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.python.internal.assert_util.assert_less_equal",
    "tensorflow_probability.python.internal.assert_util.assert_non_negative",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull.Weibull.concentration": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull.Weibull.scale": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.bijectors.weibull.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.weibull.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.weibull.bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.weibull.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.weibull.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.weibull.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.weibull.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.weibull.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.weibull_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.bijectors.weibull_test.WeibullBijectorTest": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.bijectors.weibull_test.WeibullBijectorTest.testBijectiveAndFinite": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "numpy.expm1",
    "numpy.float32",
    "numpy.linspace",
    "tensorflow_probability.python.bijectors.Weibull",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_bijective_and_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull_test.WeibullBijectorTest.testBijector": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "scipy.stats.frechet_r",
    "tensorflow_probability.python.bijectors.Weibull"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull_test.WeibullBijectorTest.testBijectorConcentration1LogDetJacobianFiniteAtZero": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.float32",
    "numpy.isfinite",
    "numpy.logspace",
    "numpy.ones_like",
    "tensorflow_probability.python.bijectors.Weibull"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull_test.WeibullBijectorTest.testScalarCongruency": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Weibull",
    "tensorflow_probability.python.bijectors.bijector_test_util.assert_scalar_congruency"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.bijectors.weibull_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.weibull_test.bijector_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.bijector_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.weibull_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.weibull_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.weibull_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.weibull_test.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.weibull_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.weibull_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.bijectors.weibull_test.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.debugging": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.debugging.__all__": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "tensorflow_probability.python.debugging.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.debugging.benchmarking": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.debugging.benchmarking.BenchmarkTfFunctionConfig": {
  "data": {
   "shadows": "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.BenchmarkTfFunctionConfig"
  },
  "type": "import"
 },
 "tensorflow_probability.python.debugging.benchmarking.HARDWARE_CPU": {
  "data": {
   "shadows": "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.HARDWARE_CPU"
  },
  "type": "import"
 },
 "tensorflow_probability.python.debugging.benchmarking.HARDWARE_GPU": {
  "data": {
   "shadows": "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.HARDWARE_GPU"
  },
  "type": "import"
 },
 "tensorflow_probability.python.debugging.benchmarking.RUNTIME_EAGER": {
  "data": {
   "shadows": "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.RUNTIME_EAGER"
  },
  "type": "import"
 },
 "tensorflow_probability.python.debugging.benchmarking.RUNTIME_FUNCTION": {
  "data": {
   "shadows": "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.RUNTIME_FUNCTION"
  },
  "type": "import"
 },
 "tensorflow_probability.python.debugging.benchmarking.RUNTIME_XLA": {
  "data": {
   "shadows": "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.RUNTIME_XLA"
  },
  "type": "import"
 },
 "tensorflow_probability.python.debugging.benchmarking.__all__": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.debugging.benchmarking.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function": {
  "data": {
   "shadows": "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.benchmark_tf_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.BenchmarkTfFunctionConfig": {
  "data": {
   "lineno": 45
  },
  "type": "constant"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.HARDWARE_CPU": {
  "data": {
   "lineno": 42
  },
  "type": "constant"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.HARDWARE_GPU": {
  "data": {
   "lineno": 43
  },
  "type": "constant"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.RUNTIME_EAGER": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.RUNTIME_FUNCTION": {
  "data": {
   "lineno": 39
  },
  "type": "constant"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.RUNTIME_XLA": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function._merge_dicts": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function._run_function": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "range",
    "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.time",
    "user_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function._run_function_under_strategies": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "run_one",
    "tensorflow.function",
    "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.RUNTIME_EAGER",
    "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.RUNTIME_FUNCTION",
    "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.RUNTIME_XLA",
    "user_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function._run_function_under_strategies.run_one": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "print",
    "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function._merge_dicts",
    "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function._run_function",
    "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.pprint"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function._run_function_under_strategies.xla_function": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "tensorflow.function",
    "tensorflow.xla.experimental.compile",
    "user_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.benchmark_tf_function": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "tensorflow.device",
    "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.HARDWARE_CPU",
    "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.HARDWARE_GPU",
    "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function._run_function_under_strategies",
    "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.default_benchmark_config",
    "user_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.default_benchmark_config": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "frozenset",
    "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.BenchmarkTfFunctionConfig",
    "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.HARDWARE_CPU",
    "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.HARDWARE_GPU",
    "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.RUNTIME_EAGER",
    "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.RUNTIME_FUNCTION",
    "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.RUNTIME_XLA"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.pprint": {
  "data": {
   "shadows": "pprint"
  },
  "type": "import"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "tensorflow_probability.python.debugging.benchmarking.default_benchmark_config": {
  "data": {
   "shadows": "tensorflow_probability.python.debugging.benchmarking.benchmark_tf_function.default_benchmark_config"
  },
  "type": "import"
 },
 "tensorflow_probability.python.debugging.benchmarking.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.debugging.benchmarking.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.debugging.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.debugging.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "sys",
    "sys.modules",
    "tensorflow_probability.python.distributions.kullback_leibler.augment_kl_xent_docs"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.Autoregressive": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.autoregressive.Autoregressive"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.BatchReshape": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.batch_reshape.BatchReshape"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Bernoulli": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.bernoulli.Bernoulli"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Beta": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.beta.Beta"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Binomial": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.binomial.Binomial"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Blockwise": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.blockwise.Blockwise"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Categorical": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.categorical.Categorical"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Cauchy": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.cauchy.Cauchy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Chi": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.chi.Chi"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Chi2": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.chi2.Chi2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Chi2WithAbsDf": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.chi2.Chi2WithAbsDf"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.ConditionalDistribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution.ConditionalDistribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.ConditionalTransformedDistribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.transformed_distribution.ConditionalTransformedDistribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Deterministic": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.deterministic.Deterministic"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Dirichlet": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.dirichlet.Dirichlet"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.DirichletMultinomial": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution.Distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Empirical": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.empirical.Empirical"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.ExpRelaxedOneHotCategorical": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Exponential": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.exponential.Exponential"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.FULLY_REPARAMETERIZED": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.FiniteDiscrete": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Gamma": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.gamma.Gamma"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.GammaGamma": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.GaussianProcess": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.GaussianProcessRegressionModel": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.gaussian_process_regression_model.GaussianProcessRegressionModel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Geometric": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.geometric.Geometric"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Gumbel": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.gumbel.Gumbel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.HalfCauchy": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.HalfNormal": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.half_normal.HalfNormal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.HiddenMarkovModel": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Horseshoe": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.horseshoe.Horseshoe"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Independent": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.independent.Independent"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.InverseGamma": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.InverseGammaWithSoftplusConcentrationRate": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.inverse_gamma.InverseGammaWithSoftplusConcentrationRate"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.InverseGammaWithSoftplusConcentrationScale": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.inverse_gamma.InverseGammaWithSoftplusConcentrationScale"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.InverseGaussian": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.JointDistribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.joint_distribution.JointDistribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.JointDistributionCoroutine": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.joint_distribution_coroutine.JointDistributionCoroutine"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.JointDistributionNamed": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.joint_distribution_named.JointDistributionNamed"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.JointDistributionSequential": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Kumaraswamy": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kumaraswamy.Kumaraswamy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.LKJ": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.lkj.LKJ"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Laplace": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.laplace.Laplace"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.LogNormal": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.lognormal.LogNormal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Logistic": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.logistic.Logistic"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Mixture": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.mixture.Mixture"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.MixtureSameFamily": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Multinomial": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.multinomial.Multinomial"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.MultivariateNormalDiag": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.mvn_diag.MultivariateNormalDiag"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.MultivariateNormalDiagPlusLowRank": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank.MultivariateNormalDiagPlusLowRank"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.MultivariateNormalDiagWithSoftplusScale": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.mvn_diag.MultivariateNormalDiagWithSoftplusScale"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.MultivariateNormalFullCovariance": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.mvn_full_covariance.MultivariateNormalFullCovariance"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.MultivariateNormalLinearOperator": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.MultivariateNormalTriL": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.mvn_tril.MultivariateNormalTriL"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.MultivariateStudentTLinearOperator": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.NOT_REPARAMETERIZED": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.NegativeBinomial": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Normal": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.normal.Normal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.OneHotCategorical": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Pareto": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.pareto.Pareto"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Poisson": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.poisson.Poisson"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.PoissonLogNormalQuadratureCompound": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.QuantizedDistribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.RegisterKL": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.RelaxedBernoulli": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.relaxed_bernoulli.RelaxedBernoulli"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.RelaxedOneHotCategorical": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.relaxed_onehot_categorical.RelaxedOneHotCategorical"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.ReparameterizationType": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization.ReparameterizationType"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Sample": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.sample.Sample"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.SeedStream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream.SeedStream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.SinhArcsinh": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.sinh_arcsinh.SinhArcsinh"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.StudentT": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.student_t.StudentT"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.StudentTProcess": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.student_t_process.StudentTProcess"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.TransformedDistribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Triangular": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.triangular.Triangular"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.TruncatedNormal": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Uniform": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.uniform.Uniform"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.VariationalGaussianProcess": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.VectorDeterministic": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.deterministic.VectorDeterministic"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.VectorDiffeomixture": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.VectorExponentialDiag": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.vector_exponential_diag.VectorExponentialDiag"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.VectorLaplaceDiag": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.vector_laplace_diag.VectorLaplaceDiag"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.VectorSinhArcsinhDiag": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag.VectorSinhArcsinhDiag"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.VonMises": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.von_mises.VonMises"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.VonMisesFisher": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Wishart": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.wishart.Wishart"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.Zipf": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.zipf.Zipf"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.__all__": {
  "data": {
   "lineno": 136
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions._sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.assign_log_moving_mean_exp": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.internal.moving_stats.assign_log_moving_mean_exp"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.assign_moving_mean_variance": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.internal.moving_stats.assign_moving_mean_variance"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.augment_kl_xent_docs": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler.augment_kl_xent_docs"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.autoregressive": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.autoregressive.Autoregressive": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.autoregressive.Autoregressive.__init__": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "distribution_fn",
    "locals",
    "super",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.autoregressive.Autoregressive",
    "tensorflow_probability.python.internal.tensorshape_util.num_elements"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive.Autoregressive._batch_shape": {
  "data": {
   "lineno": 188
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive.Autoregressive._batch_shape_tensor": {
  "data": {
   "lineno": 191
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive.Autoregressive._event_shape": {
  "data": {
   "lineno": 194
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive.Autoregressive._event_shape_tensor": {
  "data": {
   "lineno": 197
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive.Autoregressive._log_prob": {
  "data": {
   "lineno": 208
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive.Autoregressive._prob": {
  "data": {
   "lineno": 212
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive.Autoregressive._sample_n": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "range",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive.Autoregressive.distribution0": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive.Autoregressive.distribution_fn": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive.Autoregressive.num_steps": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive.Autoregressive.sample0": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.autoregressive.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.autoregressive.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.autoregressive.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.autoregressive.seed_stream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.autoregressive.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.autoregressive.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.autoregressive_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main",
    "tensorflow_probability.bijectors",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.autoregressive_test.AutogressiveTest": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.autoregressive_test.AutogressiveTest._normal_fn": {
  "data": {
   "lineno": 45
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive_test.AutogressiveTest._normal_fn._fn": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "tensorflow.compat.v2.exp",
    "tensorflow_probability.python.distributions.autoregressive_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive_test.AutogressiveTest._random_scale_tril": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.int32",
    "tensorflow_probability.python.internal.distribution_util.fill_triangular"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive_test.AutogressiveTest.setUp": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive_test.AutogressiveTest.testCompareToBijector": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "numpy.concatenate",
    "numpy.float32",
    "numpy.int32",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.distributions.autoregressive_test.tfb",
    "tensorflow_probability.python.distributions.autoregressive_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive_test.AutogressiveTest.testSampleAndLogProbConsistency": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "int",
    "numpy.concatenate",
    "tensorflow.compat.v2.executing_eagerly",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.distributions.autoregressive_test.tfb",
    "tensorflow_probability.python.distributions.autoregressive_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.autoregressive_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.autoregressive_test.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.autoregressive_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.autoregressive_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.autoregressive_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.autoregressive_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.autoregressive_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.autoregressive_test.tfb": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.autoregressive_test.tfd": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.autoregressive_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.autoregressive_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.batch_reshape": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape.__init__": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "calculate_reshape",
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.batch_reshape.BatchReshape",
    "tensorflow_probability.python.distributions.distribution",
    "tensorflow_probability.python.distributions.distribution._graph_parents",
    "tensorflow_probability.python.distributions.distribution.batch_shape_tensor",
    "tensorflow_probability.python.distributions.distribution.dtype",
    "tensorflow_probability.python.distributions.distribution.name",
    "tensorflow_probability.python.distributions.distribution.reparameterization_type",
    "validate_init_args_statically"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._batch_shape": {
  "data": {
   "lineno": 135
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._batch_shape_tensor": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._call_and_reshape_output": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "fn",
    "tensorflow.compat.v2.TensorShape",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.reshape",
    "tensorflow_probability.python.internal.tensorshape_util.concatenate",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._call_reshape_input_output": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "fn",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.reshape",
    "tensorflow_probability.python.internal.tensorshape_util.concatenate",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._cdf": {
  "data": {
   "lineno": 169
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._covariance": {
  "data": {
   "lineno": 204
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._entropy": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._event_shape": {
  "data": {
   "lineno": 142
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._event_shape_tensor": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._log_cdf": {
  "data": {
   "lineno": 165
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._log_prob": {
  "data": {
   "lineno": 157
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._log_survival_function": {
  "data": {
   "lineno": 173
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._mean": {
  "data": {
   "lineno": 188
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._mode": {
  "data": {
   "lineno": 192
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._prob": {
  "data": {
   "lineno": 161
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._sample_n": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._sample_shape": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "int",
    "isinstance",
    "numpy.int32",
    "tensorflow.compat.v2.TensorShape",
    "tensorflow.compat.v2.rank",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.size",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._stddev": {
  "data": {
   "lineno": 196
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._survival_function": {
  "data": {
   "lineno": 177
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._validate_sample_arg": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": [
    "NotImplementedError",
    "any",
    "int",
    "isinstance",
    "max",
    "numpy.int32",
    "numpy.ndarray",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.maximum",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.rank",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.size",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.assert_util.assert_greater_equal",
    "tensorflow_probability.python.internal.tensorshape_util.concatenate",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape._variance": {
  "data": {
   "lineno": 200
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.BatchReshape.distribution": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.__all__": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.batch_reshape.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.batch_reshape.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.batch_reshape.calculate_reshape": {
  "data": {
   "lineno": 381,
   "symbols_in_volume": [
    "numpy.int32",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.equal",
    "tensorflow.compat.v2.fill",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.math.count_nonzero",
    "tensorflow.compat.v2.maximum",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.reduce_prod",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.assert_util.assert_less_equal",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.assert_util.assert_rank",
    "tensorflow_probability.python.internal.tensorshape_util.constant_value_as_shape",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape.distribution_lib": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.batch_reshape.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.batch_reshape.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.batch_reshape.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.batch_reshape.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.batch_reshape.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.batch_reshape.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.batch_reshape.validate_init_args_statically": {
  "data": {
   "lineno": 413,
   "symbols_in_volume": [
    "ValueError",
    "any",
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow_probability.python.distributions.distribution.batch_shape",
    "tensorflow_probability.python.internal.tensorshape_util.constant_value_as_shape",
    "tensorflow_probability.python.internal.tensorshape_util.dims",
    "tensorflow_probability.python.internal.tensorshape_util.num_elements",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test.BatchReshapeDynamicTest": {
  "data": {
   "lineno": 606,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test.BatchReshapeStaticTest": {
  "data": {
   "lineno": 599,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "object",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest.make_mvn": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": [
    "numpy.int32",
    "numpy.ones",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.batch_reshape_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest.make_normal": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.int32",
    "numpy.prod",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.batch_reshape_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest.make_wishart": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "numpy.concatenate",
    "numpy.int32",
    "numpy.reshape",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.batch_reshape_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest.test_bad_reshape_size": {
  "data": {
   "lineno": 463,
   "symbols_in_volume": [
    "ValueError",
    "numpy.int32",
    "numpy.ones",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.batch_reshape_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest.test_broadcasting_explicitly_unsupported": {
  "data": {
   "lineno": 565,
   "symbols_in_volume": [
    "NotImplementedError",
    "numpy.int32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.batch_reshape_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest.test_matrix_variate_sample_and_log_prob": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "tensorflow.executing_eagerly",
    "tensorflow.reshape",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest.test_matrix_variate_stats": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "tensorflow.reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest.test_non_positive_shape": {
  "data": {
   "lineno": 495,
   "symbols_in_volume": [
    "ValueError",
    "numpy.int32",
    "numpy.ones",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.batch_reshape_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest.test_non_vector_shape": {
  "data": {
   "lineno": 530,
   "symbols_in_volume": [
    "ValueError",
    "numpy.int32",
    "numpy.ones",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.batch_reshape_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest.test_scalar_variate_sample_and_log_prob": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "tensorflow.executing_eagerly",
    "tensorflow.reshape",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest.test_scalar_variate_stats": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "tensorflow.reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest.test_vector_variate_sample_and_log_prob": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": [
    "tensorflow.executing_eagerly",
    "tensorflow.reshape",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test._BatchReshapeTest.test_vector_variate_stats": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": [
    "tensorflow.reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test.tfd": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.batch_reshape_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.bernoulli": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli.__init__": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.bernoulli.Bernoulli",
    "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs",
    "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._batch_shape": {
  "data": {
   "lineno": 106
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._batch_shape_tensor": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._entropy": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "tensorflow.compat.v2.nn.softplus",
    "tensorflow.compat.v2.sigmoid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._event_shape": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._event_shape_tensor": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._log_prob": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "_broadcast",
    "tensorflow.compat.v2.bool",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.nn.sigmoid_cross_entropy_with_logits",
    "tensorflow_probability.python.internal.distribution_util.embed_check_integer_casting_closed",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._log_prob._broadcast": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "tensorflow.compat.v2.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._mean": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "tensorflow.compat.v2.identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._mode": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._param_shapes": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._params_event_ndims": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._sample_n": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.less",
    "tensorflow.compat.v2.random.uniform"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli._variance": {
  "data": {
   "lineno": 150
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli.logits": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.Bernoulli.probs": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli._kl_bernoulli_bernoulli": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.nn.softplus",
    "tensorflow.compat.v2.sigmoid",
    "tensorflow_probability.python.distributions.bernoulli.Bernoulli",
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.bernoulli.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.bernoulli.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.bernoulli.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.bernoulli.kullback_leibler": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.bernoulli.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.bernoulli.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.bernoulli.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.bernoulli.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.bernoulli_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.distributions.bernoulli_test._MakeSlicer",
    "tensorflow_probability.python.distributions.bernoulli_test.try_import"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliSlicingTest": {
  "data": {
   "lineno": 318,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliSlicingTest.testCopyUnknownRank": {
  "data": {
   "lineno": 412,
   "symbols_in_volume": [
    "dist",
    "dist.copy",
    "dist.name",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.random.normal",
    "tensorflow_probability.python.distributions.bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliSlicingTest.testDocstrSliceExample": {
  "data": {
   "lineno": 434,
   "symbols_in_volume": [
    "tensorflow.newaxis",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliSlicingTest.testScalarSlice": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": [
    "dist",
    "dist.batch_shape",
    "tensorflow.newaxis.batch_shape",
    "tensorflow.random.normal",
    "tensorflow_probability.python.distributions.bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliSlicingTest.testSlice": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": [
    "ValueError",
    "check",
    "dist",
    "dist.batch_shape",
    "halfway",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow.executing_eagerly",
    "tensorflow.newaxis",
    "tensorflow.random.normal",
    "tensorflow_probability.python.distributions.bernoulli_test.make_slicer",
    "tensorflow_probability.python.distributions.bernoulli_test.tfd",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliSlicingTest.testSlice.check": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": [
    "dist",
    "dist.prob",
    "numpy.zeros",
    "slicer",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliSlicingTest.testSlice.halfway": {
  "data": {
   "lineno": 360,
   "symbols_in_volume": [
    "isinstance",
    "tensorflow_probability.python.distributions.bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliSlicingTest.testSliceCopyOverrideNameSliceAgainCopyOverrideLogitsSliceAgain": {
  "data": {
   "lineno": 420,
   "symbols_in_volume": [
    "dist",
    "dist.batch_shape",
    "dist.copy",
    "dist.name",
    "tensorflow.random.normal",
    "tensorflow_probability.python.distributions.bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliSlicingTest.testSliceSequencePreservesOrigVarGradLinkage": {
  "data": {
   "lineno": 377,
   "symbols_in_volume": [
    "dist",
    "dist.log_prob",
    "slicer",
    "tensorflow.GradientTape",
    "tensorflow.abs",
    "tensorflow.compat.v2.Variable",
    "tensorflow.random.normal",
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.distributions.bernoulli_test.make_slicer",
    "tensorflow_probability.python.distributions.bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliSlicingTest.testSliceThenCopyPreservesOrigVarGradLinkage": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": [
    "dist",
    "dist.copy",
    "dist.log_prob",
    "dist.name",
    "tensorflow.GradientTape",
    "tensorflow.abs",
    "tensorflow.compat.v2.Variable",
    "tensorflow.random.normal",
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.distributions.bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest._testPmf": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "numpy.log",
    "tensorflow_probability.python.distributions.bernoulli_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testBernoulliBernoulliKL": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.log",
    "tensorflow_probability.python.distributions.bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testBoundaryConditions": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "dist",
    "dist.log_prob",
    "numpy.nan",
    "tensorflow_probability.python.distributions.bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testBroadcasting": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "dist",
    "numpy.log",
    "probs",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testDtype": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "tensorflow.int32",
    "tensorflow.int64",
    "tensorflow_probability.python.distributions.bernoulli_test.make_bernoulli"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testEntropyNoBatch": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "dist",
    "dist.entropy",
    "tensorflow_probability.python.distributions.bernoulli_test.entropy",
    "tensorflow_probability.python.distributions.bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testEntropyWithBatch": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "dist",
    "dist.entropy",
    "tensorflow_probability.python.distributions.bernoulli_test.entropy",
    "tensorflow_probability.python.distributions.bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testInvalidP": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testLogits": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.bernoulli_test.special",
    "tensorflow_probability.python.distributions.bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testMean": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "dist",
    "dist.mean",
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.distributions.bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testNotReparameterized": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.distributions.bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testP": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testPmfCorrectBroadcastDynamicShape": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testPmfInvalid": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testPmfShapes": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "dist",
    "dist.log_prob",
    "len",
    "probs",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testPmfWithFloatArgReturnsXEntropy": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.log",
    "tensorflow_probability.python.distributions.bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testPmfWithP": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.bernoulli_test.special"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testSampleDeterministicScalarVsVector": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": [
    "_maybe_seed",
    "dist",
    "dist.sample",
    "numpy.int32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testSampleDeterministicScalarVsVector._maybe_seed": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": [
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow.executing_eagerly"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testSampleN": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "dist",
    "dist.sample",
    "numpy.all",
    "numpy.log",
    "numpy.mean",
    "set",
    "tensorflow.int32",
    "tensorflow_probability.python.distributions.bernoulli_test.tfd",
    "tensorflow_probability.python.internal.tensorshape_util.as_list",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testShapes": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.bernoulli_test.make_bernoulli",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.BernoulliTest.testVarianceAndStd": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": [
    "dist",
    "dist.stddev",
    "dist.variance",
    "numpy.array",
    "numpy.float32",
    "numpy.sqrt",
    "tensorflow_probability.python.distributions.bernoulli_test.tfd",
    "var"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test._MakeSlicer": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.bernoulli_test._MakeSlicer.__getitem__": {
  "data": {
   "lineno": 312
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.entropy": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "numpy.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.make_bernoulli": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "list",
    "numpy.random.uniform",
    "tensorflow.constant",
    "tensorflow.float32",
    "tensorflow.int32",
    "tensorflow_probability.python.distributions.bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.make_slicer": {
  "data": {
   "lineno": 315
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.special": {
  "data": {
   "lineno": 45
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.tfd": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.bernoulli_test.try_import": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "ImportError",
    "str",
    "tensorflow.compat.v1.logging.warning",
    "tensorflow_probability.python.distributions.bernoulli_test.importlib"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.beta.Beta": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.beta.Beta.__init__": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.beta.Beta",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._batch_shape": {
  "data": {
   "lineno": 225
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._batch_shape_tensor": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._cdf": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.betainc",
    "tensorflow_probability.python.distributions.beta._beta_sample_note",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._entropy": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.digamma"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._event_shape": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._event_shape_tensor": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._log_cdf": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log",
    "tensorflow_probability.python.distributions.beta._beta_sample_note",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._log_normalization": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.lgamma"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._log_prob": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.beta._beta_sample_note",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._log_unnormalized_prob": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log1p",
    "tensorflow.compat.v2.math.xlogy"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._maybe_assert_valid_concentration": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._maybe_assert_valid_sample": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.assert_util.assert_less",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._mean": {
  "data": {
   "lineno": 280
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._mode": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": [
    "numpy.nan",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.fill",
    "tensorflow.compat.v2.logical_and",
    "tensorflow.compat.v2.ones",
    "tensorflow_probability.python.internal.assert_util.assert_less",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._param_shapes": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "dict",
    "staticmethod",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._params_event_ndims": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._prob": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "tensorflow.compat.v2.exp",
    "tensorflow_probability.python.distributions.beta._beta_sample_note",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._sample_n": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "seed",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.random.gamma",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta._variance": {
  "data": {
   "lineno": 283
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta.concentration0": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta.concentration1": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.Beta.total_concentration": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.__all__": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.beta._beta_sample_note": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.beta._kl_beta_beta": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": [
    "delta",
    "tensorflow.compat.v2.math.digamma",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.beta.Beta",
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta._kl_beta_beta.delta": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": [
    "fn1",
    "fn2",
    "getattr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.beta.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.beta.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.beta.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.beta.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.beta.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.beta.kullback_leibler": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.beta.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.beta.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.beta.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.beta.seed_stream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.beta.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.beta.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.beta_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.distributions.beta_test.try_import"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testAlphaProperty": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.beta_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaBetaKL": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": [
    "numpy.random.random",
    "numpy.zeros_like",
    "tensorflow_probability.python.distributions.beta_test.special",
    "tensorflow_probability.python.distributions.beta_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaCdf": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.float32",
    "numpy.float64",
    "numpy.ones",
    "numpy.random.random",
    "tensorflow_probability.python.distributions.beta_test.stats",
    "tensorflow_probability.python.distributions.beta_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaEntropy": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.beta_test.stats",
    "tensorflow_probability.python.distributions.beta_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaFullyReparameterized": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.distributions.beta_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaLogCdf": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.float32",
    "numpy.float64",
    "numpy.ones",
    "numpy.random.random",
    "tensorflow.exp",
    "tensorflow_probability.python.distributions.beta_test.stats",
    "tensorflow_probability.python.distributions.beta_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaMean": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.beta_test.stats",
    "tensorflow_probability.python.distributions.beta_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaMode": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.beta_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaModeEnableAllowNanStats": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.nan",
    "tensorflow_probability.python.distributions.beta_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaModeInvalid": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.beta_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaProperty": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.beta_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaSample": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "numpy.any",
    "numpy.cov",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.beta_test.stats",
    "tensorflow_probability.python.distributions.beta_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaSampleMultidimensional": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": [
    "numpy.any",
    "numpy.float32",
    "numpy.random.rand",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.beta_test.stats",
    "tensorflow_probability.python.distributions.beta_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaSampleMultipleTimes": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow_probability.python.distributions.beta_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testBetaVariance": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.beta_test.stats",
    "tensorflow_probability.python.distributions.beta_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testComplexShapes": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "numpy.random.rand",
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.beta_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testComplexShapesBroadcast": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "numpy.random.rand",
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.beta_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testLogPdfOnBoundaryIsFiniteWhenAlphaIsOne": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.isfinite",
    "numpy.ones_like",
    "tensorflow_probability.python.distributions.beta_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testPdfAlphaStretchedInBroadcastWhenLowerRank": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.beta_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testPdfAlphaStretchedInBroadcastWhenSameRank": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.beta_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testPdfTwoBatches": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.beta_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testPdfTwoBatchesNontrivialX": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.beta_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testPdfUniformZeroBatch": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.distributions.beta_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testPdfXProper": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.beta_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testPdfXStretchedInBroadcastWhenLowerRank": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.beta_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testPdfXStretchedInBroadcastWhenSameRank": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.beta_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.BetaTest.testSimpleShapes": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "numpy.random.rand",
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.beta_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.beta_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.beta_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.beta_test.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.beta_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.beta_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.beta_test.special": {
  "data": {
   "lineno": 42
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.beta_test.stats": {
  "data": {
   "lineno": 43
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.beta_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.beta_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.beta_test.tfd": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.beta_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.beta_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.beta_test.try_import": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "ImportError",
    "str",
    "tensorflow.compat.v1.logging.warning",
    "tensorflow_probability.python.distributions.beta_test.importlib"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial.__init__": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.binomial.Binomial",
    "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._batch_shape": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._batch_shape_tensor": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._cdf": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.distributions.binomial._bdtr",
    "tensorflow_probability.python.internal.tensorshape_util.is_compatible_with",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._event_shape": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._event_shape_tensor": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._log_normalization": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.lgamma"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._log_prob": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.binomial._binomial_sample_note",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._log_unnormalized_prob": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "tensorflow.compat.v2.nn.softplus"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._maybe_assert_valid_sample": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.assert_util.assert_less_equal",
    "tensorflow_probability.python.internal.distribution_util.embed_check_nonnegative_integer_form",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._maybe_assert_valid_total_count": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.assert_util.assert_non_negative",
    "tensorflow_probability.python.internal.distribution_util.assert_integer_form",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._mean": {
  "data": {
   "lineno": 275
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._mode": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": [
    "tensorflow.compat.v2.floor",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._params_event_ndims": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._prob": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "tensorflow.compat.v2.exp",
    "tensorflow_probability.python.distributions.binomial._binomial_sample_note",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._sample_n": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.stack",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.distributions.binomial._binomial_sample_note",
    "tensorflow_probability.python.distributions.multinomial.draw_sample",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial._variance": {
  "data": {
   "lineno": 278
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial.logits": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial.probs": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial.Binomial.total_count": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial._bdtr": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.equal",
    "tensorflow.compat.v2.math.betainc",
    "tensorflow.compat.v2.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial._binomial_sample_note": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.binomial.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.binomial.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.binomial.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.binomial.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.binomial.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.binomial.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.binomial.multinomial": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.multinomial"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.binomial.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.binomial.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.binomial.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.binomial.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.binomial.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.binomial_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.setUp": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testBinomialMean": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "scipy.stats.binom.mean",
    "tensorflow_probability.python.distributions.binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testBinomialMode": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testBinomialMultipleMode": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testBinomialVariance": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "scipy.stats.binom.var",
    "tensorflow_probability.python.distributions.binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testComplexShapes": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.random.beta",
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testLogitsProperty": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testNProperty": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testPProperty": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testPmfAndCdfBothZeroBatches": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "scipy.stats.binom.cdf",
    "tensorflow_probability.python.distributions.binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testPmfAndCdfBothZeroBatchesNontrivialN": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "scipy.stats.binom.cdf",
    "scipy.stats.binom.pmf",
    "tensorflow_probability.python.distributions.binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testPmfAndCdfNandCountsAgree": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testPmfAndCdfNonIntegerCounts": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testPmfAndCdfPStretchedInBroadcastWhenLowerRank": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testPmfAndCdfPStretchedInBroadcastWhenSameRank": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "scipy.stats.binom.cdf",
    "scipy.stats.binom.pmf",
    "tensorflow_probability.python.distributions.binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testSampleUnbiasedNonScalarBatch": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "int",
    "numpy.float32",
    "scipy.stats.binom.mean",
    "scipy.stats.binom.var",
    "tensorflow.nn.moments",
    "tensorflow_probability.python.distributions.binomial_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testSampleUnbiasedScalarBatch": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "int",
    "numpy.float32",
    "scipy.stats.binom.mean",
    "scipy.stats.binom.var",
    "tensorflow.nn.moments",
    "tensorflow_probability.python.distributions.binomial_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.BinomialTest.testSimpleShapes": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.random.beta",
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.binomial_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.binomial_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.binomial_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.binomial_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.binomial_test.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.binomial_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.binomial_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.binomial_test.tfd": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.binomial_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.binomial_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.blockwise": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.blockwise.Blockwise": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.blockwise.Blockwise.__init__": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "ValueError",
    "_flatten",
    "_maybe_validate_distributions",
    "dict",
    "len",
    "locals",
    "set",
    "super",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.blockwise.Blockwise",
    "tensorflow_probability.python.internal.dtype_util.base_dtype",
    "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise.Blockwise._batch_shape": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape",
    "tensorflow_probability.python.distributions.blockwise.functools",
    "tensorflow_probability.python.internal.tensorshape_util.merge_with"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise.Blockwise._batch_shape_tensor": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise.Blockwise._event_shape": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "any",
    "sum",
    "tensorflow.compat.v2.TensorShape",
    "tensorflow_probability.python.internal.tensorshape_util.num_elements"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise.Blockwise._event_shape_tensor": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.reduce_prod",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.internal.tensorshape_util.num_elements"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise.Blockwise._log_prob": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "ValueError",
    "sum",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.split",
    "tensorflow_probability.python.internal.assert_util.assert_rank_at_least",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise.Blockwise._mean": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.control_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise.Blockwise._sample_n": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "seed",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise.Blockwise.distributions": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise._event_size": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": [
    "tensorflow.compat.v2.reduce_prod",
    "tensorflow_probability.python.internal.tensorshape_util.num_elements"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise._flatten": {
  "data": {
   "lineno": 165
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise._is_iterable": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "TypeError",
    "iter"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise._kl_blockwise_blockwise": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "ValueError",
    "_event_size",
    "all",
    "int",
    "isinstance",
    "len",
    "sum",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.blockwise.Blockwise",
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL",
    "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise._maybe_validate_distributions": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "all",
    "set",
    "tensorflow.compat.v2.size",
    "tensorflow_probability.python.distributions.blockwise._is_iterable",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.dtype_util.base_dtype",
    "tensorflow_probability.python.internal.dtype_util.name",
    "tensorflow_probability.python.internal.tensorshape_util.as_list",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.blockwise.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.blockwise.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.blockwise.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.blockwise.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.blockwise.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.blockwise.kullback_leibler": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.blockwise.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.blockwise.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.blockwise.seed_stream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.blockwise.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.blockwise.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.blockwise_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.blockwise_test.BlockwiseTest": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.blockwise_test.BlockwiseTest.testKLBlockwise": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.eye",
    "tensorflow.float64",
    "tensorflow.linalg.LinearOperatorBlockDiag",
    "tensorflow.linalg.LinearOperatorIdentity",
    "tensorflow.linalg.LinearOperatorLowerTriangular",
    "tensorflow.ones",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.blockwise_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise_test.BlockwiseTest.testKlBlockwiseError": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.eye",
    "tensorflow.float64",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.blockwise_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise_test.BlockwiseTest.testKlBlockwiseIsSum": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "tensorflow.ones",
    "tensorflow.reduce_sum",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.blockwise_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise_test.BlockwiseTest.test_works_correctly": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.zeros",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.eye",
    "tensorflow.float32",
    "tensorflow.float64",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.blockwise_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.blockwise_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.blockwise_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.blockwise_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.blockwise_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.blockwise_test.test_case": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_case"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.blockwise_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.blockwise_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.blockwise_test.tfd": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.blockwise_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.categorical": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical.__init__": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.rank",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.distributions.categorical.Categorical",
    "tensorflow_probability.python.internal.distribution_util.embed_check_categorical_event_shape",
    "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs",
    "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical._batch_shape": {
  "data": {
   "lineno": 264
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical._batch_shape_tensor": {
  "data": {
   "lineno": 261,
   "symbols_in_volume": [
    "tensorflow.compat.v2.identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical._cdf": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.clip_by_value",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.cumsum",
    "tensorflow.compat.v2.gather",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.distributions.categorical._broadcast_cat_event_and_params",
    "tensorflow_probability.python.internal.dtype_util.base_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical._entropy": {
  "data": {
   "lineno": 327,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.multiply_no_nan",
    "tensorflow.compat.v2.nn.log_softmax",
    "tensorflow.compat.v2.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical._event_shape": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical._event_shape_tensor": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical._log_prob": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": [
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.nn.sparse_softmax_cross_entropy_with_logits",
    "tensorflow_probability.python.distributions.categorical._broadcast_cat_event_and_params",
    "tensorflow_probability.python.internal.distribution_util.embed_check_integer_casting_closed",
    "tensorflow_probability.python.internal.dtype_util.base_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical._mode": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": [
    "tensorflow.compat.v2.argmax",
    "tensorflow.compat.v2.cast",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical._params_event_ndims": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical._sample_n": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.int64",
    "tensorflow.compat.v2.random.categorical",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.transpose",
    "tensorflow_probability.python.internal.dtype_util.size",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical.event_size": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "property",
    "tensorflow.python.util.deprecation.deprecated"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical.logits": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical.num_categories": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.Categorical.probs": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical._broadcast_cat_event_and_params": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "TypeError",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.dtype_util.is_floating",
    "tensorflow_probability.python.internal.dtype_util.is_integer",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical._kl_categorical_categorical": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": [
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.nn.log_softmax",
    "tensorflow.compat.v2.nn.softmax",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.distributions.categorical.Categorical",
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.categorical.deprecation": {
  "data": {
   "shadows": "tensorflow.python.util.deprecation"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.categorical.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.categorical.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.categorical.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.categorical.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.categorical.kullback_leibler": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.categorical.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.categorical.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.categorical.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.categorical.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.categorical.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.categorical_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testBroadcastWithBatchParamsAndBiggerEvent": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testCDFBroadcasting": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "dist",
    "dist.cdf",
    "histograms",
    "numpy.zeros",
    "tensorflow_probability.python.distributions.categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testCDFNoBatch": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "cdf_op",
    "dist",
    "dist.cdf",
    "event",
    "tensorflow_probability.python.distributions.categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testCDFWithBatch": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "cdf_op",
    "dist",
    "dist.cdf",
    "event",
    "histograms",
    "tensorflow_probability.python.distributions.categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testCDFWithBatchAndFloatDtype": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "cdf_op",
    "dist",
    "dist.cdf",
    "event",
    "histograms",
    "tensorflow.float32",
    "tensorflow_probability.python.distributions.categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testCDFWithDynamicEventShapeKnownNdims": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "cdf_op",
    "dist",
    "event",
    "histograms",
    "make_ph",
    "numpy.float32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testCDFWithDynamicEventShapeUnknownNdims": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "absl.testing.parameterized.named_parameters",
    "cdf_op",
    "dist",
    "dist.cdf",
    "events",
    "histograms",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testCategoricalCategoricalKL": {
  "data": {
   "lineno": 445,
   "symbols_in_volume": [
    "np_softmax",
    "numpy.log",
    "numpy.random.randn",
    "numpy.sum",
    "numpy.zeros_like",
    "tensorflow_probability.python.distributions.categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testCategoricalCategoricalKL.np_softmax": {
  "data": {
   "lineno": 447,
   "symbols_in_volume": [
    "logits",
    "numpy.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testDtype": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.int64",
    "tensorflow.float16",
    "tensorflow.float32",
    "tensorflow.float64",
    "tensorflow.int32",
    "tensorflow.int64",
    "tensorflow_probability.python.distributions.categorical_test.make_categorical"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testEntropyGradient": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": [
    "logits",
    "tensorflow.GradientTape",
    "tensorflow.constant",
    "tensorflow.nn.log_softmax",
    "tensorflow.nn.softmax",
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.distributions.categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testEntropyNoBatch": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": [
    "dist",
    "dist.entropy",
    "logits",
    "numpy.log",
    "tensorflow_probability.python.distributions.categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testEntropyWithBatch": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": [
    "dist",
    "dist.entropy",
    "logits",
    "numpy.log",
    "tensorflow_probability.python.distributions.categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testEntropyWithZeroProbabilities": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": [
    "dist",
    "dist.entropy",
    "numpy.log",
    "tensorflow_probability.python.distributions.categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testLogPMF": {
  "data": {
   "lineno": 301,
   "symbols_in_volume": [
    "dist",
    "dist.log_prob",
    "logits",
    "numpy.log",
    "tensorflow_probability.python.distributions.categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testLogPMFBroadcasting": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": [
    "dist",
    "dist.prob",
    "histograms",
    "tensorflow.math.log",
    "tensorflow_probability.python.distributions.categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testLogPMFShape": {
  "data": {
   "lineno": 415,
   "symbols_in_volume": [
    "dist",
    "dist.log_prob",
    "histograms",
    "tensorflow.math.log",
    "tensorflow_probability.python.distributions.categorical_test.tfd",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testLogPMFShapeNoBatch": {
  "data": {
   "lineno": 428,
   "symbols_in_volume": [
    "dist",
    "dist.log_prob",
    "histograms",
    "tensorflow.math.log",
    "tensorflow_probability.python.distributions.categorical_test.tfd",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testLogits": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.log",
    "tensorflow_probability.python.distributions.categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testMode": {
  "data": {
   "lineno": 440,
   "symbols_in_volume": [
    "dist",
    "dist.mode",
    "histograms",
    "tensorflow.math.log",
    "tensorflow_probability.python.distributions.categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testNotReparameterized": {
  "data": {
   "lineno": 382,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.distributions.categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testP": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testPMFNoBatch": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "tensorflow.math.log",
    "tensorflow_probability.python.distributions.categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testPMFWithBatch": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "tensorflow.math.log",
    "tensorflow_probability.python.distributions.categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testSample": {
  "data": {
   "lineno": 356,
   "symbols_in_volume": [
    "dist",
    "dist.sample",
    "histograms",
    "numpy.any",
    "numpy.mean",
    "tensorflow.int32",
    "tensorflow.math.log",
    "tensorflow_probability.python.distributions.categorical_test.tfd",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testSampleWithSampleShape": {
  "data": {
   "lineno": 371,
   "symbols_in_volume": [
    "dist",
    "dist.prob",
    "dist.sample",
    "histograms",
    "tensorflow.math.log",
    "tensorflow_probability.python.distributions.categorical_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testShapes": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "len",
    "tensorflow.constant",
    "tensorflow.get_static_value",
    "tensorflow.int32",
    "tensorflow_probability.python.distributions.categorical_test.make_categorical",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.CategoricalTest.testUnknownShape": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "logits",
    "numpy.float32",
    "sample",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.categorical_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.categorical_test.make_categorical": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "list",
    "tensorflow.float32",
    "tensorflow.int32",
    "tensorflow.random.uniform",
    "tensorflow_probability.python.distributions.categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.categorical_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.categorical_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.categorical_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.categorical_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.categorical_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.categorical_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.categorical_test.tfd": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.categorical_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.categorical_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.cauchy": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy.__init__": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.cauchy.Cauchy",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._batch_shape": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._batch_shape_tensor": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._cdf": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "numpy.pi",
    "tensorflow.compat.v2.atan"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._entropy": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.pi",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._event_shape": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._event_shape_tensor": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._inv_z": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "tensorflow.compat.v2.name_scope"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._log_cdf": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.pi",
    "tensorflow.compat.v2.atan",
    "tensorflow.compat.v2.math.log1p"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._log_normalization": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.pi",
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._log_prob": {
  "data": {
   "lineno": 178
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._log_unnormalized_prob": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log1p",
    "tensorflow.compat.v2.square"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._mean": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "ValueError",
    "numpy.nan",
    "tensorflow.compat.v2.fill",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._mode": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "tensorflow.compat.v2.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._param_shapes": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "dict",
    "staticmethod",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._params_event_ndims": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._quantile": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "numpy.pi",
    "tensorflow.compat.v2.tan"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._sample_n": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.random.uniform"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._stddev": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "ValueError",
    "numpy.nan",
    "tensorflow.compat.v2.fill",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy._z": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "tensorflow.compat.v2.name_scope"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy.loc": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.Cauchy.scale": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy.__all__": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.cauchy.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.cauchy.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.cauchy.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.cauchy.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.cauchy.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.cauchy.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.cauchy.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.cauchy.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.cauchy.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.cauchy_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.distributions.cauchy_test.try_import"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest._testParamShapes": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "tensorflow.ones",
    "tensorflow.shape",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest._testParamStaticShapes": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.assertAllFinite": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.isfinite",
    "numpy.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.setUp": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyCDF": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.linspace",
    "tensorflow_probability.python.distributions.cauchy_test.stats",
    "tensorflow_probability.python.distributions.cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyEntropy": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.cauchy_test.stats",
    "tensorflow_probability.python.distributions.cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyLogCDF": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.linspace",
    "tensorflow_probability.python.distributions.cauchy_test.stats",
    "tensorflow_probability.python.distributions.cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyLogPDF": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "numpy.sqrt",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.cauchy_test.stats",
    "tensorflow_probability.python.distributions.cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyLogPDFMultidimensional": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "numpy.sqrt",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.cauchy_test.stats",
    "tensorflow_probability.python.distributions.cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyLogSurvivalFunction": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.linspace",
    "tensorflow_probability.python.distributions.cauchy_test.stats",
    "tensorflow_probability.python.distributions.cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyMean": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "numpy.nan",
    "tensorflow_probability.python.distributions.cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyMode": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyNanMean": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.distributions.cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyNanStandardDeviation": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.distributions.cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyNanVariance": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.distributions.cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyNegativeLocFails": {
  "data": {
   "lineno": 403,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyQuantile": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.linspace",
    "tensorflow_probability.python.distributions.cauchy_test.stats",
    "tensorflow_probability.python.distributions.cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchySample": {
  "data": {
   "lineno": 356,
   "symbols_in_volume": [
    "numpy.median",
    "tensorflow.TensorShape",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchySampleMultiDimensional": {
  "data": {
   "lineno": 380,
   "symbols_in_volume": [
    "numpy.median",
    "tensorflow.TensorShape",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyShape": {
  "data": {
   "lineno": 408,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyShapeWithPlaceholders": {
  "data": {
   "lineno": 418,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyStandardDeviation": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": [
    "numpy.nan",
    "tensorflow_probability.python.distributions.cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchySurvivalFunction": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.linspace",
    "tensorflow_probability.python.distributions.cauchy_test.stats",
    "tensorflow_probability.python.distributions.cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testCauchyVariance": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": [
    "numpy.nan",
    "tensorflow_probability.python.distributions.cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testFiniteGradientAtDifficultPoints": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "cauchy_function",
    "dtype",
    "numpy.array",
    "numpy.float32",
    "numpy.float64",
    "print",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow_probability.math.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testFiniteGradientAtDifficultPoints.cauchy_function": {
  "data": {
   "lineno": 216
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testFiniteGradientAtDifficultPoints.cauchy_function.cauchy": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "getattr",
    "tensorflow_probability.python.distributions.cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testParamShapes": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "tensorflow.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.CauchyTest.testParamStaticShapes": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "tensorflow.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.cauchy_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.cauchy_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.cauchy_test.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.cauchy_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.cauchy_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.cauchy_test.stats": {
  "data": {
   "lineno": 41
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.cauchy_test.test_case": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_case"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.cauchy_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.cauchy_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.cauchy_test.tfd": {
  "data": {
   "lineno": 43
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.cauchy_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.cauchy_test.try_import": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "ImportError",
    "str",
    "tensorflow.compat.v1.logging.warning",
    "tensorflow_probability.python.distributions.cauchy_test.importlib"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.chi.Chi": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.chi.Chi.__init__": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.bijectors.invert.Invert",
    "tensorflow_probability.python.bijectors.square.Square",
    "tensorflow_probability.python.distributions.chi.Chi",
    "tensorflow_probability.python.distributions.chi2.Chi2",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi.Chi._entropy": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "numpy.log",
    "tensorflow.compat.v2.math.digamma",
    "tensorflow.compat.v2.math.lgamma"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi.Chi._mean": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "numpy.sqrt",
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.math.lgamma"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi.Chi._params_event_ndims": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi.Chi._variance": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "tensorflow.compat.v2.square"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi.Chi.df": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi._kl_chi_chi": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.digamma",
    "tensorflow.compat.v2.math.lgamma",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.chi.Chi",
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi.chi2": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.chi2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi.invert_bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.invert"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi.kullback_leibler": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi.square_bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.square"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi.transformed_distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.transformed_distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi2": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.chi2.Chi2": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.gamma.Gamma"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.chi2.Chi2.__init__": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.chi2.Chi2",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2.Chi2._param_shapes": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2.Chi2._params_event_ndims": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2.Chi2.df": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2.Chi2WithAbsDf": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.chi2.Chi2"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.chi2.Chi2WithAbsDf.__init__": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.floor",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.python.util.deprecation.deprecated",
    "tensorflow_probability.python.distributions.chi2.Chi2WithAbsDf"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.chi2.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi2.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi2.deprecation": {
  "data": {
   "shadows": "tensorflow.python.util.deprecation"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi2.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi2.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi2.gamma": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.gamma"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi2.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi2.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi2_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.chi2_test.Chi2Test": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.chi2_test.Chi2Test.testChi2CDF": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float64",
    "scipy.stats.chi2.cdf",
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.python.distributions.chi2_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2_test.Chi2Test.testChi2Chi2KL": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "int",
    "len",
    "numpy.arange",
    "scipy.special.digamma",
    "scipy.special.gammaln",
    "tensorflow.compat.v2.reduce_mean",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.distributions.chi2_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2_test.Chi2Test.testChi2Entropy": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float64",
    "scipy.stats.chi2.entropy",
    "tensorflow_probability.python.distributions.chi2_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2_test.Chi2Test.testChi2LogPDF": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float64",
    "scipy.stats.chi2.logpdf",
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.python.distributions.chi2_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2_test.Chi2Test.testChi2Mean": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float64",
    "scipy.stats.chi2.mean",
    "tensorflow_probability.python.distributions.chi2_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2_test.Chi2Test.testChi2Variance": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float64",
    "scipy.stats.chi2.var",
    "tensorflow_probability.python.distributions.chi2_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2_test.Chi2Test.testChi2WithAbsDf": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float64",
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.floor",
    "tensorflow_probability.python.distributions.chi2_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi2_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi2_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi2_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi2_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi2_test.special": {
  "data": {
   "shadows": "scipy.special"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi2_test.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi2_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi2_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi2_test.tfd": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.chi2_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi2_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.chi_test.ChiTest": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.chi_test.ChiTest.testChiCDF": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "len",
    "numpy.arange",
    "numpy.broadcast",
    "numpy.float64",
    "scipy.stats.chi.cdf",
    "tensorflow_probability.python.distributions.chi_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi_test.ChiTest.testChiChiKL": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "int",
    "len",
    "numpy.arange",
    "numpy.float64",
    "scipy.special.digamma",
    "scipy.special.gammaln",
    "tensorflow.compat.v2.reduce_mean",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.distributions.chi_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi_test.ChiTest.testChiEntropy": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.float64",
    "scipy.stats.chi.entropy",
    "tensorflow_probability.python.distributions.chi_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi_test.ChiTest.testChiLogPDF": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "len",
    "numpy.arange",
    "numpy.broadcast",
    "numpy.exp",
    "numpy.float64",
    "scipy.stats.chi.logpdf",
    "tensorflow_probability.python.distributions.chi_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi_test.ChiTest.testChiMean": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.float64",
    "scipy.stats.chi.mean",
    "tensorflow_probability.python.distributions.chi_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi_test.ChiTest.testChiVariance": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.float64",
    "scipy.stats.chi.var",
    "tensorflow_probability.python.distributions.chi_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.chi_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi_test.special": {
  "data": {
   "shadows": "scipy.special"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi_test.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi_test.tfd": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.chi_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.chi_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.ConditionalDistributionTest": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.distributions.distribution_test.DistributionTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.ConditionalDistributionTest._GetFakeDistribution": {
  "data": {
   "lineno": 32
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.ConditionalDistributionTest._GetFakeDistribution._FakeDistribution": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.conditional_distribution_test.tfd"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.ConditionalDistributionTest._GetFakeDistribution._FakeDistribution.__init__": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v2.TensorShape",
    "tensorflow.compat.v2.float32",
    "tensorflow_probability.python.distributions.conditional_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.ConditionalDistributionTest._GetFakeDistribution._FakeDistribution._batch_shape": {
  "data": {
   "lineno": 47
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.ConditionalDistributionTest._GetFakeDistribution._FakeDistribution._cdf": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.ConditionalDistributionTest._GetFakeDistribution._FakeDistribution._event_shape": {
  "data": {
   "lineno": 50
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.ConditionalDistributionTest._GetFakeDistribution._FakeDistribution._log_cdf": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.ConditionalDistributionTest._GetFakeDistribution._FakeDistribution._log_prob": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.ConditionalDistributionTest._GetFakeDistribution._FakeDistribution._log_survival_function": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.ConditionalDistributionTest._GetFakeDistribution._FakeDistribution._prob": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.ConditionalDistributionTest._GetFakeDistribution._FakeDistribution._sample_n": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.ConditionalDistributionTest._GetFakeDistribution._FakeDistribution._survival_function": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.ConditionalDistributionTest._GetPartiallyImplementedDistribution": {
  "data": {
   "lineno": 84
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.ConditionalDistributionTest._GetPartiallyImplementedDistribution._PartiallyImplementedDistribution": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.conditional_distribution_test.tfd"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.ConditionalDistributionTest._GetPartiallyImplementedDistribution._PartiallyImplementedDistribution.__init__": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v2.TensorShape",
    "tensorflow.compat.v2.float32",
    "tensorflow_probability.python.distributions.conditional_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.ConditionalDistributionTest._GetPartiallyImplementedDistribution._PartiallyImplementedDistribution._batch_shape": {
  "data": {
   "lineno": 99
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.ConditionalDistributionTest._GetPartiallyImplementedDistribution._PartiallyImplementedDistribution._event_shape": {
  "data": {
   "lineno": 102
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.ConditionalDistributionTest.testDefaultMethodLogSpaceInvocations": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "ValueError",
    "getattr",
    "method",
    "setattr",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.ConditionalDistributionTest.testDefaultMethodLogSpaceInvocations.raise_only_conditional_fn": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.ConditionalDistributionTest.testDefaultMethodLogSpaceInvocations.raise_with_input_fn": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.ConditionalDistributionTest.testDefaultMethodNonLogSpaceInvocations": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "ValueError",
    "getattr",
    "method",
    "setattr",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.ConditionalDistributionTest.testDefaultMethodNonLogSpaceInvocations.raise_only_conditional_fn": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.ConditionalDistributionTest.testDefaultMethodNonLogSpaceInvocations.raise_with_input_fn": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.ConditionalDistributionTest.testNotImplemented": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "ValueError",
    "getattr",
    "method"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.distribution_test": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution_test"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.tfd": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.conditional_distribution_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.conditional_transformed_distribution_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.conditional_transformed_distribution_test.ConditionalScalarToMultiTest": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.transformed_distribution_test.ScalarToMultiTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.conditional_transformed_distribution_test.ConditionalScalarToMultiTest._cls": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.conditional_transformed_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_transformed_distribution_test.ConditionalTransformedDistributionTest": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.conditional_transformed_distribution_test.ConditionalTransformedDistributionTest._cls": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.conditional_transformed_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_transformed_distribution_test.ConditionalTransformedDistributionTest.testConditioning": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "numpy.sign",
    "tensorflow_probability.python.distributions.conditional_transformed_distribution_test._ChooseLocation",
    "tensorflow_probability.python.distributions.conditional_transformed_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_transformed_distribution_test._ChooseLocation": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow_probability.bijectors.ConditionalBijector"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.conditional_transformed_distribution_test._ChooseLocation.__init__": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow_probability.python.distributions.conditional_transformed_distribution_test._ChooseLocation"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_transformed_distribution_test._ChooseLocation._forward": {
  "data": {
   "lineno": 47
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_transformed_distribution_test._ChooseLocation._gather_loc": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.gather",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_transformed_distribution_test._ChooseLocation._inverse": {
  "data": {
   "lineno": 50
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_transformed_distribution_test._ChooseLocation._inverse_log_det_jacobian": {
  "data": {
   "lineno": 53
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.conditional_transformed_distribution_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.conditional_transformed_distribution_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.conditional_transformed_distribution_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.conditional_transformed_distribution_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.conditional_transformed_distribution_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.conditional_transformed_distribution_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.conditional_transformed_distribution_test.tfd": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.conditional_transformed_distribution_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.conditional_transformed_distribution_test.transformed_distribution_test": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.transformed_distribution_test"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.deterministic": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.deterministic.Deterministic": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.deterministic._BaseDeterministic"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.deterministic.Deterministic.__init__": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow_probability.python.distributions.deterministic.Deterministic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.Deterministic._batch_shape": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.Deterministic._batch_shape_tensor": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.Deterministic._cdf": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.Deterministic._event_shape": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.Deterministic._event_shape_tensor": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.Deterministic._params_event_ndims": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.Deterministic._prob": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.float32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.VectorDeterministic": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.deterministic._BaseDeterministic"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.deterministic.VectorDeterministic.__init__": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow_probability.python.distributions.deterministic.VectorDeterministic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.VectorDeterministic._batch_shape": {
  "data": {
   "lineno": 381,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.VectorDeterministic._batch_shape_tensor": {
  "data": {
   "lineno": 377,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.VectorDeterministic._event_shape": {
  "data": {
   "lineno": 387
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.VectorDeterministic._event_shape_tensor": {
  "data": {
   "lineno": 384,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.VectorDeterministic._params_event_ndims": {
  "data": {
   "lineno": 373,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.VectorDeterministic._prob": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": [
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.gather",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.rank",
    "tensorflow.compat.v2.reduce_all",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.assert_util.assert_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic._BaseDeterministic": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.deterministic.abc",
    "tensorflow_probability.python.distributions.deterministic.six",
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.deterministic._BaseDeterministic.__init__": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "ValueError",
    "super",
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.deterministic._BaseDeterministic",
    "tensorflow_probability.python.distributions.deterministic._get_tol",
    "tensorflow_probability.python.internal.assert_util.assert_rank_at_least",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic._BaseDeterministic._entropy": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "tensorflow.compat.v2.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic._BaseDeterministic._mean": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "tensorflow.compat.v2.identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic._BaseDeterministic._mode": {
  "data": {
   "lineno": 159
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic._BaseDeterministic._sample_n": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_to",
    "tensorflow.compat.v2.concat"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic._BaseDeterministic._variance": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "tensorflow.compat.v2.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic._BaseDeterministic.atol": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic._BaseDeterministic.loc": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic._BaseDeterministic.rtol": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.__all__": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.deterministic._get_tol": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow_probability.python.internal.assert_util.assert_non_negative",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic._kl_deterministic_distribution": {
  "data": {
   "lineno": 408,
   "symbols_in_volume": [
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.deterministic._BaseDeterministic",
    "tensorflow_probability.python.distributions.distribution.Distribution",
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.deterministic.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.deterministic.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.deterministic.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.deterministic.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.deterministic.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.deterministic.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.deterministic.kullback_leibler": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.deterministic.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.deterministic.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.deterministic.six": {
  "data": {
   "shadows": "six"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.deterministic.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.deterministic.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.deterministic_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "numpy.random.RandomState",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testCdfWithDefaultTol": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testCdfWithNonzeroATol": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testCdfWithNonzeroRTol": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testDeterministicDeterministicKL": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.inf",
    "numpy.zeros",
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testDeterministicGammaKL": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testEntropy": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.zeros",
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testInvalidTolRaises": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow_probability.python.distributions.deterministic_test.rng",
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testLogProbWithDefaultTolInt32Loc": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "float",
    "tensorflow.constant",
    "tensorflow.int32",
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testProbWithDefaultTol": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testProbWithNoBatchDims": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testProbWithNoBatchDimsIntegerType": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testProbWithNonzeroATol": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testProbWithNonzeroATolIntegerType": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testProbWithNonzeroRTol": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testProbWithNonzeroRTolIntegerType": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testProbWithRTolBcastsLoc": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testSampleDynamicWithBatchDims": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.int32",
    "numpy.zeros",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testSampleNoBatchDims": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.zeros",
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testSampleWithBatchAtol": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.zeros",
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testSampleWithBatchDims": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.zeros",
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.DeterministicTest.testShape": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.deterministic_test.rng",
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testEntropy": {
  "data": {
   "lineno": 358,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.zeros",
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testInvalidTolRaises": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "ValueError",
    "numpy.float32",
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow_probability.python.distributions.deterministic_test.rng",
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testInvalidXRaises": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "ValueError",
    "numpy.float32",
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow_probability.python.distributions.deterministic_test.rng",
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testParamBroadcasts": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": [
    "numpy.abs",
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.deterministic_test.rng",
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testProbVectorDeterministicWithNoBatchDims": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testProbVectorDeterministicWithNoBatchDimsOnRZero": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testProbVectorDeterministicWithNoBatchDimsOnRZeroRaisesIfXNotInSameRk": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testProbWithATolBcastsLoc": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testProbWithDefaultTol": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testProbWithNonzeroATol": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testProbWithNonzeroRTol": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testSampleDynamicWithBatchDims": {
  "data": {
   "lineno": 346,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.int32",
    "numpy.zeros",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testSampleNoBatchDims": {
  "data": {
   "lineno": 328,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.zeros",
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testSampleWithBatchDims": {
  "data": {
   "lineno": 337,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.zeros",
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testShape": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.deterministic_test.rng",
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testShapeUknown": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testVectorDeterministicMultivariateNormalDiagKL": {
  "data": {
   "lineno": 377,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.VectorDeterministicTest.testVectorDeterministicVectorDeterministicKL": {
  "data": {
   "lineno": 364,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.inf",
    "numpy.zeros",
    "tensorflow_probability.python.distributions.deterministic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.deterministic_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.deterministic_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.deterministic_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.deterministic_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.deterministic_test.rng": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.deterministic_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.deterministic_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.deterministic_test.tfd": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.deterministic_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet.__init__": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.distributions.dirichlet.Dirichlet",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._batch_shape": {
  "data": {
   "lineno": 219
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._batch_shape_tensor": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._covariance": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.set_diag",
    "tensorflow.compat.v2.matmul",
    "tensorflow.compat.v2.newaxis"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._entropy": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.math.digamma",
    "tensorflow.compat.v2.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._event_shape": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._event_shape_tensor": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._log_normalization": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.lbeta"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._log_prob": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.dirichlet._dirichlet_sample_note",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._log_unnormalized_prob": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.xlogy",
    "tensorflow.compat.v2.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._maybe_assert_valid_concentration": {
  "data": {
   "lineno": 301,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.assert_util.assert_less",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.assert_util.assert_rank_at_least",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._maybe_assert_valid_sample": {
  "data": {
   "lineno": 318,
   "symbols_in_volume": [
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.internal.assert_util.assert_near",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._mean": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": [
    "tensorflow.compat.v2.newaxis"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._mode": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": [
    "numpy.nan",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.fill",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.reduce_all",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.assert_util.assert_less",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._params_event_ndims": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._prob": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "tensorflow.compat.v2.exp",
    "tensorflow_probability.python.distributions.dirichlet._dirichlet_sample_note",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._sample_n": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "tensorflow.compat.v2.random.gamma",
    "tensorflow.compat.v2.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._variance": {
  "data": {
   "lineno": 268
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet._variance_scale_term": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.rsqrt",
    "tensorflow.compat.v2.newaxis"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet.concentration": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.Dirichlet.total_concentration": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.__all__": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.dirichlet._dirichlet_sample_note": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.dirichlet._kl_dirichlet_dirichlet": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.digamma",
    "tensorflow.compat.v2.math.lbeta",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.distributions.dirichlet.Dirichlet",
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet.kullback_leibler": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial.__init__": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial",
    "tensorflow_probability.python.internal.distribution_util.embed_check_nonnegative_integer_form",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._batch_shape": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._batch_shape_tensor": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._covariance": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.set_diag",
    "tensorflow.compat.v2.matmul",
    "tensorflow.compat.v2.newaxis",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._event_shape": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._event_shape_tensor": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._log_prob": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.lbeta",
    "tensorflow_probability.python.distributions.dirichlet_multinomial._dirichlet_multinomial_sample_note",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
    "tensorflow_probability.python.internal.distribution_util.log_combinations"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._maybe_assert_valid_concentration": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.distribution_util.embed_check_categorical_event_shape",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._maybe_assert_valid_sample": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": [
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.distribution_util.embed_check_nonnegative_integer_form",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._mean": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": [
    "tensorflow.compat.v2.newaxis"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._params_event_ndims": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._prob": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": [
    "tensorflow.compat.v2.exp",
    "tensorflow_probability.python.distributions.dirichlet_multinomial._dirichlet_multinomial_sample_note",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._sample_n": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "seed",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.random.gamma",
    "tensorflow.compat.v2.reshape",
    "tensorflow_probability.python.distributions.multinomial.draw_sample",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._variance": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": [
    "tensorflow.compat.v2.newaxis"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial._variance_scale_term": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": [
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.sqrt"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial.concentration": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial.total_concentration": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.DirichletMultinomial.total_count": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.__all__": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial._dirichlet_multinomial_sample_note": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.multinomial": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.multinomial"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.seed_stream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.setUp": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testAlphaProperty": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testComplexShapes": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float64",
    "numpy.random.rand",
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testCovariance": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "covariance_entry",
    "len",
    "numpy.array",
    "numpy.squeeze",
    "numpy.sum",
    "range",
    "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd",
    "variance_entry"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testCovarianceFromSampling": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "int",
    "numpy.array",
    "numpy.float32",
    "tensorflow.linalg.diag_part",
    "tensorflow.matmul",
    "tensorflow.newaxis",
    "tensorflow.reduce_mean",
    "tensorflow.sqrt",
    "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testCovarianceMultidimensional": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.random.rand",
    "numpy.random.randint",
    "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testCovarianceNAlphaBroadcast": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": [
    "covariance_entry",
    "numpy.array",
    "numpy.float32",
    "tensorflow.newaxis",
    "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd",
    "variance_entry"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testLargeTauGivesPreciseProbabilities": {
  "data": {
   "lineno": 337,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testMeanDoubleTwoVotes": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "range",
    "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testNonStrictTurnsOffAllChecks": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testNotReparameterized": {
  "data": {
   "lineno": 453,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testNproperty": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testPmfAlphaStretchedInBroadcastWhenLowerRank": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testPmfAlphaStretchedInBroadcastWhenSameRank": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testPmfBothZeroBatches": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testPmfBothZeroBatchesMultidimensionalN": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.full",
    "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testPmfBothZeroBatchesNontrivialN": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testPmfCountsStretchedInBroadcastWhenLowerRank": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testPmfCountsStretchedInBroadcastWhenSameRank": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testPmfForOneVoteIsTheMeanWithOneRecordInput": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.zeros",
    "range",
    "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testPmfNandCountsAgree": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testPmfNonIntegerCounts": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testSampleUnbiasedNonScalarBatch": {
  "data": {
   "lineno": 398,
   "symbols_in_volume": [
    "int",
    "numpy.float32",
    "tensorflow.matmul",
    "tensorflow.reduce_mean",
    "tensorflow.transpose",
    "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testSampleUnbiasedScalarBatch": {
  "data": {
   "lineno": 426,
   "symbols_in_volume": [
    "int",
    "numpy.float32",
    "tensorflow.matmul",
    "tensorflow.reduce_mean",
    "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testSimpleShapes": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "numpy.random.rand",
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testSmallTauPrefersCorrelatedResults": {
  "data": {
   "lineno": 365,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.DirichletMultinomialTest.testZeroCountsResultsInPmfEqualToOne": {
  "data": {
   "lineno": 327,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfd": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_multinomial_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.distributions.dirichlet_test.try_import"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testComplexShapes": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "numpy.random.rand",
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.dirichlet_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testConcentrationProperty": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.dirichlet_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testCovarianceFromSampling": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "int",
    "numpy.array",
    "numpy.float32",
    "tensorflow.linalg.diag_part",
    "tensorflow.matmul",
    "tensorflow.reduce_mean",
    "tensorflow.sqrt",
    "tensorflow_probability.python.distributions.dirichlet_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testDegenerateAlignedStridedSlice": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": [
    "numpy.zeros",
    "tensorflow.nn.softplus",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.dirichlet_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testDirichletDirichletKL": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": [
    "int",
    "numpy.array",
    "numpy.sum",
    "numpy.zeros_like",
    "tensorflow.reduce_mean",
    "tensorflow_probability.python.distributions.dirichlet_test.special",
    "tensorflow_probability.python.distributions.dirichlet_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testDirichletFullyReparameterized": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.distributions.dirichlet_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testEntropy": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.dirichlet_test.stats",
    "tensorflow_probability.python.distributions.dirichlet_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testLogPdfOnBoundaryIsFiniteWhenAlphaIsOne": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.float32",
    "numpy.isfinite",
    "numpy.ones",
    "numpy.ones_like",
    "range",
    "tensorflow_probability.python.distributions.dirichlet_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testMean": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.dirichlet_test.stats",
    "tensorflow_probability.python.distributions.dirichlet_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testMode": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.sum",
    "tensorflow_probability.python.distributions.dirichlet_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testModeEnableAllowNanStats": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.nan",
    "numpy.zeros_like",
    "tensorflow_probability.python.distributions.dirichlet_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testModeInvalid": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.dirichlet_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testPdfAlphaStretchedInBroadcastWhenLowerRank": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.dirichlet_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testPdfAlphaStretchedInBroadcastWhenSameRank": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.dirichlet_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testPdfUniformZeroBatches": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.dirichlet_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testPdfXProper": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.dirichlet_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testPdfXStretchedInBroadcastWhenLowerRank": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.dirichlet_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testPdfXStretchedInBroadcastWhenSameRank": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.dirichlet_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testPdfZeroBatches": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.dirichlet_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testPdfZeroBatchesNontrivialX": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.dirichlet_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testSample": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "numpy.all",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.dirichlet_test.stats",
    "tensorflow_probability.python.distributions.dirichlet_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testSimpleShapes": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "numpy.random.rand",
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.dirichlet_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.DirichletTest.testVariance": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "numpy.diag",
    "numpy.sum",
    "tensorflow_probability.python.distributions.dirichlet_test.stats",
    "tensorflow_probability.python.distributions.dirichlet_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.special": {
  "data": {
   "lineno": 42
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.stats": {
  "data": {
   "lineno": 43
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.tfd": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.dirichlet_test.try_import": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "ImportError",
    "str",
    "tensorflow.compat.v1.logging.warning",
    "tensorflow_probability.python.distributions.dirichlet_test.importlib"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.distribution.ConditionalDistribution": {
  "data": {
   "lineno": 1441,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution.ConditionalDistribution.__new__": {
  "data": {
   "lineno": 1448,
   "symbols_in_volume": [
    "super",
    "tensorflow.python.util.deprecation.deprecated",
    "tensorflow_probability.python.distributions.distribution.ConditionalDistribution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution._BaseDistribution",
    "tensorflow_probability.python.distributions.distribution._DistributionMeta",
    "tensorflow_probability.python.distributions.distribution.six"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.__getitem__": {
  "data": {
   "lineno": 605,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.internal.slicing.batch_slice"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.__init__": {
  "data": {
   "lineno": 434,
   "symbols_in_volume": [
    "ValueError",
    "enumerate",
    "tensorflow.compat.v2.is_tensor",
    "tensorflow.compat.v2.name_scope",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.__iter__": {
  "data": {
   "lineno": 634,
   "symbols_in_volume": [
    "TypeError",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.__repr__": {
  "data": {
   "lineno": 1298,
   "symbols_in_volume": [
    "_str_dtype",
    "_str_tensorshape",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.__str__": {
  "data": {
   "lineno": 1274,
   "symbols_in_volume": [
    "_str_dtype",
    "_str_tensorshape",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._batch_shape": {
  "data": {
   "lineno": 725,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._batch_shape_tensor": {
  "data": {
   "lineno": 701,
   "symbols_in_volume": [
    "NotImplementedError",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._call_cdf": {
  "data": {
   "lineno": 930,
   "symbols_in_volume": [
    "NotImplementedError",
    "hasattr",
    "tensorflow.compat.v2.exp",
    "tensorflow_probability.python.distributions.distribution._convert_to_tensor",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._call_log_cdf": {
  "data": {
   "lineno": 894,
   "symbols_in_volume": [
    "NotImplementedError",
    "hasattr",
    "tensorflow.compat.v2.math.log",
    "tensorflow_probability.python.distributions.distribution._convert_to_tensor",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._call_log_prob": {
  "data": {
   "lineno": 842,
   "symbols_in_volume": [
    "NotImplementedError",
    "hasattr",
    "tensorflow.compat.v2.math.log",
    "tensorflow_probability.python.distributions.distribution._convert_to_tensor",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._call_log_survival_function": {
  "data": {
   "lineno": 967,
   "symbols_in_volume": [
    "NotImplementedError",
    "tensorflow.compat.v2.math.log1p",
    "tensorflow_probability.python.distributions.distribution._convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._call_prob": {
  "data": {
   "lineno": 868,
   "symbols_in_volume": [
    "NotImplementedError",
    "hasattr",
    "tensorflow.compat.v2.exp",
    "tensorflow_probability.python.distributions.distribution._convert_to_tensor",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._call_quantile": {
  "data": {
   "lineno": 1067,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution._convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._call_sample_n": {
  "data": {
   "lineno": 811,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._call_survival_function": {
  "data": {
   "lineno": 1010,
   "symbols_in_volume": [
    "NotImplementedError",
    "tensorflow_probability.python.distributions.distribution._convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._covariance": {
  "data": {
   "lineno": 1160,
   "symbols_in_volume": [
    "NotImplementedError",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._cross_entropy": {
  "data": {
   "lineno": 1213,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.kullback_leibler.cross_entropy"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._entropy": {
  "data": {
   "lineno": 1045,
   "symbols_in_volume": [
    "NotImplementedError",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._event_shape": {
  "data": {
   "lineno": 763,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._event_shape_tensor": {
  "data": {
   "lineno": 742,
   "symbols_in_volume": [
    "NotImplementedError",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._expand_sample_shape_to_vector": {
  "data": {
   "lineno": 1317,
   "symbols_in_volume": [
    "numpy.prod",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow.compat.v2.reduce_prod",
    "tensorflow_probability.python.internal.distribution_util.expand_to_vector",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._is_scalar_helper": {
  "data": {
   "lineno": 1372,
   "symbols_in_volume": [
    "dynamic_shape_fn",
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow.compat.v2.equal",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.tensorshape_util.as_list",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._kl_divergence": {
  "data": {
   "lineno": 1242,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._log_survival_function": {
  "data": {
   "lineno": 962,
   "symbols_in_volume": [
    "NotImplementedError",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._mean": {
  "data": {
   "lineno": 1054,
   "symbols_in_volume": [
    "NotImplementedError",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._mode": {
  "data": {
   "lineno": 1204,
   "symbols_in_volume": [
    "NotImplementedError",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._name_scope": {
  "data": {
   "lineno": 1310,
   "symbols_in_volume": [
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.distribution.contextlib"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._param_shapes": {
  "data": {
   "lineno": 549,
   "symbols_in_volume": [
    "NotImplementedError",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._params_event_ndims": {
  "data": {
   "lineno": 579,
   "symbols_in_volume": [
    "NotImplementedError",
    "classmethod"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._quantile": {
  "data": {
   "lineno": 1063,
   "symbols_in_volume": [
    "NotImplementedError",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._sample_n": {
  "data": {
   "lineno": 807,
   "symbols_in_volume": [
    "NotImplementedError",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._set_sample_static_shape": {
  "data": {
   "lineno": 1328,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow_probability.python.internal.tensorshape_util.concatenate",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._stddev": {
  "data": {
   "lineno": 1126,
   "symbols_in_volume": [
    "NotImplementedError",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._survival_function": {
  "data": {
   "lineno": 1006,
   "symbols_in_volume": [
    "NotImplementedError",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution._variance": {
  "data": {
   "lineno": 1093,
   "symbols_in_volume": [
    "NotImplementedError",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.allow_nan_stats": {
  "data": {
   "lineno": 649,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.batch_shape": {
  "data": {
   "lineno": 728,
   "symbols_in_volume": [
    "property",
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.batch_shape_tensor": {
  "data": {
   "lineno": 705,
   "symbols_in_volume": [
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32",
    "tensorflow_probability.python.internal.tensorshape_util.as_list",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.cdf": {
  "data": {
   "lineno": 942
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.copy": {
  "data": {
   "lineno": 671,
   "symbols_in_volume": [
    "Ellipsis",
    "NotImplementedError",
    "dict",
    "tensorflow_probability.python.distributions.internal.slicing.batch_slice",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.covariance": {
  "data": {
   "lineno": 1164
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.cross_entropy": {
  "data": {
   "lineno": 1217
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.dtype": {
  "data": {
   "lineno": 558,
   "symbols_in_volume": [
    "hasattr",
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.entropy": {
  "data": {
   "lineno": 1049
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.event_shape": {
  "data": {
   "lineno": 766,
   "symbols_in_volume": [
    "property",
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.event_shape_tensor": {
  "data": {
   "lineno": 746,
   "symbols_in_volume": [
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32",
    "tensorflow_probability.python.internal.tensorshape_util.as_list",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.is_scalar_batch": {
  "data": {
   "lineno": 792,
   "symbols_in_volume": [
    "tensorflow.compat.v2.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.is_scalar_event": {
  "data": {
   "lineno": 777,
   "symbols_in_volume": [
    "tensorflow.compat.v2.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.kl_divergence": {
  "data": {
   "lineno": 1246
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.log_cdf": {
  "data": {
   "lineno": 906
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.log_prob": {
  "data": {
   "lineno": 854
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.log_survival_function": {
  "data": {
   "lineno": 980
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.mean": {
  "data": {
   "lineno": 1058
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.mode": {
  "data": {
   "lineno": 1208
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.name": {
  "data": {
   "lineno": 553,
   "symbols_in_volume": [
    "hasattr",
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.param_shapes": {
  "data": {
   "lineno": 489,
   "symbols_in_volume": [
    "classmethod",
    "tensorflow.compat.v2.name_scope"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.param_static_shapes": {
  "data": {
   "lineno": 510,
   "symbols_in_volume": [
    "ValueError",
    "classmethod",
    "isinstance",
    "tensorflow.compat.v2.TensorShape",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow_probability.python.internal.tensorshape_util.as_list",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.parameters": {
  "data": {
   "lineno": 563,
   "symbols_in_volume": [
    "callable",
    "hasattr",
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.prob": {
  "data": {
   "lineno": 880
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.quantile": {
  "data": {
   "lineno": 1073
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.reparameterization_type": {
  "data": {
   "lineno": 637,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.sample": {
  "data": {
   "lineno": 825
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.stddev": {
  "data": {
   "lineno": 1130,
   "symbols_in_volume": [
    "NotImplementedError",
    "tensorflow.compat.v2.sqrt"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.survival_function": {
  "data": {
   "lineno": 1023
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.validate_args": {
  "data": {
   "lineno": 666,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.Distribution.variance": {
  "data": {
   "lineno": 1097,
   "symbols_in_volume": [
    "NotImplementedError",
    "tensorflow.compat.v2.square"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution._ALWAYS_COPY_PUBLIC_METHOD_WRAPPERS": {
  "data": {
   "lineno": 68
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.distribution._BaseDistribution": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "object",
    "tensorflow_probability.python.distributions.distribution.abc",
    "tensorflow_probability.python.distributions.distribution.six"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution._DISTRIBUTION_PUBLIC_METHOD_WRAPPERS": {
  "data": {
   "lineno": 46
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.distribution._DistributionMeta": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.abc"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution._DistributionMeta.__new__": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "AttributeError",
    "TypeError",
    "ValueError",
    "default_init",
    "getattr",
    "issubclass",
    "super",
    "tensorflow.python.util.tf_inspect.getdoc",
    "tensorflow_probability.python.distributions.distribution._ALWAYS_COPY_PUBLIC_METHOD_WRAPPERS",
    "tensorflow_probability.python.distributions.distribution._BaseDistribution",
    "tensorflow_probability.python.distributions.distribution._DISTRIBUTION_PUBLIC_METHOD_WRAPPERS",
    "tensorflow_probability.python.distributions.distribution._DistributionMeta",
    "tensorflow_probability.python.distributions.distribution._copy_fn",
    "tensorflow_probability.python.distributions.distribution._update_docstring",
    "wrapped_init"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution._DistributionMeta.__new__.wrapped_init": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "default_init",
    "hasattr",
    "tensorflow_probability.python.distributions.distribution._remove_dict_keys_with_value",
    "tensorflow_probability.python.distributions.distribution.decorator",
    "tensorflow_probability.python.distributions.distribution.inspect",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution._PrettyDict": {
  "data": {
   "lineno": 1385,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution._PrettyDict.__repr__": {
  "data": {
   "lineno": 1392,
   "symbols_in_volume": [
    "repr",
    "sorted"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution._PrettyDict.__str__": {
  "data": {
   "lineno": 1388,
   "symbols_in_volume": [
    "sorted",
    "str"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.__all__": {
  "data": {
   "lineno": 41
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.distribution._convert_to_tensor": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.nest.is_nested",
    "tensorflow.compat.v2.nest.map_structure"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution._copy_fn": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "TypeError",
    "callable",
    "tensorflow_probability.python.distributions.distribution.types"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution._recursively_replace_dict_for_pretty_dict": {
  "data": {
   "lineno": 1397,
   "symbols_in_volume": [
    "dict",
    "hasattr",
    "isinstance",
    "tensorflow_probability.python.distributions.distribution._PrettyDict",
    "tensorflow_probability.python.distributions.distribution.collections",
    "tensorflow_probability.python.distributions.distribution.six",
    "tuple",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution._remove_dict_keys_with_value": {
  "data": {
   "lineno": 176
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution._str_dtype": {
  "data": {
   "lineno": 1430,
   "symbols_in_volume": [
    "str",
    "tensorflow.compat.v2.nest.map_structure",
    "tensorflow_probability.python.distributions.distribution._recursively_replace_dict_for_pretty_dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution._str_dtype._str": {
  "data": {
   "lineno": 1431,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.dtype_util.name"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution._str_tensorshape": {
  "data": {
   "lineno": 1419,
   "symbols_in_volume": [
    "str",
    "tensorflow.compat.v2.nest.map_structure",
    "tensorflow_probability.python.distributions.distribution._recursively_replace_dict_for_pretty_dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution._str_tensorshape._str": {
  "data": {
   "lineno": 1420,
   "symbols_in_volume": [
    "str",
    "tensorflow_probability.python.internal.tensorshape_util.as_list",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution._update_docstring": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "enumerate"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution.contextlib": {
  "data": {
   "shadows": "contextlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution.decorator": {
  "data": {
   "shadows": "decorator"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution.deprecation": {
  "data": {
   "shadows": "tensorflow.python.util.deprecation"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution.kullback_leibler": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution.six": {
  "data": {
   "shadows": "six"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution.slicing": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.internal.slicing"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution.tf_inspect": {
  "data": {
   "shadows": "tensorflow.python.util.tf_inspect"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution.types": {
  "data": {
   "shadows": "types"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "absl.flags.DEFINE_enum",
    "absl.flags.FLAGS",
    "dict",
    "set",
    "tensorflow.float32",
    "tensorflow.floor",
    "tensorflow.linalg.band_part",
    "tensorflow.maximum",
    "tensorflow.nn.l2_normalize",
    "tensorflow.nn.sigmoid",
    "tensorflow.nn.softmax",
    "tensorflow.nn.softplus",
    "tensorflow.sigmoid",
    "tensorflow.test.main",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.distributions.distribution_properties_test.ensure_high_gt_low",
    "tensorflow_probability.python.distributions.distribution_properties_test.fix_triangular",
    "tensorflow_probability.python.distributions.distribution_properties_test.fix_wishart",
    "tensorflow_probability.python.distributions.distribution_properties_test.generate_outcomes",
    "tensorflow_probability.python.distributions.distribution_properties_test.instantiable_dists",
    "tensorflow_probability.python.distributions.distribution_properties_test.positive_definite",
    "tensorflow_probability.python.distributions.distribution_properties_test.sigmoid_plus_eps",
    "tensorflow_probability.python.distributions.distribution_properties_test.softplus_plus_eps",
    "tensorflow_probability.python.distributions.distribution_properties_test.tfd"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.CONSTRAINTS": {
  "data": {
   "lineno": 593
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.DistributionSlicingTest": {
  "data": {
   "lineno": 418,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.DistributionSlicingTest._run_test": {
  "data": {
   "lineno": 496,
   "symbols_in_volume": [
    "TypeError",
    "absl.logging.info",
    "hypothesis.extra.numpy.arrays",
    "hypothesis.extra.numpy.int64",
    "int",
    "iter",
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow_probability.python.distributions.distribution_properties_test.distributions",
    "tensorflow_probability.python.distributions.distribution_properties_test.six"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.DistributionSlicingTest._test_slicing": {
  "data": {
   "lineno": 421,
   "symbols_in_volume": [
    "Ellipsis",
    "NotImplementedError",
    "absl.logging.info",
    "any",
    "hypothesis.extra.numpy.arrays",
    "hypothesis.extra.numpy.int64",
    "hypothesis.extra.numpy.zeros",
    "hypothesis.strategies.just",
    "isinstance",
    "slice",
    "str",
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow.errors.UnimplementedError",
    "tensorflow_probability.python.distributions.distribution_properties_test.collections",
    "tensorflow_probability.python.distributions.distribution_properties_test.maybe_seed",
    "tensorflow_probability.python.distributions.distribution_properties_test.stringify_slices",
    "tensorflow_probability.python.distributions.distribution_properties_test.valid_slices",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.DistributionSlicingTest.testDistributions": {
  "data": {
   "lineno": 517,
   "symbols_in_volume": [
    "hypothesis.HealthCheck.too_slow",
    "hypothesis.given",
    "hypothesis.settings",
    "hypothesis.strategies.data",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.distribution_properties_test.FLAGS",
    "tensorflow_probability.python.distributions.distribution_properties_test.hypothesis_max_examples",
    "tensorflow_probability.python.internal.test_util.derandomize_hypothesis"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.FLAGS": {
  "data": {
   "lineno": 47
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.INSTANTIABLE_DISTS": {
  "data": {
   "lineno": 105
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.MUTEX_PARAMS": {
  "data": {
   "lineno": 55
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.SPECIAL_DISTS": {
  "data": {
   "lineno": 61
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.assert_shapes_unchanged": {
  "data": {
   "lineno": 372,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.testing.assert_array_equal",
    "tensorflow_probability.python.distributions.distribution_properties_test.six",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.batch_shapes": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": [
    "draw",
    "hypothesis.extra.numpy.array_shapes",
    "hypothesis.strategies.composite",
    "hypothesis.strategies.integers",
    "tensorflow.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.batch_shapes.resize_lastdim": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": [
    "max"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.bijector_hps": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.hypothesis_testlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.broadcasting_params": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": [
    "constraint_for",
    "dict",
    "draw",
    "hypothesis.strategies.composite",
    "hypothesis.strategies.integers",
    "hypothesis.strategies.just",
    "hypothesis.strategies.one_of",
    "map",
    "set",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow_probability.python.distributions.distribution_properties_test.INSTANTIABLE_DISTS",
    "tensorflow_probability.python.distributions.distribution_properties_test.MUTEX_PARAMS",
    "tensorflow_probability.python.distributions.distribution_properties_test.broadcasting_shapes",
    "tensorflow_probability.python.distributions.distribution_properties_test.single_param",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.broadcasting_shapes": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "dict",
    "draw",
    "hypothesis.strategies.composite",
    "hypothesis.strategies.permutations",
    "len",
    "tensorflow_probability.python.internal.test_util.broadcasting_shapes",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.constraint_for": {
  "data": {
   "lineno": 682,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution_properties_test.CONSTRAINTS",
    "tensorflow_probability.python.distributions.distribution_properties_test.identity_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.distributions": {
  "data": {
   "lineno": 379,
   "symbols_in_volume": [
    "constraint_for",
    "dist_cls",
    "draw",
    "eligibility_filter",
    "hypothesis.strategies.composite",
    "hypothesis.strategies.just",
    "hypothesis.strategies.one_of",
    "map",
    "tensorflow_probability.python.distributions.distribution_properties_test.INSTANTIABLE_DISTS",
    "tensorflow_probability.python.distributions.distribution_properties_test.assert_shapes_unchanged",
    "tensorflow_probability.python.distributions.distribution_properties_test.batch_shapes",
    "tensorflow_probability.python.distributions.distribution_properties_test.broadcasting_params",
    "tensorflow_probability.python.distributions.distribution_properties_test.independents",
    "tensorflow_probability.python.distributions.distribution_properties_test.mixtures_same_family",
    "tensorflow_probability.python.distributions.distribution_properties_test.transformed_distributions"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.ensure_high_gt_low": {
  "data": {
   "lineno": 544,
   "symbols_in_volume": [
    "range",
    "tensorflow.abs",
    "tensorflow.math.reduce_max",
    "tensorflow.maximum",
    "tensorflow.range",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.fix_triangular": {
  "data": {
   "lineno": 576,
   "symbols_in_volume": [
    "dict",
    "tensorflow_probability.python.distributions.distribution_properties_test.ensure_high_gt_low"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.fix_wishart": {
  "data": {
   "lineno": 582,
   "symbols_in_volume": [
    "dict",
    "tensorflow.cast",
    "tensorflow.maximum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.flags": {
  "data": {
   "shadows": "absl.flags"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.generate_outcomes": {
  "data": {
   "lineno": 588,
   "symbols_in_volume": [
    "dict",
    "tensorflow.linspace",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.hp": {
  "data": {
   "shadows": "hypothesis"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.hpnp": {
  "data": {
   "shadows": "hypothesis.extra.numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.hps": {
  "data": {
   "shadows": "hypothesis.strategies"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.hypothesis_max_examples": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "int",
    "tensorflow_probability.python.distributions.distribution_properties_test.os"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.identity_fn": {
  "data": {
   "lineno": 532
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.independents": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": [
    "absl.logging.info",
    "distributions",
    "draw",
    "hypothesis.strategies.composite",
    "hypothesis.strategies.integers",
    "len",
    "tensorflow_probability.python.distributions.distribution_properties_test.batch_shapes",
    "tensorflow_probability.python.distributions.distribution_properties_test.six",
    "tensorflow_probability.python.distributions.distribution_properties_test.tfd",
    "tensorflow_probability.python.internal.tensorshape_util.concatenate"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.instantiable_dists": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "NotImplementedError",
    "absl.logging.warning",
    "dict",
    "issubclass",
    "tensorflow_probability.python.distributions.distribution_properties_test.SPECIAL_DISTS",
    "tensorflow_probability.python.distributions.distribution_properties_test.functools",
    "tensorflow_probability.python.distributions.distribution_properties_test.inspect",
    "tensorflow_probability.python.distributions.distribution_properties_test.six",
    "tensorflow_probability.python.distributions.distribution_properties_test.tfd",
    "tensorflow_probability.python.distributions.distribution_properties_test.traceback"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.logging": {
  "data": {
   "shadows": "absl.logging"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.maybe_seed": {
  "data": {
   "lineno": 413,
   "symbols_in_volume": [
    "int",
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow.executing_eagerly"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.mixtures_same_family": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": [
    "absl.logging.info",
    "distributions",
    "draw",
    "hypothesis.strategies.composite",
    "hypothesis.strategies.just",
    "hypothesis.strategies.one_of",
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.distribution_properties_test.batch_shapes",
    "tensorflow_probability.python.distributions.distribution_properties_test.six",
    "tensorflow_probability.python.distributions.distribution_properties_test.tfd",
    "tensorflow_probability.python.internal.tensorshape_util.as_list",
    "tensorflow_probability.python.internal.tensorshape_util.concatenate"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.np": {
  "data": {
   "shadows": "hypothesis.extra.numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.positive_definite": {
  "data": {
   "lineno": 569,
   "symbols_in_volume": [
    "tensorflow.linalg.eye",
    "tensorflow.matmul",
    "tensorflow_probability.python.distributions.distribution_properties_test.symmetric",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.sigmoid_plus_eps": {
  "data": {
   "lineno": 540,
   "symbols_in_volume": [
    "tensorflow.sigmoid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.single_param": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.arrays",
    "hypothesis.extra.numpy.float32",
    "hypothesis.strategies.floats"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.single_param.mapper": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "constraint_fn",
    "tensorflow.convert_to_tensor",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.internal.assert_util.assert_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.six": {
  "data": {
   "shadows": "six"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.softplus_plus_eps": {
  "data": {
   "lineno": 536,
   "symbols_in_volume": [
    "tensorflow.nn.softplus"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.stringify_slices": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "Ellipsis",
    "ValueError",
    "int",
    "isinstance",
    "slice",
    "str",
    "tensorflow.is_tensor",
    "tensorflow.newaxis",
    "tuple",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.symmetric": {
  "data": {
   "lineno": 565,
   "symbols_in_volume": [
    "tensorflow.linalg.matrix_transpose"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.tfd": {
  "data": {
   "lineno": 42
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.traceback": {
  "data": {
   "shadows": "traceback"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.transformed_distributions": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": [
    "absl.logging.info",
    "distributions",
    "draw",
    "hypothesis.strategies.booleans",
    "hypothesis.strategies.composite",
    "tensorflow.TensorShape",
    "tensorflow_probability.python.bijectors.hypothesis_testlib.distribution_filter_for",
    "tensorflow_probability.python.bijectors.hypothesis_testlib.unconstrained_bijectors",
    "tensorflow_probability.python.distributions.distribution_properties_test.batch_shapes",
    "tensorflow_probability.python.distributions.distribution_properties_test.six",
    "tensorflow_probability.python.distributions.distribution_properties_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_properties_test.valid_slices": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "Ellipsis",
    "draw",
    "hypothesis.strategies.booleans",
    "hypothesis.strategies.composite",
    "hypothesis.strategies.integers",
    "hypothesis.strategies.just",
    "hypothesis.strategies.lists",
    "hypothesis.strategies.one_of",
    "hypothesis.strategies.tuples",
    "len",
    "range",
    "slice",
    "sorted",
    "tensorflow.TensorShape",
    "tensorflow.newaxis",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.distribution_test.DictDistribution": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution_test.tfd"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_test.DictDistribution.__init__": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.distributions.distribution_test.DictDistribution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DictDistribution.batch_shape": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "dict",
    "property",
    "tensorflow.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DictDistribution.dtype": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "dict",
    "property",
    "tensorflow.float16",
    "tensorflow.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DictDistribution.event_shape": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "dict",
    "property",
    "tensorflow.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DictDistribution.name": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionStrReprTest": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionStrReprTest.testReprWorksCorrectlyDictDistribution": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "repr",
    "tensorflow_probability.python.distributions.distribution_test.DictDistribution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionStrReprTest.testReprWorksCorrectlyMultivariate": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.ones",
    "numpy.zeros",
    "repr",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionStrReprTest.testReprWorksCorrectlyNamedTupleDistribution": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": [
    "repr",
    "tensorflow_probability.python.distributions.distribution_test.NamedTupleDistribution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionStrReprTest.testReprWorksCorrectlyScalar": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "numpy.float16",
    "numpy.float32",
    "repr",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionStrReprTest.testReprWorksCorrectlyTupleDistribution": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "repr",
    "tensorflow_probability.python.distributions.distribution_test.TupleDistribution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionStrReprTest.testStrWorksCorrectlyDictDistribution": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": [
    "str",
    "tensorflow_probability.python.distributions.distribution_test.DictDistribution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionStrReprTest.testStrWorksCorrectlyMultivariate": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.ones",
    "numpy.zeros",
    "str",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionStrReprTest.testStrWorksCorrectlyNamedTupleDistribution": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": [
    "str",
    "tensorflow_probability.python.distributions.distribution_test.NamedTupleDistribution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionStrReprTest.testStrWorksCorrectlyScalar": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "numpy.float16",
    "numpy.float32",
    "str",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionStrReprTest.testStrWorksCorrectlyTupleDistribution": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": [
    "str",
    "tensorflow_probability.python.distributions.distribution_test.TupleDistribution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest._GetFakeDistribution": {
  "data": {
   "lineno": 385
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest._GetFakeDistribution.FakeDistribution": {
  "data": {
   "lineno": 386,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution_test.tfd"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest._GetFakeDistribution.FakeDistribution.__init__": {
  "data": {
   "lineno": 389,
   "symbols_in_volume": [
    "super",
    "tensorflow.TensorShape",
    "tensorflow.float32",
    "tensorflow_probability.python.distributions.distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest._GetFakeDistribution.FakeDistribution._batch_shape": {
  "data": {
   "lineno": 399
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest._GetFakeDistribution.FakeDistribution._event_shape": {
  "data": {
   "lineno": 402
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest.testCopyExtraArgs": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest.testCopyOverride": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest.testIsScalar": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow.get_static_value",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest.testNameScopeWorksCorrectly": {
  "data": {
   "lineno": 456,
   "symbols_in_volume": [
    "tensorflow.compat.v2.name_scope",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest.testNotIterable": {
  "data": {
   "lineno": 505,
   "symbols_in_volume": [
    "TypeError",
    "list",
    "tensorflow_probability.python.distributions.distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest.testParamShapesAndFromParams": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": [
    "cls",
    "dict",
    "tensorflow.random.normal",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest.testSampleShapeHints": {
  "data": {
   "lineno": 407,
   "symbols_in_volume": [
    "fake_distribution",
    "numpy.float32",
    "numpy.ones",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor",
    "tensorflow.executing_eagerly",
    "tensorflow.int32",
    "tensorflow_probability.python.internal.tensorshape_util.as_list",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest.testUnimplemtnedProbAndLogProbExceptions": {
  "data": {
   "lineno": 481,
   "symbols_in_volume": [
    "NotImplementedError",
    "TerribleDistribution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest.testUnimplemtnedProbAndLogProbExceptions.TerribleDistribution": {
  "data": {
   "lineno": 482,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution_test.tfd"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_test.DistributionTest.testUnimplemtnedProbAndLogProbExceptions.TerribleDistribution.__init__": {
  "data": {
   "lineno": 484,
   "symbols_in_volume": [
    "super",
    "tensorflow.float32",
    "tensorflow_probability.python.distributions.distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.Dummy": {
  "data": {
   "lineno": 514,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution_test.tfd"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_test.Dummy.__init__": {
  "data": {
   "lineno": 517,
   "symbols_in_volume": [
    "super",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow_probability.python.distributions.distribution_test.Dummy",
    "tensorflow_probability.python.distributions.distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.Dummy._mean": {
  "data": {
   "lineno": 525
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.NamedTupleDistribution": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution_test.tfd"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_test.NamedTupleDistribution.MyType": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution_test.collections"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_test.NamedTupleDistribution.__init__": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.distributions.distribution_test.NamedTupleDistribution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.NamedTupleDistribution.batch_shape": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "property",
    "tensorflow.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.NamedTupleDistribution.dtype": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "property",
    "tensorflow.float16",
    "tensorflow.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.NamedTupleDistribution.event_shape": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "property",
    "tensorflow.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.NamedTupleDistribution.name": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ParametersTest": {
  "data": {
   "lineno": 529,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_test.ParametersTest.testNoSelfRefs": {
  "data": {
   "lineno": 538,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_in_graph_and_eager_modes",
    "tensorflow_probability.python.distributions.distribution_test.Dummy"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ParametersTest.testParameters": {
  "data": {
   "lineno": 531,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution_test.Dummy"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ParametersTest.testTfFunction": {
  "data": {
   "lineno": 543,
   "symbols_in_volume": [
    "normal_differential_entropy",
    "numpy.e",
    "numpy.log",
    "numpy.pi",
    "tensorflow.executing_eagerly"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.ParametersTest.testTfFunction.normal_differential_entropy": {
  "data": {
   "lineno": 545,
   "symbols_in_volume": [
    "tensorflow.function",
    "tensorflow_probability.python.distributions.distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.TupleDistribution": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution_test.tfd"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.distribution_test.TupleDistribution.__init__": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.distributions.distribution_test.TupleDistribution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.TupleDistribution.batch_shape": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "property",
    "tensorflow.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.TupleDistribution.dtype": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "property",
    "tensorflow.float16",
    "tensorflow.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.TupleDistribution.event_shape": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "property",
    "tensorflow.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.TupleDistribution.name": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.distribution_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_test.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.distribution_test.tfd": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.distribution_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.empirical": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical.__init__": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.rank",
    "tensorflow_probability.python.distributions.empirical.Empirical",
    "tensorflow_probability.python.internal.assert_util.assert_rank_at_least",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_shape",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._batch_shape": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._batch_shape_tensor": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._cdf": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.reduce_all",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.distributions.empirical._broadcast_event_and_samples",
    "tensorflow_probability.python.internal.dtype_util.is_floating"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._entropy": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.map_fn",
    "tensorflow.compat.v2.reduce_prod",
    "tensorflow.compat.v2.reshape",
    "tensorflow_probability.python.internal.dtype_util.is_floating"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._entropy._get_entropy": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow.python.ops.gen_array_ops.unique_with_counts_v2"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._event_shape": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._event_shape_tensor": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._mean": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "tensorflow.compat.v2.reduce_mean"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._mode": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.gather_nd",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.int64",
    "tensorflow.compat.v2.map_fn",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.reduce_prod",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._mode._get_mode": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "tensorflow.compat.v2.argmax",
    "tensorflow.python.ops.gen_array_ops.unique_with_counts_v2"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._param_shapes": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._params_event_ndims": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._prob": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.equal",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.reduce_all",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.distributions.empirical._broadcast_event_and_samples",
    "tensorflow_probability.python.internal.dtype_util.is_floating"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._sample_n": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.gather",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.random.uniform",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.transpose"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical._stddev": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "tensorflow.compat.v2.expand_dims",
    "tensorflow.compat.v2.reduce_mean",
    "tensorflow.compat.v2.sqrt",
    "tensorflow.compat.v2.square"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical.num_samples": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.Empirical.samples": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.__all__": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.empirical._broadcast_event_and_samples": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.expand_dims",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.rank",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.empirical.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.empirical.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.empirical.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.empirical.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.empirical.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.empirical.gen_array_ops": {
  "data": {
   "shadows": "tensorflow.python.ops.gen_array_ops"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.empirical.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.empirical.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.empirical.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.empirical.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.empirical_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdDynamicShapeTest": {
  "data": {
   "lineno": 691,
   "symbols_in_volume": [
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdStaticShapeTest": {
  "data": {
   "lineno": 686,
   "symbols_in_volume": [
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdTest": {
  "data": {
   "lineno": 495,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdTest.testCdfNoBatch": {
  "data": {
   "lineno": 526,
   "symbols_in_volume": [
    "events",
    "numpy.float32",
    "numpy.log",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.empirical_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdTest.testEntropy": {
  "data": {
   "lineno": 624,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.empirical_test.entropy",
    "tensorflow_probability.python.distributions.empirical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdTest.testLogProbAfterSlice": {
  "data": {
   "lineno": 653,
   "symbols_in_volume": [
    "numpy.random.randn",
    "tensorflow.newaxis",
    "tensorflow_probability.python.distributions.empirical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdTest.testMean": {
  "data": {
   "lineno": 596,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.empirical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdTest.testMode": {
  "data": {
   "lineno": 610,
   "symbols_in_volume": [
    "numpy.int32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.empirical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdTest.testPmfNoBatch": {
  "data": {
   "lineno": 551,
   "symbols_in_volume": [
    "events",
    "numpy.float32",
    "numpy.log",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.empirical_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdTest.testSampleN": {
  "data": {
   "lineno": 576,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow.concat",
    "tensorflow.executing_eagerly",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.empirical_test.random_samples",
    "tensorflow_probability.python.distributions.empirical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdTest.testSamples": {
  "data": {
   "lineno": 498,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.empirical_test.random_samples",
    "tensorflow_probability.python.distributions.empirical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdTest.testShapes": {
  "data": {
   "lineno": 515,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.empirical_test.random_samples",
    "tensorflow_probability.python.distributions.empirical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalNdTest.testVarianceAndStd": {
  "data": {
   "lineno": 638,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.sqrt",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.empirical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarDynamicShapeTest": {
  "data": {
   "lineno": 671,
   "symbols_in_volume": [
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarStaticShapeTest": {
  "data": {
   "lineno": 666,
   "symbols_in_volume": [
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarTest": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarTest.testCdfNoBatch": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "events",
    "numpy.float32",
    "numpy.log",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.empirical_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarTest.testCdfWithBatch": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "events",
    "numpy.float32",
    "numpy.log",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.empirical_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarTest.testEntropy": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.empirical_test.entropy",
    "tensorflow_probability.python.distributions.empirical_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarTest.testMean": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.empirical_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarTest.testMode": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "numpy.int32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.empirical_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarTest.testPmfNoBatch": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "events",
    "numpy.float32",
    "numpy.log",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.empirical_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarTest.testPmfWithBatch": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "events",
    "numpy.float32",
    "numpy.log",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.empirical_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarTest.testSampleN": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow.executing_eagerly",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.empirical_test.random_samples",
    "tensorflow_probability.python.distributions.empirical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarTest.testSamples": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.empirical_test.random_samples",
    "tensorflow_probability.python.distributions.empirical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarTest.testShapes": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.empirical_test.random_samples",
    "tensorflow_probability.python.distributions.empirical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalScalarTest.testVarianceAndStd": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.sqrt",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.empirical_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorDynamicShapeTest": {
  "data": {
   "lineno": 681,
   "symbols_in_volume": [
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorStaticShapeTest": {
  "data": {
   "lineno": 676,
   "symbols_in_volume": [
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorTest": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorTest.testCdfNoBatch": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": [
    "events",
    "numpy.float32",
    "numpy.log",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.empirical_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorTest.testCdfWithBatch": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": [
    "events",
    "numpy.float32",
    "numpy.log",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.empirical_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorTest.testEntropy": {
  "data": {
   "lineno": 455,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.empirical_test.entropy",
    "tensorflow_probability.python.distributions.empirical_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorTest.testMean": {
  "data": {
   "lineno": 419,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.empirical_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorTest.testMode": {
  "data": {
   "lineno": 437,
   "symbols_in_volume": [
    "numpy.int32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.empirical_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorTest.testPmfNoBatch": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": [
    "events",
    "numpy.float32",
    "numpy.log",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.empirical_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorTest.testPmfWithBatch": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": [
    "events",
    "numpy.float32",
    "numpy.log",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.empirical_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorTest.testSampleN": {
  "data": {
   "lineno": 399,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow.concat",
    "tensorflow.executing_eagerly",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.empirical_test.random_samples",
    "tensorflow_probability.python.distributions.empirical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorTest.testSamples": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.empirical_test.random_samples",
    "tensorflow_probability.python.distributions.empirical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorTest.testShapes": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.empirical_test.random_samples",
    "tensorflow_probability.python.distributions.empirical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.EmpiricalVectorTest.testVarianceAndStd": {
  "data": {
   "lineno": 473,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.sqrt",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.empirical_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.empirical_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.empirical_test.entropy": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.log",
    "numpy.sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.empirical_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.empirical_test.random_samples": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "list",
    "numpy.random.uniform"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.empirical_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.empirical_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.empirical_test.tfd": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.empirical_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.empirical_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.exponential": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.exponential.Exponential": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.gamma.Gamma"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.exponential.Exponential.__init__": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.exponential.Exponential",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential.Exponential._log_survival_function": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential.Exponential._param_shapes": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential.Exponential._params_event_ndims": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential.Exponential._sample_n": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "numpy.finfo",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.random.uniform",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential.Exponential.rate": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.exponential.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.exponential.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.exponential.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.exponential.gamma": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.gamma"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.exponential.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.exponential.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.exponential.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.exponential_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.distributions.exponential_test.try_import"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest.testExponentialCDF": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.exponential",
    "tensorflow_probability.python.distributions.exponential.Exponential",
    "tensorflow_probability.python.distributions.exponential.cdf",
    "tensorflow_probability.python.distributions.exponential_test.stats"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest.testExponentialEntropy": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.exponential",
    "tensorflow_probability.python.distributions.exponential.Exponential",
    "tensorflow_probability.python.distributions.exponential.entropy",
    "tensorflow_probability.python.distributions.exponential_test.stats"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest.testExponentialExponentialKL": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "int",
    "len",
    "numpy.arange",
    "numpy.log",
    "tensorflow.reduce_mean",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.distributions.exponential.Exponential",
    "tensorflow_probability.python.distributions.exponential_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest.testExponentialLogPDF": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.exponential",
    "tensorflow_probability.python.distributions.exponential.Exponential",
    "tensorflow_probability.python.distributions.exponential.log_prob",
    "tensorflow_probability.python.distributions.exponential.prob",
    "tensorflow_probability.python.distributions.exponential_test.stats"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest.testExponentialLogPDFBoundary": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.log",
    "tensorflow_probability.python.distributions.exponential",
    "tensorflow_probability.python.distributions.exponential.Exponential",
    "tensorflow_probability.python.distributions.exponential.log_prob"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest.testExponentialLogSurvival": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.exponential",
    "tensorflow_probability.python.distributions.exponential.Exponential",
    "tensorflow_probability.python.distributions.exponential.log_survival_function",
    "tensorflow_probability.python.distributions.exponential_test.stats"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest.testExponentialMean": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.exponential",
    "tensorflow_probability.python.distributions.exponential.Exponential",
    "tensorflow_probability.python.distributions.exponential.mean",
    "tensorflow_probability.python.distributions.exponential_test.stats"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest.testExponentialSample": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "numpy.any",
    "range",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.exponential",
    "tensorflow_probability.python.distributions.exponential.Exponential",
    "tensorflow_probability.python.distributions.exponential.sample",
    "tensorflow_probability.python.distributions.exponential_test.stats",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest.testExponentialSampleMultiDimensional": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "numpy.any",
    "range",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.exponential",
    "tensorflow_probability.python.distributions.exponential.Exponential",
    "tensorflow_probability.python.distributions.exponential.sample",
    "tensorflow_probability.python.distributions.exponential_test.stats",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest.testExponentialVariance": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.exponential",
    "tensorflow_probability.python.distributions.exponential.Exponential",
    "tensorflow_probability.python.distributions.exponential.variance",
    "tensorflow_probability.python.distributions.exponential_test.stats"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential_test.ExponentialTest.testFullyReparameterized": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.distributions.exponential.Exponential"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.exponential_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.exponential_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.exponential_test.exponential_lib": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.exponential"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.exponential_test.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.exponential_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.exponential_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.exponential_test.stats": {
  "data": {
   "lineno": 44
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.exponential_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.exponential_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.exponential_test.tfd": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.exponential_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.exponential_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.exponential_test.try_import": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "ImportError",
    "str",
    "tensorflow.compat.v1.logging.warning",
    "tensorflow_probability.python.distributions.exponential_test.importlib"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.fill_triangular": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util.fill_triangular"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.fill_triangular_inverse": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util.fill_triangular_inverse"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.finite_discrete": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete.__init__": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "_maybe_validate_args",
    "dict",
    "locals",
    "numpy.finfo",
    "super",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.control_dependencies",
    "tensorflow.convert_to_tensor",
    "tensorflow.identity",
    "tensorflow.int32",
    "tensorflow_probability.python.distributions.categorical.Categorical",
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
    "tensorflow_probability.python.internal.dtype_util.is_floating",
    "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._batch_shape": {
  "data": {
   "lineno": 160
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._batch_shape_tensor": {
  "data": {
   "lineno": 157
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._cdf": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.convert_to_tensor",
    "tensorflow.gather",
    "tensorflow.minimum",
    "tensorflow.reshape",
    "tensorflow.searchsorted",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._entropy": {
  "data": {
   "lineno": 184
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._event_shape": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "tensorflow.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._event_shape_tensor": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._is_equal_or_close": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "tensorflow.abs",
    "tensorflow.equal",
    "tensorflow_probability.python.internal.dtype_util.is_integer"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._log_prob": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "numpy.inf",
    "tensorflow.broadcast_to",
    "tensorflow.compat.v1.where",
    "tensorflow.convert_to_tensor",
    "tensorflow.fill",
    "tensorflow.gather",
    "tensorflow.logical_not",
    "tensorflow.maximum",
    "tensorflow.minimum",
    "tensorflow.reshape",
    "tensorflow.searchsorted",
    "tensorflow.size",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_shape",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._mean": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.tensordot",
    "tensorflow_probability.python.internal.distribution_util.embed_check_integer_casting_closed",
    "tensorflow_probability.python.internal.dtype_util.is_integer"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._mode": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": [
    "tensorflow.gather"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._params_event_ndims": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._sample_n": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "tensorflow.gather"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete._variance": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "tensorflow.broadcast_to",
    "tensorflow.cast",
    "tensorflow.expand_dims",
    "tensorflow.math.squared_difference",
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.internal.distribution_util.embed_check_integer_casting_closed",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_shape",
    "tensorflow_probability.python.internal.dtype_util.is_integer"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete.logits": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete.outcomes": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete.probs": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.finite_discrete._maybe_validate_args": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.compat.v1.assert_equal",
    "tensorflow.compat.v1.assert_greater",
    "tensorflow.compat.v1.assert_rank",
    "tensorflow.math.is_strictly_increasing",
    "tensorflow.size",
    "validate_equal_last_dim"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete._maybe_validate_args.validate_equal_last_dim": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.compat.v1.assert_equal",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.finite_discrete.categorical": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.categorical"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.finite_discrete.dist_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.finite_discrete.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.finite_discrete.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.finite_discrete.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.finite_discrete.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.finite_discrete.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.finite_discrete.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.finite_discrete.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarDynamicShapeTest": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": [
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarStaticShapeTest": {
  "data": {
   "lineno": 364,
   "symbols_in_volume": [
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testCDF": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testCDFWithBatchSampleShape": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testCDFWithDifferentAtol": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testCDFWithIntegerOutcomes": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testEntropy": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.log",
    "numpy.sum",
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testMean": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testMode": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testModeWithIntegerOutcomes": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testPMF": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testPMFWithBatchSampleShape": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testPMFWithIntegerOutcomes": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testSample": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "numpy.mean",
    "numpy.std",
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testSampleWithIntegerOutcomes": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "numpy.mean",
    "numpy.std",
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testShape": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteScalarTest.testStddevAndVariance": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteTest": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "object",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteTest._build_tensor": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "numpy.asarray",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteTest._get_shape": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteValidateArgsDynamicShapeTest": {
  "data": {
   "lineno": 359,
   "symbols_in_volume": [
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteValidateArgsTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteValidateArgsStaticShapeTest": {
  "data": {
   "lineno": 354,
   "symbols_in_volume": [
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteValidateArgsTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteValidateArgsTest": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteValidateArgsTest.testInequalLastDimRaises": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "Exception",
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteValidateArgsTest.testOutcomesNotStrictlyIncreasingRaises": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "Exception",
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteValidateArgsTest.testRankOfOutcomesLargerThanOneRaises": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "Exception",
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteValidateArgsTest.testSizeOfOutcomesIsZeroRaises": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "Exception",
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorDynamicShapeTest": {
  "data": {
   "lineno": 379,
   "symbols_in_volume": [
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorStaticShapeTest": {
  "data": {
   "lineno": 374,
   "symbols_in_volume": [
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorTest": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorTest.testCDF": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorTest.testCDFWithBatchSampleShape": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorTest.testEntropy": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.log",
    "numpy.sum",
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorTest.testMean": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorTest.testMode": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorTest.testPMF": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorTest.testPMFWithBatchSampleShape": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorTest.testSample": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": [
    "numpy.mean",
    "numpy.std",
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorTest.testShapes": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "len",
    "list",
    "numpy.random.uniform",
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.FiniteDiscreteVectorTest.testStddevAndVariance": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.finite_discrete.FiniteDiscrete"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.finite_discrete": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.finite_discrete"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.finite_discrete_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma.__init__": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.gamma.Gamma",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._batch_shape": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._batch_shape_tensor": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._cdf": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.igamma"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._entropy": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.digamma",
    "tensorflow.compat.v2.math.lgamma",
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._event_shape": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._event_shape_tensor": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._log_normalization": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.lgamma",
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._log_prob": {
  "data": {
   "lineno": 213
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._log_unnormalized_prob": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.xlogy"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._maybe_assert_valid_sample": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._mean": {
  "data": {
   "lineno": 235
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._mode": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "numpy.nan",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.fill",
    "tensorflow.compat.v2.ones",
    "tensorflow_probability.python.internal.assert_util.assert_less",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._param_shapes": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "dict",
    "staticmethod",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._params_event_ndims": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._sample_n": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "tensorflow.compat.v2.random.gamma",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._stddev": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "tensorflow.compat.v2.sqrt"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma._variance": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "tensorflow.compat.v2.square"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma.concentration": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.Gamma.rate": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.__all__": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.gamma._kl_gamma_gamma": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.digamma",
    "tensorflow.compat.v2.math.lgamma",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.gamma.Gamma",
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma.kullback_leibler": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_gamma": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma.__init__": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma._batch_shape": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_static_shape",
    "tensorflow_probability.python.distributions.gamma_gamma.functools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma._batch_shape_tensor": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.distributions.gamma_gamma.functools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma._event_shape": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma._event_shape_tensor": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma._log_normalization": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.lgamma",
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma._log_prob": {
  "data": {
   "lineno": 211
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma._log_unnormalized_prob": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.math.xlogy"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma._maybe_assert_valid_sample": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma._mean": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": [
    "numpy.nan",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.fill",
    "tensorflow.compat.v2.ones",
    "tensorflow_probability.python.internal.assert_util.assert_less",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma._params_event_ndims": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma._sample_n": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "seed",
    "tensorflow.compat.v2.random.gamma",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma._variance": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": [
    "numpy.nan",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.fill",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.square",
    "tensorflow_probability.python.internal.assert_util.assert_less",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma.concentration": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma.mixing_concentration": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.GammaGamma.mixing_rate": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.__all__": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.seed_stream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_gamma.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.GammaGammaTest": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.GammaGammaTest.testGammaGammaLogPDF": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.gamma_gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.GammaGammaTest.testGammaGammaLogPDFAtZero": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.isfinite",
    "numpy.ones_like",
    "tensorflow_probability.python.distributions.gamma_gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.GammaGammaTest.testGammaGammaLogPDFMultidimensional": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.gamma_gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.GammaGammaTest.testGammaGammaLogPDFMultidimensionalBroadcasting": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.gamma_gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.GammaGammaTest.testGammaGammaMeanAllDefined": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.gamma_gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.GammaGammaTest.testGammaGammaMeanAllowNanStats": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.gamma_gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.GammaGammaTest.testGammaGammaMeanNanStats": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.nan",
    "tensorflow_probability.python.distributions.gamma_gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.GammaGammaTest.testGammaGammaSample": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "tensorflow.compat.v1.Session",
    "tensorflow_probability.python.distributions.gamma_gamma_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.GammaGammaTest.testGammaGammaSampleConcentrationCausesBroadcast": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.gamma_gamma_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.GammaGammaTest.testGammaGammaSampleMultidimensional": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.distributions.gamma_gamma_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.GammaGammaTest.testGammaGammaShape": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.gamma_gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.tfd": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_gamma_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.distributions.gamma_test.try_import"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest._assertIntegral": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": [
    "sorted",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest._kstest": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.gamma_test.stats"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaCDF": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.gamma_test.stats",
    "tensorflow_probability.python.distributions.gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaEntropy": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.gamma_test.stats",
    "tensorflow_probability.python.distributions.gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaFullyReparameterized": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.distributions.gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaGammaKL": {
  "data": {
   "lineno": 355,
   "symbols_in_volume": [
    "int",
    "numpy.array",
    "numpy.log",
    "tensorflow.reduce_mean",
    "tensorflow_probability.python.distributions.gamma_test.special",
    "tensorflow_probability.python.distributions.gamma_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaLogPDF": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.gamma_test.stats",
    "tensorflow_probability.python.distributions.gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaLogPDFBoundary": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.log",
    "tensorflow_probability.python.distributions.gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaLogPDFMultidimensional": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.gamma_test.stats",
    "tensorflow_probability.python.distributions.gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaLogPDFMultidimensionalBroadcasting": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.gamma_test.stats",
    "tensorflow_probability.python.distributions.gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaMean": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.gamma_test.stats",
    "tensorflow_probability.python.distributions.gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaModeAllowNanStatsFalseRaisesForUndefinedBatchMembers": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaModeAllowNanStatsIsFalseWorksWhenAllBatchMembersAreDefined": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaModeAllowNanStatsIsTrueReturnsNaNforUndefinedBatchMembers": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.nan",
    "tensorflow_probability.python.distributions.gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaNonPositiveInitializationParamsRaises": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaPdfOfSampleMultiDims": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.gamma_test.stats",
    "tensorflow_probability.python.distributions.gamma_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaSample": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.gamma_test.stats",
    "tensorflow_probability.python.distributions.gamma_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaSampleMultiDimensional": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "enumerate",
    "numpy.arange",
    "numpy.array",
    "numpy.float32",
    "numpy.reshape",
    "numpy.zeros_like",
    "tensorflow_probability.python.distributions.gamma_test.stats",
    "tensorflow_probability.python.distributions.gamma_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaSampleSmallAlpha": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.gamma_test.stats",
    "tensorflow_probability.python.distributions.gamma_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaShape": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaStd": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.gamma_test.stats",
    "tensorflow_probability.python.distributions.gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.GammaTest.testGammaVariance": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.gamma_test.stats",
    "tensorflow_probability.python.distributions.gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gamma_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_test.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_test.special": {
  "data": {
   "lineno": 42
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.gamma_test.stats": {
  "data": {
   "lineno": 43
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.gamma_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_test.tfd": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.gamma_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gamma_test.try_import": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "ImportError",
    "str",
    "tensorflow.compat.v1.logging.warning",
    "tensorflow_probability.python.distributions.gamma_test.importlib"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess.__init__": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "ValueError",
    "callable",
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._batch_shape": {
  "data": {
   "lineno": 421
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._batch_shape_tensor": {
  "data": {
   "lineno": 418
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._compute_covariance": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": [
    "tensorflow.compat.v2.squeeze",
    "tensorflow_probability.python.distributions.gaussian_process._add_diagonal_shift"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._covariance": {
  "data": {
   "lineno": 465
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._entropy": {
  "data": {
   "lineno": 443
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._event_shape": {
  "data": {
   "lineno": 427
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._event_shape_tensor": {
  "data": {
   "lineno": 424
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._get_index_points": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._is_univariate_marginal": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": [
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow_probability.python.distributions.gaussian_process.warnings"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._log_cdf": {
  "data": {
   "lineno": 440
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._log_prob": {
  "data": {
   "lineno": 415
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._log_survival_function": {
  "data": {
   "lineno": 433
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._mean": {
  "data": {
   "lineno": 446
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._mode": {
  "data": {
   "lineno": 471
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._quantile": {
  "data": {
   "lineno": 449
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._sample_n": {
  "data": {
   "lineno": 430
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._stddev": {
  "data": {
   "lineno": 452,
   "symbols_in_volume": [
    "tensorflow.compat.v2.sqrt"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._survival_function": {
  "data": {
   "lineno": 437
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess._variance": {
  "data": {
   "lineno": 455,
   "symbols_in_volume": [
    "tensorflow.compat.v2.squeeze"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess.get_marginal_distribution": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
    "tensorflow.compat.v2.linalg.cholesky",
    "tensorflow.compat.v2.sqrt",
    "tensorflow.compat.v2.squeeze",
    "tensorflow_probability.python.distributions.gaussian_process._add_diagonal_shift",
    "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator",
    "tensorflow_probability.python.distributions.normal.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess.index_points": {
  "data": {
   "lineno": 376,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess.jitter": {
  "data": {
   "lineno": 384,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess.kernel": {
  "data": {
   "lineno": 372,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess.mean_fn": {
  "data": {
   "lineno": 368,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess.observation_noise_variance": {
  "data": {
   "lineno": 380,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.__all__": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.gaussian_process._add_diagonal_shift": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.linalg.set_diag"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process._assert_kl_compatible": {
  "data": {
   "lineno": 475,
   "symbols_in_volume": [
    "ValueError",
    "isinstance",
    "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator",
    "tensorflow_probability.python.distributions.normal.Normal",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process._kl_compatible_gp": {
  "data": {
   "lineno": 496,
   "symbols_in_volume": [
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.gaussian_process._assert_kl_compatible",
    "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process._kl_gp_compatible": {
  "data": {
   "lineno": 489,
   "symbols_in_volume": [
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.gaussian_process._assert_kl_compatible",
    "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process._kl_gp_mvn": {
  "data": {
   "lineno": 519,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess",
    "tensorflow_probability.python.distributions.gaussian_process._kl_gp_compatible",
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL",
    "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process._kl_gp_normal": {
  "data": {
   "lineno": 503,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess",
    "tensorflow_probability.python.distributions.gaussian_process._kl_gp_compatible",
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL",
    "tensorflow_probability.python.distributions.normal.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process._kl_mvn_gp": {
  "data": {
   "lineno": 553,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess",
    "tensorflow_probability.python.distributions.gaussian_process._kl_compatible_gp",
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL",
    "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process._kl_normal_gp": {
  "data": {
   "lineno": 537,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess",
    "tensorflow_probability.python.distributions.gaussian_process._kl_compatible_gp",
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL",
    "tensorflow_probability.python.distributions.normal.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process.kullback_leibler": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process.mvn_linear_operator": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.mvn_linear_operator"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process.normal": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.normal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model.GaussianProcessRegressionModel": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model.GaussianProcessRegressionModel.__init__": {
  "data": {
   "lineno": 391,
   "symbols_in_volume": [
    "ValueError",
    "_maybe_append",
    "callable",
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.distributions.gaussian_process_regression_model.GaussianProcessRegressionModel",
    "tensorflow_probability.python.distributions.gaussian_process_regression_model._is_empty_observation_data",
    "tensorflow_probability.python.distributions.gaussian_process_regression_model._validate_observation_data",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.positive_semidefinite_kernels.SchurComplement"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model.GaussianProcessRegressionModel.__init__._maybe_append": {
  "data": {
   "lineno": 556
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model.GaussianProcessRegressionModel.__init__.conditional_mean_fn": {
  "data": {
   "lineno": 545,
   "symbols_in_volume": [
    "mean_fn",
    "tensorflow.compat.v2.linalg.LinearOperatorFullMatrix",
    "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model.GaussianProcessRegressionModel.observation_index_points": {
  "data": {
   "lineno": 578,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model.GaussianProcessRegressionModel.observations": {
  "data": {
   "lineno": 582,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model.GaussianProcessRegressionModel.predictive_noise_variance": {
  "data": {
   "lineno": 586,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model._add_diagonal_shift": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.linalg.set_diag"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model._is_empty_observation_data": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "tensorflow.compat.v2.compat.dimension_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model._validate_observation_data": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.compat.v2.broadcast_static_shape",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model.gaussian_process": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.gaussian_process"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model.tfpk": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "numpy.random.seed",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test.GaussianProcessRegressionModelDynamicTest": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.gaussian_process_regression_model_test._GaussianProcessRegressionModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test.GaussianProcessRegressionModelStaticTest": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.gaussian_process_regression_model_test._GaussianProcessRegressionModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test._GaussianProcessRegressionModelTest": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test._GaussianProcessRegressionModelTest.testCopy": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": [
    "mean_fn",
    "numpy.array",
    "numpy.float32",
    "numpy.random.uniform",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow.get_static_value",
    "tensorflow_probability.python.distributions.GaussianProcessRegressionModel",
    "tensorflow_probability.python.positive_semidefinite_kernels.ExpSinSquared",
    "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test._GaussianProcessRegressionModelTest.testEmptyDataMatchesGPPrior": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "mean_fn",
    "numpy.float64",
    "numpy.random.uniform",
    "tensorflow.float64",
    "tensorflow.ones",
    "tensorflow_probability.python.distributions.GaussianProcess",
    "tensorflow_probability.python.distributions.GaussianProcessRegressionModel",
    "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test._GaussianProcessRegressionModelTest.testErrorCases": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "ValueError",
    "numpy.float64",
    "numpy.ones",
    "numpy.random.uniform",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.GaussianProcessRegressionModel",
    "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test._GaussianProcessRegressionModelTest.testMeanVarianceAndCovariance": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "k",
    "mean_fn",
    "numpy.diag",
    "numpy.dot",
    "numpy.eye",
    "numpy.float64",
    "numpy.linalg.solve",
    "numpy.random.uniform",
    "tensorflow_probability.python.distributions.GaussianProcessRegressionModel",
    "tensorflow_probability.python.distributions.gaussian_process_regression_model_test._np_kernel_matrix_fn",
    "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test._GaussianProcessRegressionModelTest.testShapes": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.expand_dims",
    "numpy.float64",
    "numpy.linspace",
    "numpy.meshgrid",
    "numpy.random.uniform",
    "numpy.reshape",
    "numpy.stack",
    "tensorflow.compat.dimension_value",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.GaussianProcessRegressionModel",
    "tensorflow_probability.python.internal.tensorshape_util.dims",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test._np_kernel_matrix_fn": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.expand_dims"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test.psd_kernels": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process_regression_model_test.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test.GaussianProcessDynamicTest": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.gaussian_process_test._GaussianProcessTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test.GaussianProcessStaticTest": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.gaussian_process_test._GaussianProcessTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test._GaussianProcessTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test._GaussianProcessTest.testCopy": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "mean_fn",
    "numpy.array",
    "numpy.float32",
    "numpy.random.uniform",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow.get_static_value",
    "tensorflow_probability.python.distributions.GaussianProcess",
    "tensorflow_probability.python.positive_semidefinite_kernels.ExpSinSquared",
    "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test._GaussianProcessTest.testLateBindingIndexPoints": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "ValueError",
    "_kernel_fn",
    "mean_fn",
    "numpy.diag",
    "numpy.expand_dims",
    "numpy.eye",
    "numpy.float64",
    "numpy.random.uniform",
    "numpy.sqrt",
    "tensorflow_probability.python.distributions.GaussianProcess",
    "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test._GaussianProcessTest.testLateBindingIndexPoints._kernel_fn": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.squeeze"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test._GaussianProcessTest.testMarginalHasCorrectTypes": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.ones",
    "tensorflow_probability.python.distributions.GaussianProcess",
    "tensorflow_probability.python.distributions.MultivariateNormalLinearOperator",
    "tensorflow_probability.python.distributions.Normal",
    "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test._GaussianProcessTest.testMean": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "mean_fn",
    "numpy.expand_dims",
    "numpy.random.uniform",
    "tensorflow_probability.python.distributions.GaussianProcess",
    "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test._GaussianProcessTest.testShapes": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.linspace",
    "numpy.meshgrid",
    "numpy.reshape",
    "numpy.stack",
    "tensorflow.compat.dimension_value",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.GaussianProcess",
    "tensorflow_probability.python.internal.tensorshape_util.dims",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test._GaussianProcessTest.testVarianceAndCovarianceMatrix": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "_kernel_fn",
    "numpy.diag",
    "numpy.expand_dims",
    "numpy.eye",
    "numpy.float64",
    "numpy.random.uniform",
    "tensorflow_probability.python.distributions.GaussianProcess",
    "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test._GaussianProcessTest.testVarianceAndCovarianceMatrix._kernel_fn": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.squeeze"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test.psd_kernels": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gaussian_process_test.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.geometric": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric.__init__": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.geometric.Geometric",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs",
    "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._batch_shape": {
  "data": {
   "lineno": 119
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._batch_shape_tensor": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._cdf": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.floor",
    "tensorflow.compat.v2.math.expm1",
    "tensorflow.compat.v2.math.log1p",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.internal.distribution_util.embed_check_nonnegative_integer_form"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._entropy": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.nn.softplus",
    "tensorflow_probability.python.internal.assert_util.assert_less",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._event_shape": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._event_shape_tensor": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._log_prob": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.equal",
    "tensorflow.compat.v2.floor",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.math.log1p",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.internal.distribution_util.embed_check_nonnegative_integer_form"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._mean": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "tensorflow.compat.v2.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._mode": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": [
    "tensorflow.compat.v2.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._params_event_ndims": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._sample_n": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "numpy.finfo",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.floor",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.math.log1p",
    "tensorflow.compat.v2.random.uniform",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric._variance": {
  "data": {
   "lineno": 201
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric.logits": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.Geometric.probs": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.geometric.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.geometric.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.geometric.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.geometric.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.geometric.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.geometric.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.geometric.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.geometric.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.geometric.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.geometric.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.geometric_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testGeomLogPmf": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "scipy.stats.geom.logpmf",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.geometric_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testGeometricAtBoundary": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "numpy.isnan",
    "scipy.stats.geom.logcdf",
    "scipy.stats.geom.logpmf",
    "scipy.stats.geom.mean",
    "scipy.stats.geom.var",
    "tensorflow_probability.python.distributions.geometric_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testGeometricCDF": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "scipy.stats.geom.cdf",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.geometric_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testGeometricEntropy": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "scipy.stats.geom.entropy",
    "tensorflow_probability.python.distributions.geometric_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testGeometricLogPmfMultidimensional": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "scipy.stats.geom.logpmf",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.geometric_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testGeometricLogPmf_validate_args": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.geometric_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testGeometricMean": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "numpy.array",
    "scipy.stats.geom.mean",
    "tensorflow_probability.python.distributions.geometric_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testGeometricMode": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.geometric_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testGeometricSample": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "numpy.any",
    "range",
    "scipy.stats.geom.mean",
    "scipy.stats.geom.var",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.geometric_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testGeometricSampleMultiDimensional": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "numpy.any",
    "range",
    "scipy.stats.geom.mean",
    "scipy.stats.geom.var",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.geometric_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testGeometricShape": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.geometric_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testGeometricStddev": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "numpy.array",
    "scipy.stats.geom.std",
    "tensorflow_probability.python.distributions.geometric_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testGeometricVariance": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "numpy.array",
    "scipy.stats.geom.var",
    "tensorflow_probability.python.distributions.geometric_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.GeometricTest.testInvalidP": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.geometric_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.geometric_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.geometric_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.geometric_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.geometric_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.geometric_test.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.geometric_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.geometric_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.geometric_test.tfd": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.geometric_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.geometric_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gumbel": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.gumbel.Gumbel": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gumbel.Gumbel.__init__": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "dict",
    "locals",
    "numpy.finfo",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.ones",
    "tensorflow_probability.python.bijectors.gumbel.Gumbel",
    "tensorflow_probability.python.bijectors.invert.Invert",
    "tensorflow_probability.python.distributions.gumbel.Gumbel",
    "tensorflow_probability.python.distributions.uniform.Uniform",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.distribution_util.get_broadcast_shape",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
    "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel.Gumbel._entropy": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "numpy.euler_gamma",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel.Gumbel._log_prob": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel.Gumbel._mean": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "numpy.euler_gamma"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel.Gumbel._mode": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "tensorflow.compat.v2.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel.Gumbel._param_shapes": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "dict",
    "staticmethod",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel.Gumbel._params_event_ndims": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel.Gumbel._stddev": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "numpy.pi",
    "numpy.sqrt",
    "tensorflow.compat.v2.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel.Gumbel.loc": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel.Gumbel.scale": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel._kl_gumbel_gumbel": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "numpy.euler_gamma",
    "tensorflow.compat.v2.math.expm1",
    "tensorflow.compat.v2.math.lgamma",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.gumbel.Gumbel",
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gumbel.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gumbel.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gumbel.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gumbel.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gumbel.gumbel_bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.gumbel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gumbel.invert_bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.invert"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gumbel.kullback_leibler": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gumbel.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gumbel.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gumbel.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gumbel.transformed_distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.transformed_distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gumbel.uniform": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.uniform"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gumbel_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.gumbel_test.GumbelTestDynamicShape": {
  "data": {
   "lineno": 301,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.distributions.gumbel_test._GumbelTest",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gumbel_test.GumbelTestFloat64StaticShape": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.distributions.gumbel_test._GumbelTest",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gumbel_test.GumbelTestStaticShape": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.distributions.gumbel_test._GumbelTest",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.make_tensor": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testGumbelCDF": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "numpy.array",
    "scipy.stats.gumbel_r.cdf",
    "scipy.stats.gumbel_r.logcdf",
    "tensorflow_probability.python.distributions.gumbel_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testGumbelCdfMultidimensional": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "numpy.array",
    "scipy.stats.gumbel_r.cdf",
    "scipy.stats.gumbel_r.logcdf",
    "tensorflow_probability.python.distributions.gumbel_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testGumbelGumbelKL": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": [
    "int",
    "len",
    "numpy.arange",
    "numpy.euler_gamma",
    "numpy.expm1",
    "numpy.log",
    "numpy.math.lgamma",
    "numpy.vectorize",
    "tensorflow.abs",
    "tensorflow.minimum",
    "tensorflow.reduce_any",
    "tensorflow.reduce_mean",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.distributions.gumbel_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testGumbelLogPdf": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "numpy.array",
    "scipy.stats.gumbel_r.logpdf",
    "scipy.stats.gumbel_r.pdf",
    "tensorflow_probability.python.distributions.gumbel_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testGumbelLogPdfMultidimensional": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "numpy.array",
    "scipy.stats.gumbel_r.logpdf",
    "scipy.stats.gumbel_r.pdf",
    "tensorflow_probability.python.distributions.gumbel_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testGumbelMean": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "numpy.array",
    "scipy.stats.gumbel_r.mean",
    "tensorflow_probability.python.distributions.gumbel_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testGumbelMode": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.gumbel_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testGumbelSample": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "int",
    "scipy.stats.gumbel_r.mean",
    "scipy.stats.gumbel_r.var",
    "tensorflow_probability.python.distributions.gumbel_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testGumbelSampleMultidimensionalMean": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "int",
    "numpy.array",
    "scipy.stats.gumbel_r.mean",
    "tensorflow_probability.python.distributions.gumbel_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testGumbelSampleMultidimensionalVar": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "int",
    "numpy.array",
    "scipy.stats.gumbel_r.var",
    "tensorflow_probability.python.distributions.gumbel_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testGumbelShape": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.gumbel_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testGumbelStd": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "numpy.array",
    "scipy.stats.gumbel_r.std",
    "tensorflow_probability.python.distributions.gumbel_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testGumbelVariance": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "numpy.array",
    "scipy.stats.gumbel_r.var",
    "tensorflow_probability.python.distributions.gumbel_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test._GumbelTest.testInvalidScale": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.gumbel_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.gumbel_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gumbel_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gumbel_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gumbel_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gumbel_test.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gumbel_test.test_case": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_case"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gumbel_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gumbel_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gumbel_test.tfd": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.gumbel_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.gumbel_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_cauchy": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy.__init__": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._batch_shape": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._batch_shape_tensor": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._entropy": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.pi",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._event_shape": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._event_shape_tensor": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._extend_support_with_default_value": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "f",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.fill",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._inv_z": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "tensorflow.compat.v2.name_scope"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._log_cdf": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "numpy.inf",
    "numpy.log",
    "numpy.pi",
    "tensorflow.compat.v2.atan",
    "tensorflow.compat.v2.math.log",
    "tensorflow_probability.python.distributions.half_cauchy.check_arg_in_support"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._log_prob": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "numpy.inf",
    "tensorflow_probability.python.distributions.half_cauchy.check_arg_in_support"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._log_prob.log_prob_on_support": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.pi",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.math.log1p"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._mean": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "ValueError",
    "numpy.nan",
    "tensorflow.compat.v2.fill",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._mode": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "tensorflow.compat.v2.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._param_shapes": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "dict",
    "staticmethod",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._params_event_ndims": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._quantile": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": [
    "numpy.pi",
    "tensorflow.compat.v2.tan"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._sample_n": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.random.uniform"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._stddev": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "ValueError",
    "numpy.nan",
    "tensorflow.compat.v2.fill",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._variance": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "ValueError",
    "numpy.nan",
    "tensorflow.compat.v2.fill",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy._z": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "tensorflow.compat.v2.name_scope"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy.loc": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy.scale": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.__all__": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.half_cauchy.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_cauchy.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_cauchy.check_arg_in_support": {
  "data": {
   "lineno": 37
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.check_arg_in_support._check_arg_and_apply_f": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "f",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow_probability.python.distributions.half_cauchy.functools",
    "tensorflow_probability.python.internal.assert_util.assert_greater_equal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_cauchy.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_cauchy.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_cauchy.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_cauchy.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_cauchy.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_cauchy.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_cauchy.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_cauchy.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test.HalfCauchyTestDynamicShapeFloat32": {
  "data": {
   "lineno": 501,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test.HalfCauchyTestDynamicShapeFloat64": {
  "data": {
   "lineno": 513,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test.HalfCauchyTestStaticShapeFloat32": {
  "data": {
   "lineno": 495,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test.HalfCauchyTestStaticShapeFloat64": {
  "data": {
   "lineno": 507,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest._create_placeholder_with_default": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest._test_param_shapes": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "tensorflow.ones",
    "tensorflow.shape",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.half_cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest._test_param_static_shapes": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.half_cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyCdf": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "scipy.stats.halfcauchy.cdf",
    "scipy.stats.halfcauchy.logcdf",
    "scipy_f",
    "tensorflow.TensorShape",
    "tensorflow.executing_eagerly",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.half_cauchy_test.tfd",
    "tfp_f"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyCdfBroadcast": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "scipy.stats.halfcauchy.cdf",
    "scipy.stats.halfcauchy.logcdf",
    "scipy_f",
    "tensorflow.TensorShape",
    "tensorflow.executing_eagerly",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.half_cauchy_test.tfd",
    "tfp_f"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyCdfGradientZeroOutsideSupport": {
  "data": {
   "lineno": 429,
   "symbols_in_volume": [
    "numpy.zeros_like",
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.distributions.half_cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyCdfMultidimensional": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "scipy.stats.halfcauchy.cdf",
    "scipy.stats.halfcauchy.logcdf",
    "scipy_f",
    "tensorflow.TensorShape",
    "tensorflow.executing_eagerly",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.half_cauchy_test.tfd",
    "tfp_f"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyCdfValidateArgs": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "f",
    "tensorflow_probability.python.distributions.half_cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyEntropy": {
  "data": {
   "lineno": 319,
   "symbols_in_volume": [
    "scipy.stats.halfcauchy.entropy",
    "tensorflow.TensorShape",
    "tensorflow.executing_eagerly",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.half_cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyGradientsFiniteAtGreaterThanLoc": {
  "data": {
   "lineno": 467,
   "symbols_in_volume": [
    "get_half_cauchy_func",
    "numpy.linspace",
    "tensorflow_probability.math.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyGradientsFiniteAtGreaterThanLoc.get_half_cauchy_func": {
  "data": {
   "lineno": 474
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyGradientsFiniteAtGreaterThanLoc.get_half_cauchy_func.half_cauchy_func": {
  "data": {
   "lineno": 475,
   "symbols_in_volume": [
    "getattr",
    "tensorflow_probability.python.distributions.half_cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyGradientsFiniteAtLoc": {
  "data": {
   "lineno": 448,
   "symbols_in_volume": [
    "numpy.linspace",
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.distributions.half_cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyInvalidScale": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.half_cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyMean": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.distributions.half_cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyParamShapes": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "tensorflow.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyParamStaticShapes": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "tensorflow.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyPdf": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "scipy.stats.halfcauchy.logpdf",
    "scipy.stats.halfcauchy.pdf",
    "scipy_f",
    "tensorflow.TensorShape",
    "tensorflow.executing_eagerly",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.half_cauchy_test.tfd",
    "tfp_f"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyPdfBroadcast": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "scipy.stats.halfcauchy.logpdf",
    "scipy.stats.halfcauchy.pdf",
    "scipy_f",
    "tensorflow.TensorShape",
    "tensorflow.executing_eagerly",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.half_cauchy_test.tfd",
    "tfp_f"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyPdfGradientZeroOutsideSupport": {
  "data": {
   "lineno": 410,
   "symbols_in_volume": [
    "numpy.zeros_like",
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.distributions.half_cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyPdfMultidimensional": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "scipy.stats.halfcauchy.logpdf",
    "scipy.stats.halfcauchy.pdf",
    "scipy_f",
    "tensorflow.TensorShape",
    "tensorflow.executing_eagerly",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.half_cauchy_test.tfd",
    "tfp_f"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyPdfValidateArgs": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "f",
    "tensorflow_probability.python.distributions.half_cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyQuantile": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": [
    "numpy.linspace",
    "scipy.stats.halfcauchy.ppf",
    "tensorflow.TensorShape",
    "tensorflow.executing_eagerly",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.half_cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchySampleMedian": {
  "data": {
   "lineno": 359,
   "symbols_in_volume": [
    "int",
    "numpy.median",
    "scipy.stats.halfcauchy.median",
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.half_cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchySampleMultidimensionalMedian": {
  "data": {
   "lineno": 382,
   "symbols_in_volume": [
    "int",
    "numpy.median",
    "scipy.stats.halfcauchy.median",
    "tensorflow.TensorShape",
    "tensorflow.convert_to_tensor",
    "tensorflow.int32",
    "tensorflow_probability.python.distributions.half_cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyShape": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.half_cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyShapeBroadcast": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.half_cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyStddev": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.distributions.half_cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test._HalfCauchyTest.testHalfCauchyVariance": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.distributions.half_cauchy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test.test_case": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_case"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test.tfd": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.half_cauchy_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_normal": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal.__init__": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.half_normal.HalfNormal",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._batch_shape": {
  "data": {
   "lineno": 139
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._batch_shape_tensor": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._cdf": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "numpy.sqrt",
    "tensorflow.compat.v2.math.erf",
    "tensorflow.compat.v2.nn.relu"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._entropy": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "numpy.pi",
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._event_shape": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._event_shape_tensor": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._mean": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "numpy.pi",
    "numpy.sqrt"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._mode": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "tensorflow.compat.v2.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._param_shapes": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._params_event_ndims": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._prob": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "numpy.pi",
    "numpy.sqrt",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._quantile": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "numpy.sqrt",
    "tensorflow_probability.python.internal.special_math.erfinv"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._sample_n": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.random.normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal._variance": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "numpy.pi"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.HalfNormal.scale": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.__all__": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.half_normal._kl_half_normal_half_normal": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.half_normal.HalfNormal",
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_normal.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_normal.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_normal.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_normal.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_normal.kullback_leibler": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_normal.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_normal.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_normal.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_normal.special_math": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.special_math"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_normal.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_normal_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.distributions.half_normal_test.try_import"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest._testBatchShapes": {
  "data": {
   "lineno": 70
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest._testParamShapes": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "tensorflow.ones",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.half_normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest._testParamStaticShapes": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.half_normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.assertAllFinite": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.isfinite",
    "numpy.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.setUp": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testFiniteGradients": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "dtype",
    "half_normal_function",
    "numpy.array",
    "numpy.float32",
    "numpy.float64",
    "print",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow_probability.math.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testFiniteGradients.half_normal_function": {
  "data": {
   "lineno": 177
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testFiniteGradients.half_normal_function.half_normal": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "getattr",
    "tensorflow_probability.python.distributions.half_normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalCDF": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.float64",
    "numpy.linspace",
    "tensorflow_probability.python.distributions.half_normal_test.stats",
    "tensorflow_probability.python.distributions.half_normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalEntropy": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.log",
    "numpy.pi",
    "tensorflow_probability.python.distributions.half_normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalHalfNormalKL": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": [
    "int",
    "len",
    "numpy.arange",
    "numpy.log",
    "tensorflow.reduce_mean",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.distributions.half_normal_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalLogPDF": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.half_normal_test.stats",
    "tensorflow_probability.python.distributions.half_normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalLogPDFMultidimensional": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.half_normal_test.stats",
    "tensorflow_probability.python.distributions.half_normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalMeanAndMode": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.pi",
    "numpy.sqrt",
    "tensorflow_probability.python.distributions.half_normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalQuantile": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.linspace",
    "tensorflow_probability.python.distributions.half_normal_test.stats",
    "tensorflow_probability.python.distributions.half_normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalSample": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "numpy.pi",
    "numpy.sqrt",
    "tensorflow.TensorShape",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.half_normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalSampleMultiDimensional": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": [
    "numpy.pi",
    "numpy.sqrt",
    "tensorflow.TensorShape",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.half_normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalShape": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.half_normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalShapeWithPlaceholders": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.half_normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalStandardDeviation": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.pi",
    "numpy.sqrt",
    "tensorflow_probability.python.distributions.half_normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalSurvivalFunction": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.float64",
    "numpy.linspace",
    "tensorflow_probability.python.distributions.half_normal_test.stats",
    "tensorflow_probability.python.distributions.half_normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testHalfNormalVariance": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.pi",
    "tensorflow_probability.python.distributions.half_normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testNegativeSigmaFails": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.half_normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testParamShapes": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "tensorflow.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.HalfNormalTest.testParamStaticShapes": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "tensorflow.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.half_normal_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_normal_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_normal_test.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_normal_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_normal_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_normal_test.stats": {
  "data": {
   "lineno": 41
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.half_normal_test.test_case": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_case"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_normal_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_normal_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_normal_test.tfd": {
  "data": {
   "lineno": 43
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.half_normal_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_normal_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.half_normal_test.try_import": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "ImportError",
    "str",
    "tensorflow.compat.v1.logging.warning",
    "tensorflow_probability.python.distributions.half_normal_test.importlib"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel.__init__": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "ValueError",
    "_extract_log_probs",
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.TensorShape",
    "tensorflow.compat.v2.broadcast_static_shape",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.is_tensor",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.size",
    "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.assert_util.assert_greater",
    "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._batch_shape": {
  "data": {
   "lineno": 294
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._batch_shape_tensor": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.control_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._event_shape": {
  "data": {
   "lineno": 303
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._event_shape_tensor": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.control_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._log_prob": {
  "data": {
   "lineno": 439,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.broadcast_to",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.foldl",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.reduce_logsumexp",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.distribution_util.move_dimension"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._log_prob.forward_step": {
  "data": {
   "lineno": 478,
   "symbols_in_volume": [
    "_log_vector_matrix"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._marginal_hidden_probs": {
  "data": {
   "lineno": 490,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_to",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.scan",
    "tensorflow.compat.v2.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._marginal_hidden_probs.forward_step": {
  "data": {
   "lineno": 502,
   "symbols_in_volume": [
    "_log_vector_matrix"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._mean": {
  "data": {
   "lineno": 520,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_to",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.einsum",
    "tensorflow.compat.v2.reduce_prod",
    "tensorflow.compat.v2.reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._observation_log_probs": {
  "data": {
   "lineno": 633,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.broadcast_to",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.expand_dims",
    "tensorflow.compat.v2.rank",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.internal.distribution_util.move_dimension"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._observation_mask_shape_preconditions": {
  "data": {
   "lineno": 616,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow_probability.python.internal.assert_util.assert_equal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._sample_n": {
  "data": {
   "lineno": 326,
   "symbols_in_volume": [
    "seed",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.one_hot",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.reduce_prod",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.scan",
    "tensorflow.compat.v2.size",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream",
    "tensorflow_probability.python.internal.distribution_util.move_dimension"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._sample_n.generate_step": {
  "data": {
   "lineno": 355,
   "symbols_in_volume": [
    "seed",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.one_hot",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow.compat.v2.reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel._variance": {
  "data": {
   "lineno": 558,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_to",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.einsum",
    "tensorflow.compat.v2.reduce_prod",
    "tensorflow.compat.v2.reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel.initial_distribution": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel.num_states": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel.num_steps": {
  "data": {
   "lineno": 318,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel.observation_distribution": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel.posterior_marginals": {
  "data": {
   "lineno": 712,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.reduce_logsumexp",
    "tensorflow.compat.v2.scan",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.distributions.categorical.Categorical",
    "tensorflow_probability.python.internal.distribution_util.move_dimension"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel.posterior_marginals.backward_step": {
  "data": {
   "lineno": 792,
   "symbols_in_volume": [
    "_log_matrix_vector"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel.posterior_marginals.forward_step": {
  "data": {
   "lineno": 776,
   "symbols_in_volume": [
    "_log_vector_matrix"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel.posterior_mode": {
  "data": {
   "lineno": 817,
   "symbols_in_volume": [
    "tensorflow.compat.v2.argmax",
    "tensorflow.compat.v2.bool",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int64",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.scan",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.internal.distribution_util.move_dimension"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel.posterior_mode.backward_step": {
  "data": {
   "lineno": 954,
   "symbols_in_volume": [
    "tensorflow.compat.v2.int64",
    "tensorflow.compat.v2.one_hot",
    "tensorflow.compat.v2.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel.posterior_mode.forward_step": {
  "data": {
   "lineno": 929,
   "symbols_in_volume": [
    "tensorflow.compat.v2.argmax",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.reduce_max"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.HiddenMarkovModel.transition_distribution": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.__all__": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model._extract_log_probs": {
  "data": {
   "lineno": 990,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.reshape",
    "tensorflow_probability.python.internal.distribution_util.move_dimension"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model._log_matrix_vector": {
  "data": {
   "lineno": 978,
   "symbols_in_volume": [
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.reduce_logsumexp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model._log_vector_matrix": {
  "data": {
   "lineno": 972,
   "symbols_in_volume": [
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.reduce_logsumexp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model._vector_matrix": {
  "data": {
   "lineno": 984,
   "symbols_in_volume": [
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.categorical": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.categorical"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.seed_stream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test.HiddenMarkovModelTestFloat32": {
  "data": {
   "lineno": 872,
   "symbols_in_volume": [
    "tensorflow.float32",
    "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test.HiddenMarkovModelTestFloat64": {
  "data": {
   "lineno": 876,
   "symbols_in_volume": [
    "tensorflow.float64",
    "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.internal.test_util.DiscreteScalarDistributionTestHelpers",
    "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.make_placeholders": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_batch_mean_shape": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.hidden_markov_model_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_broadcast_initial_probs": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.hidden_markov_model_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_broadcast_observations": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.hidden_markov_model_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_broadcast_transitions": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.hidden_markov_model_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_coin_toss_batch": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": [
    "numpy.log",
    "tensorflow.broadcast_to",
    "tensorflow.constant",
    "tensorflow.int32",
    "tensorflow.ones",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.hidden_markov_model_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_coin_tosses": {
  "data": {
   "lineno": 261,
   "symbols_in_volume": [
    "numpy.log",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.hidden_markov_model_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_consistency": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.hidden_markov_model_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_edge_case_log_prob_no_transitions": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "numpy.log",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.hidden_markov_model_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_edge_case_mean_no_transitions": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.hidden_markov_model_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_edge_case_sample_n_no_transitions": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.hidden_markov_model_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_mean_and_variance": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.hidden_markov_model_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_non_agreeing_states": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "Exception",
    "str",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.hidden_markov_model_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_non_scalar_transition_batch": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "Exception",
    "str",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.hidden_markov_model_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_marginals_edge_case_no_transitions": {
  "data": {
   "lineno": 833,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.hidden_markov_model_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_marginals_high_rank": {
  "data": {
   "lineno": 399,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "increase_rank",
    "max",
    "tensorflow.constant",
    "tensorflow.eye",
    "tensorflow.identity",
    "tensorflow_probability.bijectors.Reshape",
    "tensorflow_probability.distributions.TransformedDistribution",
    "tensorflow_probability.python.distributions.hidden_markov_model_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_marginals_high_rank.increase_rank": {
  "data": {
   "lineno": 404,
   "symbols_in_volume": [
    "range"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_marginals_missing_observations": {
  "data": {
   "lineno": 771,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.eye",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.hidden_markov_model_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_mode_basic_example": {
  "data": {
   "lineno": 469,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.hidden_markov_model_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_mode_edge_case_no_transitions": {
  "data": {
   "lineno": 803,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.hidden_markov_model_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_mode_high_rank": {
  "data": {
   "lineno": 503,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "increase_rank",
    "max",
    "tensorflow.constant",
    "tensorflow_probability.bijectors.Reshape",
    "tensorflow_probability.distributions.TransformedDistribution",
    "tensorflow_probability.python.distributions.hidden_markov_model_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_mode_high_rank.increase_rank": {
  "data": {
   "lineno": 508,
   "symbols_in_volume": [
    "range"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_mode_high_rank_batch": {
  "data": {
   "lineno": 569,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.hidden_markov_model_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_mode_invariance_observations": {
  "data": {
   "lineno": 599,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.random.permutation",
    "range",
    "tensorflow.argsort",
    "tensorflow.compat.v1.batch_gather",
    "tensorflow.constant",
    "tensorflow.expand_dims",
    "tensorflow.gather",
    "tensorflow.identity",
    "tensorflow.transpose",
    "tensorflow_probability.python.distributions.hidden_markov_model_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_mode_invariance_states": {
  "data": {
   "lineno": 642,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.random.permutation",
    "range",
    "tensorflow.argsort",
    "tensorflow.compat.v1.batch_gather",
    "tensorflow.constant",
    "tensorflow.expand_dims",
    "tensorflow.gather",
    "tensorflow.identity",
    "tensorflow.transpose",
    "tensorflow_probability.python.distributions.hidden_markov_model_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_mode_missing_continuous_observations": {
  "data": {
   "lineno": 694,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.hidden_markov_model_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_mode_missing_discrete_observations": {
  "data": {
   "lineno": 728,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.diag",
    "numpy.ones",
    "observation_fn",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.hidden_markov_model_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_posterior_mode_missing_discrete_observations.observation_fn": {
  "data": {
   "lineno": 742,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.diag",
    "numpy.ones"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test._HiddenMarkovModelTest.test_single_sequence_posterior_marginals": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": [
    "numpy.block",
    "numpy.eye",
    "numpy.ones",
    "numpy.sum",
    "numpy.zeros",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.hidden_markov_model_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test.tfd": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.hidden_markov_model_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.horseshoe": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe.__init__": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.distributions.half_cauchy.HalfCauchy",
    "tensorflow_probability.python.distributions.horseshoe.Horseshoe",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe._batch_shape": {
  "data": {
   "lineno": 178
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe._batch_shape_tensor": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe._event_shape": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe._event_shape_tensor": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe._log_prob": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.pi",
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.math.log1p"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe._mean": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "tensorflow.compat.v2.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe._mode": {
  "data": {
   "lineno": 213
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe._param_shapes": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe._params_event_ndims": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe._sample_n": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "seed",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.random.normal",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe._stddev": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "ValueError",
    "numpy.nan",
    "tensorflow.compat.v2.fill",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe._variance": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "ValueError",
    "numpy.nan",
    "tensorflow.compat.v2.fill",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.Horseshoe.scale": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe.SeedStream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream.SeedStream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.horseshoe.__all__": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.horseshoe.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.horseshoe.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.horseshoe.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.horseshoe.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.horseshoe.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.horseshoe.half_cauchy": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.half_cauchy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.horseshoe.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.horseshoe.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.horseshoe.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.horseshoe.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.horseshoe_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.horseshoe_test.HorseshoeTestDynamicShapeFloat32": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.horseshoe_test.HorseshoeTestDynamicShapeFloat64": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.horseshoe_test.HorseshoeTestStaticShapeFloat32": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.horseshoe_test.HorseshoeTestStaticShapeFloat64": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "object",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest._scale_mle": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "tensorflow.argmax",
    "tensorflow.concat",
    "tensorflow.one_hot",
    "tensorflow.reduce_sum",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.horseshoe_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest._test_batch_shapes": {
  "data": {
   "lineno": 49
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest._test_param": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "isinstance",
    "numpy.array",
    "numpy.ndarray",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest._test_param_shapes": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "numpy.ones",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.horseshoe_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest._test_param_static_shapes": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.horseshoe_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest.testHorseshoeLogPDFGradient": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "numpy.linspace",
    "numpy.pi",
    "numpy.sqrt",
    "tensorflow.exp",
    "tensorflow.math.log",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.distributions.horseshoe_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest.testHorseshoeLogPDFWithBounds": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "numpy.logspace",
    "numpy.pi",
    "numpy.sqrt",
    "tensorflow.math.log",
    "tensorflow.math.log1p",
    "tensorflow_probability.python.distributions.horseshoe_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest.testHorseshoeLogPDFWithMonteCarlo": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "int",
    "numpy.linspace",
    "numpy.zeros",
    "print",
    "tensorflow.reshape",
    "tensorflow_probability.python.distributions.horseshoe_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest.testHorseshoeMeanAndMode": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.horseshoe_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest.testHorseshoeSample": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "numpy.linspace",
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.horseshoe_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest.testHorseshoeSampleMultiDimensional": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "numpy.linspace",
    "tensorflow.TensorShape",
    "tensorflow.ones_like",
    "tensorflow.stack",
    "tensorflow_probability.python.distributions.horseshoe_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest.testHorseshoeShape": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.horseshoe_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest.testNegativeScaleFails": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.horseshoe_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test._HorseshoeTest.testParamShapes": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.horseshoe_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.horseshoe_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.horseshoe_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.horseshoe_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.horseshoe_test.test_case": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_case"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.horseshoe_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.horseshoe_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.horseshoe_test.tfd": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.horseshoe_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.horseshoe_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.independent": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.independent.Independent": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.independent.Independent.__getitem__": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "Ellipsis",
    "NotImplementedError",
    "int",
    "isinstance",
    "slice",
    "super",
    "tensorflow_probability.python.distributions.independent.Independent",
    "tensorflow_probability.python.distributions.independent.collections",
    "tuple",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent.__init__": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.distribution",
    "tensorflow_probability.python.distributions.distribution._graph_parents",
    "tensorflow_probability.python.distributions.distribution.name",
    "tensorflow_probability.python.distributions.independent.Independent"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._batch_shape": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._batch_shape_tensor": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow_probability.python.internal.prefer_static.rank_from_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._entropy": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._event_shape": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "int",
    "tensorflow.compat.v2.TensorShape",
    "tensorflow_probability.python.internal.tensorshape_util.concatenate",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._event_shape_tensor": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow_probability.python.internal.prefer_static.concat",
    "tensorflow_probability.python.internal.prefer_static.rank_from_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._get_default_reinterpreted_batch_ndims": {
  "data": {
   "lineno": 271,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.batch_shape",
    "tensorflow_probability.python.distributions.distribution.batch_shape_tensor",
    "tensorflow_probability.python.internal.prefer_static.maximum",
    "tensorflow_probability.python.internal.prefer_static.rank_from_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._log_cdf": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._log_prob": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._make_runtime_assertions": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow_probability.python.distributions.distribution.batch_shape",
    "tensorflow_probability.python.distributions.distribution.batch_shape_tensor",
    "tensorflow_probability.python.internal.assert_util.assert_less_equal",
    "tensorflow_probability.python.internal.prefer_static.rank_from_shape",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._mean": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._mode": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._reduce": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "op",
    "tensorflow_probability.python.internal.prefer_static.range"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._sample_n": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._stddev": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent._variance": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent.distribution": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.Independent.reinterpreted_batch_ndims": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent._kl_independent": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": [
    "NotImplementedError",
    "ValueError",
    "range",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.distributions.independent.Independent",
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL",
    "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.prefer_static.range",
    "tensorflow_probability.python.internal.prefer_static.rank_from_shape",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.independent.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.independent.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.independent.distribution_lib": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.independent.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.independent.kullback_leibler": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.independent.prefer_static": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.prefer_static"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.independent.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.independent.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.independent.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.independent_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.distributions.independent_test.try_import"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest._testMnistLike": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "expected_log_prob",
    "numpy.float32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.independent_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest._testMnistLike.expected_log_prob": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.log1p"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.setUp": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testCdfMultivariate": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "numpy.log",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.independent_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testKLIdentity": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow_probability.python.distributions.independent_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testKLMultivariateToMultivariate": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.distributions.independent_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testKLRaises": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "NotImplementedError",
    "ValueError",
    "numpy.float32",
    "tensorflow_probability.python.distributions.independent_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testKLScalarToMultivariate": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.distributions.independent_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testMnistLikeDynamicShape": {
  "data": {
   "lineno": 290
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testMnistLikeStaticShape": {
  "data": {
   "lineno": 287
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testSampleAndLogProbMultivariate": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow_probability.python.distributions.independent_test.stats",
    "tensorflow_probability.python.distributions.independent_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testSampleAndLogProbUnivariate": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow_probability.python.distributions.independent_test.stats",
    "tensorflow_probability.python.distributions.independent_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testSampleConsistentStats": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "int",
    "numpy.float32",
    "tensorflow.math.squared_difference",
    "tensorflow.reduce_mean",
    "tensorflow.sqrt",
    "tensorflow_probability.python.distributions.independent_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testSlicingGeneral": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": [
    "tensorflow.newaxis.batch_shape",
    "tensorflow.newaxis.event_shape",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.independent_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testSlicingScalarDistZeroReinterpretedDims": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "tensorflow.newaxis.batch_shape",
    "tensorflow.newaxis.event_shape",
    "tensorflow_probability.python.distributions.independent_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testSlicingSubclasses": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": [
    "IndepBern1d",
    "IndepBern1dSliceable",
    "NotImplementedError",
    "tensorflow.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testSlicingSubclasses.IndepBern1d": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.independent_test.tfd"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testSlicingSubclasses.IndepBern1d.__init__": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": [
    "super",
    "tensorflow.float32",
    "tensorflow_probability.python.distributions.independent_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testSlicingSubclasses.IndepBern1dSliceable": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": [
    "IndepBern1d"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.testSlicingSubclasses.IndepBern1dSliceable._params_event_ndims": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.IndependentDistributionTest.test_event_ndims_is_static_when_possible": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.independent_test.tfd",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.independent_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.independent_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.independent_test.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.independent_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.independent_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.independent_test.stats": {
  "data": {
   "lineno": 41
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.independent_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.independent_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.independent_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.independent_test.tfd": {
  "data": {
   "lineno": 43
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.independent_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.independent_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.independent_test.try_import": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "ImportError",
    "str",
    "tensorflow.compat.v1.logging.warning",
    "tensorflow_probability.python.distributions.independent_test.importlib"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "absl.app.run",
    "absl.flags.DEFINE_float",
    "absl.flags.FLAGS",
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.FLAGS": {
  "data": {
   "lineno": 55
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.app": {
  "data": {
   "shadows": "absl.app"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.compute_3x3_volumes": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.ctv_debatched"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.compute_4x4_volumes": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.ctv_debatched"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.compute_5x5_volumes": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.ctv_debatched"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.corr": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.ctv_debatched": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.compute_true_volumes"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.flags": {
  "data": {
   "shadows": "absl.flags"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.main": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "int",
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.FLAGS",
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.compute_3x3_volumes",
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.compute_4x4_volumes",
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.compute_5x5_volumes",
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.pprint"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.pprint": {
  "data": {
   "shadows": "pprint"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.try_import"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.__all__": {
  "data": {
   "lineno": 59
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib._clopper_pearson_confidence_interval": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": [
    "ValueError",
    "float",
    "len",
    "numpy.amax",
    "numpy.amin",
    "numpy.count_nonzero",
    "numpy.unique",
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.optimize",
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.stats"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib._clopper_pearson_confidence_interval.p_big_enough": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "numpy.log",
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.stats"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib._clopper_pearson_confidence_interval.p_small_enough": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": [
    "numpy.log",
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.stats"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib._det_large_enough_mask": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.linalg.det"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib._psd_mask": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.linalg.eigh",
    "tensorflow.reduce_min"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib._uniform_correlation_like_matrix": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "tensorflow.linalg.matrix_transpose",
    "tensorflow.linalg.set_diag",
    "tensorflow.ones",
    "tensorflow_probability.python.distributions.uniform.Uniform",
    "tensorflow_probability.python.internal.distribution_util.fill_triangular",
    "tensorflow_probability.python.internal.distribution_util.pad"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.compute_true_volumes": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": [
    "len",
    "numpy.float32",
    "numpy.rollaxis",
    "print",
    "tensorflow.compat.v1.Session",
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib._clopper_pearson_confidence_interval",
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.correlation_matrix_volume_rejection_samples",
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.sys",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.correlation_matrix_volume_rejection_samples": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib._det_large_enough_mask",
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib._psd_mask",
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib._uniform_correlation_like_matrix"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.optimize": {
  "data": {
   "lineno": 73
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.stats": {
  "data": {
   "lineno": 74
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.try_import": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "ImportError",
    "str",
    "tensorflow.compat.v1.logging.warning",
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.importlib"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.uniform": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.uniform"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.CorrelationMatrixVolumesTest": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.CorrelationMatrixVolumesTest.testRejection2D": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "int",
    "numpy.array",
    "numpy.float32",
    "tensorflow.compat.v1.assert_less",
    "tensorflow.control_dependencies",
    "tensorflow.identity",
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.correlation_matrix_volume_rejection_samples",
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.two_by_two_volume",
    "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_equal_by_dkwm",
    "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.CorrelationMatrixVolumesTest.testRejection3D": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "int",
    "numpy.array",
    "numpy.float32",
    "tensorflow.compat.v1.assert_less",
    "tensorflow.control_dependencies",
    "tensorflow.identity",
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.correlation_matrix_volume_rejection_samples",
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.three_by_three_volume",
    "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_equal_by_dkwm",
    "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.CorrelationMatrixVolumesTest.testRejection4D": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "int",
    "numpy.array",
    "numpy.float32",
    "tensorflow.compat.v1.assert_less",
    "tensorflow.control_dependencies",
    "tensorflow.identity",
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.correlation_matrix_volume_rejection_samples",
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.four_by_four_volume",
    "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_equal_by_dkwm",
    "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.CorrelationMatrixVolumesTest.testVolumeEstimation2D": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "int",
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib.compute_true_volumes",
    "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.two_by_two_volume",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.corr": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_lib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.four_by_four_volume": {
  "data": {
   "lineno": 68
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.st": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.internal.statistical_testing"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.three_by_three_volume": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "numpy.pi"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.correlation_matrix_volumes_test.two_by_two_volume": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "numpy.sqrt"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats.__all__": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats.assign_log_moving_mean_exp": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "TypeError",
    "tensorflow.compat.v1.colocate_with",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.math.log",
    "tensorflow.math.log1p",
    "tensorflow.newaxis",
    "tensorflow.ones_like",
    "tensorflow.reduce_logsumexp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats.assign_moving_mean_variance": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "TypeError",
    "tensorflow.compat.v1.colocate_with",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.control_dependencies",
    "tensorflow.convert_to_tensor",
    "tensorflow.square"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats.deprecation": {
  "data": {
   "shadows": "tensorflow.python.util.deprecation"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats.moving_mean_variance": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "TypeError",
    "tensorflow.compat.v1.variable_scope",
    "tensorflow.compat.v2.Variable",
    "tensorflow.convert_to_tensor",
    "tensorflow.python.util.deprecation.deprecated",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.internal.moving_stats.assign_moving_mean_variance"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats_test.MovingLogExponentialMovingMeanExpTest": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats_test.MovingLogExponentialMovingMeanExpTest.test_assign_log_moving_mean_exp": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.while_loop",
    "tensorflow.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats_test.MovingLogExponentialMovingMeanExpTest.test_assign_log_moving_mean_exp.body": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float64",
    "tensorflow.abs",
    "tensorflow.compat.v1.assert_less",
    "tensorflow.compat.v1.assign",
    "tensorflow.control_dependencies",
    "tensorflow.math.exp",
    "tensorflow.math.log",
    "tensorflow.random.normal",
    "tensorflow_probability.python.distributions.internal.moving_stats.assign_log_moving_mean_exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats_test.MovingLogExponentialMovingMeanExpTest.test_assign_log_moving_mean_exp.cond": {
  "data": {
   "lineno": 122
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats_test.MovingReduceMeanVarianceTest": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats_test.MovingReduceMeanVarianceTest.test_assign_moving_mean_variance": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.ones_like",
    "tensorflow.while_loop",
    "tensorflow.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats_test.MovingReduceMeanVarianceTest.test_assign_moving_mean_variance.body": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.control_dependencies",
    "tensorflow.float64",
    "tensorflow.random.normal",
    "tensorflow_probability.python.distributions.internal.moving_stats.assign_moving_mean_variance"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats_test.MovingReduceMeanVarianceTest.test_assign_moving_mean_variance.cond": {
  "data": {
   "lineno": 51
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats_test.moving_stats": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.internal.moving_stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.moving_stats_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.slicing": {
  "data": {
   "symbols_in_volume": [
    "slice"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.internal.slicing.ALL_SLICE": {
  "data": {
   "lineno": 44
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.internal.slicing.PROVENANCE_ATTR": {
  "data": {
   "lineno": 42
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.internal.slicing.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.internal.slicing._apply_single_step": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "Ellipsis",
    "dict",
    "len",
    "tensorflow_probability.python.distributions.internal.slicing._slice_params_to_dict",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing._apply_slice_sequence": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.internal.slicing._apply_single_step"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing._slice_params_to_dict": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "ValueError",
    "getattr",
    "hasattr",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow_probability.python.distributions.internal.slicing._slice_single_param",
    "tensorflow_probability.python.distributions.internal.slicing.six",
    "tensorflow_probability.python.distributions.internal.slicing.warnings"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing._slice_single_param": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "Ellipsis",
    "ValueError",
    "isinstance",
    "slice",
    "sum",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.rank",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.size",
    "tensorflow_probability.python.distributions.internal.slicing.ALL_SLICE"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.slicing.batch_slice": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "getattr",
    "isinstance",
    "setattr",
    "tensorflow_probability.python.distributions.internal.slicing.PROVENANCE_ATTR",
    "tensorflow_probability.python.distributions.internal.slicing._apply_slice_sequence",
    "tensorflow_probability.python.distributions.internal.slicing.collections"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.slicing.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.slicing.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.slicing.six": {
  "data": {
   "shadows": "six"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.slicing.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.slicing.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.slicing.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.python.distributions.internal.slicing_test._MakeSlices"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_multi_ellipsis": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.constant",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.internal.slicing._slice_single_param",
    "tensorflow_probability.python.distributions.internal.slicing_test.make_slices"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_broadcast_batch": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "list",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow.newaxis",
    "tensorflow.newaxis.shape",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.internal.slicing._slice_single_param",
    "tensorflow_probability.python.distributions.internal.slicing_test.make_slices"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_broadcast_batch_leading_newaxis": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow.newaxis",
    "tensorflow.newaxis.shape.as_list",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.internal.slicing._slice_single_param",
    "tensorflow_probability.python.distributions.internal.slicing_test.make_slices"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_int": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.internal.slicing._slice_single_param",
    "tensorflow_probability.python.distributions.internal.slicing_test.make_slices"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_int_broadcastdim": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.internal.slicing._slice_single_param",
    "tensorflow_probability.python.distributions.internal.slicing_test.make_slices"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_newaxis_leading": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.newaxis",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.internal.slicing._slice_single_param",
    "tensorflow_probability.python.distributions.internal.slicing_test.make_slices"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_newaxis_trailing": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.newaxis",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.internal.slicing._slice_single_param",
    "tensorflow_probability.python.distributions.internal.slicing_test.make_slices"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_start": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.internal.slicing._slice_single_param",
    "tensorflow_probability.python.distributions.internal.slicing_test.make_slices"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_start_broadcastdim": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.internal.slicing._slice_single_param",
    "tensorflow_probability.python.distributions.internal.slicing_test.make_slices"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_stop_broadcastdim": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.internal.slicing._slice_single_param",
    "tensorflow_probability.python.distributions.internal.slicing_test.make_slices"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_stop_leadingdim": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.int32",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.internal.slicing._slice_single_param",
    "tensorflow_probability.python.distributions.internal.slicing_test.make_slices"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_stop_trailingdim": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.internal.slicing._slice_single_param",
    "tensorflow_probability.python.distributions.internal.slicing_test.make_slices"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_tensor": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.constant",
    "tensorflow.int32",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.internal.slicing._slice_single_param",
    "tensorflow_probability.python.distributions.internal.slicing_test.make_slices"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_tensor_broadcastdim": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.constant",
    "tensorflow.int32",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.internal.slicing._slice_single_param",
    "tensorflow_probability.python.distributions.internal.slicing_test.make_slices"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_slice_withstep_broadcastdim": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.int32",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.internal.slicing._slice_single_param",
    "tensorflow_probability.python.distributions.internal.slicing_test.make_slices"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.SlicingTest.test_single_param_too_many_slices": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.constant",
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.internal.slicing._slice_single_param",
    "tensorflow_probability.python.distributions.internal.slicing_test.make_slices"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test._MakeSlices": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test._MakeSlices.__getitem__": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "isinstance",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.make_slices": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.slicing": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.internal.slicing"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.slicing_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.__all__": {
  "data": {
   "lineno": 137
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing._batch_sort_vector": {
  "data": {
   "lineno": 504,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.nn.top_k",
    "tensorflow.shape",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing._check_shape_dominates": {
  "data": {
   "lineno": 911,
   "symbols_in_volume": [
    "check",
    "list",
    "tensorflow.control_dependencies",
    "tensorflow.identity",
    "tensorflow_probability.python.distributions.internal.statistical_testing.itertools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing._check_shape_dominates.check": {
  "data": {
   "lineno": 926,
   "symbols_in_volume": [
    "tensorflow.broadcast_dynamic_shape",
    "tensorflow.compat.v1.assert_equal",
    "tensorflow.compat.v1.assert_greater_equal",
    "tensorflow.rank",
    "tensorflow.shape",
    "tensorflow.size"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing._dkwm_cdf_envelope": {
  "data": {
   "lineno": 878,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.math.log",
    "tensorflow.sqrt"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing._do_maximum_mean": {
  "data": {
   "lineno": 565,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.clip_by_value",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.newaxis",
    "tensorflow.range",
    "tensorflow.rank",
    "tensorflow.reduce_sum",
    "tensorflow.shape",
    "tensorflow.transpose",
    "tensorflow_probability.python.distributions.internal.statistical_testing._batch_sort_vector",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing._itemwise_error_rate": {
  "data": {
   "lineno": 1002,
   "symbols_in_volume": [
    "tensorflow.broadcast_dynamic_shape",
    "tensorflow.cast",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.reduce_prod",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing._maximum_mean": {
  "data": {
   "lineno": 784,
   "symbols_in_volume": [
    "tensorflow.compat.v1.assert_less_equal",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.control_dependencies",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.identity",
    "tensorflow.reduce_max",
    "tensorflow_probability.python.distributions.internal.statistical_testing._do_maximum_mean",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing._minimum_mean": {
  "data": {
   "lineno": 831,
   "symbols_in_volume": [
    "tensorflow.compat.v1.assert_greater_equal",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.control_dependencies",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.reduce_min",
    "tensorflow_probability.python.distributions.internal.statistical_testing._do_maximum_mean",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing._move_dim_and_sort": {
  "data": {
   "lineno": 493,
   "symbols_in_volume": [
    "_batch_sort_vector",
    "tensorflow_probability.python.internal.distribution_util.move_dimension"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing._random_unit_hypersphere": {
  "data": {
   "lineno": 1509,
   "symbols_in_volume": [
    "tensorflow.concat",
    "tensorflow.math.l2_normalize",
    "tensorflow.random.normal",
    "tensorflow.range",
    "tensorflow.size"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.assert_multivariate_true_cdf_equal_on_projections_two_sample": {
  "data": {
   "lineno": 1516,
   "symbols_in_volume": [
    "list",
    "range",
    "strm",
    "tensorflow.compat.v1.assert_equal",
    "tensorflow.compat.v1.assert_scalar",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.control_dependencies",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.shape",
    "tensorflow.tensordot",
    "tensorflow_probability.python.distributions.internal.statistical_testing._random_unit_hypersphere",
    "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_cdf_equal_by_dkwm_two_sample",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_cdf_equal_by_dkwm": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "_dkwm_cdf_envelope",
    "_itemwise_error_rate",
    "kolmogorov_smirnov_distance",
    "tensorflow.compat.v1.assert_less_equal",
    "tensorflow.compat.v1.assert_scalar",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.shape",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_cdf_equal_by_dkwm_two_sample": {
  "data": {
   "lineno": 603,
   "symbols_in_volume": [
    "_dkwm_cdf_envelope",
    "_itemwise_error_rate",
    "tensorflow.compat.v1.assert_equal",
    "tensorflow.compat.v1.assert_less_equal",
    "tensorflow.compat.v1.assert_scalar",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.control_dependencies",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.internal.statistical_testing.kolmogorov_smirnov_distance_two_sample",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_equal_by_dkwm": {
  "data": {
   "lineno": 1018,
   "symbols_in_volume": [
    "assert_true_mean_in_interval_by_dkwm",
    "tensorflow.compat.v1.name_scope"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_equal_by_dkwm_two_sample": {
  "data": {
   "lineno": 1275,
   "symbols_in_volume": [
    "tensorflow.compat.v1.assert_equal",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.control_dependencies",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.internal.statistical_testing._check_shape_dominates",
    "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_in_interval_by_dkwm",
    "tensorflow_probability.python.distributions.internal.statistical_testing.true_mean_confidence_interval_by_dkwm",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_in_interval_by_dkwm": {
  "data": {
   "lineno": 1198,
   "symbols_in_volume": [
    "tensorflow.compat.v1.assert_greater_equal",
    "tensorflow.compat.v1.assert_less_equal",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.control_dependencies",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow_probability.python.distributions.internal.statistical_testing._check_shape_dominates",
    "tensorflow_probability.python.distributions.internal.statistical_testing.true_mean_confidence_interval_by_dkwm",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.empirical_cdfs": {
  "data": {
   "lineno": 518,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.cast",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.float32",
    "tensorflow.searchsorted",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.kolmogorov_smirnov_distance": {
  "data": {
   "lineno": 362,
   "symbols_in_volume": [
    "_move_dim_and_sort",
    "cdf",
    "left_continuous_cdf",
    "tensorflow.cast",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.maximum",
    "tensorflow.range",
    "tensorflow.reduce_max",
    "tensorflow.shape",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.kolmogorov_smirnov_distance_two_sample": {
  "data": {
   "lineno": 448,
   "symbols_in_volume": [
    "_move_dim_and_sort",
    "cdf",
    "left_continuous_cdf",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow_probability.python.distributions.internal.statistical_testing.functools",
    "tensorflow_probability.python.distributions.internal.statistical_testing.kolmogorov_smirnov_distance",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_cdfs_detectable_by_dkwm": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": [
    "_dkwm_cdf_envelope",
    "_itemwise_error_rate",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_cdfs_detectable_by_dkwm_two_sample": {
  "data": {
   "lineno": 667,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_cdfs_detectable_by_dkwm",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm": {
  "data": {
   "lineno": 1060,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_cdfs_detectable_by_dkwm",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm_two_sample": {
  "data": {
   "lineno": 1354,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.min_num_samples_for_dkwm_cdf_test": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": [
    "_itemwise_error_rate",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.math.log",
    "tensorflow.maximum",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.min_num_samples_for_dkwm_cdf_two_sample_test": {
  "data": {
   "lineno": 734,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow_probability.python.distributions.internal.statistical_testing.min_num_samples_for_dkwm_cdf_test",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.min_num_samples_for_dkwm_mean_test": {
  "data": {
   "lineno": 1131,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow_probability.python.distributions.internal.statistical_testing.min_num_samples_for_dkwm_cdf_test",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.min_num_samples_for_dkwm_mean_two_sample_test": {
  "data": {
   "lineno": 1434,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow_probability.python.distributions.internal.statistical_testing.min_num_samples_for_dkwm_mean_test",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.seed_stream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing.true_mean_confidence_interval_by_dkwm": {
  "data": {
   "lineno": 941,
   "symbols_in_volume": [
    "_itemwise_error_rate",
    "tensorflow.compat.v1.assert_scalar",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.internal.statistical_testing._check_shape_dominates",
    "tensorflow_probability.python.distributions.internal.statistical_testing._dkwm_cdf_envelope",
    "tensorflow_probability.python.distributions.internal.statistical_testing._maximum_mean",
    "tensorflow_probability.python.distributions.internal.statistical_testing._minimum_mean",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.assert_design_soundness": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "min_discrepancy",
    "min_num_samples",
    "numpy.bool",
    "numpy.meshgrid",
    "numpy.ones_like",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.assert_design_soundness_two_sample": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": [
    "min_discrepancy",
    "min_num_samples",
    "numpy.bool",
    "numpy.meshgrid",
    "numpy.ones_like",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_argument_validity_checking": {
  "data": {
   "lineno": 439,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.float32",
    "numpy.float64",
    "numpy.random.RandomState",
    "tensorflow_probability.python.distributions.internal.statistical_testing.true_mean_confidence_interval_by_dkwm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_cdf_one_sample_assertion": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.float32",
    "numpy.float64",
    "numpy.random.RandomState",
    "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_cdf_equal_by_dkwm",
    "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_cdfs_detectable_by_dkwm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_cdf_one_sample_batch_discrete_assertion": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "check_catches_mistake",
    "numpy.all",
    "numpy.float32",
    "numpy.float64",
    "numpy.random.RandomState",
    "tensorflow.ones",
    "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_cdf_equal_by_dkwm",
    "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_cdfs_detectable_by_dkwm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_cdf_one_sample_batch_discrete_assertion.cdf": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_cdf_one_sample_batch_discrete_assertion.check_catches_mistake": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "len",
    "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_cdf_equal_by_dkwm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_cdf_one_sample_batch_discrete_assertion.left_continuous_cdf": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_cdf_two_sample_batch_discrete_assertion": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "check_catches_mistake",
    "numpy.all",
    "numpy.float32",
    "numpy.float64",
    "numpy.random.RandomState",
    "tensorflow.ones",
    "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_cdf_equal_by_dkwm_two_sample",
    "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_cdfs_detectable_by_dkwm_two_sample"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_cdf_two_sample_batch_discrete_assertion.check_catches_mistake": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "len",
    "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_cdf_equal_by_dkwm_two_sample"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_design_cdf_one_sample_soundness": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.float32",
    "numpy.float64",
    "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_cdfs_detectable_by_dkwm",
    "tensorflow_probability.python.distributions.internal.statistical_testing.min_num_samples_for_dkwm_cdf_test"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_design_cdf_two_sample_soundness": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.float32",
    "numpy.float64",
    "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_cdfs_detectable_by_dkwm_two_sample",
    "tensorflow_probability.python.distributions.internal.statistical_testing.min_num_samples_for_dkwm_cdf_two_sample_test"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_design_mean_one_sample_soundness": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.float32",
    "numpy.float64",
    "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm",
    "tensorflow_probability.python.distributions.internal.statistical_testing.min_num_samples_for_dkwm_mean_test",
    "tensorflow_probability.python.distributions.internal.statistical_testing_test.functools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_design_mean_two_sample_soundness": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "min_discrepancy",
    "min_num_samples",
    "numpy.float32",
    "numpy.float64",
    "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm_two_sample",
    "tensorflow_probability.python.distributions.internal.statistical_testing.min_num_samples_for_dkwm_mean_two_sample_test",
    "tensorflow_probability.python.distributions.internal.statistical_testing_test.functools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_mean_in_interval_one_sample_assertion": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.float32",
    "numpy.float64",
    "numpy.random.RandomState",
    "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_in_interval_by_dkwm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_mean_one_sample_assertion": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.float32",
    "numpy.float64",
    "numpy.random.RandomState",
    "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_equal_by_dkwm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_mean_two_sample_assertion": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.float32",
    "numpy.float64",
    "numpy.random.RandomState",
    "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_equal_by_dkwm_two_sample",
    "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm_two_sample"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_mean_two_sample_assertion_beta_1_2_false": {
  "data": {
   "lineno": 421,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.float32",
    "numpy.float64",
    "numpy.random.RandomState",
    "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_equal_by_dkwm_two_sample"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_dkwm_mean_two_sample_assertion_beta_2_1_false": {
  "data": {
   "lineno": 403,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.float32",
    "numpy.float64",
    "numpy.random.RandomState",
    "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_equal_by_dkwm_two_sample"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_do_maximum_mean": {
  "data": {
   "lineno": 459,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.float32",
    "numpy.float64",
    "numpy.random.RandomState",
    "sorted",
    "sum",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.internal.statistical_testing._do_maximum_mean"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_empirical_cdfs_with_duplicates": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.internal.statistical_testing.empirical_cdfs"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_kolmogorov_smirnov_distance": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.float32",
    "numpy.float64",
    "tensorflow.convert_to_tensor",
    "tensorflow.transpose",
    "tensorflow_probability.python.distributions.internal.statistical_testing.kolmogorov_smirnov_distance"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_kolmogorov_smirnov_distance.cdf": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_kolmogorov_smirnov_distance.left_continuous_cdf": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_kolmogorov_smirnov_distance_two_sample": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.float32",
    "numpy.float64",
    "tensorflow.transpose",
    "tensorflow_probability.python.distributions.internal.statistical_testing.kolmogorov_smirnov_distance_two_sample"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_random_projections": {
  "data": {
   "lineno": 481,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "assert_catches_mistake",
    "numpy.float32",
    "numpy.float64",
    "numpy.random.RandomState",
    "strm",
    "tensorflow_probability.python.distributions.internal.statistical_testing.assert_multivariate_true_cdf_equal_on_projections_two_sample",
    "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_cdfs_detectable_by_dkwm_two_sample",
    "tensorflow_probability.python.internal.test_util.test_seed_stream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_random_projections.assert_catches_mistake": {
  "data": {
   "lineno": 507,
   "symbols_in_volume": [
    "strm",
    "tensorflow_probability.python.distributions.internal.statistical_testing.assert_multivariate_true_cdf_equal_on_projections_two_sample"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.StatisticalTestingTest.test_true_mean_confidence_interval_by_dkwm_one_sample": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.float32",
    "numpy.float64",
    "numpy.random.RandomState",
    "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm",
    "tensorflow_probability.python.distributions.internal.statistical_testing.true_mean_confidence_interval_by_dkwm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.st": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.internal.statistical_testing"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.internal.statistical_testing_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gamma": {
  "data": {
   "symbols_in_volume": [
    "tensorflow.python.util.deprecation.deprecated",
    "tensorflow_probability.python.distributions.inverse_gamma._InverseGammaWithSoftplusConcentrationScale",
    "tensorflow_probability.python.distributions.inverse_gamma._rate_deprecator",
    "tensorflow_probability.python.distributions.inverse_gamma._scale_deprecator"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma.__init__": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.python.util.deprecation.deprecated_args",
    "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._batch_shape": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._batch_shape_tensor": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._cdf": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.igammac"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._entropy": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.digamma",
    "tensorflow.compat.v2.math.lgamma",
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._event_shape": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._event_shape_tensor": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._log_normalization": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.lgamma",
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._log_prob": {
  "data": {
   "lineno": 237
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._log_unnormalized_prob": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._maybe_assert_valid_sample": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._mean": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": [
    "numpy.nan",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.fill",
    "tensorflow.compat.v2.ones",
    "tensorflow_probability.python.internal.assert_util.assert_less",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._mode": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._param_shapes": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "dict",
    "staticmethod",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._params_event_ndims": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._sample_n": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": [
    "tensorflow.compat.v2.random.gamma",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma._variance": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": [
    "numpy.nan",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.fill",
    "tensorflow.compat.v2.square",
    "tensorflow_probability.python.internal.assert_util.assert_less",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma.concentration": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma.rate": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "property",
    "tensorflow.python.util.deprecation.deprecated"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma.scale": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGammaWithSoftplusConcentrationRate": {
  "data": {
   "lineno": 357
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.InverseGammaWithSoftplusConcentrationScale": {
  "data": {
   "lineno": 366
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.inverse_gamma._InverseGammaWithSoftplusConcentrationScale": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.inverse_gamma.InverseGamma"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.inverse_gamma._InverseGammaWithSoftplusConcentrationScale.__init__": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.nn.softplus",
    "tensorflow.python.util.deprecation.deprecated_args",
    "tensorflow_probability.python.distributions.inverse_gamma._InverseGammaWithSoftplusConcentrationScale",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.__all__": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.inverse_gamma._rate_deprecator": {
  "data": {
   "lineno": 350
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.inverse_gamma._scale_deprecator": {
  "data": {
   "lineno": 360
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.deprecation": {
  "data": {
   "shadows": "tensorflow.python.util.deprecation"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gamma.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest._assertIntegral": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": [
    "sorted",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest._kstest": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "scipy.stats.invgamma",
    "scipy.stats.kstest"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaCDF": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "scipy.stats.invgamma.cdf",
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.python.distributions.inverse_gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaEntropy": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "numpy.array",
    "scipy.stats.invgamma.entropy",
    "tensorflow_probability.python.distributions.inverse_gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaFullyReparameterized": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.math.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaFullyReparameterized.inverse_gamma_sampler": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.inverse_gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaLogPDF": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "scipy.stats.invgamma.logpdf",
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.python.distributions.inverse_gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaLogPDFMultidimensional": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "scipy.stats.invgamma.logpdf",
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.python.distributions.inverse_gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaLogPDFMultidimensionalBroadcasting": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "scipy.stats.invgamma.logpdf",
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.python.distributions.inverse_gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaMeanAllDefined": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "numpy.array",
    "scipy.stats.invgamma.mean",
    "tensorflow_probability.python.distributions.inverse_gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaMeanAllowNanStats": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.inverse_gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaMeanNanStats": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.nan",
    "tensorflow_probability.python.distributions.inverse_gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaMode": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.inverse_gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaNonPositiveInitializationParamsRaises": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.python.distributions.inverse_gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaPdfOfSampleMultiDims": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": [
    "numpy.array",
    "scipy.stats.invgamma.mean",
    "scipy.stats.invgamma.var",
    "tensorflow_probability.python.distributions.inverse_gamma_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaSample": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "scipy.stats.invgamma.mean",
    "scipy.stats.invgamma.var",
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.python.distributions.inverse_gamma_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaSampleMultiDimensional": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "enumerate",
    "numpy.arange",
    "numpy.array",
    "numpy.float32",
    "numpy.reshape",
    "numpy.zeros_like",
    "scipy.stats.invgamma.mean",
    "scipy.stats.invgamma.var",
    "tensorflow_probability.python.distributions.inverse_gamma_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaShape": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape",
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.python.distributions.inverse_gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaVarianceAllDefined": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "numpy.array",
    "scipy.stats.invgamma.var",
    "tensorflow_probability.python.distributions.inverse_gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaVarianceAllowNanStats": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.inverse_gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaVarianceNanStats": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.nan",
    "scipy.stats.invgamma.var",
    "tensorflow_probability.python.distributions.inverse_gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaWithSoftplusConcentrationRate": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.inverse_gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testInverseGammaWithSoftplusConcentrationScale": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.nn.softplus",
    "tensorflow_probability.python.distributions.inverse_gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.InverseGammaTest.testRateArgBackwardsCompatiblity": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.inverse_gamma_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.test_case": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_case"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.tfd": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gamma_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian.__init__": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian._batch_shape": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian._batch_shape_tensor": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian._cdf": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.exp",
    "tensorflow_probability.python.internal.assert_util.assert_greater",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
    "tensorflow_probability.python.internal.special_math.ndtr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian._event_shape": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian._log_prob": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.pi",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.math.log",
    "tensorflow_probability.python.internal.assert_util.assert_greater",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian._mean": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian._params_event_ndims": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian._sample_n": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "seed",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.random.normal",
    "tensorflow.compat.v2.random.uniform",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian._variance": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian.concentration": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.InverseGaussian.loc": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.__all__": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.seed_stream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.special_math": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.special_math"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test.InverseGaussianTestDynamicShapeFloat32": {
  "data": {
   "lineno": 363,
   "symbols_in_volume": [
    "tensorflow.float32",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test.InverseGaussianTestDynamicShapeFloat64": {
  "data": {
   "lineno": 375,
   "symbols_in_volume": [
    "tensorflow.float64",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test.InverseGaussianTestStaticShapeFloat32": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": [
    "tensorflow.float32",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test.InverseGaussianTestStaticShapeFloat64": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": [
    "tensorflow.float64",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "object",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.make_tensor": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInvalidConcentration": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.inverse_gaussian_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInvalidLoc": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.inverse_gaussian_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianCdfValidateArgs": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.inverse_gaussian_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianLogCdf": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.inverse_gaussian_test._scipy_invgauss",
    "tensorflow_probability.python.distributions.inverse_gaussian_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianLogCdfMultidimensional": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.inverse_gaussian_test._scipy_invgauss",
    "tensorflow_probability.python.distributions.inverse_gaussian_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianLogCdfValidateArgs": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.inverse_gaussian_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianLogPdf": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.inverse_gaussian_test._scipy_invgauss",
    "tensorflow_probability.python.distributions.inverse_gaussian_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianLogPdfMultidimensional": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.inverse_gaussian_test._scipy_invgauss",
    "tensorflow_probability.python.distributions.inverse_gaussian_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianLogPdfValidateArgs": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.inverse_gaussian_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianMean": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.inverse_gaussian_test._scipy_invgauss",
    "tensorflow_probability.python.distributions.inverse_gaussian_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianMeanBroadCast": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.inverse_gaussian_test._scipy_invgauss",
    "tensorflow_probability.python.distributions.inverse_gaussian_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianPdfValidateArgs": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.inverse_gaussian_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianSampleMean": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": [
    "int",
    "tensorflow_probability.python.distributions.inverse_gaussian_test._scipy_invgauss",
    "tensorflow_probability.python.distributions.inverse_gaussian_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianSampleMultidimensionalMean": {
  "data": {
   "lineno": 318,
   "symbols_in_volume": [
    "int",
    "numpy.arange",
    "numpy.array",
    "tensorflow_probability.python.distributions.inverse_gaussian_test._scipy_invgauss",
    "tensorflow_probability.python.distributions.inverse_gaussian_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianSampleMultidimensionalVariance": {
  "data": {
   "lineno": 337,
   "symbols_in_volume": [
    "int",
    "numpy.arange",
    "numpy.array",
    "tensorflow_probability.python.distributions.inverse_gaussian_test._scipy_invgauss",
    "tensorflow_probability.python.distributions.inverse_gaussian_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianSampleVariance": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": [
    "int",
    "tensorflow_probability.python.distributions.inverse_gaussian_test._scipy_invgauss",
    "tensorflow_probability.python.distributions.inverse_gaussian_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianShape": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.inverse_gaussian_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianShapeBroadcast": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.inverse_gaussian_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianVariance": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.inverse_gaussian_test._scipy_invgauss",
    "tensorflow_probability.python.distributions.inverse_gaussian_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._InverseGaussianTest.testInverseGaussianVarianceBroadcast": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.inverse_gaussian_test._scipy_invgauss",
    "tensorflow_probability.python.distributions.inverse_gaussian_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test._scipy_invgauss": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "scipy.stats.invgauss"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test.tfd": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.inverse_gaussian_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution",
    "tensorflow_probability.python.distributions.joint_distribution.abc",
    "tensorflow_probability.python.distributions.joint_distribution.six"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution._call_flat_sample_distributions": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": [
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution._call_log_prob": {
  "data": {
   "lineno": 315
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution._call_sample_n": {
  "data": {
   "lineno": 319
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution._flat_sample_distributions": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "NotImplementedError",
    "tensorflow_probability.python.distributions.joint_distribution.abc"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution._flatten": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "NotImplementedError",
    "tensorflow_probability.python.distributions.joint_distribution.abc"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution._log_prob": {
  "data": {
   "lineno": 271,
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution._map_attr_over_dists": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "any",
    "getattr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution._map_measure_over_dists": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "ValueError",
    "any",
    "getattr",
    "maybe_check_wont_broadcast",
    "tensorflow.compat.v2.nest.flatten",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution._sample_n": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution._unflatten": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "NotImplementedError",
    "tensorflow_probability.python.distributions.joint_distribution.abc"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution.batch_shape": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "property",
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution.batch_shape_tensor": {
  "data": {
   "lineno": 139
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution.dtype": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "property",
    "super",
    "tensorflow_probability.python.distributions.joint_distribution.JointDistribution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution.event_shape": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "property",
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution.event_shape_tensor": {
  "data": {
   "lineno": 173
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution.is_scalar_batch": {
  "data": {
   "lineno": 259
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution.is_scalar_event": {
  "data": {
   "lineno": 247
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution.log_prob_parts": {
  "data": {
   "lineno": 212
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution.model": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution.prob_parts": {
  "data": {
   "lineno": 230
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution.reparameterization_type": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.JointDistribution.sample_distributions": {
  "data": {
   "lineno": 186
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.__all__": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.joint_distribution.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution.distribution_lib": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution.maybe_check_wont_broadcast": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": [
    "ValueError",
    "all",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.identity",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
    "tuple",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution.six": {
  "data": {
   "shadows": "six"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine.JointDistributionCoroutine": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.joint_distribution.JointDistribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine.JointDistributionCoroutine.Root": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.joint_distribution_coroutine.collections"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine.JointDistributionCoroutine.__init__": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine.JointDistributionCoroutine"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine.JointDistributionCoroutine._flat_sample_distributions": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "StopIteration",
    "isinstance",
    "len",
    "next",
    "seed",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine.JointDistributionCoroutine._flatten": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "tensorflow.python.util.nest.flatten_up_to",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine.JointDistributionCoroutine._unflatten": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "tensorflow.compat.v2.nest.pack_sequence_as",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine.__all__": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine.joint_distribution_lib": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.joint_distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine.nest": {
  "data": {
   "shadows": "tensorflow.python.util.nest"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine.seed_stream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfd"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_batch_and_event_shape_no_plate": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_batch_and_event_shape_no_plate.dist": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "tensorflow.compat.v2.float32",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.Root",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_batch_and_event_shape_with_plate": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_batch_and_event_shape_with_plate.dist": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "tensorflow.compat.v2.expand_dims",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.Root",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_log_prob_multiple_roots": {
  "data": {
   "lineno": 365,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.pi",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_log_prob_multiple_roots.dist": {
  "data": {
   "lineno": 376,
   "symbols_in_volume": [
    "tensorflow.compat.v2.expand_dims",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.Root",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_log_prob_multiple_roots_and_samples": {
  "data": {
   "lineno": 405,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.pi",
    "tensorflow.compat.v2.expand_dims",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_log_prob_multiple_roots_and_samples.dist": {
  "data": {
   "lineno": 416,
   "symbols_in_volume": [
    "tensorflow.compat.v2.expand_dims",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.Root",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_log_prob_multiple_samples": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.pi",
    "tensorflow.compat.v2.math.log",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_log_prob_multiple_samples.dist": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "tensorflow.compat.v2.float32",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.Root",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_log_prob_no_plate": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.pi",
    "tensorflow.compat.v2.math.log",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_log_prob_no_plate.dist": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "tensorflow.compat.v2.float32",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.Root",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_log_prob_with_plate": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.pi",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_log_prob_with_plate.dist": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "tensorflow.compat.v2.float32",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.Root",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_prob_multiple_samples": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.pi",
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.math.log",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_prob_multiple_samples.dist": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": [
    "tensorflow.compat.v2.float32",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.Root",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_repr_with_custom_sample_dtype": {
  "data": {
   "lineno": 477,
   "symbols_in_volume": [
    "repr",
    "str",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.collections",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_repr_with_custom_sample_dtype.model": {
  "data": {
   "lineno": 478,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_sample_dtype_structures_output": {
  "data": {
   "lineno": 447,
   "symbols_in_volume": [
    "noncentered_horseshoe_prior",
    "sorted",
    "tensorflow.compat.v2.nest.assert_same_structure",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.collections",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_sample_dtype_structures_output.noncentered_horseshoe_prior": {
  "data": {
   "lineno": 448,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.Root",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_sample_shape_no_plate": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_sample_shape_no_plate.dist": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "tensorflow.compat.v2.float32",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.Root",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_sample_shape_with_plate": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.JointDistributionCoroutineTest.test_sample_shape_with_plate.dist": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "tensorflow.compat.v2.expand_dims",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.Root",
    "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.Root": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfd": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.joint_distribution_coroutine_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named.JointDistributionNamed": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named.JointDistributionNamed.__init__": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.distributions.joint_distribution_named.JointDistributionNamed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named.JointDistributionNamed._build": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "TypeError",
    "_is_dict_like",
    "_prob_chain_rule_flatten",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named.JointDistributionNamed._flatten": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "getattr",
    "hasattr",
    "len",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named.JointDistributionNamed._resolve_graph": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "tuple",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named.JointDistributionNamed._unflatten": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "dict",
    "tuple",
    "type",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named._Node": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named._Node.__init__": {
  "data": {
   "lineno": 203
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named._best_order": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "_explore",
    "sorted",
    "tensorflow_probability.python.distributions.joint_distribution_named._depth",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named._best_order._explore": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": [
    "_explore",
    "sorted"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named._convert_to_dict": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": [
    "dict",
    "hasattr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named._depth": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "_explore",
    "tensorflow_probability.python.distributions.joint_distribution_named._Node"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named._depth._explore": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "_explore",
    "max"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named._is_dict_like": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "hasattr",
    "isinstance",
    "tensorflow_probability.python.distributions.joint_distribution_named.collections"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named._prob_chain_rule_flatten": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "_convert_to_dict",
    "_make",
    "dist_fn",
    "tensorflow_probability.python.distributions.joint_distribution_named._best_order",
    "tensorflow_probability.python.distributions.joint_distribution_sequential._get_required_args",
    "tensorflow_probability.python.internal.distribution_util.is_distribution_instance",
    "tuple",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named._prob_chain_rule_flatten._make": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "dist_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named._prob_chain_rule_flatten._make._fn": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": [
    "dict",
    "dist_fn",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named.joint_distribution_sequential": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.joint_distribution_sequential"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_batch_slicing": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "dict",
    "tensorflow_probability.python.distributions.joint_distribution_named_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_copy": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": [
    "dict",
    "tensorflow_probability.python.distributions.joint_distribution_named_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_cross_entropy": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "dict",
    "sum",
    "tensorflow_probability.python.distributions.joint_distribution_named_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_dict_sample_log_prob": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "dict",
    "sum",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.int32",
    "tensorflow_probability.python.distributions.joint_distribution_named_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_graph_resolution": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "dict",
    "tensorflow_probability.python.distributions.joint_distribution_named_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_kl_divergence": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "dict",
    "sum",
    "tensorflow_probability.python.distributions.joint_distribution_named_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_namedtuple_sample_log_prob": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "Model",
    "sum",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.int32",
    "tensorflow_probability.python.distributions.joint_distribution_named_test.collections",
    "tensorflow_probability.python.distributions.joint_distribution_named_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_norequired_args_maker": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "tensorflow_probability.python.distributions.joint_distribution_named_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_notimplemented_evaluative_statistic": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "NotImplementedError",
    "absl.testing.parameterized.parameters",
    "dict",
    "getattr",
    "tensorflow_probability.python.distributions.joint_distribution_named_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_notimplemented_summary_statistic": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "NotImplementedError",
    "absl.testing.parameterized.parameters",
    "dict",
    "getattr",
    "tensorflow_probability.python.distributions.joint_distribution_named_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_sample_complex_dependency": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": [
    "dict",
    "tensorflow_probability.python.distributions.joint_distribution_named_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_sample_shape_propagation_default_behavior": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "dict",
    "tensorflow_probability.python.distributions.joint_distribution_named_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_sample_shape_propagation_nondefault_behavior": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": [
    "dict",
    "tensorflow_probability.python.distributions.joint_distribution_named_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.JointDistributionNamedTest.test_summary_statistic": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "dict",
    "getattr",
    "tensorflow_probability.python.distributions.joint_distribution_named_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.tfd": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_named_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.joint_distribution.JointDistribution",
    "tensorflow_probability.python.distributions.joint_distribution_sequential._make_summary_statistic"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential.__getitem__": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": [
    "_sliced_maker",
    "d",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential.__getitem__._sliced_maker": {
  "data": {
   "lineno": 392
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential.__getitem__._sliced_maker._fn": {
  "data": {
   "lineno": 393,
   "symbols_in_volume": [
    "d"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential.__init__": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "d",
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential._build": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "TypeError",
    "_unify_call_signature",
    "enumerate",
    "isinstance",
    "tensorflow_probability.python.distributions.joint_distribution_sequential.collections",
    "type",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential._call_attr": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": [
    "any",
    "d",
    "getattr",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential._cross_entropy": {
  "data": {
   "lineno": 342,
   "symbols_in_volume": [
    "ValueError",
    "any",
    "d0",
    "d1",
    "isinstance",
    "len",
    "sum",
    "tensorflow_probability.python.distributions.joint_distribution.maybe_check_wont_broadcast",
    "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential._entropy": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": [
    "ValueError",
    "any",
    "d",
    "sum",
    "tensorflow_probability.python.distributions.joint_distribution.maybe_check_wont_broadcast"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential._flat_sample_distributions": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "ValueError",
    "dist_fn",
    "enumerate",
    "len",
    "list",
    "seed",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential._flatten": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": [
    "TypeError",
    "len",
    "tuple",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential._resolve_graph": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": [
    "ValueError",
    "_resolve_distribution_names",
    "any",
    "len",
    "set",
    "tuple",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential._unflatten": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "TypeError",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.__all__": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential._get_required_args": {
  "data": {
   "lineno": 475,
   "symbols_in_volume": [
    "len",
    "tensorflow.python.util.tf_inspect.getfullargspec",
    "tensorflow.python.util.tf_inspect.isclass",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential._kl_joint_joint": {
  "data": {
   "lineno": 490,
   "symbols_in_volume": [
    "ValueError",
    "all",
    "d0._dist_fn_args",
    "d0._dist_fn_wrapped",
    "d0_",
    "d1._dist_fn_args",
    "d1._dist_fn_wrapped",
    "d1_",
    "len",
    "sum",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential",
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL",
    "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential._make_summary_statistic": {
  "data": {
   "lineno": 38
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential._make_summary_statistic._fn": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "ValueError",
    "any",
    "d",
    "getattr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential._resolve_distribution_names": {
  "data": {
   "lineno": 452,
   "symbols_in_volume": [
    "enumerate",
    "len",
    "range",
    "reversed",
    "str",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential._unify_call_signature": {
  "data": {
   "lineno": 409,
   "symbols_in_volume": [
    "TypeError",
    "_get_required_args",
    "callable",
    "dist_fn",
    "tensorflow_probability.python.internal.distribution_util.is_distribution_instance"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential._unify_call_signature.dist_fn_wrapped": {
  "data": {
   "lineno": 435,
   "symbols_in_volume": [
    "ValueError",
    "dist_fn",
    "len",
    "reversed",
    "tensorflow_probability.python.distributions.joint_distribution_sequential.functools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.joint_distribution_lib": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.joint_distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.kullback_leibler": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.seed_stream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential.tf_inspect": {
  "data": {
   "shadows": "tensorflow.python.util.tf_inspect"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.Dummy": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.Dummy.__init__": {
  "data": {
   "lineno": 41
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_argspec": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": [
    "tensorflow.python.util.tf_inspect.getfullargspec",
    "tensorflow_probability.python.distributions.joint_distribution_sequential_test.Dummy"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_batch_slicing": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.joint_distribution_sequential_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_copy": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.joint_distribution_sequential_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_cross_entropy": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "sum",
    "tensorflow_probability.python.distributions.joint_distribution_sequential_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_graph_resolution": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.joint_distribution_sequential_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_invalid_structure_raises_error": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": [
    "TypeError",
    "tensorflow_probability.python.distributions.joint_distribution_sequential_test.collections",
    "tensorflow_probability.python.distributions.joint_distribution_sequential_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_kl_divergence": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "sum",
    "tensorflow_probability.python.distributions.joint_distribution_sequential_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_norequired_args_maker": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.distributions.joint_distribution_sequential_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_notimplemented_evaluative_statistic": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "NotImplementedError",
    "absl.testing.parameterized.parameters",
    "getattr",
    "len",
    "tensorflow_probability.python.distributions.joint_distribution_sequential_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_notimplemented_summary_statistic": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "NotImplementedError",
    "absl.testing.parameterized.parameters",
    "getattr",
    "tensorflow_probability.python.distributions.joint_distribution_sequential_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_only_memoize_non_user_input": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.int32",
    "tensorflow_probability.python.distributions.joint_distribution_sequential_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_sample_log_prob": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "sum",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.int32",
    "tensorflow_probability.python.distributions.joint_distribution_sequential_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_sample_shape_propagation_default_behavior": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.joint_distribution_sequential_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_sample_shape_propagation_nondefault_behavior": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.joint_distribution_sequential_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.JointDistributionSequentialTest.test_summary_statistic": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "getattr",
    "tensorflow_probability.python.distributions.joint_distribution_sequential_test.tfd",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.tf_inspect": {
  "data": {
   "shadows": "tensorflow.python.util.tf_inspect"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.tfd": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_sequential_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.joint_distribution_test.JointDistributionSequentialTest": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.joint_distribution_test.JointDistributionSequentialTest.test_batch_slicing": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.joint_distribution_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_test.JointDistributionSequentialTest.test_copy": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.joint_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_test.JointDistributionSequentialTest.test_cross_entropy": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "sum",
    "tensorflow_probability.python.distributions.joint_distribution_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_test.JointDistributionSequentialTest.test_graph_resolution": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.joint_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_test.JointDistributionSequentialTest.test_kl_divergence": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "sum",
    "tensorflow_probability.python.distributions.joint_distribution_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_test.JointDistributionSequentialTest.test_norequired_args_maker": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.distributions.joint_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_test.JointDistributionSequentialTest.test_notimplemented_evaluative_statistic": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "NotImplementedError",
    "absl.testing.parameterized.parameters",
    "getattr",
    "len",
    "tensorflow_probability.python.distributions.joint_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_test.JointDistributionSequentialTest.test_notimplemented_summary_statistic": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "NotImplementedError",
    "absl.testing.parameterized.parameters",
    "getattr",
    "tensorflow_probability.python.distributions.joint_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_test.JointDistributionSequentialTest.test_sample_log_prob": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "sum",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.int32",
    "tensorflow_probability.python.distributions.joint_distribution_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_test.JointDistributionSequentialTest.test_sample_shape_propagation_default_behavior": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.joint_distribution_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_test.JointDistributionSequentialTest.test_sample_shape_propagation_nondefault_behavior": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.joint_distribution_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_test.JointDistributionSequentialTest.test_summary_statistic": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "getattr",
    "tensorflow_probability.python.distributions.joint_distribution_test.tfd",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.joint_distribution_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_test.tfd": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.joint_distribution_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.joint_distribution_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kl_divergence": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kullback_leibler": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL.__call__": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "callable",
    "kl_fn",
    "tensorflow_probability.python.distributions.kullback_leibler._DIVERGENCES"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL.__init__": {
  "data": {
   "lineno": 159
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler._DIVERGENCES": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.kullback_leibler.__all__": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.kullback_leibler._dist_classes": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "dir",
    "getattr",
    "issubclass",
    "tensorflow_probability.python.distributions.kullback_leibler.inspect"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler._registered_kl": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "enumerate",
    "tensorflow.python.util.tf_inspect.getmro",
    "tensorflow_probability.python.distributions.kullback_leibler._DIVERGENCES"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler._summarize_registered_kls": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "issubclass",
    "len",
    "list",
    "map",
    "max",
    "sorted",
    "tensorflow_probability.python.distributions.kullback_leibler._DIVERGENCES",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kullback_leibler.augment_kl_xent_docs": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "issubclass",
    "merge_doc",
    "set",
    "sorted",
    "tensorflow_probability.python.distributions.kullback_leibler._DIVERGENCES",
    "tensorflow_probability.python.distributions.kullback_leibler._dist_classes",
    "tensorflow_probability.python.distributions.kullback_leibler._summarize_registered_kls",
    "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence",
    "tensorflow_probability.python.distributions.kullback_leibler.six"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler.augment_kl_xent_docs.merge_doc": {
  "data": {
   "lineno": 257
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler.cross_entropy": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kullback_leibler.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "NotImplementedError",
    "kl_fn",
    "tensorflow.compat.v2.Assert",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.logical_not",
    "tensorflow.compat.v2.math.is_nan",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.reduce_any",
    "tensorflow_probability.python.distributions.kullback_leibler._registered_kl",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kullback_leibler.six": {
  "data": {
   "shadows": "six"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kullback_leibler.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kullback_leibler.tf_inspect": {
  "data": {
   "shadows": "tensorflow.python.util.tf_inspect"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main",
    "tensorflow_probability.python.distributions.kullback_leibler._DIVERGENCES",
    "tensorflow_probability.python.distributions.kullback_leibler._registered_kl"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest._testIndirectRegistration": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "Sub1",
    "Sub11",
    "Sub2",
    "fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest._testIndirectRegistration.Sub1": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.normal.Normal"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest._testIndirectRegistration.Sub1.entropy": {
  "data": {
   "lineno": 103
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest._testIndirectRegistration.Sub11": {
  "data": {
   "lineno": 111
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest._testIndirectRegistration.Sub11.entropy": {
  "data": {
   "lineno": 113
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest._testIndirectRegistration.Sub2": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.normal.Normal"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest._testIndirectRegistration.Sub2.entropy": {
  "data": {
   "lineno": 108
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest._testIndirectRegistration._kl11": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest._testIndirectRegistration._kl12": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest._testIndirectRegistration._kl21": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testDomainErrorExceptions": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "MyDistException",
    "float",
    "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testDomainErrorExceptions.MyDistException": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.normal.Normal"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testDomainErrorExceptions._kl": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "float",
    "tensorflow.compat.v2.identity",
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testExactRegistrationsAllMatch": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.kullback_leibler_test._DIVERGENCES",
    "tensorflow_probability.python.distributions.kullback_leibler_test._registered_kl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testFunctionCrossEntropy": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.kullback_leibler.cross_entropy"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testIndirectRegistrationCrossEntropy": {
  "data": {
   "lineno": 153
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testIndirectRegistrationKLFun": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testIndirectRegistrationKLSelf": {
  "data": {
   "lineno": 149
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testMissing": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "MyDist",
    "NotImplementedError",
    "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testMissing.MyDist": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testMissing.MyDist.__init__": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "MyDist",
    "super",
    "tensorflow.compat.v2.float32",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testRegistration": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "MyDist",
    "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testRegistration.MyDist": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.normal.Normal"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testRegistration._kl": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testRegistrationFailures": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "MyDist",
    "TypeError",
    "ValueError",
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.KLTest.testRegistrationFailures.MyDist": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.normal.Normal"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test._DIVERGENCES": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test._registered_kl": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.distribution_lib": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.kullback_leibler": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.normal": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.normal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kullback_leibler_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kumaraswamy": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.Kumaraswamy": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.Kumaraswamy.__init__": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.bijectors.kumaraswamy.Kumaraswamy",
    "tensorflow_probability.python.distributions.kumaraswamy.Kumaraswamy",
    "tensorflow_probability.python.distributions.uniform.Uniform",
    "tensorflow_probability.python.internal.distribution_util.get_broadcast_shape",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.Kumaraswamy._entropy": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log",
    "tensorflow_probability.python.distributions.kumaraswamy._harmonic_number"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.Kumaraswamy._mean": {
  "data": {
   "lineno": 204
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.Kumaraswamy._mode": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "numpy.nan",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.fill",
    "tensorflow.compat.v2.ones",
    "tensorflow_probability.python.internal.assert_util.assert_less",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.Kumaraswamy._moment": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.math.lbeta",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.Kumaraswamy._params_event_ndims": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.Kumaraswamy._variance": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "tensorflow.compat.v2.square"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.Kumaraswamy.concentration0": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.Kumaraswamy.concentration1": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.__all__": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.kumaraswamy._harmonic_number": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.digamma",
    "tensorflow.compat.v2.ones"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy._kumaraswamy_sample_note": {
  "data": {
   "lineno": 37
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.kumaraswamy_bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.kumaraswamy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.transformed_distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.transformed_distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kumaraswamy.uniform": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.uniform"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.distributions.kumaraswamy_test.try_import"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testAProperty": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.kumaraswamy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testBProperty": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.kumaraswamy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testComplexShapes": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "numpy.random.rand",
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.kumaraswamy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testComplexShapesBroadcast": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "numpy.random.rand",
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.kumaraswamy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testKumaraswamyCdf": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.float32",
    "numpy.float64",
    "numpy.ones",
    "numpy.random.random",
    "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_cdf",
    "tensorflow_probability.python.distributions.kumaraswamy_test.stats",
    "tensorflow_probability.python.distributions.kumaraswamy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testKumaraswamyEntropy": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.log",
    "tensorflow.compat.v1.Session",
    "tensorflow_probability.python.distributions.kumaraswamy_test._harmonic_number",
    "tensorflow_probability.python.distributions.kumaraswamy_test.stats",
    "tensorflow_probability.python.distributions.kumaraswamy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testKumaraswamyLogCdf": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.float32",
    "numpy.float64",
    "numpy.ones",
    "numpy.random.random",
    "tensorflow.exp",
    "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_cdf",
    "tensorflow_probability.python.distributions.kumaraswamy_test.stats",
    "tensorflow_probability.python.distributions.kumaraswamy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testKumaraswamyMean": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "tensorflow.compat.v1.Session",
    "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_moment",
    "tensorflow_probability.python.distributions.kumaraswamy_test.stats",
    "tensorflow_probability.python.distributions.kumaraswamy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testKumaraswamyMode": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.compat.v1.Session",
    "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_mode",
    "tensorflow_probability.python.distributions.kumaraswamy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testKumaraswamyModeEnableAllowNanStats": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.nan",
    "tensorflow.compat.v1.Session",
    "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_mode",
    "tensorflow_probability.python.distributions.kumaraswamy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testKumaraswamyModeInvalid": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.compat.v1.Session",
    "tensorflow_probability.python.distributions.kumaraswamy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testKumaraswamySample": {
  "data": {
   "lineno": 279,
   "symbols_in_volume": [
    "numpy.any",
    "numpy.cov",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_cdf",
    "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_moment",
    "tensorflow_probability.python.distributions.kumaraswamy_test.stats",
    "tensorflow_probability.python.distributions.kumaraswamy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testKumaraswamySampleMultidimensional": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": [
    "numpy.any",
    "numpy.float32",
    "numpy.random.rand",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_moment",
    "tensorflow_probability.python.distributions.kumaraswamy_test.stats",
    "tensorflow_probability.python.distributions.kumaraswamy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testKumaraswamySampleMultipleTimes": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": [
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow_probability.python.distributions.kumaraswamy_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testKumaraswamyVariance": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "tensorflow.compat.v1.Session",
    "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_moment",
    "tensorflow_probability.python.distributions.kumaraswamy_test.stats",
    "tensorflow_probability.python.distributions.kumaraswamy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testPdfAStretchedInBroadcastWhenLowerRank": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_pdf",
    "tensorflow_probability.python.distributions.kumaraswamy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testPdfAStretchedInBroadcastWhenSameRank": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_pdf",
    "tensorflow_probability.python.distributions.kumaraswamy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testPdfTwoBatches": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_pdf",
    "tensorflow_probability.python.distributions.kumaraswamy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testPdfTwoBatchesNontrivialX": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_pdf",
    "tensorflow_probability.python.distributions.kumaraswamy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testPdfUniformZeroBatch": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_pdf",
    "tensorflow_probability.python.distributions.kumaraswamy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testPdfXProper": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.kumaraswamy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testPdfXStretchedInBroadcastWhenLowerRank": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_pdf",
    "tensorflow_probability.python.distributions.kumaraswamy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testPdfXStretchedInBroadcastWhenSameRank": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_pdf",
    "tensorflow_probability.python.distributions.kumaraswamy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.KumaraswamyTest.testSimpleShapes": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "numpy.random.rand",
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.kumaraswamy_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test._harmonic_number": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "numpy.asarray",
    "tensorflow_probability.python.distributions.kumaraswamy_test.special"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_cdf": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "numpy.asarray"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_mode": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "numpy.asarray"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_moment": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "numpy.asarray",
    "tensorflow_probability.python.distributions.kumaraswamy_test.special"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test._kumaraswamy_pdf": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "numpy.asarray"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.special": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.stats": {
  "data": {
   "lineno": 41
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.tfd": {
  "data": {
   "lineno": 43
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.kumaraswamy_test.try_import": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "ImportError",
    "str",
    "tensorflow.compat.v1.logging.warning",
    "tensorflow_probability.python.distributions.kumaraswamy_test.importlib"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace.__init__": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.laplace.Laplace",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._batch_shape": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._batch_shape_tensor": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._cdf": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.sign"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._entropy": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.distributions.laplace.math"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._event_shape": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._event_shape_tensor": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._log_cdf": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.special_math.log_cdf_laplace"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._log_normalization": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log",
    "tensorflow_probability.python.distributions.laplace.math"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._log_prob": {
  "data": {
   "lineno": 167
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._log_survival_function": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.special_math.log_cdf_laplace"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._log_unnormalized_prob": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "tensorflow.compat.v2.abs"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._mean": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "tensorflow.compat.v2.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._median": {
  "data": {
   "lineno": 201
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._mode": {
  "data": {
   "lineno": 204
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._param_shapes": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "dict",
    "staticmethod",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._params_event_ndims": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._prob": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "tensorflow.compat.v2.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._sample_n": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "dt",
    "numpy.nextafter",
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.math.log1p",
    "tensorflow.compat.v2.random.uniform",
    "tensorflow.compat.v2.sign",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._stddev": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.distributions.laplace.math"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace._z": {
  "data": {
   "lineno": 207
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace.loc": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.Laplace.scale": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.__all__": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.laplace._kl_laplace_laplace": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL",
    "tensorflow_probability.python.distributions.laplace.Laplace"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.laplace.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.laplace.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.laplace.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.laplace.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.laplace.kullback_leibler": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.laplace.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.laplace.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.laplace.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.laplace.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.laplace.special_math": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.special_math"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.laplace.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.laplace_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.distributions.laplace_test.try_import"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest._assertIntegral": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": [
    "sorted",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest._kstest": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.laplace_test.stats"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceCDF": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.laplace_test.stats",
    "tensorflow_probability.python.distributions.laplace_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceEntropy": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.laplace_test.stats",
    "tensorflow_probability.python.distributions.laplace_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceFullyReparameterized": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.distributions.laplace_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceLaplaceKL": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": [
    "int",
    "numpy.array",
    "numpy.float32",
    "tensorflow.abs",
    "tensorflow.exp",
    "tensorflow.math.log",
    "tensorflow.reduce_mean",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.distributions.laplace_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceLogCDF": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.laplace_test.stats",
    "tensorflow_probability.python.distributions.laplace_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceLogPDF": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.laplace_test.stats",
    "tensorflow_probability.python.distributions.laplace_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceLogPDFMultidimensional": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.laplace_test.stats",
    "tensorflow_probability.python.distributions.laplace_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceLogPDFMultidimensionalBroadcasting": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.laplace_test.stats",
    "tensorflow_probability.python.distributions.laplace_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceLogSurvivalFunction": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.laplace_test.stats",
    "tensorflow_probability.python.distributions.laplace_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceMean": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.laplace_test.stats",
    "tensorflow_probability.python.distributions.laplace_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceMode": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.laplace_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceNonPositiveInitializationParamsRaises": {
  "data": {
   "lineno": 326,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.laplace_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplacePdfOfSampleMultiDims": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.laplace_test.stats",
    "tensorflow_probability.python.distributions.laplace_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceSample": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.laplace_test.stats",
    "tensorflow_probability.python.distributions.laplace_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceSampleMultiDimensional": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": [
    "enumerate",
    "numpy.arange",
    "numpy.array",
    "numpy.float32",
    "numpy.reshape",
    "numpy.zeros_like",
    "tensorflow_probability.python.distributions.laplace_test.stats",
    "tensorflow_probability.python.distributions.laplace_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceShape": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.laplace_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceStd": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.laplace_test.stats",
    "tensorflow_probability.python.distributions.laplace_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.LaplaceTest.testLaplaceVariance": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.laplace_test.stats",
    "tensorflow_probability.python.distributions.laplace_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.laplace_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.laplace_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.laplace_test.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.laplace_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.laplace_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.laplace_test.stats": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.laplace_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.laplace_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.laplace_test.tfd": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.laplace_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.laplace_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.laplace_test.try_import": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "ImportError",
    "str",
    "tensorflow.compat.v1.logging.warning",
    "tensorflow_probability.python.distributions.laplace_test.importlib"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm": {
  "data": {
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm.collections"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.BackwardPassState": {
  "data": {
   "lineno": 1155
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.KalmanFilterState": {
  "data": {
   "lineno": 1148
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel.__init__": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "_maybe_make_callable",
    "_maybe_make_callable_from_linop",
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm._check_equal_shape",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_value",
    "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel.__init__._maybe_make_callable": {
  "data": {
   "lineno": 372,
   "symbols_in_volume": [
    "callable"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel.__init__._maybe_make_callable_from_linop": {
  "data": {
   "lineno": 354,
   "symbols_in_volume": [
    "_maybe_make_linop",
    "callable"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel.__init__._maybe_make_linop": {
  "data": {
   "lineno": 346,
   "symbols_in_volume": [
    "isinstance",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm.tfl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel._batch_shape": {
  "data": {
   "lineno": 561,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel._batch_shape_tensor": {
  "data": {
   "lineno": 544,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel._event_shape": {
  "data": {
   "lineno": 578,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.get_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel._event_shape_tensor": {
  "data": {
   "lineno": 584,
   "symbols_in_volume": [
    "tensorflow.compat.v2.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel._joint_covariances": {
  "data": {
   "lineno": 1041,
   "symbols_in_volume": [
    "_propagate_cov",
    "build_kalman_cov_step",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.scan",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm._broadcast_to_shape",
    "tensorflow_probability.python.internal.distribution_util.move_dimension"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel._joint_mean": {
  "data": {
   "lineno": 982,
   "symbols_in_volume": [
    "_propagate_mean",
    "build_kalman_mean_step",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.scan",
    "tensorflow.compat.v2.squeeze",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm._broadcast_to_shape",
    "tensorflow_probability.python.internal.distribution_util.move_dimension"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel._joint_sample_n": {
  "data": {
   "lineno": 591,
   "symbols_in_volume": [
    "build_kalman_sample_step",
    "stream",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.scan",
    "tensorflow.compat.v2.squeeze",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm._augment_sample_shape",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream",
    "tensorflow_probability.python.internal.distribution_util.move_dimension",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel._log_prob": {
  "data": {
   "lineno": 683,
   "symbols_in_volume": [
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel._mean": {
  "data": {
   "lineno": 978
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel._prob": {
  "data": {
   "lineno": 670,
   "symbols_in_volume": [
    "tensorflow.compat.v2.exp",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel._sample_n": {
  "data": {
   "lineno": 587
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel._variance": {
  "data": {
   "lineno": 1094,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.diag_part"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel.backward_smoothing_pass": {
  "data": {
   "lineno": 455,
   "symbols_in_volume": [
    "BackwardPassState",
    "build_backward_pass_step",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.scan",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.distribution_util.move_dimension"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel.forward_filter": {
  "data": {
   "lineno": 697,
   "symbols_in_volume": [
    "KalmanFilterState",
    "ValueError",
    "_propagate_cov",
    "_propagate_mean",
    "build_kalman_filter_step",
    "tensorflow.compat.v2.bool",
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.broadcast_static_shape",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.rank",
    "tensorflow.compat.v2.scan",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm._broadcast_to_shape",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm._check_equal_shape",
    "tensorflow_probability.python.internal.assert_util.assert_greater_equal",
    "tensorflow_probability.python.internal.distribution_util.move_dimension",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel.latents_to_observations": {
  "data": {
   "lineno": 1098,
   "symbols_in_volume": [
    "build_pushforward_latents_step",
    "pushforward_latents_step",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.scan",
    "tensorflow_probability.python.internal.distribution_util.move_dimension"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.LinearGaussianStateSpaceModel.posterior_marginals": {
  "data": {
   "lineno": 915,
   "symbols_in_volume": [
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.name_scope"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm._augment_sample_shape": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "NotImplementedError",
    "ValueError",
    "any",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.assert_util.assert_greater_equal",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_shape",
    "tensorflow_probability.python.internal.tensorshape_util.as_list",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm._broadcast_to_shape": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "tensorflow.compat.v2.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm._check_equal_shape": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.compat.v2.TensorShape",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.tensorshape_util.as_list",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm._propagate_cov": {
  "data": {
   "lineno": 1729
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm._propagate_mean": {
  "data": {
   "lineno": 1724,
   "symbols_in_volume": [
    "tensorflow.compat.v2.newaxis"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.backward_smoothing_update": {
  "data": {
   "lineno": 1199,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.cholesky",
    "tensorflow.compat.v2.linalg.cholesky_solve",
    "tensorflow.compat.v2.linalg.matmul"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_backward_pass_step": {
  "data": {
   "lineno": 1159
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_backward_pass_step.backward_pass_step": {
  "data": {
   "lineno": 1172,
   "symbols_in_volume": [
    "backward_smoothing_update",
    "get_transition_matrix_for_timestep",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm.BackwardPassState"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_cov_step": {
  "data": {
   "lineno": 1577
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_cov_step.cov_step": {
  "data": {
   "lineno": 1604,
   "symbols_in_volume": [
    "_propagate_cov",
    "get_observation_matrix_for_timestep",
    "get_observation_noise_for_timestep",
    "get_transition_matrix_for_timestep",
    "get_transition_noise_for_timestep"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_filter_step": {
  "data": {
   "lineno": 1276
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_filter_step.kalman_filter_step": {
  "data": {
   "lineno": 1303,
   "symbols_in_volume": [
    "_propagate_mean",
    "get_observation_matrix_for_timestep",
    "get_observation_noise_for_timestep",
    "get_transition_matrix_for_timestep",
    "get_transition_noise_for_timestep",
    "isinstance",
    "kalman_transition",
    "linear_gaussian_update",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.broadcast_to",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm.KalmanFilterState",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_mean_step": {
  "data": {
   "lineno": 1535
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_mean_step.mean_step": {
  "data": {
   "lineno": 1562,
   "symbols_in_volume": [
    "_propagate_mean",
    "get_observation_matrix_for_timestep",
    "get_observation_noise_for_timestep",
    "get_transition_matrix_for_timestep",
    "get_transition_noise_for_timestep"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_sample_step": {
  "data": {
   "lineno": 1622
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_sample_step.sample_step": {
  "data": {
   "lineno": 1657,
   "symbols_in_volume": [
    "get_observation_matrix_for_timestep",
    "get_observation_noise_for_timestep",
    "get_transition_matrix_for_timestep",
    "get_transition_noise_for_timestep",
    "stream",
    "tensorflow.compat.v2.newaxis",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm._augment_sample_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_pushforward_latents_step": {
  "data": {
   "lineno": 1688,
   "symbols_in_volume": [
    "pushforward_latents_step"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_pushforward_latents_step.pushforward_latents_step": {
  "data": {
   "lineno": 1706,
   "symbols_in_volume": [
    "_propagate_cov",
    "_propagate_mean",
    "get_observation_matrix_for_timestep",
    "get_observation_noise_for_timestep"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.independent": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.independent"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.kalman_transition": {
  "data": {
   "lineno": 1522,
   "symbols_in_volume": [
    "_propagate_cov",
    "_propagate_mean"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.linear_gaussian_update": {
  "data": {
   "lineno": 1397,
   "symbols_in_volume": [
    "_propagate_mean",
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow.compat.v2.linalg.cholesky",
    "tensorflow.compat.v2.linalg.cholesky_solve",
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.linalg.matmul",
    "tensorflow.compat.v2.linalg.set_diag",
    "tensorflow.compat.v2.sqrt",
    "tensorflow_probability.python.distributions.independent.Independent",
    "tensorflow_probability.python.distributions.mvn_tril.MultivariateNormalTriL",
    "tensorflow_probability.python.distributions.normal.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.mvn_tril": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.mvn_tril"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.normal": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.normal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.seed_stream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm.tfl": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.linalg",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.AugmentSampleShapeTestDynamic": {
  "data": {
   "lineno": 1338,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._AugmentSampleShapeTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.AugmentSampleShapeTestDynamic.assertRaisesError": {
  "data": {
   "lineno": 1341,
   "symbols_in_volume": [
    "Exception",
    "tensorflow.executing_eagerly"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.AugmentSampleShapeTestDynamic.build_inputs": {
  "data": {
   "lineno": 1347,
   "symbols_in_volume": [
    "numpy.asarray",
    "numpy.int32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.random.normal",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.AugmentSampleShapeTestDynamic.maybe_evaluate": {
  "data": {
   "lineno": 1357
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.AugmentSampleShapeTestStatic": {
  "data": {
   "lineno": 1321,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._AugmentSampleShapeTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.AugmentSampleShapeTestStatic.assertRaisesError": {
  "data": {
   "lineno": 1324,
   "symbols_in_volume": [
    "Exception"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.AugmentSampleShapeTestStatic.build_inputs": {
  "data": {
   "lineno": 1327,
   "symbols_in_volume": [
    "numpy.asarray",
    "numpy.int32",
    "tensorflow.random.normal",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.AugmentSampleShapeTestStatic.maybe_evaluate": {
  "data": {
   "lineno": 1334
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.BackwardPassState": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.linear_gaussian_ssm.BackwardPassState"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.BatchTest": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.BatchTest._build_random_model": {
  "data": {
   "lineno": 346,
   "symbols_in_volume": [
    "tensorflow.nn.softplus",
    "tensorflow.random.normal",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.BatchTest._sanity_check_shapes": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": [
    "list",
    "tensorflow.random.normal",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.BatchTest.setUp": {
  "data": {
   "lineno": 343
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.BatchTest.testBroadcastBatchShape": {
  "data": {
   "lineno": 463
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.BatchTest.testConstantBatchShape": {
  "data": {
   "lineno": 440
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.BatchTest.testLatentsToObservationsWorksWithBatchShape": {
  "data": {
   "lineno": 512
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.IIDNormalTestDynamic32": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._IIDNormalTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.IIDNormalTestStatic32": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._IIDNormalTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.IIDNormalTestStatic64": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._IIDNormalTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.KalmanFilterState": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.linear_gaussian_ssm.KalmanFilterState"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.KalmanSmootherTest": {
  "data": {
   "lineno": 777,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.KalmanSmootherTest.build_kf": {
  "data": {
   "lineno": 780,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.ones",
    "numpy.zeros",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.KalmanSmootherTest.testKalmanSmoother": {
  "data": {
   "lineno": 809,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.KalmanStepsTestDynamic": {
  "data": {
   "lineno": 1265,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.KalmanStepsTestDynamic.build_tensor": {
  "data": {
   "lineno": 1273,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.KalmanStepsTestDynamic.setUp": {
  "data": {
   "lineno": 1270,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.KalmanStepsTestStatic": {
  "data": {
   "lineno": 1253,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.KalmanStepsTestStatic.build_tensor": {
  "data": {
   "lineno": 1261,
   "symbols_in_volume": [
    "tensorflow.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.KalmanStepsTestStatic.setUp": {
  "data": {
   "lineno": 1258,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.MissingObservationsTests": {
  "data": {
   "lineno": 539,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.MissingObservationsTests.make_model": {
  "data": {
   "lineno": 544,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.zeros",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.MissingObservationsTests.testForwardFilterWithDynamicShapeMask": {
  "data": {
   "lineno": 572,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.bool",
    "numpy.float32",
    "numpy.inf",
    "numpy.nan",
    "numpy.newaxis",
    "numpy.zeros",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.MissingObservationsTests.testForwardFilterWithDynamicShapeMask.collapsed_transition_noise_model": {
  "data": {
   "lineno": 601,
   "symbols_in_volume": [
    "tensorflow.sqrt",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.MissingObservationsTests.testGradientsOfMaskedNaNsAreFinite": {
  "data": {
   "lineno": 666,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow_probability.math.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.MissingObservationsTests.testGradientsOfMaskedNaNsAreFinite.lp_from_scale_diag": {
  "data": {
   "lineno": 667,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.bool",
    "numpy.float32",
    "numpy.inf",
    "numpy.nan",
    "numpy.newaxis",
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.MissingObservationsTests.testMaskWhenModelHasBatchShape": {
  "data": {
   "lineno": 691,
   "symbols_in_volume": [
    "numpy.all",
    "numpy.float32",
    "numpy.inf",
    "numpy.isfinite",
    "numpy.newaxis",
    "numpy.random.randn",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfd",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.MissingObservationsTests.testMaskWhenTimeSeriesHasSampleShape": {
  "data": {
   "lineno": 733,
   "symbols_in_volume": [
    "ValueError",
    "numpy.all",
    "numpy.concatenate",
    "numpy.float32",
    "numpy.inf",
    "numpy.isfinite",
    "numpy.newaxis",
    "numpy.random.randn",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.SanityChecks": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.SanityChecks.testTimeVaryingNoise": {
  "data": {
   "lineno": 303,
   "symbols_in_volume": [
    "numpy.log",
    "range",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.SanityChecks.testTimeVaryingNoise.observation_noise": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.float32",
    "tensorflow.math.log",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.SanityChecks.testTimeVaryingNoise.transition_noise": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.float32",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.SanityChecks.testTimeVaryingOperators": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": [
    "numpy.sqrt",
    "range",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.SanityChecks.testTimeVaryingOperators.observation_matrix": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.float32",
    "tensorflow.linalg.LinearOperatorFullMatrix",
    "tensorflow.sqrt"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.SanityChecks.testTimeVaryingOperators.transition_matrix": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.float32",
    "tensorflow.linalg.LinearOperatorFullMatrix"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.SanityChecks.testVariance": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "numpy.asarray",
    "range",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.SanityChecks.test_deterministic_system": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "numpy.asarray",
    "range",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._AugmentSampleShapeTest": {
  "data": {
   "lineno": 1278,
   "symbols_in_volume": [
    "object",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._AugmentSampleShapeTest.testAugmentsShape": {
  "data": {
   "lineno": 1281,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.linear_gaussian_ssm._augment_sample_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._AugmentSampleShapeTest.testNotPrefixThrowsError": {
  "data": {
   "lineno": 1301,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.linear_gaussian_ssm._augment_sample_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._AugmentSampleShapeTest.testSameShape": {
  "data": {
   "lineno": 1290,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.linear_gaussian_ssm._augment_sample_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._AugmentSampleShapeTest.testTooManyDimsThrowsError": {
  "data": {
   "lineno": 1310,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.linear_gaussian_ssm._augment_sample_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._IIDNormalTest": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "object",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._IIDNormalTest._build_iid_normal_model": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "numpy.linalg.qr",
    "numpy.random.randn",
    "numpy.zeros",
    "random_orthogonal_matrix",
    "tensorflow.ones",
    "tensorflow.sqrt",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._IIDNormalTest._build_placeholder": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "numpy.asarray",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._IIDNormalTest.setUp": {
  "data": {
   "lineno": 50
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._IIDNormalTest.testIIDNormalLogprob": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "tensorflow.convert_to_tensor",
    "tensorflow.reduce_sum",
    "tensorflow.sqrt",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._IIDNormalTest.testIIDNormalSample": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "numpy.mean",
    "numpy.ones",
    "numpy.sqrt",
    "numpy.var",
    "numpy.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest": {
  "data": {
   "lineno": 898,
   "symbols_in_volume": [
    "object",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest.setUp": {
  "data": {
   "lineno": 901,
   "symbols_in_volume": [
    "numpy.asarray",
    "numpy.float32",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfd",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest.setUp.get_observation_noise_for_timestep": {
  "data": {
   "lineno": 919,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest.testBackwardPassStep": {
  "data": {
   "lineno": 1074,
   "symbols_in_volume": [
    "get_transition_matrix_for_timestep",
    "smooth_step",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm.BackwardPassState",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_backward_pass_step",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest.testBackwardSmoothingStep": {
  "data": {
   "lineno": 1038,
   "symbols_in_volume": [
    "get_transition_matrix_for_timestep",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm.backward_smoothing_update",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest.testCovStep": {
  "data": {
   "lineno": 1208,
   "symbols_in_volume": [
    "cov_step",
    "numpy.asarray",
    "numpy.diag",
    "numpy.dot",
    "numpy.eye",
    "numpy.float32",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_cov_step"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest.testKalmanFilterStep": {
  "data": {
   "lineno": 926,
   "symbols_in_volume": [
    "filter_step",
    "numpy.asarray",
    "numpy.float32",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm.KalmanFilterState",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_filter_step"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest.testKalmanTransition": {
  "data": {
   "lineno": 984,
   "symbols_in_volume": [
    "numpy.asarray",
    "numpy.dot",
    "numpy.eye",
    "numpy.float32",
    "numpy.newaxis",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm.kalman_transition"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest.testLinearGaussianObservation": {
  "data": {
   "lineno": 1004,
   "symbols_in_volume": [
    "numpy.asarray",
    "numpy.float32",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm.linear_gaussian_update"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest.testLinearGaussianObservationScalarPath": {
  "data": {
   "lineno": 1122,
   "symbols_in_volume": [
    "numpy.asarray",
    "numpy.float32",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm.linear_gaussian_update",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfd",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest.testMeanStep": {
  "data": {
   "lineno": 1190,
   "symbols_in_volume": [
    "mean_step",
    "numpy.asarray",
    "numpy.dot",
    "numpy.float32",
    "numpy.newaxis",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_mean_step"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._KalmanStepsTest.testPushforwardLatentsStepIsCorrect": {
  "data": {
   "lineno": 1229,
   "symbols_in_volume": [
    "numpy.asarray",
    "numpy.diag",
    "numpy.dot",
    "numpy.float32",
    "numpy.newaxis",
    "pushforward_step",
    "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_pushforward_latents_step"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test._augment_sample_shape": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.linear_gaussian_ssm._augment_sample_shape"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.backward_smoothing_update": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.linear_gaussian_ssm.backward_smoothing_update"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.build_backward_pass_step": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_backward_pass_step"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.build_kalman_cov_step": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_cov_step"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.build_kalman_filter_step": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_filter_step"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.build_kalman_mean_step": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_kalman_mean_step"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.build_pushforward_latents_step": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.linear_gaussian_ssm.build_pushforward_latents_step"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.kalman_transition": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.linear_gaussian_ssm.kalman_transition"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.linear_gaussian_update": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.linear_gaussian_ssm.linear_gaussian_update"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfd": {
  "data": {
   "lineno": 43
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfl": {
  "data": {
   "lineno": 44
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.linear_gaussian_ssm_test.tfp_test_case": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_case"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lkj": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ.__init__": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.lkj.LKJ",
    "tensorflow_probability.python.internal.assert_util.assert_non_negative",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ._batch_shape": {
  "data": {
   "lineno": 181
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ._batch_shape_tensor": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ._event_shape": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ._event_shape_tensor": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ._identity": {
  "data": {
   "lineno": 444,
   "symbols_in_volume": [
    "tensorflow.compat.v2.eye",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ._log_normalization": {
  "data": {
   "lineno": 412,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.pi",
    "range",
    "tensorflow.compat.v2.math.lgamma",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ._log_prob": {
  "data": {
   "lineno": 362
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ._log_unnorm_prob": {
  "data": {
   "lineno": 371,
   "symbols_in_volume": [
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.linalg.slogdet",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ._mean": {
  "data": {
   "lineno": 434
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ._params_event_ndims": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ._sample_n": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "range",
    "seed",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.linalg.set_diag",
    "tensorflow.compat.v2.matmul",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.sqrt",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.distributions.beta.Beta",
    "tensorflow_probability.python.distributions.lkj._replicate",
    "tensorflow_probability.python.distributions.lkj._uniform_unit_norm",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream",
    "tensorflow_probability.python.internal.dtype_util.is_floating",
    "tensorflow_probability.python.internal.dtype_util.name"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ._validate_correlationness": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.linalg.matrix_transpose",
    "tensorflow_probability.python.internal.assert_util.assert_less_equal",
    "tensorflow_probability.python.internal.assert_util.assert_near",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ._validate_dimension": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.tensorshape_util.dims",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ.concentration": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ.dimension": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.LKJ.input_output_cholesky": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.__all__": {
  "data": {
   "lineno": 42
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.lkj._replicate": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.expand_dims",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.tile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj._uniform_unit_norm": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "seed",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.norm",
    "tensorflow_probability.python.distributions.normal.Normal",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lkj.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lkj.beta": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.beta"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lkj.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lkj.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lkj.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lkj.normal": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.normal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lkj.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lkj.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lkj.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lkj.seed_stream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lkj.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lkj.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lkj_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "absl.testing.parameterized.parameters",
    "numpy.float32",
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest._testSampleConsistentLogProbInterval": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "dtype",
    "int",
    "numpy.array",
    "numpy.float32",
    "tensorflow.exp",
    "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_in_interval_by_dkwm",
    "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm",
    "tensorflow_probability.python.distributions.lkj_test._det_ok_mask",
    "tensorflow_probability.python.distributions.lkj_test.tfd",
    "tensorflow_probability.python.distributions.lkj_test.volume_bounds",
    "tensorflow_probability.python.internal.assert_util.assert_less"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest._testSampleLogProbExact": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "dtype",
    "int",
    "numpy.array",
    "numpy.float32",
    "tensorflow.exp",
    "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_equal_by_dkwm",
    "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm",
    "tensorflow_probability.python.distributions.lkj_test._det_ok_mask",
    "tensorflow_probability.python.distributions.lkj_test.tfd",
    "tensorflow_probability.python.internal.assert_util.assert_less"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest.testDimensionGuard": {
  "data": {
   "lineno": 318,
   "symbols_in_volume": [
    "ValueError",
    "dtype",
    "tensorflow.eye",
    "tensorflow_probability.python.distributions.lkj_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest.testMean": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": [
    "dtype",
    "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_equal_by_dkwm",
    "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm",
    "tensorflow_probability.python.distributions.lkj_test.tfd",
    "tensorflow_probability.python.internal.assert_util.assert_less"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest.testNormConst2D": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "dtype",
    "numpy.log",
    "tensorflow_probability.python.distributions.lkj_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest.testNormConst3D": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "dtype",
    "numpy.log",
    "numpy.pi",
    "tensorflow_probability.python.distributions.lkj_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest.testOneDimension": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": [
    "dtype",
    "tensorflow_probability.python.distributions.lkj_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest.testSampleConsistentLogProb2": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "dtype",
    "int",
    "numpy.array",
    "numpy.sqrt",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest.testSampleConsistentLogProbInterval3": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "dtype",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest.testSampleConsistentLogProbInterval4": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": [
    "dtype",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest.testSampleConsistentLogProbInterval5": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": [
    "dtype",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTest.testZeroDimension": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": [
    "dtype",
    "tensorflow_probability.python.distributions.lkj_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTestGraphOnly": {
  "data": {
   "lineno": 360,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.lkj_test.LKJTestGraphOnly.testDimensionGuardDynamicShape": {
  "data": {
   "lineno": 362,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow.eye",
    "tensorflow_probability.python.distributions.lkj_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test._det_ok_mask": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.exp",
    "tensorflow.linalg.diag_part",
    "tensorflow.linalg.slogdet",
    "tensorflow.math.log",
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lkj_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lkj_test.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lkj_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lkj_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lkj_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lkj_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lkj_test.st": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.internal.statistical_testing"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lkj_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lkj_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lkj_test.tfd": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.lkj_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lkj_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lkj_test.volume_bounds": {
  "data": {
   "lineno": 54
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.logistic": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic.__init__": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.logistic.Logistic",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._batch_shape": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._batch_shape_tensor": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._cdf": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "tensorflow.compat.v2.sigmoid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._entropy": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._event_shape": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._event_shape_tensor": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._log_cdf": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "tensorflow.compat.v2.nn.softplus"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._log_normalization": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._log_prob": {
  "data": {
   "lineno": 188
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._log_survival_function": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "tensorflow.compat.v2.nn.softplus"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._log_unnormalized_prob": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "tensorflow.compat.v2.nn.softplus"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._mean": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "tensorflow.compat.v2.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._mode": {
  "data": {
   "lineno": 221
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._param_shapes": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "dict",
    "staticmethod",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._params_event_ndims": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._sample_n": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "numpy.finfo",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.math.log1p",
    "tensorflow.compat.v2.random.uniform",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._stddev": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "tensorflow.compat.v2.ones_like",
    "tensorflow_probability.python.distributions.logistic.math"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._survival_function": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "tensorflow.compat.v2.sigmoid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic._z": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "tensorflow.compat.v2.name_scope"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic.loc": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.Logistic.scale": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.logistic.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.logistic.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.logistic.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.logistic.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.logistic.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.logistic.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.logistic.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.logistic.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.logistic.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.logistic_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest.testDtype": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.float64",
    "tensorflow_probability.python.distributions.logistic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest.testLogisticCDF": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "scipy.stats.logistic.cdf",
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.python.distributions.logistic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest.testLogisticEntropy": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "scipy.stats.logistic.entropy",
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.python.distributions.logistic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest.testLogisticLogCDF": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "scipy.stats.logistic.logcdf",
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.python.distributions.logistic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest.testLogisticLogProb": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "scipy.stats.logistic.logpdf",
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.python.distributions.logistic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest.testLogisticLogSurvivalFunction": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "scipy.stats.logistic.logsf",
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.python.distributions.logistic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest.testLogisticMean": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "scipy.stats.logistic.mean",
    "tensorflow_probability.python.distributions.logistic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest.testLogisticSample": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.logistic_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest.testLogisticSurvivalFunction": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "scipy.stats.logistic.sf",
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.python.distributions.logistic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest.testLogisticVariance": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "scipy.stats.logistic.var",
    "tensorflow_probability.python.distributions.logistic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic_test.LogisticTest.testReparameterizable": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.python.distributions.logistic_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.logistic_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.logistic_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.logistic_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.logistic_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.logistic_test.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.logistic_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.logistic_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.logistic_test.tfd": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.logistic_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.logistic_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lognormal": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.lognormal.LogNormal": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.lognormal.LogNormal.__init__": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.bijectors.exp.Exp",
    "tensorflow_probability.python.distributions.lognormal.LogNormal",
    "tensorflow_probability.python.distributions.normal.Normal",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lognormal.LogNormal._entropy": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.pi",
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lognormal.LogNormal._mean": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "tensorflow.compat.v2.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lognormal.LogNormal._mode": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "tensorflow.compat.v2.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lognormal.LogNormal._params_event_ndims": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lognormal.LogNormal._variance": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.math.expm1"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lognormal.LogNormal.loc": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lognormal.LogNormal.scale": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lognormal.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.lognormal.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lognormal.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lognormal.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lognormal.exp_bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.exp"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lognormal.normal": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.normal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lognormal.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lognormal.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lognormal.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lognormal.transformed_distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.transformed_distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lognormal_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.lognormal_test.LogNormalTest": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.lognormal_test.LogNormalTest.setUp": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lognormal_test.LogNormalTest.testLogNormalCDF": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.log",
    "numpy.sqrt",
    "tensorflow.compat.v2.math.erf",
    "tensorflow_probability.python.distributions.lognormal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lognormal_test.LogNormalTest.testLogNormalPDF": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.log",
    "numpy.pi",
    "numpy.sqrt",
    "tensorflow_probability.python.distributions.lognormal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lognormal_test.LogNormalTest.testLogNormalSample": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "numpy.mean",
    "numpy.std",
    "tensorflow_probability.python.distributions.lognormal_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lognormal_test.LogNormalTest.testLogNormalStats": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.float32",
    "numpy.log",
    "numpy.pi",
    "numpy.sqrt",
    "tensorflow_probability.python.distributions.lognormal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.lognormal_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lognormal_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lognormal_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lognormal_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lognormal_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lognormal_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lognormal_test.tfd": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.lognormal_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.lognormal_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.matrix_diag_transform": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util.matrix_diag_transform"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture.__init__": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "all",
    "dict",
    "enumerate",
    "int",
    "isinstance",
    "len",
    "list",
    "locals",
    "range",
    "super",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.size",
    "tensorflow_probability.python.distributions.categorical.Categorical",
    "tensorflow_probability.python.distributions.distribution.Distribution",
    "tensorflow_probability.python.distributions.mixture.Mixture",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
    "tensorflow_probability.python.internal.tensorshape_util.is_compatible_with",
    "tensorflow_probability.python.internal.tensorshape_util.merge_with",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture._batch_shape": {
  "data": {
   "lineno": 226
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture._batch_shape_tensor": {
  "data": {
   "lineno": 223
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture._cat_probs": {
  "data": {
   "lineno": 497,
   "symbols_in_volume": [
    "tensorflow.compat.v2.nn.log_softmax",
    "tensorflow.compat.v2.nn.softmax",
    "tensorflow.compat.v2.unstack",
    "which_softmax"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture._event_shape": {
  "data": {
   "lineno": 232
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture._event_shape_tensor": {
  "data": {
   "lineno": 229
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture._expand_to_event_rank": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "range",
    "tensorflow.compat.v2.expand_dims",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture._log_cdf": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.reduce_logsumexp",
    "tensorflow.compat.v2.stack",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture._log_prob": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.reduce_logsumexp",
    "tensorflow.compat.v2.stack",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture._mean": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "tensorflow.compat.v2.add_n",
    "tensorflow.compat.v2.control_dependencies",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture._sample_n": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": [
    "int",
    "npdt",
    "numpy.array",
    "numpy.int32",
    "range",
    "stream",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.dynamic_partition",
    "tensorflow.compat.v2.dynamic_stitch",
    "tensorflow.compat.v2.gather",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow.compat.v2.one_hot",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.reduce_prod",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.size",
    "tensorflow.compat.v2.stack",
    "tensorflow.compat.v2.tile",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream",
    "tensorflow_probability.python.internal.distribution_util.pad_mixture_dimensions",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
    "tensorflow_probability.python.internal.tensorshape_util.as_list",
    "tensorflow_probability.python.internal.tensorshape_util.concatenate",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
    "tensorflow_probability.python.internal.tensorshape_util.num_elements",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture._stddev": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "len",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.stack",
    "tensorflow_probability.python.internal.distribution_util.mixture_stddev"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture.cat": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture.components": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture.entropy_lower_bound": {
  "data": {
   "lineno": 448,
   "symbols_in_volume": [
    "tensorflow.compat.v2.add_n",
    "tensorflow.compat.v2.control_dependencies",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.Mixture.num_components": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture.categorical": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.categorical"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture.seed_stream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_same_family": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily.__getitem__": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": [
    "Ellipsis",
    "NotImplementedError",
    "isinstance",
    "list",
    "slice",
    "super",
    "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily",
    "tensorflow_probability.python.distributions.mixture_same_family.collections",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily.__init__": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.reduce_prod",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.size",
    "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.distribution_util.pick_vector",
    "tensorflow_probability.python.internal.dtype_util.is_integer",
    "tensorflow_probability.python.internal.dtype_util.name",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
    "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
    "tensorflow_probability.python.internal.tensorshape_util.as_list",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._batch_shape": {
  "data": {
   "lineno": 301,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._batch_shape_tensor": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._covariance": {
  "data": {
   "lineno": 374,
   "symbols_in_volume": [
    "NotImplementedError",
    "_outer_squared_difference",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.internal.distribution_util.pad_mixture_dimensions",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._distributional_transform": {
  "data": {
   "lineno": 469,
   "symbols_in_volume": [
    "ValueError",
    "isinstance",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.math.cumsum",
    "tensorflow.compat.v2.nn.softmax",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.distributions.independent.Independent",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.distribution_util.pad_mixture_dimensions",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._event_shape": {
  "data": {
   "lineno": 309
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._event_shape_tensor": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._log_cdf": {
  "data": {
   "lineno": 350,
   "symbols_in_volume": [
    "tensorflow.compat.v2.nn.log_softmax",
    "tensorflow.compat.v2.reduce_logsumexp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._log_prob": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.nn.log_softmax",
    "tensorflow.compat.v2.reduce_logsumexp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._mean": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.internal.distribution_util.pad_mixture_dimensions"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._pad_sample_dims": {
  "data": {
   "lineno": 398,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.rank",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._reparameterize_sample": {
  "data": {
   "lineno": 407,
   "symbols_in_volume": [
    "_prevent_2nd_derivative",
    "_value_and_batch_jacobian",
    "tensorflow.compat.v2.expand_dims",
    "tensorflow.compat.v2.linalg.triangular_solve",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.stop_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._reparameterize_sample.reshaped_distributional_transform": {
  "data": {
   "lineno": 443,
   "symbols_in_volume": [
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._sample_n": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": [
    "npdt",
    "seed",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.one_hot",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream",
    "tensorflow_probability.python.internal.distribution_util.pad_mixture_dimensions",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily._variance": {
  "data": {
   "lineno": 358,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.math.squared_difference",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.internal.distribution_util.pad_mixture_dimensions"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily.components_distribution": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.MixtureSameFamily.mixture_distribution": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family._outer_squared_difference": {
  "data": {
   "lineno": 536,
   "symbols_in_volume": [
    "tensorflow.compat.v2.newaxis"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family._prevent_2nd_derivative": {
  "data": {
   "lineno": 565,
   "symbols_in_volume": [
    "tensorflow.compat.v2.custom_gradient",
    "tensorflow.compat.v2.identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family._prevent_2nd_derivative.grad": {
  "data": {
   "lineno": 579,
   "symbols_in_volume": [
    "tensorflow.python.ops.array_ops.prevent_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family._value_and_batch_jacobian": {
  "data": {
   "lineno": 542,
   "symbols_in_volume": [
    "f",
    "tensorflow.compat.v2.GradientTape",
    "tensorflow.compat.v2.executing_eagerly",
    "tensorflow.python.ops.parallel_for.gradients.batch_jacobian"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.array_ops": {
  "data": {
   "shadows": "tensorflow.python.ops.array_ops"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.distribution_utils": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.gradients": {
  "data": {
   "shadows": "tensorflow.python.ops.parallel_for.gradients"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.independent": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.independent"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.seed_stream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_same_family.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test.MixtureSameFamilyTestDynamic32": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test.MixtureSameFamilyTestStatic32": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test.MixtureSameFamilyTestStatic64": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest._build_mvndiag_mixture": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "numpy.int32",
    "tensorflow_probability.python.distributions.mixture_same_family_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest._build_tensor": {
  "data": {
   "lineno": 303,
   "symbols_in_volume": [
    "numpy.asarray",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest._shape": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": [
    "tensorflow.shape",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest._testMixtureReparameterizationGradients": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "tensorflow_probability.math.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest._testMixtureReparameterizationGradients.exact": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "mixture_func"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest._testMixtureReparameterizationGradients.sample_estimate": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "mixture_func",
    "tensorflow.math.squared_difference",
    "tensorflow.reduce_mean",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testDeterministicSampling": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": [
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow_probability.python.distributions.mixture_same_family_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testLogCdf": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "tensorflow.newaxis",
    "tensorflow.reduce_logsumexp",
    "tensorflow_probability.python.distributions.mixture_same_family_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testReparameterizationGradientsExponentialScalarComponents": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "mixture_func"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testReparameterizationGradientsExponentialScalarComponents.mixture_func": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mixture_same_family_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testReparameterizationGradientsNormalMatrixComponents": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "mixture_func"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testReparameterizationGradientsNormalMatrixComponents.mixture_func": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mixture_same_family_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testReparameterizationGradientsNormalScalarComponents": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "mixture_func"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testReparameterizationGradientsNormalScalarComponents.mixture_func": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mixture_same_family_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testReparameterizationGradientsNormalVectorComponents": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "mixture_func"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testReparameterizationGradientsNormalVectorComponents.mixture_func": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mixture_same_family_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testReparameterizationOfNonReparameterizedComponents": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.distributions.mixture_same_family_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testSampleAndLogProbBatch": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mixture_same_family_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testSampleAndLogProbBatchMultivariateShapes": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testSampleAndLogProbMultivariateShapes": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testSampleAndLogProbShapesBroadcastMix": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.logical_or",
    "numpy.ones_like",
    "tensorflow_probability.python.distributions.mixture_same_family_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testSampleAndLogProbUnivariateShapes": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mixture_same_family_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testSampleConsistentLogProb": {
  "data": {
   "lineno": 94
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testSampleConsistentMeanCovariance": {
  "data": {
   "lineno": 123
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testSecondGradientIsDisabled": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "LookupError",
    "tensorflow.GradientTape",
    "tensorflow_probability.python.distributions.mixture_same_family_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test._MixtureSameFamilyTest.testVarianceConsistentCovariance": {
  "data": {
   "lineno": 130
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test.test_case": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_case"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test.tfd": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_same_family_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureBenchmark": {
  "data": {
   "lineno": 820,
   "symbols_in_volume": [
    "tensorflow.test.Benchmark"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureBenchmark._runSamplingBenchmark": {
  "data": {
   "lineno": 823,
   "symbols_in_volume": [
    "create_distribution",
    "numpy.random.seed",
    "tensorflow.Graph",
    "tensorflow.compat.v1.ConfigProto",
    "tensorflow.compat.v1.Session",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v1.logging.vlog",
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow.device"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureBenchmark.benchmarkSamplingMVNDiag": {
  "data": {
   "lineno": 850,
   "symbols_in_volume": [
    "create_distribution",
    "tensorflow.compat.v1.logging.vlog",
    "tensorflow.test.is_gpu_available"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureBenchmark.benchmarkSamplingMVNDiag.create_distribution": {
  "data": {
   "lineno": 854,
   "symbols_in_volume": [
    "list",
    "numpy.random.rand",
    "numpy.random.randn",
    "range",
    "tensorflow.compat.v2.Variable",
    "tensorflow_probability.python.distributions.mixture_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureBenchmark.benchmarkSamplingMVNFull": {
  "data": {
   "lineno": 886,
   "symbols_in_volume": [
    "create_distribution",
    "tensorflow.compat.v1.logging.vlog",
    "tensorflow.test.is_gpu_available"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureBenchmark.benchmarkSamplingMVNFull.create_distribution": {
  "data": {
   "lineno": 894,
   "symbols_in_volume": [
    "list",
    "numpy.random.rand",
    "numpy.random.randn",
    "psd",
    "range",
    "tensorflow.compat.v2.Variable",
    "tensorflow.linalg.cholesky",
    "tensorflow_probability.python.distributions.mixture_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureBenchmark.benchmarkSamplingMVNFull.psd": {
  "data": {
   "lineno": 890,
   "symbols_in_volume": [
    "numpy.dot",
    "numpy.stack",
    "numpy.transpose"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureStaticSampleBenchmark": {
  "data": {
   "lineno": 929,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mixture_test.MixtureBenchmark"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureStaticSampleTest": {
  "data": {
   "lineno": 816,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mixture_test.MixtureTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest._testSampleBatchMultivariate": {
  "data": {
   "lineno": 629,
   "symbols_in_volume": [
    "numpy.where",
    "range",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.float32",
    "tensorflow_probability.python.distributions.mixture_test._set_seed",
    "tensorflow_probability.python.distributions.mixture_test._test_capture_mvndiag_sample_outputs",
    "tensorflow_probability.python.distributions.mixture_test.make_multivariate_mixture",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testBrokenShapesDynamic": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.mixture_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testBrokenShapesStatic": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.compat.v1.placeholder",
    "tensorflow.executing_eagerly",
    "tensorflow.float32",
    "tensorflow_probability.python.distributions.mixture_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testBrokenTypes": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "numpy.float16",
    "tensorflow_probability.python.distributions.mixture_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testCdfBatchUnivariate": {
  "data": {
   "lineno": 753,
   "symbols_in_volume": [
    "_batch_univariate_softmax",
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "numpy.multiply",
    "numpy.ones",
    "numpy.random.randn",
    "numpy.random.uniform",
    "numpy.sum",
    "numpy.transpose",
    "range",
    "scipy.stats.norm.cdf",
    "tensorflow_probability.python.distributions.mixture_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testCdfBatchUnivariate._batch_univariate_softmax": {
  "data": {
   "lineno": 760,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.expand_dims",
    "numpy.sum",
    "numpy.tile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testCdfScalarUnivariate": {
  "data": {
   "lineno": 707,
   "symbols_in_volume": [
    "_scalar_univariate_softmax",
    "numpy.array",
    "numpy.dot",
    "numpy.exp",
    "numpy.float32",
    "numpy.ones",
    "numpy.random.randn",
    "numpy.random.uniform",
    "range",
    "scipy.stats.norm.cdf",
    "tensorflow_probability.python.distributions.mixture_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testCdfScalarUnivariate._scalar_univariate_softmax": {
  "data": {
   "lineno": 716,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.max"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testEntropyLowerBoundMultivariate": {
  "data": {
   "lineno": 681,
   "symbols_in_volume": [
    "sum",
    "tensorflow.nn.softmax",
    "tensorflow_probability.python.distributions.mixture_test._swap_first_last_axes",
    "tensorflow_probability.python.distributions.mixture_test.make_multivariate_mixture",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testMeanMultivariate": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": [
    "numpy.expand_dims",
    "sum",
    "tensorflow.nn.softmax",
    "tensorflow_probability.python.distributions.mixture_test._swap_first_last_axes",
    "tensorflow_probability.python.distributions.mixture_test.make_multivariate_mixture",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testMeanUnivariate": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "sum",
    "tensorflow.nn.softmax",
    "tensorflow_probability.python.distributions.mixture_test._swap_first_last_axes",
    "tensorflow_probability.python.distributions.mixture_test.make_univariate_mixture",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testProbBatchMultivariate": {
  "data": {
   "lineno": 484,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.random.randn",
    "sum",
    "tensorflow.nn.softmax",
    "tensorflow_probability.python.distributions.mixture_test._swap_first_last_axes",
    "tensorflow_probability.python.distributions.mixture_test.make_multivariate_mixture",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testProbBatchUnivariate": {
  "data": {
   "lineno": 456,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.random.randn",
    "sum",
    "tensorflow.nn.softmax",
    "tensorflow_probability.python.distributions.mixture_test._swap_first_last_axes",
    "tensorflow_probability.python.distributions.mixture_test.make_univariate_mixture",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testProbScalarMultivariate": {
  "data": {
   "lineno": 427,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.random.randn",
    "sum",
    "tensorflow.nn.softmax",
    "tensorflow_probability.python.distributions.mixture_test.make_multivariate_mixture",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testProbScalarUnivariate": {
  "data": {
   "lineno": 401,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.random.randn",
    "sum",
    "tensorflow.nn.softmax",
    "tensorflow_probability.python.distributions.mixture_test.make_univariate_mixture",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testSampleBatchMultivariateFullyKnownBatchShape": {
  "data": {
   "lineno": 671
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testSampleBatchMultivariateNotFullyKnownBatchShape": {
  "data": {
   "lineno": 674,
   "symbols_in_volume": [
    "tensorflow.executing_eagerly"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testSampleBatchUnivariate": {
  "data": {
   "lineno": 601,
   "symbols_in_volume": [
    "numpy.where",
    "range",
    "tensorflow.float32",
    "tensorflow_probability.python.distributions.mixture_test._set_seed",
    "tensorflow_probability.python.distributions.mixture_test._test_capture_normal_sample_outputs",
    "tensorflow_probability.python.distributions.mixture_test.make_univariate_mixture"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testSampleBimixGamma": {
  "data": {
   "lineno": 802,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mixture_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testSampleMultipleTimes": {
  "data": {
   "lineno": 540,
   "symbols_in_volume": [
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow.int32",
    "tensorflow_probability.python.distributions.mixture_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testSampleScalarBatchMultivariate": {
  "data": {
   "lineno": 575,
   "symbols_in_volume": [
    "numpy.where",
    "range",
    "tensorflow.float32",
    "tensorflow_probability.python.distributions.mixture_test._set_seed",
    "tensorflow_probability.python.distributions.mixture_test._test_capture_mvndiag_sample_outputs",
    "tensorflow_probability.python.distributions.mixture_test.make_multivariate_mixture"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testSampleScalarBatchUnivariate": {
  "data": {
   "lineno": 512,
   "symbols_in_volume": [
    "numpy.where",
    "range",
    "tensorflow.float32",
    "tensorflow_probability.python.distributions.mixture_test._set_seed",
    "tensorflow_probability.python.distributions.mixture_test._test_capture_normal_sample_outputs",
    "tensorflow_probability.python.distributions.mixture_test.make_univariate_mixture"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testShapes": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mixture_test.make_multivariate_mixture",
    "tensorflow_probability.python.distributions.mixture_test.make_univariate_mixture"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testSpecificStddevValue": {
  "data": {
   "lineno": 384,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.mixture_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testStddevShapeMultivariate": {
  "data": {
   "lineno": 342,
   "symbols_in_volume": [
    "len",
    "list",
    "numpy.expand_dims",
    "numpy.reshape",
    "numpy.stack",
    "numpy.zeros_like",
    "range",
    "tensorflow.nn.softmax",
    "tensorflow_probability.python.distributions.mixture_test._mixture_stddev_np",
    "tensorflow_probability.python.distributions.mixture_test.make_multivariate_mixture",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.MixtureTest.testStddevShapeUnivariate": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": [
    "len",
    "list",
    "numpy.expand_dims",
    "numpy.reshape",
    "numpy.stack",
    "numpy.zeros_like",
    "range",
    "tensorflow.nn.softmax",
    "tensorflow_probability.python.distributions.mixture_test._mixture_stddev_np",
    "tensorflow_probability.python.distributions.mixture_test.make_univariate_mixture"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test._mixture_stddev_np": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "numpy.expand_dims",
    "numpy.matmul",
    "numpy.sqrt",
    "numpy.squeeze"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test._set_seed": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow.executing_eagerly"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test._swap_first_last_axes": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "len",
    "list",
    "range"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test._test_capture_mvndiag_sample_outputs": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mixture_test.contextlib",
    "tensorflow_probability.python.distributions.mixture_test.tfd",
    "true_mvndiag_sample"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test._test_capture_mvndiag_sample_outputs._capturing_mvndiag_sample": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "true_mvndiag_sample"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test._test_capture_normal_sample_outputs": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mixture_test.contextlib",
    "tensorflow_probability.python.distributions.mixture_test.tfd",
    "true_normal_sample"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test._test_capture_normal_sample_outputs._capturing_normal_sample": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "true_normal_sample"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_test.contextlib": {
  "data": {
   "shadows": "contextlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_test.make_multivariate_mixture": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "create_component",
    "range",
    "tensorflow.TensorShape",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.int32",
    "tensorflow.random.uniform",
    "tensorflow_probability.python.distributions.mixture_test.tfd",
    "tensorflow_probability.python.internal.tensorshape_util.concatenate",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.make_multivariate_mixture.create_component": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "tensorflow.random.normal",
    "tensorflow.random.uniform",
    "tensorflow_probability.python.distributions.mixture_test.tfd",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.make_univariate_mixture": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "range",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.int32",
    "tensorflow.random.normal",
    "tensorflow.random.uniform",
    "tensorflow_probability.python.distributions.mixture_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mixture_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_test.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_test.tfd": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.mixture_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mixture_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.moving_mean_variance": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.internal.moving_stats.moving_mean_variance"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multinomial": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial.__init__": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.newaxis",
    "tensorflow_probability.python.distributions.multinomial.Multinomial",
    "tensorflow_probability.python.internal.distribution_util.embed_check_nonnegative_integer_form",
    "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._batch_shape": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._batch_shape_tensor": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._covariance": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.set_diag",
    "tensorflow.compat.v2.matmul",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._event_shape": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._event_shape_tensor": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._log_normalization": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.log_combinations"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._log_prob": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.multinomial._multinomial_sample_note",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._log_unnormalized_prob": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "tensorflow.compat.v2.nn.log_softmax",
    "tensorflow.compat.v2.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._maybe_assert_valid_sample": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": [
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.distribution_util.embed_check_nonnegative_integer_form",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._mean": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "tensorflow.compat.v2.identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._params_event_ndims": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._sample_n": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "draw_sample",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial._variance": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial.logits": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial.probs": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.Multinomial.total_count": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.__all__": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.multinomial._multinomial_sample_note": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.multinomial.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multinomial.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multinomial.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multinomial.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multinomial.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multinomial.draw_sample": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.map_fn",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.transpose"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.draw_sample._sample_one_batch_member": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.one_hot",
    "tensorflow.compat.v2.random.categorical",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow.compat.v2.reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multinomial.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multinomial.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multinomial.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multinomial.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multinomial_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.setUp": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testComplexShapes": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.ones",
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testCovarianceFromSampling": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": [
    "int",
    "numpy.array",
    "numpy.float32",
    "numpy.sum",
    "tensorflow.linalg.diag_part",
    "tensorflow.matmul",
    "tensorflow.newaxis",
    "tensorflow.reduce_mean",
    "tensorflow.sqrt",
    "tensorflow_probability.python.distributions.multinomial_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testCovarianceMultidimensional": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.random.dirichlet",
    "numpy.random.randint",
    "tensorflow_probability.python.distributions.multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testLogits": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.log",
    "tensorflow_probability.python.distributions.multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testMultinomialCovariance": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testMultinomialCovarianceBatch": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testMultinomialMean": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.distributions.multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testN": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testNotReparameterized": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.distributions.multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testP": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testPmfBothZeroBatches": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testPmfBothZeroBatchesNontrivialN": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testPmfCountsStretchedInBroadcastWhenLowerRank": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testPmfCountsStretchedInBroadcastWhenSameRank": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testPmfNonIntegerCounts": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testPmfPStretchedInBroadcastWhenLowerRank": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testPmfPStretchedInBroadcastWhenSameRank": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testPmfShapeCountsPStretchedN": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.full",
    "tensorflow_probability.python.distributions.multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testPmfShapeCountsStretchedN": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testPmfUnderflow": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.distributions.multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testPmfandCountsAgree": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testSampleUnbiasedNonScalarBatch": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "int",
    "numpy.float32",
    "tensorflow.math.log",
    "tensorflow.matmul",
    "tensorflow.reduce_mean",
    "tensorflow.transpose",
    "tensorflow_probability.python.distributions.multinomial_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testSampleUnbiasedScalarBatch": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": [
    "int",
    "numpy.float32",
    "tensorflow.math.log",
    "tensorflow.matmul",
    "tensorflow.reduce_mean",
    "tensorflow_probability.python.distributions.multinomial_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.MultinomialTest.testSimpleShapes": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.multinomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multinomial_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multinomial_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multinomial_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multinomial_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multinomial_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multinomial_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multinomial_test.tfd": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.multinomial_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multinomial_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator.__init__": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.dtype_util.is_floating",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._batch_shape": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_static_shape",
    "tensorflow_probability.python.distributions.multivariate_student_t.functools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._batch_shape_tensor": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.distributions.multivariate_student_t.functools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._covariance": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.linalg.diag",
    "tensorflow.compat.v2.square",
    "tensorflow_probability.python.distributions.multivariate_student_t._broadcast_to_shape",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
    "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._entropy": {
  "data": {
   "lineno": 410,
   "symbols_in_volume": [
    "_lbeta",
    "numpy.log",
    "numpy.pi",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.math.digamma",
    "tensorflow.compat.v2.math.lgamma",
    "tensorflow.compat.v2.math.log",
    "tensorflow_probability.python.distributions.multivariate_student_t._broadcast_to_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._entropy._lbeta": {
  "data": {
   "lineno": 414,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.lgamma"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._event_shape": {
  "data": {
   "lineno": 240
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._event_shape_tensor": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "tensorflow.compat.v2.newaxis"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._log_normalization": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.pi",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.math.lgamma",
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._log_prob": {
  "data": {
   "lineno": 280
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._log_unnormalized_prob": {
  "data": {
   "lineno": 271,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.norm",
    "tensorflow.compat.v2.sqrt",
    "tensorflow_probability.python.math.log1psquare"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._mean": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "numpy.nan",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.fill",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.distributions.multivariate_student_t._broadcast_to_shape",
    "tensorflow_probability.python.internal.assert_util.assert_less",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._mode": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.multivariate_student_t._broadcast_to_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._sample_n": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "seed",
    "tensorflow.compat.v2.math.rsqrt",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.distributions.chi2",
    "tensorflow_probability.python.distributions.chi2.Chi2",
    "tensorflow_probability.python.distributions.chi2.sample",
    "tensorflow_probability.python.distributions.multivariate_student_t._broadcast_to_shape",
    "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._sample_shape": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._std_var_helper": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "df_factor_fn",
    "numpy.inf",
    "numpy.nan",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.fill",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.distributions.multivariate_student_t._broadcast_to_shape",
    "tensorflow_probability.python.internal.assert_util.assert_less",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._stddev": {
  "data": {
   "lineno": 386,
   "symbols_in_volume": [
    "isinstance",
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.linalg.LinearOperatorLowRankUpdate",
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.sqrt",
    "tensorflow_probability.python.distributions.multivariate_student_t._broadcast_to_shape",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
    "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator._variance": {
  "data": {
   "lineno": 362,
   "symbols_in_volume": [
    "isinstance",
    "tensorflow.compat.v2.linalg.LinearOperatorLowRankUpdate",
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.square",
    "tensorflow_probability.python.distributions.multivariate_student_t._broadcast_to_shape",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
    "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator.df": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator.loc": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator.scale": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.__all__": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t._broadcast_to_shape": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "tensorflow.compat.v2.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.chi2_lib": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.chi2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.math": {
  "data": {
   "shadows": "tensorflow_probability.python.math"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.mvn_linear_operator": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.mvn_linear_operator"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.seed_stream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32DynamicShape": {
  "data": {
   "lineno": 403,
   "symbols_in_volume": [
    "tensorflow.float32",
    "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase",
    "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape._input": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testBadScaleDType": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "TypeError",
    "tensorflow.int32",
    "tensorflow.linalg.LinearOperatorIdentity",
    "tensorflow_probability.python.distributions.multivariate_student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testBroadcasting": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "tensorflow.linalg.LinearOperatorDiag",
    "tensorflow_probability.python.distributions.multivariate_student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testCovarianceAllDefined": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.array",
    "tensorflow.linalg.LinearOperatorDiag",
    "tensorflow.linalg.LinearOperatorFullMatrix",
    "tensorflow_probability.python.distributions.multivariate_student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testCovarianceSomeUndefinedNaNAllowed": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "numpy.full",
    "numpy.inf",
    "numpy.nan",
    "tensorflow.linalg.LinearOperatorDiag",
    "tensorflow_probability.python.distributions.multivariate_student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testCovarianceSomeUndefinedNaNNotAllowed": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow.linalg.LinearOperatorDiag",
    "tensorflow_probability.python.distributions.multivariate_student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testEntropy": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": [
    "numpy.log",
    "tensorflow.linalg.LinearOperatorDiag",
    "tensorflow_probability.python.distributions.multivariate_student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testHypersphereVolume": {
  "data": {
   "lineno": 364,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "int",
    "tensorflow.linalg.LinearOperatorFullMatrix",
    "tensorflow_probability.python.distributions.multivariate_student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testLogProb": {
  "data": {
   "lineno": 342,
   "symbols_in_volume": [
    "numpy.all",
    "tensorflow.cast",
    "tensorflow.concat",
    "tensorflow.exp",
    "tensorflow.linalg.LinearOperatorFullMatrix",
    "tensorflow.linspace",
    "tensorflow.meshgrid",
    "tensorflow.newaxis",
    "tensorflow.reduce_logsumexp",
    "tensorflow_probability.python.distributions.multivariate_student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testLogProbSameFor1D": {
  "data": {
   "lineno": 380,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.linalg.LinearOperatorDiag",
    "tensorflow.linspace",
    "tensorflow.newaxis",
    "tensorflow_probability.python.distributions.multivariate_student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testMeanAllDefined": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "tensorflow.linalg.LinearOperatorDiag",
    "tensorflow_probability.python.distributions.multivariate_student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testMeanSomeUndefinedNaNAllowed": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "numpy.nan",
    "tensorflow.linalg.LinearOperatorDiag",
    "tensorflow_probability.python.distributions.multivariate_student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testMeanSomeUndefinedNaNNotAllowed": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow.linalg.LinearOperatorDiag",
    "tensorflow_probability.python.distributions.multivariate_student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testMode": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "tensorflow.linalg.LinearOperatorDiag",
    "tensorflow_probability.python.distributions.multivariate_student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testNonPositiveDf": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow.linalg.LinearOperatorDiag",
    "tensorflow_probability.python.distributions.multivariate_student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testNotPositiveDefinite": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.linalg.LinearOperatorDiag",
    "tensorflow_probability.python.distributions.multivariate_student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testSamplingConsistency": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "tensorflow.linalg.LinearOperatorFullMatrix",
    "tensorflow_probability.python.distributions.multivariate_student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testSamplingDeterministic": {
  "data": {
   "lineno": 301,
   "symbols_in_volume": [
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow.linalg.LinearOperatorFullMatrix",
    "tensorflow_probability.python.distributions.multivariate_student_t_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testSamplingFullyReparameterized": {
  "data": {
   "lineno": 318,
   "symbols_in_volume": [
    "tensorflow.linalg.LinearOperatorDiag",
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.distributions.multivariate_student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testSamplingSmallDfNoNaN": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": [
    "int",
    "numpy.all",
    "numpy.isfinite",
    "tensorflow.linalg.LinearOperatorDiag",
    "tensorflow_probability.python.distributions.multivariate_student_t_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testVarianceStdAllDefined": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.array",
    "numpy.sqrt",
    "tensorflow.linalg.LinearOperatorDiag",
    "tensorflow.linalg.LinearOperatorFullMatrix",
    "tensorflow.linalg.LinearOperatorLowRankUpdate",
    "tensorflow_probability.python.distributions.multivariate_student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testVarianceStdSomeUndefinedNaNAllowed": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "numpy.inf",
    "numpy.nan",
    "tensorflow.linalg.LinearOperatorDiag",
    "tensorflow_probability.python.distributions.multivariate_student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape.testVarianceStdSomeUndefinedNaNNotAllowed": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow.linalg.LinearOperatorDiag",
    "tensorflow_probability.python.distributions.multivariate_student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat64StaticShape": {
  "data": {
   "lineno": 397,
   "symbols_in_volume": [
    "tensorflow.float64",
    "tensorflow_probability.python.distributions.multivariate_student_t_test.MultivariateStudentTTestFloat32StaticShape"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.test_case": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_case"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.tfd": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.multivariate_student_t_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mvn_diag.MultivariateNormalDiag": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mvn_diag.MultivariateNormalDiag.__init__": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.mvn_diag.MultivariateNormalDiag",
    "tensorflow_probability.python.internal.distribution_util.make_diag_scale"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag.MultivariateNormalDiag._params_event_ndims": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag.MultivariateNormalDiagWithSoftplusScale": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mvn_diag.MultivariateNormalDiag"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mvn_diag.MultivariateNormalDiagWithSoftplusScale.__init__": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.nn.softplus",
    "tensorflow.python.util.deprecation.deprecated",
    "tensorflow_probability.python.distributions.mvn_diag.MultivariateNormalDiagWithSoftplusScale"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag.MultivariateNormalDiagWithSoftplusScale._params_event_ndims": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.mvn_diag.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag.deprecation": {
  "data": {
   "shadows": "tensorflow.python.util.deprecation"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag.mvn_linear_operator": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.mvn_linear_operator"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank.MultivariateNormalDiagPlusLowRank": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank.MultivariateNormalDiagPlusLowRank.__init__": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "_convert_to_tensor",
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.linalg.LinearOperatorLowRankUpdate",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank.MultivariateNormalDiagPlusLowRank",
    "tensorflow_probability.python.internal.distribution_util.make_diag_scale",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank.MultivariateNormalDiagPlusLowRank.__init__._convert_to_tensor": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "tensorflow.compat.v2.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank.mvn_linear_operator": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.mvn_linear_operator"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.MultivariateNormalDiagPlusLowRankTest": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.MultivariateNormalDiagPlusLowRankTest.setUp": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.MultivariateNormalDiagPlusLowRankTest.testDiagBroadcastBothBatchAndEvent": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.MultivariateNormalDiagPlusLowRankTest.testDiagBroadcastBothBatchAndEvent2": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.MultivariateNormalDiagPlusLowRankTest.testDiagBroadcastMultiplierAndLoc": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.MultivariateNormalDiagPlusLowRankTest.testDiagBroadcastOnlyEvent": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.MultivariateNormalDiagPlusLowRankTest.testImplicitLargeDiag": {
  "data": {
   "lineno": 362,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.diag",
    "numpy.eye",
    "numpy.matmul",
    "numpy.stack",
    "numpy.transpose",
    "tensorflow.compat.v1.logging.vlog",
    "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.MultivariateNormalDiagPlusLowRankTest.testMean": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.MultivariateNormalDiagPlusLowRankTest.testSample": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "int",
    "numpy.array",
    "numpy.diag",
    "numpy.float32",
    "numpy.matmul",
    "numpy.sqrt",
    "tensorflow.compat.v1.logging.vlog",
    "tensorflow.matmul",
    "tensorflow.reduce_mean",
    "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.tfd": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag_plus_low_rank_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.setUp": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testCovariance": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.diag",
    "numpy.float32",
    "numpy.ones",
    "tensorflow.float32",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.mvn_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testDistWithBatchShapeOneThenTransformedThroughSoftplus": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "tensorflow.ones",
    "tensorflow.zeros",
    "tensorflow_probability.bijectors.Softplus",
    "tensorflow_probability.python.distributions.mvn_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testDynamicBatchShape": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.mvn_diag_test.tfd",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testDynamicEventShape": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.mvn_diag_test.tfd",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testEntropy": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "numpy.diag",
    "scipy.stats.multivariate_normal",
    "tensorflow_probability.python.distributions.mvn_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testKLDivIdenticalGradientDefined": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.isfinite",
    "numpy.ones_like",
    "tensorflow.float32",
    "tensorflow.zeros",
    "tensorflow_probability.math.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testKLDivIdenticalGradientDefined.self_kl_divergence": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.ones",
    "tensorflow_probability.python.distributions.mvn_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testMean": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mvn_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testMeanWithBroadcastLoc": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mvn_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testMultivariateNormalDiagNegLogLikelihood": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.tile",
    "numpy.zeros",
    "tensorflow.compat.v1.get_variable",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v1.initializers.constant",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.float32",
    "tensorflow_probability.math.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testMultivariateNormalDiagNegLogLikelihood.neg_log_likelihood": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "tensorflow.float32",
    "tensorflow.math.log",
    "tensorflow.ones",
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.distributions.mvn_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testMultivariateNormalDiagWithSoftplusScale": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "numpy.cov",
    "tensorflow.linalg.diag",
    "tensorflow.nn.softplus",
    "tensorflow_probability.python.distributions.mvn_diag_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testProbForLargeDimIsNotNan": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": [
    "numpy.isnan",
    "numpy.tile",
    "tensorflow_probability.distributions.MultivariateNormalDiag"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testSample": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "int",
    "numpy.cov",
    "tensorflow.linalg.diag",
    "tensorflow_probability.python.distributions.mvn_diag_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testSampleWithBroadcastScale": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "int",
    "numpy.matmul",
    "numpy.ones",
    "numpy.zeros",
    "tensorflow.linalg.diag",
    "tensorflow_probability.python.distributions.mvn_diag_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testScalarParams": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.distributions.mvn_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testSingularScaleRaises": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mvn_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testStddev": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.ones",
    "tensorflow.float32",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.mvn_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testVariance": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.ones",
    "tensorflow.float32",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.mvn_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.MultivariateNormalDiagTest.testVectorParams": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mvn_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.test_case": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_case"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.tfd": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_diag_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance.MultivariateNormalFullCovariance": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mvn_tril.MultivariateNormalTriL"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance.MultivariateNormalFullCovariance.__init__": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.linalg.cholesky",
    "tensorflow.compat.v2.linalg.matrix_transpose",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.mvn_full_covariance.MultivariateNormalFullCovariance",
    "tensorflow_probability.python.internal.assert_util.assert_near",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance.MultivariateNormalFullCovariance._params_event_ndims": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance.mvn_tril": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.mvn_tril"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "numpy.random.RandomState",
    "tensorflow.compat.v2.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.MultivariateNormalFullCovarianceTest": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.MultivariateNormalFullCovarianceTest._random_mu_and_sigma": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.matmul",
    "numpy.transpose",
    "tensorflow_probability.python.distributions.mvn_full_covariance_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.MultivariateNormalFullCovarianceTest._random_pd_matrix": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.band_part",
    "tensorflow.compat.v2.matmul",
    "tensorflow.compat.v2.nn.softplus",
    "tensorflow_probability.python.distributions.mvn_full_covariance_test.rng",
    "tensorflow_probability.python.distributions.mvn_full_covariance_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.MultivariateNormalFullCovarianceTest.testDoesNotRaiseIfInitializedWithSymmetricMatrix": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mvn_full_covariance_test.rng",
    "tensorflow_probability.python.distributions.mvn_full_covariance_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.MultivariateNormalFullCovarianceTest.testKLBatch": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "_compute_non_batch_kl",
    "tensorflow_probability.python.distributions.mvn_full_covariance_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.MultivariateNormalFullCovarianceTest.testKLBatchBroadcast": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "_compute_non_batch_kl",
    "tensorflow_probability.python.distributions.mvn_full_covariance_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.MultivariateNormalFullCovarianceTest.testLogPDFScalarBatch": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "scipy.stats.multivariate_normal",
    "tensorflow_probability.python.distributions.mvn_full_covariance_test.rng",
    "tensorflow_probability.python.distributions.mvn_full_covariance_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.MultivariateNormalFullCovarianceTest.testLogPDFScalarBatchCovarianceNotProvided": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "numpy.eye",
    "scipy.stats.multivariate_normal",
    "tensorflow_probability.python.distributions.mvn_full_covariance_test.rng",
    "tensorflow_probability.python.distributions.mvn_full_covariance_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.MultivariateNormalFullCovarianceTest.testNamePropertyIsSetByInitArg": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mvn_full_covariance_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.MultivariateNormalFullCovarianceTest.testRaisesIfInitializedWithNonSymmetricMatrix": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mvn_full_covariance_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.MultivariateNormalFullCovarianceTest.testShapes": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mvn_full_covariance_test.rng",
    "tensorflow_probability.python.distributions.mvn_full_covariance_test.tfd",
    "tensorflow_probability.python.internal.tensorshape_util.as_list",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test._compute_non_batch_kl": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "numpy.linalg.det",
    "numpy.linalg.inv",
    "numpy.log",
    "numpy.trace"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.rng": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.tfd": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.mvn_full_covariance_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator.__init__": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator",
    "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator",
    "tensorflow_probability.python.distributions.normal.Normal",
    "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale",
    "tensorflow_probability.python.internal.dtype_util.is_floating"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator._covariance": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.diag",
    "tensorflow.compat.v2.square",
    "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator._log_prob": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator",
    "tensorflow_probability.python.distributions.mvn_linear_operator._mvn_sample_note",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator._mean": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.internal.tensorshape_util.concatenate",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator._mode": {
  "data": {
   "lineno": 263
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator._prob": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator",
    "tensorflow_probability.python.distributions.mvn_linear_operator._mvn_sample_note",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator._stddev": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "isinstance",
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.linalg.LinearOperatorLowRankUpdate",
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.sqrt",
    "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator._variance": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "isinstance",
    "tensorflow.compat.v2.linalg.LinearOperatorLowRankUpdate",
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.square",
    "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator.loc": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator.scale": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.__all__": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator._kl_brute_force": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "is_diagonal",
    "squared_frobenius_norm",
    "tensorflow.compat.v2.broadcast_static_shape",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.newaxis",
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL",
    "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator._kl_brute_force.is_diagonal": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": [
    "isinstance",
    "tensorflow.compat.v2.linalg.LinearOperatorDiag",
    "tensorflow.compat.v2.linalg.LinearOperatorIdentity",
    "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator._kl_brute_force.squared_frobenius_norm": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": [
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow.compat.v2.square"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator._mvn_sample_note": {
  "data": {
   "lineno": 37
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.affine_linear_operator_bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.affine_linear_operator"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.kullback_leibler": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.normal": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.normal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator.transformed_distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.transformed_distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.MultivariateNormalLinearOperatorTest": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.MultivariateNormalLinearOperatorTest._compute_non_batch_kl": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "numpy.dot",
    "numpy.linalg.det",
    "numpy.linalg.inv",
    "numpy.log",
    "numpy.trace"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.MultivariateNormalLinearOperatorTest._random_loc_and_scale": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.MultivariateNormalLinearOperatorTest._random_tril_matrix": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.band_part",
    "tensorflow.compat.v2.nn.softplus",
    "tensorflow_probability.python.distributions.mvn_linear_operator_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.MultivariateNormalLinearOperatorTest.setUp": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.MultivariateNormalLinearOperatorTest.testKLBatch": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mvn_linear_operator_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.MultivariateNormalLinearOperatorTest.testKLBatchBroadcast": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mvn_linear_operator_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.MultivariateNormalLinearOperatorTest.testLogPDFScalarBatch": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "scipy.stats.multivariate_normal",
    "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
    "tensorflow.compat.v2.matmul",
    "tensorflow_probability.python.distributions.mvn_linear_operator_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.MultivariateNormalLinearOperatorTest.testMeanAndCovariance": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "numpy.matmul",
    "numpy.transpose",
    "tensorflow_probability.python.distributions.mvn_linear_operator_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.MultivariateNormalLinearOperatorTest.testNamePropertyIsSetByInitArg": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.LinearOperatorIdentity",
    "tensorflow_probability.python.distributions.mvn_linear_operator_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.MultivariateNormalLinearOperatorTest.testRaisesIfScaleNotProvided": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.distributions.mvn_linear_operator_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.MultivariateNormalLinearOperatorTest.testShapes": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
    "tensorflow_probability.python.distributions.mvn_linear_operator_test.tfd",
    "tensorflow_probability.python.internal.tensorshape_util.as_list",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.tfd": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.mvn_linear_operator_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_tril": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mvn_tril.MultivariateNormalTriL": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mvn_tril.MultivariateNormalTriL.__init__": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "ValueError",
    "_convert_to_tensor",
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.linalg.LinearOperatorIdentity",
    "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.mvn_tril.MultivariateNormalTriL",
    "tensorflow_probability.python.internal.distribution_util.dimension_size",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril.MultivariateNormalTriL.__init__._convert_to_tensor": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "tensorflow.compat.v2.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril.MultivariateNormalTriL._params_event_ndims": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.mvn_tril.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_tril.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_tril.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_tril.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_tril.mvn_linear_operator": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.mvn_linear_operator"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_tril.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_tril.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.distributions.mvn_tril_test._MakeSlicer"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLSlicingTest": {
  "data": {
   "lineno": 433,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLSlicingTest._random_chol": {
  "data": {
   "lineno": 441,
   "symbols_in_volume": [
    "tensorflow.linalg.band_part",
    "tensorflow.matmul",
    "tensorflow.nn.softplus",
    "tensorflow_probability.python.distributions.mvn_tril_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLSlicingTest.setUp": {
  "data": {
   "lineno": 437,
   "symbols_in_volume": [
    "numpy.random.RandomState",
    "super",
    "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLSlicingTest"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLSlicingTest.testDocstrSliceExample": {
  "data": {
   "lineno": 542,
   "symbols_in_volume": [
    "tensorflow.linalg.cholesky",
    "tensorflow.matmul",
    "tensorflow.newaxis",
    "tensorflow.random.normal",
    "tensorflow_probability.python.distributions.mvn_tril_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLSlicingTest.testSlice": {
  "data": {
   "lineno": 448,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.zeros",
    "slicer",
    "tensorflow.newaxis",
    "tensorflow_probability.python.distributions.mvn_tril_test.make_slicer",
    "tensorflow_probability.python.distributions.mvn_tril_test.tfd",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLSlicingTest.testSliceSequencePreservesOrigVarGradLinkage": {
  "data": {
   "lineno": 522,
   "symbols_in_volume": [
    "slicer",
    "tensorflow.GradientTape",
    "tensorflow.abs",
    "tensorflow.compat.v2.Variable",
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.distributions.mvn_tril_test.make_slicer",
    "tensorflow_probability.python.distributions.mvn_tril_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLSlicingTest.testSliceWithUnslicedMu": {
  "data": {
   "lineno": 494,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.zeros",
    "slicer",
    "tensorflow.newaxis",
    "tensorflow_probability.python.distributions.mvn_tril_test.make_slicer",
    "tensorflow_probability.python.distributions.mvn_tril_test.tfd",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLSlicingTest.testSteppedSliceOnBroadcastDim": {
  "data": {
   "lineno": 478,
   "symbols_in_volume": [
    "numpy.zeros",
    "slicer",
    "tensorflow.newaxis",
    "tensorflow_probability.python.distributions.mvn_tril_test.make_slicer",
    "tensorflow_probability.python.distributions.mvn_tril_test.tfd",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest._random_chol": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "tensorflow.linalg.band_part",
    "tensorflow.matmul",
    "tensorflow.nn.softplus",
    "tensorflow_probability.python.distributions.mvn_tril_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest._random_mu_and_sigma": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.matmul",
    "numpy.transpose"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.setUp": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "numpy.random.RandomState",
    "super",
    "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testEntropy": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "scipy.stats.multivariate_normal",
    "tensorflow_probability.python.distributions.mvn_tril_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testEntropyMultidimensional": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "scipy.stats.multivariate_normal",
    "tensorflow_probability.python.distributions.mvn_tril_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testKLBatch": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "_compute_non_batch_kl",
    "numpy.linalg.cholesky",
    "tensorflow_probability.python.distributions.mvn_tril_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testKLBatchBroadcast": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": [
    "_compute_non_batch_kl",
    "numpy.linalg.cholesky",
    "tensorflow_probability.python.distributions.mvn_tril_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testKLNonBatch": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": [
    "_compute_non_batch_kl",
    "numpy.linalg.cholesky",
    "tensorflow_probability.python.distributions.mvn_tril_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testKLTwoIdenticalDistributionsIsZero": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": [
    "numpy.linalg.cholesky",
    "numpy.zeros",
    "tensorflow_probability.python.distributions.mvn_tril_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testLogPDFScalarBatch": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "scipy.stats.multivariate_normal",
    "tensorflow_probability.python.distributions.mvn_tril_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testLogPDFXIsHigherRank": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "scipy.stats.multivariate_normal",
    "tensorflow_probability.python.distributions.mvn_tril_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testLogPDFXLowerDimension": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "scipy.stats.multivariate_normal",
    "tensorflow_probability.python.distributions.mvn_tril_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testSample": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "int",
    "numpy.cov",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.mvn_tril_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testSampleLarge": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "int",
    "numpy.array",
    "numpy.diag",
    "numpy.float32",
    "numpy.matmul",
    "numpy.sqrt",
    "tensorflow.compat.v1.logging.vlog",
    "tensorflow.matmul",
    "tensorflow.reduce_mean",
    "tensorflow_probability.python.distributions.mvn_tril_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testSampleMultiDimensional": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "numpy.cov",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.mvn_tril_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testSampleWithSampleShape": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "scipy.stats.multivariate_normal",
    "tensorflow_probability.python.distributions.mvn_tril_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testShapes": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mvn_tril_test.tfd",
    "tensorflow_probability.python.internal.tensorshape_util.as_list",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.MultivariateNormalTriLTest.testSingularScaleRaises": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mvn_tril_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test._MakeSlicer": {
  "data": {
   "lineno": 425,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test._MakeSlicer.__getitem__": {
  "data": {
   "lineno": 427
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test._compute_non_batch_kl": {
  "data": {
   "lineno": 410,
   "symbols_in_volume": [
    "numpy.linalg.det",
    "numpy.linalg.inv",
    "numpy.log",
    "numpy.trace"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.make_slicer": {
  "data": {
   "lineno": 430
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.tfd": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.mvn_tril_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.negative_binomial": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial.__init__": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._batch_shape": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._batch_shape_tensor": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._cdf": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.betainc",
    "tensorflow.compat.v2.sigmoid",
    "tensorflow_probability.python.internal.distribution_util.embed_check_nonnegative_integer_form"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._event_shape": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._event_shape_tensor": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._log_normalization": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.lgamma",
    "tensorflow_probability.python.internal.distribution_util.embed_check_nonnegative_integer_form"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._log_prob": {
  "data": {
   "lineno": 166
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._log_unnormalized_prob": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log_sigmoid",
    "tensorflow_probability.python.internal.distribution_util.embed_check_nonnegative_integer_form"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._mean": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "tensorflow.compat.v2.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._mode": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.floor",
    "tensorflow.compat.v2.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._params_event_ndims": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._sample_n": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "stream",
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.random.gamma",
    "tensorflow.compat.v2.random.poisson",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial._variance": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "tensorflow.compat.v2.sigmoid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial.logits": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial.probs": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.NegativeBinomial.total_count": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.negative_binomial.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.negative_binomial.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.negative_binomial.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.negative_binomial.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.negative_binomial.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.negative_binomial.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.negative_binomial.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.negative_binomial.seed_stream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.negative_binomial.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.negative_binomial.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testInvalidNegativeCount": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.negative_binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testInvalidP": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.negative_binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testLogProbOverflow": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.float32",
    "numpy.isfinite",
    "numpy.ones_like",
    "tensorflow_probability.python.distributions.negative_binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testLogProbUnderflow": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.float32",
    "numpy.isfinite",
    "numpy.ones_like",
    "tensorflow_probability.python.distributions.negative_binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testLogits": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.negative_binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testNegativeBinomialLogCdf": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "scipy.stats.nbinom.logcdf",
    "tensorflow_probability.python.distributions.negative_binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testNegativeBinomialLogCdfValidateArgs": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.negative_binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testNegativeBinomialLogPmf": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "scipy.stats.nbinom.logpmf",
    "tensorflow_probability.python.distributions.negative_binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testNegativeBinomialLogPmfMultidimensional": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "scipy.stats.nbinom.logpmf",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.negative_binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testNegativeBinomialLogPmfValidateArgs": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.negative_binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testNegativeBinomialMean": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "scipy.stats.nbinom.mean",
    "tensorflow_probability.python.distributions.negative_binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testNegativeBinomialSample": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "int",
    "numpy.bool",
    "numpy.ones",
    "range",
    "scipy.stats.nbinom.mean",
    "scipy.stats.nbinom.var",
    "tensorflow.newaxis",
    "tensorflow.reduce_mean",
    "tensorflow.reduce_min",
    "tensorflow_probability.python.distributions.negative_binomial_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testNegativeBinomialShape": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.negative_binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testNegativeBinomialShapeBroadcast": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.negative_binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testNegativeBinomialStddev": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "scipy.stats.nbinom.std",
    "tensorflow_probability.python.distributions.negative_binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.NegativeBinomialTest.testNegativeBinomialVariance": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "scipy.stats.nbinom.var",
    "tensorflow_probability.python.distributions.negative_binomial_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.tfd": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.negative_binomial_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.normal.Normal": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.normal.Normal.__init__": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.normal.Normal",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._batch_shape": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._batch_shape_tensor": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._cdf": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.special_math.ndtr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._entropy": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "numpy.e",
    "numpy.log",
    "numpy.pi",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._event_shape": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._event_shape_tensor": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._inv_z": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "tensorflow.compat.v2.name_scope"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._log_cdf": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.special_math.log_ndtr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._log_normalization": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.pi",
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._log_prob": {
  "data": {
   "lineno": 191
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._log_survival_function": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.special_math.log_ndtr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._log_unnormalized_prob": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "tensorflow.compat.v2.square"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._mean": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "tensorflow.compat.v2.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._mode": {
  "data": {
   "lineno": 226
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._param_shapes": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "dict",
    "staticmethod",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._params_event_ndims": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._quantile": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.special_math.ndtri"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._sample_n": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.random.normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._stddev": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "tensorflow.compat.v2.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._survival_function": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.special_math.ndtr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal._z": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "tensorflow.compat.v2.name_scope"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal.loc": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.Normal.scale": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.__all__": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.normal._kl_normal_normal": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.square",
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL",
    "tensorflow_probability.python.distributions.normal.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal.kullback_leibler": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal.special_math": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.special_math"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors.normal": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.normal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors.normal_conjugates_known_scale_posterior": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "TypeError",
    "isinstance",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.sqrt",
    "tensorflow.compat.v2.square",
    "tensorflow_probability.python.distributions.normal.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors.normal_conjugates_known_scale_predictive": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "TypeError",
    "isinstance",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.sqrt",
    "tensorflow.compat.v2.square",
    "tensorflow_probability.python.distributions.normal.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test.NormalTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test.NormalTest.testNormalConjugateKnownSigmaNDPosteriorND": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "isinstance",
    "tensorflow.compat.v1.Session",
    "tensorflow.constant",
    "tensorflow.float32",
    "tensorflow.reduce_sum",
    "tensorflow.transpose",
    "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test.math",
    "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test.NormalTest.testNormalConjugateKnownSigmaPosterior": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "isinstance",
    "tensorflow.compat.v1.Session",
    "tensorflow.constant",
    "tensorflow.reduce_sum",
    "tensorflow.size",
    "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test.math",
    "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test.NormalTest.testNormalConjugateKnownSigmaPosteriorND": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "isinstance",
    "tensorflow.compat.v1.Session",
    "tensorflow.constant",
    "tensorflow.float32",
    "tensorflow.reduce_sum",
    "tensorflow.size",
    "tensorflow.transpose",
    "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test.math",
    "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test.NormalTest.testNormalConjugateKnownSigmaPredictive": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "isinstance",
    "tensorflow.compat.v1.Session",
    "tensorflow.constant",
    "tensorflow.reduce_sum",
    "tensorflow.size",
    "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test.math",
    "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test.tfd": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.normal_conjugate_posteriors_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal_conjugates_known_scale_posterior": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.normal_conjugate_posteriors.normal_conjugates_known_scale_posterior"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal_conjugates_known_scale_predictive": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.normal_conjugate_posteriors.normal_conjugates_known_scale_predictive"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.distributions.normal_test.try_import"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalEagerGCTest": {
  "data": {
   "lineno": 499,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalEagerGCTest.testNormalMeanAndMode": {
  "data": {
   "lineno": 501,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_in_graph_and_eager_modes",
    "tensorflow_probability.python.distributions.normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest._baseQuantileFiniteGradientAtDifficultPoints": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": [
    "dtype",
    "numpy.exp",
    "tensorflow.constant",
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.distributions.normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest._testParamShapes": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "tensorflow.ones",
    "tensorflow.shape",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest._testParamStaticShapes": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.setUp": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testFiniteGradientAtDifficultPoints": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "make_fn",
    "numpy.float32",
    "numpy.float64",
    "tensorflow.constant",
    "tensorflow_probability.math.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testFiniteGradientAtDifficultPoints.make_fn": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": [
    "getattr",
    "numpy.array",
    "tensorflow_probability.python.distributions.normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNegativeSigmaFails": {
  "data": {
   "lineno": 444,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalCDF": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.linspace",
    "tensorflow_probability.python.distributions.normal_test.stats",
    "tensorflow_probability.python.distributions.normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalEntropy": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.log",
    "numpy.pi",
    "numpy.testing.assert_allclose",
    "tensorflow_probability.python.distributions.normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalEntropyWithScalarInputs": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.normal_test.stats",
    "tensorflow_probability.python.distributions.normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalFullyReparameterized": {
  "data": {
   "lineno": 400,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.distributions.normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalLogCDF": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.linspace",
    "tensorflow_probability.python.distributions.normal_test.stats",
    "tensorflow_probability.python.distributions.normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalLogPDF": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.normal_test.math",
    "tensorflow_probability.python.distributions.normal_test.stats",
    "tensorflow_probability.python.distributions.normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalLogPDFMultidimensional": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.normal_test.math",
    "tensorflow_probability.python.distributions.normal_test.stats",
    "tensorflow_probability.python.distributions.normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalLogSurvivalFunction": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.linspace",
    "tensorflow_probability.python.distributions.normal_test.stats",
    "tensorflow_probability.python.distributions.normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalMeanAndMode": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalNormalKL": {
  "data": {
   "lineno": 473,
   "symbols_in_volume": [
    "int",
    "numpy.array",
    "numpy.log",
    "tensorflow.reduce_mean",
    "tensorflow_probability.python.distributions.normal_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalQuantile": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.float64",
    "numpy.hstack",
    "numpy.linspace",
    "tensorflow_probability.python.distributions.normal_test.stats",
    "tensorflow_probability.python.distributions.normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalSample": {
  "data": {
   "lineno": 368,
   "symbols_in_volume": [
    "numpy.sqrt",
    "tensorflow.TensorShape",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.normal_test.math",
    "tensorflow_probability.python.distributions.normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalSampleMultiDimensional": {
  "data": {
   "lineno": 410,
   "symbols_in_volume": [
    "numpy.sqrt",
    "tensorflow.TensorShape",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.normal_test.math",
    "tensorflow_probability.python.distributions.normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalShape": {
  "data": {
   "lineno": 450,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalShapeWithPlaceholders": {
  "data": {
   "lineno": 460,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.TensorShape",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalStandardDeviation": {
  "data": {
   "lineno": 358,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalSurvivalFunction": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.linspace",
    "tensorflow_probability.python.distributions.normal_test.stats",
    "tensorflow_probability.python.distributions.normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testNormalVariance": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testParamShapes": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "tensorflow.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testParamStaticShapes": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "tensorflow.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testQuantileFiniteGradientAtDifficultPointsFloat32": {
  "data": {
   "lineno": 342,
   "symbols_in_volume": [
    "numpy.float32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testQuantileFiniteGradientAtDifficultPointsFloat64": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": [
    "numpy.float64"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.NormalTest.testSampleLikeArgsGetDistDType": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "getattr",
    "tensorflow.float32",
    "tensorflow_probability.python.distributions.normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.normal_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal_test.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal_test.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal_test.stats": {
  "data": {
   "lineno": 43
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.normal_test.test_case": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_case"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal_test.tfd": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.normal_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.normal_test.try_import": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "ImportError",
    "str",
    "tensorflow.compat.v1.logging.warning",
    "tensorflow_probability.python.distributions.normal_test.importlib"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical.__init__": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.rank",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical",
    "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs",
    "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._assert_valid_sample": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "tensorflow.compat.v2.reduce_logsumexp",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.internal.assert_util.assert_near",
    "tensorflow_probability.python.internal.assert_util.assert_non_positive",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._batch_shape": {
  "data": {
   "lineno": 165
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._batch_shape_tensor": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._covariance": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.set_diag",
    "tensorflow.compat.v2.matmul"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._entropy": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "tensorflow.compat.v2.nn.log_softmax",
    "tensorflow.compat.v2.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._event_shape": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._event_shape_tensor": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._log_prob": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.nn.softmax_cross_entropy_with_logits",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.stop_gradient",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._mean": {
  "data": {
   "lineno": 212
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._mode": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "tensorflow.compat.v2.argmax",
    "tensorflow.compat.v2.one_hot",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._params_event_ndims": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._sample_n": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.one_hot",
    "tensorflow.compat.v2.random.categorical",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.transpose",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical._variance": {
  "data": {
   "lineno": 226
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical.event_size": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical.logits": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical.probs": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical._kl_categorical_categorical": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": [
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.nn.log_softmax",
    "tensorflow.compat.v2.nn.softmax",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL",
    "tensorflow_probability.python.distributions.onehot_categorical.OneHotCategorical"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.kullback_leibler": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.onehot_categorical.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.setUp": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testCategoricalCategoricalKL": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "int",
    "np_softmax",
    "numpy.log",
    "numpy.sum",
    "numpy.zeros_like",
    "tensorflow.cast",
    "tensorflow.float32",
    "tensorflow.reduce_mean",
    "tensorflow_probability.python.distributions.onehot_categorical_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testCategoricalCategoricalKL.np_softmax": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "numpy.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testDtype": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.int64",
    "tensorflow.float32",
    "tensorflow.int32",
    "tensorflow.int64",
    "tensorflow_probability.python.distributions.onehot_categorical_test.make_onehot_categorical"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testEntropyNoBatch": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "numpy.log",
    "tensorflow_probability.python.distributions.onehot_categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testEntropyWithBatch": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "numpy.log",
    "tensorflow_probability.python.distributions.onehot_categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testLogits": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.log",
    "tensorflow_probability.python.distributions.onehot_categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testP": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.onehot_categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testPmf": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.exp",
    "numpy.sum",
    "tensorflow_probability.python.distributions.onehot_categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testSample": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "numpy.any",
    "tensorflow.int32",
    "tensorflow.math.log",
    "tensorflow_probability.python.distributions.onehot_categorical_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testSampleUnbiasedNonScalarBatch": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "int",
    "numpy.float32",
    "tensorflow.cast",
    "tensorflow.float32",
    "tensorflow.matmul",
    "tensorflow.reduce_mean",
    "tensorflow.transpose",
    "tensorflow_probability.python.distributions.onehot_categorical_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testSampleUnbiasedScalarBatch": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "int",
    "numpy.float32",
    "tensorflow.cast",
    "tensorflow.float32",
    "tensorflow.matmul",
    "tensorflow.reduce_mean",
    "tensorflow_probability.python.distributions.onehot_categorical_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testSampleWithSampleShape": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "tensorflow.math.log",
    "tensorflow_probability.python.distributions.onehot_categorical_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testShapes": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "len",
    "tensorflow.constant",
    "tensorflow.get_static_value",
    "tensorflow.int32",
    "tensorflow_probability.python.distributions.onehot_categorical_test.make_onehot_categorical",
    "tensorflow_probability.python.internal.tensorshape_util.as_list",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.OneHotCategoricalTest.testUnknownShape": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.onehot_categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.make_onehot_categorical": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "list",
    "tensorflow.float32",
    "tensorflow.int32",
    "tensorflow.random.uniform",
    "tensorflow_probability.python.distributions.onehot_categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.tfd": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.onehot_categorical_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.pareto": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto.__init__": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.pareto.Pareto",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._batch_shape": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._batch_shape_tensor": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._cdf": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.expm1",
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._event_shape": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._extend_support": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "f",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.fill",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._log_cdf": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "numpy.inf",
    "tensorflow.compat.v2.math.log1p"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._log_prob": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "numpy.inf",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow_probability.python.internal.assert_util.assert_greater_equal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._log_prob.log_prob_on_support": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._log_survival_function": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "numpy.inf",
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._mean": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "numpy.inf",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.fill",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._mode": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "tensorflow.compat.v2.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._params_event_ndims": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._prob": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow_probability.python.internal.assert_util.assert_greater_equal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._prob.prob_on_support": {
  "data": {
   "lineno": 159
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._sample_n": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.math.log1p",
    "tensorflow.compat.v2.random.uniform"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto._variance": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "numpy.inf",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.fill",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto.concentration": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.Pareto.scale": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto._kl_pareto_pareto": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "numpy.inf",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.broadcast_to",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL",
    "tensorflow_probability.python.distributions.pareto.Pareto",
    "tensorflow_probability.python.internal.distribution_util.get_broadcast_shape",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.pareto.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.pareto.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.pareto.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.pareto.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.pareto.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.pareto.kullback_leibler": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.pareto.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.pareto.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.pareto.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.pareto.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.pareto.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.pareto_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest._scipy_pareto": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "scipy.stats.pareto"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testInvalidConcentration": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.pareto_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testInvalidScale": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.pareto_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoCDFGradientZeroOutsideSupport": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.distributions.pareto_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoLogCdf": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.pareto_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoLogCdfMultidimensional": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.pareto_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoLogPdf": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.pareto_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoLogPdfMultidimensional": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.pareto_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoLogPdfValidateArgs": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.pareto_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoMean": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.pareto_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoMeanInf": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "numpy.all",
    "numpy.isinf",
    "tensorflow_probability.python.distributions.pareto_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoMode": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.pareto_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoPDFGradientZeroOutsideSupport": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.distributions.pareto_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoParetoKLFinite": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": [
    "int",
    "numpy.arange",
    "numpy.log",
    "tensorflow.reduce_mean",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.distributions.pareto_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoParetoKLInfinite": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": [
    "numpy.inf",
    "tensorflow_probability.python.distributions.pareto_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoSampleMean": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "int",
    "tensorflow_probability.python.distributions.pareto_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoSampleMultidimensionalMean": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": [
    "int",
    "numpy.arange",
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.distributions.pareto_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoSampleMultidimensionalVariance": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "int",
    "numpy.arange",
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.distributions.pareto_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoSampleVariance": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "int",
    "tensorflow_probability.python.distributions.pareto_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoShape": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.pareto_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoShapeBroadcast": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.pareto_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoStd": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.pareto_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoVariance": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.pareto_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.ParetoTest.testParetoVarianceInf": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "numpy.all",
    "numpy.isinf",
    "tensorflow_probability.python.distributions.pareto_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.pareto_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.pareto_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.pareto_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.pareto_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.pareto_test.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.pareto_test.test_case": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_case"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.pareto_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.pareto_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.pareto_test.tfd": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.pareto_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.pareto_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson.__init__": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.poisson.Poisson",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.dtype_util.is_floating",
    "tensorflow_probability.python.internal.dtype_util.name",
    "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._batch_shape": {
  "data": {
   "lineno": 150
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._batch_shape_tensor": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._cdf": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.broadcast_to",
    "tensorflow.compat.v2.floor",
    "tensorflow.compat.v2.math.igammac",
    "tensorflow.compat.v2.maximum",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._event_shape": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._event_shape_tensor": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._log_cdf": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._log_normalization": {
  "data": {
   "lineno": 182
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._log_prob": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "numpy.inf",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.fill",
    "tensorflow.compat.v2.math.is_inf",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._log_unnormalized_prob": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "numpy.inf",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.broadcast_to",
    "tensorflow.compat.v2.equal",
    "tensorflow.compat.v2.fill",
    "tensorflow.compat.v2.floor",
    "tensorflow.compat.v2.math.lgamma",
    "tensorflow.compat.v2.maximum",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._mean": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "tensorflow.compat.v2.identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._mode": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "tensorflow.compat.v2.floor",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._params_event_ndims": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._sample_n": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "tensorflow.compat.v2.random.poisson"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson._variance": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "tensorflow.compat.v2.identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson.interpolate_nondiscrete": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson.log_rate": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.Poisson.rate": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson.__all__": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.poisson.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound.__init__": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "TypeError",
    "dict",
    "locals",
    "quadrature_fn",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.categorical.Categorical",
    "tensorflow_probability.python.distributions.poisson.Poisson",
    "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound",
    "tensorflow_probability.python.distributions.poisson_lognormal.quadrature_scheme_lognormal_quantiles",
    "tensorflow_probability.python.internal.dtype_util.base_equal",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.dtype_util.name",
    "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound._batch_shape": {
  "data": {
   "lineno": 328,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound._batch_shape_tensor": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound._event_shape": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound._log_prob": {
  "data": {
   "lineno": 377,
   "symbols_in_volume": [
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.reduce_logsumexp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound._log_variance": {
  "data": {
   "lineno": 396,
   "symbols_in_volume": [
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.reduce_logsumexp",
    "tensorflow.compat.v2.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound._mean": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": [
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.reduce_logsumexp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound._sample_n": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": [
    "concat_vectors",
    "numpy.int32",
    "stream",
    "tensorflow.compat.v2.gather",
    "tensorflow.compat.v2.random.poisson",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.reduce_prod",
    "tensorflow.compat.v2.reshape",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream",
    "tensorflow_probability.python.internal.distribution_util.pick_vector",
    "tensorflow_probability.python.internal.tensorshape_util.num_elements"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound._stddev": {
  "data": {
   "lineno": 393,
   "symbols_in_volume": [
    "tensorflow.compat.v2.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound._variance": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": [
    "tensorflow.compat.v2.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound.distribution": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound.loc": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound.mixture_distribution": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound.quadrature_size": {
  "data": {
   "lineno": 319,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.PoissonLogNormalQuadratureCompound.scale": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.__all__": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.categorical": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.categorical"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.concat_vectors": {
  "data": {
   "lineno": 425,
   "symbols_in_volume": [
    "any",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.get_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.exp_bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.exp"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.normal": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.normal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.poisson": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.poisson"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.quadrature_scheme_lognormal_gauss_hermite": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "numpy.linalg.norm",
    "numpy.polynomial.hermite.hermgauss",
    "numpy.sqrt",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.newaxis",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.quadrature_scheme_lognormal_quantiles": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "_compute_quantiles",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.fill",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.bijectors.exp.Exp",
    "tensorflow_probability.python.distributions.normal.Normal",
    "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution",
    "tensorflow_probability.python.internal.tensorshape_util.concatenate",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.quadrature_scheme_lognormal_quantiles._compute_quantiles": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.linspace",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.transpose",
    "tensorflow.compat.v2.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.seed_stream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal.transformed_distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.transformed_distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test.PoissonLogNormalQuadratureCompoundDynamicShapeTest": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.poisson_lognormal_test._PoissonLogNormalQuadratureCompoundTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test.PoissonLogNormalQuadratureCompoundDynamicShapeTest.static_shape": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test.PoissonLogNormalQuadratureCompoundStaticShapeTest": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.poisson_lognormal_test._PoissonLogNormalQuadratureCompoundTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test.PoissonLogNormalQuadratureCompoundStaticShapeTest.static_shape": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test._PoissonLogNormalQuadratureCompoundTest": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.test_util.DiscreteScalarDistributionTestHelpers"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test._PoissonLogNormalQuadratureCompoundTest.testMeanVariance": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.poisson_lognormal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test._PoissonLogNormalQuadratureCompoundTest.testMeanVarianceBroadcastBoth": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.poisson_lognormal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test._PoissonLogNormalQuadratureCompoundTest.testMeanVarianceBroadcastScalar": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.poisson_lognormal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test._PoissonLogNormalQuadratureCompoundTest.testSampleProbConsistent": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.poisson_lognormal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test._PoissonLogNormalQuadratureCompoundTest.testSampleProbConsistentBroadcastBoth": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.poisson_lognormal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test._PoissonLogNormalQuadratureCompoundTest.testSampleProbConsistentBroadcastScalar": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.poisson_lognormal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test.tfd": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_lognormal_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonLogRateTest": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.distributions.poisson_test.PoissonTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonLogRateTest._make_poisson": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log",
    "tensorflow_probability.python.distributions.poisson_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonLogRateTest.testInvalidLam": {
  "data": {
   "lineno": 319
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest._make_poisson": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.poisson_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testInvalidLam": {
  "data": {
   "lineno": 53
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonCdf": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "scipy.stats.poisson.cdf",
    "scipy.stats.poisson.logcdf",
    "tensorflow.compat.v2.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonCdfContinuousRelaxation": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.math.igammac",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonCdfGradient": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "scipy.stats.poisson.cdf",
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.math.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonCdfGradient.cdf": {
  "data": {
   "lineno": 198
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonCdfMultidimensional": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "scipy.stats.poisson.cdf",
    "scipy.stats.poisson.logcdf",
    "tensorflow.compat.v2.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonLogPmfContinuousRelaxation": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.inf",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.fill",
    "tensorflow.compat.v2.math.lgamma",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonLogPmfDiscreteMatchesScipy": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "scipy.stats.poisson.logpmf",
    "scipy.stats.poisson.pmf",
    "tensorflow.compat.v2.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonLogPmfGradient": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "scipy.stats.poisson.logpmf",
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.math.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonLogPmfGradientAtZeroPmf": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "numpy.zeros",
    "print",
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.math.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonLogPmfGradientAtZeroPmf.poisson_log_prob": {
  "data": {
   "lineno": 129
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonLogPmfMultidimensional": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "scipy.stats.poisson.logpmf",
    "scipy.stats.poisson.pmf",
    "tensorflow.compat.v2.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonMean": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": [
    "scipy.stats.poisson.mean"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonMode": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "numpy.floor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonMultipleMode": {
  "data": {
   "lineno": 255
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonSample": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": [
    "int",
    "scipy.stats.poisson.mean",
    "scipy.stats.poisson.var",
    "tensorflow.compat.v2.constant",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonSampleMultidimensionalMean": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": [
    "int",
    "numpy.arange",
    "numpy.array",
    "numpy.float32",
    "scipy.stats.poisson.mean",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonSampleMultidimensionalVariance": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "int",
    "numpy.arange",
    "numpy.array",
    "numpy.float32",
    "scipy.stats.poisson.var",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonShape": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape",
    "tensorflow.compat.v2.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonStd": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "numpy.sqrt",
    "scipy.stats.poisson.std"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.PoissonTest.testPoissonVariance": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "scipy.stats.poisson.var"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.poisson_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_test.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_test.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_test.test_case": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_case"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_test.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_test.tfd": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.poisson_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.poisson_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.quadrature_scheme_lognormal_gauss_hermite": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.poisson_lognormal.quadrature_scheme_lognormal_gauss_hermite"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.quadrature_scheme_lognormal_quantiles": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.poisson_lognormal.quadrature_scheme_lognormal_quantiles"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.quadrature_scheme_softmaxnormal_gauss_hermite": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.vector_diffeomixture.quadrature_scheme_softmaxnormal_gauss_hermite"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.quadrature_scheme_softmaxnormal_quantiles": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.vector_diffeomixture.quadrature_scheme_softmaxnormal_quantiles"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.quantized_distribution": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.quantized_distribution._cdf_base_note",
    "tensorflow_probability.python.distributions.quantized_distribution._prob_base_note",
    "tensorflow_probability.python.distributions.quantized_distribution._sf_base_note"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution.__init__": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.distribution",
    "tensorflow_probability.python.distributions.distribution.dtype",
    "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution",
    "tensorflow_probability.python.internal.assert_util.assert_less",
    "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
    "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._batch_shape": {
  "data": {
   "lineno": 329
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._batch_shape_tensor": {
  "data": {
   "lineno": 326
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._cdf": {
  "data": {
   "lineno": 459,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.floor",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.distributions.quantized_distribution._cdf_note",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._check_integer": {
  "data": {
   "lineno": 555,
   "symbols_in_volume": [
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.internal.distribution_util.assert_integer_form",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._event_shape": {
  "data": {
   "lineno": 335
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._event_shape_tensor": {
  "data": {
   "lineno": 332
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._log_cdf": {
  "data": {
   "lineno": 428,
   "symbols_in_volume": [
    "numpy.inf",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.floor",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.distributions.quantized_distribution._log_cdf_note",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._log_prob": {
  "data": {
   "lineno": 359,
   "symbols_in_volume": [
    "NotImplementedError",
    "hasattr",
    "tensorflow_probability.python.distributions.quantized_distribution._log_prob_note",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._log_prob_with_logcdf": {
  "data": {
   "lineno": 371,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.quantized_distribution._logsum_expbig_minus_expsmall"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._log_prob_with_logsf_and_logcdf": {
  "data": {
   "lineno": 374,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow_probability.python.distributions.quantized_distribution._logsum_expbig_minus_expsmall"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._log_survival_function": {
  "data": {
   "lineno": 491,
   "symbols_in_volume": [
    "numpy.inf",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.math.ceil",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.distributions.quantized_distribution._log_sf_note",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._prob": {
  "data": {
   "lineno": 398,
   "symbols_in_volume": [
    "NotImplementedError",
    "hasattr",
    "tensorflow_probability.python.distributions.quantized_distribution._prob_note",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._prob_with_cdf": {
  "data": {
   "lineno": 410
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._prob_with_sf_and_cdf": {
  "data": {
   "lineno": 413,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._sample_n": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.math.ceil",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution._survival_function": {
  "data": {
   "lineno": 523,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.math.ceil",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.distributions.quantized_distribution._sf_note",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution.distribution": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution.high": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.QuantizedDistribution.low": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.__all__": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.quantized_distribution._cdf_base_note": {
  "data": {
   "lineno": 80
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.quantized_distribution._cdf_note": {
  "data": {
   "lineno": 96
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.quantized_distribution._log_cdf_note": {
  "data": {
   "lineno": 100
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.quantized_distribution._log_prob_note": {
  "data": {
   "lineno": 72
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.quantized_distribution._log_sf_note": {
  "data": {
   "lineno": 125
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.quantized_distribution._logsum_expbig_minus_expsmall": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.math.log1p",
    "tensorflow.compat.v2.name_scope"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution._prob_base_note": {
  "data": {
   "lineno": 53
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.quantized_distribution._prob_note": {
  "data": {
   "lineno": 65
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.quantized_distribution._sf_base_note": {
  "data": {
   "lineno": 105
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.quantized_distribution._sf_note": {
  "data": {
   "lineno": 121
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.distributions": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.quantized_distribution.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "numpy.random.RandomState",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest._assert_all_finite": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "numpy.isfinite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testCutoffsCanBeFloatValuedIfValidateArgsFalse": {
  "data": {
   "lineno": 367,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.quantized_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testCutoffsMustBeIntegerValuedIfValidateArgsTrue": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.quantized_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testDtypeAndShapeInheritedFromBaseDist": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.quantized_distribution_test.rng",
    "tensorflow_probability.python.distributions.quantized_distribution_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testLogProbAndGradGivesFiniteResults": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.float64",
    "quantized_log_prob",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow_probability.math.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testLogProbAndGradGivesFiniteResults.quantized_log_prob": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": [
    "numpy.arange"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testLogProbAndGradGivesFiniteResults.quantized_log_prob.inner_func": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.quantized_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testLowerCutoffMustBeBelowUpperCutoffOrWeRaise": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.quantized_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testNormalCdfAndSurvivalFunction": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": [
    "numpy.float64",
    "scipy.stats.norm",
    "tensorflow_probability.python.distributions.quantized_distribution_test.rng",
    "tensorflow_probability.python.distributions.quantized_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testNormalLogCdfAndLogSurvivalFunction": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "numpy.float64",
    "scipy.stats.norm",
    "tensorflow_probability.python.distributions.quantized_distribution_test.rng",
    "tensorflow_probability.python.distributions.quantized_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testNormalLogProbWithCutoffs": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "numpy.log",
    "scipy.stats.norm",
    "tensorflow_probability.python.distributions.quantized_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testNormalProbWithCutoffs": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": [
    "scipy.stats.norm",
    "tensorflow_probability.python.distributions.quantized_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testProbAndGradGivesFiniteResultsForCommonEvents": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": [
    "quantized_log_prob",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow_probability.math.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testProbAndGradGivesFiniteResultsForCommonEvents.quantized_log_prob": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.math.ceil",
    "tensorflow_probability.python.distributions.quantized_distribution_test.rng",
    "tensorflow_probability.python.distributions.quantized_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testQuantizationOfBatchOfUniforms": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.ones",
    "tensorflow.float32",
    "tensorflow.ones",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.quantized_distribution_test.rng",
    "tensorflow_probability.python.distributions.quantized_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testQuantizationOfUniformWithCutoffsHavingNoEffect": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.quantized_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testQuantizationOfUniformWithCutoffsInTheMiddle": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.quantized_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testSamplesAgreeWithCdfForSamplesOverLargeRange": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "scipy.stats.kstest",
    "tensorflow_probability.python.distributions.quantized_distribution_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testSamplesAgreeWithPdfForSamplesOverSmallRange": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.float32",
    "numpy.sqrt",
    "range",
    "tensorflow_probability.python.distributions.quantized_distribution_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.QuantizedDistributionTest.testSamplingFromBatchOfNormals": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "tensorflow.float32",
    "tensorflow.ones",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.quantized_distribution_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.rng": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.test_case": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_case"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.tfd": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.quantized_distribution_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.reduce_weighted_logsumexp": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util.reduce_weighted_logsumexp"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli.RelaxedBernoulli": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli.RelaxedBernoulli.__init__": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.bijectors.sigmoid.Sigmoid",
    "tensorflow_probability.python.distributions.logistic.Logistic",
    "tensorflow_probability.python.distributions.relaxed_bernoulli.RelaxedBernoulli",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli.RelaxedBernoulli._param_shapes": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli.RelaxedBernoulli._params_event_ndims": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli.RelaxedBernoulli.logits": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli.RelaxedBernoulli.probs": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli.RelaxedBernoulli.temperature": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli.logistic": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.logistic"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli.sigmoid_bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.sigmoid"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli.transformed_distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.transformed_distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.RelaxedBernoulliTest": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.RelaxedBernoulliTest.testBoundaryConditions": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "numpy.nan",
    "tensorflow_probability.python.distributions.relaxed_bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.RelaxedBernoulliTest.testDtype": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.float64",
    "tensorflow_probability.python.distributions.relaxed_bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.RelaxedBernoulliTest.testInvalidP": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.relaxed_bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.RelaxedBernoulliTest.testLogProb": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float64",
    "numpy.log",
    "numpy.power",
    "tensorflow_probability.python.distributions.relaxed_bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.RelaxedBernoulliTest.testLogits": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.relaxed_bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.RelaxedBernoulliTest.testP": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.relaxed_bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.RelaxedBernoulliTest.testSampleN": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "numpy.all",
    "numpy.sum",
    "tensorflow.compat.v2.float32",
    "tensorflow_probability.python.distributions.relaxed_bernoulli_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.RelaxedBernoulliTest.testShapes": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.random.random",
    "tensorflow_probability.python.distributions.relaxed_bernoulli_test.tfd",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.RelaxedBernoulliTest.testZeroTemperature": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.errors.InvalidArgumentError",
    "tensorflow_probability.python.distributions.relaxed_bernoulli_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.scipy.special": {
  "data": {
   "shadows": "scipy.special"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.tfd": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_bernoulli_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical.__init__": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.rank",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._assert_valid_sample": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": [
    "tensorflow.compat.v2.reduce_logsumexp",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.internal.assert_util.assert_near",
    "tensorflow_probability.python.internal.assert_util.assert_non_positive",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._batch_shape": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._batch_shape_tensor": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._event_shape": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._event_shape_tensor": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._log_prob": {
  "data": {
   "lineno": 261,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.math.lgamma",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.nn.log_softmax",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._params_event_ndims": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical._sample_n": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "numpy.finfo",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.nn.log_softmax",
    "tensorflow.compat.v2.random.uniform",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical.event_size": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical.logits": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical.probs": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical.temperature": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.RelaxedOneHotCategorical": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.RelaxedOneHotCategorical.__init__": {
  "data": {
   "lineno": 365,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.bijectors.exp.Exp",
    "tensorflow_probability.python.distributions.relaxed_onehot_categorical.ExpRelaxedOneHotCategorical",
    "tensorflow_probability.python.distributions.relaxed_onehot_categorical.RelaxedOneHotCategorical"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.exp_bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.exp"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical.transformed_distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.transformed_distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.ExpRelaxedOneHotCategoricalTest": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.ExpRelaxedOneHotCategoricalTest.testP": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.sum",
    "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.ExpRelaxedOneHotCategoricalTest.testPdf": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "len",
    "numpy.exp",
    "numpy.power",
    "numpy.prod",
    "numpy.sum",
    "scipy.special.gamma",
    "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.RelaxedOneHotCategoricalTest": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.RelaxedOneHotCategoricalTest.testDTypes": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "tensorflow.float16",
    "tensorflow.float32",
    "tensorflow.float64",
    "tensorflow.random.uniform",
    "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.RelaxedOneHotCategoricalTest.testLogits": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.RelaxedOneHotCategoricalTest.testParamBroadcasting": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.RelaxedOneHotCategoricalTest.testPdf": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.analytical_pdf",
    "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.RelaxedOneHotCategoricalTest.testSample": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.random.uniform",
    "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.RelaxedOneHotCategoricalTest.testShapes": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "len",
    "tensorflow.constant",
    "tensorflow.int32",
    "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.make_relaxed_categorical",
    "tensorflow_probability.python.internal.tensorshape_util.as_list",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.RelaxedOneHotCategoricalTest.testUnknownShape": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.analytical_pdf": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "len",
    "numpy.exp",
    "numpy.expand_dims",
    "numpy.power",
    "numpy.prod",
    "numpy.reshape",
    "numpy.sum",
    "scipy.special.gamma"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.gamma": {
  "data": {
   "shadows": "scipy.special.gamma"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.make_relaxed_categorical": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "list",
    "tensorflow.float32",
    "tensorflow.random.uniform",
    "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.tfd": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.relaxed_onehot_categorical_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sample": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.sample.Sample": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution",
    "tensorflow_probability.python.distributions.sample._make_summary_statistic"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.sample.Sample.__init__": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.distribution",
    "tensorflow_probability.python.distributions.distribution._graph_parents",
    "tensorflow_probability.python.distributions.distribution.name",
    "tensorflow_probability.python.distributions.sample.Sample",
    "tensorflow_probability.python.internal.distribution_util.expand_to_vector"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample.Sample._batch_shape": {
  "data": {
   "lineno": 158
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample.Sample._batch_shape_tensor": {
  "data": {
   "lineno": 155
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample.Sample._entropy": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow_probability.python.internal.prefer_static.reduce_prod"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample.Sample._event_shape": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow_probability.python.internal.tensorshape_util.concatenate",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample.Sample._event_shape_tensor": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.prefer_static.concat"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample.Sample._log_prob": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "tensorflow.compat.v2.pad",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.transpose",
    "tensorflow_probability.python.internal.prefer_static.concat",
    "tensorflow_probability.python.internal.prefer_static.maximum",
    "tensorflow_probability.python.internal.prefer_static.range",
    "tensorflow_probability.python.internal.prefer_static.rank",
    "tensorflow_probability.python.internal.prefer_static.rank_from_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample.Sample._sample_n": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "tensorflow.compat.v2.transpose",
    "tensorflow_probability.python.internal.prefer_static.concat",
    "tensorflow_probability.python.internal.prefer_static.range",
    "tensorflow_probability.python.internal.prefer_static.rank_from_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample.Sample.distribution": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample.Sample.sample_shape": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample._kl_sample": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": [
    "ValueError",
    "numpy.array_equal",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL",
    "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence",
    "tensorflow_probability.python.distributions.sample.Sample",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.prefer_static.reduce_prod"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample._make_summary_statistic": {
  "data": {
   "lineno": 34
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample._make_summary_statistic._fn": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "getattr",
    "tensorflow.compat.v2.broadcast_to",
    "tensorflow.compat.v2.reshape",
    "tensorflow_probability.python.internal.prefer_static.concat",
    "tensorflow_probability.python.internal.prefer_static.ones",
    "tensorflow_probability.python.internal.prefer_static.rank_from_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sample.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sample.distribution_lib": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sample.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sample.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sample.kullback_leibler": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sample.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sample.prefer_static": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.prefer_static"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sample.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sample.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sample.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sample_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main",
    "tensorflow_probability.bijectors",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.sample_test.SampleDistributionTest": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.sample_test.SampleDistributionTest.test_entropy": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.distributions.sample_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample_test.SampleDistributionTest.test_everything_nonscalar": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow.compat.v2.transpose",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.distributions.sample_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample_test.SampleDistributionTest.test_everything_scalar": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.distributions.sample_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample_test.SampleDistributionTest.test_kl_divergence": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.ones",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.distributions.sample_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample_test.SampleDistributionTest.test_mixed_scalar": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.sample_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample_test.SampleDistributionTest.test_summary_statistic": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "getattr",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.distributions.sample_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample_test.SampleDistributionTest.test_transformed_affine": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "expected_lp",
    "tensorflow_probability.python.distributions.sample_test.tfb",
    "tensorflow_probability.python.distributions.sample_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample_test.SampleDistributionTest.test_transformed_affine.expected_lp": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "tensorflow.compat.v2.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample_test.SampleDistributionTest.test_transformed_exp": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "expected_lp",
    "tensorflow_probability.python.distributions.sample_test.tfb",
    "tensorflow_probability.python.distributions.sample_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample_test.SampleDistributionTest.test_transformed_exp.expected_lp": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "tensorflow.compat.v2.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sample_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sample_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sample_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sample_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sample_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sample_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sample_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sample_test.tfb": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.sample_test.tfd": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.sample_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sample_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.seed_stream": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.seed_stream.SeedStream": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.seed_stream.SeedStream.__call__": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "int",
    "str",
    "tensorflow_probability.python.distributions.seed_stream.hashlib"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.seed_stream.SeedStream.__init__": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "isinstance",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.seed_stream.SeedStream.original_seed": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.seed_stream.SeedStream.salt": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.seed_stream.__all__": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.seed_stream.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.seed_stream.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.seed_stream.hashlib": {
  "data": {
   "shadows": "hashlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.seed_stream.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.seed_stream_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.seed_stream_test.SeedStreamTest": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.seed_stream_test.SeedStreamTest.assertAllUnique": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.seed_stream_test.SeedStreamTest.testInitFromOtherSeedStream": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "range",
    "strm1",
    "strm2",
    "strm3",
    "tensorflow_probability.python.distributions.seed_stream_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.seed_stream_test.SeedStreamTest.testNestingRobustness": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "range",
    "strm1",
    "strm2",
    "strm3",
    "tensorflow_probability.python.distributions.seed_stream_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.seed_stream_test.SeedStreamTest.testNonRepetition": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "list",
    "range",
    "set",
    "sorted",
    "strm",
    "tensorflow_probability.python.distributions.seed_stream_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.seed_stream_test.SeedStreamTest.testReproducibility": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "range",
    "strm1",
    "strm2",
    "strm3",
    "tensorflow_probability.python.distributions.seed_stream_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.seed_stream_test.SeedStreamTest.testSaltedDistinctness": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "range",
    "strm1",
    "strm2",
    "tensorflow_probability.python.distributions.seed_stream_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.seed_stream_test.SeedStreamTest.testSeededDistinctness": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "range",
    "strm1",
    "strm2",
    "tensorflow_probability.python.distributions.seed_stream_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.seed_stream_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.seed_stream_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.seed_stream_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.seed_stream_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.seed_stream_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.seed_stream_test.tfd": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.seed_stream_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh.SinhArcsinh": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh.SinhArcsinh.__init__": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.bijectors.affine_scalar.AffineScalar",
    "tensorflow_probability.python.bijectors.chain.Chain",
    "tensorflow_probability.python.bijectors.sinh_arcsinh.SinhArcsinh",
    "tensorflow_probability.python.distributions.normal.Normal",
    "tensorflow_probability.python.distributions.sinh_arcsinh.SinhArcsinh",
    "tensorflow_probability.python.internal.distribution_util.get_broadcast_shape",
    "tensorflow_probability.python.internal.distribution_util.maybe_check_scalar_distribution",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh.SinhArcsinh.loc": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh.SinhArcsinh.scale": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh.SinhArcsinh.skewness": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh.SinhArcsinh.tailweight": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh.__all__": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh.affine_scalar_bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.affine_scalar"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh.chain_bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.chain"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh.normal": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.normal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh.sinh_arcsinh_bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.sinh_arcsinh"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh.transformed_distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.transformed_distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "numpy.random.RandomState",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.SinhArcsinhTest": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.SinhArcsinhTest.test_broadcast_params_dynamic": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.sinh_arcsinh_test.rng",
    "tensorflow_probability.python.distributions.sinh_arcsinh_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.SinhArcsinhTest.test_default_is_same_as_normal": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.sinh_arcsinh_test.rng",
    "tensorflow_probability.python.distributions.sinh_arcsinh_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.SinhArcsinhTest.test_passing_in_laplace_plus_defaults_is_same_as_laplace": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow_probability.python.distributions.sinh_arcsinh_test.rng",
    "tensorflow_probability.python.distributions.sinh_arcsinh_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.SinhArcsinhTest.test_pdf_reflected_for_negative_skewness": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.linspace",
    "tensorflow_probability.python.distributions.sinh_arcsinh_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.SinhArcsinhTest.test_positive_skewness_moves_mean_to_the_right": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "numpy.testing.assert_array_less",
    "tensorflow_probability.python.distributions.sinh_arcsinh_test.rng",
    "tensorflow_probability.python.distributions.sinh_arcsinh_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.SinhArcsinhTest.test_tailweight_large_gives_more_outliers_than_normal": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "int",
    "numpy.float64",
    "numpy.percentile",
    "numpy.testing.assert_array_less",
    "tensorflow_probability.python.distributions.sinh_arcsinh_test.rng",
    "tensorflow_probability.python.distributions.sinh_arcsinh_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.SinhArcsinhTest.test_tailweight_small_gives_fewer_outliers_than_normal": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "int",
    "numpy.float64",
    "numpy.percentile",
    "numpy.testing.assert_array_less",
    "tensorflow_probability.python.distributions.sinh_arcsinh_test.rng",
    "tensorflow_probability.python.distributions.sinh_arcsinh_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.rng": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.tfd": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.sinh_arcsinh_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.softplus_inverse": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util.softplus_inverse"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT.__init__": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.student_t.StudentT",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._batch_shape": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._batch_shape_tensor": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._cdf": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.less",
    "tensorflow.compat.v2.math.betainc"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._entropy": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.math.digamma",
    "tensorflow.compat.v2.math.lbeta",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.ones"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._event_shape": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._event_shape_tensor": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._log_normalization": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.pi",
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.math.lgamma",
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._log_prob": {
  "data": {
   "lineno": 255
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._log_unnormalized_prob": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log1p"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._mean": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": [
    "numpy.nan",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.fill",
    "tensorflow.compat.v2.greater",
    "tensorflow.compat.v2.ones",
    "tensorflow_probability.python.internal.assert_util.assert_less",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._mode": {
  "data": {
   "lineno": 343,
   "symbols_in_volume": [
    "tensorflow.compat.v2.identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._param_shapes": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "dict",
    "staticmethod",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._params_event_ndims": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._sample_n": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": [
    "seed",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.math.rsqrt",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.random.gamma",
    "tensorflow.compat.v2.random.normal",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT._variance": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": [
    "numpy.inf",
    "numpy.nan",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.fill",
    "tensorflow.compat.v2.greater",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.square",
    "tensorflow_probability.python.internal.assert_util.assert_less",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT.df": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT.loc": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.StudentT.scale": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t.__all__": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.student_t.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t.seed_stream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t_process": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.multivariate_student_t.MultivariateStudentTLinearOperator"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess.__init__": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "ValueError",
    "callable",
    "dict",
    "locals",
    "mean_fn",
    "super",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
    "tensorflow.compat.v2.linalg.cholesky",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.distributions.student_t_process.StudentTProcess",
    "tensorflow_probability.python.distributions.student_t_process._add_diagonal_shift",
    "tensorflow_probability.python.internal.assert_util.assert_greater",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess._covariance": {
  "data": {
   "lineno": 302
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess.df": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess.index_points": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess.jitter": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess.kernel": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.StudentTProcess.mean_fn": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.student_t_process._add_diagonal_shift": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.linalg.set_diag"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t_process.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t_process.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t_process.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t_process.multivariate_student_t": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.multivariate_student_t"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t_process.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t_process.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t_process_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.student_t_process_test.StudentTProcessDynamicTest": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.student_t_process_test._StudentTProcessTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.student_t_process_test.StudentTProcessStaticTest": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.student_t_process_test._StudentTProcessTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.student_t_process_test._StudentTProcessTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.student_t_process_test._StudentTProcessTest.testCopy": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "mean_fn",
    "numpy.array",
    "numpy.float32",
    "numpy.random.uniform",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow.get_static_value",
    "tensorflow_probability.python.distributions.StudentTProcess",
    "tensorflow_probability.python.positive_semidefinite_kernels.ExpSinSquared",
    "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process_test._StudentTProcessTest.testMean": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "mean_fn",
    "numpy.expand_dims",
    "numpy.random.uniform",
    "tensorflow_probability.python.distributions.StudentTProcess",
    "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process_test._StudentTProcessTest.testShapes": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.linspace",
    "numpy.meshgrid",
    "numpy.reshape",
    "numpy.stack",
    "tensorflow.compat.dimension_value",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.StudentTProcess",
    "tensorflow_probability.python.internal.tensorshape_util.dims",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process_test._StudentTProcessTest.testVarianceAndCovarianceMatrix": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "_kernel_fn",
    "numpy.diag",
    "numpy.expand_dims",
    "numpy.eye",
    "numpy.float64",
    "numpy.random.uniform",
    "tensorflow_probability.python.distributions.StudentTProcess",
    "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process_test._StudentTProcessTest.testVarianceAndCovarianceMatrix._kernel_fn": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.squeeze"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_process_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t_process_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t_process_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t_process_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t_process_test.psd_kernels": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t_process_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t_process_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t_process_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t_process_test.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.distributions.student_t_test.try_import"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest._assertIntegral": {
  "data": {
   "lineno": 468,
   "symbols_in_volume": [
    "sorted",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest._checkKLApprox": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "numpy.histogram",
    "numpy.log",
    "numpy.random.seed",
    "numpy.sum",
    "tensorflow_probability.python.distributions.student_t_test.stats"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testBroadcastingParams": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": [
    "_check",
    "tensorflow_probability.python.distributions.student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testBroadcastingParams._check": {
  "data": {
   "lineno": 256
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testBroadcastingPdfArgs": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": [
    "_check",
    "_check2d",
    "_check2d_rows",
    "tensorflow_probability.python.distributions.student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testBroadcastingPdfArgs._assert_shape": {
  "data": {
   "lineno": 270
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testBroadcastingPdfArgs._check": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "_assert_shape",
    "numpy.array",
    "numpy.float32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testBroadcastingPdfArgs._check2d": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": [
    "_assert_shape",
    "numpy.array",
    "numpy.float32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testBroadcastingPdfArgs._check2d_rows": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": [
    "_assert_shape",
    "numpy.array",
    "numpy.float32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testFullyReparameterized": {
  "data": {
   "lineno": 428,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.distributions.student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testMeanAllowNanStatsIsFalseRaisesWhenBatchMemberIsUndefined": {
  "data": {
   "lineno": 319,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testMeanAllowNanStatsIsFalseWorksWhenAllBatchMembersAreDefined": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testMeanAllowNanStatsIsTrueReturnsNaNForUndefinedBatchMembers": {
  "data": {
   "lineno": 326,
   "symbols_in_volume": [
    "numpy.nan",
    "tensorflow_probability.python.distributions.student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testMode": {
  "data": {
   "lineno": 398,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testNegativeDofFails": {
  "data": {
   "lineno": 478,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testPdfOfSample": {
  "data": {
   "lineno": 407,
   "symbols_in_volume": [
    "numpy.mean",
    "numpy.pi",
    "tensorflow_probability.python.distributions.student_t_test.stats",
    "tensorflow_probability.python.distributions.student_t_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testPdfOfSampleMultiDims": {
  "data": {
   "lineno": 439,
   "symbols_in_volume": [
    "numpy.mean",
    "numpy.var",
    "tensorflow_probability.python.distributions.student_t_test.stats",
    "tensorflow_probability.python.distributions.student_t_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testStd": {
  "data": {
   "lineno": 381,
   "symbols_in_volume": [
    "len",
    "tensorflow_probability.python.distributions.student_t_test.stats",
    "tensorflow_probability.python.distributions.student_t_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testStudentCDFAndLogCDF": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "numpy.log",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.student_t_test.stats",
    "tensorflow_probability.python.distributions.student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testStudentEntropy": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "numpy.abs",
    "numpy.array",
    "numpy.reshape",
    "tensorflow_probability.python.distributions.student_t_test.stats",
    "tensorflow_probability.python.distributions.student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testStudentLogPDFMultidimensional": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "numpy.log",
    "numpy.sqrt",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.student_t_test.math",
    "tensorflow_probability.python.distributions.student_t_test.stats",
    "tensorflow_probability.python.distributions.student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testStudentPDFAndLogPDF": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "numpy.log",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.student_t_test.stats",
    "tensorflow_probability.python.distributions.student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testStudentSample": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "numpy.sqrt",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.student_t_test.math",
    "tensorflow_probability.python.distributions.student_t_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testStudentSampleMultiDimensional": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "numpy.sqrt",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.student_t_test.math",
    "tensorflow_probability.python.distributions.student_t_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testStudentSampleMultipleTimes": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.student_t_test.math",
    "tensorflow_probability.python.distributions.student_t_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testStudentSampleSmallDfNoNan": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "numpy.all",
    "numpy.isnan",
    "numpy.logical_not",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.student_t_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testVarianceAllowNanStatsFalseGivesCorrectValueForDefinedBatchMembers": {
  "data": {
   "lineno": 353,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.student_t_test.stats",
    "tensorflow_probability.python.distributions.student_t_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testVarianceAllowNanStatsFalseRaisesForUndefinedBatchMembers": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.student_t_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.StudentTTest.testVarianceAllowNanStatsTrueReturnsNaNforUndefinedBatchMembers": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": [
    "numpy.nan",
    "tensorflow_probability.python.distributions.student_t_test.stats",
    "tensorflow_probability.python.distributions.student_t_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.student_t_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t_test.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t_test.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t_test.stats": {
  "data": {
   "lineno": 44
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.student_t_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t_test.tfd": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.student_t_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.student_t_test.try_import": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "ImportError",
    "str",
    "tensorflow.compat.v1.logging.warning",
    "tensorflow_probability.python.distributions.student_t_test.importlib"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.ConditionalTransformedDistribution": {
  "data": {
   "lineno": 682,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.ConditionalTransformedDistribution.__new__": {
  "data": {
   "lineno": 685,
   "symbols_in_volume": [
    "super",
    "tensorflow.python.util.deprecation.deprecated",
    "tensorflow_probability.python.distributions.transformed_distribution.ConditionalTransformedDistribution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution.__getitem__": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": [
    "NotImplementedError",
    "super",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution.__init__": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "bool",
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.range",
    "tensorflow_probability.python.distributions.distribution",
    "tensorflow_probability.python.distributions.distribution._graph_parents",
    "tensorflow_probability.python.distributions.distribution.is_scalar_batch",
    "tensorflow_probability.python.distributions.distribution.is_scalar_event",
    "tensorflow_probability.python.distributions.distribution.name",
    "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution",
    "tensorflow_probability.python.distributions.transformed_distribution._default_kwargs_split_fn",
    "tensorflow_probability.python.distributions.transformed_distribution._pick_scalar_condition",
    "tensorflow_probability.python.internal.prefer_static.equal",
    "tensorflow_probability.python.internal.prefer_static.logical_not",
    "tensorflow_probability.python.internal.prefer_static.rank_from_shape",
    "tensorflow_probability.python.internal.prefer_static.reduce_all"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._batch_shape": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.tensorshape_util.constant_value_as_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._batch_shape_tensor": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.pick_vector"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._call_sample_n": {
  "data": {
   "lineno": 365,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._cdf": {
  "data": {
   "lineno": 479,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._entropy": {
  "data": {
   "lineno": 557,
   "symbols_in_volume": [
    "NotImplementedError",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.reduce_prod",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.size",
    "tensorflow.compat.v2.tile",
    "tensorflow_probability.python.internal.dtype_util.base_dtype",
    "tensorflow_probability.python.internal.prefer_static.ones_like",
    "tensorflow_probability.python.internal.prefer_static.zeros",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._event_shape": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.tensorshape_util.constant_value_as_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._event_shape_tensor": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.pick_vector"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._finish_log_prob_for_one_fiber": {
  "data": {
   "lineno": 416,
   "symbols_in_volume": [
    "int",
    "isinstance",
    "tensorflow.compat.v2.broadcast_static_shape",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape",
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._finish_prob_for_one_fiber": {
  "data": {
   "lineno": 452,
   "symbols_in_volume": [
    "int",
    "isinstance",
    "tensorflow.compat.v2.broadcast_static_shape",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.reduce_prod",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape",
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._log_cdf": {
  "data": {
   "lineno": 468,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._log_prob": {
  "data": {
   "lineno": 396,
   "symbols_in_volume": [
    "tensorflow.compat.v2.reduce_logsumexp",
    "tensorflow.compat.v2.stack",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._log_survival_function": {
  "data": {
   "lineno": 490,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._maybe_get_static_event_ndims": {
  "data": {
   "lineno": 669,
   "symbols_in_volume": [
    "tensorflow.compat.v2.size",
    "tensorflow_probability.python.internal.distribution_util.maybe_get_static_value",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._maybe_rotate_dims": {
  "data": {
   "lineno": 658,
   "symbols_in_volume": [
    "tensorflow.compat.v2.get_static_value",
    "tensorflow.compat.v2.transpose",
    "tensorflow_probability.python.internal.prefer_static.concat",
    "tensorflow_probability.python.internal.prefer_static.range",
    "tensorflow_probability.python.internal.prefer_static.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._maybe_validate_shape_override": {
  "data": {
   "lineno": 604,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "any",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow.compat.v2.int32",
    "tensorflow_probability.python.distributions.transformed_distribution._is_scalar_from_shape_tensor",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.assert_util.assert_non_negative",
    "tensorflow_probability.python.internal.assert_util.assert_rank",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.is_integer",
    "tensorflow_probability.python.internal.prefer_static.logical_and",
    "tensorflow_probability.python.internal.prefer_static.logical_not",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._mean": {
  "data": {
   "lineno": 526,
   "symbols_in_volume": [
    "NotImplementedError",
    "tensorflow.compat.v2.broadcast_to",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.reshape",
    "tensorflow_probability.python.internal.prefer_static.concat",
    "tensorflow_probability.python.internal.prefer_static.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._prob": {
  "data": {
   "lineno": 433,
   "symbols_in_volume": [
    "hasattr",
    "sum",
    "tensorflow.compat.v2.exp",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._quantile": {
  "data": {
   "lineno": 512,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._sample_n": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.pick_vector",
    "tensorflow_probability.python.internal.prefer_static.concat"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution._survival_function": {
  "data": {
   "lineno": 501,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution.bijector": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution.distribution": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.__all__": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.transformed_distribution._default_kwargs_split_fn": {
  "data": {
   "lineno": 58
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution._is_scalar_from_shape_tensor": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.prefer_static.equal",
    "tensorflow_probability.python.internal.prefer_static.rank_from_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution._pick_scalar_condition": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.get_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.deprecation": {
  "data": {
   "shadows": "tensorflow.python.util.deprecation"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.distribution_lib": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.prefer_static": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.prefer_static"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.transformed_distribution.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.bijectors",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.DummyMatrixTransform": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfb"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.DummyMatrixTransform.__init__": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.distributions.transformed_distribution_test.DummyMatrixTransform"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.DummyMatrixTransform._forward": {
  "data": {
   "lineno": 51
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.DummyMatrixTransform._forward_log_det_jacobian": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "tensorflow.linalg.det"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.DummyMatrixTransform._inverse": {
  "data": {
   "lineno": 54
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.DummyMatrixTransform._inverse_log_det_jacobian": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "tensorflow.linalg.det"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.ScalarToMultiTest": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.ScalarToMultiTest._cls": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.ScalarToMultiTest._testMVN": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": [
    "NotImplementedError",
    "actual_mvn_log_prob",
    "base_distribution_class",
    "int",
    "len",
    "numpy.concatenate",
    "numpy.exp",
    "numpy.int32",
    "numpy.matmul",
    "numpy.tile",
    "numpy.transpose",
    "range",
    "scipy.stats.multivariate_normal",
    "tensorflow.TensorShape",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow.matmul",
    "tensorflow.reduce_mean",
    "tensorflow.transpose",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfb",
    "tensorflow_probability.python.internal.test_util.test_seed",
    "unsupported_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.ScalarToMultiTest._testMVN.actual_mvn_log_prob": {
  "data": {
   "lineno": 354,
   "symbols_in_volume": [
    "len",
    "numpy.concatenate",
    "range",
    "scipy.stats.multivariate_normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.ScalarToMultiTest.setUp": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.ScalarToMultiTest.testEmptyEvent": {
  "data": {
   "lineno": 553,
   "symbols_in_volume": [
    "numpy.zeros",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.ones",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfd",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.ScalarToMultiTest.testMatrixEvent": {
  "data": {
   "lineno": 485,
   "symbols_in_volume": [
    "actual_mvn_log_prob",
    "int",
    "numpy.exp",
    "numpy.int32",
    "tensorflow.TensorShape",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.transformed_distribution_test.DummyMatrixTransform",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.ScalarToMultiTest.testMatrixEvent.actual_mvn_log_prob": {
  "data": {
   "lineno": 509,
   "symbols_in_volume": [
    "numpy.linalg.det",
    "numpy.sum",
    "scipy.stats.norm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.ScalarToMultiTest.testNonScalarBatchNonScalarEvent": {
  "data": {
   "lineno": 473,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfb",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.ScalarToMultiTest.testNonScalarBatchScalarEvent": {
  "data": {
   "lineno": 454,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfb",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.ScalarToMultiTest.testScalarBatchNonScalarEvent": {
  "data": {
   "lineno": 435,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfb",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.ScalarToMultiTest.testScalarBatchScalarEvent": {
  "data": {
   "lineno": 424,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest._cls": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest._make_unimplemented": {
  "data": {
   "lineno": 71
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest._make_unimplemented._unimplemented": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testCachedSamples": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "ExpForwardOnly",
    "numpy.exp",
    "scipy.stats.lognorm.logpdf",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testCachedSamples.ExpForwardOnly": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfb"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testCachedSamples.ExpForwardOnly.__init__": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testCachedSamples.ExpForwardOnly._forward": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "tensorflow.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testCachedSamples.ExpForwardOnly._forward_log_det_jacobian": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "tensorflow.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testCachedSamplesInvert": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "ExpInverseOnly",
    "numpy.exp",
    "scipy.stats.norm.logpdf",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfb",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testCachedSamplesInvert.ExpInverseOnly": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfb"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testCachedSamplesInvert.ExpInverseOnly.__init__": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testCachedSamplesInvert.ExpInverseOnly._inverse": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "tensorflow.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testCachedSamplesInvert.ExpInverseOnly._inverse_log_det_jacobian": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "tensorflow.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testCastLogDetJacobian": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.identity",
    "tensorflow.int32",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfb",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testEntropy": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": [
    "len",
    "numpy.array",
    "numpy.concatenate",
    "numpy.diag",
    "numpy.float32",
    "range",
    "scipy.stats.multivariate_normal",
    "tensorflow.linalg.LinearOperatorDiag",
    "tensorflow.ones_like",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfb",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testMean": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.linalg.LinearOperatorDiag",
    "tensorflow.ones_like",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfb",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testMeanShapeOverride": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.linalg.LinearOperatorDiag",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfb",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testNonInjectiveTransformedDistribution": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.testing.assert_array_less",
    "scipy.stats.norm",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfb",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testQuantile": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfb",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testScalarBatchScalarEventIdentityScale": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": [
    "numpy.log",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfb",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testShapeChangingBijector": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.log",
    "numpy.squeeze",
    "numpy.sum",
    "scipy.stats.norm",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfb",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.TransformedDistributionTest.testTransformedDistribution": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.float32",
    "numpy.linspace",
    "numpy.mean",
    "scipy.stats.lognorm",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfb",
    "tensorflow_probability.python.distributions.transformed_distribution_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.tfb": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.tfd": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.transformed_distribution_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.triangular": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular.__init__": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.triangular.Triangular",
    "tensorflow_probability.python.internal.assert_util.assert_less",
    "tensorflow_probability.python.internal.assert_util.assert_less_equal",
    "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular._batch_shape": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular._batch_shape_tensor": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular._cdf": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.logical_and",
    "tensorflow.compat.v2.math.squared_difference",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.distributions.triangular._broadcast_to"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular._entropy": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": [
    "numpy.log",
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular._event_shape": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular._mean": {
  "data": {
   "lineno": 297
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular._params_event_ndims": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular._pdf_at_peak": {
  "data": {
   "lineno": 187
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular._prob": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.logical_and",
    "tensorflow.compat.v2.logical_or",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.distributions.triangular._broadcast_to",
    "tensorflow_probability.python.internal.assert_util.assert_greater_equal",
    "tensorflow_probability.python.internal.assert_util.assert_less_equal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular._sample_n": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "stream",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.random.uniform",
    "tensorflow.compat.v2.sqrt",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular._variance": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.squared_difference"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular.high": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular.low": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.Triangular.peak": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular._broadcast_to": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow.compat.v2.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.triangular.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.triangular.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.triangular.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.triangular.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.triangular.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.triangular.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.triangular.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.triangular.seed_stream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.triangular.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.triangular.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.triangular_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.triangular_test.TriangularTestDynamicShape": {
  "data": {
   "lineno": 365,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.distributions.triangular_test._TriangularTest",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.triangular_test.TriangularTestDynamicShape.setUp": {
  "data": {
   "lineno": 370,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test.TriangularTestFloat64StaticShape": {
  "data": {
   "lineno": 356,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.distributions.triangular_test._TriangularTest",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.triangular_test.TriangularTestFloat64StaticShape.setUp": {
  "data": {
   "lineno": 361,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test.TriangularTestStaticShape": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.distributions.triangular_test._TriangularTest",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.triangular_test.TriangularTestStaticShape.setUp": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest._create_triangular_dist": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.triangular_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest._scipy_triangular": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "scipy.stats.triang"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.make_tensor": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testInvalidDistribution": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.triangular_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testProperties": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "numpy.ones",
    "numpy.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testShapes": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.triangular_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testShapesBroadcast": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "numpy.ones",
    "numpy.zeros",
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.triangular_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularCDF": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularCDFBroadcast": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.array",
    "numpy.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularCDFPeakEqualsHigh": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularCDFPeakEqualsLow": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularEntropy": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": [
    "numpy.arange"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularExtrema": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.triangular_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularMean": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": [
    "numpy.arange"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularPDF": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularPDFBroadcast": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.array",
    "numpy.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularPDFPeakEqualsHigh": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularPDFPeakEqualsLow": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularSample": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": [
    "int",
    "numpy.all",
    "numpy.arange",
    "numpy.array",
    "tensorflow_probability.python.distributions.internal.statistical_testing.assert_true_mean_equal_by_dkwm",
    "tensorflow_probability.python.distributions.internal.statistical_testing.min_discrepancy_of_true_means_detectable_by_dkwm",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularSampleMultidimensionalMean": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "int",
    "numpy.arange",
    "numpy.array",
    "tensorflow_probability.python.distributions.triangular_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularSampleMultidimensionalVariance": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": [
    "int",
    "numpy.arange",
    "numpy.array",
    "tensorflow_probability.python.distributions.triangular_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test._TriangularTest.testTriangularVariance": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": [
    "numpy.arange"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.triangular_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.triangular_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.triangular_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.triangular_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.triangular_test.st": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.internal.statistical_testing"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.triangular_test.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.triangular_test.test_case": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_case"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.triangular_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.triangular_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.triangular_test.tfd": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.triangular_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.triangular_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.tridiag": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util.tridiag"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.truncated_normal": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal.__init__": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.ones",
    "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal",
    "tensorflow_probability.python.internal.distribution_util.get_broadcast_shape",
    "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._batch_shape": {
  "data": {
   "lineno": 225
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._batch_shape_tensor": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._cdf": {
  "data": {
   "lineno": 328,
   "symbols_in_volume": [
    "tensorflow.compat.v2.clip_by_value",
    "tensorflow_probability.python.internal.special_math.ndtr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._entropy": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": [
    "numpy.e",
    "numpy.pi",
    "numpy.sqrt",
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._event_shape": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._event_shape_tensor": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._log_prob": {
  "data": {
   "lineno": 318,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.pi",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.logical_or",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._mean": {
  "data": {
   "lineno": 342
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._mode": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": [
    "tensorflow.compat.v2.clip_by_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._normal_pdf": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "numpy.pi",
    "numpy.sqrt",
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.square"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._normalizer": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "property",
    "tensorflow_probability.python.internal.special_math.ndtr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._param_shapes": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._params_event_ndims": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._sample_n": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "_std_samples_with_gradients",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.expand_dims",
    "tensorflow.compat.v2.reduce_prod",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.stack",
    "tensorflow.compat.v2.transpose"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._sample_n._std_samples_with_gradients": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "tensorflow.compat.v2.custom_gradient",
    "tensorflow.python.ops.random_ops.parameterized_truncated_normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._sample_n._std_samples_with_gradients.grad": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": [
    "numpy.finfo",
    "tensorflow.compat.v2.clip_by_value",
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.math.log1p",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
    "tensorflow_probability.python.internal.special_math.ndtr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._standardized_high": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._standardized_low": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._validate": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "tensorflow.compat.v2.group",
    "tensorflow_probability.python.internal.assert_util.assert_finite",
    "tensorflow_probability.python.internal.assert_util.assert_positive"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal._variance": {
  "data": {
   "lineno": 355,
   "symbols_in_volume": [
    "tensorflow.compat.v2.square"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal.high": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal.loc": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal.low": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.TruncatedNormal.scale": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal.__all__": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.truncated_normal.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.truncated_normal.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.truncated_normal.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.truncated_normal.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.truncated_normal.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.truncated_normal.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.truncated_normal.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.truncated_normal.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.truncated_normal.random_ops": {
  "data": {
   "shadows": "tensorflow.python.ops.random_ops"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.truncated_normal.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.truncated_normal.special_math": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.special_math"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.truncated_normal.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.truncated_normal.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.distributions.truncated_normal_test.stats",
    "tensorflow_probability.python.distributions.truncated_normal_test.try_import"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.EPSILON": {
  "data": {
   "lineno": 49
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.distributions.truncated_normal_test._TruncatedNormalTestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase._testParamShapes": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "tensorflow.ones",
    "tensorflow.shape",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.truncated_normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testBatchSampling": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "int",
    "numpy.max",
    "numpy.mean",
    "numpy.min",
    "numpy.var",
    "tensorflow_probability.python.distributions.truncated_normal_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testGradientsFx": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "dtype",
    "numpy.array",
    "numpy.float32",
    "numpy.float64",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.python.ops.gradient_checker_v2.compute_gradient",
    "tensorflow.python.ops.gradient_checker_v2.max_error",
    "tensorflow_probability.python.distributions.truncated_normal_test.itertools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testGradientsFx.f": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": [
    "func",
    "getattr",
    "tensorflow.reduce_mean",
    "tensorflow_probability.python.distributions.truncated_normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testGradientsNx": {
  "data": {
   "lineno": 303,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "dtype",
    "f",
    "numpy.float32",
    "numpy.float64",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.python.ops.gradient_checker_v2.compute_gradient",
    "tensorflow.python.ops.gradient_checker_v2.max_error",
    "tensorflow_probability.python.distributions.truncated_normal_test.itertools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testGradientsNx.f": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": [
    "func",
    "getattr",
    "tensorflow_probability.python.distributions.truncated_normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testIncorrectBoundsFails": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.truncated_normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testMode": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.asscalar",
    "tensorflow_probability.python.distributions.truncated_normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testMomentsEmpirically": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "int",
    "numpy.mean",
    "numpy.var",
    "tensorflow_probability.python.distributions.truncated_normal_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testNegativeSigmaFails": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.truncated_normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testParamShapes": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "tensorflow.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testParamStaticShapes": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "tensorflow.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testReparametrizable": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "dtype",
    "numpy.float32",
    "numpy.float64",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.python.ops.gradient_checker_v2.compute_gradient",
    "tensorflow.python.ops.gradient_checker_v2.max_error"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testReparametrizable.f": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "int",
    "tensorflow.abs",
    "tensorflow.reduce_mean",
    "tensorflow_probability.python.distributions.truncated_normal_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testReparametrizableBatch": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.math.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testReparametrizableBatch.samples_sum": {
  "data": {
   "lineno": 271,
   "symbols_in_volume": [
    "tensorflow.reduce_sum",
    "tensorflow_probability.distributions.TruncatedNormal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalStandaloneTestCase.testShapeWithPlaceholders": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.truncated_normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalTestCompareWithNormal": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "absl.testing.parameterized.parameters",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.distributions.truncated_normal_test._TruncatedNormalTestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalTestCompareWithNormal.constructDists": {
  "data": {
   "lineno": 343,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.truncated_normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalTestCompareWithNormal.testCDF": {
  "data": {
   "lineno": 393,
   "symbols_in_volume": [
    "list",
    "numpy.float32",
    "numpy.random.uniform",
    "tensorflow_probability.python.distributions.truncated_normal_test.EPSILON"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalTestCompareWithNormal.testEntropy": {
  "data": {
   "lineno": 350
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalTestCompareWithNormal.testLogProb": {
  "data": {
   "lineno": 374,
   "symbols_in_volume": [
    "len",
    "list",
    "numpy.float32",
    "numpy.log",
    "numpy.random.uniform",
    "tensorflow_probability.python.distributions.truncated_normal_test.EPSILON"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalTestCompareWithNormal.testSampling": {
  "data": {
   "lineno": 356,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalTestCompareWithScipy": {
  "data": {
   "lineno": 406,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "absl.testing.parameterized.parameters",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.distributions.truncated_normal_test._TruncatedNormalTestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalTestCompareWithScipy.constructDists": {
  "data": {
   "lineno": 417,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.truncated_normal_test.scipy_trunc_norm_dist",
    "tensorflow_probability.python.distributions.truncated_normal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalTestCompareWithScipy.testCDF": {
  "data": {
   "lineno": 454,
   "symbols_in_volume": [
    "list",
    "numpy.float32",
    "numpy.random.uniform",
    "tensorflow_probability.python.distributions.truncated_normal_test.EPSILON"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalTestCompareWithScipy.testEntropy": {
  "data": {
   "lineno": 436
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalTestCompareWithScipy.testLogProb": {
  "data": {
   "lineno": 441,
   "symbols_in_volume": [
    "list",
    "numpy.float32",
    "numpy.random.uniform",
    "tensorflow_probability.python.distributions.truncated_normal_test.EPSILON"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalTestCompareWithScipy.testMoments": {
  "data": {
   "lineno": 467
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.TruncatedNormalTestCompareWithScipy.testSampling": {
  "data": {
   "lineno": 424,
   "symbols_in_volume": [
    "int",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test._TruncatedNormalTestCase": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test._TruncatedNormalTestCase.assertAllFinite": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.isfinite",
    "numpy.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test._TruncatedNormalTestCase.assertAllGreaterEqual": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test._TruncatedNormalTestCase.assertAllLessEqual": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test._TruncatedNormalTestCase.assertEmpiricalDistributionsEqual": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "numpy.histogram",
    "numpy.max",
    "numpy.min"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test._TruncatedNormalTestCase.setUp": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.gradient_checker_v2": {
  "data": {
   "shadows": "tensorflow.python.ops.gradient_checker_v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.scipy_trunc_norm_dist": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.truncated_normal_test.stats"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.stats": {
  "data": {
   "lineno": 45
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.test_case": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_case"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.tfd": {
  "data": {
   "lineno": 47
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.truncated_normal_test.try_import": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "ImportError",
    "str",
    "tensorflow.compat.v1.logging.warning",
    "tensorflow_probability.python.distributions.truncated_normal_test.importlib"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform.__init__": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.uniform.Uniform",
    "tensorflow_probability.python.internal.assert_util.assert_less",
    "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._batch_shape": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._batch_shape_tensor": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._cdf": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._entropy": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._event_shape": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._event_shape_tensor": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._mean": {
  "data": {
   "lineno": 204
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._param_shapes": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "dict",
    "staticmethod",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._params_event_ndims": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._prob": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.logical_or",
    "tensorflow.compat.v2.math.is_nan",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._quantile": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._sample_n": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.random.uniform"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._stddev": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.uniform.math"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform._variance": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "tensorflow.compat.v2.square"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform.high": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform.low": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.Uniform.range": {
  "data": {
   "lineno": 145
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform._kl_uniform_uniform": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "numpy.inf",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.broadcast_to",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL",
    "tensorflow_probability.python.distributions.uniform.Uniform",
    "tensorflow_probability.python.internal.distribution_util.get_broadcast_shape",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.uniform.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.uniform.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.uniform.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.uniform.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.uniform.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.uniform.kullback_leibler": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.uniform.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.uniform.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.uniform.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.uniform.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.uniform.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.uniform.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.uniform_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.distributions.uniform_test.try_import"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest._testUniformSampleMultiDimensional": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "numpy.any",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.uniform_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testFullyReparameterized": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.distributions.uniform_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformAssertMaxGtMin": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow_probability.python.distributions.uniform_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformBroadcasting": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.uniform_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformCDF": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "_expected_cdf",
    "numpy.array",
    "numpy.float32",
    "numpy.log",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.uniform_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformCDF._expected_cdf": {
  "data": {
   "lineno": 113
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformEntropy": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.log",
    "tensorflow_probability.python.distributions.uniform_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformFloat64": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float64",
    "tensorflow_probability.python.distributions.uniform_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformMean": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.uniform_test.stats",
    "tensorflow_probability.python.distributions.uniform_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformNans": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.math.is_nan",
    "tensorflow.stack",
    "tensorflow_probability.python.distributions.uniform_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformPDF": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "_expected_pdf",
    "numpy.array",
    "numpy.float32",
    "numpy.log",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.uniform_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformPDF._expected_pdf": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "numpy.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformPDFWithScalarEndpoint": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.uniform_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformQuantile": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "tensorflow.linspace",
    "tensorflow.reshape",
    "tensorflow_probability.python.distributions.uniform_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformRange": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.uniform_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformSample": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "numpy.any",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.uniform_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformSamplePdf": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "tensorflow.reduce_all",
    "tensorflow_probability.python.distributions.uniform_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformSampleWithShape": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.uniform_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformShape": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.uniform_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformStd": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.uniform_test.stats",
    "tensorflow_probability.python.distributions.uniform_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformUniformKLFinite": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": [
    "int",
    "numpy.arange",
    "numpy.array",
    "numpy.log",
    "tensorflow.reduce_mean",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.distributions.uniform_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformUniformKLInfinite": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.inf",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.uniform_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.UniformTest.testUniformVariance": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.uniform_test.stats",
    "tensorflow_probability.python.distributions.uniform_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.uniform_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.uniform_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.uniform_test.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.uniform_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.uniform_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.uniform_test.stats": {
  "data": {
   "lineno": 44
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.uniform_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.uniform_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.uniform_test.tfd": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.uniform_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.uniform_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.uniform_test.try_import": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "ImportError",
    "str",
    "tensorflow.compat.v1.logging.warning",
    "tensorflow_probability.python.distributions.uniform_test.importlib"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess.__init__": {
  "data": {
   "lineno": 489,
   "symbols_in_volume": [
    "ValueError",
    "callable",
    "dict",
    "locals",
    "mean_fn",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.linalg.LinearOperatorFullMatrix",
    "tensorflow.compat.v2.linalg.cholesky",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator",
    "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess",
    "tensorflow_probability.python.distributions.variational_gaussian_process._add_diagonal_shift",
    "tensorflow_probability.python.distributions.variational_gaussian_process._solve_cholesky_factored_system_vec",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess._compute_posterior_predictive_params": {
  "data": {
   "lineno": 658,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.LinearOperatorFullMatrix",
    "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
    "tensorflow.compat.v2.linalg.cholesky",
    "tensorflow_probability.python.distributions.variational_gaussian_process._add_diagonal_shift",
    "tensorflow_probability.python.distributions.variational_gaussian_process._solve_cholesky_factored_system"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess._covariance": {
  "data": {
   "lineno": 725
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess.index_points": {
  "data": {
   "lineno": 697,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess.inducing_index_points": {
  "data": {
   "lineno": 701,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess.jitter": {
  "data": {
   "lineno": 721,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess.kernel": {
  "data": {
   "lineno": 693,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess.mean_fn": {
  "data": {
   "lineno": 689,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess.observation_noise_variance": {
  "data": {
   "lineno": 713,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess.optimal_variational_posterior": {
  "data": {
   "lineno": 844,
   "symbols_in_volume": [
    "ValueError",
    "callable",
    "mean_fn",
    "staticmethod",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.linalg.LinearOperatorFullMatrix",
    "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
    "tensorflow.compat.v2.linalg.cholesky",
    "tensorflow.compat.v2.math.reciprocal",
    "tensorflow.compat.v2.matmul",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.distributions.variational_gaussian_process._add_diagonal_shift",
    "tensorflow_probability.python.distributions.variational_gaussian_process._solve_cholesky_factored_system_vec",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess.predictive_noise_variance": {
  "data": {
   "lineno": 717,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess.variational_inducing_observations_loc": {
  "data": {
   "lineno": 705,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess.variational_inducing_observations_scale": {
  "data": {
   "lineno": 709,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.VariationalGaussianProcess.variational_loss": {
  "data": {
   "lineno": 728,
   "symbols_in_volume": [
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.linalg.LinearOperatorFullMatrix",
    "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.reduce_mean",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow.compat.v2.sqrt",
    "tensorflow_probability.python.distributions.gaussian_process.GaussianProcess",
    "tensorflow_probability.python.distributions.independent.Independent",
    "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence",
    "tensorflow_probability.python.distributions.normal.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.__all__": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process._add_diagonal_shift": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.linalg.set_diag"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process._solve_cholesky_factored_system": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
    "tensorflow.compat.v2.name_scope"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process._solve_cholesky_factored_system_vec": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
    "tensorflow.compat.v2.name_scope"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.gaussian_process": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.gaussian_process"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.independent": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.independent"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.kullback_leibler": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.mvn_linear_operator": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.mvn_linear_operator"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.normal": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.normal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process_test.VariationalGaussianProcessDynamicTest": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.variational_gaussian_process_test._VariationalGaussianProcessTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process_test.VariationalGaussianProcessStaticTest": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.distributions.variational_gaussian_process_test._VariationalGaussianProcessTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process_test._VariationalGaussianProcessTest": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process_test._VariationalGaussianProcessTest.testOptimalVariationalShapes": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.expand_dims",
    "numpy.float64",
    "numpy.linspace",
    "numpy.meshgrid",
    "numpy.reshape",
    "numpy.sin",
    "numpy.stack",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.shape",
    "tensorflow_probability.distributions.VariationalGaussianProcess.optimal_variational_posterior",
    "tensorflow_probability.positive_semidefinite_kernels.ExponentiatedQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process_test._VariationalGaussianProcessTest.testShapes": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.expand_dims",
    "numpy.eye",
    "numpy.float64",
    "numpy.linspace",
    "numpy.meshgrid",
    "numpy.reshape",
    "numpy.stack",
    "numpy.zeros",
    "tensorflow.compat.dimension_value",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.distributions.VariationalGaussianProcess",
    "tensorflow_probability.positive_semidefinite_kernels.ExponentiatedQuadratic",
    "tensorflow_probability.python.internal.tensorshape_util.dims",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process_test._VariationalGaussianProcessTest.testVariationalLossShapes": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.expand_dims",
    "numpy.eye",
    "numpy.float64",
    "numpy.linspace",
    "numpy.meshgrid",
    "numpy.reshape",
    "numpy.sin",
    "numpy.stack",
    "numpy.zeros",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.shape",
    "tensorflow_probability.distributions.VariationalGaussianProcess",
    "tensorflow_probability.positive_semidefinite_kernels.ExponentiatedQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process_test._np_kernel_matrix_fn": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.expand_dims"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process_test.psd_kernels": {
  "data": {
   "shadows": "tensorflow_probability.positive_semidefinite_kernels"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.variational_gaussian_process_test.tfd": {
  "data": {
   "shadows": "tensorflow_probability.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture.__init__": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": [
    "NotImplementedError",
    "TypeError",
    "ValueError",
    "determine_batch_event_shapes",
    "dict",
    "enumerate",
    "interpolate_loc",
    "interpolate_scale",
    "len",
    "locals",
    "quadrature_fn",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator",
    "tensorflow_probability.python.distributions.categorical.Categorical",
    "tensorflow_probability.python.distributions.distribution",
    "tensorflow_probability.python.distributions.distribution._graph_parents",
    "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture",
    "tensorflow_probability.python.distributions.vector_diffeomixture.quadrature_scheme_softmaxnormal_quantiles",
    "tensorflow_probability.python.internal.distribution_util.maybe_check_scalar_distribution",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.base_dtype",
    "tensorflow_probability.python.internal.dtype_util.name",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
    "tuple",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture._batch_shape": {
  "data": {
   "lineno": 528
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture._batch_shape_tensor": {
  "data": {
   "lineno": 525
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture._covariance": {
  "data": {
   "lineno": 634,
   "symbols_in_volume": [
    "add"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture._covariance_of_mean_given_quadrature_component": {
  "data": {
   "lineno": 729,
   "symbols_in_volume": [
    "add",
    "enumerate",
    "square",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.square"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture._event_shape": {
  "data": {
   "lineno": 534
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture._event_shape_tensor": {
  "data": {
   "lineno": 531
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture._expand_base_distribution_mean": {
  "data": {
   "lineno": 746,
   "symbols_in_volume": [
    "concat_vectors",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.tile",
    "tensorflow_probability.python.internal.tensorshape_util.concatenate",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture._expand_mix_distribution_probs": {
  "data": {
   "lineno": 758,
   "symbols_in_volume": [
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture._log_prob": {
  "data": {
   "lineno": 604,
   "symbols_in_volume": [
    "tensorflow.compat.v2.rank",
    "tensorflow.compat.v2.reduce_logsumexp",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow.compat.v2.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture._mean": {
  "data": {
   "lineno": 622,
   "symbols_in_volume": [
    "add",
    "enumerate"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture._mean_of_covariance_given_quadrature_component": {
  "data": {
   "lineno": 656,
   "symbols_in_volume": [
    "add",
    "all",
    "enumerate",
    "isinstance",
    "tensorflow.compat.v2.linalg.LinearOperatorDiag",
    "tensorflow.compat.v2.linalg.LinearOperatorFullMatrix",
    "tensorflow.compat.v2.linalg.LinearOperatorIdentity",
    "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity",
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.square",
    "tensorflow.python.ops.linalg.linear_operator_addition.add_operators"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture._sample_n": {
  "data": {
   "lineno": 537,
   "symbols_in_volume": [
    "NotImplementedError",
    "concat_vectors",
    "len",
    "numpy.int32",
    "stream",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.gather",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.reduce_prod",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream",
    "tensorflow_probability.python.internal.distribution_util.pick_vector",
    "tensorflow_probability.python.internal.tensorshape_util.as_list",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
    "tensorflow_probability.python.internal.tensorshape_util.num_elements",
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture._variance": {
  "data": {
   "lineno": 650,
   "symbols_in_volume": [
    "add"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture.distribution": {
  "data": {
   "lineno": 505,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture.endpoint_affine": {
  "data": {
   "lineno": 515,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture.grid": {
  "data": {
   "lineno": 510,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture.interpolated_affine": {
  "data": {
   "lineno": 520,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.VectorDiffeomixture.mixture_distribution": {
  "data": {
   "lineno": 500,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.__all__": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.add": {
  "data": {
   "lineno": 945
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.affine_linear_operator_bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.affine_linear_operator"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.categorical": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.categorical"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.concat_vectors": {
  "data": {
   "lineno": 937,
   "symbols_in_volume": [
    "any",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.get_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.determine_batch_event_shapes": {
  "data": {
   "lineno": 815,
   "symbols_in_volume": [
    "_set_event_shape",
    "tensorflow.compat.v2.TensorShape",
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.broadcast_static_shape",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.determine_batch_event_shapes._set_event_shape": {
  "data": {
   "lineno": 825,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.distribution_lib": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.interpolate_loc": {
  "data": {
   "lineno": 854,
   "symbols_in_volume": [
    "NotImplementedError",
    "ValueError",
    "len",
    "range",
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.newaxis",
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.interpolate_scale": {
  "data": {
   "lineno": 883,
   "symbols_in_volume": [
    "NotImplementedError",
    "ValueError",
    "enumerate",
    "len",
    "linop_scale",
    "range",
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.python.ops.linalg.linear_operator_addition.add_operators",
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.linop_add_lib": {
  "data": {
   "shadows": "tensorflow.python.ops.linalg.linear_operator_addition"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.linop_scale": {
  "data": {
   "lineno": 900,
   "symbols_in_volume": [
    "NotImplementedError",
    "isinstance",
    "scaled_identity",
    "tensorflow.compat.v2.linalg.LinearOperatorDiag",
    "tensorflow.compat.v2.linalg.LinearOperatorIdentity",
    "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
    "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.newaxis",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.linop_scale.scaled_identity": {
  "data": {
   "lineno": 909,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.maybe_check_quadrature_param": {
  "data": {
   "lineno": 777,
   "symbols_in_volume": [
    "NotImplementedError",
    "ValueError",
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.assert_util.assert_rank_at_least",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.normal": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.normal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.quadrature_scheme_softmaxnormal_gauss_hermite": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "maybe_check_quadrature_param",
    "numpy.linalg.norm",
    "numpy.polynomial.hermite.hermgauss",
    "numpy.sqrt",
    "softmax",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.newaxis",
    "tensorflow_probability.python.internal.distribution_util.pad",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.quadrature_scheme_softmaxnormal_quantiles": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "_compute_quantiles",
    "_get_batch_ndims",
    "_get_final_shape",
    "maybe_check_quadrature_param",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.fill",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.normal.Normal",
    "tensorflow_probability.python.internal.dtype_util.base_dtype",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.quadrature_scheme_softmaxnormal_quantiles._compute_quantiles": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "_get_final_shape",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.linspace",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.transpose",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.bijectors.softmax_centered.SoftmaxCentered",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.quadrature_scheme_softmaxnormal_quantiles._get_batch_ndims": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.quadrature_scheme_softmaxnormal_quantiles._get_final_shape": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape",
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.seed_stream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.softmax": {
  "data": {
   "lineno": 959,
   "symbols_in_volume": [
    "numpy.int",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.nn.softmax",
    "tensorflow.compat.v2.rank",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.softmax_centered_bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.softmax_centered"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture.vec_osquare": {
  "data": {
   "lineno": 954,
   "symbols_in_volume": [
    "tensorflow.compat.v2.newaxis"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "numpy.random.RandomState",
    "tensorflow.compat.v2.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.VectorDiffeomixtureTest": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.VectorDiffeomixtureTest.testConcentrationLocControlsHowMuchWeightIsOnEachComponent": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity",
    "tensorflow_probability.python.distributions.vector_diffeomixture_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.VectorDiffeomixtureTest.testMeanCovarianceBatch": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.linspace",
    "numpy.stack",
    "tensorflow.compat.v2.linalg.LinearOperatorDiag",
    "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity",
    "tensorflow_probability.python.distributions.vector_diffeomixture_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.VectorDiffeomixtureTest.testMeanCovarianceNoBatch": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.linspace",
    "tensorflow.compat.v2.linalg.LinearOperatorDiag",
    "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity",
    "tensorflow_probability.python.distributions.vector_diffeomixture_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.VectorDiffeomixtureTest.testMeanCovarianceNoBatchUncenteredNonStandardBase": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "int",
    "numpy.float32",
    "numpy.linspace",
    "tensorflow.compat.v2.linalg.LinearOperatorDiag",
    "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity",
    "tensorflow_probability.python.distributions.vector_diffeomixture_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.VectorDiffeomixtureTest.testSampleProbConsistentBroadcastMixBatch": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "int",
    "numpy.float32",
    "numpy.linspace",
    "numpy.stack",
    "tensorflow.compat.v2.linalg.LinearOperatorDiag",
    "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity",
    "tensorflow_probability.python.distributions.vector_diffeomixture_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.VectorDiffeomixtureTest.testSampleProbConsistentBroadcastMixNoBatch": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "int",
    "numpy.float32",
    "numpy.linspace",
    "tensorflow.compat.v2.linalg.LinearOperatorDiag",
    "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity",
    "tensorflow_probability.python.distributions.vector_diffeomixture_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.VectorDiffeomixtureTest.testSampleProbConsistentBroadcastMixNonStandardBase": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "int",
    "numpy.float32",
    "numpy.linspace",
    "tensorflow.compat.v2.linalg.LinearOperatorDiag",
    "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity",
    "tensorflow_probability.python.distributions.vector_diffeomixture_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.VectorDiffeomixtureTest.testSampleProbConsistentBroadcastMixTwoBatchDims": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "int",
    "numpy.float32",
    "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity",
    "tensorflow_probability.python.distributions.vector_diffeomixture_test.rng",
    "tensorflow_probability.python.distributions.vector_diffeomixture_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.VectorDiffeomixtureTest.testSampleProbConsistentQuadrature": {
  "data": {
   "lineno": 342,
   "symbols_in_volume": [
    "int",
    "numpy.float32",
    "numpy.linspace",
    "tensorflow.compat.v2.linalg.LinearOperatorDiag",
    "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity",
    "tensorflow_probability.python.distributions.vector_diffeomixture_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.VectorDiffeomixtureTest.testTemperatureControlsHowMuchThisLooksLikeDiscreteMixture": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "numpy.abs",
    "numpy.float32",
    "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity",
    "tensorflow_probability.python.distributions.vector_diffeomixture_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.rng": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.tfd": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_diffeomixture_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag.VectorExponentialDiag": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag.VectorExponentialDiag.__init__": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.vector_exponential_diag.VectorExponentialDiag",
    "tensorflow_probability.python.internal.distribution_util.make_diag_scale"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag.VectorExponentialDiag._params_event_ndims": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag.__all__": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag.velo": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.vector_exponential_linear_operator"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.VectorExponentialDiagTest": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.VectorExponentialDiagTest.setUp": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.VectorExponentialDiagTest.testCovariance": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.diag",
    "numpy.float32",
    "numpy.ones",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.ones",
    "tensorflow_probability.python.distributions.vector_exponential_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.VectorExponentialDiagTest.testMean": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.vector_exponential_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.VectorExponentialDiagTest.testMeanWithBroadcastLoc": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.vector_exponential_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.VectorExponentialDiagTest.testMode": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.vector_exponential_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.VectorExponentialDiagTest.testSample": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "int",
    "numpy.cov",
    "tensorflow.compat.v2.linalg.diag",
    "tensorflow_probability.python.distributions.vector_exponential_diag_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.VectorExponentialDiagTest.testSampleWithBroadcastScale": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "int",
    "numpy.matmul",
    "numpy.ones",
    "numpy.zeros",
    "tensorflow.compat.v2.linalg.diag",
    "tensorflow_probability.python.distributions.vector_exponential_diag_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.VectorExponentialDiagTest.testScalarParams": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.distributions.vector_exponential_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.VectorExponentialDiagTest.testSingularScaleRaises": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.vector_exponential_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.VectorExponentialDiagTest.testStddev": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.ones",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.distributions.vector_exponential_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.VectorExponentialDiagTest.testVariance": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.ones",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.distributions.vector_exponential_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.VectorExponentialDiagTest.testVectorParams": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.vector_exponential_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.tfd": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_exponential_diag_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator.__init__": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.ones",
    "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator",
    "tensorflow_probability.python.distributions.exponential.Exponential",
    "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator",
    "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale",
    "tensorflow_probability.python.internal.dtype_util.is_floating"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator._covariance": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.diag",
    "tensorflow.compat.v2.square",
    "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator._log_prob": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator",
    "tensorflow_probability.python.distributions.vector_exponential_linear_operator._mvn_sample_note",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator._mean": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.ones"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator._mode": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator._mode_mean_shape": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow_probability.python.internal.tensorshape_util.concatenate",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator._prob": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator",
    "tensorflow_probability.python.distributions.vector_exponential_linear_operator._mvn_sample_note",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator._stddev": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": [
    "isinstance",
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.linalg.LinearOperatorLowRankUpdate",
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.sqrt",
    "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator._variance": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "isinstance",
    "tensorflow.compat.v2.linalg.LinearOperatorLowRankUpdate",
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.square",
    "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator.loc": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.VectorExponentialLinearOperator.scale": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator._mvn_sample_note": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.affine_linear_operator_bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.affine_linear_operator"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.exponential": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.exponential"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_exponential_linear_operator.transformed_distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.transformed_distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag.VectorLaplaceDiag": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag.VectorLaplaceDiag.__init__": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.vector_laplace_diag.VectorLaplaceDiag",
    "tensorflow_probability.python.internal.distribution_util.make_diag_scale",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag.VectorLaplaceDiag._params_event_ndims": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag.vllo": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.vector_laplace_linear_operator"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest.setUp": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "numpy.random.RandomState",
    "super",
    "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest.testCovariance": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.diag",
    "numpy.float32",
    "numpy.ones",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.distributions.vector_laplace_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest.testDistWithBatchShapeOneThenTransformedThroughSoftplus": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.bijectors.Softplus",
    "tensorflow_probability.python.distributions.vector_laplace_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest.testMean": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.vector_laplace_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest.testMeanWithBroadcastLoc": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.vector_laplace_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest.testSample": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "int",
    "numpy.cov",
    "tensorflow.compat.v2.linalg.diag",
    "tensorflow_probability.python.distributions.vector_laplace_diag_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest.testSampleWithBroadcastScale": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "int",
    "numpy.matmul",
    "numpy.ones",
    "numpy.zeros",
    "tensorflow.compat.v2.linalg.diag",
    "tensorflow_probability.python.distributions.vector_laplace_diag_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest.testScalarParams": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.distributions.vector_laplace_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest.testSingularScaleRaises": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.vector_laplace_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest.testStddev": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.ones",
    "numpy.sqrt",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.distributions.vector_laplace_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest.testVariance": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.ones",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.distributions.vector_laplace_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.VectorLaplaceDiagTest.testVectorParams": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.vector_laplace_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.tfd": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_laplace_diag_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator.__init__": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.bijectors.affine_linear_operator.AffineLinearOperator",
    "tensorflow_probability.python.distributions.laplace.Laplace",
    "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator",
    "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale",
    "tensorflow_probability.python.internal.dtype_util.is_floating"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator._covariance": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.diag",
    "tensorflow.compat.v2.square",
    "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator._log_prob": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator",
    "tensorflow_probability.python.distributions.vector_laplace_linear_operator._mvn_sample_note",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator._mean": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.internal.tensorshape_util.concatenate",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator._mode": {
  "data": {
   "lineno": 293
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator._prob": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator",
    "tensorflow_probability.python.distributions.vector_laplace_linear_operator._mvn_sample_note",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator._stddev": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": [
    "isinstance",
    "numpy.sqrt",
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.linalg.LinearOperatorLowRankUpdate",
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.sqrt",
    "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator._variance": {
  "data": {
   "lineno": 271,
   "symbols_in_volume": [
    "isinstance",
    "tensorflow.compat.v2.linalg.LinearOperatorLowRankUpdate",
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.square",
    "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator.loc": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.VectorLaplaceLinearOperator.scale": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.__all__": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator._mvn_sample_note": {
  "data": {
   "lineno": 37
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.affine_linear_operator_bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.affine_linear_operator"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.laplace": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.laplace"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_laplace_linear_operator.transformed_distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.transformed_distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag.VectorSinhArcsinhDiag": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag.VectorSinhArcsinhDiag.__init__": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.bijectors.affine",
    "tensorflow_probability.python.bijectors.affine.Affine",
    "tensorflow_probability.python.bijectors.chain.Chain",
    "tensorflow_probability.python.bijectors.sinh_arcsinh.SinhArcsinh",
    "tensorflow_probability.python.distributions.normal.Normal",
    "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag.VectorSinhArcsinhDiag",
    "tensorflow_probability.python.internal.distribution_util.make_diag_scale",
    "tensorflow_probability.python.internal.distribution_util.maybe_check_scalar_distribution",
    "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag.VectorSinhArcsinhDiag.loc": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag.VectorSinhArcsinhDiag.scale": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag.VectorSinhArcsinhDiag.skewness": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag.VectorSinhArcsinhDiag.tailweight": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag.__all__": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag.affine_bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.affine"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag.chain_bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.chain"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag.normal": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.normal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag.sinh_arcsinh_bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.sinh_arcsinh"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag.transformed_distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.transformed_distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "numpy.random.RandomState",
    "tensorflow.compat.v2.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.VectorSinhArcsinhDiagTest": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.VectorSinhArcsinhDiagTest.test_consistency_random_parameters_no_batch_dims": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.rng",
    "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.VectorSinhArcsinhDiagTest.test_consistency_random_parameters_with_batch_dim": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.rng",
    "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.VectorSinhArcsinhDiagTest.test_default_is_same_as_normal": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.rng",
    "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.VectorSinhArcsinhDiagTest.test_passing_in_laplace_plus_defaults_is_same_as_laplace": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.rng",
    "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.VectorSinhArcsinhDiagTest.test_pdf_reflected_for_negative_skewness": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.linspace",
    "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.VectorSinhArcsinhDiagTest.test_positive_skewness_moves_mean_to_the_right": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.testing.assert_array_less",
    "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.rng",
    "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.VectorSinhArcsinhDiagTest.test_tailweight_large_gives_more_outliers_than_normal": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "int",
    "numpy.float64",
    "numpy.percentile",
    "numpy.testing.assert_array_less",
    "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.rng",
    "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.VectorSinhArcsinhDiagTest.test_tailweight_small_gives_fewer_outliers_than_normal": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "int",
    "numpy.float64",
    "numpy.percentile",
    "numpy.testing.assert_array_less",
    "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.rng",
    "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.rng": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.tfd": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_sinh_arcsinh_diag_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_student_t": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.vector_student_t._VectorStudentT": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.transformed_distribution.TransformedDistribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.vector_student_t._VectorStudentT.__init__": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.bijectors.affine",
    "tensorflow_probability.python.bijectors.affine.Affine",
    "tensorflow_probability.python.bijectors.affine.dtype",
    "tensorflow_probability.python.bijectors.affine.scale",
    "tensorflow_probability.python.bijectors.affine.shift",
    "tensorflow_probability.python.distributions.student_t.StudentT",
    "tensorflow_probability.python.distributions.vector_student_t._VectorStudentT",
    "tensorflow_probability.python.internal.distribution_util.pick_vector",
    "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t._VectorStudentT.df": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t._VectorStudentT.loc": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t._VectorStudentT.scale": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_student_t.affine_bijector": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.affine"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_student_t.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_student_t.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_student_t.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_student_t.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_student_t.student_t": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.student_t"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_student_t.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_student_t.transformed_distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.transformed_distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test.VectorStudentTTest": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test.VectorStudentTTest.setUp": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "numpy.random.RandomState",
    "super",
    "tensorflow_probability.python.distributions.vector_student_t_test.VectorStudentTTest"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test.VectorStudentTTest.testProbDynamic": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "len",
    "numpy.asarray",
    "numpy.concatenate",
    "numpy.diag",
    "numpy.float32",
    "range",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.vector_student_t._VectorStudentT",
    "tensorflow_probability.python.distributions.vector_student_t_test._FakeVectorStudentT"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test.VectorStudentTTest.testProbNonScalarBaseDistributionScalarTransform": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "len",
    "numpy.asarray",
    "numpy.diag",
    "numpy.float32",
    "numpy.tile",
    "tensorflow.newaxis",
    "tensorflow_probability.python.distributions.vector_student_t._VectorStudentT",
    "tensorflow_probability.python.distributions.vector_student_t_test._FakeVectorStudentT"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test.VectorStudentTTest.testProbNonScalarBaseDistributionScalarTransformDynamic": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": [
    "len",
    "numpy.asarray",
    "numpy.diag",
    "numpy.float32",
    "numpy.tile",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.newaxis",
    "tensorflow_probability.python.distributions.vector_student_t._VectorStudentT",
    "tensorflow_probability.python.distributions.vector_student_t_test._FakeVectorStudentT"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test.VectorStudentTTest.testProbScalarBaseDistributionNonScalarTransform": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "len",
    "numpy.asarray",
    "numpy.concatenate",
    "numpy.diag",
    "numpy.float32",
    "numpy.tile",
    "range",
    "tensorflow_probability.python.distributions.vector_student_t._VectorStudentT",
    "tensorflow_probability.python.distributions.vector_student_t_test._FakeVectorStudentT"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test.VectorStudentTTest.testProbScalarBaseDistributionNonScalarTransformDynamic": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "len",
    "numpy.asarray",
    "numpy.concatenate",
    "numpy.diag",
    "numpy.float32",
    "numpy.tile",
    "range",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.vector_student_t._VectorStudentT",
    "tensorflow_probability.python.distributions.vector_student_t_test._FakeVectorStudentT"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test.VectorStudentTTest.testProbStatic": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "len",
    "numpy.asarray",
    "numpy.concatenate",
    "numpy.diag",
    "numpy.float32",
    "range",
    "tensorflow_probability.python.distributions.vector_student_t._VectorStudentT",
    "tensorflow_probability.python.distributions.vector_student_t_test._FakeVectorStudentT"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test.VectorStudentTTest.testProbStaticScalar": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "numpy.asarray",
    "numpy.diag",
    "numpy.float32",
    "tensorflow_probability.python.distributions.vector_student_t._VectorStudentT",
    "tensorflow_probability.python.distributions.vector_student_t_test._FakeVectorStudentT"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test._FakeVectorStudentT": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test._FakeVectorStudentT.__init__": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "numpy.asarray"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test._FakeVectorStudentT.log_prob": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "_compute",
    "len",
    "numpy.concatenate",
    "range"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test._FakeVectorStudentT.log_prob._compute": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "numpy.abs",
    "numpy.diag",
    "numpy.log",
    "numpy.log1p",
    "numpy.matrix",
    "numpy.pi",
    "numpy.sum",
    "scipy.linalg.solve_triangular",
    "scipy.special.gammaln"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test._FakeVectorStudentT.prob": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "numpy.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test._VectorStudentT": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.vector_student_t._VectorStudentT"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test.linalg": {
  "data": {
   "shadows": "scipy.linalg"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test.special": {
  "data": {
   "shadows": "scipy.special"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.vector_student_t_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.von_mises.SeedStream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream.SeedStream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises.__init__": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.von_mises.VonMises",
    "tensorflow_probability.python.internal.assert_util.assert_non_negative",
    "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._batch_shape": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._batch_shape_tensor": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._cdf": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "tensorflow.compat.v2.zeros_like",
    "von_mises_cdf"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._entropy": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.pi",
    "tensorflow.compat.v2.math.bessel_i0e",
    "tensorflow.compat.v2.math.bessel_i1e",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._event_shape": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._event_shape_tensor": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._log_normalization": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.pi",
    "tensorflow.compat.v2.math.bessel_i0e",
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._log_prob": {
  "data": {
   "lineno": 182
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._log_unnormalized_prob": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cos"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._mean": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._mode": {
  "data": {
   "lineno": 217
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._param_shapes": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "dict",
    "staticmethod",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._params_event_ndims": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._prob": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "numpy.pi",
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.math.bessel_i0e"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._sample_n": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "numpy.finfo",
    "numpy.pi",
    "random_von_mises",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.maximum",
    "tensorflow.compat.v2.round",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._variance": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.bessel_i0e",
    "tensorflow.compat.v2.math.bessel_i1e",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises._z": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "tensorflow.compat.v2.name_scope"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises.concentration": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.VonMises.loc": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises._kl_von_mises_von_mises": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cos",
    "tensorflow.compat.v2.math.bessel_i0e",
    "tensorflow.compat.v2.math.bessel_i1e",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.kullback_leibler.RegisterKL",
    "tensorflow_probability.python.distributions.von_mises.VonMises"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises._von_mises_cdf_normal": {
  "data": {
   "lineno": 424,
   "symbols_in_volume": [
    "tensorflow_probability.python.math.gradient.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises._von_mises_cdf_normal.cdf_func": {
  "data": {
   "lineno": 427,
   "symbols_in_volume": [
    "numpy.pi",
    "numpy.sqrt",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.math.bessel_i0e",
    "tensorflow.compat.v2.sin",
    "tensorflow_probability.python.distributions.normal.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises._von_mises_cdf_series": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": [
    "numpy.pi",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.clip_by_value",
    "tensorflow.compat.v2.while_loop",
    "tensorflow.compat.v2.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises._von_mises_cdf_series.loop_body": {
  "data": {
   "lineno": 384,
   "symbols_in_volume": [
    "tensorflow.compat.v2.sin"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises.kullback_leibler": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises.normal": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.normal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises.random_von_mises": {
  "data": {
   "lineno": 451,
   "symbols_in_volume": [
    "rejection_sample_with_gradient",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.random_von_mises.rejection_sample_with_gradient": {
  "data": {
   "lineno": 482,
   "symbols_in_volume": [
    "seed.original_seed",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.bool",
    "tensorflow.compat.v2.custom_gradient",
    "tensorflow.compat.v2.float16",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.float64",
    "tensorflow.compat.v2.math.acos",
    "tensorflow.compat.v2.reduce_all",
    "tensorflow.compat.v2.sign",
    "tensorflow.compat.v2.sqrt",
    "tensorflow.compat.v2.while_loop",
    "tensorflow.compat.v2.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.random_von_mises.rejection_sample_with_gradient.grad": {
  "data": {
   "lineno": 565,
   "symbols_in_volume": [
    "numpy.pi",
    "tensorflow.compat.v2.cos",
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.math.bessel_i0e",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.rank",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.distributions.von_mises.von_mises_cdf",
    "tensorflow_probability.python.math.gradient.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.random_von_mises.rejection_sample_with_gradient.loop_body": {
  "data": {
   "lineno": 529,
   "symbols_in_volume": [
    "numpy.pi",
    "seed",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.cos",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.random.uniform"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises.value_and_gradient": {
  "data": {
   "shadows": "tensorflow_probability.python.math.gradient.value_and_gradient"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises.von_mises_cdf": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": [
    "_von_mises_cdf_normal",
    "_von_mises_cdf_series",
    "numpy.pi",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.custom_gradient",
    "tensorflow.compat.v2.round"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises.von_mises_cdf.grad": {
  "data": {
   "lineno": 370,
   "symbols_in_volume": [
    "numpy.pi",
    "tensorflow.compat.v2.cos",
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.math.bessel_i0e"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher.__init__": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.linalg.norm",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher",
    "tensorflow_probability.python.internal.assert_util.assert_greater",
    "tensorflow_probability.python.internal.assert_util.assert_less_equal",
    "tensorflow_probability.python.internal.assert_util.assert_near",
    "tensorflow_probability.python.internal.assert_util.assert_non_negative",
    "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED",
    "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED",
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._batch_shape": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_static_shape",
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._batch_shape_tensor": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._covariance": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.linalg.eye",
    "tensorflow.compat.v2.linalg.set_diag",
    "tensorflow.compat.v2.matmul",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.distributions.von_mises_fisher._bessel_ive"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._event_shape": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._event_shape_tensor": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._log_normalization": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": [
    "ValueError",
    "numpy.log",
    "numpy.pi",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow.compat.v2.math.lgamma",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.ones_like",
    "tensorflow_probability.python.distributions.von_mises_fisher._bessel_ive"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._log_prob": {
  "data": {
   "lineno": 251
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._log_unnormalized_prob": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": [
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow.compat.v2.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._maybe_assert_valid_sample": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": [
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.linalg.norm",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.assert_util.assert_near"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._mean": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.distributions.von_mises_fisher._bessel_ive"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._mode": {
  "data": {
   "lineno": 301,
   "symbols_in_volume": [
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._params_event_ndims": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._rotate": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": [
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.nn.l2_normalize",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow.compat.v2.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._sample_3d": {
  "data": {
   "lineno": 356,
   "symbols_in_volume": [
    "seed",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.debugging.check_numerics",
    "tensorflow.compat.v2.equal",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.math.log1p",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.random.uniform",
    "tensorflow.compat.v2.reduce_logsumexp",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._sample_n": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": [
    "seed",
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.bool",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.debugging.check_numerics",
    "tensorflow.compat.v2.gather",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.linalg.norm",
    "tensorflow.compat.v2.math.log1p",
    "tensorflow.compat.v2.maximum",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.nn.l2_normalize",
    "tensorflow.compat.v2.nn.top_k",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.random.normal",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.sqrt",
    "tensorflow.compat.v2.while_loop",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.distributions.beta",
    "tensorflow_probability.python.distributions.beta.Beta",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream",
    "tensorflow_probability.python.internal.assert_util.assert_greater_equal",
    "tensorflow_probability.python.internal.assert_util.assert_less",
    "tensorflow_probability.python.internal.assert_util.assert_less_equal",
    "tensorflow_probability.python.internal.assert_util.assert_near",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._sample_n.body_fn": {
  "data": {
   "lineno": 427,
   "symbols_in_volume": [
    "seed",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.debugging.check_numerics",
    "tensorflow.compat.v2.logical_and",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.math.log1p",
    "tensorflow.compat.v2.random.uniform",
    "tensorflow_probability.python.distributions.beta.sample"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher._sample_n.cond_fn": {
  "data": {
   "lineno": 423,
   "symbols_in_volume": [
    "tensorflow.compat.v2.reduce_any"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher.concentration": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.VonMisesFisher.mean_direction": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.__all__": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher._bessel_ive": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "ValueError",
    "coshe",
    "float",
    "numpy.pi",
    "numpy.sqrt",
    "sinhe",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.debugging.check_numerics",
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.math.bessel_i0e",
    "tensorflow.compat.v2.math.bessel_i1e",
    "tensorflow.compat.v2.math.rsqrt",
    "tensorflow.compat.v2.ones_like",
    "wrap"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.beta_lib": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.beta"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.seed_stream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.VonMisesFisherTest": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.VonMisesFisherTest._verifyCovariance": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "numpy.cov",
    "numpy.reshape",
    "numpy.zeros",
    "range",
    "tensorflow.compat.dimension_value",
    "tensorflow.debugging.check_numerics",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.VonMisesFisherTest._verifyPdfWithNumpy": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "ImportError",
    "numpy.abs",
    "numpy.linalg.norm",
    "numpy.log",
    "numpy.pi",
    "numpy.random.randn",
    "numpy.sum",
    "numpy.where",
    "scipy.special.gammaln",
    "scipy.special.ive",
    "tensorflow.compat.dimension_value",
    "tensorflow.compat.v1.logging.warn",
    "tensorflow.concat",
    "tensorflow.debugging.check_numerics",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
    "tensorflow_probability.python.internal.tensorshape_util.as_list",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.VonMisesFisherTest._verifySampleAndPdfConsistency": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.percentile",
    "numpy.pi",
    "numpy.sum",
    "numpy.where",
    "numpy.zeros_like",
    "tensorflow.cast",
    "tensorflow.compat.dimension_value",
    "tensorflow.debugging.check_numerics",
    "tensorflow.exp",
    "tensorflow.float32",
    "tensorflow.math.betainc",
    "tensorflow.math.lgamma",
    "tensorflow.math.log",
    "tensorflow.reduce_logsumexp",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.VonMisesFisherTest.testBesselIve": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "ImportError",
    "ValueError",
    "numpy.float64",
    "numpy.logspace",
    "scipy.special.ive",
    "tensorflow.compat.v1.logging.warn",
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow_probability.python.distributions.von_mises_fisher._bessel_ive"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.VonMisesFisherTest.testSampleAndPdfConsistency2d": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": [
    "tensorflow.nn.l2_normalize",
    "tensorflow_probability.distributions.VonMisesFisher"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.VonMisesFisherTest.testSampleAndPdfConsistency3d": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": [
    "tensorflow.nn.l2_normalize",
    "tensorflow_probability.distributions.VonMisesFisher"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.VonMisesFisherTest.testSampleAndPdfConsistency4d": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": [
    "tensorflow.nn.l2_normalize",
    "tensorflow_probability.distributions.VonMisesFisher"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.VonMisesFisherTest.testSampleAndPdfConsistency5d": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": [
    "tensorflow.nn.l2_normalize",
    "tensorflow_probability.distributions.VonMisesFisher"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.VonMisesFisherTest.testSampleMeanDir2d": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "numpy.linalg.norm",
    "numpy.ones_like",
    "numpy.round",
    "numpy.sort",
    "numpy.zeros_like",
    "tensorflow.nn.l2_normalize",
    "tensorflow.reduce_sum",
    "tensorflow_probability.distributions.VonMisesFisher",
    "tensorflow_probability.python.internal.tensorshape_util.as_list",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.VonMisesFisherTest.testSampleMeanDir3d": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "int",
    "numpy.linalg.norm",
    "numpy.ones_like",
    "numpy.round",
    "numpy.sort",
    "numpy.zeros_like",
    "tensorflow.nn.l2_normalize",
    "tensorflow.reduce_sum",
    "tensorflow_probability.distributions.VonMisesFisher",
    "tensorflow_probability.python.internal.tensorshape_util.as_list",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test._bessel_ive": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.von_mises_fisher._bessel_ive"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.gammaln": {
  "data": {
   "shadows": "scipy.special.gammaln"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.ive": {
  "data": {
   "shadows": "scipy.special.ive"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.special": {
  "data": {
   "shadows": "scipy.special"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_fisher_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.von_mises_test.VonMisesTestDynamicShapeFloat64": {
  "data": {
   "lineno": 429,
   "symbols_in_volume": [
    "tensorflow.float64",
    "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.von_mises_test.VonMisesTestStaticShapeFloat32": {
  "data": {
   "lineno": 424,
   "symbols_in_volume": [
    "tensorflow.float32",
    "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "object",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.make_tensor": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testInvalidconcentration": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.von_mises_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesCdf": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "ImportError",
    "numpy.linspace",
    "numpy.logspace",
    "numpy.reshape",
    "scipy.stats.vonmises.cdf",
    "tensorflow.compat.v1.logging.warn",
    "tensorflow_probability.python.distributions.von_mises_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesCdfGradient": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "numpy.logspace",
    "tensorflow.cast",
    "tensorflow.compat.v1.test.compute_gradient_error",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.von_mises_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesCdfGradientSimple": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.distributions.von_mises_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesCdfUniform": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "numpy.linspace",
    "numpy.pi",
    "tensorflow_probability.python.distributions.von_mises_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesEntropy": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "ImportError",
    "numpy.array",
    "scipy.stats.vonmises.entropy",
    "tensorflow.compat.v1.logging.warn",
    "tensorflow_probability.python.distributions.von_mises_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesEntropyUniform": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.pi",
    "tensorflow_probability.python.distributions.von_mises_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesLogPdf": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "ImportError",
    "numpy.array",
    "scipy.stats.vonmises.logpdf",
    "tensorflow.compat.v1.logging.warn",
    "tensorflow_probability.python.distributions.von_mises_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesLogPdfUniform": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.log",
    "numpy.pi",
    "tensorflow_probability.python.distributions.von_mises_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesMean": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.von_mises_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesMode": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.von_mises_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesPdf": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "ImportError",
    "numpy.array",
    "scipy.stats.vonmises.pdf",
    "tensorflow.compat.v1.logging.warn",
    "tensorflow_probability.python.distributions.von_mises_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesPdfUniform": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.pi",
    "tensorflow_probability.python.distributions.von_mises_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesSampleAverageGradient": {
  "data": {
   "lineno": 367,
   "symbols_in_volume": [
    "numpy.logspace",
    "numpy.ones",
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesSampleAverageGradient.loss": {
  "data": {
   "lineno": 373,
   "symbols_in_volume": [
    "tensorflow.reduce_mean",
    "tensorflow_probability.python.distributions.von_mises_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesSampleCircularVarianceGradient": {
  "data": {
   "lineno": 386,
   "symbols_in_volume": [
    "numpy.logspace",
    "tensorflow_probability.math.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesSampleCircularVarianceGradient.analytical_loss": {
  "data": {
   "lineno": 400,
   "symbols_in_volume": [
    "tensorflow.math.bessel_i0e",
    "tensorflow.math.bessel_i1e"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesSampleCircularVarianceGradient.loss": {
  "data": {
   "lineno": 391,
   "symbols_in_volume": [
    "tensorflow.cos",
    "tensorflow.reduce_mean",
    "tensorflow_probability.python.distributions.von_mises_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesSampleExtremeConcentration": {
  "data": {
   "lineno": 412,
   "symbols_in_volume": [
    "numpy.finfo",
    "numpy.nan",
    "tensorflow_probability.python.distributions.von_mises_test.tfd",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesSampleKsTest": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": [
    "ImportError",
    "enumerate",
    "numpy.logspace",
    "scipy.stats.kstest",
    "scipy.stats.vonmises",
    "tensorflow.compat.v1.logging.warn",
    "tensorflow_probability.python.distributions.von_mises_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesSampleMoments": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.atan2",
    "tensorflow.cos",
    "tensorflow.expand_dims",
    "tensorflow.reduce_mean",
    "tensorflow.sin",
    "tensorflow_probability.python.distributions.von_mises_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesSampleUniformKsTest": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": [
    "ImportError",
    "enumerate",
    "numpy.linspace",
    "numpy.pi",
    "scipy.stats.kstest",
    "scipy.stats.uniform.cdf",
    "tensorflow.compat.v1.logging.warn",
    "tensorflow_probability.python.distributions.von_mises_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesSampleVarianceUniform": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": [
    "tensorflow.cos",
    "tensorflow.expand_dims",
    "tensorflow.reduce_mean",
    "tensorflow_probability.python.distributions.von_mises_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesShape": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow_probability.python.distributions.von_mises_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesStddev": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "ImportError",
    "numpy.array",
    "numpy.sqrt",
    "numpy.zeros_like",
    "scipy.special.i0",
    "scipy.special.i1",
    "tensorflow.compat.v1.logging.warn",
    "tensorflow_probability.python.distributions.von_mises_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesVariance": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "ImportError",
    "numpy.array",
    "scipy.special.i0",
    "scipy.special.i1",
    "tensorflow.compat.v1.logging.warn",
    "tensorflow_probability.python.distributions.von_mises_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test._VonMisesTest.testVonMisesVonMisesKL": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "int",
    "numpy.array",
    "numpy.zeros",
    "tensorflow.reduce_mean",
    "tensorflow_probability.python.distributions.von_mises_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.von_mises_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_test.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_test.special": {
  "data": {
   "shadows": "scipy.special"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_test.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_test.test_case": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_case"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_test.tfd": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.von_mises_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.von_mises_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.wishart": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.wishart.Wishart": {
  "data": {
   "lineno": 440,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.wishart._WishartLinearOperator"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.wishart.Wishart.__init__": {
  "data": {
   "lineno": 496,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "locals",
    "super",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
    "tensorflow.compat.v2.linalg.cholesky",
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.distributions.wishart.Wishart",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.distribution_util.assert_symmetric",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart.Wishart._params_event_ndims": {
  "data": {
   "lineno": 579,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator.__init__": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "dict",
    "locals",
    "numpy.any",
    "numpy.asarray",
    "print",
    "super",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.wishart._WishartLinearOperator",
    "tensorflow_probability.python.internal.assert_util.assert_less_equal",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype",
    "tensorflow_probability.python.internal.dtype_util.is_floating",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._batch_shape": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._batch_shape_tensor": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._entropy": {
  "data": {
   "lineno": 367,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.wishart.math"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._event_shape": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._event_shape_tensor": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "tensorflow.compat.v2.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._log_prob": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_static_shape",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.linalg.cholesky",
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.maximum",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.rank",
    "tensorflow.compat.v2.reduce_prod",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.size",
    "tensorflow.compat.v2.square",
    "tensorflow.compat.v2.transpose",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._mean": {
  "data": {
   "lineno": 375,
   "symbols_in_volume": [
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.sqrt"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._mode": {
  "data": {
   "lineno": 394,
   "symbols_in_volume": [
    "float",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.less",
    "tensorflow.compat.v2.sqrt"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._multi_digamma": {
  "data": {
   "lineno": 433,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.digamma",
    "tensorflow.compat.v2.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._multi_gamma_sequence": {
  "data": {
   "lineno": 417,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.expand_dims",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.linspace"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._multi_lgamma": {
  "data": {
   "lineno": 426,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.lgamma",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow_probability.python.distributions.wishart.math"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._prob": {
  "data": {
   "lineno": 364,
   "symbols_in_volume": [
    "tensorflow.compat.v2.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._sample_n": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "stream",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.linalg.band_part",
    "tensorflow.compat.v2.linalg.set_diag",
    "tensorflow.compat.v2.matmul",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.random.gamma",
    "tensorflow.compat.v2.random.normal",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.sqrt",
    "tensorflow.compat.v2.transpose",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream",
    "tensorflow_probability.python.internal.dtype_util.base_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._square_scale_operator": {
  "data": {
   "lineno": 170
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator._variance": {
  "data": {
   "lineno": 384,
   "symbols_in_volume": [
    "tensorflow.compat.v2.expand_dims",
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.matmul",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.sqrt",
    "tensorflow.compat.v2.square"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator.df": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator.dimension": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator.input_output_cholesky": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator.log_normalization": {
  "data": {
   "lineno": 410,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.wishart.math"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator.mean_log_det": {
  "data": {
   "lineno": 403,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.wishart.math"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator.scale": {
  "data": {
   "lineno": 174
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart._WishartLinearOperator.scale_operator": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart.__all__": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.wishart.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.wishart.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.wishart.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.wishart.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.wishart.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.wishart.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.wishart.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.wishart.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.wishart.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.wishart.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.wishart.seed_stream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.wishart.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.wishart.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.wishart.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.wishart_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testBatchShape": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.wishart_test.chol",
    "tensorflow_probability.python.distributions.wishart_test.make_pd",
    "tensorflow_probability.python.distributions.wishart_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testEntropy": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.wishart_test.chol",
    "tensorflow_probability.python.distributions.wishart_test.make_pd",
    "tensorflow_probability.python.distributions.wishart_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testEventShape": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.distributions.wishart_test.chol",
    "tensorflow_probability.python.distributions.wishart_test.make_pd",
    "tensorflow_probability.python.distributions.wishart_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testLogProbBroadcastOverDfInsideMixture": {
  "data": {
   "lineno": 442,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.float32",
    "numpy.matmul",
    "numpy.random.randn",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.wishart_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testLogProbBroadcastsX": {
  "data": {
   "lineno": 419,
   "symbols_in_volume": [
    "numpy.concatenate",
    "numpy.float32",
    "numpy.matmul",
    "numpy.ones",
    "numpy.random.randn",
    "numpy.reshape",
    "tensorflow_probability.python.distributions.wishart_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testLogProbEmptyDist": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.wishart_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testMean": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.wishart_test.chol",
    "tensorflow_probability.python.distributions.wishart_test.make_pd",
    "tensorflow_probability.python.distributions.wishart_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testMeanBroadcast": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.newaxis",
    "tensorflow_probability.python.distributions.wishart_test.chol",
    "tensorflow_probability.python.distributions.wishart_test.make_pd",
    "tensorflow_probability.python.distributions.wishart_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testMeanLogDetAndLogNormalizingConstant": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "entropy_alt",
    "tensorflow_probability.python.distributions.wishart_test.chol",
    "tensorflow_probability.python.distributions.wishart_test.make_pd",
    "tensorflow_probability.python.distributions.wishart_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testMeanLogDetAndLogNormalizingConstant.entropy_alt": {
  "data": {
   "lineno": 70
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testMode": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.wishart_test.chol",
    "tensorflow_probability.python.distributions.wishart_test.make_pd",
    "tensorflow_probability.python.distributions.wishart_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testParamBroadcasting": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "tensorflow.shape",
    "tensorflow_probability.distributions.Wishart",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testProb": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.reshape",
    "tensorflow_probability.python.distributions.wishart_test.chol",
    "tensorflow_probability.python.distributions.wishart_test.make_pd",
    "tensorflow_probability.python.distributions.wishart_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testSample": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "tensorflow.reduce_mean",
    "tensorflow.square",
    "tensorflow_probability.python.distributions.wishart_test.chol",
    "tensorflow_probability.python.distributions.wishart_test.make_pd",
    "tensorflow_probability.python.distributions.wishart_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testSampleBroadcasts": {
  "data": {
   "lineno": 400,
   "symbols_in_volume": [
    "numpy.concatenate",
    "numpy.float32",
    "numpy.reshape",
    "tensorflow_probability.python.distributions.wishart_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testSampleMultipleTimes": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow_probability.python.distributions.wishart_test.chol",
    "tensorflow_probability.python.distributions.wishart_test.make_pd",
    "tensorflow_probability.python.distributions.wishart_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testSampleWithSameSeed": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "numpy.testing.assert_array_less",
    "tensorflow.executing_eagerly",
    "tensorflow.linalg.diag_part",
    "tensorflow_probability.python.distributions.wishart_test.chol",
    "tensorflow_probability.python.distributions.wishart_test.make_pd",
    "tensorflow_probability.python.distributions.wishart_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testSamplingEmptyDist": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.wishart_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testStaticAssertNonFlatDfDoesntRaise": {
  "data": {
   "lineno": 458,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.wishart_test.make_pd",
    "tensorflow_probability.python.distributions.wishart_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testStaticAsserts": {
  "data": {
   "lineno": 384,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "numpy.asarray",
    "numpy.int32",
    "tensorflow_probability.python.distributions.wishart_test.chol",
    "tensorflow_probability.python.distributions.wishart_test.make_pd",
    "tensorflow_probability.python.distributions.wishart_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testStd": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "numpy.sqrt",
    "tensorflow_probability.python.distributions.wishart_test.chol",
    "tensorflow_probability.python.distributions.wishart_test.make_pd",
    "tensorflow_probability.python.distributions.wishart_test.tfd",
    "tensorflow_probability.python.distributions.wishart_test.wishart_var"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testValidateArgs": {
  "data": {
   "lineno": 335,
   "symbols_in_volume": [
    "ValueError",
    "numpy.array",
    "numpy.asarray",
    "numpy.float32",
    "numpy.ones",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.wishart_test.chol",
    "tensorflow_probability.python.distributions.wishart_test.make_pd",
    "tensorflow_probability.python.distributions.wishart_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testVariance": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.wishart_test.chol",
    "tensorflow_probability.python.distributions.wishart_test.make_pd",
    "tensorflow_probability.python.distributions.wishart_test.tfd",
    "tensorflow_probability.python.distributions.wishart_test.wishart_var"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.WishartTest.testVarianceBroadcast": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.distributions.wishart_test.chol",
    "tensorflow_probability.python.distributions.wishart_test.make_pd",
    "tensorflow_probability.python.distributions.wishart_test.tfd",
    "tensorflow_probability.python.distributions.wishart_test.wishart_var"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.wishart_test.chol": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "scipy.linalg.cholesky"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.wishart_test.linalg": {
  "data": {
   "shadows": "scipy.linalg"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.wishart_test.make_pd": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.dot",
    "numpy.tril",
    "scipy.linalg.circulant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.wishart_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.wishart_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.wishart_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.wishart_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.wishart_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.wishart_test.tfd": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.wishart_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.wishart_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.wishart_test.wishart_var": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "numpy.asarray",
    "numpy.diagonal",
    "numpy.matmul",
    "numpy.newaxis",
    "numpy.sqrt"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.distributions.zipf.SeedStream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream.SeedStream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf.__init__": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "TypeError",
    "dict",
    "locals",
    "numpy.ones",
    "super",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float16",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.distributions.zipf.Zipf",
    "tensorflow_probability.python.internal.assert_util.assert_greater",
    "tensorflow_probability.python.internal.dtype_util.base_equal",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.dtype_util.is_floating",
    "tensorflow_probability.python.internal.dtype_util.name",
    "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._batch_shape": {
  "data": {
   "lineno": 154
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._batch_shape_tensor": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._cdf": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.broadcast_to",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.floor",
    "tensorflow.compat.v2.less",
    "tensorflow.compat.v2.math.zeta",
    "tensorflow.compat.v2.maximum",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._event_shape": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._event_shape_tensor": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._hat_integral": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.math.log1p"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._hat_integral_inverse": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.math.expm1",
    "tensorflow.compat.v2.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._log_normalization": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.math.zeta"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._log_prob": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow_probability.python.internal.distribution_util.embed_check_integer_casting_closed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._log_unnormalized_prob": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "numpy.inf",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.broadcast_to",
    "tensorflow.compat.v2.equal",
    "tensorflow.compat.v2.fill",
    "tensorflow.compat.v2.floor",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.maximum",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._mean": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.zeta",
    "tensorflow.compat.v2.newaxis",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._mode": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "tensorflow.compat.v2.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._params_event_ndims": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "classmethod",
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._sample_n": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": [
    "npdt",
    "numpy.nan",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.bool",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.fill",
    "tensorflow.compat.v2.int64.max",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.reduce_any",
    "tensorflow.compat.v2.while_loop",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring",
    "tensorflow_probability.python.internal.distribution_util.embed_check_integer_casting_closed",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
    "tensorflow_probability.python.internal.dtype_util.is_integer",
    "tensorflow_probability.python.internal.dtype_util.min"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._sample_n.loop_body": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "seed",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.floor",
    "tensorflow.compat.v2.random.uniform"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf._variance": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.zeta",
    "tensorflow.compat.v2.newaxis",
    "tensorflow_probability.python.internal.distribution_util.AppendDocstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf.interpolate_nondiscrete": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf.power": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.Zipf.sample_maximum_iterations": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf.__all__": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.zipf.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.zipf.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.zipf.distribution": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.zipf.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.zipf.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.zipf.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.zipf.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.zipf.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.zipf.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.zipf.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.zipf.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.zipf_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.assertAllBetween": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "numpy.ndenumerate"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.assertBetween": {
  "data": {
   "lineno": 35
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testEventDtype": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.float32",
    "tensorflow.float64",
    "tensorflow.int32",
    "tensorflow.int64",
    "tensorflow_probability.python.distributions.zipf_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testInvalidEventDtype": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "TypeError",
    "tensorflow.constant",
    "tensorflow.float16",
    "tensorflow.int32",
    "tensorflow_probability.python.distributions.zipf_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testInvalidPower": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.zipf_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testNanPower": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "numpy.nan",
    "tensorflow_probability.python.distributions.zipf_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testValidPower_ImplicitlyConvertsToFloat32": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "tensorflow.float32",
    "tensorflow_probability.python.distributions.zipf_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfCdfMultidimensional_IntegerArgs": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "scipy.stats.zipf.cdf",
    "scipy.stats.zipf.logcdf",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.zipf_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfCdfMultidimensional_NonIntegerArgs": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.ceil",
    "numpy.float32",
    "numpy.floor",
    "scipy.stats.zipf.cdf",
    "scipy.stats.zipf.logcdf",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.zipf_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfCdf_IntegerArgs": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "scipy.stats.zipf.cdf",
    "scipy.stats.zipf.logcdf",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.zipf_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfCdf_NonIntegerArgs": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": [
    "numpy.ceil",
    "numpy.floor",
    "scipy.stats.zipf.cdf",
    "scipy.stats.zipf.logcdf",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.zipf_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfCdf_NonIntegerArgsInterpolated": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": [
    "numpy.ceil",
    "numpy.floor",
    "scipy.stats.zipf.cdf",
    "scipy.stats.zipf.logcdf",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.zipf_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfCdf_NonIntegerArgsNoInterpolation": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "scipy.stats.zipf.cdf",
    "scipy.stats.zipf.logcdf",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.zipf_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfLogPmfMultidimensional_IntegerArgs": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.int32",
    "scipy.stats.zipf.logpmf",
    "scipy.stats.zipf.pmf",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.zipf_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfLogPmfMultidimensional_NonIntegerArgs": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.ceil",
    "numpy.float32",
    "numpy.floor",
    "scipy.stats.zipf.logpmf",
    "scipy.stats.zipf.pmf",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.zipf_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfLogPmf_IntegerArgs": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "scipy.stats.zipf.logpmf",
    "scipy.stats.zipf.pmf",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.zipf_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfLogPmf_InvalidArgs": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.zipf_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfLogPmf_NonIntegerArgs": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "numpy.ceil",
    "numpy.floor",
    "scipy.stats.zipf.logpmf",
    "scipy.stats.zipf.pmf",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.zipf_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfLogPmf_NonIntegerArgsNoInterpolation": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "scipy.stats.zipf.logpmf",
    "scipy.stats.zipf.pmf",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.zipf_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfMean": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": [
    "scipy.stats.zipf.mean",
    "tensorflow_probability.python.distributions.zipf_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfMode": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": [
    "numpy.ones_like",
    "tensorflow_probability.python.distributions.zipf_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfSample": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": [
    "int",
    "scipy.stats.zipf.mean",
    "scipy.stats.zipf.std",
    "tensorflow.constant",
    "tensorflow.float32",
    "tensorflow.float64",
    "tensorflow.int32",
    "tensorflow.int64",
    "tensorflow_probability.python.distributions.zipf_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfSampleMultidimensionalMean": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": [
    "int",
    "numpy.arange",
    "numpy.array",
    "numpy.float32",
    "numpy.float64",
    "numpy.vectorize",
    "scipy.stats.zipf.mean",
    "tensorflow_probability.python.distributions.zipf_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfSampleMultidimensionalStd": {
  "data": {
   "lineno": 382,
   "symbols_in_volume": [
    "int",
    "numpy.arange",
    "numpy.array",
    "numpy.float32",
    "numpy.float64",
    "numpy.vectorize",
    "scipy.stats.zipf.std",
    "tensorflow_probability.python.distributions.zipf_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfSampleMultipleTimes": {
  "data": {
   "lineno": 396,
   "symbols_in_volume": [
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow_probability.python.distributions.zipf_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfSample_AvoidsInfiniteLoop": {
  "data": {
   "lineno": 411,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.zipf_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfSample_ValidateArgs": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": [
    "int",
    "tensorflow.constant",
    "tensorflow.float32",
    "tensorflow.float64",
    "tensorflow.int32",
    "tensorflow.int64",
    "tensorflow_probability.python.distributions.zipf_test.tfd",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfShape": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.zipf_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfStd": {
  "data": {
   "lineno": 327,
   "symbols_in_volume": [
    "numpy.vectorize",
    "scipy.stats.zipf.std",
    "tensorflow_probability.python.distributions.zipf_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.ZipfTest.testZipfVariance": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": [
    "numpy.vectorize",
    "scipy.stats.zipf.var",
    "tensorflow_probability.python.distributions.zipf_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.distributions.zipf_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.zipf_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.zipf_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.zipf_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.zipf_test.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.zipf_test.test_case": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_case"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.zipf_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.zipf_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.zipf_test.tfd": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.distributions.zipf_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.distributions.zipf_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "list",
    "tensorflow.python.util.all_util.remove_undocumented",
    "tensorflow_probability.python.edward2._allowed_symbols",
    "tensorflow_probability.python.edward2.generated_random_variables.rv_dict.keys"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.edward2.RandomVariable": {
  "data": {
   "shadows": "tensorflow_probability.python.edward2.random_variable.RandomVariable"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2._allowed_symbols": {
  "data": {
   "lineno": 46
  },
  "type": "constant"
 },
 "tensorflow_probability.python.edward2.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.as_random_variable": {
  "data": {
   "shadows": "tensorflow_probability.python.edward2.generated_random_variables.as_random_variable"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.generated_random_variables": {
  "data": {
   "symbols_in_volume": [
    "globals",
    "issubclass",
    "list",
    "tensorflow_probability.python.distributions.Distribution",
    "tensorflow_probability.python.distributions.__dict__",
    "tensorflow_probability.python.edward2.generated_random_variables._make_random_variable",
    "tensorflow_probability.python.edward2.generated_random_variables.inspect",
    "tensorflow_probability.python.edward2.generated_random_variables.rv_dict",
    "tensorflow_probability.python.edward2.generated_random_variables.six"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.edward2.generated_random_variables.RandomVariable": {
  "data": {
   "shadows": "tensorflow_probability.python.edward2.random_variable.RandomVariable"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.generated_random_variables.__all__": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "tensorflow_probability.python.edward2.generated_random_variables._build_custom_rv": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "tensorflow_probability.python.edward2.interceptor.interceptable",
    "tensorflow_probability.python.edward2.random_variable.RandomVariable"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.generated_random_variables._make_random_variable": {
  "data": {
   "lineno": 148
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.generated_random_variables._make_random_variable.func": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "distribution_cls",
    "distribution_cls.__init__.__doc__",
    "distribution_cls.__name__",
    "tensorflow_probability.python.edward2.generated_random_variables.functools",
    "tensorflow_probability.python.edward2.generated_random_variables.inspect",
    "tensorflow_probability.python.edward2.interceptor.interceptable",
    "tensorflow_probability.python.edward2.random_variable.RandomVariable",
    "tensorflow_probability.python.util.docstring.expand_docstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.generated_random_variables._simple_name": {
  "data": {
   "lineno": 43
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.generated_random_variables.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.generated_random_variables.as_random_variable": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "tensorflow_probability.python.edward2.generated_random_variables._build_custom_rv",
    "tensorflow_probability.python.edward2.generated_random_variables._simple_name"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.generated_random_variables.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.generated_random_variables.docstring_util": {
  "data": {
   "shadows": "tensorflow_probability.python.util.docstring"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.generated_random_variables.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.generated_random_variables.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.generated_random_variables.interceptable": {
  "data": {
   "shadows": "tensorflow_probability.python.edward2.interceptor.interceptable"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.generated_random_variables.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.generated_random_variables.rv_dict": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.edward2.generated_random_variables.six": {
  "data": {
   "shadows": "six"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.generated_random_variables.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.generated_random_variables_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.edward2.generated_random_variables_test.GeneratedRandomVariablesTest": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.edward2.generated_random_variables_test.GeneratedRandomVariablesTest._testValueShapeAndDtype": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "cls",
    "rv",
    "rv.distribution.batch_shape",
    "rv.distribution.dtype",
    "rv.distribution.event_shape",
    "rv.sample_shape.concatenate",
    "rv.value.dtype",
    "rv.value.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.generated_random_variables_test.GeneratedRandomVariablesTest.testAllDistributionsAreRVs": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "issubclass",
    "tensorflow_probability.distributions.Distribution",
    "tensorflow_probability.distributions.__dict__",
    "tensorflow_probability.edward2.__dict__",
    "tensorflow_probability.python.edward2.generated_random_variables_test.inspect",
    "tensorflow_probability.python.edward2.generated_random_variables_test.six"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.generated_random_variables_test.GeneratedRandomVariablesTest.testAsRandomVariable": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "log_joint_builtin",
    "log_joint_scoped",
    "log_joint_wrapped",
    "tensorflow.compat.v1.name_scope",
    "tensorflow_probability.distributions.Normal",
    "tensorflow_probability.edward2.make_log_joint_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.generated_random_variables_test.GeneratedRandomVariablesTest.testAsRandomVariable.model_builtin": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.generated_random_variables_test.GeneratedRandomVariablesTest.testAsRandomVariable.model_scoped": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.as_random_variable"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.generated_random_variables_test.GeneratedRandomVariablesTest.testAsRandomVariable.model_wrapped": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "tensorflow_probability.distributions.Normal",
    "tensorflow_probability.edward2.as_random_variable"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.generated_random_variables_test.GeneratedRandomVariablesTest.testBernoulliDoc": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "len",
    "tensorflow_probability.distributions.Bernoulli.__init__.__doc__",
    "tensorflow_probability.edward2.Bernoulli.__doc__",
    "tensorflow_probability.edward2.Bernoulli.__name__",
    "tensorflow_probability.python.edward2.generated_random_variables_test.inspect"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.generated_random_variables_test.GeneratedRandomVariablesTest.testBernoulliLogProb": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "absl.testing.parameterized.named_parameters",
    "numpy.zeros",
    "tensorflow_probability.distributions.Bernoulli",
    "tensorflow_probability.edward2.Bernoulli"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.generated_random_variables_test.GeneratedRandomVariablesTest.testBernoulliSample": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "absl.testing.parameterized.named_parameters",
    "numpy.array",
    "tensorflow_probability.distributions.Bernoulli",
    "tensorflow_probability.edward2.Bernoulli"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.generated_random_variables_test.GeneratedRandomVariablesTest.testShape": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "absl.testing.parameterized.named_parameters",
    "rv",
    "rv.distribution.batch_shape",
    "rv.distribution.event_shape",
    "rv.sample_shape",
    "rv.shape",
    "tensorflow.zeros",
    "tensorflow_probability.edward2.Bernoulli",
    "tensorflow_probability.edward2.Dirichlet"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.generated_random_variables_test.GeneratedRandomVariablesTest.testValueMismatchRaises": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "ValueError",
    "numpy.zeros",
    "tensorflow_probability.edward2.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.generated_random_variables_test.GeneratedRandomVariablesTest.testValueShapeAndDtype": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "cls",
    "tensorflow_probability.edward2.Normal",
    "tensorflow_probability.edward2.Poisson"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.generated_random_variables_test.GeneratedRandomVariablesTest.testValueUnknownShape": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder",
    "tensorflow.executing_eagerly",
    "tensorflow.int32",
    "tensorflow_probability.edward2.Bernoulli"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.generated_random_variables_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.generated_random_variables_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.generated_random_variables_test.ed": {
  "data": {
   "shadows": "tensorflow_probability.edward2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.generated_random_variables_test.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.generated_random_variables_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.generated_random_variables_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.generated_random_variables_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.generated_random_variables_test.six": {
  "data": {
   "shadows": "six"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.generated_random_variables_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.generated_random_variables_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.generated_random_variables_test.tfd": {
  "data": {
   "shadows": "tensorflow_probability.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.get_next_interceptor": {
  "data": {
   "shadows": "tensorflow_probability.python.edward2.interceptor.get_next_interceptor"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.interceptable": {
  "data": {
   "shadows": "tensorflow_probability.python.edward2.interceptor.interceptable"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.interception": {
  "data": {
   "shadows": "tensorflow_probability.python.edward2.interceptor.interception"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.interceptor": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability.python.edward2.interceptor._InterceptorStack"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.edward2.interceptor._InterceptorStack": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tensorflow_probability.python.edward2.interceptor.threading"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.edward2.interceptor._InterceptorStack.__init__": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "f",
    "super",
    "tensorflow_probability.python.edward2.interceptor._InterceptorStack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.edward2.interceptor._interceptor_stack": {
  "data": {
   "lineno": 43
  },
  "type": "constant"
 },
 "tensorflow_probability.python.edward2.interceptor.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.interceptor.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.interceptor.contextmanager": {
  "data": {
   "shadows": "contextlib.contextmanager"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.interceptor.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.interceptor.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.interceptor.get_next_interceptor": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "contextlib.contextmanager",
    "tensorflow_probability.python.edward2.interceptor._interceptor_stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor.interceptable": {
  "data": {
   "lineno": 175
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor.interceptable.func_wrapped": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "interceptor",
    "tensorflow_probability.python.edward2.interceptor.functools",
    "tensorflow_probability.python.edward2.interceptor.get_next_interceptor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor.interception": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "contextlib.contextmanager",
    "tensorflow_probability.python.edward2.interceptor._interceptor_stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.interceptor.tape": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "contextlib.contextmanager",
    "tensorflow_probability.python.edward2.interceptor.collections",
    "tensorflow_probability.python.edward2.interceptor.interception"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor.tape.record": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": [
    "f",
    "tensorflow_probability.python.edward2.interceptor.interceptable"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor.threading": {
  "data": {
   "shadows": "threading"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.interceptor_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest.testInterception": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "cls",
    "tensorflow_probability.edward2.Bernoulli",
    "tensorflow_probability.edward2.Normal",
    "tensorflow_probability.edward2.interception"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest.testInterception.interceptor": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "f"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest.testInterceptionException": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "NotImplementedError",
    "f",
    "tensorflow_probability.edward2.get_next_interceptor",
    "tensorflow_probability.edward2.interception"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest.testInterceptionException.f": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest.testInterceptionException.interceptor": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "f"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest.testInterceptionForwarding": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "model",
    "tensorflow_probability.edward2.interception"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest.testInterceptionForwarding.double": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "f",
    "tensorflow_probability.edward2.interceptable"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest.testInterceptionForwarding.model": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest.testInterceptionForwarding.set_xy": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "f",
    "tensorflow_probability.edward2.interceptable"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest.testInterceptionNonForwarding": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "model",
    "tensorflow_probability.edward2.interception"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest.testInterceptionNonForwarding.double": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "f"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest.testInterceptionNonForwarding.model": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest.testInterceptionNonForwarding.set_xy": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "f"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest.testTape": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "list",
    "model",
    "tensorflow_probability.edward2.tape",
    "tensorflow_probability.python.edward2.interceptor_test.six"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest.testTape.model": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest.testTapeInnerForwarding": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "list",
    "model",
    "tensorflow_probability.edward2.interception",
    "tensorflow_probability.edward2.tape",
    "tensorflow_probability.python.edward2.interceptor_test.six"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest.testTapeInnerForwarding.double": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "f",
    "tensorflow_probability.edward2.interceptable"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest.testTapeInnerForwarding.model": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest.testTapeNoName": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "list",
    "model",
    "tensorflow_probability.edward2.tape",
    "tensorflow_probability.python.edward2.interceptor_test.six"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest.testTapeNoName.model": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest.testTapeOuterForwarding": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "list",
    "model",
    "tensorflow_probability.edward2.interception",
    "tensorflow_probability.edward2.tape",
    "tensorflow_probability.python.edward2.interceptor_test.six"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest.testTapeOuterForwarding.double": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "f",
    "tensorflow_probability.edward2.interceptable"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest.testTapeOuterForwarding.model": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest.testTrivialInterceptorPreservesLogJoint": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "log_joint",
    "log_joint_transformed",
    "model",
    "tensorflow_probability.edward2.make_log_joint_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest.testTrivialInterceptorPreservesLogJoint.model": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest.testTrivialInterceptorPreservesLogJoint.transformed_model": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "model",
    "tensorflow_probability.edward2.interception"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor_test.InterceptorTest.testTrivialInterceptorPreservesLogJoint.trivial_interceptor": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.interceptable"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.interceptor_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.interceptor_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.interceptor_test.ed": {
  "data": {
   "shadows": "tensorflow_probability.edward2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.interceptor_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.interceptor_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.interceptor_test.six": {
  "data": {
   "shadows": "six"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.interceptor_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.interceptor_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.make_log_joint_fn": {
  "data": {
   "shadows": "tensorflow_probability.python.edward2.program_transformations.make_log_joint_fn"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.make_value_setter": {
  "data": {
   "shadows": "tensorflow_probability.python.edward2.program_transformations.make_value_setter"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.program_transformations": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.edward2.program_transformations.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.edward2.program_transformations._get_function_inputs": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": [
    "AttributeError",
    "hasattr",
    "tensorflow_probability.python.edward2.program_transformations.inspect",
    "tensorflow_probability.python.edward2.program_transformations.six"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.program_transformations.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.program_transformations.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.program_transformations.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.program_transformations.interceptable": {
  "data": {
   "shadows": "tensorflow_probability.python.edward2.interceptor.interceptable"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.program_transformations.interception": {
  "data": {
   "shadows": "tensorflow_probability.python.edward2.interceptor.interception"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.program_transformations.make_log_joint_fn": {
  "data": {
   "lineno": 138
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.program_transformations.make_log_joint_fn.log_joint_fn": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "_get_function_inputs",
    "model",
    "sum",
    "tensorflow_probability.python.edward2.interceptor.interception"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.program_transformations.make_log_joint_fn.log_joint_fn.interceptor": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "KeyError",
    "LookupError",
    "rv_constructor",
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.program_transformations.make_value_setter": {
  "data": {
   "lineno": 34
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.program_transformations.make_value_setter.set_values": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "tensorflow_probability.python.edward2.interceptor.interceptable"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.program_transformations.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.program_transformations.six": {
  "data": {
   "shadows": "six"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.program_transformations.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.program_transformations_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.ProgramTransformationsTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnConditional": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "LookupError",
    "log_joint",
    "tensorflow.random.normal",
    "tensorflow_probability.edward2.make_log_joint_fn",
    "true_log_joint"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnConditional.linear_regression": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "tensorflow.math.rsqrt",
    "tensorflow.tensordot",
    "tensorflow_probability.edward2.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnConditional.true_log_joint": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "tensorflow.math.rsqrt",
    "tensorflow.reduce_sum",
    "tensorflow.tensordot",
    "tensorflow_probability.python.edward2.program_transformations_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnDynamic": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "log_joint",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow.random.normal",
    "tensorflow_probability.edward2.make_log_joint_fn",
    "true_log_joint"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnDynamic.mixture_of_real_and_int": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "tensorflow.equal",
    "tensorflow.nn.softplus",
    "tensorflow_probability.edward2.Bernoulli",
    "tensorflow_probability.edward2.Normal",
    "tensorflow_probability.edward2.Poisson"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnDynamic.true_log_joint": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "tensorflow.equal",
    "tensorflow.nn.softplus",
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.edward2.program_transformations_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnError": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "KeyError",
    "log_joint",
    "tensorflow.random.normal",
    "tensorflow_probability.edward2.make_log_joint_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnError.normal_with_unknown_mean": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnTemplate": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "log_joint",
    "tensorflow.compat.v1.initialize_all_variables",
    "tensorflow.compat.v1.make_template",
    "tensorflow.compat.v1.trainable_variables",
    "tensorflow_probability.edward2.make_log_joint_fn",
    "true_log_joint"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnTemplate.true_log_joint": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.edward2.program_transformations_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnTemplate.variational": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "tensorflow.compat.v1.get_variable",
    "tensorflow_probability.edward2.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnUnconditional": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "LookupError",
    "log_joint",
    "tensorflow.random.normal",
    "tensorflow_probability.edward2.make_log_joint_fn",
    "true_log_joint"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnUnconditional.normal_with_unknown_mean": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.ProgramTransformationsTest.testMakeLogJointFnUnconditional.true_log_joint": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.edward2.program_transformations_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.ProgramTransformationsTest.testMakeValueSetterSetsValues": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "normal_with_unknown_mean",
    "tensorflow_probability.edward2.interception",
    "tensorflow_probability.edward2.make_value_setter"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.ProgramTransformationsTest.testMakeValueSetterSetsValues.normal_with_unknown_mean": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.ProgramTransformationsTest.testMakeValueSetterWorksWithPartialAssignment": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "normal_with_unknown_mean",
    "observed_log_joint_fn",
    "tensorflow_probability.edward2.interception",
    "tensorflow_probability.edward2.make_log_joint_fn",
    "tensorflow_probability.edward2.make_value_setter",
    "tensorflow_probability.python.edward2.program_transformations_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.ProgramTransformationsTest.testMakeValueSetterWorksWithPartialAssignment.model_with_observed_x": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "normal_with_unknown_mean",
    "tensorflow_probability.edward2.interception",
    "tensorflow_probability.edward2.make_value_setter"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.ProgramTransformationsTest.testMakeValueSetterWorksWithPartialAssignment.normal_with_unknown_mean": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.ed": {
  "data": {
   "shadows": "tensorflow_probability.edward2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.tfd": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "tensorflow_probability.python.edward2.program_transformations_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.random_variable": {
  "data": {
   "symbols_in_volume": [
    "tensorflow.python.client.session.register_session_run_conversion_functions",
    "tensorflow.register_tensor_conversion_function",
    "tensorflow_probability.python.edward2.random_variable.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable._session_run_conversion_feed_function",
    "tensorflow_probability.python.edward2.random_variable._session_run_conversion_feed_function_for_partial_run",
    "tensorflow_probability.python.edward2.random_variable._session_run_conversion_fetch_function",
    "tensorflow_probability.python.edward2.random_variable._tensor_conversion_function"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.edward2.random_variable.RandomVariable": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "object",
    "tensorflow.Tensor.__abs__",
    "tensorflow.Tensor.__add__",
    "tensorflow.Tensor.__and__",
    "tensorflow.Tensor.__bool__",
    "tensorflow.Tensor.__div__",
    "tensorflow.Tensor.__floordiv__",
    "tensorflow.Tensor.__ge__",
    "tensorflow.Tensor.__getitem__",
    "tensorflow.Tensor.__gt__",
    "tensorflow.Tensor.__invert__",
    "tensorflow.Tensor.__iter__",
    "tensorflow.Tensor.__le__",
    "tensorflow.Tensor.__lt__",
    "tensorflow.Tensor.__matmul__",
    "tensorflow.Tensor.__mod__",
    "tensorflow.Tensor.__mul__",
    "tensorflow.Tensor.__neg__",
    "tensorflow.Tensor.__nonzero__",
    "tensorflow.Tensor.__or__",
    "tensorflow.Tensor.__pow__",
    "tensorflow.Tensor.__radd__",
    "tensorflow.Tensor.__rand__",
    "tensorflow.Tensor.__rdiv__",
    "tensorflow.Tensor.__rfloordiv__",
    "tensorflow.Tensor.__rmatmul__",
    "tensorflow.Tensor.__rmod__",
    "tensorflow.Tensor.__rmul__",
    "tensorflow.Tensor.__ror__",
    "tensorflow.Tensor.__rpow__",
    "tensorflow.Tensor.__rsub__",
    "tensorflow.Tensor.__rtruediv__",
    "tensorflow.Tensor.__rxor__",
    "tensorflow.Tensor.__sub__",
    "tensorflow.Tensor.__truediv__",
    "tensorflow.Tensor.__xor__",
    "tensorflow_probability.python.edward2.random_variable._operator"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.edward2.random_variable.RandomVariable.__eq__": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "id"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable.RandomVariable.__hash__": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "id"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable.RandomVariable.__init__": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.cast"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable.RandomVariable.__ne__": {
  "data": {
   "lineno": 233
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable.RandomVariable.__repr__": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "_numpy_text",
    "hasattr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable.RandomVariable.__str__": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "_numpy_text",
    "isinstance",
    "tensorflow.python.framework.ops.EagerTensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable.RandomVariable.distribution": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable.RandomVariable.dtype": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable.RandomVariable.eval": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": [
    "tensorflow.python.client.session"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable.RandomVariable.get_shape": {
  "data": {
   "lineno": 277
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable.RandomVariable.numpy": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": [
    "NotImplementedError",
    "isinstance",
    "tensorflow.python.framework.ops.EagerTensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable.RandomVariable.sample_shape": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "isinstance",
    "property",
    "tensorflow.Tensor",
    "tensorflow.TensorShape",
    "tensorflow.get_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable.RandomVariable.sample_shape_tensor": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "isinstance",
    "tensorflow.Tensor",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable.RandomVariable.shape": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable.RandomVariable.value": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "NotImplementedError",
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.edward2.random_variable._numpy_text": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": [
    "repr",
    "str"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable._operator": {
  "data": {
   "lineno": 32
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable._operator.func": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "attr",
    "tensorflow_probability.python.edward2.random_variable.functools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable._session_run_conversion_feed_function": {
  "data": {
   "lineno": 302
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable._session_run_conversion_feed_function_for_partial_run": {
  "data": {
   "lineno": 306
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable._session_run_conversion_fetch_function": {
  "data": {
   "lineno": 298
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable._tensor_conversion_function": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.random_variable.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.random_variable.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.random_variable.ops": {
  "data": {
   "shadows": "tensorflow.python.framework.ops"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.random_variable.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.random_variable.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.random_variable.tf_session": {
  "data": {
   "shadows": "tensorflow.python.client.session"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.random_variable_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.edward2.random_variable_test.FakeDistribution": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.edward2.random_variable_test.FakeDistribution.__init__": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.edward2.random_variable_test.FakeDistribution",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testArrayPriority": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testConstructor": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "NotImplementedError",
    "ValueError",
    "tensorflow.convert_to_tensor",
    "tensorflow.int32",
    "tensorflow.ones",
    "tensorflow.zeros",
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.FakeDistribution",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testConvertToTensor": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.convert_to_tensor",
    "tensorflow.int32",
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testGradientsFirstOrder": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testGradientsSecondOrder": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testNumpy": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "NotImplementedError",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testOperatorsAbs": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": [
    "abs",
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testOperatorsAdd": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testOperatorsBoolNonzero": {
  "data": {
   "lineno": 279,
   "symbols_in_volume": [
    "TypeError",
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testOperatorsDiv": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testOperatorsEq": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testOperatorsFloordiv": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testOperatorsGe": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testOperatorsGetitem": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "tensorflow.ones",
    "tensorflow.zeros",
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testOperatorsGt": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testOperatorsHash": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "hash",
    "id",
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testOperatorsLe": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testOperatorsLt": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testOperatorsMod": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testOperatorsMul": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testOperatorsNe": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testOperatorsNeg": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testOperatorsPow": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testOperatorsRadd": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testOperatorsRdiv": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testOperatorsRfloordiv": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testOperatorsRmod": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testOperatorsRmul": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testOperatorsRpow": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testOperatorsRsub": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testOperatorsSub": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testRandomTensorSample": {
  "data": {
   "lineno": 363,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.int32",
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testRepr": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "repr",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testSessionEval": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder",
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow.executing_eagerly",
    "tensorflow.float32",
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testSessionRun": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder",
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow.executing_eagerly",
    "tensorflow.float32",
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testShape": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "rv",
    "rv.distribution.batch_shape",
    "rv.distribution.event_shape",
    "rv.sample_shape",
    "rv.shape",
    "tensorflow.constant",
    "tensorflow.zeros",
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.RandomVariableTest.testStr": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "str",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.edward2.RandomVariable",
    "tensorflow_probability.python.edward2.random_variable_test.re",
    "tensorflow_probability.python.edward2.random_variable_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.edward2.random_variable_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.random_variable_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.random_variable_test.ed": {
  "data": {
   "shadows": "tensorflow_probability.edward2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.random_variable_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.random_variable_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.random_variable_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.random_variable_test.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.random_variable_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.random_variable_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.random_variable_test.tfd": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.edward2.random_variable_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.remove_undocumented": {
  "data": {
   "shadows": "tensorflow.python.util.all_util.remove_undocumented"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.rv_dict": {
  "data": {
   "shadows": "tensorflow_probability.python.edward2.generated_random_variables.rv_dict"
  },
  "type": "import"
 },
 "tensorflow_probability.python.edward2.tape": {
  "data": {
   "shadows": "tensorflow_probability.python.edward2.interceptor.tape"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.python.util.all_util.remove_undocumented",
    "tensorflow_probability.python.glm._allowed_symbols"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.glm.Bernoulli": {
  "data": {
   "shadows": "tensorflow_probability.python.glm.family.Bernoulli"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.BernoulliNormalCDF": {
  "data": {
   "shadows": "tensorflow_probability.python.glm.family.BernoulliNormalCDF"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.CustomExponentialFamily": {
  "data": {
   "shadows": "tensorflow_probability.python.glm.family.CustomExponentialFamily"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.ExponentialFamily": {
  "data": {
   "shadows": "tensorflow_probability.python.glm.family.ExponentialFamily"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.GammaExp": {
  "data": {
   "shadows": "tensorflow_probability.python.glm.family.GammaExp"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.GammaSoftplus": {
  "data": {
   "shadows": "tensorflow_probability.python.glm.family.GammaSoftplus"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.LogNormal": {
  "data": {
   "shadows": "tensorflow_probability.python.glm.family.LogNormal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.LogNormalSoftplus": {
  "data": {
   "shadows": "tensorflow_probability.python.glm.family.LogNormalSoftplus"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.Normal": {
  "data": {
   "shadows": "tensorflow_probability.python.glm.family.Normal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.NormalReciprocal": {
  "data": {
   "shadows": "tensorflow_probability.python.glm.family.NormalReciprocal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.Poisson": {
  "data": {
   "shadows": "tensorflow_probability.python.glm.family.Poisson"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.PoissonSoftplus": {
  "data": {
   "shadows": "tensorflow_probability.python.glm.family.PoissonSoftplus"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm._allowed_symbols": {
  "data": {
   "lineno": 41
  },
  "type": "constant"
 },
 "tensorflow_probability.python.glm.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.convergence_criteria_small_relative_norm_weights_change": {
  "data": {
   "shadows": "tensorflow_probability.python.glm.fisher_scoring.convergence_criteria_small_relative_norm_weights_change"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.family": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.glm.family.Bernoulli": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "tensorflow_probability.python.glm.family.ExponentialFamily"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.family.Bernoulli._call": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "tensorflow.nn.sigmoid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.Bernoulli._log_prob": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.Bernoulli"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.BernoulliNormalCDF": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": [
    "tensorflow_probability.python.glm.family.ExponentialFamily"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.family.BernoulliNormalCDF._call": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.BernoulliNormalCDF._log_prob": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.Bernoulli",
    "tensorflow_probability.python.distributions.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.CustomExponentialFamily": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "tensorflow_probability.python.glm.family.ExponentialFamily"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.family.CustomExponentialFamily.__init__": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "isinstance",
    "super",
    "tensorflow_probability.python.bijectors.Bijector",
    "tensorflow_probability.python.glm.family.CustomExponentialFamily"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.CustomExponentialFamily._call": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "tensorflow.ones_like",
    "tensorflow_probability.python.math.gradient.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.CustomExponentialFamily._log_prob": {
  "data": {
   "lineno": 233
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.CustomExponentialFamily.distribution_fn": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.CustomExponentialFamily.linear_model_to_mean_fn": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.ExponentialFamily": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.family.ExponentialFamily.__call__": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "tensorflow.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.ExponentialFamily.__init__": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.ExponentialFamily.__repr__": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.ExponentialFamily.__str__": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.ExponentialFamily._call": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.ExponentialFamily._log_prob": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.ExponentialFamily._name_scope": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow_probability.python.glm.family.contextlib"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.ExponentialFamily.is_canonical": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.ExponentialFamily.log_prob": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.ExponentialFamily.name": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.GammaExp": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": [
    "tensorflow_probability.python.glm.family.ExponentialFamily"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.family.GammaExp._call": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": [
    "tensorflow.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.GammaExp._log_prob": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.exp",
    "tensorflow_probability.python.distributions.Gamma"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.GammaSoftplus": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": [
    "tensorflow_probability.python.glm.family.ExponentialFamily"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.family.GammaSoftplus._call": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": [
    "tensorflow.nn.sigmoid",
    "tensorflow.nn.softplus"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.GammaSoftplus._log_prob": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.nn.softplus",
    "tensorflow_probability.python.distributions.Gamma"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.LogNormal": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": [
    "tensorflow_probability.python.glm.family.ExponentialFamily"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.family.LogNormal._call": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": [
    "tensorflow.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.LogNormal._log_prob": {
  "data": {
   "lineno": 350,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.sqrt",
    "tensorflow.math.log",
    "tensorflow_probability.python.distributions.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.LogNormalSoftplus": {
  "data": {
   "lineno": 359,
   "symbols_in_volume": [
    "tensorflow_probability.python.glm.family.ExponentialFamily"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.family.LogNormalSoftplus._call": {
  "data": {
   "lineno": 366,
   "symbols_in_volume": [
    "tensorflow.nn.sigmoid",
    "tensorflow.nn.softplus"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.LogNormalSoftplus._log_prob": {
  "data": {
   "lineno": 372,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.sqrt",
    "tensorflow.math.log",
    "tensorflow.nn.softplus",
    "tensorflow_probability.python.distributions.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.Normal": {
  "data": {
   "lineno": 381,
   "symbols_in_volume": [
    "tensorflow_probability.python.glm.family.ExponentialFamily"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.family.Normal._call": {
  "data": {
   "lineno": 386,
   "symbols_in_volume": [
    "tensorflow.identity",
    "tensorflow.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.Normal._log_prob": {
  "data": {
   "lineno": 391,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.NormalReciprocal": {
  "data": {
   "lineno": 396,
   "symbols_in_volume": [
    "tensorflow_probability.python.glm.family.ExponentialFamily"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.family.NormalReciprocal._call": {
  "data": {
   "lineno": 401,
   "symbols_in_volume": [
    "tensorflow.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.NormalReciprocal._log_prob": {
  "data": {
   "lineno": 407,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.distributions.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.Poisson": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": [
    "tensorflow_probability.python.glm.family.ExponentialFamily"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.family.Poisson._call": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": [
    "tensorflow.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.Poisson._log_prob": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.Poisson"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.PoissonSoftplus": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": [
    "tensorflow_probability.python.glm.family.ExponentialFamily"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.family.PoissonSoftplus._call": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": [
    "tensorflow.nn.sigmoid",
    "tensorflow.nn.softplus"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.PoissonSoftplus._log_prob": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": [
    "tensorflow.nn.softplus",
    "tensorflow_probability.python.distributions.Poisson"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family.__all__": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.glm.family.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.family.bijectors": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.family.contextlib": {
  "data": {
   "shadows": "contextlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.family.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.family.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.family.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.family.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.family.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.family.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.family.value_and_gradient": {
  "data": {
   "shadows": "tensorflow_probability.python.math.gradient.value_and_gradient"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.family_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.bijectors",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.glm.family_test.BernoulliNormalCDFTest": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.glm.family_test._GLMTestHarness"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.family_test.BernoulliNormalCDFTest.setUp": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow_probability.glm.BernoulliNormalCDF",
    "tensorflow_probability.glm.CustomExponentialFamily",
    "tensorflow_probability.python.glm.family_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test.BernoulliNormalCDFTest.setUp.normal_cdf": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "tensorflow.convert_to_tensor",
    "tensorflow.ones",
    "tensorflow.zeros",
    "tensorflow_probability.python.glm.family_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test.BernoulliTest": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.glm.family_test._GLMTestHarness"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.family_test.BernoulliTest.setUp": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.nn.sigmoid",
    "tensorflow_probability.glm.Bernoulli",
    "tensorflow_probability.glm.CustomExponentialFamily",
    "tensorflow_probability.python.glm.family_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test.GammaExpTest": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.glm.family_test._GLMTestHarness"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.family_test.GammaExpTest.setUp": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.exp",
    "tensorflow_probability.glm.CustomExponentialFamily",
    "tensorflow_probability.glm.GammaExp",
    "tensorflow_probability.python.glm.family_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test.GammaSoftplusTest": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.glm.family_test._GLMTestHarness"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.family_test.GammaSoftplusTest.setUp": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.nn.softplus",
    "tensorflow_probability.glm.CustomExponentialFamily",
    "tensorflow_probability.glm.GammaSoftplus",
    "tensorflow_probability.python.glm.family_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test.LogNormalSoftplusTest": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.glm.family_test._GLMTestHarness"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.family_test.LogNormalSoftplusTest.setUp": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.nn.softplus",
    "tensorflow_probability.glm.CustomExponentialFamily",
    "tensorflow_probability.glm.LogNormalSoftplus",
    "tensorflow_probability.python.glm.family_test.make_lognormal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test.LogNormalTest": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.glm.family_test._GLMTestHarness"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.family_test.LogNormalTest.setUp": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.exp",
    "tensorflow_probability.glm.CustomExponentialFamily",
    "tensorflow_probability.glm.LogNormal",
    "tensorflow_probability.python.glm.family_test.make_lognormal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test.NormalReciprocalTest": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.glm.family_test._GLMTestHarness"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.family_test.NormalReciprocalTest.setUp": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.math.reciprocal",
    "tensorflow_probability.glm.CustomExponentialFamily",
    "tensorflow_probability.glm.NormalReciprocal",
    "tensorflow_probability.python.glm.family_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test.NormalTest": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.glm.family_test._GLMTestHarness"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.family_test.NormalTest.setUp": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.identity",
    "tensorflow_probability.glm.CustomExponentialFamily",
    "tensorflow_probability.glm.Normal",
    "tensorflow_probability.python.glm.family_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test.PoissonSoftplusTest": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.glm.family_test._GLMTestHarness"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.family_test.PoissonSoftplusTest.setUp": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.nn.softplus",
    "tensorflow_probability.glm.CustomExponentialFamily",
    "tensorflow_probability.glm.PoissonSoftplus",
    "tensorflow_probability.python.glm.family_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test.PoissonTest": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.glm.family_test._GLMTestHarness"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.family_test.PoissonTest.setUp": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.exp",
    "tensorflow_probability.glm.CustomExponentialFamily",
    "tensorflow_probability.glm.Poisson",
    "tensorflow_probability.python.glm.family_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test._GLMTestHarness": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.family_test._GLMTestHarness.testCallWorksCorrectly": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "numpy.linspace",
    "numpy.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test._GLMTestHarness.testCorrectIsCanonicalSpecification": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "numpy.all",
    "numpy.linspace",
    "numpy.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test._GLMTestHarness.testLogProbWorksCorrectly": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "numpy.linspace",
    "numpy.stack",
    "tensorflow.cast",
    "tensorflow.identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.family_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.family_test.make_lognormal": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.sqrt",
    "tensorflow.convert_to_tensor",
    "tensorflow.math.log",
    "tensorflow_probability.python.glm.family_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.family_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.family_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.family_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.family_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.family_test.tfb": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.glm.family_test.tfd": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.glm.family_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.fisher_scoring": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.glm.fisher_scoring.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.glm.fisher_scoring.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.fisher_scoring.calculate_linear_predictor": {
  "data": {
   "lineno": 623,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.linalg.matvec"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring.convergence_criteria_small_relative_norm_weights_change": {
  "data": {
   "lineno": 442,
   "symbols_in_volume": [
    "convergence_criteria_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring.convergence_criteria_small_relative_norm_weights_change.convergence_criteria_fn": {
  "data": {
   "lineno": 471,
   "symbols_in_volume": [
    "tensorflow.norm",
    "tensorflow.reduce_all"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.fisher_scoring.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.fisher_scoring.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.fisher_scoring.fit": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "convergence_criteria_small_relative_norm_weights_change",
    "numpy.bool",
    "numpy.int32",
    "prepare_args",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.logical_not",
    "tensorflow.while_loop",
    "tensorflow.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring.fit._body": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "convergence_criteria_fn",
    "fit_one_step"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring.fit_one_step": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": [
    "calculate_linear_predictor",
    "mask_if_invalid",
    "model",
    "numpy.array",
    "numpy.inf",
    "prepare_args",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.linalg.lstsq",
    "tensorflow.math.is_finite",
    "tensorflow.math.rsqrt",
    "tensorflow.newaxis",
    "tensorflow.not_equal",
    "tensorflow_probability.python.internal.distribution_util.maybe_get_static_value",
    "tensorflow_probability.python.internal.prefer_static.cond",
    "tensorflow_probability.python.internal.prefer_static.reduce_all"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring.fit_one_step._embed_l2_regularization": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": [
    "num_cols",
    "numpy.array",
    "tensorflow.concat",
    "tensorflow.eye",
    "tensorflow.shape",
    "tensorflow.sqrt",
    "tensorflow_probability.python.internal.distribution_util.pad"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring.fit_one_step.mask_if_invalid": {
  "data": {
   "lineno": 349,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.compat.v1.where",
    "tensorflow.fill",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.fisher_scoring.num_cols": {
  "data": {
   "lineno": 635,
   "symbols_in_volume": [
    "tensorflow.compat.dimension_value",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring.prefer_static": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.prefer_static"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.fisher_scoring.prepare_args": {
  "data": {
   "lineno": 517,
   "symbols_in_volume": [
    "calculate_linear_predictor",
    "numpy.float32",
    "tensorflow.broadcast_to",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.shape",
    "tensorflow.zeros",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.fisher_scoring.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test.FitTestFast": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test.FitTestFast.make_dataset": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "ValueError",
    "numpy.array",
    "numpy.sqrt",
    "seed",
    "tensorflow.cast",
    "tensorflow.convert_to_tensor",
    "tensorflow.linalg.norm",
    "tensorflow.tensordot",
    "tensorflow_probability.python.glm.fisher_scoring_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test.FitTestFast.testBatchedOperationConverges": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "tensorflow_probability.glm.Normal",
    "tensorflow_probability.glm.fit"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test.FitTestFast.testLinearWorksCorrectly": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "int",
    "numpy.mean",
    "tensorflow_probability.glm.Normal",
    "tensorflow_probability.glm.fit"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test.FitTestFast.testOffsetWorksCorrectly": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "int",
    "numpy.mean",
    "tensorflow.fill",
    "tensorflow_probability.glm.BernoulliNormalCDF",
    "tensorflow_probability.glm.fit"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test.FitTestFast.testProbitWorksCorrectly": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "int",
    "numpy.mean",
    "tensorflow_probability.glm.BernoulliNormalCDF",
    "tensorflow_probability.glm.fit"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test.FitTestSlow": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": [
    "tensorflow_probability.python.glm.fisher_scoring_test.FitTestFast"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test.FitTestSlow._testL2RegularizationWorksCorrectly": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "int",
    "numpy.array",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.glm.BernoulliNormalCDF",
    "tensorflow_probability.glm.fit"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test.FitTestSlow.testStaticL2RegularizationWorksCorrectly": {
  "data": {
   "lineno": 277
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test.tfd": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "tensorflow_probability.python.glm.fisher_scoring_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.fit": {
  "data": {
   "shadows": "tensorflow_probability.python.glm.fisher_scoring.fit"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.fit_one_step": {
  "data": {
   "shadows": "tensorflow_probability.python.glm.fisher_scoring.fit_one_step"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.fit_sparse": {
  "data": {
   "shadows": "tensorflow_probability.python.glm.proximal_hessian.fit_sparse"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.fit_sparse_one_step": {
  "data": {
   "shadows": "tensorflow_probability.python.glm.proximal_hessian.fit_sparse_one_step"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.proximal_hessian": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.glm.proximal_hessian.__all__": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "tensorflow_probability.python.glm.proximal_hessian._fit_sparse_exact_hessian": {
  "data": {
   "lineno": 491,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow_probability.optimizer.proximal_hessian_sparse_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian._fit_sparse_exact_hessian._grad_and_hessian_loss_fn": {
  "data": {
   "lineno": 523,
   "symbols_in_volume": [
    "_neg_log_likelihood",
    "tensorflow.gradients",
    "tensorflow.hessians",
    "tensorflow.linalg.cholesky",
    "tensorflow.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian._fit_sparse_exact_hessian._neg_log_likelihood": {
  "data": {
   "lineno": 518,
   "symbols_in_volume": [
    "model.log_prob",
    "tensorflow_probability.python.math.linalg.sparse_or_dense_matvecmul"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian._grad_neg_log_likelihood_and_fim": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "_mask_if_invalid",
    "model",
    "numpy.inf",
    "tensorflow.math.is_finite",
    "tensorflow.not_equal",
    "tensorflow_probability.python.math.linalg.sparse_or_dense_matvecmul"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian._grad_neg_log_likelihood_and_fim._mask_if_invalid": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.compat.v1.where",
    "tensorflow.fill",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.proximal_hessian.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.proximal_hessian.fit_sparse": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow_probability.optimizer.proximal_hessian_sparse_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian.fit_sparse._grad_neg_log_likelihood_and_fim_fn": {
  "data": {
   "lineno": 473,
   "symbols_in_volume": [
    "model",
    "tensorflow_probability.python.glm.proximal_hessian._grad_neg_log_likelihood_and_fim",
    "tensorflow_probability.python.math.linalg.sparse_or_dense_matvecmul"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian.fit_sparse_one_step": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "model",
    "tensorflow.compat.v1.name_scope",
    "tensorflow_probability.optimizer.proximal_hessian_sparse_one_step",
    "tensorflow_probability.python.glm.proximal_hessian._grad_neg_log_likelihood_and_fim",
    "tensorflow_probability.python.math.linalg.sparse_or_dense_matvecmul"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.proximal_hessian.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.proximal_hessian.sparse_or_dense_matvecmul": {
  "data": {
   "shadows": "tensorflow_probability.python.math.linalg.sparse_or_dense_matvecmul"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.proximal_hessian.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.proximal_hessian.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test.ProximalHessianTestDynamicShapeFloat32": {
  "data": {
   "lineno": 394,
   "symbols_in_volume": [
    "tensorflow.float32",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test.ProximalHessianTestDynamicShapeFloat64": {
  "data": {
   "lineno": 406,
   "symbols_in_volume": [
    "tensorflow.float64",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test.ProximalHessianTestStaticShapeFloat32": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": [
    "tensorflow.float32",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test.ProximalHessianTestStaticShapeFloat64": {
  "data": {
   "lineno": 400,
   "symbols_in_volume": [
    "tensorflow.float64",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "object",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest._adjust_dtype_and_shape_hints": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "isinstance",
    "tensorflow.SparseTensor",
    "tensorflow.cast"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest._make_dataset": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "ValueError",
    "numpy.array",
    "numpy.float32",
    "numpy.sqrt",
    "seed",
    "tensorflow.bool",
    "tensorflow.cast",
    "tensorflow.compat.v1.where",
    "tensorflow.convert_to_tensor",
    "tensorflow.linalg.norm",
    "tensorflow.matmul",
    "tensorflow.newaxis",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.glm.proximal_hessian_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest._make_placeholder": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest._prepare_inputs_for_fit_sparse": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "numpy.zeros",
    "tensorflow_probability.math.dense_to_sparse"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest._test_compare_batch_to_single_instance": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": [
    "int",
    "numpy.stack",
    "tensorflow_probability.glm.Normal",
    "tensorflow_probability.glm.fit_sparse"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest._test_fit_glm_from_data": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "tensorflow_probability.glm.fit_sparse"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest.testCompareBatchResultsToSingleInstance_Dense": {
  "data": {
   "lineno": 381
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest.testCompareBatchResultsToSingleInstance_Sparse": {
  "data": {
   "lineno": 384
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest.testFitGLMFromData_BatchOfRank1": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "int",
    "tensorflow_probability.glm.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest.testFitGLMFromData_BatchOfRank2": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "int",
    "tensorflow_probability.glm.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest.testFitGLMFromData_SimilarModel": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "int",
    "tensorflow_probability.glm.Bernoulli"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest.testFitGLMFromData_SingleBatch": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "int",
    "tensorflow_probability.glm.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest.testFitGLMFromData_SparseTensorBatchOfRank1": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": [
    "int",
    "tensorflow_probability.glm.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest.testFitGLMFromData_SparseTensorBatchOfRank2": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": [
    "int",
    "tensorflow_probability.glm.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest.testFitGLMFromData_SparseTensorBatchOfRank3": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "int",
    "tensorflow_probability.glm.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest.testFitGLMFromData_SparseTensorSingleBatch": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "int",
    "tensorflow_probability.glm.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest.testTwoSweepsAreBetterThanOne": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "_joint_log_prob",
    "int",
    "tensorflow.convert_to_tensor",
    "tensorflow.zeros",
    "tensorflow_probability.glm.BernoulliNormalCDF",
    "tensorflow_probability.glm.fit_sparse_one_step"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test._ProximalHessianTest.testTwoSweepsAreBetterThanOne._joint_log_prob": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "tensorflow.linalg.matvec",
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test.tfd": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.glm.proximal_hessian_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.glm.remove_undocumented": {
  "data": {
   "shadows": "tensorflow.python.util.all_util.remove_undocumented"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.internal.assert_util": {
  "data": {
   "symbols_in_volume": [
    "tensorflow.compat.v1.assert_equal",
    "tensorflow.compat.v1.assert_greater",
    "tensorflow.compat.v1.assert_greater_equal",
    "tensorflow.compat.v1.assert_integer",
    "tensorflow.compat.v1.assert_less",
    "tensorflow.compat.v1.assert_less_equal",
    "tensorflow.compat.v1.assert_near",
    "tensorflow.compat.v1.assert_non_negative",
    "tensorflow.compat.v1.assert_non_positive",
    "tensorflow.compat.v1.assert_none_equal",
    "tensorflow.compat.v1.assert_positive",
    "tensorflow.compat.v1.assert_rank",
    "tensorflow.compat.v1.assert_rank_at_least"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.internal.assert_util.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.assert_util.assert_equal": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.assert_util.assert_finite": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "ValueError",
    "numpy.all",
    "numpy.isfinite",
    "tensorflow.bool",
    "tensorflow.compat.v1.assert_equal",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.control_dependencies",
    "tensorflow.get_static_value",
    "tensorflow.identity",
    "tensorflow.math.is_finite",
    "tensorflow.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.assert_util.assert_greater": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.assert_util.assert_greater_equal": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.assert_util.assert_integer": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.assert_util.assert_less": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.assert_util.assert_less_equal": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.assert_util.assert_near": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.assert_util.assert_non_negative": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.assert_util.assert_non_positive": {
  "data": {
   "lineno": 37
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.assert_util.assert_none_equal": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.assert_util.assert_positive": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.assert_util.assert_rank": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.assert_util.assert_rank_at_least": {
  "data": {
   "lineno": 41
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.assert_util.assert_rank_at_most": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "tensorflow.compat.v1.assert_less_equal",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.assert_util.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.assert_util.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.assert_util.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.assert_util.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.backend.numpy.compat.v2.Variable",
    "tensorflow_probability.python.internal.backend.numpy.linalg.eye",
    "tensorflow_probability.python.internal.backend.numpy.linalg.matmul"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.Variable": {
  "data": {
   "lineno": 39
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.array": {
  "data": {
   "symbols_in_volume": [
    "input",
    "len",
    "numpy.arange",
    "numpy.array",
    "numpy.concatenate",
    "numpy.expand_dims",
    "numpy.flip",
    "numpy.linspace",
    "numpy.ones",
    "numpy.reshape",
    "numpy.roll",
    "numpy.split",
    "numpy.squeeze",
    "numpy.stack",
    "numpy.tile",
    "numpy.where",
    "numpy.zeros",
    "tensorflow.compat.v1.where",
    "tensorflow.concat",
    "tensorflow.expand_dims",
    "tensorflow.fill",
    "tensorflow.float32",
    "tensorflow.linspace",
    "tensorflow.ones",
    "tensorflow.ones_like",
    "tensorflow.range",
    "tensorflow.rank",
    "tensorflow.reshape",
    "tensorflow.reverse",
    "tensorflow.roll",
    "tensorflow.shape",
    "tensorflow.size",
    "tensorflow.split",
    "tensorflow.squeeze",
    "tensorflow.stack",
    "tensorflow.tile",
    "tensorflow.transpose",
    "tensorflow.zeros",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.internal.backend.numpy.array._ones_like",
    "tensorflow_probability.python.internal.backend.numpy.array._shape",
    "tensorflow_probability.python.internal.backend.numpy.array._size",
    "tensorflow_probability.python.internal.backend.numpy.array._transpose",
    "tensorflow_probability.python.internal.backend.numpy.array._zeros_like",
    "tensorflow_probability.python.internal.backend.numpy.array.shape",
    "tensorflow_probability.python.internal.backend.numpy.internal.utils.copy_docstring",
    "tensorflow_probability.python.internal.backend.numpy.internal.utils.numpy_dtype"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.array._ones_like": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "_shape",
    "input",
    "input.dtype",
    "isinstance",
    "numpy.generic",
    "numpy.ndarray",
    "numpy.ones",
    "tensorflow.ones",
    "tensorflow_probability.python.internal.backend.numpy.internal.utils.numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.array._shape": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "input",
    "numpy.array",
    "tensorflow.int32",
    "tensorflow_probability.python.internal.backend.numpy.internal.utils.numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.array._size": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "input",
    "numpy.array",
    "numpy.prod",
    "tensorflow.int32",
    "tensorflow_probability.python.internal.backend.numpy.internal.utils.numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.array._transpose": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "numpy.conjugate",
    "numpy.transpose"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.array._zeros_like": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "input",
    "input.dtype",
    "isinstance",
    "numpy.generic",
    "numpy.ndarray",
    "numpy.zeros",
    "tensorflow.zeros",
    "tensorflow_probability.python.internal.backend.numpy.array._shape",
    "tensorflow_probability.python.internal.backend.numpy.internal.utils.numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.concat": {
  "data": {
   "lineno": 94
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.expand_dims": {
  "data": {
   "lineno": 98
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.fill": {
  "data": {
   "lineno": 102
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.linspace": {
  "data": {
   "lineno": 110
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.ones": {
  "data": {
   "lineno": 115
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.ones_like": {
  "data": {
   "lineno": 120
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.range": {
  "data": {
   "lineno": 124
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.rank": {
  "data": {
   "lineno": 129
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.reshape": {
  "data": {
   "lineno": 133
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.reverse": {
  "data": {
   "lineno": 106
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.roll": {
  "data": {
   "lineno": 137
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.shape": {
  "data": {
   "lineno": 141
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.size": {
  "data": {
   "lineno": 145
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.split": {
  "data": {
   "lineno": 149
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.squeeze": {
  "data": {
   "lineno": 154
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.stack": {
  "data": {
   "lineno": 158
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.tile": {
  "data": {
   "lineno": 162
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.transpose": {
  "data": {
   "lineno": 166
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.utils": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.internal.utils"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.where": {
  "data": {
   "lineno": 170
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.zeros": {
  "data": {
   "lineno": 174
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.array.zeros_like": {
  "data": {
   "lineno": 179
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.compat": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.compat"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.compat.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.compat._dimension_value": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.compat.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.compat.dimension_value": {
  "data": {
   "lineno": 44
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.compat.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.compat.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.compat.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.compat.utils": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.internal.utils"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.compat.v1": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.compat.v2": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.control_flow": {
  "data": {
   "symbols_in_volume": [
    "tensorflow.while_loop",
    "tensorflow_probability.python.internal.backend.numpy.control_flow._while_loop",
    "tensorflow_probability.python.internal.backend.numpy.internal.utils.copy_docstring"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.control_flow.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.control_flow._while_loop": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "body",
    "cond"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.control_flow.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.control_flow.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.control_flow.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.control_flow.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.control_flow.utils": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.internal.utils"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.control_flow.while_loop": {
  "data": {
   "lineno": 52
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype": {
  "data": {
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.complex",
    "numpy.complex128",
    "numpy.complex64",
    "numpy.double",
    "numpy.dtype",
    "numpy.float16",
    "numpy.float32",
    "numpy.float64",
    "numpy.half",
    "numpy.int16",
    "numpy.int32",
    "numpy.int64",
    "numpy.int8",
    "numpy.str",
    "numpy.uint16",
    "numpy.uint32",
    "numpy.uint64",
    "numpy.uint8",
    "tensorflow.as_dtype",
    "tensorflow_probability.python.internal.backend.numpy.internal.utils.copy_docstring"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype.as_dtype": {
  "data": {
   "lineno": 62
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype.bool": {
  "data": {
   "lineno": 66
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype.complex": {
  "data": {
   "lineno": 68
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype.complex128": {
  "data": {
   "lineno": 70
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype.complex64": {
  "data": {
   "lineno": 72
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype.double": {
  "data": {
   "lineno": 74
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype.float16": {
  "data": {
   "lineno": 76
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype.float32": {
  "data": {
   "lineno": 78
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype.float64": {
  "data": {
   "lineno": 80
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype.half": {
  "data": {
   "lineno": 82
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype.int16": {
  "data": {
   "lineno": 84
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype.int32": {
  "data": {
   "lineno": 86
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype.int64": {
  "data": {
   "lineno": 88
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype.int8": {
  "data": {
   "lineno": 90
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype.string": {
  "data": {
   "lineno": 92
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype.uint16": {
  "data": {
   "lineno": 94
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype.uint32": {
  "data": {
   "lineno": 96
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype.uint64": {
  "data": {
   "lineno": 98
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype.uint8": {
  "data": {
   "lineno": 100
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.dtype.utils": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.internal.utils"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.errors": {
  "data": {
   "symbols_in_volume": [
    "tensorflow",
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow.errors.UnimplementedError"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.errors.InvalidArgumentError": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.errors.UnimplementedError": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.errors.__all__": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.errors.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.errors.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.errors.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.errors.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.eye": {
  "data": {
   "lineno": 37
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.internal": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.internal.utils": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.internal.utils._FakeModule": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.backend.numpy.internal.utils.types"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.backend.numpy.internal.utils._FakeModule.__dir__": {
  "data": {
   "lineno": 85
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.internal.utils._FakeModule.__getattr__": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.internal.utils._FakeModule.__init__": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.backend.numpy.internal.utils.types"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.internal.utils.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.internal.utils.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.internal.utils.common_dtype": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "TypeError",
    "hasattr",
    "tensorflow.as_dtype",
    "tensorflow.nest.flatten"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.internal.utils.copy_docstring": {
  "data": {
   "lineno": 40
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.internal.utils.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.internal.utils.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.internal.utils.numpy_dtype": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.internal.utils.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.internal.utils.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.internal.utils.try_import": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "ImportError",
    "tensorflow_probability.python.internal.backend.numpy.internal.utils._FakeModule",
    "tensorflow_probability.python.internal.backend.numpy.internal.utils.importlib"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.internal.utils.types": {
  "data": {
   "shadows": "types"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.keras": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.keras"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.keras.__all__": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.keras.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.keras.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.keras.layers": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.keras_layers"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.keras.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.keras_layers": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.keras_layers.Layer": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.backend.numpy.keras_layers.__all__": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.keras_layers.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.keras_layers.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.keras_layers.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.linalg"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg.__all__": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg._eye": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "numpy.concatenate",
    "numpy.eye",
    "numpy.ones",
    "tensorflow.float32",
    "tensorflow_probability.python.internal.backend.numpy.internal.utils.numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg._fill_diagonal": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "input",
    "numpy.array",
    "numpy.fill_diagonal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg._matmul": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "NotImplementedError",
    "numpy.matmul",
    "tensorflow_probability.python.internal.backend.numpy.linalg._matrix_transpose"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg._matrix_transpose": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "ValueError",
    "numpy.arange",
    "numpy.array",
    "numpy.concatenate",
    "numpy.conjugate",
    "numpy.transpose"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg.band_part": {
  "data": {
   "lineno": 114
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg.cholesky": {
  "data": {
   "lineno": 119
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg.cholesky_solve": {
  "data": {
   "lineno": 123
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg.diag": {
  "data": {
   "lineno": 127
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg.diag_part": {
  "data": {
   "lineno": 131
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg.eye": {
  "data": {
   "lineno": 135
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg.matmul": {
  "data": {
   "lineno": 139
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg.matrix_transpose": {
  "data": {
   "lineno": 147
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg.scipy_linalg": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg.set_diag": {
  "data": {
   "lineno": 143
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg.triangular_solve": {
  "data": {
   "lineno": 151
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.linalg.utils": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.internal.utils"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.math": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.math"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.__all__": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math._astuple": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "TypeError",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.math._bincount": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "numpy.bincount",
    "tensorflow.int32",
    "tensorflow_probability.python.internal.backend.numpy.internal.utils.numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.math._lbeta": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.python.internal.backend.numpy.math.scipy_special"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.math._max_mask_non_finite": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "numpy.isfinite",
    "numpy.max",
    "tensorflow_probability.python.internal.backend.numpy.math._astuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.math._reduce_logsumexp": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "NotImplementedError",
    "numpy.exp",
    "numpy.log",
    "numpy.sum",
    "tensorflow_probability.python.internal.backend.numpy.math._astuple",
    "tensorflow_probability.python.internal.backend.numpy.math._max_mask_non_finite",
    "tensorflow_probability.python.internal.backend.numpy.math.scipy_special"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.math._softmax": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.sum",
    "tensorflow_probability.python.internal.backend.numpy.math._astuple",
    "tensorflow_probability.python.internal.backend.numpy.math._max_mask_non_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.abs": {
  "data": {
   "lineno": 208
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.accumulate_n": {
  "data": {
   "lineno": 212
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.acos": {
  "data": {
   "lineno": 217
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.acosh": {
  "data": {
   "lineno": 221
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.add": {
  "data": {
   "lineno": 225
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.add_n": {
  "data": {
   "lineno": 229
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.angle": {
  "data": {
   "lineno": 233
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.argmax": {
  "data": {
   "lineno": 237
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.argmin": {
  "data": {
   "lineno": 243
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.asin": {
  "data": {
   "lineno": 249
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.asinh": {
  "data": {
   "lineno": 253
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.atan": {
  "data": {
   "lineno": 257
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.atan2": {
  "data": {
   "lineno": 261
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.atanh": {
  "data": {
   "lineno": 265
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.bessel_i0": {
  "data": {
   "lineno": 269
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.bessel_i0e": {
  "data": {
   "lineno": 273
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.bessel_i1": {
  "data": {
   "lineno": 277
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.bessel_i1e": {
  "data": {
   "lineno": 281
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.betainc": {
  "data": {
   "lineno": 285
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.bincount": {
  "data": {
   "lineno": 289
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.ceil": {
  "data": {
   "lineno": 293
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.conj": {
  "data": {
   "lineno": 302
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.cos": {
  "data": {
   "lineno": 306
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.cosh": {
  "data": {
   "lineno": 310
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.count_nonzero": {
  "data": {
   "lineno": 314
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.cumprod": {
  "data": {
   "lineno": 319
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.cumsum": {
  "data": {
   "lineno": 324
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.digamma": {
  "data": {
   "lineno": 329
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.divide": {
  "data": {
   "lineno": 333
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.divide_no_nan": {
  "data": {
   "lineno": 337
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.equal": {
  "data": {
   "lineno": 344
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.erf": {
  "data": {
   "lineno": 348
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.erfc": {
  "data": {
   "lineno": 352
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.exp": {
  "data": {
   "lineno": 356
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.expm1": {
  "data": {
   "lineno": 360
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.floor": {
  "data": {
   "lineno": 364
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.floordiv": {
  "data": {
   "lineno": 368
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.greater": {
  "data": {
   "lineno": 372
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.greater_equal": {
  "data": {
   "lineno": 376
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.igamma": {
  "data": {
   "lineno": 380
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.igammac": {
  "data": {
   "lineno": 384
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.imag": {
  "data": {
   "lineno": 388
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.is_finite": {
  "data": {
   "lineno": 400
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.is_inf": {
  "data": {
   "lineno": 404
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.is_nan": {
  "data": {
   "lineno": 408
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.lbeta": {
  "data": {
   "lineno": 424
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.less": {
  "data": {
   "lineno": 428
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.less_equal": {
  "data": {
   "lineno": 432
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.lgamma": {
  "data": {
   "lineno": 436
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.log": {
  "data": {
   "lineno": 440
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.log1p": {
  "data": {
   "lineno": 444
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.log_sigmoid": {
  "data": {
   "lineno": 448
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.log_softmax": {
  "data": {
   "lineno": 452
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.logical_and": {
  "data": {
   "lineno": 458
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.logical_not": {
  "data": {
   "lineno": 462
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.logical_or": {
  "data": {
   "lineno": 466
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.logical_xor": {
  "data": {
   "lineno": 470
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.maximum": {
  "data": {
   "lineno": 474
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.minimum": {
  "data": {
   "lineno": 478
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.multiply": {
  "data": {
   "lineno": 482
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.multiply_no_nan": {
  "data": {
   "lineno": 486
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.negative": {
  "data": {
   "lineno": 493
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.not_equal": {
  "data": {
   "lineno": 501
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.polygamma": {
  "data": {
   "lineno": 505
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.polyval": {
  "data": {
   "lineno": 509
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.pow": {
  "data": {
   "lineno": 513
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.real": {
  "data": {
   "lineno": 517
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.reciprocal": {
  "data": {
   "lineno": 521
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.reduce_all": {
  "data": {
   "lineno": 525
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.reduce_any": {
  "data": {
   "lineno": 530
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.reduce_logsumexp": {
  "data": {
   "lineno": 540
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.reduce_max": {
  "data": {
   "lineno": 544
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.reduce_mean": {
  "data": {
   "lineno": 549
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.reduce_min": {
  "data": {
   "lineno": 554
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.reduce_prod": {
  "data": {
   "lineno": 559
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.reduce_std": {
  "data": {
   "lineno": 564
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.reduce_sum": {
  "data": {
   "lineno": 569
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.reduce_variance": {
  "data": {
   "lineno": 574
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.rint": {
  "data": {
   "lineno": 579
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.round": {
  "data": {
   "lineno": 583
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.rsqrt": {
  "data": {
   "lineno": 587
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.scipy_special": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.sigmoid": {
  "data": {
   "lineno": 615
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.sign": {
  "data": {
   "lineno": 619
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.sin": {
  "data": {
   "lineno": 623
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.sinh": {
  "data": {
   "lineno": 627
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.softmax": {
  "data": {
   "lineno": 631
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.softplus": {
  "data": {
   "lineno": 635
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.softsign": {
  "data": {
   "lineno": 639
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.sqrt": {
  "data": {
   "lineno": 643
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.square": {
  "data": {
   "lineno": 647
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.squared_difference": {
  "data": {
   "lineno": 651
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.subtract": {
  "data": {
   "lineno": 655
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.tan": {
  "data": {
   "lineno": 659
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.tanh": {
  "data": {
   "lineno": 663
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.truediv": {
  "data": {
   "lineno": 671
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.utils": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.internal.utils"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.xdivy": {
  "data": {
   "lineno": 705
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.xlogy": {
  "data": {
   "lineno": 712
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.math.zeta": {
  "data": {
   "lineno": 723
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.matmul": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.misc": {
  "data": {
   "symbols_in_volume": [
    "tensorflow.argsort",
    "tensorflow.sort",
    "tensorflow_probability.python.internal.backend.numpy.internal.utils.copy_docstring",
    "tensorflow_probability.python.internal.backend.numpy.misc._argsort",
    "tensorflow_probability.python.internal.backend.numpy.misc._sort"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.misc.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.misc._argsort": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "ValueError",
    "numpy.argsort",
    "numpy.negative"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.misc._sort": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "ValueError",
    "numpy.negative",
    "numpy.sort"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.misc.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.misc.argsort": {
  "data": {
   "lineno": 76
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.misc.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.misc.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.misc.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.misc.sort": {
  "data": {
   "lineno": 80
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.misc.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.misc.utils": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.internal.utils"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.nest": {
  "data": {
   "shadows": "tensorflow.python.util.nest"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.nn": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.nn"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.nn.__all__": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.nn.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.nn.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.nn.log_softmax": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.math.log_softmax"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.nn.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.nn.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.nn.relu": {
  "data": {
   "lineno": 44
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.nn.softmax": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.math.softmax"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.nn.softplus": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.math.softplus"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.nn.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.nn.utils": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.internal.utils"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "float",
    "hypothesis.strategies.booleans",
    "hypothesis.strategies.integers",
    "hypothesis.strategies.tuples",
    "numpy.bool",
    "numpy.complex",
    "numpy.linalg.cholesky",
    "tensorflow.test.main",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.TestCase",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.array_and_axis",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.complex_numbers",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.floats",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.functools",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.matmul_compatible_pair",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.n_same_shape",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.non_zero_floats",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.positive_floats",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.psd_matrix",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.single_array"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.ALLOW_INFINITY": {
  "data": {
   "lineno": 39
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.ALLOW_NAN": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.NUMPY_TEST_CASES": {
  "data": {
   "lineno": 181
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.NumpyTest": {
  "data": {
   "lineno": 425,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.NumpyTest.testConsistency": {
  "data": {
   "lineno": 434,
   "symbols_in_volume": [
    "absl.testing.parameterized.named_parameters",
    "check_consistency",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.NUMPY_TEST_CASES"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.NumpyTest.testConsistency.check_consistency": {
  "data": {
   "lineno": 438,
   "symbols_in_volume": [
    "hypothesis.given",
    "hypothesis.settings",
    "isinstance",
    "np_fn",
    "numpy.ndarray",
    "tensorflow.is_tensor",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test._maybe_convert_to_tensors",
    "tf_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.NumpyTest.testLogEmptyTestCases": {
  "data": {
   "lineno": 427,
   "symbols_in_volume": [
    "absl.testing.parameterized.named_parameters",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.NUMPY_TEST_CASES",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.logging"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.TestCase": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.TestCase.__init__": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "super",
    "tensorflow",
    "tensorflow_probability.python.internal.backend.numpy",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.TestCase",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test._getattr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.TestCase.__repr__": {
  "data": {
   "lineno": 58
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test._getattr": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "getattr",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.functools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test._maybe_convert_to_tensors": {
  "data": {
   "lineno": 418,
   "symbols_in_volume": [
    "isinstance",
    "numpy.ndarray",
    "tensorflow.convert_to_tensor",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.array_and_axis": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "draw",
    "hypothesis.strategies.composite",
    "hypothesis.strategies.integers",
    "len",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.single_array"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.array_and_diagonal": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "draw",
    "hypothesis.extra.numpy.array_shapes",
    "hypothesis.extra.numpy.arrays",
    "hypothesis.strategies.composite",
    "hypothesis.strategies.integers",
    "numpy.float",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.floats"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.complex_numbers": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "hypothesis.strategies.complex_numbers",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.ALLOW_INFINITY",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.ALLOW_NAN"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.floats": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "hypothesis.strategies.floats",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.ALLOW_INFINITY",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.ALLOW_NAN"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.hnp": {
  "data": {
   "shadows": "hypothesis.extra.numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.hp": {
  "data": {
   "shadows": "hypothesis"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.hps": {
  "data": {
   "shadows": "hypothesis.strategies"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.logging": {
  "data": {
   "shadows": "logging"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.matmul_compatible_pair": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "draw",
    "hypothesis.extra.numpy.arrays",
    "hypothesis.strategies.composite",
    "hypothesis.strategies.integers",
    "numpy.float",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.floats",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.single_array"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.n_same_shape": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "draw",
    "hypothesis.extra.numpy.array_shapes",
    "hypothesis.extra.numpy.arrays",
    "hypothesis.strategies.composite",
    "isinstance",
    "list",
    "numpy.float",
    "range",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.floats",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.non_zero_floats": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "draw",
    "hypothesis.strategies.composite",
    "numpy.all",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.floats"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.numpy_backend": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.positive_floats": {
  "data": {
   "lineno": 86
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.psd_matrix": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "draw",
    "hypothesis.strategies.composite",
    "numpy.eye",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.floats",
    "tensorflow_probability.python.internal.backend.numpy.numpy_test.single_array"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.single_array": {
  "data": {
   "lineno": 112
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.test_case": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_case"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.numpy_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops": {
  "data": {
   "symbols_in_volume": [
    "input",
    "isinstance",
    "numpy.array",
    "numpy.broadcast_to",
    "numpy.generic",
    "numpy.ndarray",
    "numpy.newaxis",
    "tensorflow.TensorShape",
    "tensorflow.broadcast_dynamic_shape",
    "tensorflow.broadcast_static_shape",
    "tensorflow.broadcast_to",
    "tensorflow.cast",
    "tensorflow.constant",
    "tensorflow.control_dependencies",
    "tensorflow.convert_to_tensor",
    "tensorflow.custom_gradient",
    "tensorflow.executing_eagerly",
    "tensorflow.get_static_value",
    "tensorflow.group",
    "tensorflow.identity",
    "tensorflow.is_tensor",
    "tensorflow.stop_gradient",
    "tensorflow_probability.python.internal.backend.numpy.internal.utils.copy_docstring",
    "tensorflow_probability.python.internal.backend.numpy.internal.utils.numpy_dtype",
    "tensorflow_probability.python.internal.backend.numpy.ops._broadcast_static_shape",
    "tensorflow_probability.python.internal.backend.numpy.ops._constant",
    "tensorflow_probability.python.internal.backend.numpy.ops._control_dependencies",
    "tensorflow_probability.python.internal.backend.numpy.ops._convert_to_tensor"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.GradientTape": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.GradientTape.__enter__": {
  "data": {
   "lineno": 101
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.GradientTape.__exit__": {
  "data": {
   "lineno": 104
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.GradientTape.__init__": {
  "data": {
   "lineno": 98
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.GradientTape.gradient": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "tensorflow.python.ops.unconnected_gradients.UnconnectedGradients.NONE"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.GradientTape.watch": {
  "data": {
   "lineno": 107
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.TensorShape": {
  "data": {
   "lineno": 215
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.UnconnectedGradients": {
  "data": {
   "shadows": "tensorflow.python.ops.unconnected_gradients.UnconnectedGradients"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.Variable": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops._NullContext": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops._NullContext.__enter__": {
  "data": {
   "lineno": 58
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops._NullContext.__exit__": {
  "data": {
   "lineno": 61
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops._NullContext.__init__": {
  "data": {
   "lineno": 55
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops._broadcast_static_shape": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.int32",
    "tensorflow.TensorShape",
    "tensorflow.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops._constant": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float",
    "numpy.reshape",
    "tensorflow_probability.python.internal.backend.numpy.internal.utils.numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops._control_dependencies": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "callable",
    "control",
    "tensorflow_probability.python.internal.backend.numpy.ops._NullContext"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops._convert_to_tensor": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.is_tensor",
    "tensorflow_probability.python.internal.backend.numpy.internal.utils.numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.broadcast_dynamic_shape": {
  "data": {
   "lineno": 115
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.broadcast_static_shape": {
  "data": {
   "lineno": 119
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.broadcast_to": {
  "data": {
   "lineno": 123
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.cast": {
  "data": {
   "lineno": 127
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.constant": {
  "data": {
   "lineno": 131
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.control_dependencies": {
  "data": {
   "lineno": 135
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.convert_to_tensor": {
  "data": {
   "lineno": 139
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.custom_gradient": {
  "data": {
   "lineno": 143
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.executing_eagerly": {
  "data": {
   "lineno": 147
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.get_static_value": {
  "data": {
   "lineno": 151
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.group": {
  "data": {
   "lineno": 155
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.identity": {
  "data": {
   "lineno": 159
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.is_tensor": {
  "data": {
   "lineno": 163
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.name_scope": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.name_scope.__enter__": {
  "data": {
   "lineno": 202
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.name_scope.__exit__": {
  "data": {
   "lineno": 205
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.name_scope.__init__": {
  "data": {
   "lineno": 198
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.name_scope.name": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.newaxis": {
  "data": {
   "lineno": 209
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.stop_gradient": {
  "data": {
   "lineno": 211
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.ops.utils": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.internal.utils"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.random": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.random_generators"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators": {
  "data": {
   "symbols_in_volume": [
    "tensorflow.random.categorical",
    "tensorflow.random.gamma",
    "tensorflow.random.normal",
    "tensorflow.random.poisson",
    "tensorflow.random.uniform",
    "tensorflow_probability.python.internal.backend.numpy.internal.utils.copy_docstring",
    "tensorflow_probability.python.internal.backend.numpy.random_generators._categorical",
    "tensorflow_probability.python.internal.backend.numpy.random_generators._gamma",
    "tensorflow_probability.python.internal.backend.numpy.random_generators._normal",
    "tensorflow_probability.python.internal.backend.numpy.random_generators._poisson",
    "tensorflow_probability.python.internal.backend.numpy.random_generators._uniform"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators.__all__": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators._categorical": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "hasattr",
    "numpy.array",
    "numpy.float32",
    "numpy.int64",
    "numpy.random",
    "numpy.random.RandomState",
    "tensorflow_probability.python.internal.backend.numpy.internal.utils.numpy_dtype",
    "tensorflow_probability.python.internal.backend.numpy.math.softmax"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators._gamma": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "numpy.random",
    "numpy.random.RandomState",
    "tensorflow.float32",
    "tensorflow_probability.python.internal.backend.numpy.internal.utils.common_dtype",
    "tensorflow_probability.python.internal.backend.numpy.random_generators._shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators._normal": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "numpy.random",
    "numpy.random.RandomState",
    "tensorflow.float32",
    "tensorflow_probability.python.internal.backend.numpy.internal.utils.common_dtype",
    "tensorflow_probability.python.internal.backend.numpy.random_generators._shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators._poisson": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "numpy.random",
    "numpy.random.RandomState",
    "tensorflow.float32",
    "tensorflow_probability.python.internal.backend.numpy.internal.utils.common_dtype",
    "tensorflow_probability.python.internal.backend.numpy.random_generators._shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators._shape": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "TypeError",
    "len",
    "numpy.array",
    "numpy.broadcast",
    "tensorflow_probability.python.internal.backend.numpy.random_generators.functools",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators._softmax": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.math.softmax"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators._uniform": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "numpy.random",
    "numpy.random.RandomState",
    "tensorflow.float32",
    "tensorflow_probability.python.internal.backend.numpy.internal.utils.common_dtype",
    "tensorflow_probability.python.internal.backend.numpy.random_generators._shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators.categorical": {
  "data": {
   "lineno": 112
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators.gamma": {
  "data": {
   "lineno": 116
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators.normal": {
  "data": {
   "lineno": 120
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators.poisson": {
  "data": {
   "lineno": 124
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators.uniform": {
  "data": {
   "lineno": 128
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.random_generators.utils": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.internal.utils"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.test": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.test"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.test.TestCase": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.backend.numpy.test.TestCase._GetNdArray": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "isinstance",
    "numpy.array",
    "numpy.generic",
    "numpy.ndarray"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.test.TestCase.assertRaisesWithPredicateMatch": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "super",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.internal.backend.numpy.test.TestCase",
    "tensorflow_probability.python.internal.backend.numpy.test.contextlib"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.test.TestCase.evaluate": {
  "data": {
   "lineno": 39
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.test.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.test.contextlib": {
  "data": {
   "shadows": "contextlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.test.main": {
  "data": {
   "lineno": 79
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1": {
  "data": {
   "symbols_in_volume": [
    "numpy.random.seed",
    "tensorflow",
    "tensorflow.compat.v1.assert_equal",
    "tensorflow.compat.v1.assert_greater",
    "tensorflow.compat.v1.assert_greater_equal",
    "tensorflow.compat.v1.assert_integer",
    "tensorflow.compat.v1.assert_less",
    "tensorflow.compat.v1.assert_less_equal",
    "tensorflow.compat.v1.assert_near",
    "tensorflow.compat.v1.assert_non_negative",
    "tensorflow.compat.v1.assert_non_positive",
    "tensorflow.compat.v1.assert_none_equal",
    "tensorflow.compat.v1.assert_positive",
    "tensorflow.compat.v1.assert_rank",
    "tensorflow.compat.v1.assert_rank_at_least",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow_probability.python.internal.backend.numpy.internal.utils.copy_docstring",
    "tensorflow_probability.python.internal.backend.numpy.v1._placeholder_with_default"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.__all__": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1._placeholder_with_default": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "any",
    "input",
    "numpy.array",
    "numpy.reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.assert_equal": {
  "data": {
   "lineno": 62
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.assert_greater": {
  "data": {
   "lineno": 63
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.assert_greater_equal": {
  "data": {
   "lineno": 67
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.assert_integer": {
  "data": {
   "lineno": 68
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.assert_less": {
  "data": {
   "lineno": 64
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.assert_less_equal": {
  "data": {
   "lineno": 69
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.assert_near": {
  "data": {
   "lineno": 70
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.assert_non_negative": {
  "data": {
   "lineno": 71
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.assert_non_positive": {
  "data": {
   "lineno": 72
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.assert_none_equal": {
  "data": {
   "lineno": 73
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.assert_positive": {
  "data": {
   "lineno": 75
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.assert_rank": {
  "data": {
   "lineno": 65
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.assert_rank_at_least": {
  "data": {
   "lineno": 76
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.global_variables_initializer": {
  "data": {
   "lineno": 82
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.name_scope": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.ops.name_scope"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.placeholder_with_default": {
  "data": {
   "lineno": 78
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.set_random_seed": {
  "data": {
   "lineno": 86
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.v1.utils": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.internal.utils"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.v2": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.internal.backend.numpy.v2.Variable": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.ops.Variable"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.v2.__all__": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.backend.numpy.v2.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.v2.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.v2.name_scope": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.backend.numpy.ops.name_scope"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.backend.numpy.v2.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.internal.distribution_util.AppendDocstring": {
  "data": {
   "lineno": 2042,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util.AppendDocstring.__call__": {
  "data": {
   "lineno": 2090
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.AppendDocstring.__call__._fn": {
  "data": {
   "lineno": 2092,
   "symbols_in_volume": [
    "fn",
    "tensorflow_probability.python.internal.distribution_util.functools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.AppendDocstring.__init__": {
  "data": {
   "lineno": 2063,
   "symbols_in_volume": [
    "ValueError",
    "any",
    "sorted"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util._convert_to_tensor": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tensorflow.compat.v2.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util._is_integer_like_by_dtype": {
  "data": {
   "lineno": 899,
   "symbols_in_volume": [
    "TypeError",
    "tensorflow.compat.v2.bool",
    "tensorflow_probability.python.internal.distribution_util._is_known_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util._is_known_dtype": {
  "data": {
   "lineno": 871,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util._is_known_signed_by_dtype",
    "tensorflow_probability.python.internal.distribution_util._is_known_unsigned_by_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util._is_known_signed_by_dtype": {
  "data": {
   "lineno": 858,
   "symbols_in_volume": [
    "tensorflow.compat.v2.float16.get",
    "tensorflow.compat.v2.float32.get",
    "tensorflow.compat.v2.float64.get",
    "tensorflow.compat.v2.int16.get",
    "tensorflow.compat.v2.int32.get",
    "tensorflow.compat.v2.int64.get",
    "tensorflow.compat.v2.int8.get"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util._is_known_unsigned_by_dtype": {
  "data": {
   "lineno": 849,
   "symbols_in_volume": [
    "tensorflow.compat.v2.bool.get",
    "tensorflow.compat.v2.uint16.get",
    "tensorflow.compat.v2.uint8.get"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util._largest_integer_by_dtype": {
  "data": {
   "lineno": 876,
   "symbols_in_volume": [
    "TypeError",
    "int",
    "numpy.finfo",
    "numpy.iinfo",
    "tensorflow.compat.v2.bool",
    "tensorflow_probability.python.internal.distribution_util._is_known_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util._smallest_integer_by_dtype": {
  "data": {
   "lineno": 890,
   "symbols_in_volume": [
    "TypeError",
    "tensorflow_probability.python.internal.distribution_util._is_known_dtype",
    "tensorflow_probability.python.internal.distribution_util._is_known_unsigned_by_dtype",
    "tensorflow_probability.python.internal.distribution_util._largest_integer_by_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util.assert_integer_form": {
  "data": {
   "lineno": 643,
   "symbols_in_volume": [
    "KeyError",
    "TypeError",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float16",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.float64",
    "tensorflow.compat.v2.int16",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.int64",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.no_op",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.dtype_util.base_dtype",
    "tensorflow_probability.python.internal.dtype_util.is_integer",
    "tensorflow_probability.python.internal.dtype_util.name"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.assert_symmetric": {
  "data": {
   "lineno": 687,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.matrix_transpose",
    "tensorflow_probability.python.internal.assert_util.assert_near",
    "with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.assert_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.assert_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util.dimension_size": {
  "data": {
   "lineno": 1853,
   "symbols_in_volume": [
    "numpy.abs",
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util.embed_check_categorical_event_shape": {
  "data": {
   "lineno": 906,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int64",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.assert_util.assert_greater_equal",
    "tensorflow_probability.python.internal.assert_util.assert_less_equal",
    "tensorflow_probability.python.internal.assert_util.assert_rank_at_least",
    "tensorflow_probability.python.internal.distribution_util._largest_integer_by_dtype",
    "tensorflow_probability.python.internal.dtype_util.base_dtype",
    "tensorflow_probability.python.internal.dtype_util.is_floating",
    "tensorflow_probability.python.internal.dtype_util.name",
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least",
    "with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.embed_check_integer_casting_closed": {
  "data": {
   "lineno": 1003,
   "symbols_in_volume": [
    "TypeError",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.internal.assert_util.assert_greater_equal",
    "tensorflow_probability.python.internal.assert_util.assert_less_equal",
    "tensorflow_probability.python.internal.assert_util.assert_non_negative",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "tensorflow_probability.python.internal.distribution_util._is_integer_like_by_dtype",
    "tensorflow_probability.python.internal.distribution_util._largest_integer_by_dtype",
    "tensorflow_probability.python.internal.distribution_util._smallest_integer_by_dtype",
    "tensorflow_probability.python.internal.distribution_util.assert_integer_form",
    "tensorflow_probability.python.internal.dtype_util.is_floating",
    "tensorflow_probability.python.internal.dtype_util.name",
    "with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.embed_check_nonnegative_integer_form": {
  "data": {
   "lineno": 693,
   "symbols_in_volume": [
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.internal.assert_util.assert_non_negative",
    "tensorflow_probability.python.internal.distribution_util.assert_integer_form",
    "tensorflow_probability.python.internal.dtype_util.is_integer",
    "with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.expand_to_vector": {
  "data": {
   "lineno": 2103,
   "symbols_in_volume": [
    "ValueError",
    "numpy.array",
    "numpy.int32",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.equal",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.rank",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.assert_util.assert_rank_at_most",
    "tensorflow_probability.python.internal.distribution_util.pick_vector",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.fill_triangular": {
  "data": {
   "lineno": 1415,
   "symbols_in_volume": [
    "ValueError",
    "numpy.floor",
    "numpy.int32",
    "numpy.sqrt",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.linalg.band_part",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.reverse",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.sqrt",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_rank",
    "tensorflow_probability.python.internal.tensorshape_util.as_list",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape",
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.fill_triangular_inverse": {
  "data": {
   "lineno": 1564,
   "symbols_in_volume": [
    "numpy.int32",
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.reverse",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_rank",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape",
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util.gen_new_seed": {
  "data": {
   "lineno": 1407,
   "symbols_in_volume": [
    "int",
    "str",
    "tensorflow_probability.python.internal.distribution_util.hashlib"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.get_broadcast_shape": {
  "data": {
   "lineno": 355,
   "symbols_in_volume": [
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.broadcast_static_shape",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.tensorshape_util.as_list",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs": {
  "data": {
   "lineno": 766,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "embed_check_categorical_event_shape",
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.math.log1p",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.nn.softmax",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow.compat.v2.sigmoid",
    "tensorflow_probability.python.internal.assert_util.assert_less_equal",
    "tensorflow_probability.python.internal.assert_util.assert_near",
    "tensorflow_probability.python.internal.assert_util.assert_non_negative",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.dtype_util.is_floating",
    "with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.hashlib": {
  "data": {
   "shadows": "hashlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util.is_diagonal_scale": {
  "data": {
   "lineno": 379,
   "symbols_in_volume": [
    "TypeError",
    "isinstance",
    "tensorflow.compat.v2.linalg.LinearOperator",
    "tensorflow.compat.v2.linalg.LinearOperatorDiag",
    "tensorflow.compat.v2.linalg.LinearOperatorIdentity",
    "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.is_distribution_instance": {
  "data": {
   "lineno": 2198,
   "symbols_in_volume": [
    "hasattr",
    "tensorflow.python.util.tf_inspect.isclass"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.log_combinations": {
  "data": {
   "lineno": 1102,
   "symbols_in_volume": [
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.math.lgamma",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.make_diag_scale": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "ValueError",
    "_maybe_attach_assertion",
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.linalg.LinearOperatorDiag",
    "tensorflow.compat.v2.linalg.LinearOperatorIdentity",
    "tensorflow.compat.v2.linalg.LinearOperatorScaledIdentity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.distribution_util._convert_to_tensor",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.make_diag_scale._maybe_attach_assertion": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.internal.assert_util.assert_none_equal",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.make_non_negative_axis": {
  "data": {
   "lineno": 546,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.get_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.make_tril_scale": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "_maybe_attach_assertion",
    "make_diag_scale",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.linalg.LinearOperatorLowerTriangular",
    "tensorflow.compat.v2.linalg.band_part",
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.linalg.set_diag",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.newaxis",
    "tensorflow_probability.python.internal.distribution_util._convert_to_tensor",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.make_tril_scale._maybe_attach_assertion": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.internal.assert_util.assert_none_equal",
    "tensorflow_probability.python.internal.assert_util.assert_positive",
    "with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.matrix_diag_transform": {
  "data": {
   "lineno": 1137,
   "symbols_in_volume": [
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.linalg.diag_part",
    "tensorflow.compat.v2.linalg.set_diag",
    "tensorflow.compat.v2.name_scope",
    "transform"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.maybe_check_scalar_distribution": {
  "data": {
   "lineno": 399,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "check_is_scalar",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.internal.dtype_util.name",
    "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.maybe_check_scalar_distribution.check_is_scalar": {
  "data": {
   "lineno": 447,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow_probability.python.internal.assert_util.assert_equal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.maybe_get_static_value": {
  "data": {
   "lineno": 741,
   "symbols_in_volume": [
    "TypeError",
    "numpy.array",
    "tensorflow.compat.v2.get_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.mixture_stddev": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.compat.v2.expand_dims",
    "tensorflow.compat.v2.matmul",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.sqrt",
    "tensorflow.compat.v2.square",
    "tensorflow_probability.python.internal.tensorshape_util.assert_has_rank",
    "tensorflow_probability.python.internal.tensorshape_util.is_compatible_with"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.move_dimension": {
  "data": {
   "lineno": 573,
   "symbols_in_volume": [
    "prefer_static_rank",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.equal",
    "tensorflow.compat.v2.int32",
    "tensorflow_probability.python.internal.distribution_util.pick_scalar_condition",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.prefer_static.cond"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.move_dimension.move_left_permutation": {
  "data": {
   "lineno": 612,
   "symbols_in_volume": [
    "prefer_static_value",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.range"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.move_dimension.move_right_permutation": {
  "data": {
   "lineno": 621,
   "symbols_in_volume": [
    "prefer_static_value",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.range"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.move_dimension.x_permuted": {
  "data": {
   "lineno": 630,
   "symbols_in_volume": [
    "tensorflow.compat.v2.transpose",
    "tensorflow_probability.python.internal.prefer_static.cond"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util.pad": {
  "data": {
   "lineno": 1932,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.TensorShape",
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.one_hot",
    "tensorflow.compat.v2.pad",
    "tensorflow.compat.v2.rank",
    "tensorflow.compat.v2.stack",
    "tensorflow_probability.python.internal.dtype_util.is_integer",
    "tensorflow_probability.python.internal.dtype_util.name",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.pad_mixture_dimensions": {
  "data": {
   "lineno": 466,
   "symbols_in_volume": [
    "_get_ndims",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.pad_mixture_dimensions._get_ndims": {
  "data": {
   "lineno": 485,
   "symbols_in_volume": [
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.parent_frame_arguments": {
  "data": {
   "lineno": 2005,
   "symbols_in_volume": [
    "tensorflow.python.util.tf_inspect._inspect.getargvalues",
    "tensorflow.python.util.tf_inspect._inspect.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.pick_scalar_condition": {
  "data": {
   "lineno": 507,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.bool",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow.compat.v2.name_scope"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.pick_vector": {
  "data": {
   "lineno": 1274,
   "symbols_in_volume": [
    "TypeError",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.bool",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.slice"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.prefer_static": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.prefer_static"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util.prefer_static_broadcast_shape": {
  "data": {
   "lineno": 1323,
   "symbols_in_volume": [
    "get_shape_tensor",
    "get_tensor_shape",
    "tensorflow.compat.v2.broadcast_dynamic_shape",
    "tensorflow.compat.v2.broadcast_static_shape",
    "tensorflow.compat.v2.name_scope"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.prefer_static_broadcast_shape.get_shape_tensor": {
  "data": {
   "lineno": 1350,
   "symbols_in_volume": [
    "ValueError",
    "isinstance",
    "make_shape_tensor",
    "tensorflow.compat.v2.TensorShape",
    "tensorflow_probability.python.internal.tensorshape_util.as_list",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.prefer_static_broadcast_shape.get_tensor_shape": {
  "data": {
   "lineno": 1342,
   "symbols_in_volume": [
    "isinstance",
    "make_shape_tensor",
    "tensorflow.compat.v2.TensorShape",
    "tensorflow.compat.v2.get_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.prefer_static_broadcast_shape.make_shape_tensor": {
  "data": {
   "lineno": 1339,
   "symbols_in_volume": [
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.prefer_static_rank": {
  "data": {
   "lineno": 1368,
   "symbols_in_volume": [
    "prefer_static_value",
    "tensorflow.compat.v2.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.prefer_static_shape": {
  "data": {
   "lineno": 1380,
   "symbols_in_volume": [
    "prefer_static_value",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.prefer_static_value": {
  "data": {
   "lineno": 1392,
   "symbols_in_volume": [
    "tensorflow.compat.v2.get_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util.process_quadrature_grid_and_probs": {
  "data": {
   "lineno": 1864,
   "symbols_in_volume": [
    "ValueError",
    "_static_event_size",
    "numpy.linalg.norm",
    "numpy.polynomial.hermite.hermgauss",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.norm",
    "tensorflow_probability.python.internal.assert_util.assert_equal",
    "tensorflow_probability.python.internal.distribution_util.dimension_size",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.process_quadrature_grid_and_probs._static_event_size": {
  "data": {
   "lineno": 1907,
   "symbols_in_volume": [
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.reduce_weighted_logsumexp": {
  "data": {
   "lineno": 1701,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.math.is_inf",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.reduce_logsumexp",
    "tensorflow.compat.v2.reduce_max",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow.compat.v2.sign",
    "tensorflow.compat.v2.squeeze",
    "tensorflow.compat.v2.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.reparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.reparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util.rotate_transpose": {
  "data": {
   "lineno": 1199,
   "symbols_in_volume": [
    "abs",
    "numpy.arange",
    "numpy.roll",
    "numpy.sign",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow.compat.v2.less",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.rank",
    "tensorflow.compat.v2.transpose",
    "tensorflow_probability.python.internal.assert_util.assert_integer",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.same_dynamic_shape": {
  "data": {
   "lineno": 711,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cond",
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.equal",
    "tensorflow.compat.v2.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.same_dynamic_shape.all_shapes_equal": {
  "data": {
   "lineno": 727,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.equal",
    "tensorflow.compat.v2.reduce_all",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": [
    "ValueError",
    "numpy.reshape",
    "prefer_static_broadcast_shape",
    "tensorflow.compat.v2.compat.dimension_value",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.softplus_inverse": {
  "data": {
   "lineno": 1799,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.finfo",
    "numpy.log",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.greater",
    "tensorflow.compat.v2.less",
    "tensorflow.compat.v2.logical_or",
    "tensorflow.compat.v2.math.expm1",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.ones_like",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util.tf_inspect": {
  "data": {
   "shadows": "tensorflow.python.util.tf_inspect"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util.tridiag": {
  "data": {
   "lineno": 1633,
   "symbols_in_volume": [
    "_add",
    "_pad",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.linalg.diag",
    "tensorflow.compat.v2.name_scope"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.tridiag._add": {
  "data": {
   "lineno": 1672,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.tridiag._pad": {
  "data": {
   "lineno": 1666,
   "symbols_in_volume": [
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util.with_dependencies": {
  "data": {
   "lineno": 2162,
   "symbols_in_volume": [
    "isinstance",
    "tensorflow.compat.v2.IndexedSlices",
    "tensorflow.compat.v2.Tensor",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.executing_eagerly",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.name_scope"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.python.internal.distribution_util_test.try_import"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest": {
  "data": {
   "lineno": 1688,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest.testKeywordArguments": {
  "data": {
   "lineno": 1720,
   "symbols_in_volume": [
    "foo"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest.testKeywordArguments.foo": {
  "data": {
   "lineno": 1721,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.parent_frame_arguments"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest.testNoArguments": {
  "data": {
   "lineno": 1691,
   "symbols_in_volume": [
    "foo"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest.testNoArguments.foo": {
  "data": {
   "lineno": 1692,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.parent_frame_arguments"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest.testNoVarargs": {
  "data": {
   "lineno": 1734,
   "symbols_in_volume": [
    "foo"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest.testNoVarargs.foo": {
  "data": {
   "lineno": 1735,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.parent_frame_arguments"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest.testOverloadedArgumentValues": {
  "data": {
   "lineno": 1712,
   "symbols_in_volume": [
    "foo"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest.testOverloadedArgumentValues.foo": {
  "data": {
   "lineno": 1713,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.parent_frame_arguments"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest.testPositionalArguments": {
  "data": {
   "lineno": 1697,
   "symbols_in_volume": [
    "bar",
    "foo"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest.testPositionalArguments.bar": {
  "data": {
   "lineno": 1705,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.parent_frame_arguments"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest.testPositionalArguments.foo": {
  "data": {
   "lineno": 1698,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.parent_frame_arguments"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest.testPositionalKeywordArgs": {
  "data": {
   "lineno": 1726,
   "symbols_in_volume": [
    "foo"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ArgumentsTest.testPositionalKeywordArgs.foo": {
  "data": {
   "lineno": 1727,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.parent_frame_arguments"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.AssertCloseTest": {
  "data": {
   "lineno": 750,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.AssertCloseTest.testAssertIntegerForm": {
  "data": {
   "lineno": 753,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.control_dependencies",
    "tensorflow.identity",
    "tensorflow_probability.python.internal.distribution_util.assert_integer_form"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.Categorical": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.Categorical"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util_test.DynamicShapeTest": {
  "data": {
   "lineno": 1083,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.DynamicShapeTest.testSameDynamicShape": {
  "data": {
   "lineno": 1086,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.constant",
    "tensorflow_probability.python.internal.distribution_util.same_dynamic_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.EmbedCheckCategoricalEventShapeTest": {
  "data": {
   "lineno": 969,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.EmbedCheckCategoricalEventShapeTest.testTooLarge": {
  "data": {
   "lineno": 987,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "numpy.float16",
    "numpy.ones",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow.float16",
    "tensorflow.ones",
    "tensorflow_probability.python.internal.distribution_util.embed_check_categorical_event_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.EmbedCheckCategoricalEventShapeTest.testTooSmall": {
  "data": {
   "lineno": 972,
   "symbols_in_volume": [
    "ValueError",
    "numpy.float16",
    "numpy.ones",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow.ones",
    "tensorflow_probability.python.internal.distribution_util.embed_check_categorical_event_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.EmbedCheckCategoricalEventShapeTest.testUnsupportedDtype": {
  "data": {
   "lineno": 1002,
   "symbols_in_volume": [
    "TypeError",
    "numpy.ones",
    "tensorflow.convert_to_tensor",
    "tensorflow.qint16",
    "tensorflow.qint16.as_numpy_dtype",
    "tensorflow_probability.python.internal.distribution_util.embed_check_categorical_event_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.EmbedCheckIntegerCastingClosedTest": {
  "data": {
   "lineno": 1010,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.EmbedCheckIntegerCastingClosedTest.testCorrectlyAssersIntegerForm": {
  "data": {
   "lineno": 1029,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float16",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.int16",
    "tensorflow_probability.python.internal.distribution_util.embed_check_integer_casting_closed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.EmbedCheckIntegerCastingClosedTest.testCorrectlyAssertsLargestPossibleInteger": {
  "data": {
   "lineno": 1037,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.int32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.int16",
    "tensorflow_probability.python.internal.distribution_util.embed_check_integer_casting_closed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.EmbedCheckIntegerCastingClosedTest.testCorrectlyAssertsNonnegative": {
  "data": {
   "lineno": 1013,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float16",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.int16",
    "tensorflow_probability.python.internal.distribution_util.embed_check_integer_casting_closed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.EmbedCheckIntegerCastingClosedTest.testCorrectlyAssertsPositive": {
  "data": {
   "lineno": 1021,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float16",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.int16",
    "tensorflow_probability.python.internal.distribution_util.embed_check_integer_casting_closed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.EmbedCheckIntegerCastingClosedTest.testCorrectlyAssertsSmallestPossibleInteger": {
  "data": {
   "lineno": 1045,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.int32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.uint16",
    "tensorflow_probability.python.internal.distribution_util.embed_check_integer_casting_closed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ExpandToVectorTest": {
  "data": {
   "lineno": 1746,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ExpandToVectorTest._check": {
  "data": {
   "lineno": 1754,
   "symbols_in_volume": [
    "numpy.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ExpandToVectorTest._check_static": {
  "data": {
   "lineno": 1749,
   "symbols_in_volume": [
    "numpy.int32",
    "tensorflow.get_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ExpandToVectorTest.test_expand_to_vector_on_constants": {
  "data": {
   "lineno": 1787,
   "symbols_in_volume": [
    "ValueError",
    "_expand_tensor",
    "numpy.float32",
    "numpy.float64",
    "numpy.int64",
    "tensorflow.float32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ExpandToVectorTest.test_expand_to_vector_on_constants._expand_tensor": {
  "data": {
   "lineno": 1789,
   "symbols_in_volume": [
    "tensorflow.convert_to_tensor",
    "tensorflow.int32",
    "tensorflow_probability.python.internal.distribution_util.expand_to_vector"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ExpandToVectorTest.test_expand_to_vector_on_literals": {
  "data": {
   "lineno": 1758,
   "symbols_in_volume": [
    "ValueError",
    "numpy.float32",
    "tensorflow_probability.python.internal.distribution_util.expand_to_vector"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ExpandToVectorTest.test_expand_to_vector_on_tensors": {
  "data": {
   "lineno": 1808,
   "symbols_in_volume": [
    "ValueError",
    "_expand_tensor",
    "numpy.float32",
    "numpy.float64",
    "numpy.int64",
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow.executing_eagerly"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ExpandToVectorTest.test_expand_to_vector_on_tensors._expand_tensor": {
  "data": {
   "lineno": 1810,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.int32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.internal.distribution_util.expand_to_vector"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.FillTriangularInverseTest": {
  "data": {
   "lineno": 1436,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.distribution_util_test.FillTriangularTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.FillTriangularInverseTest._run_test": {
  "data": {
   "lineno": 1439,
   "symbols_in_volume": [
    "numpy.asarray",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow.stop_gradient",
    "tensorflow_probability.python.internal.distribution_util.fill_triangular",
    "tensorflow_probability.python.internal.distribution_util.fill_triangular_inverse"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.FillTriangularTest": {
  "data": {
   "lineno": 1342,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.FillTriangularTest._fill_triangular": {
  "data": {
   "lineno": 1348,
   "symbols_in_volume": [
    "ValueError",
    "numpy.asarray",
    "numpy.concatenate",
    "numpy.floor",
    "numpy.int32",
    "numpy.sqrt",
    "numpy.tril",
    "numpy.triu"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.FillTriangularTest._run_test": {
  "data": {
   "lineno": 1369,
   "symbols_in_volume": [
    "_zeros_like",
    "numpy.asarray",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.internal.distribution_util.fill_triangular",
    "tensorflow_probability.python.math.gradient.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.FillTriangularTest._run_test._zeros_like": {
  "data": {
   "lineno": 1380,
   "symbols_in_volume": [
    "tensorflow.stop_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.FillTriangularTest.setUp": {
  "data": {
   "lineno": 1345,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.FillTriangularTest.testCorrectlyMakes1x1TriLower": {
  "data": {
   "lineno": 1395,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.FillTriangularTest.testCorrectlyMakes1x1TriUpper": {
  "data": {
   "lineno": 1413,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.FillTriangularTest.testCorrectlyMakesBatch7x7TriLower": {
  "data": {
   "lineno": 1410,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.FillTriangularTest.testCorrectlyMakesBatch7x7TriLowerUnknownShape": {
  "data": {
   "lineno": 1407,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.FillTriangularTest.testCorrectlyMakesBatch7x7TriUpper": {
  "data": {
   "lineno": 1432,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.FillTriangularTest.testCorrectlyMakesBatch7x7TriUpperUnknownShape": {
  "data": {
   "lineno": 1427,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.FillTriangularTest.testCorrectlyMakesBatchTriLower": {
  "data": {
   "lineno": 1401,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.FillTriangularTest.testCorrectlyMakesBatchTriLowerUnknownShape": {
  "data": {
   "lineno": 1404,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.FillTriangularTest.testCorrectlyMakesBatchTriUpper": {
  "data": {
   "lineno": 1419,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.FillTriangularTest.testCorrectlyMakesBatchTriUpperUnknownShape": {
  "data": {
   "lineno": 1422,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.FillTriangularTest.testCorrectlyMakesNoBatchTriLower": {
  "data": {
   "lineno": 1398,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.FillTriangularTest.testCorrectlyMakesNoBatchTriUpper": {
  "data": {
   "lineno": 1416,
   "symbols_in_volume": [
    "int"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GenNewSeedTest": {
  "data": {
   "lineno": 1572,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GenNewSeedTest.testOnlyNoneReturnsNone": {
  "data": {
   "lineno": 1574,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.gen_new_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GetBroadcastShapeTest": {
  "data": {
   "lineno": 335,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GetBroadcastShapeTest.test_all_static_shapes_work": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": [
    "tensorflow.ones",
    "tensorflow_probability.python.internal.distribution_util.get_broadcast_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GetBroadcastShapeTest.test_with_some_dynamic_shapes_works": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.ones",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow.ones",
    "tensorflow_probability.python.internal.distribution_util.get_broadcast_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GetLogitsAndProbsTest": {
  "data": {
   "lineno": 819,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GetLogitsAndProbsTest.testImproperArguments": {
  "data": {
   "lineno": 822,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GetLogitsAndProbsTest.testLogits": {
  "data": {
   "lineno": 829,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs",
    "tensorflow_probability.python.internal.distribution_util_test._logit"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GetLogitsAndProbsTest.testLogitsMultidimShape": {
  "data": {
   "lineno": 952,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "numpy.float16",
    "numpy.ones",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow.float16",
    "tensorflow.ones",
    "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GetLogitsAndProbsTest.testLogitsMultidimensional": {
  "data": {
   "lineno": 839,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.log",
    "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GetLogitsAndProbsTest.testProbability": {
  "data": {
   "lineno": 849,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs",
    "tensorflow_probability.python.internal.distribution_util_test._logit"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GetLogitsAndProbsTest.testProbabilityMultidimensional": {
  "data": {
   "lineno": 858,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.log",
    "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GetLogitsAndProbsTest.testProbabilityValidateArgs": {
  "data": {
   "lineno": 867,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GetLogitsAndProbsTest.testProbabilityValidateArgsMultidimensional": {
  "data": {
   "lineno": 896,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.GetLogitsAndProbsTest.testProbsMultidimShape": {
  "data": {
   "lineno": 937,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "numpy.float16",
    "numpy.ones",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow.float16",
    "tensorflow.ones",
    "tensorflow_probability.python.internal.distribution_util.get_logits_and_probs"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.LogCombinationsTest": {
  "data": {
   "lineno": 1054,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.LogCombinationsTest.testLogCombinationsBinomial": {
  "data": {
   "lineno": 1057,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.log",
    "tensorflow_probability.python.internal.distribution_util.log_combinations",
    "tensorflow_probability.python.internal.distribution_util_test.special"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.LogCombinationsTest.testLogCombinationsShape": {
  "data": {
   "lineno": 1072,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.internal.distribution_util.log_combinations"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MakeDiagScaleTest": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MakeDiagScaleTest._testLegalInputs": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "tensorflow_probability.python.internal.distribution_util.make_diag_scale",
    "tensorflow_probability.python.internal.distribution_util_test._make_diag_scale",
    "tensorflow_probability.python.internal.distribution_util_test._powerset"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MakeDiagScaleTest.testAssertPositive": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.make_diag_scale"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MakeDiagScaleTest.testLegalInputs": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MakeDiagScaleTest.testLegalInputsMultidimensional": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MakeDiagScaleTest.testValidateArgs": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.make_diag_scale"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MakeTrilScaleTest": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MakeTrilScaleTest._testLegalInputs": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "ValueError",
    "dict",
    "tensorflow_probability.python.internal.distribution_util.make_tril_scale",
    "tensorflow_probability.python.internal.distribution_util_test._make_tril_scale",
    "tensorflow_probability.python.internal.distribution_util_test._powerset"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MakeTrilScaleTest.testAssertPositive": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.make_tril_scale"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MakeTrilScaleTest.testLegalInputs": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MakeTrilScaleTest.testLegalInputsMultidimensional": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MakeTrilScaleTest.testValidateArgs": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.make_tril_scale"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MakeTrilScaleTest.testZeroTriU": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.make_tril_scale"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MaybeGetStaticTest": {
  "data": {
   "lineno": 785,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MaybeGetStaticTest.testGetStaticConstant": {
  "data": {
   "lineno": 802,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float64",
    "numpy.int32",
    "tensorflow.constant",
    "tensorflow.int32",
    "tensorflow_probability.python.internal.distribution_util.maybe_get_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MaybeGetStaticTest.testGetStaticInt": {
  "data": {
   "lineno": 788,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float64",
    "tensorflow_probability.python.internal.distribution_util.maybe_get_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MaybeGetStaticTest.testGetStaticNumpyArray": {
  "data": {
   "lineno": 795,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float64",
    "numpy.int32",
    "tensorflow_probability.python.internal.distribution_util.maybe_get_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MaybeGetStaticTest.testGetStaticPlaceholder": {
  "data": {
   "lineno": 810,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float64",
    "numpy.int32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.internal.distribution_util.maybe_get_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.Mixture": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.Mixture"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MixtureSameFamily": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.MixtureSameFamily"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MixtureStddevTest": {
  "data": {
   "lineno": 405,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MixtureStddevTest.test_mixture_dev": {
  "data": {
   "lineno": 408,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.constant",
    "tensorflow_probability.python.internal.distribution_util.mixture_stddev"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.MultivariateNormalDiag": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.MultivariateNormalDiag"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util_test.Normal": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.Normal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PadDynamicTest": {
  "data": {
   "lineno": 576,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.internal.distribution_util_test._PadTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PadDynamicTest.is_static_shape": {
  "data": {
   "lineno": 579,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PadMixtureDimensionsTest": {
  "data": {
   "lineno": 440,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PadMixtureDimensionsTest.test_pad_mixture_dimensions_mixture": {
  "data": {
   "lineno": 443,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.Categorical",
    "tensorflow_probability.python.distributions.Mixture",
    "tensorflow_probability.python.distributions.Normal",
    "tensorflow_probability.python.internal.distribution_util.pad_mixture_dimensions",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PadMixtureDimensionsTest.test_pad_mixture_dimensions_mixture_same_family": {
  "data": {
   "lineno": 459,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.python.distributions.Categorical",
    "tensorflow_probability.python.distributions.MixtureSameFamily",
    "tensorflow_probability.python.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.internal.distribution_util.pad_mixture_dimensions",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PadStaticTest": {
  "data": {
   "lineno": 568,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.internal.distribution_util_test._PadTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PadStaticTest.is_static_shape": {
  "data": {
   "lineno": 571,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PickScalarConditionTest": {
  "data": {
   "lineno": 584,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PickScalarConditionTest.test_pick_scalar_condition_dynamic": {
  "data": {
   "lineno": 605,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.float32",
    "numpy.random.randn",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.internal.distribution_util.pick_scalar_condition"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PickScalarConditionTest.test_pick_scalar_condition_static": {
  "data": {
   "lineno": 587,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.float32",
    "numpy.random.randn",
    "tensorflow.constant",
    "tensorflow_probability.python.internal.distribution_util.pick_scalar_condition"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PickVectorTest": {
  "data": {
   "lineno": 1190,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PickVectorTest.testCorrectlyPicksVector": {
  "data": {
   "lineno": 1193,
   "symbols_in_volume": [
    "numpy.arange",
    "tensorflow.constant",
    "tensorflow.less",
    "tensorflow_probability.python.internal.distribution_util.pick_vector"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticRankTest": {
  "data": {
   "lineno": 1208,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticRankTest.testDynamicRankEndsUpBeingEmpty": {
  "data": {
   "lineno": 1239,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.int32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticRankTest.testDynamicRankEndsUpBeingNonEmpty": {
  "data": {
   "lineno": 1232,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.zeros",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticRankTest.testDynamicRankEndsUpBeingScalar": {
  "data": {
   "lineno": 1246,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.int32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticRankTest.testEmptyConstantTensor": {
  "data": {
   "lineno": 1218,
   "symbols_in_volume": [
    "numpy.ndarray",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticRankTest.testNonEmptyConstantTensor": {
  "data": {
   "lineno": 1211,
   "symbols_in_volume": [
    "numpy.ndarray",
    "tensorflow.executing_eagerly",
    "tensorflow.zeros",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticRankTest.testScalarTensor": {
  "data": {
   "lineno": 1225,
   "symbols_in_volume": [
    "numpy.ndarray",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticShapeTest": {
  "data": {
   "lineno": 1254,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticShapeTest.testDynamicShapeEndsUpBeingEmpty": {
  "data": {
   "lineno": 1282,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.int32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticShapeTest.testDynamicShapeEndsUpBeingNonEmpty": {
  "data": {
   "lineno": 1275,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.zeros",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticShapeTest.testDynamicShapeEndsUpBeingScalar": {
  "data": {
   "lineno": 1289,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.int32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticShapeTest.testEmptyConstantTensor": {
  "data": {
   "lineno": 1263,
   "symbols_in_volume": [
    "numpy.ndarray",
    "tensorflow.constant",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticShapeTest.testNonEmptyConstantTensor": {
  "data": {
   "lineno": 1257,
   "symbols_in_volume": [
    "numpy.ndarray",
    "tensorflow.zeros",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticShapeTest.testScalarTensor": {
  "data": {
   "lineno": 1269,
   "symbols_in_volume": [
    "numpy.ndarray",
    "tensorflow.constant",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticValueTest": {
  "data": {
   "lineno": 1297,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticValueTest.testDynamicValueEndsUpBeingEmpty": {
  "data": {
   "lineno": 1327,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.int32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticValueTest.testDynamicValueEndsUpBeingNonEmpty": {
  "data": {
   "lineno": 1319,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.zeros",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticValueTest.testDynamicValueEndsUpBeingScalar": {
  "data": {
   "lineno": 1334,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.int32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticValueTest.testEmptyConstantTensor": {
  "data": {
   "lineno": 1306,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.ndarray",
    "tensorflow.constant",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticValueTest.testNonEmptyConstantTensor": {
  "data": {
   "lineno": 1300,
   "symbols_in_volume": [
    "numpy.ndarray",
    "numpy.zeros",
    "tensorflow.zeros",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.PreferStaticValueTest.testScalarTensor": {
  "data": {
   "lineno": 1312,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.ndarray",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ReduceWeightedLogSumExp": {
  "data": {
   "lineno": 1460,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ReduceWeightedLogSumExp._reduce_weighted_logsumexp": {
  "data": {
   "lineno": 1463,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.log",
    "numpy.max",
    "numpy.sign",
    "numpy.squeeze",
    "numpy.sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ReduceWeightedLogSumExp.testDocString": {
  "data": {
   "lineno": 1535,
   "symbols_in_volume": [
    "numpy.errstate",
    "numpy.log",
    "tensorflow.constant",
    "tensorflow_probability.python.internal.distribution_util.reduce_weighted_logsumexp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ReduceWeightedLogSumExp.testKeepDims": {
  "data": {
   "lineno": 1518,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.constant",
    "tensorflow_probability.python.internal.distribution_util.reduce_weighted_logsumexp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ReduceWeightedLogSumExp.testNegativeWeights": {
  "data": {
   "lineno": 1502,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.constant",
    "tensorflow_probability.python.internal.distribution_util.reduce_weighted_logsumexp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ReduceWeightedLogSumExp.testNoWeights": {
  "data": {
   "lineno": 1471,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.GradientTape",
    "tensorflow.constant",
    "tensorflow.reduce_logsumexp",
    "tensorflow_probability.python.internal.distribution_util.reduce_weighted_logsumexp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.RotateTransposeTest": {
  "data": {
   "lineno": 1155,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.RotateTransposeTest._np_rotate_transpose": {
  "data": {
   "lineno": 1158,
   "symbols_in_volume": [
    "isinstance",
    "len",
    "numpy.arange",
    "numpy.array",
    "numpy.ndarray",
    "numpy.roll",
    "numpy.transpose"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.RotateTransposeTest.testRollDynamic": {
  "data": {
   "lineno": 1178,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.float32",
    "numpy.int32",
    "numpy.ones",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.internal.distribution_util.rotate_transpose"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.RotateTransposeTest.testRollStatic": {
  "data": {
   "lineno": 1163,
   "symbols_in_volume": [
    "ValueError",
    "numpy.arange",
    "numpy.ones",
    "numpy.roll",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.internal.distribution_util.rotate_transpose",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ShapesFromLocAndScaleTest": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ShapesFromLocAndScaleTest.test_dynamic_loc_dynamic_scale": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": [
    "numpy.ones",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow.get_static_value",
    "tensorflow.linalg.LinearOperatorDiag",
    "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ShapesFromLocAndScaleTest.test_dynamic_loc_static_scale": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": [
    "numpy.zeros",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow.get_static_value",
    "tensorflow.linalg.LinearOperatorDiag",
    "tensorflow.ones",
    "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ShapesFromLocAndScaleTest.test_none_loc_dynamic_scale": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": [
    "numpy.ones",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow.get_static_value",
    "tensorflow.linalg.LinearOperatorDiag",
    "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ShapesFromLocAndScaleTest.test_none_loc_static_scale": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "tensorflow.executing_eagerly",
    "tensorflow.get_static_value",
    "tensorflow.linalg.LinearOperatorDiag",
    "tensorflow.ones",
    "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ShapesFromLocAndScaleTest.test_static_loc_dynamic_scale": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": [
    "numpy.ones",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow.get_static_value",
    "tensorflow.linalg.LinearOperatorDiag",
    "tensorflow.zeros",
    "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ShapesFromLocAndScaleTest.test_static_loc_static_scale": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "tensorflow.executing_eagerly",
    "tensorflow.get_static_value",
    "tensorflow.linalg.LinearOperatorDiag",
    "tensorflow.ones",
    "tensorflow.zeros",
    "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.ShapesFromLocAndScaleTest.test_static_loc_static_scale_non_matching_event_size_raises": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.linalg.LinearOperatorDiag",
    "tensorflow.ones",
    "tensorflow.zeros",
    "tensorflow_probability.python.internal.distribution_util.shapes_from_loc_and_scale"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.SoftplusTest": {
  "data": {
   "lineno": 1582,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.SoftplusTest._npSoftplus": {
  "data": {
   "lineno": 1585,
   "symbols_in_volume": [
    "numpy.asarray",
    "numpy.logaddexp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.SoftplusTest._testSoftplus": {
  "data": {
   "lineno": 1590,
   "symbols_in_volume": [
    "numpy.asarray",
    "numpy.bool",
    "numpy.isfinite",
    "numpy.ones_like",
    "str",
    "tensorflow.nn.softplus",
    "tensorflow_probability.python.internal.distribution_util.softplus_inverse"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.SoftplusTest.testGradient": {
  "data": {
   "lineno": 1659,
   "symbols_in_volume": [
    "tensorflow.compat.v1.logging.vlog",
    "tensorflow.constant",
    "tensorflow.nn.softplus",
    "tensorflow.python.ops.gradient_checker_v2.compute_gradient",
    "tensorflow.python.ops.gradient_checker_v2.max_error"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.SoftplusTest.testInverseSoftplusGradientFinite": {
  "data": {
   "lineno": 1677,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.float16",
    "numpy.isfinite",
    "numpy.logspace",
    "numpy.ones_like",
    "tensorflow.constant",
    "tensorflow_probability.python.internal.distribution_util.softplus_inverse",
    "tensorflow_probability.python.math.gradient.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.SoftplusTest.testInverseSoftplusGradientNeverNan": {
  "data": {
   "lineno": 1669,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.float16",
    "numpy.isnan",
    "numpy.logspace",
    "numpy.zeros_like",
    "tensorflow.constant",
    "tensorflow_probability.python.internal.distribution_util.softplus_inverse",
    "tensorflow_probability.python.math.gradient.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.SoftplusTest.testNumbers": {
  "data": {
   "lineno": 1616,
   "symbols_in_volume": [
    "int",
    "numpy.array",
    "numpy.finfo",
    "numpy.float16",
    "numpy.float16.get",
    "numpy.float32",
    "numpy.float32.get",
    "numpy.float64",
    "numpy.float64.get",
    "numpy.linspace",
    "numpy.log",
    "t"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.TestMoveDimension": {
  "data": {
   "lineno": 654,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.TestMoveDimension.test_move_dimension_dynamic_indices": {
  "data": {
   "lineno": 706,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.random.normal",
    "tensorflow.shape",
    "tensorflow_probability.python.internal.distribution_util.move_dimension"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.TestMoveDimension.test_move_dimension_dynamic_shape": {
  "data": {
   "lineno": 677,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.random.normal",
    "tensorflow.shape",
    "tensorflow_probability.python.internal.distribution_util.move_dimension"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.TestMoveDimension.test_move_dimension_static_shape": {
  "data": {
   "lineno": 657,
   "symbols_in_volume": [
    "tensorflow.random.normal",
    "tensorflow_probability.python.internal.distribution_util.move_dimension",
    "tensorflow_probability.python.internal.tensorshape_util.as_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.TestNonNegativeAxis": {
  "data": {
   "lineno": 631,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.TestNonNegativeAxis.test_dynamic_vector_index": {
  "data": {
   "lineno": 647,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.internal.distribution_util.make_non_negative_axis"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.TestNonNegativeAxis.test_static_scalar_negative_index": {
  "data": {
   "lineno": 638,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.make_non_negative_axis"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.TestNonNegativeAxis.test_static_scalar_positive_index": {
  "data": {
   "lineno": 634,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.make_non_negative_axis"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.TestNonNegativeAxis.test_static_vector_index": {
  "data": {
   "lineno": 642,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.make_non_negative_axis"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.TridiagTest": {
  "data": {
   "lineno": 356,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.TridiagTest.testHandlesNone": {
  "data": {
   "lineno": 389,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.tridiag"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.TridiagTest.testWorksCorrectlyBatches": {
  "data": {
   "lineno": 370,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.tridiag"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.TridiagTest.testWorksCorrectlyNoBatches": {
  "data": {
   "lineno": 359,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.distribution_util.tridiag"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.WithDependenciesTestCase": {
  "data": {
   "lineno": 1846,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.TensorFlowTestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test.WithDependenciesTestCase.testListDependencies": {
  "data": {
   "lineno": 1861,
   "symbols_in_volume": [
    "tensorflow.compat.v1.assign_add",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.WithDependenciesTestCase.testTupleDependencies": {
  "data": {
   "lineno": 1849,
   "symbols_in_volume": [
    "tensorflow.compat.v1.assign_add",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test._PadTest": {
  "data": {
   "lineno": 474,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.distribution_util_test._PadTest.testNegAxisCorrectness": {
  "data": {
   "lineno": 476,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.int32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.constant",
    "tensorflow_probability.python.internal.distribution_util.pad"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test._PadTest.testPosAxisCorrectness": {
  "data": {
   "lineno": 525,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.int32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.constant",
    "tensorflow_probability.python.internal.distribution_util.pad"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test._logit": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "numpy.asarray",
    "numpy.log",
    "numpy.log1p"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test._make_diag_scale": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "numpy.asarray",
    "numpy.diag",
    "numpy.ones",
    "tensorflow_probability.python.internal.distribution_util_test._matrix_diag"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test._make_tril_scale": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "_make_diag_scale",
    "numpy.array",
    "numpy.float32",
    "numpy.ones",
    "numpy.tril",
    "tensorflow_probability.python.internal.distribution_util_test._matrix_diag"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test._matrix_diag": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "int",
    "numpy.diag",
    "numpy.prod",
    "numpy.reshape",
    "range"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test._powerset": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "len",
    "list",
    "range",
    "tensorflow_probability.python.internal.distribution_util_test.itertools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util_test.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util_test.gradient_checker_v2": {
  "data": {
   "shadows": "tensorflow.python.ops.gradient_checker_v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util_test.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util_test.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util_test.special": {
  "data": {
   "lineno": 50
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.distribution_util_test.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.distribution_util_test.try_import": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "ImportError",
    "str",
    "tensorflow.compat.v1.logging.warning",
    "tensorflow_probability.python.internal.distribution_util_test.importlib"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.distribution_util_test.value_and_gradient": {
  "data": {
   "shadows": "tensorflow_probability.python.math.gradient.value_and_gradient"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.dtype_util": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.internal.dtype_util.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.dtype_util._assert_same_base_type": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "ValueError",
    "get_name",
    "hasattr",
    "str",
    "tensorflow_probability.python.internal.dtype_util.base_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "hasattr",
    "tensorflow.compat.v2.as_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.compat.v2.float32",
    "tensorflow_probability.python.internal.dtype_util._assert_same_base_type",
    "tensorflow_probability.python.internal.dtype_util.is_floating"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.base_dtype": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "hasattr",
    "tensorflow.compat.v2.as_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.base_equal": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.dtype_util.base_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.common_dtype": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "TypeError",
    "hasattr",
    "tensorflow.compat.v2.as_dtype",
    "tensorflow.compat.v2.nest.flatten",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.dtype_util.is_bool": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "hasattr",
    "numpy.dtype",
    "tensorflow.compat.v2.as_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.is_complex": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "hasattr",
    "numpy.complex",
    "numpy.dtype",
    "numpy.issubdtype",
    "tensorflow.compat.v2.as_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.is_floating": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "hasattr",
    "numpy.dtype",
    "numpy.float",
    "numpy.issubdtype",
    "tensorflow.compat.v2.as_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.is_integer": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "hasattr",
    "numpy.dtype",
    "numpy.integer",
    "numpy.issubdtype",
    "tensorflow.compat.v2.as_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.max": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "hasattr",
    "numpy.finfo",
    "numpy.iinfo",
    "tensorflow.compat.v2.as_dtype",
    "tensorflow_probability.python.internal.dtype_util.is_complex",
    "tensorflow_probability.python.internal.dtype_util.is_floating"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.min": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "hasattr",
    "numpy.finfo",
    "numpy.iinfo",
    "tensorflow.compat.v2.as_dtype",
    "tensorflow_probability.python.internal.dtype_util.is_complex",
    "tensorflow_probability.python.internal.dtype_util.is_floating"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.name": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "hasattr",
    "str",
    "tensorflow.compat.v2.as_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.dtype_util.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.dtype_util.size": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "hasattr",
    "numpy.dtype",
    "tensorflow.compat.v2.as_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.dtype_util_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v2.test.main",
    "tensorflow_probability.edward2"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.internal.dtype_util_test.DtypeUtilTest": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.dtype_util_test.DtypeUtilTest.testCommonDtypeFromEdRV": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "numpy.ones",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.float64",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.dtype_util_test.ed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util_test.DtypeUtilTest.testCommonDtypeFromLinop": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "tensorflow.compat.v2.float16",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.linalg.LinearOperatorDiag",
    "tensorflow.compat.v2.ones",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util_test.DtypeUtilTest.testNoModifyArgsList": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util_test.FloatDTypeTest": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.dtype_util_test.FloatDTypeTest.test_assert_same_float_dtype": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.compat.v2.SparseTensor",
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.float64",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.int64",
    "tensorflow.python.framework.test_util.run_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.dtype_util.assert_same_float_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.dtype_util_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.dtype_util_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.dtype_util_test.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.dtype_util_test.ed": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.dtype_util_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.dtype_util_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.dtype_util_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.dtype_util_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.dtype_util_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.monte_carlo": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.internal.monte_carlo.__all__": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.monte_carlo._get_samples": {
  "data": {
   "lineno": 350,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.name_scope"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.monte_carlo._logspace_mean": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "_sample_max",
    "_sample_mean",
    "tensorflow.compat.v2.math.exp",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.stop_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.monte_carlo._sample_max": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.reduce_max"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.monte_carlo._sample_mean": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": [
    "tensorflow.compat.v2.math.reduce_mean"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.monte_carlo.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.monte_carlo.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.monte_carlo.expectation": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "ValueError",
    "callable",
    "f",
    "log_prob",
    "stop",
    "tensorflow.compat.v2.math.reduce_mean",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.stop_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.monte_carlo.expectation_importance_sampler": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "_get_samples",
    "_importance_sampler_positive_f",
    "f",
    "log_p",
    "tensorflow.compat.v2.math.exp",
    "tensorflow.compat.v2.math.log1p",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.nn.relu"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.monte_carlo.expectation_importance_sampler._importance_sampler_positive_f": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "_logspace_mean"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.monte_carlo.expectation_importance_sampler_logspace": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "_get_samples",
    "_logspace_mean",
    "log_f",
    "log_p",
    "tensorflow.compat.v2.name_scope"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.monte_carlo.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.monte_carlo.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.nest_util": {
  "data": {
   "symbols_in_volume": [
    "tensorflow.python.util.nest._is_namedtuple"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.internal.nest_util.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.nest_util._expand_as_kwargs": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "isinstance",
    "tensorflow_probability.python.internal.nest_util._force_leaf",
    "tensorflow_probability.python.internal.nest_util.collections"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util._force_leaf": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util._get_shallow_structure": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "tensorflow.python.util.nest.get_traverse_shallow_structure"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util._is_namedtuple": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.nest_util._maybe_convertible_to_tensor": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.nest_util._force_leaf",
    "tensorflow_probability.python.internal.nest_util._is_namedtuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util._nested_convert_to_tensor": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.nest.is_nested",
    "tensorflow.python.util.nest.map_structure_up_to",
    "tensorflow_probability.python.internal.nest_util._get_shallow_structure",
    "tensorflow_probability.python.internal.nest_util._maybe_convertible_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.nest_util.broadcast_structure": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "len",
    "tensorflow.compat.v2.nest.flatten",
    "tensorflow.compat.v2.nest.map_structure"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util.call_fn": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "fn",
    "tensorflow_probability.python.internal.nest_util._expand_as_kwargs",
    "tensorflow_probability.python.internal.nest_util.expand_as_args"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.nest_util.convert_args_to_tensor": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "tensorflow.python.util.nest.map_structure_up_to",
    "tensorflow_probability.python.internal.nest_util._expand_as_kwargs",
    "tensorflow_probability.python.internal.nest_util._get_shallow_structure",
    "tensorflow_probability.python.internal.nest_util._nested_convert_to_tensor",
    "tensorflow_probability.python.internal.nest_util.expand_as_args"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.nest_util.expand_as_args": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "isinstance",
    "tensorflow_probability.python.internal.nest_util._force_leaf",
    "tensorflow_probability.python.internal.nest_util._is_namedtuple",
    "tensorflow_probability.python.internal.nest_util.collections"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util.nest": {
  "data": {
   "shadows": "tensorflow.python.util.nest"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.nest_util.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.nest_util.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.nest_util_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "numpy.array",
    "tensorflow.test.main",
    "tensorflow_probability.python.internal.nest_util_test.collections"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.internal.nest_util_test.LeafDict": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.nest_util_test.LeafDict.__repr__": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.internal.nest_util_test.LeafDict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util_test.LeafList": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.nest_util_test.LeafList.__repr__": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.internal.nest_util_test.LeafList"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util_test.LeafNamedTuple": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.nest_util_test.collections"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.nest_util_test.LeafTuple": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "tuple"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.nest_util_test.LeafTuple.__repr__": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.internal.nest_util_test.LeafTuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util_test.NamedTuple": {
  "data": {
   "lineno": 54
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.nest_util_test.NestUtilTest": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.nest_util_test.NestUtilTest.testBroadcastStructure": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "tensorflow_probability.python.internal.nest_util.broadcast_structure",
    "tensorflow_probability.python.internal.nest_util_test.NamedTuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util_test.NestUtilTest.testCallFnLeafArgs": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "fn",
    "tensorflow_probability.python.internal.nest_util_test.LeafDict",
    "tensorflow_probability.python.internal.nest_util_test.LeafList"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util_test.NestUtilTest.testCallFnLeafArgs.fn": {
  "data": {
   "lineno": 169
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util_test.NestUtilTest.testCallFnOneArg": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "tensorflow.nest.flatten",
    "tensorflow_probability.python.internal.nest_util.call_fn",
    "tensorflow_probability.python.internal.nest_util_test.NamedTuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util_test.NestUtilTest.testCallFnOneArg.fn": {
  "data": {
   "lineno": 160
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util_test.NestUtilTest.testCallFnTwoArgs": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "fn",
    "tensorflow_probability.python.internal.nest_util.call_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util_test.NestUtilTest.testCallFnTwoArgs.fn": {
  "data": {
   "lineno": 177
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util_test.NestUtilTest.testConvertArgsToTensor": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "tensorflow.Tensor",
    "tensorflow.nest.assert_same_structure",
    "tensorflow.nest.map_structure",
    "tensorflow_probability.python.internal.nest_util.convert_args_to_tensor",
    "tensorflow_probability.python.internal.nest_util_test.LeafDict",
    "tensorflow_probability.python.internal.nest_util_test.LeafList",
    "tensorflow_probability.python.internal.nest_util_test.LeafNamedTuple",
    "tensorflow_probability.python.internal.nest_util_test.LeafTuple",
    "tensorflow_probability.python.internal.nest_util_test.NamedTuple",
    "tensorflow_probability.python.internal.nest_util_test.Tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util_test.NestUtilTest.testConvertArgsToTensorErrors": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "absl.testing.parameterized.parameters",
    "numpy.array",
    "tensorflow.int32",
    "tensorflow_probability.python.internal.nest_util.convert_args_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util_test.NestUtilTest.testConvertArgsToTensorWithDType": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.int64",
    "tensorflow.Tensor",
    "tensorflow.int32",
    "tensorflow.int64",
    "tensorflow.nest.assert_same_structure",
    "tensorflow.nest.map_structure",
    "tensorflow_probability.python.internal.nest_util.convert_args_to_tensor",
    "tensorflow_probability.python.internal.nest_util_test.NamedTuple",
    "tensorflow_probability.python.internal.nest_util_test.Tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.nest_util_test.Tensor": {
  "data": {
   "lineno": 57
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.nest_util_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.nest_util_test.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.nest_util_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.nest_util_test.nest_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.nest_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.nest_util_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.nest_util_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.nest_util_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.nest_util_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.nest_util_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.prefer_static": {
  "data": {
   "symbols_in_volume": [
    "input",
    "input.shape",
    "numpy.all",
    "numpy.any",
    "numpy.arange",
    "numpy.concatenate",
    "numpy.equal",
    "numpy.greater",
    "numpy.less",
    "numpy.logical_and",
    "numpy.logical_not",
    "numpy.logical_or",
    "numpy.maximum",
    "numpy.minimum",
    "numpy.ones",
    "numpy.prod",
    "numpy.sum",
    "numpy.where",
    "numpy.zeros",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.equal",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.greater",
    "tensorflow.compat.v2.less",
    "tensorflow.compat.v2.logical_and",
    "tensorflow.compat.v2.logical_not",
    "tensorflow.compat.v2.logical_or",
    "tensorflow.compat.v2.maximum",
    "tensorflow.compat.v2.minimum",
    "tensorflow.compat.v2.ones",
    "tensorflow.compat.v2.ones_like",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.rank",
    "tensorflow.compat.v2.reduce_all",
    "tensorflow.compat.v2.reduce_any",
    "tensorflow.compat.v2.reduce_prod",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.zeros",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.internal.prefer_static._copy_docstring",
    "tensorflow_probability.python.internal.prefer_static._numpy_dtype",
    "tensorflow_probability.python.internal.prefer_static._ones_like",
    "tensorflow_probability.python.internal.prefer_static._prefer_static",
    "tensorflow_probability.python.internal.prefer_static._shape",
    "tensorflow_probability.python.internal.prefer_static._zeros_like",
    "tensorflow_probability.python.internal.prefer_static.shape",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.internal.prefer_static._copy_docstring": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "ValueError",
    "original_fn",
    "tensorflow.python.util.tf_inspect.getfullargspec",
    "wrap"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static._copy_docstring.wrap": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "new_fn",
    "tensorflow_probability.python.internal.prefer_static.decorator"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static._get_static_predicate": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "TypeError",
    "bool",
    "isinstance",
    "tensorflow.compat.v2.Tensor",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow.python.pywrap_tensorflow.TF_TryEvaluateConstant_wrapper"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static._maybe_get_static_args": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "all",
    "tensorflow.compat.v2.get_static_value",
    "tensorflow.compat.v2.nest.flatten",
    "tensorflow.compat.v2.nest.pack_sequence_as",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static._numpy_dtype": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static._ones_like": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "_shape",
    "input",
    "input.dtype",
    "isinstance",
    "numpy.generic",
    "numpy.ndarray",
    "numpy.ones",
    "tensorflow.compat.v2.ones",
    "tensorflow_probability.python.internal.prefer_static._numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static._prefer_static": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "ValueError",
    "original_fn",
    "tensorflow.python.util.tf_inspect.getfullargspec",
    "wrap"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static._prefer_static.wrap": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "original_fn",
    "static_fn",
    "tensorflow_probability.python.internal.prefer_static._maybe_get_static_args",
    "tensorflow_probability.python.internal.prefer_static.decorator"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static._shape": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "hasattr",
    "input",
    "input.shape",
    "numpy.array",
    "numpy.object",
    "tensorflow.compat.v2.TensorShape",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.shape",
    "tensorflow_probability.python.internal.prefer_static._numpy_dtype",
    "tensorflow_probability.python.internal.tensorshape_util.as_list",
    "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static._zeros_like": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": [
    "input",
    "input.dtype",
    "isinstance",
    "numpy.generic",
    "numpy.ndarray",
    "numpy.zeros",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.internal.prefer_static._numpy_dtype",
    "tensorflow_probability.python.internal.prefer_static._shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.prefer_static.c_api": {
  "data": {
   "shadows": "tensorflow.python.pywrap_tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.prefer_static.case": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "tensorflow.python.ops.control_flow_ops._case_helper",
    "tensorflow_probability.python.internal.prefer_static.cond"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static.concat": {
  "data": {
   "lineno": 185
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.prefer_static.cond": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "TypeError",
    "callable",
    "false_fn",
    "tensorflow.compat.v2.cond",
    "tensorflow_probability.python.internal.prefer_static._get_static_predicate",
    "true_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static.control_flow_ops": {
  "data": {
   "shadows": "tensorflow.python.ops.control_flow_ops"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.prefer_static.decorator": {
  "data": {
   "shadows": "decorator"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.prefer_static.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.prefer_static.equal": {
  "data": {
   "lineno": 189
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.prefer_static.greater": {
  "data": {
   "lineno": 193
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.prefer_static.less": {
  "data": {
   "lineno": 197
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.prefer_static.logical_and": {
  "data": {
   "lineno": 201
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.prefer_static.logical_not": {
  "data": {
   "lineno": 205
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.prefer_static.logical_or": {
  "data": {
   "lineno": 209
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.prefer_static.maximum": {
  "data": {
   "lineno": 213
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.prefer_static.minimum": {
  "data": {
   "lineno": 217
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.prefer_static.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.prefer_static.ones": {
  "data": {
   "lineno": 221
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.prefer_static.ones_like": {
  "data": {
   "lineno": 232
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.prefer_static.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.prefer_static.range": {
  "data": {
   "lineno": 234
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.prefer_static.rank": {
  "data": {
   "lineno": 239
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.prefer_static.rank_from_shape": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "callable",
    "hasattr",
    "len",
    "ndims_fn",
    "shape_tensor_fn",
    "tensorflow.compat.v2.size",
    "tensorflow_probability.python.internal.tensorshape_util.num_elements",
    "tensorflow_probability.python.internal.tensorshape_util.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static.reduce_all": {
  "data": {
   "lineno": 246
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.prefer_static.reduce_any": {
  "data": {
   "lineno": 251
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.prefer_static.reduce_prod": {
  "data": {
   "lineno": 256
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.prefer_static.reduce_sum": {
  "data": {
   "lineno": 261
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.prefer_static.shape": {
  "data": {
   "lineno": 276
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.prefer_static.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.prefer_static.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.prefer_static.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.prefer_static.tf_inspect": {
  "data": {
   "shadows": "tensorflow.python.util.tf_inspect"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.prefer_static.where": {
  "data": {
   "lineno": 278
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.prefer_static.zeros": {
  "data": {
   "lineno": 282
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.prefer_static.zeros_like": {
  "data": {
   "lineno": 293
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.prefer_static_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.internal.prefer_static_test.GetStaticValueTest": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.prefer_static_test.GetStaticValueTest.testStaticEvaluation": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "absl.testing.parameterized.named_parameters",
    "dict",
    "predicate_fn",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.internal.prefer_static._get_static_predicate"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.PreferStaticCaseTest": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.prefer_static_test.PreferStaticCaseTest.testFalse": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.python.internal.prefer_static.case",
    "tensorflow_probability.python.internal.prefer_static_test.raise_exception"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.PreferStaticCaseTest.testMix": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.python.internal.prefer_static.case",
    "tensorflow_probability.python.internal.prefer_static_test.raise_exception",
    "tensorflow_probability.python.internal.prefer_static_test.raise_exception_in_eager_mode"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.PreferStaticCaseTest.testTrue": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.python.internal.prefer_static.case",
    "tensorflow_probability.python.internal.prefer_static_test.raise_exception"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.PreferStaticCondTest": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.prefer_static_test.PreferStaticCondTest.testFalse": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.multiply",
    "tensorflow_probability.python.internal.prefer_static.cond"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.PreferStaticCondTest.testMissingArg1": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "TypeError",
    "tensorflow.constant",
    "tensorflow_probability.python.internal.prefer_static.cond"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.PreferStaticCondTest.testMissingArg2": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "TypeError",
    "tensorflow.constant",
    "tensorflow_probability.python.internal.prefer_static.cond"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.PreferStaticCondTest.testTrue": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.multiply",
    "tensorflow_probability.python.internal.prefer_static.cond"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.PreferStaticPredicatesTest": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.prefer_static_test.PreferStaticPredicatesTest.testStaticPredicate": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "absl.testing.parameterized.named_parameters",
    "args_fn",
    "dict",
    "predicate",
    "tensorflow.constant",
    "tensorflow.equal",
    "tensorflow_probability.python.internal.prefer_static.equal",
    "tensorflow_probability.python.internal.prefer_static.greater",
    "tensorflow_probability.python.internal.prefer_static.less",
    "tensorflow_probability.python.internal.prefer_static.logical_and",
    "tensorflow_probability.python.internal.prefer_static.logical_or",
    "tensorflow_probability.python.internal.prefer_static.reduce_all",
    "tensorflow_probability.python.internal.prefer_static.reduce_any"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.PreferStaticShapeTest": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.prefer_static_test.PreferStaticShapeTest.testRankFromShape": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "len",
    "numpy.ones",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.internal.prefer_static.rank_from_shape",
    "tensorflow_probability.python.internal.prefer_static.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.PreferStaticShapeTest.testShape": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.internal.prefer_static.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.prefer_static_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.prefer_static_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.prefer_static_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.prefer_static_test.prefer_static": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.prefer_static"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.prefer_static_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.prefer_static_test.raise_exception": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "RuntimeError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.raise_exception_in_eager_mode": {
  "data": {
   "lineno": 34
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.raise_exception_in_eager_mode.f": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.internal.prefer_static_test.raise_exception"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.prefer_static_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.prefer_static_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.reparameterization": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.reparameterization.ReparameterizationType"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.internal.reparameterization.FULLY_REPARAMETERIZED": {
  "data": {
   "lineno": 72
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.reparameterization.NOT_REPARAMETERIZED": {
  "data": {
   "lineno": 78
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.reparameterization.ReparameterizationType": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.reparameterization.ReparameterizationType.__eq__": {
  "data": {
   "lineno": 54
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.reparameterization.ReparameterizationType.__hash__": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "hash"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.reparameterization.ReparameterizationType.__init__": {
  "data": {
   "lineno": 45
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.reparameterization.ReparameterizationType.__repr__": {
  "data": {
   "lineno": 48
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.reparameterization.__all__": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.reparameterization.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.reparameterization.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.reparameterization.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.special_math": {
  "data": {
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.float64"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT32_LOWER": {
  "data": {
   "lineno": 101
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT32_UPPER": {
  "data": {
   "lineno": 108
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT64_LOWER": {
  "data": {
   "lineno": 100
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT64_UPPER": {
  "data": {
   "lineno": 107
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.special_math.__all__": {
  "data": {
   "lineno": 84
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.special_math._double_factorial": {
  "data": {
   "lineno": 433,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.prod"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math._log_ndtr_asymptotic_series": {
  "data": {
   "lineno": 392,
   "symbols_in_volume": [
    "_double_factorial",
    "npdt",
    "range",
    "tensorflow.compat.v2.square",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math._log_ndtr_lower": {
  "data": {
   "lineno": 384,
   "symbols_in_volume": [
    "_log_ndtr_asymptotic_series",
    "numpy.log",
    "numpy.pi",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.square"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math._ndtr": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "numpy.sqrt",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.greater",
    "tensorflow.compat.v2.less",
    "tensorflow.compat.v2.math.erf",
    "tensorflow.compat.v2.math.erfc"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math._ndtri": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "_create_polynomial",
    "list",
    "numpy.exp",
    "numpy.expm1",
    "numpy.inf",
    "numpy.pi",
    "numpy.sqrt",
    "reversed",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.fill",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.sqrt",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math._ndtri._create_polynomial": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "_create_polynomial",
    "numpy.array",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.special_math.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.special_math.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.special_math.erfinv": {
  "data": {
   "lineno": 411,
   "symbols_in_volume": [
    "TypeError",
    "numpy.float32",
    "numpy.float64",
    "numpy.sqrt",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype",
    "tensorflow_probability.python.internal.dtype_util.name",
    "tensorflow_probability.python.internal.special_math.ndtri"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math.log_cdf_laplace": {
  "data": {
   "lineno": 438,
   "symbols_in_volume": [
    "numpy.log",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.exp",
    "tensorflow.compat.v2.math.log1p",
    "tensorflow.compat.v2.name_scope"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math.log_ndtr": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "_log_ndtr_lower",
    "int",
    "isinstance",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.float64",
    "tensorflow.compat.v2.greater",
    "tensorflow.compat.v2.math.log",
    "tensorflow.compat.v2.maximum",
    "tensorflow.compat.v2.minimum",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.internal.dtype_util.base_equal",
    "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT32_LOWER",
    "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT32_UPPER",
    "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT64_LOWER",
    "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT64_UPPER",
    "tensorflow_probability.python.internal.special_math._ndtr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math.ndtr": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "TypeError",
    "_ndtr",
    "numpy.float32",
    "numpy.float64",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math.ndtri": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "TypeError",
    "_ndtri",
    "numpy.float32",
    "numpy.float64",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.special_math.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.special_math.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.special_math.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.special_math_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.python.internal.special_math_test.collections",
    "tensorflow_probability.python.internal.special_math_test.try_import"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.internal.special_math_test.ErfInvTest": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.special_math_test.ErfInvTest.testErfInvIntegerInput": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": [
    "TypeError",
    "numpy.array",
    "numpy.int32",
    "numpy.int64",
    "tensorflow_probability.python.internal.special_math.erfinv"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.ErfInvTest.testErfInvValues": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.linspace",
    "tensorflow_probability.python.internal.special_math.erfinv",
    "tensorflow_probability.python.internal.special_math_test.special"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.ErrorSpec": {
  "data": {
   "lineno": 66
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.special_math_test.GridSpec": {
  "data": {
   "lineno": 64
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.special_math_test.LogCDFLaplaceTest": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": [
    "numpy.finfo",
    "numpy.float32",
    "numpy.float64",
    "numpy.log",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.special_math_test.LogCDFLaplaceTest._test_grid_log": {
  "data": {
   "lineno": 361,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.isfinite",
    "tensorflow_probability.python.internal.special_math.log_cdf_laplace",
    "tensorflow_probability.python.internal.special_math_test._check_strictly_increasing",
    "tensorflow_probability.python.internal.special_math_test._make_grid",
    "tensorflow_probability.python.internal.special_math_test.stats"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.LogCDFLaplaceTest.assertAllTrue": {
  "data": {
   "lineno": 358,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.LogCDFLaplaceTest.test_float32_all_segments_with_scipy_float64_ok": {
  "data": {
   "lineno": 392,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.float64",
    "tensorflow_probability.python.internal.special_math_test.ErrorSpec",
    "tensorflow_probability.python.internal.special_math_test.GridSpec"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.LogCDFLaplaceTest.test_float32_extreme_values_result_and_gradient_finite_and_nonzero": {
  "data": {
   "lineno": 402,
   "symbols_in_volume": [
    "numpy.any",
    "numpy.float32",
    "numpy.isfinite",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.internal.special_math.log_cdf_laplace",
    "tensorflow_probability.python.internal.special_math_test.GridSpec",
    "tensorflow_probability.python.internal.special_math_test._make_grid",
    "tensorflow_probability.python.math.gradient.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.LogCDFLaplaceTest.test_float32_lower_and_mid_segment_scipy_float32_ok": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow_probability.python.internal.special_math_test.ErrorSpec",
    "tensorflow_probability.python.internal.special_math_test.GridSpec"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.LogCDFLaplaceTest.test_float64_extreme_values_result_and_gradient_finite_and_nonzero": {
  "data": {
   "lineno": 418,
   "symbols_in_volume": [
    "numpy.any",
    "numpy.float64",
    "numpy.isfinite",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.internal.special_math.log_cdf_laplace",
    "tensorflow_probability.python.internal.special_math_test.GridSpec",
    "tensorflow_probability.python.internal.special_math_test._make_grid",
    "tensorflow_probability.python.math.gradient.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.LogNdtrGradientTest": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.special_math_test.NdtrGradientTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.special_math_test.LogNdtrTestLower": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT32_LOWER",
    "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT64_LOWER",
    "tensorflow_probability.python.internal.special_math_test.ErrorSpec",
    "tensorflow_probability.python.internal.special_math_test.GridSpec",
    "tensorflow_probability.python.internal.special_math_test.NdtrTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.special_math_test.LogNdtrTestMid": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT32_LOWER",
    "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT32_UPPER",
    "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT64_LOWER",
    "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT64_UPPER",
    "tensorflow_probability.python.internal.special_math_test.ErrorSpec",
    "tensorflow_probability.python.internal.special_math_test.GridSpec",
    "tensorflow_probability.python.internal.special_math_test.NdtrTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.special_math_test.LogNdtrTestUpper": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT32_UPPER",
    "tensorflow_probability.python.internal.special_math.LOGNDTR_FLOAT64_UPPER",
    "tensorflow_probability.python.internal.special_math_test.ErrorSpec",
    "tensorflow_probability.python.internal.special_math_test.GridSpec",
    "tensorflow_probability.python.internal.special_math_test.NdtrTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtrGradientTest": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.internal.special_math_test.ErrorSpec",
    "tensorflow_probability.python.internal.special_math_test.GridSpec"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtrGradientTest._test_grad_accuracy": {
  "data": {
   "lineno": 271,
   "symbols_in_volume": [
    "int",
    "len",
    "numpy.ceil",
    "numpy.float64",
    "numpy.isfinite",
    "numpy.isnan",
    "numpy.reshape",
    "tensorflow_probability.python.internal.special_math.log_ndtr",
    "tensorflow_probability.python.internal.special_math.ndtr",
    "tensorflow_probability.python.internal.special_math_test._make_grid",
    "tensorflow_probability.python.internal.special_math_test.special",
    "tensorflow_probability.python.internal.special_math_test.stats",
    "tensorflow_probability.python.math.gradient.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtrGradientTest._test_grad_finite": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": [
    "numpy.isfinite",
    "tensorflow.constant",
    "tensorflow_probability.python.internal.special_math.log_ndtr",
    "tensorflow_probability.python.internal.special_math.ndtr",
    "tensorflow_probability.python.math.gradient.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtrGradientTest.assert_all_false": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtrGradientTest.assert_all_true": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtrGradientTest.test_float32": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "numpy.float32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtrGradientTest.test_float64": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": [
    "numpy.float64"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtrTest": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.internal.special_math_test.ErrorSpec",
    "tensorflow_probability.python.internal.special_math_test.GridSpec"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtrTest._test_grid": {
  "data": {
   "lineno": 134
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtrTest._test_grid_log": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.isfinite",
    "tensorflow_probability.python.internal.special_math.log_ndtr",
    "tensorflow_probability.python.internal.special_math_test._check_strictly_increasing",
    "tensorflow_probability.python.internal.special_math_test._make_grid",
    "tensorflow_probability.python.internal.special_math_test.special"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtrTest._test_grid_no_log": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.isfinite",
    "tensorflow_probability.python.internal.special_math.ndtr",
    "tensorflow_probability.python.internal.special_math_test._check_strictly_increasing",
    "tensorflow_probability.python.internal.special_math_test._make_grid",
    "tensorflow_probability.python.internal.special_math_test.special"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtrTest.test_float32": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "numpy.float32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtrTest.test_float64": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "numpy.float64"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtriTest": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtriTest._baseNdtriFiniteGradientTest": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "tensorflow.constant",
    "tensorflow_probability.python.internal.special_math.ndtri",
    "tensorflow_probability.python.math.gradient.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtriTest.assertAllFinite": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.isfinite",
    "numpy.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtriTest.testNdtri": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.float64",
    "numpy.hstack",
    "numpy.linspace",
    "tensorflow_probability.python.internal.special_math.ndtri",
    "tensorflow_probability.python.internal.special_math_test.special"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtriTest.testNdtriDynamicShape": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.linspace",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.internal.special_math.ndtri",
    "tensorflow_probability.python.internal.special_math_test.special"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtriTest.testNdtriFiniteGradientFloat32": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "numpy.float32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.NdtriTest.testNdtriFiniteGradientFloat64": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "numpy.float64"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test._check_strictly_increasing": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "numpy.diff",
    "numpy.testing.assert_array_less"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test._make_grid": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "numpy.linspace",
    "numpy.prod",
    "numpy.random.RandomState",
    "numpy.reshape",
    "numpy.sort"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.special_math_test.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.special_math_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.special_math_test.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.special_math_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.special_math_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.special_math_test.special": {
  "data": {
   "lineno": 43
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.special_math_test.special_math": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.special_math"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.special_math_test.stats": {
  "data": {
   "lineno": 44
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.special_math_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.special_math_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.special_math_test.try_import": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "ImportError",
    "str",
    "tensorflow.compat.v1.logging.warning",
    "tensorflow_probability.python.internal.special_math_test.importlib"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.special_math_test.value_and_gradient": {
  "data": {
   "shadows": "tensorflow_probability.python.math.gradient.value_and_gradient"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.tensorshape_util": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.internal.tensorshape_util.__all__": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.tensorshape_util.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.tensorshape_util.as_list": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensorshape_util.assert_has_rank": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensorshape_util.assert_is_compatible_with": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensorshape_util.concatenate": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensorshape_util.constant_value_as_shape": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "tensorflow.compat.v2.get_static_value",
    "tensorflow.python.framework.tensor_util.constant_value_as_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensorshape_util.dims": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "map",
    "tensorflow.compat.v2.TensorShape",
    "tensorflow.compat.v2.compat.dimension_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensorshape_util.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.tensorshape_util.is_compatible_with": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensorshape_util.is_fully_defined": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensorshape_util.merge_with": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensorshape_util.num_elements": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensorshape_util.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.tensorshape_util.rank": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensorshape_util.set_shape": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.tensorshape_util.tensor_util": {
  "data": {
   "shadows": "tensorflow.python.framework.tensor_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.tensorshape_util.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.tensorshape_util.with_rank_at_least": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorShape",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_case": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.internal.test_case.TestCase": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.test_case.TestCase.assertAllFinite": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.isfinite",
    "numpy.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_case.TestCase.assertAllNan": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.isnan",
    "numpy.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_case.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.test_case.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_case.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_case.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_case.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_case.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_case_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.internal.test_case_test.TestCaseTestFloat32": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "tensorflow.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase",
    "tensorflow_probability.python.internal.test_case_test._TestCaseTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.test_case_test.TestCaseTestFloat64": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "tensorflow.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase",
    "tensorflow_probability.python.internal.test_case_test._TestCaseTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.test_case_test._TestCaseTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.test_case_test._TestCaseTest.setUp": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "numpy.random.seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_case_test._TestCaseTest.test_assert_all_finite_input_finite": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.linspace",
    "tensorflow.reshape",
    "tensorflow_probability.python.internal.dtype_util.max",
    "tensorflow_probability.python.internal.dtype_util.min"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_case_test._TestCaseTest.test_assert_all_finite_input_inf": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "AssertionError",
    "numpy.inf",
    "numpy.linspace",
    "tensorflow.convert_to_tensor",
    "tensorflow.reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_case_test._TestCaseTest.test_assert_all_finite_input_nan": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "AssertionError",
    "numpy.linspace",
    "numpy.nan",
    "tensorflow.convert_to_tensor",
    "tensorflow.reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_case_test._TestCaseTest.test_assert_all_finite_input_py_literal": {
  "data": {
   "lineno": 74
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_case_test._TestCaseTest.test_assert_all_nan_input_all_nan": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "numpy.full",
    "numpy.nan",
    "tensorflow.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_case_test._TestCaseTest.test_assert_all_nan_input_inf": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "AssertionError",
    "numpy.full",
    "numpy.inf",
    "tensorflow.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_case_test._TestCaseTest.test_assert_all_nan_input_numpy_rand": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "AssertionError",
    "numpy.random.rand",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_case_test._TestCaseTest.test_assert_all_nan_input_placeholder_with_default": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "numpy.full",
    "numpy.nan",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.internal.dtype_util.as_numpy_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_case_test._TestCaseTest.test_assert_all_nan_input_some_nan": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "AssertionError",
    "numpy.nan",
    "numpy.random.rand",
    "tensorflow.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_case_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_case_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_case_test.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_case_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_case_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_case_test.test_case": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_case"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_case_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_case_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_util": {
  "data": {
   "symbols_in_volume": [
    "absl.flags.DEFINE_bool",
    "absl.flags.DEFINE_string",
    "absl.flags.FLAGS"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.internal.test_util.DiscreteScalarDistributionTestHelpers": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.test_util.DiscreteScalarDistributionTestHelpers.histogram": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.histogram_fixed_width",
    "tensorflow.int32",
    "tensorflow.range",
    "tensorflow.reduce_max",
    "tensorflow.reduce_min",
    "tensorflow_probability.python.internal.dtype_util.base_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util.DiscreteScalarDistributionTestHelpers.run_test_sample_consistent_log_prob": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "ValueError",
    "enumerate",
    "int",
    "sess_run_fn",
    "tensorflow.exp",
    "tensorflow.pad",
    "tensorflow.reduce_prod",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow.unstack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util.DiscreteScalarDistributionTestHelpers.run_test_sample_consistent_mean_variance": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "int",
    "sess_run_fn",
    "tensorflow.cast",
    "tensorflow.float32",
    "tensorflow.reduce_mean",
    "tensorflow.sqrt",
    "tensorflow.square"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util.FLAGS": {
  "data": {
   "lineno": 49
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers": {
  "data": {
   "lineno": 397,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers.run_test_sample_consistent_log_prob": {
  "data": {
   "lineno": 400,
   "symbols_in_volume": [
    "actual_hypersphere_volume",
    "int",
    "monte_carlo_hypersphere_volume",
    "numpy.tile",
    "sess_run_fn",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.name_scope"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers.run_test_sample_consistent_log_prob.actual_hypersphere_volume": {
  "data": {
   "lineno": 479,
   "symbols_in_volume": [
    "numpy.asarray",
    "numpy.log",
    "numpy.pi",
    "tensorflow.cast",
    "tensorflow.exp",
    "tensorflow.math.lgamma",
    "tensorflow.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers.run_test_sample_consistent_log_prob.monte_carlo_hypersphere_volume": {
  "data": {
   "lineno": 488,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.exp",
    "tensorflow.identity",
    "tensorflow.norm",
    "tensorflow.reduce_mean",
    "tensorflow.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util.VectorDistributionTestHelpers.run_test_sample_consistent_mean_covariance": {
  "data": {
   "lineno": 521,
   "symbols_in_volume": [
    "_vec_outer_square",
    "int",
    "sess_run_fn",
    "tensorflow.linalg.diag_part",
    "tensorflow.reduce_mean",
    "tensorflow.sqrt"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util.__all__": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.test_util._compute_rank_and_fullsize_reqd": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "draw",
    "hypothesis.strategies.integers",
    "range",
    "tensorflow.TensorShape",
    "tensorflow.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util._vec_outer_square": {
  "data": {
   "lineno": 592,
   "symbols_in_volume": [
    "tensorflow.compat.v2.name_scope",
    "tensorflow.newaxis"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_util.broadcasting_shapes": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "draw",
    "enumerate",
    "hypothesis.strategies.booleans",
    "hypothesis.strategies.composite",
    "tensorflow.TensorShape",
    "tensorflow.broadcast_static_shape",
    "tensorflow_probability.python.internal.test_util._compute_rank_and_fullsize_reqd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util.derandomize_hypothesis": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "tensorflow_probability.python.internal.test_util.os"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_util.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_util.flags": {
  "data": {
   "shadows": "absl.flags"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_util.hps": {
  "data": {
   "shadows": "hypothesis.strategies"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_util.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_util.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_util.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_util.seed_stream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_util.six": {
  "data": {
   "shadows": "six"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_util.test_seed": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "int",
    "int.from_bytes",
    "tensorflow.compat.v1.logging.warning",
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.internal.test_util.FLAGS",
    "tensorflow_probability.python.internal.test_util.os",
    "tensorflow_probability.python.internal.test_util.six"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util.test_seed_stream": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.seed_stream.SeedStream",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_util_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "absl.flags.FLAGS",
    "tensorflow.compat.v2.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.internal.test_util_test.FLAGS": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.internal.test_util_test.SeedSettingTest": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow.compat.v2.test.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.internal.test_util_test.SeedSettingTest.testFixing": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "absl.testing.flagsaver.flagsaver",
    "tensorflow_probability.python.internal.test_util.test_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util_test.SeedSettingTest.testSameness": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "absl.testing.flagsaver.flagsaver",
    "tensorflow_probability.python.internal.test_util.test_seed",
    "tensorflow_probability.python.internal.test_util.test_seed_stream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util_test.SeedSettingTest.testTypeCorrectness": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "isinstance",
    "tensorflow_probability.python.distributions.seed_stream.SeedStream",
    "tensorflow_probability.python.internal.test_util.test_seed_stream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util_test.SeedSettingTest.testVariation": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "absl.testing.flagsaver.flagsaver",
    "tensorflow_probability.python.internal.test_util.test_seed",
    "tensorflow_probability.python.internal.test_util.test_seed_stream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.internal.test_util_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_util_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_util_test.flags": {
  "data": {
   "shadows": "absl.flags"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_util_test.flagsaver": {
  "data": {
   "shadows": "absl.testing.flagsaver"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_util_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_util_test.seed_stream": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.seed_stream"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_util_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_util_test.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.internal.test_util_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.layers.AutoregressiveTransform": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.masked_autoregressive.AutoregressiveTransform"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.BlockwiseInitializer": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.initializers.BlockwiseInitializer"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.CategoricalMixtureOfOneHotCategorical": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.distribution_layer.CategoricalMixtureOfOneHotCategorical"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.Convolution1DFlipout": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.conv_variational.Convolution1DFlipout"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.Convolution1DReparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.conv_variational.Convolution1DReparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.Convolution2DFlipout": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.conv_variational.Convolution2DFlipout"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.Convolution2DReparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.conv_variational.Convolution2DReparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.Convolution3DFlipout": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.conv_variational.Convolution3DFlipout"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.Convolution3DReparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.conv_variational.Convolution3DReparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.DenseFlipout": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.dense_variational.DenseFlipout"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.DenseLocalReparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.dense_variational.DenseLocalReparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.DenseReparameterization": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.dense_variational.DenseReparameterization"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.DenseVariational": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.dense_variational_v2.DenseVariational"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.DistributionLambda": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.distribution_layer.DistributionLambda"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.IndependentBernoulli": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.distribution_layer.IndependentBernoulli"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.IndependentLogistic": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.distribution_layer.IndependentLogistic"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.IndependentNormal": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.distribution_layer.IndependentNormal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.IndependentPoisson": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.distribution_layer.IndependentPoisson"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.KLDivergenceAddLoss": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.distribution_layer.KLDivergenceAddLoss"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.KLDivergenceRegularizer": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.distribution_layer.KLDivergenceRegularizer"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.MixtureLogistic": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.distribution_layer.MixtureLogistic"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.MixtureNormal": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.distribution_layer.MixtureNormal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.MixtureSameFamily": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.distribution_layer.MixtureSameFamily"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.MultivariateNormalTriL": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.distribution_layer.MultivariateNormalTriL"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.OneHotCategorical": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.distribution_layer.OneHotCategorical"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.VariableLayer": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.variable_input.VariableLayer"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.VariationalGaussianProcess": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.distribution_layer.VariationalGaussianProcess"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers._allowed_symbols": {
  "data": {
   "lineno": 52
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.conv_variational": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.conv_variational.Conv1DFlipout",
    "tensorflow_probability.python.layers.conv_variational.Conv1DReparameterization",
    "tensorflow_probability.python.layers.conv_variational.Conv2DFlipout",
    "tensorflow_probability.python.layers.conv_variational.Conv2DReparameterization",
    "tensorflow_probability.python.layers.conv_variational.Conv3DFlipout",
    "tensorflow_probability.python.layers.conv_variational.Conv3DReparameterization"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.layers.conv_variational.Conv1DFlipout": {
  "data": {
   "lineno": 1129,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.conv_variational._ConvFlipout"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational.Conv1DFlipout.__init__": {
  "data": {
   "lineno": 1201,
   "symbols_in_volume": [
    "super",
    "tensorflow.keras.activations.get",
    "tensorflow_probability.python.distributions.kl_divergence",
    "tensorflow_probability.python.layers.conv_variational.Conv1DFlipout",
    "tensorflow_probability.python.layers.conv_variational.doc_args",
    "tensorflow_probability.python.layers.util.default_mean_field_normal_fn",
    "tensorflow_probability.python.layers.util.default_multivariate_normal_fn",
    "tensorflow_probability.python.util.docstring.expand_docstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational.Conv1DReparameterization": {
  "data": {
   "lineno": 520,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.conv_variational._ConvReparameterization"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational.Conv1DReparameterization.__init__": {
  "data": {
   "lineno": 593,
   "symbols_in_volume": [
    "super",
    "tensorflow.keras.activations.get",
    "tensorflow_probability.python.distributions.kl_divergence",
    "tensorflow_probability.python.layers.conv_variational.Conv1DReparameterization",
    "tensorflow_probability.python.layers.conv_variational.doc_args",
    "tensorflow_probability.python.layers.util.default_mean_field_normal_fn",
    "tensorflow_probability.python.layers.util.default_multivariate_normal_fn",
    "tensorflow_probability.python.util.docstring.expand_docstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational.Conv2DFlipout": {
  "data": {
   "lineno": 1271,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.conv_variational._ConvFlipout"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational.Conv2DFlipout.__init__": {
  "data": {
   "lineno": 1346,
   "symbols_in_volume": [
    "super",
    "tensorflow.keras.activations.get",
    "tensorflow_probability.python.distributions.kl_divergence",
    "tensorflow_probability.python.layers.conv_variational.Conv2DFlipout",
    "tensorflow_probability.python.layers.conv_variational.doc_args",
    "tensorflow_probability.python.layers.util.default_mean_field_normal_fn",
    "tensorflow_probability.python.layers.util.default_multivariate_normal_fn",
    "tensorflow_probability.python.util.docstring.expand_docstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational.Conv2DReparameterization": {
  "data": {
   "lineno": 659,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.conv_variational._ConvReparameterization"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational.Conv2DReparameterization.__init__": {
  "data": {
   "lineno": 735,
   "symbols_in_volume": [
    "super",
    "tensorflow.keras.activations.get",
    "tensorflow_probability.python.distributions.kl_divergence",
    "tensorflow_probability.python.layers.conv_variational.Conv2DReparameterization",
    "tensorflow_probability.python.layers.conv_variational.doc_args",
    "tensorflow_probability.python.layers.util.default_mean_field_normal_fn",
    "tensorflow_probability.python.layers.util.default_multivariate_normal_fn",
    "tensorflow_probability.python.util.docstring.expand_docstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational.Conv3DFlipout": {
  "data": {
   "lineno": 1422,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.conv_variational._ConvFlipout"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational.Conv3DFlipout.__init__": {
  "data": {
   "lineno": 1497,
   "symbols_in_volume": [
    "super",
    "tensorflow.keras.activations.get",
    "tensorflow_probability.python.distributions.kl_divergence",
    "tensorflow_probability.python.layers.conv_variational.Conv3DFlipout",
    "tensorflow_probability.python.layers.conv_variational.doc_args",
    "tensorflow_probability.python.layers.util.default_mean_field_normal_fn",
    "tensorflow_probability.python.layers.util.default_multivariate_normal_fn",
    "tensorflow_probability.python.util.docstring.expand_docstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational.Conv3DReparameterization": {
  "data": {
   "lineno": 807,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.conv_variational._ConvReparameterization"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational.Conv3DReparameterization.__init__": {
  "data": {
   "lineno": 879,
   "symbols_in_volume": [
    "super",
    "tensorflow.keras.activations.get",
    "tensorflow_probability.python.distributions.kl_divergence",
    "tensorflow_probability.python.layers.conv_variational.Conv3DReparameterization",
    "tensorflow_probability.python.layers.conv_variational.doc_args",
    "tensorflow_probability.python.layers.util.default_mean_field_normal_fn",
    "tensorflow_probability.python.layers.util.default_multivariate_normal_fn",
    "tensorflow_probability.python.util.docstring.expand_docstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational.Convolution1DFlipout": {
  "data": {
   "lineno": 1579
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.conv_variational.Convolution1DReparameterization": {
  "data": {
   "lineno": 1576
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.conv_variational.Convolution2DFlipout": {
  "data": {
   "lineno": 1580
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.conv_variational.Convolution2DReparameterization": {
  "data": {
   "lineno": 1577
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.conv_variational.Convolution3DFlipout": {
  "data": {
   "lineno": 1581
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.conv_variational.Convolution3DReparameterization": {
  "data": {
   "lineno": 1578
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvFlipout": {
  "data": {
   "lineno": 952,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.conv_variational._ConvVariational"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvFlipout.__init__": {
  "data": {
   "lineno": 984,
   "symbols_in_volume": [
    "super",
    "tensorflow.keras.activations.get",
    "tensorflow_probability.python.distributions.kl_divergence",
    "tensorflow_probability.python.layers.conv_variational._ConvFlipout",
    "tensorflow_probability.python.layers.conv_variational.doc_args",
    "tensorflow_probability.python.layers.util.default_mean_field_normal_fn",
    "tensorflow_probability.python.layers.util.default_multivariate_normal_fn",
    "tensorflow_probability.python.util.docstring.expand_docstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvFlipout._apply_variational_kernel": {
  "data": {
   "lineno": 1057,
   "symbols_in_volume": [
    "TypeError",
    "isinstance",
    "range",
    "seed_stream",
    "tensorflow.concat",
    "tensorflow.expand_dims",
    "tensorflow.shape",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.distributions.Independent",
    "tensorflow_probability.python.distributions.Normal",
    "tensorflow_probability.python.distributions.SeedStream",
    "tensorflow_probability.python.math.random_rademacher",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvFlipout.get_config": {
  "data": {
   "lineno": 1111,
   "symbols_in_volume": [
    "dict",
    "list",
    "super",
    "tensorflow_probability.python.layers.conv_variational._ConvFlipout"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvReparameterization": {
  "data": {
   "lineno": 414,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.conv_variational._ConvVariational"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvReparameterization.__init__": {
  "data": {
   "lineno": 443,
   "symbols_in_volume": [
    "super",
    "tensorflow.keras.activations.get",
    "tensorflow_probability.python.distributions.kl_divergence",
    "tensorflow_probability.python.layers.conv_variational._ConvReparameterization",
    "tensorflow_probability.python.layers.conv_variational.doc_args",
    "tensorflow_probability.python.layers.util.default_mean_field_normal_fn",
    "tensorflow_probability.python.layers.util.default_multivariate_normal_fn",
    "tensorflow_probability.python.util.docstring.expand_docstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvReparameterization._apply_variational_kernel": {
  "data": {
   "lineno": 511
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvVariational": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "tensorflow.keras.layers.Layer"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvVariational.__init__": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "super",
    "tensorflow.keras.activations.get",
    "tensorflow.keras.layers.InputSpec",
    "tensorflow.python.layers.utils.normalize_data_format",
    "tensorflow.python.layers.utils.normalize_padding",
    "tensorflow.python.layers.utils.normalize_tuple",
    "tensorflow_probability.python.distributions.kl_divergence",
    "tensorflow_probability.python.layers.conv_variational._ConvVariational",
    "tensorflow_probability.python.layers.conv_variational.doc_args",
    "tensorflow_probability.python.layers.util.default_mean_field_normal_fn",
    "tensorflow_probability.python.layers.util.default_multivariate_normal_fn",
    "tensorflow_probability.python.util.docstring.expand_docstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvVariational._apply_divergence": {
  "data": {
   "lineno": 401,
   "symbols_in_volume": [
    "divergence_fn",
    "tensorflow.identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvVariational._apply_variational_bias": {
  "data": {
   "lineno": 365,
   "symbols_in_volume": [
    "tensorflow.nn.bias_add",
    "tensorflow.reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvVariational.build": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.TensorShape",
    "tensorflow.as_dtype",
    "tensorflow.compat.dimension_value",
    "tensorflow.keras.backend.floatx",
    "tensorflow.keras.layers.InputSpec",
    "tensorflow.python.layers.utils.convert_data_format",
    "tensorflow.python.ops.nn_ops.Convolution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvVariational.call": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": [
    "tensorflow.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvVariational.compute_output_shape": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "len",
    "range",
    "tensorflow.TensorShape",
    "tensorflow.python.layers.utils.conv_output_length"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvVariational.from_config": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": [
    "classmethod",
    "cls",
    "tensorflow_probability.python.layers.util.deserialize_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational._ConvVariational.get_config": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": [
    "dict",
    "getattr",
    "list",
    "super",
    "tensorflow.keras.activations.serialize",
    "tensorflow.keras.initializers.serialize",
    "tensorflow_probability.python.layers.conv_variational._ConvVariational",
    "tensorflow_probability.python.layers.util.serialize_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational.__all__": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.conv_variational.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.conv_variational.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.conv_variational.doc_args": {
  "data": {
   "lineno": 41
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.conv_variational.docstring_util": {
  "data": {
   "shadows": "tensorflow_probability.python.util.docstring"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.conv_variational.nn_ops": {
  "data": {
   "shadows": "tensorflow.python.ops.nn_ops"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.conv_variational.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.conv_variational.random_rademacher": {
  "data": {
   "shadows": "tensorflow_probability.python.math.random_rademacher"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.conv_variational.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.conv_variational.tf_layers_util": {
  "data": {
   "shadows": "tensorflow.python.layers.utils"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.conv_variational.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.conv_variational.tfp_layers_util": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.conv_variational_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.python.ops.nn_ops.Convolution",
    "tensorflow.test.main",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.layers.conv_variational_test.CPUConvolution"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.layers.conv_variational_test.CPUConvolution": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "tensorflow.python.ops.nn_ops.Convolution"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational_test.CPUConvolution.__call__": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "list",
    "range",
    "super",
    "tensorflow.transpose",
    "tensorflow_probability.python.layers.conv_variational_test.CPUConvolution",
    "tensorflow_probability.python.layers.conv_variational_test.channels_first_to_last",
    "tensorflow_probability.python.layers.conv_variational_test.channels_last_to_first"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.CPUConvolution.__init__": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "super",
    "tensorflow.TensorShape",
    "tensorflow_probability.python.layers.conv_variational_test.CPUConvolution",
    "tensorflow_probability.python.layers.conv_variational_test.channels_first_to_last"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "object",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational._testConvFlipout": {
  "data": {
   "lineno": 420,
   "symbols_in_volume": [
    "convolution_op",
    "layer",
    "layer.bias_posterior_tensor",
    "layer.seed",
    "layer_class",
    "len",
    "range",
    "seed_stream",
    "tensorflow.TensorShape",
    "tensorflow.cast",
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow.concat",
    "tensorflow.expand_dims",
    "tensorflow.int64",
    "tensorflow.nn.bias_add",
    "tensorflow.python.layers.utils.convert_data_format",
    "tensorflow.python.ops.nn_ops.Convolution",
    "tensorflow.random.uniform",
    "tensorflow.shape",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.layers.conv_variational_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational._testConvReparameterization": {
  "data": {
   "lineno": 356,
   "symbols_in_volume": [
    "convolution_op",
    "layer",
    "layer.bias_posterior_tensor",
    "layer.kernel_posterior_tensor",
    "layer_class",
    "tensorflow.TensorShape",
    "tensorflow.nn.bias_add",
    "tensorflow.python.layers.utils.convert_data_format",
    "tensorflow.python.ops.nn_ops.Convolution",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational._testConvSetUp": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "layer",
    "layer.get_losses_for",
    "layer_class",
    "seed",
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow.random.uniform",
    "tensorflow_probability.layers.Convolution1DFlipout",
    "tensorflow_probability.layers.Convolution1DReparameterization",
    "tensorflow_probability.layers.Convolution2DFlipout",
    "tensorflow_probability.layers.Convolution2DReparameterization",
    "tensorflow_probability.layers.Convolution3DFlipout",
    "tensorflow_probability.layers.Convolution3DReparameterization",
    "tensorflow_probability.python.layers.conv_variational_test.Counter",
    "tensorflow_probability.python.layers.conv_variational_test.MockDistribution",
    "tensorflow_probability.python.layers.conv_variational_test.MockKLDivergence"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational._testKLPenaltyBoth": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": [
    "layer",
    "layer.get_losses_for",
    "layer.losses",
    "layer.losses.shape",
    "layer_class",
    "len",
    "tensorflow.random.uniform",
    "tensorflow_probability.layers.Convolution1DFlipout",
    "tensorflow_probability.layers.Convolution1DReparameterization",
    "tensorflow_probability.layers.Convolution2DFlipout",
    "tensorflow_probability.layers.Convolution2DReparameterization",
    "tensorflow_probability.layers.Convolution3DFlipout",
    "tensorflow_probability.layers.Convolution3DReparameterization",
    "tensorflow_probability.layers.default_mean_field_normal_fn",
    "tensorflow_probability.layers.default_multivariate_normal_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational._testKLPenaltyKernel": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "layer",
    "layer.get_losses_for",
    "layer.losses",
    "layer.losses.shape",
    "layer_class",
    "len",
    "tensorflow.random.uniform",
    "tensorflow_probability.layers.Convolution1DFlipout",
    "tensorflow_probability.layers.Convolution1DReparameterization",
    "tensorflow_probability.layers.Convolution2DFlipout",
    "tensorflow_probability.layers.Convolution2DReparameterization",
    "tensorflow_probability.layers.Convolution3DFlipout",
    "tensorflow_probability.layers.Convolution3DReparameterization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational._testKerasLayer": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "tensorflow.keras.utils.CustomObjectScope",
    "tensorflow.python.keras.testing_utils.layer_test",
    "tensorflow_probability.layers.Convolution1DFlipout",
    "tensorflow_probability.layers.Convolution1DReparameterization",
    "tensorflow_probability.layers.Convolution2DFlipout",
    "tensorflow_probability.layers.Convolution2DReparameterization",
    "tensorflow_probability.layers.Convolution3DFlipout",
    "tensorflow_probability.layers.Convolution3DReparameterization",
    "tensorflow_probability.python.layers.conv_variational_test.channels_last_to_first"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational._testKerasLayer.kernel_posterior_fn": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "tensorflow.size",
    "tensorflow.zeros",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.layers.conv_variational_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational._testLayerInSequential": {
  "data": {
   "lineno": 598,
   "symbols_in_volume": [
    "layer_class",
    "net",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.keras.Sequential",
    "tensorflow.random.uniform",
    "tensorflow_probability.layers.Convolution1DFlipout",
    "tensorflow_probability.layers.Convolution1DReparameterization",
    "tensorflow_probability.layers.Convolution2DFlipout",
    "tensorflow_probability.layers.Convolution2DReparameterization",
    "tensorflow_probability.layers.Convolution3DFlipout",
    "tensorflow_probability.layers.Convolution3DReparameterization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational._testRandomConvFlipout": {
  "data": {
   "lineno": 531,
   "symbols_in_volume": [
    "layer_class",
    "layer_one",
    "layer_two",
    "numpy.isclose",
    "numpy.prod",
    "numpy.sum",
    "seed",
    "tensorflow.random.uniform",
    "tensorflow_probability.layers.Convolution1DFlipout",
    "tensorflow_probability.layers.Convolution1DReparameterization",
    "tensorflow_probability.layers.Convolution2DFlipout",
    "tensorflow_probability.layers.Convolution2DReparameterization",
    "tensorflow_probability.layers.Convolution3DFlipout",
    "tensorflow_probability.layers.Convolution3DReparameterization",
    "tensorflow_probability.python.layers.conv_variational_test.Counter",
    "tensorflow_probability.python.layers.conv_variational_test.MockDistribution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.maybe_transpose_inputs": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "list",
    "range",
    "tensorflow.transpose",
    "tensorflow_probability.python.layers.conv_variational_test.channels_last_to_first"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testConvolution1DFlipout": {
  "data": {
   "lineno": 683,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution1DFlipout"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testConvolution1DReparameterization": {
  "data": {
   "lineno": 674,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution1DReparameterization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testConvolution2DFlipout": {
  "data": {
   "lineno": 686,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution2DFlipout"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testConvolution2DReparameterization": {
  "data": {
   "lineno": 677,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution2DReparameterization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testConvolution3DFlipout": {
  "data": {
   "lineno": 689,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution3DFlipout"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testConvolution3DReparameterization": {
  "data": {
   "lineno": 680,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution3DReparameterization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKLPenaltyBothConvolution1DFlipout": {
  "data": {
   "lineno": 665,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution1DFlipout"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKLPenaltyBothConvolution1DReparameterization": {
  "data": {
   "lineno": 656,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution1DReparameterization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKLPenaltyBothConvolution2DFlipout": {
  "data": {
   "lineno": 668,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution2DFlipout"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKLPenaltyBothConvolution2DReparameterization": {
  "data": {
   "lineno": 659,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution2DReparameterization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKLPenaltyBothConvolution3DFlipout": {
  "data": {
   "lineno": 671,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution3DFlipout"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKLPenaltyBothConvolution3DReparameterization": {
  "data": {
   "lineno": 662,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution3DReparameterization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKLPenaltyKernelConvolution1DFlipout": {
  "data": {
   "lineno": 647,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution1DFlipout"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKLPenaltyKernelConvolution1DReparameterization": {
  "data": {
   "lineno": 638,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution1DReparameterization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKLPenaltyKernelConvolution2DFlipout": {
  "data": {
   "lineno": 650,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution2DFlipout"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKLPenaltyKernelConvolution2DReparameterization": {
  "data": {
   "lineno": 641,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution2DReparameterization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKLPenaltyKernelConvolution3DFlipout": {
  "data": {
   "lineno": 653,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution3DFlipout"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKLPenaltyKernelConvolution3DReparameterization": {
  "data": {
   "lineno": 644,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution3DReparameterization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKerasLayerConvolution1DFlipout": {
  "data": {
   "lineno": 629,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution1DFlipout"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKerasLayerConvolution1DReparameterization": {
  "data": {
   "lineno": 620,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution1DReparameterization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKerasLayerConvolution2DFlipout": {
  "data": {
   "lineno": 632,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution2DFlipout"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKerasLayerConvolution2DReparameterization": {
  "data": {
   "lineno": 623,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution2DReparameterization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKerasLayerConvolution3DFlipout": {
  "data": {
   "lineno": 635,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution3DFlipout"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testKerasLayerConvolution3DReparameterization": {
  "data": {
   "lineno": 626,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution3DReparameterization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testRandomConvolution1DFlipout": {
  "data": {
   "lineno": 692,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution1DFlipout"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testSequentialConvolution1DFlipout": {
  "data": {
   "lineno": 704,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution1DFlipout"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testSequentialConvolution1DReparameterization": {
  "data": {
   "lineno": 695,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution1DReparameterization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testSequentialConvolution2DFlipout": {
  "data": {
   "lineno": 707,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution2DFlipout"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testSequentialConvolution2DReparameterization": {
  "data": {
   "lineno": 698,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution2DReparameterization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testSequentialConvolution3DFlipout": {
  "data": {
   "lineno": 710,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution3DFlipout"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariational.testSequentialConvolution3DReparameterization": {
  "data": {
   "lineno": 701,
   "symbols_in_volume": [
    "tensorflow_probability.layers.Convolution3DReparameterization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariationalTestChannelsFirst": {
  "data": {
   "lineno": 714,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.layers.conv_variational_test.ConvVariational"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational_test.ConvVariationalTestChannelsLast": {
  "data": {
   "lineno": 719,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.layers.conv_variational_test.ConvVariational"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational_test.Counter": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational_test.Counter.__call__": {
  "data": {
   "lineno": 120
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.Counter.__init__": {
  "data": {
   "lineno": 113
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.Counter.value": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.MockDistribution": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.conv_variational_test.tfd"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational_test.MockDistribution.__init__": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.conv_variational_test.Counter",
    "tensorflow_probability.python.layers.conv_variational_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.MockDistribution.distribution": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.MockDistribution.loc": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.MockDistribution.log_prob": {
  "data": {
   "lineno": 142
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.MockDistribution.sample": {
  "data": {
   "lineno": 146
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.MockDistribution.scale": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.MockKLDivergence": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.conv_variational_test.MockKLDivergence.__call__": {
  "data": {
   "lineno": 173
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.MockKLDivergence.__init__": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.conv_variational_test.Counter"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.conv_variational_test.channels_first_to_last": {
  "data": {
   "lineno": 52
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.channels_last_to_first": {
  "data": {
   "lineno": 35
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.conv_variational_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.conv_variational_test.nn_ops": {
  "data": {
   "shadows": "tensorflow.python.ops.nn_ops"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.conv_variational_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.conv_variational_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.conv_variational_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.conv_variational_test.testing_utils": {
  "data": {
   "shadows": "tensorflow.python.keras.testing_utils"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.conv_variational_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.conv_variational_test.tf_layers_util": {
  "data": {
   "shadows": "tensorflow.python.layers.utils"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.conv_variational_test.tfd": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.conv_variational_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.default_loc_scale_fn": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.util.default_loc_scale_fn"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.default_mean_field_normal_fn": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.util.default_mean_field_normal_fn"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.default_multivariate_normal_fn": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.util.default_multivariate_normal_fn"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.layers.dense_variational.DenseFlipout": {
  "data": {
   "lineno": 566,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.dense_variational._DenseVariational"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.dense_variational.DenseFlipout.__init__": {
  "data": {
   "lineno": 633,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.distributions.kl_divergence",
    "tensorflow_probability.python.layers.dense_variational.DenseFlipout",
    "tensorflow_probability.python.layers.dense_variational.doc_args",
    "tensorflow_probability.python.layers.util.default_mean_field_normal_fn",
    "tensorflow_probability.python.layers.util.default_multivariate_normal_fn",
    "tensorflow_probability.python.util.docstring.expand_docstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational.DenseFlipout._apply_variational_kernel": {
  "data": {
   "lineno": 677,
   "symbols_in_volume": [
    "TypeError",
    "isinstance",
    "seed_stream",
    "tensorflow.concat",
    "tensorflow.expand_dims",
    "tensorflow.shape",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.distributions.Independent",
    "tensorflow_probability.python.distributions.Normal",
    "tensorflow_probability.python.distributions.SeedStream",
    "tensorflow_probability.python.math.random_rademacher"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational.DenseFlipout.get_config": {
  "data": {
   "lineno": 713,
   "symbols_in_volume": [
    "dict",
    "list",
    "super",
    "tensorflow_probability.python.layers.dense_variational.DenseFlipout"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational.DenseLocalReparameterization": {
  "data": {
   "lineno": 433,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.dense_variational._DenseVariational"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.dense_variational.DenseLocalReparameterization.__init__": {
  "data": {
   "lineno": 508,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.distributions.kl_divergence",
    "tensorflow_probability.python.layers.dense_variational.DenseLocalReparameterization",
    "tensorflow_probability.python.layers.dense_variational.doc_args",
    "tensorflow_probability.python.layers.util.default_mean_field_normal_fn",
    "tensorflow_probability.python.layers.util.default_multivariate_normal_fn",
    "tensorflow_probability.python.util.docstring.expand_docstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational.DenseLocalReparameterization._apply_variational_kernel": {
  "data": {
   "lineno": 547,
   "symbols_in_volume": [
    "TypeError",
    "isinstance",
    "tensorflow.sqrt",
    "tensorflow.square",
    "tensorflow_probability.python.distributions.Independent",
    "tensorflow_probability.python.distributions.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational.DenseReparameterization": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.dense_variational._DenseVariational"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.dense_variational.DenseReparameterization.__init__": {
  "data": {
   "lineno": 386,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.distributions.kl_divergence",
    "tensorflow_probability.python.layers.dense_variational.DenseReparameterization",
    "tensorflow_probability.python.layers.dense_variational.doc_args",
    "tensorflow_probability.python.layers.util.default_mean_field_normal_fn",
    "tensorflow_probability.python.layers.util.default_multivariate_normal_fn",
    "tensorflow_probability.python.util.docstring.expand_docstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational.DenseReparameterization._apply_variational_kernel": {
  "data": {
   "lineno": 425
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational._DenseVariational": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "tensorflow.keras.layers.Layer"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.dense_variational._DenseVariational.__init__": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "super",
    "tensorflow.keras.activations.get",
    "tensorflow.keras.layers.InputSpec",
    "tensorflow_probability.python.distributions.kl_divergence",
    "tensorflow_probability.python.layers.dense_variational._DenseVariational",
    "tensorflow_probability.python.layers.dense_variational.doc_args",
    "tensorflow_probability.python.layers.util.default_mean_field_normal_fn",
    "tensorflow_probability.python.layers.util.default_multivariate_normal_fn",
    "tensorflow_probability.python.util.docstring.expand_docstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational._DenseVariational._apply_divergence": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": [
    "divergence_fn",
    "tensorflow.identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational._DenseVariational._apply_variational_bias": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": [
    "tensorflow.nn.bias_add"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational._DenseVariational._matmul": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": [
    "tensorflow.matmul",
    "tensorflow.tensordot"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational._DenseVariational.build": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.TensorShape",
    "tensorflow.as_dtype",
    "tensorflow.compat.dimension_value",
    "tensorflow.keras.backend.floatx",
    "tensorflow.keras.layers.InputSpec"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational._DenseVariational.call": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "tensorflow.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational._DenseVariational.compute_output_shape": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.TensorShape",
    "tensorflow.compat.dimension_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational._DenseVariational.from_config": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "classmethod",
    "cls",
    "tensorflow_probability.python.layers.util.deserialize_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational._DenseVariational.get_config": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "dict",
    "getattr",
    "list",
    "super",
    "tensorflow.keras.activations.serialize",
    "tensorflow.keras.initializers.serialize",
    "tensorflow_probability.python.layers.dense_variational._DenseVariational",
    "tensorflow_probability.python.layers.util.serialize_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.dense_variational.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational.doc_args": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.dense_variational.docstring_util": {
  "data": {
   "shadows": "tensorflow_probability.python.util.docstring"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational.random_rademacher": {
  "data": {
   "shadows": "tensorflow_probability.python.math.random_rademacher"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational.tfp_layers_util": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.layers.dense_variational_test.Counter": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.dense_variational_test.Counter.__call__": {
  "data": {
   "lineno": 43
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.Counter.__init__": {
  "data": {
   "lineno": 36
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.Counter.value": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational._testDenseSetUp": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "layer",
    "layer.get_losses_for",
    "layer_class",
    "seed",
    "tensorflow.random.uniform",
    "tensorflow_probability.python.layers.dense_variational_test.Counter",
    "tensorflow_probability.python.layers.dense_variational_test.MockDistribution",
    "tensorflow_probability.python.layers.dense_variational_test.MockKLDivergence"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational._testKLPenaltyBoth": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "layer",
    "layer.get_losses_for",
    "layer.losses",
    "layer.losses.shape",
    "layer_class",
    "len",
    "tensorflow.random.uniform",
    "tensorflow_probability.layers.default_mean_field_normal_fn",
    "tensorflow_probability.layers.default_multivariate_normal_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational._testKLPenaltyKernel": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "layer",
    "layer.get_losses_for",
    "layer.losses",
    "layer.losses.shape",
    "layer_class",
    "len",
    "tensorflow.random.uniform"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational._testKerasLayer": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "tensorflow.keras.utils.CustomObjectScope",
    "tensorflow.python.keras.testing_utils.layer_test"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational._testKerasLayer.kernel_posterior_fn": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "tensorflow.ones",
    "tensorflow.size",
    "tensorflow.zeros",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.layers.dense_variational_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testDenseFlipout": {
  "data": {
   "lineno": 376,
   "symbols_in_volume": [
    "layer",
    "layer.bias_posterior_tensor",
    "layer.seed",
    "stream",
    "tensorflow.cast",
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow.int64",
    "tensorflow.matmul",
    "tensorflow.random.uniform",
    "tensorflow.zeros_like",
    "tensorflow_probability.layers.DenseFlipout",
    "tensorflow_probability.python.layers.dense_variational_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testDenseLayersInSequential": {
  "data": {
   "lineno": 503,
   "symbols_in_volume": [
    "net",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.keras.Sequential",
    "tensorflow.nn.relu",
    "tensorflow.random.uniform",
    "tensorflow_probability.layers.DenseFlipout",
    "tensorflow_probability.layers.DenseLocalReparameterization",
    "tensorflow_probability.layers.DenseReparameterization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testDenseLocalReparameterization": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": [
    "layer",
    "layer.bias_posterior_tensor",
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow.matmul",
    "tensorflow_probability.layers.DenseLocalReparameterization",
    "tensorflow_probability.python.layers.dense_variational_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testDenseReparameterization": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": [
    "layer",
    "layer.bias_posterior_tensor",
    "layer.kernel_posterior_tensor",
    "tensorflow.matmul",
    "tensorflow_probability.layers.DenseReparameterization",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testKLPenaltyBothFlipout": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "tensorflow_probability.layers.DenseFlipout"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testKLPenaltyBothLocalReparameterization": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "tensorflow_probability.layers.DenseLocalReparameterization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testKLPenaltyBothReparameterization": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": [
    "tensorflow_probability.layers.DenseReparameterization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testKLPenaltyKernelFlipout": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": [
    "tensorflow_probability.layers.DenseFlipout"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testKLPenaltyKernelLocalReparameterization": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "tensorflow_probability.layers.DenseLocalReparameterization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testKLPenaltyKernelReparameterization": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "tensorflow_probability.layers.DenseReparameterization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testKerasLayerFlipout": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "tensorflow_probability.layers.DenseFlipout"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testKerasLayerLocalReparameterization": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "tensorflow_probability.layers.DenseLocalReparameterization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testKerasLayerReparameterization": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "tensorflow_probability.layers.DenseReparameterization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.DenseVariational.testRandomDenseFlipout": {
  "data": {
   "lineno": 460,
   "symbols_in_volume": [
    "layer_one",
    "layer_two",
    "numpy.isclose",
    "numpy.sum",
    "seed",
    "tensorflow.random.uniform",
    "tensorflow_probability.layers.DenseFlipout",
    "tensorflow_probability.python.layers.dense_variational_test.Counter",
    "tensorflow_probability.python.layers.dense_variational_test.MockDistribution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.MockDistribution": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.dense_variational_test.tfd"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.dense_variational_test.MockDistribution.__init__": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.dense_variational_test.Counter",
    "tensorflow_probability.python.layers.dense_variational_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.MockDistribution.distribution": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.MockDistribution.loc": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.MockDistribution.log_prob": {
  "data": {
   "lineno": 65
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.MockDistribution.sample": {
  "data": {
   "lineno": 69
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.MockDistribution.scale": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.MockKLDivergence": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.dense_variational_test.MockKLDivergence.__call__": {
  "data": {
   "lineno": 96
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.MockKLDivergence.__init__": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.dense_variational_test.Counter"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational_test.testing_utils": {
  "data": {
   "shadows": "tensorflow.python.keras.testing_utils"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational_test.tfd": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.dense_variational_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational_v2": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.layers.dense_variational_v2.DenseVariational": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "tensorflow.keras.layers.Layer"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.dense_variational_v2.DenseVariational.__init__": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "_make_kl_divergence_penalty",
    "int",
    "super",
    "tensorflow.keras.activations.get",
    "tensorflow.keras.layers.InputSpec",
    "tensorflow.keras.regularizers.get",
    "tensorflow_probability.python.layers.dense_variational_v2.DenseVariational"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_v2.DenseVariational.build": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "tensorflow.TensorShape",
    "tensorflow.as_dtype",
    "tensorflow.compat.dimension_value",
    "tensorflow.keras.backend.floatx",
    "tensorflow.keras.layers.InputSpec"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_v2.DenseVariational.call": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "tensorflow.as_dtype",
    "tensorflow.cast",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.keras.backend.floatx",
    "tensorflow.matmul",
    "tensorflow.nn.bias_add",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow.split"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_v2._make_kl_divergence_penalty": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.kullback_leibler.kl_divergence"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_v2._make_kl_divergence_penalty._fn": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "kl_divergence_fn",
    "tensorflow.cast",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_v2._make_kl_divergence_penalty.kl_divergence_fn": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "tensorflow.reduce_mean",
    "test_points_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_v2.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational_v2.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational_v2.kullback_leibler": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.kullback_leibler"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational_v2.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational_v2.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational_v2_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.layers.dense_variational_v2_test.DenseVariationalLayerTest": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.dense_variational_v2_test.DenseVariationalLayerTest.test_end_to_end": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "isinstance",
    "model",
    "tensorflow.compat.v2.optimizers.Adam",
    "tensorflow.keras.Sequential",
    "tensorflow_probability.layers.DenseVariational",
    "tensorflow_probability.layers.DistributionLambda",
    "tensorflow_probability.python.layers.dense_variational_v2_test.create_dataset",
    "tensorflow_probability.python.layers.dense_variational_v2_test.negloglik",
    "tensorflow_probability.python.layers.dense_variational_v2_test.posterior_mean_field",
    "tensorflow_probability.python.layers.dense_variational_v2_test.prior_trainable",
    "tensorflow_probability.python.layers.dense_variational_v2_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_v2_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational_v2_test.create_dataset": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.linspace",
    "numpy.newaxis",
    "numpy.random.rand",
    "numpy.random.randn",
    "numpy.random.seed",
    "numpy.sin",
    "s"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_v2_test.create_dataset.s": {
  "data": {
   "lineno": 40
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_v2_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational_v2_test.negloglik": {
  "data": {
   "lineno": 75
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.dense_variational_v2_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational_v2_test.posterior_mean_field": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "numpy.expm1",
    "numpy.log",
    "tensorflow.keras.Sequential",
    "tensorflow.nn.softplus",
    "tensorflow_probability.layers.DistributionLambda",
    "tensorflow_probability.layers.VariableLayer",
    "tensorflow_probability.python.layers.dense_variational_v2_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_v2_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational_v2_test.prior_trainable": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "tensorflow.keras.Sequential",
    "tensorflow_probability.layers.DistributionLambda",
    "tensorflow_probability.layers.VariableLayer",
    "tensorflow_probability.python.layers.dense_variational_v2_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.dense_variational_v2_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational_v2_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.dense_variational_v2_test.tfd": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.dense_variational_v2_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.distribution_layer": {
  "data": {
   "symbols_in_volume": [
    "tensorflow.keras.utils.get_custom_objects",
    "tensorflow.python.keras.utils.tf_utils.register_symbolic_tensor_type",
    "tensorflow_probability.python.distributions.Distribution.mean",
    "tensorflow_probability.python.distributions.Distribution.mode",
    "tensorflow_probability.python.distributions.Distribution.sample",
    "tensorflow_probability.python.distributions.Distribution.stddev",
    "tensorflow_probability.python.distributions.Distribution.variance",
    "tensorflow_probability.python.layers.distribution_layer.DistributionLambda",
    "tensorflow_probability.python.layers.distribution_layer.IndependentBernoulli",
    "tensorflow_probability.python.layers.distribution_layer.IndependentLogistic",
    "tensorflow_probability.python.layers.distribution_layer.IndependentNormal",
    "tensorflow_probability.python.layers.distribution_layer.IndependentPoisson",
    "tensorflow_probability.python.layers.distribution_layer.MixtureLogistic",
    "tensorflow_probability.python.layers.distribution_layer.MixtureNormal",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._TensorCoercible"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.layers.distribution_layer.CategoricalMixtureOfOneHotCategorical": {
  "data": {
   "lineno": 470,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.distribution_layer.DistributionLambda"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.CategoricalMixtureOfOneHotCategorical.__init__": {
  "data": {
   "lineno": 526,
   "symbols_in_volume": [
    "convert_to_tensor_fn",
    "super",
    "tensorflow_probability.python.distributions.Distribution.sample",
    "tensorflow_probability.python.layers.distribution_layer.CategoricalMixtureOfOneHotCategorical"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.CategoricalMixtureOfOneHotCategorical.new": {
  "data": {
   "lineno": 561,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow.compat.v1.name_scope",
    "tensorflow_probability.python.distributions.Distribution.log_prob",
    "tensorflow_probability.python.distributions.Distribution.prob",
    "tensorflow_probability.python.layers.distribution_layer.OneHotCategorical",
    "tensorflow_probability.python.layers.distribution_layer.functools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.CategoricalMixtureOfOneHotCategorical.params_size": {
  "data": {
   "lineno": 584,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow.compat.v1.name_scope",
    "tensorflow_probability.python.layers.distribution_layer.OneHotCategorical"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.CloudPickler": {
  "data": {
   "shadows": "cloudpickle.CloudPickler"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.distribution_layer.DistributionLambda": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "tensorflow.keras.layers.Lambda"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.DistributionLambda.__call__": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.layers.distribution_layer.DistributionLambda"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.DistributionLambda.__init__": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "_deserialize_function",
    "_get_convert_to_tensor_fn",
    "convert_to_tensor_fn",
    "isinstance",
    "make_distribution_fn",
    "super",
    "tensorflow_probability.python.distributions.Distribution.sample",
    "tensorflow_probability.python.layers.distribution_layer.DistributionLambda",
    "tensorflow_probability.python.layers.distribution_layer.six"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.DistributionLambda.__init__._fn": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "convert_to_tensor_fn",
    "isinstance",
    "make_distribution_fn",
    "tensorflow_probability.python.layers.distribution_layer.collections",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._TensorCoercible",
    "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.DistributionLambda._variable_creator": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": [
    "next_creator"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.DistributionLambda.call": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.layers.distribution_layer.DistributionLambda"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.DistributionLambda.get_config": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "_serialize",
    "_serialize_function",
    "dict",
    "list",
    "super",
    "tensorflow_probability.python.layers.distribution_layer.DistributionLambda"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentBernoulli": {
  "data": {
   "lineno": 596,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.distribution_layer.DistributionLambda"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentBernoulli.__init__": {
  "data": {
   "lineno": 651,
   "symbols_in_volume": [
    "_get_convert_to_tensor_fn",
    "convert_to_tensor_fn",
    "super",
    "tensorflow_probability.python.distributions.Distribution.sample",
    "tensorflow_probability.python.layers.distribution_layer.IndependentBernoulli"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentBernoulli.get_config": {
  "data": {
   "lineno": 731,
   "symbols_in_volume": [
    "_serialize",
    "dict",
    "list",
    "super",
    "tensorflow_probability.python.layers.distribution_layer.IndependentBernoulli"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentBernoulli.new": {
  "data": {
   "lineno": 694,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.int32",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow.size",
    "tensorflow_probability.python.distributions.Bernoulli",
    "tensorflow_probability.python.distributions.Bernoulli.logits",
    "tensorflow_probability.python.distributions.Bernoulli.probs",
    "tensorflow_probability.python.distributions.Independent",
    "tensorflow_probability.python.internal.distribution_util.expand_to_vector"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentBernoulli.params_size": {
  "data": {
   "lineno": 721,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.int32",
    "tensorflow_probability.python.layers.distribution_layer._event_size"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentLogistic": {
  "data": {
   "lineno": 770,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.distribution_layer.DistributionLambda"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentLogistic.__init__": {
  "data": {
   "lineno": 795,
   "symbols_in_volume": [
    "_get_convert_to_tensor_fn",
    "convert_to_tensor_fn",
    "super",
    "tensorflow_probability.python.distributions.Distribution.sample",
    "tensorflow_probability.python.layers.distribution_layer.IndependentLogistic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentLogistic.get_config": {
  "data": {
   "lineno": 866,
   "symbols_in_volume": [
    "_serialize",
    "dict",
    "list",
    "super",
    "tensorflow_probability.python.layers.distribution_layer.IndependentLogistic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentLogistic.new": {
  "data": {
   "lineno": 832,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.int32",
    "tensorflow.math.softplus",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow.size",
    "tensorflow.split",
    "tensorflow_probability.python.distributions.Independent",
    "tensorflow_probability.python.distributions.Logistic",
    "tensorflow_probability.python.internal.distribution_util.expand_to_vector"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentLogistic.params_size": {
  "data": {
   "lineno": 856,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.int32",
    "tensorflow_probability.python.layers.distribution_layer._event_size"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentNormal": {
  "data": {
   "lineno": 887,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.distribution_layer.DistributionLambda"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentNormal.__init__": {
  "data": {
   "lineno": 912,
   "symbols_in_volume": [
    "_get_convert_to_tensor_fn",
    "convert_to_tensor_fn",
    "super",
    "tensorflow_probability.python.distributions.Distribution.sample",
    "tensorflow_probability.python.layers.distribution_layer.IndependentNormal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentNormal.get_config": {
  "data": {
   "lineno": 983,
   "symbols_in_volume": [
    "_serialize",
    "dict",
    "list",
    "super",
    "tensorflow_probability.python.layers.distribution_layer.IndependentNormal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentNormal.new": {
  "data": {
   "lineno": 949,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.int32",
    "tensorflow.math.softplus",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow.size",
    "tensorflow.split",
    "tensorflow_probability.python.distributions.Independent",
    "tensorflow_probability.python.distributions.Normal",
    "tensorflow_probability.python.internal.distribution_util.expand_to_vector"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentNormal.params_size": {
  "data": {
   "lineno": 973,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.int32",
    "tensorflow_probability.python.layers.distribution_layer._event_size"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentPoisson": {
  "data": {
   "lineno": 1004,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.distribution_layer.DistributionLambda"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentPoisson.__init__": {
  "data": {
   "lineno": 1045,
   "symbols_in_volume": [
    "_get_convert_to_tensor_fn",
    "convert_to_tensor_fn",
    "super",
    "tensorflow_probability.python.distributions.Distribution.sample",
    "tensorflow_probability.python.layers.distribution_layer.IndependentPoisson"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentPoisson.get_config": {
  "data": {
   "lineno": 1114,
   "symbols_in_volume": [
    "_serialize",
    "dict",
    "list",
    "super",
    "tensorflow_probability.python.layers.distribution_layer.IndependentPoisson"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentPoisson.new": {
  "data": {
   "lineno": 1082,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.int32",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow.size",
    "tensorflow_probability.python.distributions.Independent",
    "tensorflow_probability.python.distributions.Poisson",
    "tensorflow_probability.python.internal.distribution_util.expand_to_vector"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.IndependentPoisson.params_size": {
  "data": {
   "lineno": 1104,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.int32",
    "tensorflow_probability.python.layers.distribution_layer._event_size"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.KLDivergenceAddLoss": {
  "data": {
   "lineno": 1222,
   "symbols_in_volume": [
    "tensorflow.keras.layers.Layer"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.KLDivergenceAddLoss.__init__": {
  "data": {
   "lineno": 1256,
   "symbols_in_volume": [
    "super",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.layers.distribution_layer.KLDivergenceAddLoss",
    "tensorflow_probability.python.layers.distribution_layer.KLDivergenceRegularizer"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.KLDivergenceAddLoss.call": {
  "data": {
   "lineno": 1302
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.KLDivergenceRegularizer": {
  "data": {
   "lineno": 1135,
   "symbols_in_volume": [
    "tensorflow.keras.regularizers.Regularizer"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.KLDivergenceRegularizer.__call__": {
  "data": {
   "lineno": 1209,
   "symbols_in_volume": [
    "hasattr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.KLDivergenceRegularizer.__init__": {
  "data": {
   "lineno": 1171,
   "symbols_in_volume": [
    "_make_kl_divergence_fn",
    "super",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.layers.distribution_layer.KLDivergenceRegularizer"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureLogistic": {
  "data": {
   "lineno": 1602,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.distribution_layer.DistributionLambda"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureLogistic.__init__": {
  "data": {
   "lineno": 1642,
   "symbols_in_volume": [
    "_get_convert_to_tensor_fn",
    "convert_to_tensor_fn",
    "super",
    "tensorflow_probability.python.distributions.Distribution.sample",
    "tensorflow_probability.python.layers.distribution_layer.MixtureLogistic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureLogistic.get_config": {
  "data": {
   "lineno": 1704,
   "symbols_in_volume": [
    "_serialize",
    "dict",
    "list",
    "super",
    "tensorflow_probability.python.layers.distribution_layer.MixtureLogistic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureLogistic.new": {
  "data": {
   "lineno": 1684,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow_probability.python.layers.distribution_layer.IndependentLogistic",
    "tensorflow_probability.python.layers.distribution_layer.MixtureSameFamily"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureLogistic.params_size": {
  "data": {
   "lineno": 1696,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow_probability.python.layers.distribution_layer.IndependentLogistic",
    "tensorflow_probability.python.layers.distribution_layer.MixtureSameFamily"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureNormal": {
  "data": {
   "lineno": 1479,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.distribution_layer.DistributionLambda"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureNormal.__init__": {
  "data": {
   "lineno": 1519,
   "symbols_in_volume": [
    "_get_convert_to_tensor_fn",
    "convert_to_tensor_fn",
    "super",
    "tensorflow_probability.python.distributions.Distribution.sample",
    "tensorflow_probability.python.layers.distribution_layer.MixtureNormal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureNormal.get_config": {
  "data": {
   "lineno": 1580,
   "symbols_in_volume": [
    "_serialize",
    "dict",
    "list",
    "super",
    "tensorflow_probability.python.layers.distribution_layer.MixtureNormal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureNormal.new": {
  "data": {
   "lineno": 1561,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow_probability.python.layers.distribution_layer.IndependentNormal",
    "tensorflow_probability.python.layers.distribution_layer.MixtureSameFamily"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureNormal.params_size": {
  "data": {
   "lineno": 1572,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow_probability.python.layers.distribution_layer.IndependentNormal",
    "tensorflow_probability.python.layers.distribution_layer.MixtureSameFamily"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureSameFamily": {
  "data": {
   "lineno": 1351,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.distribution_layer.DistributionLambda"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureSameFamily.__init__": {
  "data": {
   "lineno": 1393,
   "symbols_in_volume": [
    "convert_to_tensor_fn",
    "super",
    "tensorflow_probability.python.distributions.Distribution.sample",
    "tensorflow_probability.python.layers.distribution_layer.MixtureSameFamily"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureSameFamily.new": {
  "data": {
   "lineno": 1425,
   "symbols_in_volume": [
    "component_layer",
    "staticmethod",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.int32",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.Categorical",
    "tensorflow_probability.python.distributions.MixtureSameFamily"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MixtureSameFamily.params_size": {
  "data": {
   "lineno": 1449,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.int32",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MultivariateNormalTriL": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.distribution_layer.DistributionLambda"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.MultivariateNormalTriL.__init__": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": [
    "convert_to_tensor_fn",
    "super",
    "tensorflow_probability.python.distributions.Distribution.sample",
    "tensorflow_probability.python.layers.distribution_layer.MultivariateNormalTriL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MultivariateNormalTriL.new": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": [
    "numpy.array",
    "scale_tril",
    "staticmethod",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.bijectors.ScaleTriL",
    "tensorflow_probability.python.distributions.MultivariateNormalTriL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.MultivariateNormalTriL.params_size": {
  "data": {
   "lineno": 361,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow.compat.v1.name_scope"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.OneHotCategorical": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.distribution_layer.DistributionLambda"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.OneHotCategorical.__init__": {
  "data": {
   "lineno": 424,
   "symbols_in_volume": [
    "convert_to_tensor_fn",
    "super",
    "tensorflow_probability.python.distributions.Distribution.sample",
    "tensorflow_probability.python.layers.distribution_layer.OneHotCategorical"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.OneHotCategorical.new": {
  "data": {
   "lineno": 454,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow.compat.v1.name_scope",
    "tensorflow_probability.python.distributions.OneHotCategorical"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.OneHotCategorical.params_size": {
  "data": {
   "lineno": 464,
   "symbols_in_volume": [
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.VariationalGaussianProcess": {
  "data": {
   "lineno": 1726,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.distribution_layer.DistributionLambda"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer.VariationalGaussianProcess.__init__": {
  "data": {
   "lineno": 1740,
   "symbols_in_volume": [
    "super",
    "tensorflow.TensorShape",
    "tensorflow.compat.v1.initializers.constant",
    "tensorflow.nn.softplus",
    "tensorflow_probability.python.layers.distribution_layer.VariationalGaussianProcess"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.VariationalGaussianProcess.build": {
  "data": {
   "lineno": 1809,
   "symbols_in_volume": [
    "numpy.eye",
    "numpy.ones",
    "tensorflow.compat.v1.initializers.constant",
    "tensorflow.compat.v1.initializers.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.VariationalGaussianProcess.new": {
  "data": {
   "lineno": 1849,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow_probability.python.bijectors.Transpose",
    "tensorflow_probability.python.distributions.Independent",
    "tensorflow_probability.python.distributions.TransformedDistribution",
    "tensorflow_probability.python.distributions.VariationalGaussianProcess"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.VariationalGaussianProcess.new._transposed_variational_loss": {
  "data": {
   "lineno": 1874
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer._TensorCloudPickler": {
  "data": {
   "lineno": 1932,
   "symbols_in_volume": [
    "cloudpickle.CloudPickler"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer._TensorCloudPickler.__init__": {
  "data": {
   "lineno": 1935,
   "symbols_in_volume": [
    "cloudpickle.CloudPickler.__init__"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer._TensorCloudPickler.dumps": {
  "data": {
   "lineno": 1950,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow_probability.python.layers.distribution_layer._TensorCloudPickler",
    "tensorflow_probability.python.layers.distribution_layer.io"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer._TensorCloudPickler.inject_addons": {
  "data": {
   "lineno": 1946,
   "symbols_in_volume": [
    "cloudpickle.CloudPickler.dispatch",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.layers.distribution_layer._TensorCloudPickler"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer._TensorCloudPickler.save_tensor": {
  "data": {
   "lineno": 1938,
   "symbols_in_volume": [
    "ValueError",
    "cloudpickle.CloudPickler.save_reduce",
    "numpy.array",
    "staticmethod",
    "tensorflow.get_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.__all__": {
  "data": {
   "lineno": 43
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.distribution_layer._deserialize": {
  "data": {
   "lineno": 1903,
   "symbols_in_volume": [
    "globals",
    "tensorflow.keras.utils.deserialize_keras_object"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer._deserialize_function": {
  "data": {
   "lineno": 1965,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.distribution_layer.codecs",
    "tensorflow_probability.python.layers.distribution_layer.pickle"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer._eval_all_one_hot": {
  "data": {
   "lineno": 753,
   "symbols_in_volume": [
    "fn",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.eye",
    "tensorflow.int32",
    "tensorflow.ones",
    "tensorflow.pad",
    "tensorflow.range",
    "tensorflow.reshape",
    "tensorflow.size",
    "tensorflow.transpose"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer._event_size": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "numpy.prod",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.get_static_value",
    "tensorflow.int32",
    "tensorflow.reduce_prod"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer._get_convert_to_tensor_fn": {
  "data": {
   "lineno": 1911,
   "symbols_in_volume": [
    "ValueError",
    "callable",
    "dict",
    "isinstance",
    "property",
    "str",
    "tensorflow_probability.python.layers.distribution_layer._deserialize",
    "tensorflow_probability.python.layers.distribution_layer.six"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer._make_kl_divergence_fn": {
  "data": {
   "lineno": 1308,
   "symbols_in_volume": [
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.kl_divergence"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer._make_kl_divergence_fn._fn": {
  "data": {
   "lineno": 1327,
   "symbols_in_volume": [
    "callable",
    "distribution_b",
    "kl_divergence_fn",
    "tensorflow.cast",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer._make_kl_divergence_fn.kl_divergence_fn": {
  "data": {
   "lineno": 1320,
   "symbols_in_volume": [
    "tensorflow.reduce_mean",
    "test_points_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer._serialize": {
  "data": {
   "lineno": 1899,
   "symbols_in_volume": [
    "convert_to_tensor_fn",
    "tensorflow.keras.utils.serialize_keras_object"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer._serialize_function": {
  "data": {
   "lineno": 1960,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.distribution_layer._TensorCloudPickler",
    "tensorflow_probability.python.layers.distribution_layer.codecs"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.distribution_layer.codecs": {
  "data": {
   "shadows": "codecs"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.distribution_layer.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.distribution_layer.dist_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.distribution_layer.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.distribution_layer.dtc": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.internal.distribution_tensor_coercible"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.distribution_layer.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.distribution_layer.io": {
  "data": {
   "shadows": "io"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.distribution_layer.keras_tf_utils": {
  "data": {
   "shadows": "tensorflow.python.keras.utils.tf_utils"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.distribution_layer.mean": {
  "data": {
   "lineno": 1893
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.distribution_layer.mode": {
  "data": {
   "lineno": 1894
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.distribution_layer.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.distribution_layer.pickle": {
  "data": {
   "shadows": "pickle"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.distribution_layer.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.distribution_layer.sample": {
  "data": {
   "lineno": 1892
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.distribution_layer.six": {
  "data": {
   "shadows": "six"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.distribution_layer.stddev": {
  "data": {
   "lineno": 1895
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.distribution_layer.tensor_tuple": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.internal.tensor_tuple"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.distribution_layer.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.distribution_layer.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.distribution_layer.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.distribution_layer.variance": {
  "data": {
   "lineno": 1896
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.distribution_layer_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.keras",
    "tensorflow.keras.layers",
    "tensorflow.test.main",
    "tensorflow_probability.bijectors",
    "tensorflow_probability.distributions",
    "tensorflow_probability.layers"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.CategoricalMixtureOfOneHotCategoricalTest": {
  "data": {
   "lineno": 602,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.CategoricalMixtureOfOneHotCategoricalTest._check_distribution": {
  "data": {
   "lineno": 605,
   "symbols_in_volume": [
    "int",
    "numpy.exp",
    "tensorflow.concat",
    "tensorflow.reduce_mean",
    "tensorflow.reshape",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.CategoricalMixtureOfOneHotCategoricalTest.test_doc_string": {
  "data": {
   "lineno": 649,
   "symbols_in_volume": [
    "int",
    "model",
    "model.compile",
    "model.fit",
    "model.log_prob",
    "tensorflow.compat.v2.optimizers.Adam",
    "tensorflow.float32",
    "tensorflow.keras.Sequential",
    "tensorflow.keras.layers.Dense",
    "tensorflow_probability.python.layers.distribution_layer_test._vec_pad",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.CategoricalMixtureOfOneHotCategoricalTest.test_layer": {
  "data": {
   "lineno": 639,
   "symbols_in_volume": [
    "layer",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.CategoricalMixtureOfOneHotCategoricalTest.test_new": {
  "data": {
   "lineno": 630,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.DistributionLambdaSerializationTest": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.DistributionLambdaSerializationTest._make_distribution": {
  "data": {
   "lineno": 350,
   "symbols_in_volume": [
    "staticmethod",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.DistributionLambdaSerializationTest.assertExportable": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": [
    "model",
    "model.input.dtype.as_numpy_dtype",
    "model.input.shape.as_list",
    "model.predict",
    "model_copy",
    "model_copy.predict",
    "numpy.random.uniform",
    "tensorflow_probability.python.layers.distribution_layer_test.tfk"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.DistributionLambdaSerializationTest.assertSerializable": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "model",
    "model_copy",
    "numpy.random.uniform",
    "tensorflow_probability.python.layers.distribution_layer_test.tfk"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.DistributionLambdaSerializationTest.test_serialization": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": [
    "model",
    "tensorflow.exp",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfk",
    "tensorflow_probability.python.layers.distribution_layer_test.tfkl",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.DistributionLambdaSerializationTest.test_serialization_closure_over_lambdas_tensors_and_numpy_array": {
  "data": {
   "lineno": 374,
   "symbols_in_volume": [
    "make_distribution",
    "model",
    "numpy.array",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.layers.distribution_layer_test.tfk",
    "tensorflow_probability.python.layers.distribution_layer_test.tfkl",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.DistributionLambdaSerializationTest.test_serialization_closure_over_lambdas_tensors_and_numpy_array.make_distribution": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": [
    "mk_ind_norm",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.DistributionLambdaSerializationTest.test_serialization_static_method": {
  "data": {
   "lineno": 354,
   "symbols_in_volume": [
    "model",
    "model.compile",
    "tensorflow_probability.python.layers.distribution_layer_test.DistributionLambdaSerializationTest",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfk",
    "tensorflow_probability.python.layers.distribution_layer_test.tfkl",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.DistributionLambdaVariableCreation": {
  "data": {
   "lineno": 397,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.DistributionLambdaVariableCreation.test_variable_creation": {
  "data": {
   "lineno": 400,
   "symbols_in_volume": [
    "loc",
    "model",
    "model.compile",
    "model.fit",
    "normal",
    "numpy.float32",
    "numpy.random.rand",
    "scale",
    "tensorflow.compat.v2.optimizers.Adam",
    "tensorflow.exp",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfk",
    "tensorflow_probability.python.layers.distribution_layer_test.tfkl",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.EndToEndTest": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.EndToEndTest.setUp": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.random.rand"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.EndToEndTest.test_keras_functional_api": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "decoder_model",
    "f",
    "tensorflow.compat.v2.optimizers.Adam",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.layers.distribution_layer_test.functools",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfk",
    "tensorflow_probability.python.layers.distribution_layer_test.tfkl",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl",
    "vae_model",
    "vae_model.compile",
    "vae_model.fit"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.EndToEndTest.test_keras_model_api": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "Decoder",
    "Encoder",
    "decoder",
    "encoder",
    "tensorflow.compat.v2.optimizers.Adam",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfk",
    "tensorflow_probability.python.layers.distribution_layer_test.tfkl",
    "vae_model",
    "vae_model.compile",
    "vae_model.fit"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.EndToEndTest.test_keras_model_api.Decoder": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.distribution_layer_test.tfk"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.EndToEndTest.test_keras_model_api.Decoder.__init__": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfkl",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.EndToEndTest.test_keras_model_api.Decoder.call": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "f",
    "tensorflow_probability.python.layers.distribution_layer_test.functools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.EndToEndTest.test_keras_model_api.Encoder": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.distribution_layer_test.tfk"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.EndToEndTest.test_keras_model_api.Encoder.__init__": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "super",
    "tensorflow.zeros",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfkl",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.EndToEndTest.test_keras_model_api.Encoder.call": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "f",
    "tensorflow_probability.python.layers.distribution_layer_test.functools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.EndToEndTest.test_keras_sequential_api": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "decoder_model",
    "prior_model",
    "prior_model.trainable_variables",
    "tensorflow.compat.v2.optimizers.Adam",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfk",
    "tensorflow_probability.python.layers.distribution_layer_test.tfkl",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl",
    "vae_model"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.EndToEndTest.test_keras_sequential_api.accuracy": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "hasattr",
    "tensorflow.cast",
    "tensorflow.equal",
    "tensorflow.range",
    "tensorflow.reduce_mean"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.EndToEndTest.test_keras_sequential_api_multiple_draws": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "decoder_model",
    "tensorflow.compat.v2.optimizers.Adam",
    "tensorflow.convert_to_tensor",
    "tensorflow.zeros",
    "tensorflow_probability.python.layers.distribution_layer_test._logit_avg_expit",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfk",
    "tensorflow_probability.python.layers.distribution_layer_test.tfkl",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl",
    "vae_model",
    "vae_model.compile",
    "vae_model.fit"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.IndependentBernoulliTestDynamicShape": {
  "data": {
   "lineno": 813,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.layers.distribution_layer_test._IndependentBernoulliTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.IndependentBernoulliTestStaticShape": {
  "data": {
   "lineno": 820,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.layers.distribution_layer_test._IndependentBernoulliTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.IndependentBernoulliTestStaticShape.test_doc_string": {
  "data": {
   "lineno": 826,
   "symbols_in_volume": [
    "int",
    "model",
    "model.compile",
    "model.fit",
    "model.get_weights",
    "model.log_prob",
    "numpy.array",
    "numpy.float32",
    "tensorflow.compat.v2.optimizers.Adam",
    "tensorflow.keras.Sequential",
    "tensorflow.keras.layers.Dense",
    "tensorflow.matmul",
    "tensorflow.reshape",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.IndependentLogisticTestDynamicShape": {
  "data": {
   "lineno": 876,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.layers.distribution_layer_test._IndependentLogisticTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.IndependentLogisticTestStaticShape": {
  "data": {
   "lineno": 883,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.layers.distribution_layer_test._IndependentLogisticTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.IndependentLogisticTestStaticShape.test_doc_string": {
  "data": {
   "lineno": 889,
   "symbols_in_volume": [
    "encoder",
    "encoder.predict_on_batch",
    "numpy.random.randn",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.layers.distribution_layer_test.tfk",
    "tensorflow_probability.python.layers.distribution_layer_test.tfkl",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.IndependentNormalTestDynamicShape": {
  "data": {
   "lineno": 956,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.layers.distribution_layer_test._IndependentNormalTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.IndependentNormalTestStaticShape": {
  "data": {
   "lineno": 963,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.layers.distribution_layer_test._IndependentNormalTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.IndependentNormalTestStaticShape.test_doc_string": {
  "data": {
   "lineno": 969,
   "symbols_in_volume": [
    "encoder",
    "encoder.predict_on_batch",
    "numpy.random.randn",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.layers.distribution_layer_test.tfk",
    "tensorflow_probability.python.layers.distribution_layer_test.tfkl",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.IndependentPoissonTestDynamicShape": {
  "data": {
   "lineno": 1000,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.layers.distribution_layer_test._IndependentPoissonTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.IndependentPoissonTestStaticShape": {
  "data": {
   "lineno": 1007,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.layers.distribution_layer_test._IndependentPoissonTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.IndependentPoissonTestStaticShape.test_doc_string": {
  "data": {
   "lineno": 1013,
   "symbols_in_volume": [
    "model",
    "model.compile",
    "model.fit",
    "model.log_prob",
    "tensorflow.compat.v2.optimizers.Adam",
    "tensorflow.matmul",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfk",
    "tensorflow_probability.python.layers.distribution_layer_test.tfkl",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.JointDistributionLayer": {
  "data": {
   "lineno": 1488,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.JointDistributionLayer.test_works": {
  "data": {
   "lineno": 1491,
   "symbols_in_volume": [
    "len",
    "m",
    "m.weights",
    "s",
    "tensorflow.float32",
    "tensorflow.keras.Input",
    "tensorflow.keras.Model",
    "tensorflow.keras.layers.Dense",
    "tensorflow_probability.layers.DistributionLambda",
    "tensorflow_probability.layers.VariableLayer",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.KLDivergenceAddLoss": {
  "data": {
   "lineno": 431,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.KLDivergenceAddLoss.test_approx_kl": {
  "data": {
   "lineno": 434,
   "symbols_in_volume": [
    "int",
    "len",
    "loc",
    "model",
    "model.compile",
    "model.fit",
    "model.losses",
    "tensorflow.compat.v2.optimizers.Adam",
    "tensorflow.concat",
    "tensorflow.executing_eagerly",
    "tensorflow.newaxis",
    "tensorflow.zeros",
    "tensorflow_probability.python.layers.distribution_layer_test.tfb",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfk",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.MixtureLogisticTestDynamicShape": {
  "data": {
   "lineno": 1218,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.layers.distribution_layer_test._MixtureLogisticTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.MixtureLogisticTestStaticShape": {
  "data": {
   "lineno": 1225,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.layers.distribution_layer_test._MixtureLogisticTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.MixtureNormalTestDynamicShape": {
  "data": {
   "lineno": 1288,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.layers.distribution_layer_test._MixtureNormalTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.MixtureNormalTestStaticShape": {
  "data": {
   "lineno": 1295,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.layers.distribution_layer_test._MixtureNormalTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.MixtureSameFamilyTestDynamicShape": {
  "data": {
   "lineno": 1401,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.layers.distribution_layer_test._MixtureSameFamilyTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.MixtureSameFamilyTestStaticShape": {
  "data": {
   "lineno": 1408,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.layers.distribution_layer_test._MixtureSameFamilyTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.MultivariateNormalTriLTest": {
  "data": {
   "lineno": 477,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.MultivariateNormalTriLTest._check_distribution": {
  "data": {
   "lineno": 480,
   "symbols_in_volume": [
    "tensorflow.concat",
    "tensorflow_probability.python.layers.distribution_layer_test.tfb",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.MultivariateNormalTriLTest.test_doc_string": {
  "data": {
   "lineno": 501,
   "symbols_in_volume": [
    "int",
    "model",
    "model.compile",
    "model.fit",
    "model.get_weights",
    "model.log_prob",
    "numpy.array",
    "numpy.float32",
    "numpy.log",
    "numpy.pad",
    "tensorflow.compat.v2.optimizers.Adam",
    "tensorflow.keras.Sequential",
    "tensorflow.keras.layers.Dense",
    "tensorflow.matmul",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.MultivariateNormalTriLTest.test_layer": {
  "data": {
   "lineno": 493,
   "symbols_in_volume": [
    "layer",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.MultivariateNormalTriLTest.test_new": {
  "data": {
   "lineno": 486,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.OneHotCategoricalTest": {
  "data": {
   "lineno": 543,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.OneHotCategoricalTest._check_distribution": {
  "data": {
   "lineno": 546,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.distribution_layer_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.OneHotCategoricalTest.test_doc_string": {
  "data": {
   "lineno": 568,
   "symbols_in_volume": [
    "int",
    "model",
    "model.compile",
    "model.fit",
    "model.get_weights",
    "model.log_prob",
    "tensorflow.compat.v2.optimizers.Adam",
    "tensorflow.float32",
    "tensorflow.keras.Sequential",
    "tensorflow.keras.layers.Dense",
    "tensorflow.keras.layers.Lambda",
    "tensorflow_probability.python.layers.distribution_layer_test._vec_pad",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.OneHotCategoricalTest.test_layer": {
  "data": {
   "lineno": 560,
   "symbols_in_volume": [
    "layer",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.OneHotCategoricalTest.test_new": {
  "data": {
   "lineno": 553,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.VariationalGaussianProcessEndToEnd": {
  "data": {
   "lineno": 1415,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.VariationalGaussianProcessEndToEnd.testEndToEnd": {
  "data": {
   "lineno": 1418,
   "symbols_in_volume": [
    "KernelFn",
    "model",
    "model.compile",
    "model.fit",
    "numpy.float64",
    "numpy.linspace",
    "numpy.newaxis",
    "numpy.random.rand",
    "numpy.random.randn",
    "numpy.random.seed",
    "numpy.sin",
    "s",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v1.initializers.constant",
    "tensorflow.compat.v2.optimizers.Adam",
    "tensorflow.executing_eagerly",
    "tensorflow.keras.Sequential",
    "tensorflow.keras.layers.Dense",
    "tensorflow.keras.layers.InputLayer",
    "tensorflow_probability.layers.VariationalGaussianProcess"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.VariationalGaussianProcessEndToEnd.testEndToEnd.KernelFn": {
  "data": {
   "lineno": 1436,
   "symbols_in_volume": [
    "tensorflow.keras.layers.Layer"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.VariationalGaussianProcessEndToEnd.testEndToEnd.KernelFn.__init__": {
  "data": {
   "lineno": 1438,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v1.initializers.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.VariationalGaussianProcessEndToEnd.testEndToEnd.KernelFn.call": {
  "data": {
   "lineno": 1446
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.VariationalGaussianProcessEndToEnd.testEndToEnd.KernelFn.kernel": {
  "data": {
   "lineno": 1449,
   "symbols_in_volume": [
    "property",
    "tensorflow.nn.softplus",
    "tensorflow_probability.positive_semidefinite_kernels.ExponentiatedQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.VariationalGaussianProcessEndToEnd.testEndToEnd.s": {
  "data": {
   "lineno": 1427
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentBernoulliTest": {
  "data": {
   "lineno": 803,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.layers.distribution_layer_test._IndependentLayerTest",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentBernoulliTest._distribution_to_params": {
  "data": {
   "lineno": 808,
   "symbols_in_volume": [
    "tensorflow.concat",
    "tensorflow.reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentLayerTest": {
  "data": {
   "lineno": 693,
   "symbols_in_volume": [
    "object",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentLayerTest._build_tensor": {
  "data": {
   "lineno": 709,
   "symbols_in_volume": [
    "numpy.asarray",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentLayerTest._check_distribution": {
  "data": {
   "lineno": 716,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.distribution_layer_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentLayerTest._distribution_to_params": {
  "data": {
   "lineno": 705,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentLayerTest.test_layer": {
  "data": {
   "lineno": 735,
   "symbols_in_volume": [
    "layer",
    "numpy.int32",
    "tensorflow.concat",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentLayerTest.test_model_export": {
  "data": {
   "lineno": 775,
   "symbols_in_volume": [
    "model",
    "model.compile",
    "model_copy",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfk",
    "tensorflow_probability.python.layers.distribution_layer_test.tfkl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentLayerTest.test_new": {
  "data": {
   "lineno": 723,
   "symbols_in_volume": [
    "numpy.int32",
    "tensorflow.concat",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentLayerTest.test_serialization": {
  "data": {
   "lineno": 747,
   "symbols_in_volume": [
    "model",
    "model.save",
    "model_copy",
    "numpy.ones",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfk",
    "tensorflow_probability.python.layers.distribution_layer_test.tfkl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentLogisticTest": {
  "data": {
   "lineno": 863,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.layers.distribution_layer_test._IndependentLayerTest",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentLogisticTest._distribution_to_params": {
  "data": {
   "lineno": 868,
   "symbols_in_volume": [
    "tensorflow.concat",
    "tensorflow.reshape",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentNormalTest": {
  "data": {
   "lineno": 910,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.layers.distribution_layer_test._IndependentLayerTest",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentNormalTest._distribution_to_params": {
  "data": {
   "lineno": 915,
   "symbols_in_volume": [
    "tensorflow.concat",
    "tensorflow.reshape",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentNormalTest.test_keras_sequential_with_unknown_input_size": {
  "data": {
   "lineno": 922,
   "symbols_in_volume": [
    "encoder",
    "encoder.predict_on_batch",
    "numpy.int32",
    "numpy.random.randn",
    "tensorflow.convert_to_tensor",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.layers.distribution_layer_test.tfk",
    "tensorflow_probability.python.layers.distribution_layer_test.tfkl",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentNormalTest.test_keras_sequential_with_unknown_input_size.reshape": {
  "data": {
   "lineno": 927,
   "symbols_in_volume": [
    "tensorflow.concat",
    "tensorflow.reshape",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentPoissonTest": {
  "data": {
   "lineno": 990,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.layers.distribution_layer_test._IndependentLayerTest",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._IndependentPoissonTest._distribution_to_params": {
  "data": {
   "lineno": 995,
   "symbols_in_volume": [
    "tensorflow.concat",
    "tensorflow.reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureLayerTest": {
  "data": {
   "lineno": 1043,
   "symbols_in_volume": [
    "object",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureLayerTest._build_tensor": {
  "data": {
   "lineno": 1059,
   "symbols_in_volume": [
    "numpy.asarray",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureLayerTest._check_distribution": {
  "data": {
   "lineno": 1066,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.distribution_layer_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureLayerTest._distribution_to_params": {
  "data": {
   "lineno": 1055,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureLayerTest.test_layer": {
  "data": {
   "lineno": 1090,
   "symbols_in_volume": [
    "layer",
    "numpy.int32",
    "tensorflow.concat",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureLayerTest.test_model_export": {
  "data": {
   "lineno": 1133,
   "symbols_in_volume": [
    "model",
    "model.compile",
    "model_copy",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfk",
    "tensorflow_probability.python.layers.distribution_layer_test.tfkl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureLayerTest.test_new": {
  "data": {
   "lineno": 1077,
   "symbols_in_volume": [
    "numpy.int32",
    "tensorflow.concat",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureLayerTest.test_serialization": {
  "data": {
   "lineno": 1104,
   "symbols_in_volume": [
    "model",
    "model.save",
    "model_copy",
    "numpy.ones",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfk",
    "tensorflow_probability.python.layers.distribution_layer_test.tfkl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureLogisticTest": {
  "data": {
   "lineno": 1162,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.layers.distribution_layer_test._MixtureLayerTest",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureLogisticTest._distribution_to_params": {
  "data": {
   "lineno": 1167,
   "symbols_in_volume": [
    "tensorflow.concat",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureLogisticTest.test_doc_string": {
  "data": {
   "lineno": 1182,
   "symbols_in_volume": [
    "model",
    "model.compile",
    "model.fit",
    "model.log_prob",
    "numpy.int32",
    "numpy.pi",
    "tensorflow.compat.v2.optimizers.Adam",
    "tensorflow.convert_to_tensor",
    "tensorflow.cos",
    "tensorflow.sin",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfk",
    "tensorflow_probability.python.layers.distribution_layer_test.tfkl",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureNormalTest": {
  "data": {
   "lineno": 1232,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.layers.distribution_layer_test._MixtureLayerTest",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureNormalTest._distribution_to_params": {
  "data": {
   "lineno": 1237,
   "symbols_in_volume": [
    "tensorflow.concat",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureNormalTest.test_doc_string": {
  "data": {
   "lineno": 1252,
   "symbols_in_volume": [
    "model",
    "model.compile",
    "model.fit",
    "model.log_prob",
    "numpy.int32",
    "numpy.pi",
    "tensorflow.compat.v2.optimizers.Adam",
    "tensorflow.convert_to_tensor",
    "tensorflow.cos",
    "tensorflow.sin",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfk",
    "tensorflow_probability.python.layers.distribution_layer_test.tfkl",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureSameFamilyTest": {
  "data": {
   "lineno": 1302,
   "symbols_in_volume": [
    "object",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureSameFamilyTest._build_tensor": {
  "data": {
   "lineno": 1305,
   "symbols_in_volume": [
    "numpy.asarray",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureSameFamilyTest._check_distribution": {
  "data": {
   "lineno": 1312,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.concat",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow_probability.python.layers.distribution_layer_test.tfb",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureSameFamilyTest.test_doc_string": {
  "data": {
   "lineno": 1363,
   "symbols_in_volume": [
    "model",
    "model.compile",
    "model.fit",
    "model.log_prob",
    "numpy.int32",
    "numpy.pi",
    "tensorflow.compat.v2.optimizers.Adam",
    "tensorflow.convert_to_tensor",
    "tensorflow.cos",
    "tensorflow.sin",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfk",
    "tensorflow_probability.python.layers.distribution_layer_test.tfkl",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureSameFamilyTest.test_layer": {
  "data": {
   "lineno": 1348,
   "symbols_in_volume": [
    "layer",
    "normal",
    "numpy.int32",
    "tensorflow.concat",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._MixtureSameFamilyTest.test_new": {
  "data": {
   "lineno": 1334,
   "symbols_in_volume": [
    "normal",
    "numpy.int32",
    "tensorflow.concat",
    "tensorflow_probability.python.layers.distribution_layer_test.tfd",
    "tensorflow_probability.python.layers.distribution_layer_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._logit_avg_expit": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.exp",
    "tensorflow.math.log",
    "tensorflow.math.log1p",
    "tensorflow.nn.softplus",
    "tensorflow.reduce_logsumexp",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test._vec_pad": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "tensorflow.concat",
    "tensorflow.int32",
    "tensorflow.pad",
    "tensorflow.rank",
    "tensorflow.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.tfb": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.tfd": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.tfk": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.tfkl": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.distribution_layer_test.tfpl": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.initializers": {
  "data": {
   "symbols_in_volume": [
    "tensorflow.keras.utils.get_custom_objects",
    "tensorflow_probability.python.layers.initializers.BlockwiseInitializer"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.layers.initializers.BlockwiseInitializer": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "tensorflow.keras.initializers.Initializer"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.initializers.BlockwiseInitializer.__call__": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "ValueError",
    "any",
    "isinstance",
    "len",
    "numpy.array",
    "numpy.concatenate",
    "numpy.generic",
    "numpy.int32",
    "numpy.ndarray",
    "sum",
    "tensorflow.TensorShape",
    "tensorflow.as_dtype",
    "tensorflow.compat.v1.assert_equal",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.get_static_value",
    "tensorflow.int32",
    "tensorflow.is_tensor",
    "tensorflow.keras.backend.floatx",
    "tensorflow.keras.initializers.get",
    "tensorflow.reduce_sum",
    "tensorflow.split",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.initializers.BlockwiseInitializer.__init__": {
  "data": {
   "lineno": 30
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.initializers.BlockwiseInitializer.from_config": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "classmethod",
    "cls",
    "tensorflow.compat.v2.initializers.deserialize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.initializers.BlockwiseInitializer.get_config": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "tensorflow.compat.v2.initializers.serialize",
    "tensorflow.keras.initializers.get"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.initializers.BlockwiseInitializer.initializers": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.initializers.BlockwiseInitializer.sizes": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.initializers.BlockwiseInitializer.validate_args": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.initializers.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.initializers.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.initializers.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.initializers.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.initializers.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.initializers_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.layers.initializers_test.BlockwiseInitializerTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.initializers_test.BlockwiseInitializerTest.test_de_serialization": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "init_clone",
    "numpy.zeros",
    "tensorflow.compat.v2.initializers.deserialize",
    "tensorflow.compat.v2.initializers.serialize",
    "tensorflow_probability.layers.BlockwiseInitializer"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.initializers_test.BlockwiseInitializerTest.test_works_correctly": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "init",
    "numpy.zeros",
    "tensorflow_probability.layers.BlockwiseInitializer"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.initializers_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.initializers_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.initializers_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.initializers_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.initializers_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.initializers_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.initializers_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._DistributionAndTensorCoercibleMeta": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._TensorCoercibleMeta",
    "type"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._TensorCoercible": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._DistributionAndTensorCoercibleMeta",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible.six"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._TensorCoercible.__init__": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.distribution.Distribution.sample"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._TensorCoercible.__new__": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "TypeError",
    "isinstance",
    "tensorflow_probability.python.distributions.distribution",
    "tensorflow_probability.python.distributions.distribution.Distribution",
    "tensorflow_probability.python.distributions.distribution.Distribution.sample",
    "tensorflow_probability.python.distributions.distribution.__class__",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible.copy",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._TensorCoercibleMeta": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._TensorCoercibleMeta.__new__": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "super",
    "tensorflow.register_tensor_conversion_function",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._TensorCoercibleMeta",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._get_tensor_like_attributes",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._TensorCoercibleMeta.__new__._tensorize": {
  "data": {
   "lineno": 143
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible.__all__": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._get_tensor_like_attributes": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "dict",
    "getattr",
    "tensorflow.Tensor",
    "tensorflow.Tensor.OVERLOADABLE_OPERATORS.union",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._wrap_method"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._value": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "NotImplementedError",
    "callable",
    "isinstance",
    "tensorflow.is_tensor",
    "tensorflow.python.framework.composite_tensor.CompositeTensor",
    "tensorflow_probability.python.distributions.distribution._convert_to_tensor",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._wrap_method": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "getattr",
    "isinstance",
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible._wrap_method.wrapped": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "fn",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible.functools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible.composite_tensor": {
  "data": {
   "shadows": "tensorflow.python.framework.composite_tensor"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible.six": {
  "data": {
   "shadows": "six"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.distribution"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.bijectors",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testArrayPriority": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.dtc",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testConvertFromExplicit": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "hash",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.dtc",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testConvertToTensor": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "hash",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.dtc",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testErrorsByDefault": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "tensorflow.convert_to_tensor",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testOperatorBinary": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.array",
    "numpy.float32",
    "op",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.dtc",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.operator",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testOperatorBinaryLogical": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.array",
    "op",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.FakeBoolDistribution",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.dtc",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.operator",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testOperatorBoolNonzero": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "TypeError",
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.dtc",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testOperatorGetitem": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "numpy.linspace",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.dtc",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testOperatorIter": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "TypeError",
    "iter",
    "numpy.array",
    "numpy.float32",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.dtc",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testOperatorUnary": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.array",
    "numpy.float32",
    "op",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.dtc",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.operator",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testOperatorUnaryLogical": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.FakeBoolDistribution",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.dtc",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testReproducible": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.dtc",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testUserCustomOperators": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "tensorflow.Tensor",
    "tensorflow.constant",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.Normal",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.dtc",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testWhileLoop": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow.while_loop",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.dtc",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.DistributionTensorConversionTest.testWhileLoop._body": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.dtc",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.FakeBoolDistribution": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.tfd"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.FakeBoolDistribution.__init__": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "super",
    "tensorflow.bool",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.FakeBoolDistribution",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.FakeBoolDistribution._mean": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "tensorflow.bool",
    "tensorflow.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.Normal": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.tfd"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.Normal.__add__": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "isinstance",
    "super",
    "tensorflow.sqrt",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.Normal",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.dtc",
    "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.distribution_tensor_coercible": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.internal.distribution_tensor_coercible"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.dtc": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.operator": {
  "data": {
   "shadows": "operator"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.tfb": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.tfd": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.internal.distribution_tensor_coercible_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "tensorflow.python.framework.composite_tensor.CompositeTensor"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple.__getitem__": {
  "data": {
   "lineno": 54
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple.__init__": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "super",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple.__iter__": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "iter"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple.__len__": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple.__repr__": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "repr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple.__str__": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple._from_components": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "classmethod",
    "cls"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple._is_graph_tensor": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "any",
    "hasattr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple._shape_invariant_to_components": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple._to_components": {
  "data": {
   "lineno": 38
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.__all__": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.composite_tensor": {
  "data": {
   "shadows": "tensorflow.python.framework.composite_tensor"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.register_tensor_conversion_function",
    "tensorflow.test.main",
    "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple",
    "tensorflow_probability.python.layers.internal.tensor_tuple_test.MyTuple"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.CustomConvertToCompositeTensorTest": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.TensorFlowTestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.CustomConvertToCompositeTensorTest.test_getitem": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "range",
    "tensorflow.executing_eagerly",
    "tensorflow.get_static_value",
    "tensorflow.python.framework.ops.convert_to_tensor_or_composite",
    "tensorflow_probability.python.layers.internal.tensor_tuple_test.MyTuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.CustomConvertToCompositeTensorTest.test_iter": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "tensorflow.Tensor",
    "tensorflow.get_static_value",
    "tensorflow.is_tensor",
    "tensorflow.python.framework.ops.convert_to_tensor_or_composite",
    "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple",
    "tensorflow_probability.python.layers.internal.tensor_tuple_test.MyTuple",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.CustomConvertToCompositeTensorTest.test_shape_invariant": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "NotImplementedError",
    "tensorflow.python.framework.ops.convert_to_tensor_or_composite",
    "tensorflow_probability.python.layers.internal.tensor_tuple_test.MyTuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.CustomConvertToCompositeTensorTest.test_str_repr": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "_strip",
    "repr",
    "str",
    "tensorflow.executing_eagerly",
    "tensorflow.python.framework.ops.convert_to_tensor_or_composite",
    "tensorflow_probability.python.layers.internal.tensor_tuple_test.MyTuple",
    "tensorflow_probability.python.layers.internal.tensor_tuple_test.re"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.CustomConvertToCompositeTensorTest.test_str_repr._strip": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.internal.tensor_tuple_test.re"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.CustomConvertToCompositeTensorTest.test_to_from": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "tensorflow.python.framework.ops.convert_to_tensor_or_composite",
    "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple",
    "tensorflow_probability.python.layers.internal.tensor_tuple.TensorTuple._from_components",
    "tensorflow_probability.python.layers.internal.tensor_tuple_test.MyTuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.MyTuple": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.MyTuple.__getitem__": {
  "data": {
   "lineno": 37
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.MyTuple.__init__": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.MyTuple.__iter__": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "iter"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.MyTuple.__len__": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.ops": {
  "data": {
   "shadows": "tensorflow.python.framework.ops"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.tensor_tuple": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.internal.tensor_tuple"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.internal.tensor_tuple_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.masked_autoregressive": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.layers.masked_autoregressive.AutoregressiveTransform": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "tensorflow_probability.python.layers.distribution_layer.DistributionLambda"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.masked_autoregressive.AutoregressiveTransform.__init__": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "ValueError",
    "super",
    "tensorflow_probability.python.layers.masked_autoregressive.AutoregressiveTransform"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.masked_autoregressive.AutoregressiveTransform._transform": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "tensorflow.unstack",
    "tensorflow_probability.python.bijectors.MaskedAutoregressiveFlow",
    "tensorflow_probability.python.distributions.TransformedDistribution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.masked_autoregressive.AutoregressiveTransform.build": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "super",
    "tensorflow.keras.Sequential",
    "tensorflow.keras.layers.InputLayer",
    "tensorflow_probability.python.layers.masked_autoregressive.AutoregressiveTransform"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.masked_autoregressive.DistributionLambda": {
  "data": {
   "shadows": "tensorflow_probability.python.layers.distribution_layer.DistributionLambda"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.masked_autoregressive.__all__": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.masked_autoregressive.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.masked_autoregressive.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.masked_autoregressive.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.masked_autoregressive.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.masked_autoregressive.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.masked_autoregressive.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.masked_autoregressive_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.keras",
    "tensorflow.keras.layers",
    "tensorflow.test.main",
    "tensorflow_probability.bijectors",
    "tensorflow_probability.distributions",
    "tensorflow_probability.layers"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.layers.masked_autoregressive_test.AutoregressiveTransformTest": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.masked_autoregressive_test.AutoregressiveTransformTest.test_doc_string": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "model",
    "numpy.float32",
    "numpy.random.randn",
    "numpy.stack",
    "numpy.zeros",
    "tensorflow.compat.v2.optimizers.Adam",
    "tensorflow.concat",
    "tensorflow.float32",
    "tensorflow.shape",
    "tensorflow.zeros",
    "tensorflow_probability.python.layers.masked_autoregressive_test.tfb",
    "tensorflow_probability.python.layers.masked_autoregressive_test.tfd",
    "tensorflow_probability.python.layers.masked_autoregressive_test.tfk",
    "tensorflow_probability.python.layers.masked_autoregressive_test.tfkl",
    "tensorflow_probability.python.layers.masked_autoregressive_test.tfpl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.masked_autoregressive_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.masked_autoregressive_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.masked_autoregressive_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.masked_autoregressive_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.masked_autoregressive_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.masked_autoregressive_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.masked_autoregressive_test.tfb": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.masked_autoregressive_test.tfd": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.masked_autoregressive_test.tfk": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.masked_autoregressive_test.tfkl": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.masked_autoregressive_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.masked_autoregressive_test.tfpl": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.util": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.layers.util.__all__": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.util.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.util.default_loc_scale_fn": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "tensorflow.compat.v1.initializers.random_normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.util.default_loc_scale_fn._fn": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "add_variable_fn",
    "numpy.finfo",
    "tensorflow.nn.softplus"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.util.default_mean_field_normal_fn": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "tensorflow.compat.v1.initializers.random_normal",
    "tensorflow_probability.python.layers.util.default_loc_scale_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.util.default_mean_field_normal_fn._fn": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "add_variable_fn",
    "loc_scale_fn",
    "tensorflow.size",
    "tensorflow_probability.python.distributions.Deterministic",
    "tensorflow_probability.python.distributions.Independent",
    "tensorflow_probability.python.distributions.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.util.default_multivariate_normal_fn": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "add_variable_fn",
    "tensorflow.size",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.Independent",
    "tensorflow_probability.python.distributions.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.util.deserialize_function": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": [
    "TypeError",
    "tensorflow.keras.utils.deserialize_keras_object",
    "tensorflow.python.keras.utils.generic_utils.func_load"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.util.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.util.generic_utils": {
  "data": {
   "shadows": "tensorflow.python.keras.utils.generic_utils"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.util.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.util.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.util.serialize_function": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "isinstance",
    "tensorflow.python.keras.utils.generic_utils.func_dump",
    "tensorflow_probability.python.layers.util.types"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.util.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.util.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.util.types": {
  "data": {
   "shadows": "types"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.variable_input": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.layers.variable_input.VariableLayer": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "tensorflow.keras.layers.Layer"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.variable_input.VariableLayer.__init__": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "numpy.array",
    "numpy.int32",
    "super",
    "tensorflow.get_static_value",
    "tensorflow.keras.activations.get",
    "tensorflow.keras.constraints.get",
    "tensorflow.keras.initializers.get",
    "tensorflow.keras.regularizers.get",
    "tensorflow_probability.python.layers.variable_input.VariableLayer"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.variable_input.VariableLayer.call": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "tensorflow.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.variable_input.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.variable_input.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.variable_input.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.variable_input.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.variable_input.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.variable_input_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.layers.variable_input_test.VariableInputLayerTest": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.layers.variable_input_test.VariableInputLayerTest.test_functional_api": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "len",
    "model",
    "model.layers.trainable",
    "model.layers.weights.shape",
    "model.layers.weights.trainable",
    "model.weights",
    "model.weights.dtype",
    "tensorflow.as_dtype",
    "tensorflow.float64",
    "tensorflow.keras.Input",
    "tensorflow.keras.Model",
    "tensorflow.keras.layers.Dense",
    "tensorflow.zeros",
    "tensorflow_probability.layers.DistributionLambda",
    "tensorflow_probability.layers.VariableLayer",
    "tensorflow_probability.python.layers.variable_input_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.variable_input_test.VariableInputLayerTest.test_sequential_api": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "len",
    "model",
    "model.layers.trainable",
    "model.layers.weights.shape",
    "model.layers.weights.trainable",
    "model.weights",
    "model.weights.dtype",
    "tensorflow.as_dtype",
    "tensorflow.float64",
    "tensorflow.keras.layers.Dense",
    "tensorflow.keras.models.Sequential",
    "tensorflow.zeros",
    "tensorflow_probability.layers.DistributionLambda",
    "tensorflow_probability.layers.VariableLayer",
    "tensorflow_probability.python.layers.variable_input_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.layers.variable_input_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.variable_input_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.variable_input_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.variable_input_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.variable_input_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.layers.variable_input_test.tfd": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "tensorflow_probability.python.layers.variable_input_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.python.util.all_util.remove_undocumented",
    "tensorflow_probability.python.math._allowed_symbols"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.math._allowed_symbols": {
  "data": {
   "lineno": 47
  },
  "type": "constant"
 },
 "tensorflow_probability.python.math.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.batch_interp_regular_1d_grid": {
  "data": {
   "shadows": "tensorflow_probability.python.math.interpolation.batch_interp_regular_1d_grid"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.batch_interp_regular_nd_grid": {
  "data": {
   "shadows": "tensorflow_probability.python.math.interpolation.batch_interp_regular_nd_grid"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.cholesky_concat": {
  "data": {
   "shadows": "tensorflow_probability.python.math.linalg.cholesky_concat"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.clip_by_value_preserve_gradient": {
  "data": {
   "shadows": "tensorflow_probability.python.math.numeric.clip_by_value_preserve_gradient"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.custom_gradient": {
  "data": {
   "shadows": "tensorflow_probability.python.math.custom_gradient.custom_gradient"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.custom_gradient.__all__": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "tensorflow_probability.python.math.custom_gradient.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.custom_gradient.custom_gradient": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "maybe_stop",
    "sum",
    "tensorflow.cast",
    "tensorflow.compat.v1.assert_equal",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.control_dependencies",
    "tensorflow.convert_to_tensor",
    "tensorflow.reduce_sum",
    "tensorflow.shape",
    "tensorflow.size",
    "tensorflow.stop_gradient",
    "tensorflow_probability.python.math.custom_gradient.identity",
    "tensorflow_probability.python.math.custom_gradient.is_list_like",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.custom_gradient.custom_gradient.maybe_stop": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "tensorflow.stop_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.custom_gradient.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.custom_gradient.identity": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow.convert_to_tensor",
    "tensorflow.identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.custom_gradient.is_list_like": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.custom_gradient.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.custom_gradient.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.custom_gradient_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.math.custom_gradient_test.CustomGradientTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.custom_gradient_test.CustomGradientTest.test_works_correctly": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "f",
    "g",
    "int",
    "numpy.concatenate",
    "numpy.linspace",
    "tensorflow_probability.math.custom_gradient",
    "tensorflow_probability.math.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.custom_gradient_test.CustomGradientTest.test_works_correctly_both_f_g_zero": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "f",
    "g",
    "int",
    "numpy.concatenate",
    "numpy.linspace",
    "tensorflow_probability.math.custom_gradient",
    "tensorflow_probability.math.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.custom_gradient_test.CustomGradientTest.test_works_correctly_fx_gx_manually_stopped": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "f",
    "g",
    "numpy.float32",
    "numpy.square",
    "stop",
    "tensorflow.GradientTape",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.square",
    "tensorflow.stop_gradient",
    "tensorflow_probability.math.custom_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.custom_gradient_test.CustomGradientTest.test_works_correctly_side_vars": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "f",
    "g",
    "numpy.float32",
    "numpy.square",
    "tensorflow.GradientTape",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.square",
    "tensorflow_probability.math.custom_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.custom_gradient_test.CustomGradientTest.test_works_correctly_vector_of_vars": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "f",
    "g",
    "tensorflow.GradientTape",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.float32",
    "tensorflow.stack",
    "tensorflow_probability.math.custom_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.custom_gradient_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.custom_gradient_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.custom_gradient_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.custom_gradient_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.custom_gradient_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.custom_gradient_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.custom_gradient_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.dense_to_sparse": {
  "data": {
   "shadows": "tensorflow_probability.python.math.sparse.dense_to_sparse"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.diag_jacobian": {
  "data": {
   "shadows": "tensorflow_probability.python.math.diag_jacobian.diag_jacobian"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.diag_jacobian.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.math.diag_jacobian._is_list_like": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.diag_jacobian.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.diag_jacobian.diag_jacobian": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "ValueError",
    "_is_list_like",
    "enumerate",
    "fn",
    "len",
    "list",
    "loop_body",
    "make_loop_body",
    "tensorflow.TensorArray",
    "tensorflow.cast",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.executing_eagerly",
    "tensorflow.int32",
    "tensorflow.reduce_prod",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow.size",
    "tensorflow.transpose",
    "tensorflow.while_loop",
    "tensorflow.zeros_like",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.diag_jacobian.diag_jacobian.fn_slice": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "fn_broadcast",
    "tensorflow.expand_dims"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.diag_jacobian.diag_jacobian.fn_slice.fn_broadcast": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "_is_list_like",
    "fn",
    "len",
    "list",
    "tensorflow.concat",
    "tensorflow.reshape",
    "tensorflow.zeros_like",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.diag_jacobian.diag_jacobian.loop_body": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "tensorflow.concat",
    "tensorflow.expand_dims",
    "tensorflow.gradients",
    "tensorflow.reshape",
    "tensorflow.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.diag_jacobian.diag_jacobian.make_loop_body": {
  "data": {
   "lineno": 210
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.diag_jacobian.diag_jacobian.make_loop_body._fn": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "fn_slice",
    "tensorflow.concat",
    "tensorflow.reshape",
    "tensorflow.zeros",
    "tensorflow_probability.python.math.gradient.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.diag_jacobian.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.diag_jacobian.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.diag_jacobian.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.diag_jacobian.value_and_gradient": {
  "data": {
   "shadows": "tensorflow_probability.python.math.gradient.value_and_gradient"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.diag_jacobian_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.math.diag_jacobian_test.JacobianTest": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.diag_jacobian_test.JacobianTest.testJacobianDiagonal3DListInput": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "dtype",
    "numpy.float32",
    "numpy.ones",
    "numpy.zeros",
    "tensorflow.linalg.cholesky",
    "tensorflow.ones",
    "tensorflow.shape",
    "tensorflow_probability.math.diag_jacobian",
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.math.diag_jacobian_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.diag_jacobian_test.JacobianTest.testJacobianDiagonal3DListInput.target_fn": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "tensorflow.concat"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.diag_jacobian_test.JacobianTest.testJacobianDiagonal4D": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "dtype",
    "numpy.float32",
    "numpy.zeros",
    "tensorflow.linalg.cholesky",
    "tensorflow.ones",
    "tensorflow.shape",
    "tensorflow_probability.math.diag_jacobian",
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.math.diag_jacobian_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.diag_jacobian_test.JacobianTest.testJacobianDiagonal4D.target_fn": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "tensorflow.reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.diag_jacobian_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.diag_jacobian_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.diag_jacobian_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.diag_jacobian_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.diag_jacobian_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.diag_jacobian_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.diag_jacobian_test.tfd": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.math.diag_jacobian_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.gradient": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.math.gradient.__all__": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "tensorflow_probability.python.math.gradient.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.gradient.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.gradient.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.gradient.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.gradient.value_and_gradient": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "enumerate",
    "f",
    "isinstance",
    "list",
    "tensorflow.GradientTape",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.executing_eagerly",
    "tensorflow.gradients",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.gradient_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.math.gradient_test.GradientTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.gradient_test.GradientTest.test_list": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "f",
    "g",
    "int",
    "numpy.linspace",
    "tensorflow_probability.math.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.gradient_test.GradientTest.test_non_list": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "f",
    "g",
    "int",
    "numpy.concatenate",
    "numpy.linspace",
    "tensorflow_probability.math.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.gradient_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.gradient_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.gradient_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.gradient_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.gradient_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.gradient_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.gradient_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.interp_regular_1d_grid": {
  "data": {
   "shadows": "tensorflow_probability.python.math.interpolation.interp_regular_1d_grid"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.interpolation": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.math.interpolation.__all__": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.math.interpolation._assert_ndims_statically": {
  "data": {
   "lineno": 841,
   "symbols_in_volume": [
    "ValueError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation._batch_gather_with_broadcast": {
  "data": {
   "lineno": 932,
   "symbols_in_volume": [
    "tensorflow.broadcast_dynamic_shape",
    "tensorflow.compat.v1.batch_gather",
    "tensorflow.concat",
    "tensorflow.shape",
    "tensorflow.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation._batch_interp_with_gather_nd": {
  "data": {
   "lineno": 686,
   "symbols_in_volume": [
    "_binary_count",
    "_expand_x_fn",
    "enumerate",
    "numpy.nan",
    "tensorflow.cast",
    "tensorflow.clip_by_value",
    "tensorflow.compat.v1.where",
    "tensorflow.constant",
    "tensorflow.debugging.is_numeric_tensor",
    "tensorflow.expand_dims",
    "tensorflow.fill",
    "tensorflow.floor",
    "tensorflow.gather",
    "tensorflow.gather_nd",
    "tensorflow.int32",
    "tensorflow.math.add_n",
    "tensorflow.math.is_nan",
    "tensorflow.maximum",
    "tensorflow.minimum",
    "tensorflow.rank",
    "tensorflow.reduce_any",
    "tensorflow.reduce_prod",
    "tensorflow.shape",
    "tensorflow.stack",
    "tensorflow.unstack",
    "tensorflow.zeros",
    "tensorflow.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation._batch_interp_with_gather_nd._expand_x_fn": {
  "data": {
   "lineno": 748,
   "symbols_in_volume": [
    "tensorflow.concat",
    "tensorflow.ones_like",
    "tensorflow.reshape",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation._binary_count": {
  "data": {
   "lineno": 959,
   "symbols_in_volume": [
    "list",
    "tensorflow_probability.python.math.interpolation.itertools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation._interp_regular_1d_grid_impl": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "ValueError",
    "_assert_ndims_statically",
    "_batch_gather_with_broadcast",
    "_make_expand_x_fn_for_batch_interpolation",
    "_make_expand_x_fn_for_non_batch_interpolation",
    "expand_x_fn",
    "g",
    "isinstance",
    "numpy.nan",
    "str",
    "tensorflow.cast",
    "tensorflow.clip_by_value",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.compat.v1.where",
    "tensorflow.constant",
    "tensorflow.convert_to_tensor",
    "tensorflow.fill",
    "tensorflow.float32",
    "tensorflow.floor",
    "tensorflow.gather",
    "tensorflow.int32",
    "tensorflow.math.is_nan",
    "tensorflow.maximum",
    "tensorflow.minimum",
    "tensorflow.newaxis",
    "tensorflow.ones",
    "tensorflow.rank",
    "tensorflow.shape",
    "tensorflow.zeros",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.internal.distribution_util.make_non_negative_axis",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation._make_expand_x_fn_for_batch_interpolation": {
  "data": {
   "lineno": 895,
   "symbols_in_volume": [
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation._make_expand_x_fn_for_batch_interpolation.expand_right_dims": {
  "data": {
   "lineno": 907,
   "symbols_in_volume": [
    "tensorflow.bool",
    "tensorflow.broadcast_dynamic_shape",
    "tensorflow.cast",
    "tensorflow.concat",
    "tensorflow.int32",
    "tensorflow.ones",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow.size",
    "tensorflow.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation._make_expand_x_fn_for_non_batch_interpolation": {
  "data": {
   "lineno": 858,
   "symbols_in_volume": [
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation._make_expand_x_fn_for_non_batch_interpolation.expand_ends": {
  "data": {
   "lineno": 869,
   "symbols_in_volume": [
    "tensorflow.bool",
    "tensorflow.cast",
    "tensorflow.concat",
    "tensorflow.pad",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow.size",
    "tensorflow.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.interpolation.batch_interp_regular_1d_grid": {
  "data": {
   "lineno": 373,
   "symbols_in_volume": [
    "tensorflow_probability.python.math.interpolation._interp_regular_1d_grid_impl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation.batch_interp_regular_nd_grid": {
  "data": {
   "lineno": 502,
   "symbols_in_volume": [
    "ValueError",
    "_assert_ndims_statically",
    "_batch_interp_with_gather_nd",
    "_batch_of_zeros_with_rightmost_singletons",
    "isinstance",
    "str",
    "tensorflow.broadcast_dynamic_shape",
    "tensorflow.compat.dimension_value",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.get_static_value",
    "tensorflow.int32",
    "tensorflow.rank",
    "tensorflow.shape",
    "tensorflow_probability.python.internal.distribution_util.make_non_negative_axis",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation.batch_interp_regular_nd_grid._batch_of_zeros_with_rightmost_singletons": {
  "data": {
   "lineno": 665,
   "symbols_in_volume": [
    "tensorflow.concat",
    "tensorflow.int32",
    "tensorflow.ones",
    "tensorflow.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.interpolation.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.interpolation.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.interpolation.interp_regular_1d_grid": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "tensorflow_probability.python.math.interpolation._interp_regular_1d_grid_impl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.interpolation.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.interpolation.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.interpolation.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.interpolation_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest.setUp": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest.test_gradients_and_propagation_of_nan_in_x": {
  "data": {
   "lineno": 545,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.linspace",
    "numpy.nan",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow.gradients",
    "tensorflow_probability.math.batch_interp_regular_1d_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest.test_on_1d_array_constant_extension_fill_value": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.linspace",
    "tensorflow_probability.math.batch_interp_regular_1d_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest.test_on_1d_array_different_below_above_fill_values": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.linspace",
    "tensorflow_probability.math.batch_interp_regular_1d_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest.test_on_1d_array_extrapolate_fill_value": {
  "data": {
   "lineno": 374,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.linspace",
    "tensorflow_probability.math.batch_interp_regular_1d_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest.test_on_1d_array_log_spaced_grid": {
  "data": {
   "lineno": 396,
   "symbols_in_volume": [
    "tensorflow.exp",
    "tensorflow.linspace",
    "tensorflow.math.log",
    "tensorflow_probability.math.batch_interp_regular_1d_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest.test_on_1d_array_nan_fill_value": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.linspace",
    "numpy.nan",
    "tensorflow_probability.math.batch_interp_regular_1d_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest.test_scalar_valued_interpolation_with_1_batch_dim": {
  "data": {
   "lineno": 419,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.log",
    "tensorflow.exp",
    "tensorflow.linspace",
    "tensorflow.math.log",
    "tensorflow.stack",
    "tensorflow_probability.math.batch_interp_regular_1d_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest.test_scalar_valued_interpolation_with_1_batch_dim_x_has_empty_batch": {
  "data": {
   "lineno": 440,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.log",
    "tensorflow.exp",
    "tensorflow.linspace",
    "tensorflow.math.log",
    "tensorflow.stack",
    "tensorflow_probability.math.batch_interp_regular_1d_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest.test_scalar_valued_with_1_batch_dim_x_and_x_minmax_have_empty_batch": {
  "data": {
   "lineno": 462,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float32",
    "tensorflow.exp",
    "tensorflow.linspace",
    "tensorflow.stack",
    "tensorflow_probability.math.batch_interp_regular_1d_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest.test_vector_valued_interpolation_with_1_batch_dim_batch_minmax": {
  "data": {
   "lineno": 513,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.linspace",
    "numpy.log",
    "numpy.stack",
    "tensorflow_probability.math.batch_interp_regular_1d_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest.test_vector_valued_interpolation_with_1_batch_dim_scalar_minmax": {
  "data": {
   "lineno": 497,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.linspace",
    "numpy.stack",
    "tensorflow_probability.math.batch_interp_regular_1d_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegular1DGridTest.test_vector_valued_interpolation_with_empty_batch_shape": {
  "data": {
   "lineno": 481,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.log",
    "numpy.stack",
    "tensorflow.exp",
    "tensorflow.linspace",
    "tensorflow.math.log",
    "tensorflow.stack",
    "tensorflow_probability.math.batch_interp_regular_1d_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest": {
  "data": {
   "lineno": 571,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_1d_scalar_valued_function": {
  "data": {
   "lineno": 637,
   "symbols_in_volume": [
    "func",
    "tensorflow.linspace",
    "tensorflow.random.uniform",
    "tensorflow_probability.math.batch_interp_regular_nd_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_1d_scalar_valued_function.func": {
  "data": {
   "lineno": 645,
   "symbols_in_volume": [
    "tensorflow.sin"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_1d_scalar_valued_function_with_batch_dims": {
  "data": {
   "lineno": 664,
   "symbols_in_volume": [
    "func",
    "tensorflow.linspace",
    "tensorflow.random.uniform",
    "tensorflow.stack",
    "tensorflow_probability.math.batch_interp_regular_nd_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_1d_scalar_valued_function_with_batch_dims.func": {
  "data": {
   "lineno": 676,
   "symbols_in_volume": [
    "tensorflow.sin"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_2d_scalar_valued_function": {
  "data": {
   "lineno": 696,
   "symbols_in_volume": [
    "func",
    "tensorflow.linspace",
    "tensorflow.meshgrid",
    "tensorflow.random.uniform",
    "tensorflow.stack",
    "tensorflow_probability.math.batch_interp_regular_nd_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_2d_scalar_valued_function.func": {
  "data": {
   "lineno": 707,
   "symbols_in_volume": [
    "tensorflow.cos",
    "tensorflow.sin"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_2d_scalar_valued_no_leading_dims": {
  "data": {
   "lineno": 574,
   "symbols_in_volume": [
    "numpy.nan",
    "tensorflow_probability.math.batch_interp_regular_nd_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_2d_scalar_valued_no_leading_dims_fill_value_provided": {
  "data": {
   "lineno": 613,
   "symbols_in_volume": [
    "numpy.nan",
    "tensorflow_probability.math.batch_interp_regular_nd_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_2d_vector_valued_function": {
  "data": {
   "lineno": 731,
   "symbols_in_volume": [
    "func",
    "tensorflow.linspace",
    "tensorflow.meshgrid",
    "tensorflow.random.uniform",
    "tensorflow.stack",
    "tensorflow_probability.math.batch_interp_regular_nd_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_2d_vector_valued_function.func": {
  "data": {
   "lineno": 742,
   "symbols_in_volume": [
    "tensorflow.cos",
    "tensorflow.sin",
    "tensorflow.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_2d_vector_valued_function_with_batch_dims": {
  "data": {
   "lineno": 767,
   "symbols_in_volume": [
    "func",
    "tensorflow.linspace",
    "tensorflow.meshgrid",
    "tensorflow.random.uniform",
    "tensorflow.stack",
    "tensorflow_probability.math.batch_interp_regular_nd_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_2d_vector_valued_function_with_batch_dims.func": {
  "data": {
   "lineno": 782,
   "symbols_in_volume": [
    "tensorflow.cos",
    "tensorflow.sin",
    "tensorflow.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_3d_vector_valued_function_and_fill_value": {
  "data": {
   "lineno": 809,
   "symbols_in_volume": [
    "func",
    "tensorflow.linspace",
    "tensorflow.meshgrid",
    "tensorflow.random.uniform",
    "tensorflow.stack",
    "tensorflow_probability.math.batch_interp_regular_nd_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_3d_vector_valued_function_and_fill_value.func": {
  "data": {
   "lineno": 821,
   "symbols_in_volume": [
    "tensorflow.cos",
    "tensorflow.sin",
    "tensorflow.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_axis_set_too_large_raises": {
  "data": {
   "lineno": 856,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.math.batch_interp_regular_nd_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_gradients_nonzero_at_reference_points": {
  "data": {
   "lineno": 861,
   "symbols_in_volume": [
    "func",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.math.value_and_gradient",
    "y_func"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_gradients_nonzero_at_reference_points.func": {
  "data": {
   "lineno": 896,
   "symbols_in_volume": [
    "tensorflow_probability.math.batch_interp_regular_nd_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.BatchInterpRegularNDGridTest.test_gradients_nonzero_at_reference_points.y_func": {
  "data": {
   "lineno": 868,
   "symbols_in_volume": [
    "tensorflow.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest._check_sinusoid": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "len",
    "numpy.float32",
    "numpy.linspace",
    "numpy.newaxis",
    "numpy.pi",
    "numpy.prod",
    "numpy.sin",
    "numpy.zeros",
    "scipy.interpolate.interp1d",
    "sp_func",
    "tensorflow_probability.math.interp_regular_1d_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.setUp": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "numpy.random.RandomState"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.test_axis_1_shape_2_50_3_4_fvextrapolate_32bit": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "numpy.float32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.test_axis_1_shape_2_50_3_4_fvscalar_64bit": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.nan"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.test_axis_3_shape_2_3_4_50_fvscalar_32bit": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.inf"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.test_axis_n1_shape_2_3_4_50_fvextrapolate_32bit": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "numpy.float32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.test_axis_n2_shape_2_3_50_4_fvextrapolate_64bit": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "numpy.float32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.test_gradients_and_propagation_of_nan_in_x": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.linspace",
    "numpy.nan",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow.gradients",
    "tensorflow_probability.math.interp_regular_1d_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.test_matrix_interpolation": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow_probability.math.interp_regular_1d_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.test_on_1d_array_constant_extension_fill_value": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.linspace",
    "tensorflow_probability.math.interp_regular_1d_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.test_on_1d_array_different_below_above_fill_values": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.linspace",
    "tensorflow_probability.math.interp_regular_1d_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.test_on_1d_array_extrapolate_fill_value": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.linspace",
    "tensorflow_probability.math.interp_regular_1d_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.test_on_1d_array_log_spaced_grid": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "tensorflow.exp",
    "tensorflow.linspace",
    "tensorflow.math.log",
    "tensorflow_probability.math.interp_regular_1d_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.test_on_1d_array_nan_fill_value": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "numpy.linspace",
    "numpy.nan",
    "tensorflow_probability.math.interp_regular_1d_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.InterpRegular1DGridTest.test_scalar_valued_function_and_get_matrix_of_results": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "numpy.exp",
    "tensorflow.exp",
    "tensorflow.linspace",
    "tensorflow_probability.math.interp_regular_1d_grid"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.interpolation_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.interpolation_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.interpolation_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.interpolation_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.interpolation_test.scipy_interpolate": {
  "data": {
   "shadows": "scipy.interpolate"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.interpolation_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.interpolation_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.interpolation_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.linalg": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.math.linalg.__all__": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "tensorflow_probability.python.math.linalg._get_shape": {
  "data": {
   "lineno": 829,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.int32",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg._invert_permutation": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.math.top_k",
    "tensorflow_probability.python.internal.prefer_static.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg._lu_reconstruct_assertions": {
  "data": {
   "lineno": 679,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.compat.v1.assert_equal",
    "tensorflow.compat.v1.assert_rank",
    "tensorflow.compat.v1.assert_rank_at_least",
    "tensorflow.rank",
    "tensorflow.shape",
    "tensorflow.split"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg._lu_solve_assertions": {
  "data": {
   "lineno": 711,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.compat.dimension_value",
    "tensorflow.compat.v1.assert_equal",
    "tensorflow.compat.v1.assert_rank_at_least",
    "tensorflow.shape",
    "tensorflow_probability.python.math.linalg._lu_reconstruct_assertions"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg._maybe_validate_matrix": {
  "data": {
   "lineno": 898,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "tensorflow.compat.v1.assert_rank_at_least"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg._sparse_block_diag": {
  "data": {
   "lineno": 874,
   "symbols_in_volume": [
    "tensorflow.SparseTensor",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.eye",
    "tensorflow.int64",
    "tensorflow.matmul",
    "tensorflow_probability.python.math.linalg._get_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg._sparse_tensor_dense_matmul": {
  "data": {
   "lineno": 837,
   "symbols_in_volume": [
    "_sparse_block_diag",
    "tensorflow.concat",
    "tensorflow.reshape",
    "tensorflow.sparse.reshape",
    "tensorflow.sparse.sparse_dense_matmul",
    "tensorflow_probability.python.math.linalg._get_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg._swap_m_with_i": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "tensorflow.broadcast_to",
    "tensorflow.compat.v1.where",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.equal",
    "tensorflow.gather",
    "tensorflow.int64",
    "tensorflow.range",
    "tensorflow_probability.python.internal.prefer_static.rank",
    "tensorflow_probability.python.internal.prefer_static.shape",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.linalg.cholesky_concat": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "tensorflow.broadcast_to",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.linalg.cholesky",
    "tensorflow.linalg.matrix_transpose",
    "tensorflow.math.conj",
    "tensorflow.matmul",
    "tensorflow.python.ops.linalg.linear_operator_util.matrix_triangular_solve_with_broadcast",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.prefer_static.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.linalg.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.linalg.linear_operator_util": {
  "data": {
   "shadows": "tensorflow.python.ops.linalg.linear_operator_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.linalg.lu_matrix_inverse": {
  "data": {
   "lineno": 546,
   "symbols_in_volume": [
    "_lu_reconstruct_assertions",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.control_dependencies",
    "tensorflow.convert_to_tensor",
    "tensorflow.eye",
    "tensorflow.float32",
    "tensorflow.identity",
    "tensorflow.int32",
    "tensorflow.shape",
    "tensorflow_probability.python.math.linalg.lu_solve"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.lu_reconstruct": {
  "data": {
   "lineno": 608,
   "symbols_in_volume": [
    "_lu_reconstruct_assertions",
    "tensorflow.broadcast_to",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.control_dependencies",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.gather",
    "tensorflow.gather_nd",
    "tensorflow.identity",
    "tensorflow.int32",
    "tensorflow.linalg.band_part",
    "tensorflow.linalg.set_diag",
    "tensorflow.map_fn",
    "tensorflow.math.invert_permutation",
    "tensorflow.matmul",
    "tensorflow.newaxis",
    "tensorflow.ones",
    "tensorflow.range",
    "tensorflow.reduce_prod",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.lu_solve": {
  "data": {
   "lineno": 448,
   "symbols_in_volume": [
    "_lu_solve_assertions",
    "tensorflow.broadcast_dynamic_shape",
    "tensorflow.broadcast_to",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.concat",
    "tensorflow.control_dependencies",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.gather",
    "tensorflow.gather_nd",
    "tensorflow.identity",
    "tensorflow.int32",
    "tensorflow.linalg.band_part",
    "tensorflow.linalg.set_diag",
    "tensorflow.newaxis",
    "tensorflow.ones",
    "tensorflow.python.ops.linalg.linear_operator_util.matrix_triangular_solve_with_broadcast",
    "tensorflow.range",
    "tensorflow.reduce_prod",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.matrix_rank": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "_maybe_validate_matrix",
    "numpy.finfo",
    "numpy.max",
    "tensorflow.cast",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.control_dependencies",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.identity",
    "tensorflow.int32",
    "tensorflow.linalg.svd",
    "tensorflow.reduce_max",
    "tensorflow.reduce_sum",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.linalg.pinv": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": [
    "_maybe_validate_matrix",
    "float",
    "get_dim_size",
    "int",
    "isinstance",
    "max",
    "numpy.array",
    "numpy.finfo",
    "numpy.inf",
    "tensorflow.cast",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.compat.v1.where",
    "tensorflow.control_dependencies",
    "tensorflow.convert_to_tensor",
    "tensorflow.fill",
    "tensorflow.identity",
    "tensorflow.linalg.svd",
    "tensorflow.matmul",
    "tensorflow.maximum",
    "tensorflow.newaxis",
    "tensorflow.reduce_max",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.pinv.get_dim_size": {
  "data": {
   "lineno": 403,
   "symbols_in_volume": [
    "tensorflow.compat.dimension_value",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.pivoted_cholesky": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "NotImplementedError",
    "numpy.int64",
    "tensorflow.broadcast_to",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.int64",
    "tensorflow.linalg.diag_part",
    "tensorflow.linalg.matrix_transpose",
    "tensorflow.minimum",
    "tensorflow.reduce_max",
    "tensorflow.while_loop",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.prefer_static.range",
    "tensorflow_probability.python.internal.prefer_static.shape",
    "tensorflow_probability.python.internal.tensorshape_util.concatenate",
    "tensorflow_probability.python.internal.tensorshape_util.rank",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.pivoted_cholesky.batch_gather": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "tensorflow.gather"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.pivoted_cholesky.body": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": [
    "batch_gather",
    "tensorflow.argmax",
    "tensorflow.cast",
    "tensorflow.concat",
    "tensorflow.int32",
    "tensorflow.int64",
    "tensorflow.newaxis",
    "tensorflow.pad",
    "tensorflow.reduce_sum",
    "tensorflow.sqrt",
    "tensorflow.zeros",
    "tensorflow_probability.python.internal.prefer_static.rank",
    "tensorflow_probability.python.internal.tensorshape_util.set_shape",
    "tensorflow_probability.python.math.linalg._invert_permutation",
    "tensorflow_probability.python.math.linalg._swap_m_with_i"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.pivoted_cholesky.cond": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "tensorflow.equal",
    "tensorflow.linalg.norm",
    "tensorflow.reduce_max"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.prefer_static": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.prefer_static"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.linalg.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.linalg.sparse_or_dense_matmul": {
  "data": {
   "lineno": 738,
   "symbols_in_volume": [
    "_sparse_tensor_dense_matmul",
    "isinstance",
    "tensorflow.SparseTensor",
    "tensorflow.compat.v1.SparseTensorValue",
    "tensorflow.compat.v1.assert_rank_at_least",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.control_dependencies",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.identity",
    "tensorflow.matmul"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.sparse_or_dense_matvecmul": {
  "data": {
   "lineno": 791,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.newaxis",
    "tensorflow.squeeze",
    "tensorflow_probability.python.math.linalg.sparse_or_dense_matmul"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg.tensorshape_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.tensorshape_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.linalg.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.linalg_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.python.math.linalg_test._CholeskyExtend",
    "tensorflow_probability.python.math.linalg_test._PivotedCholesky"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.math.linalg_test.CholeskyExtend32Static": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.math.linalg_test._CholeskyExtend"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.CholeskyExtend64Dynamic": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.math.linalg_test._CholeskyExtend"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.LUMatrixInverseDynamic": {
  "data": {
   "lineno": 429,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.math.linalg_test._LUMatrixInverse"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.LUMatrixInverseStatic": {
  "data": {
   "lineno": 424,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.math.linalg_test._LUMatrixInverse"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.LUReconstructDynamic": {
  "data": {
   "lineno": 381,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.math.linalg_test._LUReconstruct"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.LUReconstructStatic": {
  "data": {
   "lineno": 376,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.math.linalg_test._LUReconstruct"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.LUSolveDynamic": {
  "data": {
   "lineno": 494,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.math.linalg_test._LUSolve"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.LUSolveStatic": {
  "data": {
   "lineno": 489,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.math.linalg_test._LUSolve"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.MatrixRankDynamic64Test": {
  "data": {
   "lineno": 663,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.math.linalg_test._MatrixRankTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.MatrixRankStatic32Test": {
  "data": {
   "lineno": 657,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.math.linalg_test._MatrixRankTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.PinvTestDynamic32CustomtRcond": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.math.linalg_test._PinvTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.PinvTestDynamic32DefaultRcond": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.math.linalg_test._PinvTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.PinvTestStatic64CustomRcond": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.math.linalg_test._PinvTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.PinvTestStatic64DefaultRcond": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.math.linalg_test._PinvTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.PivotedCholesky32Static": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.math.linalg_test._PivotedCholesky"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.PivotedCholesky64Dynamic": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.math.linalg_test._PivotedCholesky"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.SparseOrDenseMatmulDynamic": {
  "data": {
   "lineno": 603,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.math.linalg_test._SparseOrDenseMatmul"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.SparseOrDenseMatmulDynamicSparse": {
  "data": {
   "lineno": 614,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.math.linalg_test._SparseOrDenseMatmul"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.SparseOrDenseMatmulStatic": {
  "data": {
   "lineno": 598,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.math.linalg_test._SparseOrDenseMatmul"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test.SparseOrDenseMatmulStaticSparse": {
  "data": {
   "lineno": 608,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.math.linalg_test._SparseOrDenseMatmul"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test._CholeskyExtend": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test._CholeskyExtend.testCholeskyExtension": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.random.random",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.concat",
    "tensorflow.linalg.cholesky",
    "tensorflow.newaxis",
    "tensorflow_probability.math.cholesky_concat",
    "tensorflow_probability.positive_semidefinite_kernels.MaternOneHalf"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._CholeskyExtend.testCholeskyExtensionRandomized": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.array_shapes",
    "hypothesis.extra.numpy.min",
    "hypothesis.extra.numpy.newaxis",
    "hypothesis.extra.numpy.random.seed",
    "hypothesis.extra.numpy.random.uniform",
    "hypothesis.extra.numpy.zeros",
    "hypothesis.given",
    "hypothesis.settings",
    "hypothesis.strategies.data",
    "hypothesis.strategies.integers",
    "hypothesis.strategies.just",
    "jitter",
    "len",
    "tensorflow.TensorShape",
    "tensorflow.broadcast_static_shape",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.concat",
    "tensorflow.linalg.cholesky",
    "tensorflow.linalg.eye",
    "tensorflow.zeros",
    "tensorflow_probability.math.cholesky_concat",
    "tensorflow_probability.positive_semidefinite_kernels.MaternOneHalf",
    "tensorflow_probability.python.internal.test_util.broadcasting_shapes",
    "tensorflow_probability.python.internal.test_util.derandomize_hypothesis",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._LUMatrixInverse": {
  "data": {
   "lineno": 386,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.float32",
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test._LUMatrixInverse.test_batch": {
  "data": {
   "lineno": 402,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.array",
    "hypothesis.extra.numpy.linalg.inv",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.linalg.lu",
    "tensorflow_probability.math.lu_matrix_inverse"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._LUMatrixInverse.test_non_batch": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.array",
    "hypothesis.extra.numpy.linalg.inv",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.linalg.lu",
    "tensorflow_probability.math.lu_matrix_inverse"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._LUReconstruct": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.float32",
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test._LUReconstruct.test_batch": {
  "data": {
   "lineno": 358,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.array",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.linalg.lu",
    "tensorflow_probability.math.lu_reconstruct"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._LUReconstruct.test_non_batch": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.array",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.linalg.lu",
    "tensorflow_probability.math.lu_reconstruct"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._LUSolve": {
  "data": {
   "lineno": 434,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.float32",
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test._LUSolve.test_batch_broadcast": {
  "data": {
   "lineno": 459,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.array",
    "hypothesis.extra.numpy.linalg.solve",
    "hypothesis.extra.numpy.newaxis",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.linalg.lu",
    "tensorflow_probability.math.lu_solve"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._LUSolve.test_non_batch": {
  "data": {
   "lineno": 438,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.array",
    "hypothesis.extra.numpy.linalg.solve",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.linalg.lu",
    "tensorflow_probability.math.lu_solve"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._MatrixRankTest": {
  "data": {
   "lineno": 620,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test._MatrixRankTest.test_batch_default_tolerance": {
  "data": {
   "lineno": 622,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.array",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.math.matrix_rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._MatrixRankTest.test_custom_tolerance_broadcasts": {
  "data": {
   "lineno": 637,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.linalg.qr",
    "tensorflow.linalg.solve",
    "tensorflow.random.uniform",
    "tensorflow.transpose",
    "tensorflow_probability.math.matrix_rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._MatrixRankTest.test_nonsquare": {
  "data": {
   "lineno": 644,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.array",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.math.matrix_rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._PinvTest": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test._PinvTest.expected_pinv": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "float",
    "hypothesis.extra.numpy.concatenate",
    "hypothesis.extra.numpy.finfo",
    "hypothesis.extra.numpy.linalg.pinv",
    "hypothesis.extra.numpy.ndindex",
    "hypothesis.extra.numpy.zeros",
    "isinstance",
    "max"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._PinvTest.test_nonsquare": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.stack",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.math.pinv"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._PinvTest.test_symmetric": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.stack",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.math.pinv"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._PivotedCholesky": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test._PivotedCholesky._random_batch_psd": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.arange",
    "hypothesis.extra.numpy.diag",
    "hypothesis.extra.numpy.matmul",
    "hypothesis.extra.numpy.random.random",
    "hypothesis.extra.numpy.swapaxes",
    "len",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._PivotedCholesky.testGradient": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "tensorflow.linalg.norm",
    "tensorflow_probability.math.pivoted_cholesky",
    "tensorflow_probability.math.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._PivotedCholesky.testGradientTapeCFv2": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": [
    "tensorflow.GradientTape",
    "tensorflow.linalg.norm",
    "tensorflow.ones_like",
    "tensorflow.python.framework.test_util.enable_control_flow_v2",
    "tensorflow_probability.math.pivoted_cholesky"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._PivotedCholesky.testOracleExamples": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "hypothesis.extra.numpy.array",
    "hypothesis.extra.numpy.matmul",
    "range",
    "tensorflow_probability.math.pivoted_cholesky"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._PivotedCholesky.testPivotedCholesky": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.arange",
    "hypothesis.extra.numpy.bool",
    "hypothesis.extra.numpy.finfo",
    "hypothesis.extra.numpy.ones",
    "range",
    "tensorflow.abs",
    "tensorflow.linalg.diag_part",
    "tensorflow.linalg.norm",
    "tensorflow.math.count_nonzero",
    "tensorflow.matmul",
    "tensorflow.shape",
    "tensorflow_probability.math.pivoted_cholesky"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._SparseOrDenseMatmul": {
  "data": {
   "lineno": 499,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.float32",
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.linalg_test._SparseOrDenseMatmul._make_placeholder": {
  "data": {
   "lineno": 504,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._SparseOrDenseMatmul._make_sparse_placeholder": {
  "data": {
   "lineno": 508,
   "symbols_in_volume": [
    "tensorflow.SparseTensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._SparseOrDenseMatmul.test_batch_matmul": {
  "data": {
   "lineno": 570,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.array"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._SparseOrDenseMatmul.test_batch_matvecmul": {
  "data": {
   "lineno": 583,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.array"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._SparseOrDenseMatmul.test_non_batch_matmul": {
  "data": {
   "lineno": 560,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.array"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._SparseOrDenseMatmul.test_non_batch_matvecmul": {
  "data": {
   "lineno": 565,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.array"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._SparseOrDenseMatmul.verify_sparse_dense_matmul": {
  "data": {
   "lineno": 522,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.matmul",
    "tensorflow_probability.math.dense_to_sparse",
    "tensorflow_probability.math.sparse_or_dense_matmul"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test._SparseOrDenseMatmul.verify_sparse_dense_matvecmul": {
  "data": {
   "lineno": 539,
   "symbols_in_volume": [
    "hypothesis.extra.numpy.matmul",
    "hypothesis.extra.numpy.newaxis",
    "tensorflow_probability.math.dense_to_sparse",
    "tensorflow_probability.math.sparse_or_dense_matvecmul"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.linalg_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.linalg_test.hp": {
  "data": {
   "shadows": "hypothesis"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.linalg_test.hpnp": {
  "data": {
   "shadows": "hypothesis.extra.numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.linalg_test.hps": {
  "data": {
   "shadows": "hypothesis.strategies"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.linalg_test.make_tensor_hiding_attributes": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": [
    "getattr",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.linalg_test.np": {
  "data": {
   "shadows": "hypothesis.extra.numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.linalg_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.linalg_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.linalg_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.linalg_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.linalg_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.linalg_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.log1psquare": {
  "data": {
   "shadows": "tensorflow_probability.python.math.numeric.log1psquare"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.lu_matrix_inverse": {
  "data": {
   "shadows": "tensorflow_probability.python.math.linalg.lu_matrix_inverse"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.lu_reconstruct": {
  "data": {
   "shadows": "tensorflow_probability.python.math.linalg.lu_reconstruct"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.lu_solve": {
  "data": {
   "shadows": "tensorflow_probability.python.math.linalg.lu_solve"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.matrix_rank": {
  "data": {
   "shadows": "tensorflow_probability.python.math.linalg.matrix_rank"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.numeric": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.math.numeric.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.numeric.clip_by_value_preserve_gradient": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "tensorflow.clip_by_value",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.stop_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.numeric.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.numeric.log1psquare": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": [
    "numpy.finfo",
    "numpy.float64",
    "tensorflow.abs",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.compat.v1.where",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.math.log",
    "tensorflow.math.log1p",
    "tensorflow.ones_like",
    "tensorflow.square"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.numeric.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.numeric.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.numeric.soft_threshold": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "tensorflow.abs",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.maximum",
    "tensorflow.sign"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.numeric.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.numeric_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.math.numeric_test.ClipByValuePreserveGrad32": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.numeric_test.ClipByValuePreserveGrad32.test_clip_by_value_preserve_grad": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.ones_like",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.math.gradient.value_and_gradient",
    "tensorflow_probability.python.math.numeric.clip_by_value_preserve_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.numeric_test.ClipByValuePreserveGrad64": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "tensorflow.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.math.numeric_test.ClipByValuePreserveGrad32"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.numeric_test.Log1pSquareTest32": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.numeric_test.Log1pSquareTest32.test_log1psquare": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.math.gradient.value_and_gradient",
    "tensorflow_probability.python.math.numeric.log1psquare"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.numeric_test.Log1pSquareTest64": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "tensorflow.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.math.numeric_test.Log1pSquareTest32"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.numeric_test.SoftThresholdTest": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.numeric_test.SoftThresholdTest.test_soft_threshold": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.math.gradient.value_and_gradient",
    "tensorflow_probability.python.math.numeric.soft_threshold"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.numeric_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.numeric_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.numeric_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.numeric_test.numeric": {
  "data": {
   "shadows": "tensorflow_probability.python.math.numeric"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.numeric_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.numeric_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.numeric_test.test_case": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_case"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.numeric_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.numeric_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.numeric_test.tfp_math_gradient": {
  "data": {
   "shadows": "tensorflow_probability.python.math.gradient"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.math.ode.BDF": {
  "data": {
   "shadows": "tensorflow_probability.python.math.ode.bdf.BDF"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.ChosenBySolver": {
  "data": {
   "shadows": "tensorflow_probability.python.math.ode.base.ChosenBySolver"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.Diagnostics": {
  "data": {
   "shadows": "tensorflow_probability.python.math.ode.base.Diagnostics"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.Results": {
  "data": {
   "shadows": "tensorflow_probability.python.math.ode.base.Results"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.Solver": {
  "data": {
   "shadows": "tensorflow_probability.python.math.ode.base.Solver"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.math.ode.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.base": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.math.ode.base.ChosenBySolver": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "tensorflow_probability.python.math.ode.base.collections"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.ode.base.Diagnostics": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "object",
    "tensorflow_probability.python.math.ode.base.abc",
    "tensorflow_probability.python.math.ode.base.six"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.ode.base.Diagnostics.num_jacobian_evaluations": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "tensorflow_probability.python.math.ode.base.abc"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.base.Diagnostics.num_matrix_factorizations": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "tensorflow_probability.python.math.ode.base.abc"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.base.Diagnostics.num_ode_fn_evaluations": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "tensorflow_probability.python.math.ode.base.abc"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.base.Diagnostics.status": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "tensorflow_probability.python.math.ode.base.abc"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.base.Diagnostics.success": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.base.Results": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "tensorflow_probability.python.math.ode.base.collections"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.ode.base.Solver": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "object",
    "tensorflow_probability.python.math.ode.base.abc",
    "tensorflow_probability.python.math.ode.base.six"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.ode.base.Solver.solve": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "tensorflow_probability.python.math.ode.base.abc"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.base.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.math.ode.base.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.base.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.base.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.base.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.base.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.base.six": {
  "data": {
   "shadows": "six"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.bdf": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability.python.math.ode.bdf.collections"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tensorflow_probability.python.math.ode.base.Solver"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF.__init__": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "tensorflow_probability.python.math.ode.bdf_util.MAX_ORDER"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF.solve": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "NotImplementedError",
    "ValueError",
    "_BDFDiagnostics",
    "_BDFIterand",
    "_BDFSolverInternalState",
    "assert_ops",
    "isinstance",
    "jacobian_fn_mat",
    "ode_fn_vec",
    "tensorflow.compat.v2.TensorArray",
    "tensorflow.compat.v2.TensorShape",
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.control_dependencies",
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.ensure_shape",
    "tensorflow.compat.v2.int32",
    "tensorflow.compat.v2.logging.warn",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.size",
    "tensorflow.compat.v2.stack",
    "tensorflow.compat.v2.while_loop",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.math.ode.base.ChosenBySolver",
    "tensorflow_probability.python.math.ode.base.Results",
    "tensorflow_probability.python.math.ode.bdf_util.MAX_ORDER",
    "tensorflow_probability.python.math.ode.bdf_util.ORDERS",
    "tensorflow_probability.python.math.ode.bdf_util.RECIPROCAL_SUMS",
    "tensorflow_probability.python.math.ode.bdf_util.first_step_size",
    "tensorflow_probability.python.math.ode.util.error_if_not_real_or_complex",
    "tensorflow_probability.python.math.ode.util.error_if_not_vector",
    "tensorflow_probability.python.math.ode.util.get_jacobian_fn_mat",
    "tensorflow_probability.python.math.ode.util.get_ode_fn_vec"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF.solve.advance_to_solution_time": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "tensorflow.compat.v2.while_loop"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF.solve.advance_to_solution_time.step_cond": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": [
    "tensorflow.compat.v2.equal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF.solve.advance_to_solution_time_cond": {
  "data": {
   "lineno": 691,
   "symbols_in_volume": [
    "tensorflow.compat.v2.equal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF.solve.assert_ops": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "numpy.inf",
    "tensorflow.compat.v2.Assert",
    "tensorflow.compat.v2.assert_near",
    "tensorflow.compat.v2.norm",
    "tensorflow_probability.python.math.ode.bdf_util.MAX_ORDER",
    "tensorflow_probability.python.math.ode.util.assert_increasing",
    "tensorflow_probability.python.math.ode.util.assert_nonnegative",
    "tensorflow_probability.python.math.ode.util.assert_positive"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF.solve.maybe_step": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": [
    "_BDFDiagnostics",
    "_BDFIterand",
    "_BDFSolverInternalState",
    "numpy.nan",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.TensorArray",
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.clip_by_value",
    "tensorflow.compat.v2.cond",
    "tensorflow.compat.v2.equal",
    "tensorflow.compat.v2.logical_not",
    "tensorflow.compat.v2.norm",
    "tensorflow_probability.python.math.ode.bdf_util.MAX_ORDER",
    "tensorflow_probability.python.math.ode.bdf_util.error_ratio",
    "tensorflow_probability.python.math.ode.bdf_util.interpolate_backward_differences",
    "tensorflow_probability.python.math.ode.bdf_util.newton",
    "tensorflow_probability.python.math.ode.bdf_util.update_backward_differences",
    "tensorflow_probability.python.math.ode.util.next_step_size",
    "update_factorization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF.solve.maybe_step.maybe_update_factorization": {
  "data": {
   "lineno": 386,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cond",
    "update_factorization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF.solve.maybe_step.update_factorization": {
  "data": {
   "lineno": 371,
   "symbols_in_volume": [
    "tensorflow_probability.python.math.ode.bdf_util.newton_qr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF.solve.maybe_step.update_jacobian_and_factorization": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": [
    "jacobian_fn_mat",
    "update_factorization"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF.solve.step": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": [
    "jacobian_fn_mat",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.while_loop"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF.solve.step.maybe_step_cond": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": [
    "tensorflow.compat.v2.equal",
    "tensorflow.compat.v2.logical_not"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf.BDF.solve.step_cond": {
  "data": {
   "lineno": 677,
   "symbols_in_volume": [
    "tensorflow.compat.v2.equal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf._BDFDiagnostics": {
  "data": {
   "lineno": 718,
   "symbols_in_volume": [
    "tensorflow_probability.python.math.ode.base.Diagnostics",
    "tensorflow_probability.python.math.ode.bdf.collections"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.ode.bdf._BDFIterand": {
  "data": {
   "lineno": 729
  },
  "type": "constant"
 },
 "tensorflow_probability.python.math.ode.bdf._BDFSolverInternalState": {
  "data": {
   "lineno": 743,
   "symbols_in_volume": [
    "tensorflow_probability.python.math.ode.bdf.collections"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.ode.bdf.__all__": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.math.ode.bdf.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.bdf.base": {
  "data": {
   "shadows": "tensorflow_probability.python.math.ode.base"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.bdf.bdf_util": {
  "data": {
   "shadows": "tensorflow_probability.python.math.ode.bdf_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.bdf.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.bdf.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.bdf.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.bdf.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.bdf.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.bdf.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.bdf.util": {
  "data": {
   "shadows": "tensorflow_probability.python.math.ode.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.bdf_util": {
  "data": {
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.concatenate",
    "numpy.cumsum",
    "numpy.nan",
    "tensorflow_probability.python.math.ode.bdf_util.MAX_ORDER",
    "tensorflow_probability.python.math.ode.bdf_util.ORDERS",
    "tensorflow_probability.python.math.ode.bdf_util.collections"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.math.ode.bdf_util.MAX_ORDER": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "tensorflow_probability.python.math.ode.bdf_util.ORDERS": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.math.ode.bdf_util.RECIPROCAL_SUMS": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.math.ode.bdf_util._NewtonIterand": {
  "data": {
   "lineno": 194
  },
  "type": "constant"
 },
 "tensorflow_probability.python.math.ode.bdf_util.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.bdf_util.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.bdf_util.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.bdf_util.error_ratio": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.norm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf_util.first_step_size": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "ode_fn_vec",
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.clip_by_value",
    "tensorflow.compat.v2.math.rsqrt",
    "tensorflow.compat.v2.norm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf_util.interpolate_backward_differences": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "interpolation_matrix",
    "tensorflow.compat.v2.concat",
    "tensorflow.compat.v2.gather",
    "tensorflow.compat.v2.matmul",
    "tensorflow.compat.v2.shape",
    "tensorflow.compat.v2.stack",
    "tensorflow.compat.v2.zeros",
    "tensorflow_probability.python.math.ode.bdf_util.MAX_ORDER"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf_util.interpolation_matrix": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.math.cumprod",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.transpose",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.math.ode.bdf_util.MAX_ORDER"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf_util.newton": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "_NewtonIterand",
    "numpy.array",
    "numpy.newaxis",
    "tensorflow.compat.v1.where",
    "tensorflow.compat.v2.abs",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.identity",
    "tensorflow.compat.v2.logical_not",
    "tensorflow.compat.v2.range",
    "tensorflow.compat.v2.reduce_sum",
    "tensorflow.compat.v2.while_loop",
    "tensorflow.compat.v2.zeros_like",
    "tensorflow_probability.python.math.ode.bdf_util.MAX_ORDER",
    "tensorflow_probability.python.math.ode.bdf_util.RECIPROCAL_SUMS"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf_util.newton.newton_body": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "_NewtonIterand",
    "ode_fn_vec",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.constant",
    "tensorflow.compat.v2.equal",
    "tensorflow.compat.v2.linalg.triangular_solve",
    "tensorflow.compat.v2.matmul",
    "tensorflow.compat.v2.newaxis",
    "tensorflow.compat.v2.norm",
    "tensorflow.compat.v2.squeeze",
    "tensorflow.compat.v2.transpose"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf_util.newton_qr": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.eye",
    "tensorflow.compat.v2.linalg.qr",
    "tensorflow.compat.v2.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf_util.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.bdf_util.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.bdf_util.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.bdf_util.tf1": {
  "data": {
   "shadows": "tensorflow.compat.v1"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.bdf_util.update_backward_differences": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "tensorflow.compat.v2.TensorArray",
    "tensorflow.compat.v2.TensorShape",
    "tensorflow.compat.v2.while_loop",
    "tensorflow_probability.python.math.ode.bdf_util.MAX_ORDER"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf_util.update_backward_differences.body": {
  "data": {
   "lineno": 233
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf_util_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.math.ode.bdf_util_test.BDFUtilTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "absl.testing.parameterized.named_parameters",
    "tensorflow.complex128",
    "tensorflow.float32",
    "tensorflow.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.ode.bdf_util_test.BDFUtilTest.test_first_step_size_is_large_when_ode_fn_is_constant": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "abs",
    "tensorflow.constant",
    "tensorflow_probability.python.math.ode.bdf_util.first_step_size"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf_util_test.BDFUtilTest.test_interpolate_backward_differences_zeroth_order_is_unchanged": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "abs",
    "numpy.random.normal",
    "tensorflow.constant",
    "tensorflow_probability.python.math.ode.bdf_util.MAX_ORDER",
    "tensorflow_probability.python.math.ode.bdf_util.interpolate_backward_differences"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf_util_test.BDFUtilTest.test_interpolation_matrix_unit_step_size_ratio": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.int32",
    "tensorflow_probability.python.math.ode.bdf_util.MAX_ORDER",
    "tensorflow_probability.python.math.ode.bdf_util.interpolation_matrix"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf_util_test.BDFUtilTest.test_newton_order_one": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "abs",
    "tensorflow.cast",
    "tensorflow.constant",
    "tensorflow.int32",
    "tensorflow_probability.python.math.ode.bdf_util.newton",
    "tensorflow_probability.python.math.ode.bdf_util.newton_qr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.bdf_util_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.bdf_util_test.bdf_util": {
  "data": {
   "shadows": "tensorflow_probability.python.math.ode.bdf_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.bdf_util_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.bdf_util_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.bdf_util_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.bdf_util_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.bdf_util_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.bdf_util_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.ode_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.math.ode.ode_test.GeneralTest": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "absl.testing.parameterized.named_parameters",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.math.ode.BDF"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.ode.ode_test.GeneralTest.test_bad_initial_state_dtype": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "TypeError",
    "numpy.int32",
    "solver"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.GeneralTest.test_diagnostics": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "numpy.float64",
    "solver"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.GeneralTest.test_previous_solver_internal_state": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.float64",
    "numpy.newaxis",
    "solver",
    "tensorflow_probability.math.ode.ChosenBySolver",
    "tensorflow_probability.python.math.ode.ode_test._ATOL",
    "tensorflow_probability.python.math.ode.ode_test._RTOL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.NonStiffTest": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "absl.testing.parameterized.named_parameters",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.math.ode.BDF"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.ode.ode_test.NonStiffTest.test_linear": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "numpy.diag",
    "numpy.exp",
    "numpy.float64",
    "numpy.newaxis",
    "solver",
    "tensorflow_probability.math.ode.ChosenBySolver",
    "tensorflow_probability.python.math.ode.ode_test._ATOL",
    "tensorflow_probability.python.math.ode.ode_test._RTOL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.NonStiffTest.test_linear_complex": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "numpy.complex128",
    "numpy.diag",
    "numpy.exp",
    "numpy.newaxis",
    "solver",
    "tensorflow_probability.math.ode.ChosenBySolver",
    "tensorflow_probability.python.math.ode.ode_test._ATOL",
    "tensorflow_probability.python.math.ode.ode_test._RTOL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.NonStiffTest.test_linear_dense": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.float64",
    "numpy.linalg.eig",
    "numpy.linalg.inv",
    "numpy.matmul",
    "numpy.random.randn",
    "numpy.random.seed",
    "solver",
    "tensorflow_probability.python.math.ode.ode_test._ATOL",
    "tensorflow_probability.python.math.ode.ode_test._RTOL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.NonStiffTest.test_linear_dense.ode_fn": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "tensorflow.matmul",
    "tensorflow.newaxis",
    "tensorflow.squeeze"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.NonStiffTest.test_linear_jacobian_fn_unspecified": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.float64",
    "numpy.newaxis",
    "solver",
    "tensorflow_probability.math.ode.ChosenBySolver",
    "tensorflow_probability.python.math.ode.ode_test._ATOL",
    "tensorflow_probability.python.math.ode.ode_test._RTOL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.NonStiffTest.test_ode_fn_is_zero": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.ones",
    "numpy.zeros",
    "numpy.zeros_like",
    "solver",
    "tensorflow_probability.math.ode.ChosenBySolver",
    "tensorflow_probability.python.math.ode.ode_test._ATOL",
    "tensorflow_probability.python.math.ode.ode_test._RTOL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.NonStiffTest.test_riccati": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "numpy.float64",
    "solver",
    "tensorflow_probability.math.ode.ChosenBySolver",
    "tensorflow_probability.python.math.ode.ode_test._ATOL",
    "tensorflow_probability.python.math.ode.ode_test._RTOL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.NonStiffTest.test_state_with_matrix_shape": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "numpy.concatenate",
    "numpy.diag",
    "numpy.exp",
    "numpy.float64",
    "numpy.newaxis",
    "numpy.ones",
    "numpy.reshape",
    "solver",
    "tensorflow_probability.math.ode.ChosenBySolver",
    "tensorflow_probability.python.math.ode.ode_test._ATOL",
    "tensorflow_probability.python.math.ode.ode_test._RTOL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.NonStiffTest.test_zero_dims": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.float64",
    "solver",
    "tensorflow_probability.math.ode.ChosenBySolver",
    "tensorflow_probability.python.math.ode.ode_test._ATOL",
    "tensorflow_probability.python.math.ode.ode_test._RTOL"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.StiffTest": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "absl.testing.parameterized.named_parameters",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.math.ode.BDF"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.ode.ode_test.StiffTest.test_van_der_pol": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "numpy.float64",
    "solver"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.StiffTest.test_van_der_pol.jacobian_fn": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "tensorflow.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test.StiffTest.test_van_der_pol.ode_fn": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "tensorflow.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.ode_test._ATOL": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.math.ode.ode_test._RTOL": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.math.ode.ode_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.ode_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.ode_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.ode_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.ode_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.ode_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.ode_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.ode_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.util": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.math.ode.util.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.util.assert_increasing": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": [
    "tensorflow.compat.v2.Assert",
    "tensorflow.compat.v2.reduce_all"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util.assert_nonnegative": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "tensorflow.compat.v2.Assert",
    "tensorflow.compat.v2.reduce_all",
    "tensorflow.compat.v2.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util.assert_positive": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "tensorflow.compat.v2.Assert",
    "tensorflow.compat.v2.reduce_all",
    "tensorflow.compat.v2.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.util.error_if_not_real_or_complex": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "TypeError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util.error_if_not_vector": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "ValueError",
    "len"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util.get_jacobian_fn_mat": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "callable",
    "tensorflow.compat.v2.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util.get_jacobian_fn_mat.automatic_jacobian_fn_mat": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "ode_fn_vec",
    "tensorflow.compat.v2.GradientTape",
    "tensorflow.compat.v2.size",
    "tensorflow.compat.v2.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util.get_jacobian_fn_mat.constant_jacobian_fn_mat": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.size"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util.get_jacobian_fn_mat.jacobian_fn_mat": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "jacobian_fn",
    "tensorflow.compat.v2.reshape",
    "tensorflow.compat.v2.size"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util.get_ode_fn_vec": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "ode_fn_vec"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util.get_ode_fn_vec.ode_fn_vec": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "ode_fn",
    "tensorflow.compat.v2.reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util.next_step_size": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.clip_by_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.ode.util.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.ode.util.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.pinv": {
  "data": {
   "shadows": "tensorflow_probability.python.math.linalg.pinv"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.pivoted_cholesky": {
  "data": {
   "shadows": "tensorflow_probability.python.math.linalg.pivoted_cholesky"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.random_ops": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.math.random_ops.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.math.random_ops.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.random_ops.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.random_ops.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.random_ops.random_rademacher": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow.as_dtype",
    "tensorflow.cast",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.float32",
    "tensorflow.int32",
    "tensorflow.int64",
    "tensorflow.random.uniform"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.random_ops.random_rayleigh": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "tensorflow.broadcast_dynamic_shape",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.math.log",
    "tensorflow.random.uniform",
    "tensorflow.shape",
    "tensorflow.sqrt"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.random_ops.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.random_ops_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.math.random_ops_test.RandomRademacherDynamic32": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.math.random_ops_test._RandomRademacher"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.random_ops_test.RandomRademacherDynamic64": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.math.random_ops_test._RandomRademacher"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.random_ops_test.RandomRayleighDynamic32": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.math.random_ops_test._RandomRayleigh"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.random_ops_test.RandomRayleighDynamic64": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.math.random_ops_test._RandomRayleigh"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.random_ops_test._RandomRademacher": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.random_ops_test._RandomRademacher.test_expected_value": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "int",
    "numpy.array",
    "numpy.int32",
    "numpy.mean",
    "numpy.reshape",
    "numpy.unique",
    "numpy.zeros",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.constant",
    "tensorflow_probability.math.random_rademacher"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.random_ops_test._RandomRayleigh": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.random_ops_test._RandomRayleigh.test_expected_value": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "int",
    "numpy.array",
    "numpy.bool",
    "numpy.int32",
    "numpy.linspace",
    "numpy.ones_like",
    "numpy.pi",
    "numpy.sqrt",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.constant",
    "tensorflow.math.squared_difference",
    "tensorflow.newaxis",
    "tensorflow.reduce_mean",
    "tensorflow_probability.math.random_rayleigh"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.random_ops_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.random_ops_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.random_ops_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.random_ops_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.random_ops_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.random_ops_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.random_ops_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.random_rademacher": {
  "data": {
   "shadows": "tensorflow_probability.python.math.random_ops.random_rademacher"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.random_rayleigh": {
  "data": {
   "shadows": "tensorflow_probability.python.math.random_ops.random_rayleigh"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.remove_undocumented": {
  "data": {
   "shadows": "tensorflow.python.util.all_util.remove_undocumented"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.root_search": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability.python.math.root_search.collections"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.math.root_search.RootSearchResults": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.math.root_search.__all__": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "tensorflow_probability.python.math.root_search.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.root_search.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.root_search.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.root_search.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.root_search.secant_root": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "ValueError",
    "callable",
    "objective_fn",
    "tensorflow.Assert",
    "tensorflow.broadcast_to",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.constant",
    "tensorflow.control_dependencies",
    "tensorflow.convert_to_tensor",
    "tensorflow.int32",
    "tensorflow.reduce_all",
    "tensorflow.sign",
    "tensorflow.while_loop",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.math.root_search.RootSearchResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.root_search.secant_root._body": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "objective_fn",
    "tensorflow.abs",
    "tensorflow.compat.v1.where",
    "tensorflow.equal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.root_search.secant_root._should_continue": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "stopping_policy_fn",
    "tensorflow.bool",
    "tensorflow.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.root_search.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.root_search_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.math.root_search_test.RootSearchTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.root_search_test.RootSearchTest.test_secant_finds_all_roots_from_one_initial_position": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "scipy.optimize.newton",
    "tensorflow.constant",
    "tensorflow.float64",
    "tensorflow_probability.math.secant_root"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.root_search_test.RootSearchTest.test_secant_finds_all_roots_from_two_initial_positions": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "f",
    "scipy.optimize.newton",
    "tensorflow.constant",
    "tensorflow.float64",
    "tensorflow_probability.math.secant_root"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.root_search_test.RootSearchTest.test_secant_finds_all_roots_using_float32": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "f",
    "scipy.optimize.newton",
    "tensorflow.constant",
    "tensorflow.float32",
    "tensorflow_probability.math.secant_root"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.root_search_test.RootSearchTest.test_secant_finds_any_root_from_one_initial_position": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "f",
    "scipy.optimize.newton",
    "tensorflow.constant",
    "tensorflow.float64",
    "tensorflow.reduce_any",
    "tensorflow_probability.math.secant_root"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.root_search_test.RootSearchTest.test_secant_finds_any_roots_from_two_initial_positions": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "f",
    "scipy.optimize.newton",
    "tensorflow.constant",
    "tensorflow.float64",
    "tensorflow.reduce_any",
    "tensorflow_probability.math.secant_root"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.root_search_test.RootSearchTest.test_secant_invalid_max_iterations": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "f",
    "tensorflow.constant",
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow.float64",
    "tensorflow_probability.math.secant_root"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.root_search_test.RootSearchTest.test_secant_invalid_position_tolerance": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "f",
    "tensorflow.constant",
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow.float64",
    "tensorflow_probability.math.secant_root"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.root_search_test.RootSearchTest.test_secant_invalid_value_tolerance": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "f",
    "tensorflow.constant",
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow.float64",
    "tensorflow_probability.math.secant_root"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.root_search_test.RootSearchTest.test_secant_skips_iteration": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "f",
    "tensorflow.constant",
    "tensorflow.float64",
    "tensorflow_probability.math.secant_root"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.root_search_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.root_search_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.root_search_test.optimize": {
  "data": {
   "shadows": "scipy.optimize"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.root_search_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.root_search_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.root_search_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.root_search_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.secant_root": {
  "data": {
   "shadows": "tensorflow_probability.python.math.root_search.secant_root"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.soft_threshold": {
  "data": {
   "shadows": "tensorflow_probability.python.math.numeric.soft_threshold"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.sparse": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.math.sparse.__all__": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "tensorflow_probability.python.math.sparse.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.sparse.dense_to_sparse": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.SparseTensor",
    "tensorflow.cast",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.compat.v1.where",
    "tensorflow.convert_to_tensor",
    "tensorflow.gather_nd",
    "tensorflow.int64",
    "tensorflow.not_equal",
    "tensorflow.shape",
    "tensorflow.string"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.sparse.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.sparse.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.sparse.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.sparse_or_dense_matmul": {
  "data": {
   "shadows": "tensorflow_probability.python.math.linalg.sparse_or_dense_matmul"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.sparse_or_dense_matvecmul": {
  "data": {
   "shadows": "tensorflow_probability.python.math.linalg.sparse_or_dense_matvecmul"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.sparse_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.math.sparse_test.SparseTest": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.math.sparse_test.SparseTest.test_dense_to_sparse_1d": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "numpy.int32",
    "numpy.int64",
    "tensorflow_probability.math.dense_to_sparse"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.sparse_test.SparseTest.test_dense_to_sparse_1d_bool": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.int64",
    "tensorflow_probability.math.dense_to_sparse"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.sparse_test.SparseTest.test_dense_to_sparse_1d_float": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.int64",
    "tensorflow_probability.math.dense_to_sparse"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.sparse_test.SparseTest.test_dense_to_sparse_1d_str": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "numpy.int64",
    "numpy.object",
    "tensorflow_probability.math.dense_to_sparse"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.sparse_test.SparseTest.test_dense_to_sparse_1d_str_special_ignore": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "numpy.int64",
    "numpy.object",
    "tensorflow_probability.math.dense_to_sparse"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.sparse_test.SparseTest.test_dense_to_sparse_2d": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": [
    "tensorflow_probability.math.dense_to_sparse"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.sparse_test.SparseTest.test_dense_to_sparse_3d": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "tensorflow_probability.math.dense_to_sparse"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.sparse_test.SparseTest.test_dense_to_sparse_unknown_1d_shape": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.int32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.math.dense_to_sparse"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.sparse_test.SparseTest.test_dense_to_sparse_unknown_3d_shape": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.int32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.math.dense_to_sparse"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.sparse_test.SparseTest.test_dense_to_sparse_unknown_rank": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.int32",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.math.dense_to_sparse"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.sparse_test._assert_sparse_tensor_value": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.int64"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.math.sparse_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.sparse_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.sparse_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.sparse_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.sparse_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.sparse_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.sparse_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.math.value_and_gradient": {
  "data": {
   "shadows": "tensorflow_probability.python.math.gradient.value_and_gradient"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.CheckpointableStatesAndTrace": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.sample.CheckpointableStatesAndTrace"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.HamiltonianMonteCarlo": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.MetropolisAdjustedLangevinAlgorithm": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.MetropolisHastings": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastings"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.RandomWalkMetropolis": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.random_walk_metropolis.RandomWalkMetropolis"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.ReplicaExchangeMC": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.SimpleStepSizeAdaptation": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptation"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.SliceSampler": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSampler"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.StatesAndTrace": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.sample.StatesAndTrace"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.TransformedTransitionKernel": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.transformed_kernel.TransformedTransitionKernel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.TransitionKernel": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.kernel.TransitionKernel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.UncalibratedHamiltonianMonteCarlo": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.UncalibratedLangevin": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.UncalibratedRandomWalk": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalk"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.__all__": {
  "data": {
   "lineno": 45
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.default_exchange_proposed_fn": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.replica_exchange_mc.default_exchange_proposed_fn"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.diagnostic": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.diagnostic.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.diagnostic._axis_size": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.gather",
    "tensorflow.reduce_prod",
    "tensorflow.shape",
    "tensorflow.size"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic._broadcast_maybelist_arg": {
  "data": {
   "lineno": 401,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "tensorflow_probability.python.mcmc.diagnostic._is_list_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic._effective_sample_size_single_state": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "_axis_size",
    "tensorflow.cast",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.cumsum",
    "tensorflow.int32",
    "tensorflow.maximum",
    "tensorflow.ones",
    "tensorflow.range",
    "tensorflow.rank",
    "tensorflow.reduce_sum",
    "tensorflow.reshape",
    "tensorflow_probability.python.stats.auto_correlation"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic._is_list_like": {
  "data": {
   "lineno": 396,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic._potential_scale_reduction_single_state": {
  "data": {
   "lineno": 335,
   "symbols_in_volume": [
    "_axis_size",
    "_reduce_variance",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.range",
    "tensorflow.reduce_mean"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic._reduce_variance": {
  "data": {
   "lineno": 374,
   "symbols_in_volume": [
    "_axis_size",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.math.squared_difference",
    "tensorflow.reduce_mean"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.diagnostic.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.diagnostic.effective_sample_size": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "_broadcast_maybelist_arg",
    "_effective_sample_size_single_state",
    "_is_list_like",
    "tensorflow.compat.v1.name_scope",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic.potential_scale_reduction": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "ValueError",
    "_is_list_like",
    "_potential_scale_reduction_single_state",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.get_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.diagnostic.stats": {
  "data": {
   "shadows": "tensorflow_probability.python.stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.diagnostic.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "numpy.random.RandomState",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.EffectiveSampleSizeDynamicTest": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.EffectiveSampleSizeDynamicTest.use_static_shape": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.EffectiveSampleSizeStaticTest": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.EffectiveSampleSizeStaticTest.use_static_shape": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.PotentialScaleReductionDynamicTest": {
  "data": {
   "lineno": 360,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.PotentialScaleReductionDynamicTest.use_static_shape": {
  "data": {
   "lineno": 364,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.PotentialScaleReductionStaticTest": {
  "data": {
   "lineno": 346,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.PotentialScaleReductionStaticTest.testIndependentNdimsLessThanOneRaises": {
  "data": {
   "lineno": 354,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.mcmc.potential_scale_reduction",
    "tensorflow_probability.python.mcmc.diagnostic_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.PotentialScaleReductionStaticTest.use_static_shape": {
  "data": {
   "lineno": 350,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.ReduceVarianceTestDynamicShape": {
  "data": {
   "lineno": 429,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.mcmc.diagnostic_test._ReduceVarianceTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.ReduceVarianceTestDynamicShape.use_static_shape": {
  "data": {
   "lineno": 432,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.ReduceVarianceTestStaticShape": {
  "data": {
   "lineno": 421,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.mcmc.diagnostic_test._ReduceVarianceTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.ReduceVarianceTestStaticShape.use_static_shape": {
  "data": {
   "lineno": 424,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest._check_versus_expected_effective_sample_size": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "numpy.ones_like",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.mcmc.effective_sample_size"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest.testIidRank1NormalHasFullEssMaxLagThresholdZero": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map",
    "tensorflow_probability.python.mcmc.diagnostic_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest.testIidRank1NormalHasFullEssMaxLags10": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map",
    "tensorflow_probability.python.mcmc.diagnostic_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest.testIidRank2NormalHasFullEssMaxLagThresholdZero": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map",
    "tensorflow_probability.python.mcmc.diagnostic_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest.testIidRank2NormalHasFullEssMaxLags10": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map",
    "tensorflow_probability.python.mcmc.diagnostic_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest.testLength10CorrelationHasEssOneTenthTotalLengthUsingMaxLags50": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.ones",
    "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map",
    "tensorflow_probability.python.mcmc.diagnostic_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest.testLength10CorrelationHasEssOneTenthTotalLengthUsingMaxLagsThresholdZero": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.ones",
    "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map",
    "tensorflow_probability.python.mcmc.diagnostic_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest.testListArgs": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": [
    "len",
    "numpy.float32",
    "numpy.ones",
    "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map",
    "tensorflow_probability.mcmc.effective_sample_size",
    "tensorflow_probability.python.mcmc.diagnostic_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest.testMaxLagsArgsAddInAnOrManner": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.ones",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map",
    "tensorflow_probability.mcmc.effective_sample_size",
    "tensorflow_probability.python.mcmc.diagnostic_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest.testMaxLagsThresholdLessThanNeg1SameAsNone": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.ones",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map",
    "tensorflow_probability.mcmc.effective_sample_size",
    "tensorflow_probability.python.mcmc.diagnostic_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._EffectiveSampleSizeTest.use_static_shape": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "NotImplementedError",
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest.check_results": {
  "data": {
   "lineno": 271,
   "symbols_in_volume": [
    "bool",
    "len",
    "numpy.ones_like",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.mcmc.potential_scale_reduction"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest.iid_normal_chains_should_pass_wrapper": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow_probability.python.mcmc.diagnostic_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest.offset_normal_chains_should_fail_wrapper": {
  "data": {
   "lineno": 326,
   "symbols_in_volume": [
    "len",
    "numpy.linspace",
    "numpy.prod",
    "tensorflow_probability.python.mcmc.diagnostic_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest.testFailingOffsetNdimsAreSampleOneIndependentOneOtherOne": {
  "data": {
   "lineno": 341
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest.testListOfStatesWhereFirstPassesSecondFails": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "bool",
    "list",
    "numpy.array",
    "numpy.ones_like",
    "tensorflow_probability.mcmc.potential_scale_reduction",
    "tensorflow_probability.python.mcmc.diagnostic_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest.testPassingIIDNdimsAreIndependentOneOtherOne": {
  "data": {
   "lineno": 311
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest.testPassingIIDNdimsAreIndependentOneOtherTwo": {
  "data": {
   "lineno": 315
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest.testPassingIIDNdimsAreIndependentOneOtherZero": {
  "data": {
   "lineno": 307
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest.testPassingIIDNdimsAreIndependentTwoOtherTwo64Bit": {
  "data": {
   "lineno": 319,
   "symbols_in_volume": [
    "numpy.float64"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._PotentialScaleReductionTest.use_static_shape": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": [
    "NotImplementedError",
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._ReduceVarianceTest": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._ReduceVarianceTest.check_versus_numpy": {
  "data": {
   "lineno": 376,
   "symbols_in_volume": [
    "numpy.asarray",
    "numpy.isnan",
    "numpy.var",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.mcmc.diagnostic._reduce_variance"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._ReduceVarianceTest.testScalarBiasedFalse": {
  "data": {
   "lineno": 400
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._ReduceVarianceTest.testScalarBiasedTrue": {
  "data": {
   "lineno": 397
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._ReduceVarianceTest.testShape2x3x4Axis1BiasedFalseKeepdimsTrue": {
  "data": {
   "lineno": 408,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.diagnostic_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._ReduceVarianceTest.testShape2x3x4AxisNoneBiasedFalseKeepdimsFalse": {
  "data": {
   "lineno": 404,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.diagnostic_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._ReduceVarianceTest.testShape2x3x4x5Axis13BiasedFalseKeepdimsFalse": {
  "data": {
   "lineno": 416,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.diagnostic_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._ReduceVarianceTest.testShape2x3x4x5Axis13BiasedFalseKeepdimsTrue": {
  "data": {
   "lineno": 412,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.diagnostic_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._ReduceVarianceTest.use_static_shape": {
  "data": {
   "lineno": 371,
   "symbols_in_volume": [
    "NotImplementedError",
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test._reduce_variance": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.diagnostic._reduce_variance"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.rng": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.spectral_ops_test_util": {
  "data": {
   "shadows": "tensorflow.python.ops.spectral_ops_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.diagnostic_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.effective_sample_size": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.diagnostic.effective_sample_size"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.EightSchoolsHmcBenchmarkTestHarness": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.EightSchoolsHmcBenchmarkTestHarness.__init__": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "tensorflow.executing_eagerly"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.EightSchoolsHmcBenchmarkTestHarness.benchmark_eight_schools_hmc_num_leapfrog_1": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.eight_schools_hmc.benchmark_eight_schools_hmc"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.EightSchoolsHmcBenchmarkTestHarness.benchmark_eight_schools_hmc_num_leapfrog_10": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.eight_schools_hmc.benchmark_eight_schools_hmc"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.EightSchoolsHmcBenchmarkTestHarness.benchmark_eight_schools_hmc_num_leapfrog_2": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.eight_schools_hmc.benchmark_eight_schools_hmc"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.EightSchoolsHmcBenchmarkTestHarness.benchmark_eight_schools_hmc_num_leapfrog_20": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.eight_schools_hmc.benchmark_eight_schools_hmc"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.EightSchoolsHmcBenchmarkTestHarness.benchmark_eight_schools_hmc_num_leapfrog_3": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.eight_schools_hmc.benchmark_eight_schools_hmc"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.__all__": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.benchmark_eight_schools_hmc": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "computation",
    "dict",
    "int",
    "numpy.float32",
    "numpy.sum",
    "tensorflow.compat.v1.Session",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow.function",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.eight_schools_hmc.time"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.benchmark_eight_schools_hmc.computation": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "sample_chain",
    "tensorflow.ones",
    "tensorflow.zeros",
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.benchmark_eight_schools_hmc.unnormalized_posterior_log_prob": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.eight_schools_hmc.eight_schools_joint_log_prob"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.eight_schools_joint_log_prob": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "tensorflow.exp",
    "tensorflow.ones_like",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.mcmc.eight_schools_hmc.mvn",
    "tensorflow_probability.python.mcmc.eight_schools_hmc.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.mvn": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.eight_schools_hmc.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.tfd": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc_eager_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v1.enable_eager_execution",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc_eager_test.EagerEightSchoolsHmcBenchmark": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "tensorflow.test.Benchmark",
    "tensorflow_probability.python.mcmc.eight_schools_hmc.EightSchoolsHmcBenchmarkTestHarness"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc_eager_test.EightSchoolsHmcBenchmarkTestHarness": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.eight_schools_hmc.EightSchoolsHmcBenchmarkTestHarness"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc_eager_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc_graph_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc_graph_test.EightSchoolsHmcBenchmarkTestHarness": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.eight_schools_hmc.EightSchoolsHmcBenchmarkTestHarness"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc_graph_test.GraphEightSchoolsHmcBenchmark": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "tensorflow.test.Benchmark",
    "tensorflow_probability.python.mcmc.eight_schools_hmc.EightSchoolsHmcBenchmarkTestHarness"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.eight_schools_hmc_graph_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.hmc": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.hmc.collections"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.kernel.TransitionKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo.__init__": {
  "data": {
   "lineno": 395,
   "symbols_in_volume": [
    "UncalibratedHamiltonianMonteCarlo",
    "ValueError",
    "tensorflow.python.util.deprecation.deprecated_args",
    "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastings"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo.bootstrap_results": {
  "data": {
   "lineno": 558,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarloExtraKernelResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo.is_calibrated": {
  "data": {
   "lineno": 514,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo.name": {
  "data": {
   "lineno": 505,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo.num_leapfrog_steps": {
  "data": {
   "lineno": 478,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo.one_step": {
  "data": {
   "lineno": 518,
   "symbols_in_volume": [
    "tensorflow.control_dependencies",
    "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarloExtraKernelResults",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo.parameters": {
  "data": {
   "lineno": 509,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo.seed": {
  "data": {
   "lineno": 501,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo.state_gradients_are_stopped": {
  "data": {
   "lineno": 493,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo.step_size": {
  "data": {
   "lineno": 463,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo.step_size_update_fn": {
  "data": {
   "lineno": 497,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo.target_log_prob_fn": {
  "data": {
   "lineno": 459,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarloExtraKernelResults": {
  "data": {
   "lineno": 53
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo": {
  "data": {
   "lineno": 569,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.kernel.TransitionKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo.__init__": {
  "data": {
   "lineno": 580,
   "symbols_in_volume": [
    "NotImplementedError",
    "dict",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.distributions.SeedStream",
    "tensorflow_probability.python.mcmc.internal.util.warn_if_parameters_are_not_simple_tensors"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo._store_parameters_in_results": {
  "data": {
   "lineno": 691,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo.bootstrap_results": {
  "data": {
   "lineno": 759,
   "symbols_in_volume": [
    "tensorflow.compat.v2.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.int32",
    "tensorflow.nest.map_structure",
    "tensorflow.stop_gradient",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo",
    "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarloKernelResults",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like",
    "tensorflow_probability.python.mcmc.internal.util.make_name",
    "tensorflow_probability.python.mcmc.internal.util.maybe_call_fn_and_grads",
    "tensorflow_probability.python.mcmc.internal.util.set_doc"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo.is_calibrated": {
  "data": {
   "lineno": 687,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo.name": {
  "data": {
   "lineno": 678,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo.num_leapfrog_steps": {
  "data": {
   "lineno": 655,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo.one_step": {
  "data": {
   "lineno": 695,
   "symbols_in_volume": [
    "_compute_log_acceptance_correction",
    "_prepare_args",
    "integrator",
    "maybe_flatten",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.random.normal",
    "tensorflow.shape",
    "tensorflow.stop_gradient",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_rank",
    "tensorflow_probability.python.mcmc.hmc.HamiltonianMonteCarlo",
    "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.SimpleLeapfrogIntegrator",
    "tensorflow_probability.python.mcmc.internal.util.make_name",
    "tensorflow_probability.python.mcmc.internal.util.set_doc"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo.one_step.maybe_flatten": {
  "data": {
   "lineno": 743,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.internal.util.is_list_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo.parameters": {
  "data": {
   "lineno": 682,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo.seed": {
  "data": {
   "lineno": 674,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo.state_gradients_are_stopped": {
  "data": {
   "lineno": 670,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo.step_size": {
  "data": {
   "lineno": 640,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarlo.target_log_prob_fn": {
  "data": {
   "lineno": 636,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.UncalibratedHamiltonianMonteCarloKernelResults": {
  "data": {
   "lineno": 43
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.hmc.__all__": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.hmc._compute_log_acceptance_correction": {
  "data": {
   "lineno": 798,
   "symbols_in_volume": [
    "_log_sum_sq",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.exp",
    "tensorflow.range",
    "tensorflow.rank",
    "tensorflow.reduce_logsumexp",
    "tensorflow.stack",
    "tensorflow_probability.python.mcmc.internal.util.safe_sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc._log_sum_sq": {
  "data": {
   "lineno": 933,
   "symbols_in_volume": [
    "tensorflow.abs",
    "tensorflow.math.log",
    "tensorflow.reduce_logsumexp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc._prepare_args": {
  "data": {
   "lineno": 892,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "list",
    "maybe_flatten",
    "tensorflow.convert_to_tensor",
    "tensorflow.stop_gradient",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like",
    "tensorflow_probability.python.mcmc.internal.util.maybe_call_fn_and_grads"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc._prepare_args.maybe_flatten": {
  "data": {
   "lineno": 923,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.internal.util.is_list_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.hmc.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.hmc.deprecation": {
  "data": {
   "shadows": "tensorflow.python.util.deprecation"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.hmc.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.hmc.distributions": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.hmc.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.hmc.kernel_base": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.kernel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.hmc.leapfrog_impl": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.internal.leapfrog_integrator"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.hmc.make_simple_step_size_update_policy": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.int32",
    "tensorflow.compat.v1.get_variable",
    "tensorflow.int32",
    "tensorflow.python.util.deprecation.deprecated"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.make_simple_step_size_update_policy.step_size_simple_update_fn": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "build_assign_op",
    "tensorflow.cast",
    "tensorflow.compat.v1.where",
    "tensorflow.cond",
    "tensorflow.control_dependencies",
    "tensorflow.identity",
    "tensorflow.math.log",
    "tensorflow.minimum",
    "tensorflow.reduce_logsumexp",
    "tensorflow.size",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.make_simple_step_size_update_policy.step_size_simple_update_fn.build_assign_op": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc.mcmc_util": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.hmc.metropolis_hastings": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.metropolis_hastings"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.hmc.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.hmc.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.hmc.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.hmc_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.bijectors",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCAdaptiveStepSize": {
  "data": {
   "lineno": 793,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCAdaptiveStepSize.setUp": {
  "data": {
   "lineno": 796,
   "symbols_in_volume": [
    "numpy.random.seed",
    "tensorflow.compat.v1.random.set_random_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCAdaptiveStepSize.test_finite_adaptation": {
  "data": {
   "lineno": 877,
   "symbols_in_volume": [
    "dtype",
    "numpy.array",
    "numpy.float32",
    "numpy.int32",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.constant",
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
    "tensorflow_probability.mcmc.make_simple_step_size_update_policy",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.hmc_test._set_seed",
    "tensorflow_probability.python.mcmc.hmc_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCAdaptiveStepSize.test_multiple_step_sizes_different_dtype": {
  "data": {
   "lineno": 832,
   "symbols_in_volume": [
    "dtype",
    "numpy.array",
    "numpy.float64",
    "numpy.int32",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
    "tensorflow_probability.mcmc.make_simple_step_size_update_policy",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.hmc_test._set_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCAdaptiveStepSize.test_multiple_step_sizes_different_dtype.target_log_prob_fn": {
  "data": {
   "lineno": 848,
   "symbols_in_volume": [
    "dtype",
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.mcmc.hmc_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCAdaptiveStepSize.test_multiple_step_sizes_different_ranks": {
  "data": {
   "lineno": 800,
   "symbols_in_volume": [
    "dtype",
    "numpy.float32",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.hmc_test._set_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCAdaptiveStepSize.test_multiple_step_sizes_different_ranks.target_log_prob_fn": {
  "data": {
   "lineno": 811,
   "symbols_in_volume": [
    "dtype",
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.mcmc.hmc_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCAdaptiveStepSize.test_reuse_step_counter": {
  "data": {
   "lineno": 930,
   "symbols_in_volume": [
    "range",
    "tensorflow.compat.v1.AUTO_REUSE",
    "tensorflow.compat.v1.get_variable_scope",
    "tensorflow.compat.v1.variable_scope",
    "tensorflow_probability.mcmc.make_simple_step_size_update_policy"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCEMAdaptiveStepSize": {
  "data": {
   "lineno": 937,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCEMAdaptiveStepSize.make_response_likelihood": {
  "data": {
   "lineno": 958,
   "symbols_in_volume": [
    "tensorflow.matmul",
    "tensorflow.newaxis",
    "tensorflow.ones_like",
    "tensorflow_probability.python.mcmc.hmc_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCEMAdaptiveStepSize.make_training_data": {
  "data": {
   "lineno": 945,
   "symbols_in_volume": [
    "numpy.asarray",
    "numpy.random.randn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCEMAdaptiveStepSize.make_weights_prior": {
  "data": {
   "lineno": 953,
   "symbols_in_volume": [
    "tensorflow.exp",
    "tensorflow.zeros",
    "tensorflow_probability.python.mcmc.hmc_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCEMAdaptiveStepSize.setUp": {
  "data": {
   "lineno": 941,
   "symbols_in_volume": [
    "numpy.random.seed",
    "tensorflow.compat.v1.random.set_random_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCEMAdaptiveStepSize.test_mcem_converges": {
  "data": {
   "lineno": 965,
   "symbols_in_volume": [
    "dtype",
    "int",
    "mcem_iter",
    "numpy.array",
    "numpy.float32",
    "numpy.random.randn",
    "numpy.zeros",
    "range",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v1.logging.vlog",
    "tensorflow.compat.v2.Variable",
    "tensorflow.compat.v2.optimizers.SGD",
    "tensorflow.executing_eagerly"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCEMAdaptiveStepSize.test_mcem_converges.mcem_iter": {
  "data": {
   "lineno": 981,
   "symbols_in_volume": [
    "tensorflow.GradientTape",
    "tensorflow.exp",
    "tensorflow.minimum",
    "tensorflow.reduce_mean",
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
    "tensorflow_probability.mcmc.SimpleStepSizeAdaptation",
    "tensorflow_probability.mcmc.sample_chain",
    "unnormalized_posterior_log_prob"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCEMAdaptiveStepSize.test_mcem_converges.mcem_iter.trace_fn": {
  "data": {
   "lineno": 992
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCEMAdaptiveStepSize.test_mcem_converges.mcem_iter.unnormalized_posterior_log_prob": {
  "data": {
   "lineno": 985,
   "symbols_in_volume": [
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCEMAdaptiveStepSize.test_step_size_adapts": {
  "data": {
   "lineno": 1070,
   "symbols_in_volume": [
    "dtype",
    "int",
    "numpy.float32",
    "tensorflow.zeros",
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
    "tensorflow_probability.mcmc.SimpleStepSizeAdaptation",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.hmc_test._set_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCEMAdaptiveStepSize.test_step_size_adapts.trace_fn": {
  "data": {
   "lineno": 1076
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCEMAdaptiveStepSize.test_step_size_adapts.unnormalized_log_prob": {
  "data": {
   "lineno": 1073
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCHandlesLists32": {
  "data": {
   "lineno": 783,
   "symbols_in_volume": [
    "dtype",
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.mcmc.hmc_test._HMCHandlesLists"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCHandlesLists64": {
  "data": {
   "lineno": 788,
   "symbols_in_volume": [
    "dtype",
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.mcmc.hmc_test._HMCHandlesLists"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest._chain_gets_correct_expectations": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "dict",
    "numpy.bool",
    "numpy.exp",
    "numpy.log",
    "numpy.minimum",
    "numpy.ones_like",
    "tensorflow.compat.v1.logging.vlog",
    "tensorflow.executing_eagerly",
    "tensorflow.math.digamma",
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.hmc_test._set_seed",
    "tensorflow_probability.python.mcmc.hmc_test.collections"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest._chain_gets_correct_expectations.log_gamma_log_prob": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "tensorflow.range",
    "tensorflow.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest._chain_gets_correct_expectations_wrapper": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.random.rand",
    "tensorflow.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest._kernel_leaves_target_invariant": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "log_gamma_log_prob",
    "numpy.exp",
    "numpy.minimum",
    "scipy.stats.ks_2samp",
    "tensorflow.compat.v1.logging.vlog",
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
    "tensorflow_probability.python.mcmc.hmc_test._set_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest._kernel_leaves_target_invariant.fake_log_prob": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": [
    "log_gamma_log_prob"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest._kernel_leaves_target_invariant.log_gamma_log_prob": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": [
    "tensorflow.range",
    "tensorflow.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest._kernel_leaves_target_invariant_wrapper": {
  "data": {
   "lineno": 366,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.log",
    "numpy.random.gamma",
    "tensorflow.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest._log_gamma_log_prob": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "tensorflow.exp",
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest._testChainWorksDtype": {
  "data": {
   "lineno": 474,
   "symbols_in_volume": [
    "numpy.zeros",
    "tensorflow.reduce_sum",
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.hmc_test._set_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.assertAllFinite": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "bool",
    "numpy.isfinite",
    "numpy.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.setUp": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "numpy.random.seed",
    "tensorflow.compat.v1.random.set_random_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testAdaptiveIncompatibleWithStepSizeAdaptation": {
  "data": {
   "lineno": 608,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.compat.v2.Variable",
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
    "tensorflow_probability.mcmc.make_simple_step_size_update_policy"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testAdaptiveParameters": {
  "data": {
   "lineno": 581,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.zeros",
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
    "tensorflow_probability.python.mcmc.hmc_test._set_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testChainWorksCorrelatedMultivariate": {
  "data": {
   "lineno": 496,
   "symbols_in_volume": [
    "dict",
    "dtype",
    "numpy.float32",
    "tensorflow.compat.dimension_value",
    "tensorflow.executing_eagerly",
    "tensorflow.matmul",
    "tensorflow.reduce_mean",
    "tensorflow.stack",
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.hmc_test._set_seed",
    "tensorflow_probability.python.mcmc.hmc_test.collections"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testChainWorksCorrelatedMultivariate.target_log_prob": {
  "data": {
   "lineno": 503,
   "symbols_in_volume": [
    "numpy.linalg.cholesky",
    "tensorflow.linalg.triangular_solve",
    "tensorflow.newaxis",
    "tensorflow.reduce_sum",
    "tensorflow.squeeze",
    "tensorflow.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testChainWorksIn16Bit": {
  "data": {
   "lineno": 493,
   "symbols_in_volume": [
    "numpy.float16"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testChainWorksIn64Bit": {
  "data": {
   "lineno": 490,
   "symbols_in_volume": [
    "numpy.float64"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testHMCChainExpectations1": {
  "data": {
   "lineno": 189
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testHMCChainExpectations2": {
  "data": {
   "lineno": 192
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testHMCChainExpectationsNullShape": {
  "data": {
   "lineno": 186
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testHMCPreservesStaticShape": {
  "data": {
   "lineno": 564,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.reduce_sum",
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
    "tensorflow_probability.python.mcmc.hmc_test._set_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testKernelLeavesTargetInvariant1": {
  "data": {
   "lineno": 387
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testKernelLeavesTargetInvariant2": {
  "data": {
   "lineno": 390
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testKernelLeavesTargetInvariant3": {
  "data": {
   "lineno": 393
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testKernelResultsUsingTruncatedDistribution": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "int",
    "numpy.exp",
    "numpy.isnan",
    "numpy.isneginf",
    "numpy.isposinf",
    "numpy.minimum",
    "numpy.testing.assert_array_less",
    "numpy.zeros_like",
    "range",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.hmc_test._set_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testKernelResultsUsingTruncatedDistribution.log_prob": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "numpy.inf",
    "tensorflow.cast",
    "tensorflow.compat.v1.where",
    "tensorflow.fill"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testNanFromGradsDontPropagate": {
  "data": {
   "lineno": 433,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.minimum",
    "tensorflow.compat.v1.logging.vlog",
    "tensorflow.executing_eagerly",
    "tensorflow.gradients",
    "tensorflow.linspace",
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
    "tensorflow_probability.python.mcmc.hmc_test._set_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testNanFromGradsDontPropagate._nan_log_prob_with_nan_gradient": {
  "data": {
   "lineno": 436,
   "symbols_in_volume": [
    "numpy.nan",
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testNanRejection": {
  "data": {
   "lineno": 396,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.minimum",
    "tensorflow.compat.v1.logging.vlog",
    "tensorflow.linspace",
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
    "tensorflow_probability.python.mcmc.hmc_test._set_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testNanRejection._unbounded_exponential_log_prob": {
  "data": {
   "lineno": 405,
   "symbols_in_volume": [
    "numpy.nan",
    "tensorflow.compat.v1.where",
    "tensorflow.fill",
    "tensorflow.reduce_sum",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testSampleChainSeedReproducibleWorksCorrectly": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "numpy.random.rand",
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.hmc_test._set_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testSampleChainSeedReproducibleWorksCorrectly.log_gamma_log_prob": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "tensorflow.range",
    "tensorflow.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testUncalibratedHMCPreservesStaticShape": {
  "data": {
   "lineno": 547,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.reduce_sum",
    "tensorflow_probability.mcmc.UncalibratedHamiltonianMonteCarlo",
    "tensorflow_probability.python.mcmc.hmc_test._set_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.HMCTest.testWarnMutableParameters": {
  "data": {
   "lineno": 624,
   "symbols_in_volume": [
    "any",
    "str",
    "tensorflow.compat.v2.Variable",
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
    "tensorflow_probability.python.mcmc.hmc_test.warnings"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.LogCorrectionTest16": {
  "data": {
   "lineno": 717,
   "symbols_in_volume": [
    "dtype",
    "numpy.float16",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.mcmc.hmc_test._LogCorrectionTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.hmc_test.LogCorrectionTest32": {
  "data": {
   "lineno": 722,
   "symbols_in_volume": [
    "dtype",
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.mcmc.hmc_test._LogCorrectionTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.hmc_test.LogCorrectionTest64": {
  "data": {
   "lineno": 727,
   "symbols_in_volume": [
    "dtype",
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.mcmc.hmc_test._LogCorrectionTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.hmc_test._HMCHandlesLists": {
  "data": {
   "lineno": 732,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.hmc_test._HMCHandlesLists.testStateParts": {
  "data": {
   "lineno": 734,
   "symbols_in_volume": [
    "cast",
    "numpy.array",
    "tensorflow.reduce_mean",
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
    "tensorflow_probability.mcmc.TransformedTransitionKernel",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.hmc_test._reduce_variance",
    "tensorflow_probability.python.mcmc.hmc_test._set_seed",
    "tensorflow_probability.python.mcmc.hmc_test.tfb",
    "tensorflow_probability.python.mcmc.hmc_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test._HMCHandlesLists.testStateParts.target_log_prob": {
  "data": {
   "lineno": 741
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test._LogCorrectionTest": {
  "data": {
   "lineno": 637,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.hmc_test._LogCorrectionTest.testHandlesNanFromKinetic": {
  "data": {
   "lineno": 680,
   "symbols_in_volume": [
    "len",
    "numpy.bool",
    "numpy.inf",
    "numpy.isfinite",
    "numpy.isnan",
    "numpy.meshgrid",
    "numpy.nan",
    "numpy.ones_like",
    "numpy.reshape",
    "tensorflow.convert_to_tensor",
    "tensorflow.executing_eagerly",
    "tensorflow.gradients",
    "tensorflow_probability.python.mcmc.hmc._compute_log_acceptance_correction"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test._LogCorrectionTest.testHandlesNanFromPotential": {
  "data": {
   "lineno": 639,
   "symbols_in_volume": [
    "len",
    "make_trick_fun",
    "numpy.bool",
    "numpy.inf",
    "numpy.isfinite",
    "numpy.meshgrid",
    "numpy.nan",
    "numpy.ones_like",
    "numpy.zeros",
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test._LogCorrectionTest.testHandlesNanFromPotential.make_trick_fun": {
  "data": {
   "lineno": 646,
   "symbols_in_volume": [
    "tensorflow.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test._LogCorrectionTest.testHandlesNanFromPotential.make_trick_fun._fn": {
  "data": {
   "lineno": 649,
   "symbols_in_volume": [
    "tensorflow.stop_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test._compute_log_acceptance_correction": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.hmc._compute_log_acceptance_correction"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.hmc_test._reduce_variance": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "tensorflow.math.squared_difference",
    "tensorflow.reduce_mean"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test._set_seed": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow.executing_eagerly"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.hmc_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.hmc_test.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.hmc_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.hmc_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.hmc_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.hmc_test.stats": {
  "data": {
   "shadows": "scipy.stats"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.hmc_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.hmc_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.hmc_test.tfb": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.hmc_test.tfd": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.hmc_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.hmc_test.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.LeapfrogIntegrator": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "object",
    "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.abc",
    "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.six"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.LeapfrogIntegrator.__call__": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "NotImplementedError",
    "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.abc"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.SimpleLeapfrogIntegrator": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.LeapfrogIntegrator"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.SimpleLeapfrogIntegrator.__call__": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": [
    "list",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.name_scope",
    "tensorflow.compat.v2.while_loop",
    "tensorflow.compat.v2.zeros_like",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.SimpleLeapfrogIntegrator.__init__": {
  "data": {
   "lineno": 135
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.SimpleLeapfrogIntegrator._one_step": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": [
    "ValueError",
    "any",
    "tensorflow.compat.v2.cast",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.mcmc.internal.util.maybe_call_fn_and_grads",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.SimpleLeapfrogIntegrator._process_args": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": [
    "tensorflow.compat.v2.convert_to_tensor",
    "tensorflow.compat.v2.float32",
    "tensorflow.compat.v2.name_scope",
    "tensorflow_probability.python.mcmc.internal.util.maybe_call_fn_and_grads"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.SimpleLeapfrogIntegrator.num_steps": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.SimpleLeapfrogIntegrator.step_sizes": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.SimpleLeapfrogIntegrator.target_fn": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.mcmc_util": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.six": {
  "data": {
   "shadows": "six"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.tf": {
  "data": {
   "shadows": "tensorflow.compat.v2"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test.LeapfrogIntegratorTest": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test.LeapfrogIntegratorTest._integrator_conserves_energy": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "integrator",
    "numpy.prod",
    "target_fn",
    "tensorflow.compat.v1.logging.vlog",
    "tensorflow.random.normal",
    "tensorflow.range",
    "tensorflow.rank",
    "tensorflow.reduce_sum",
    "tensorflow.shape",
    "tensorflow_probability.python.mcmc.internal.leapfrog_integrator.SimpleLeapfrogIntegrator"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test.LeapfrogIntegratorTest._integrator_conserves_energy_wrapper": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.random.rand",
    "tensorflow.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test.LeapfrogIntegratorTest._log_gamma_log_prob": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "tensorflow.exp",
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test.LeapfrogIntegratorTest.assertAllFinite": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "bool",
    "numpy.isfinite",
    "numpy.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test.LeapfrogIntegratorTest.setUp": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "numpy.random.seed",
    "tensorflow.compat.v1.random.set_random_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test.LeapfrogIntegratorTest.testIntegratorEnergyConservation1": {
  "data": {
   "lineno": 101
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test.LeapfrogIntegratorTest.testIntegratorEnergyConservation2": {
  "data": {
   "lineno": 104
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test.LeapfrogIntegratorTest.testIntegratorEnergyConservation3": {
  "data": {
   "lineno": 107
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test.LeapfrogIntegratorTest.testIntegratorEnergyConservationNullShape": {
  "data": {
   "lineno": 98
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test.leapfrog_impl": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.internal.leapfrog_integrator"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.leapfrog_integrator_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.slice_sampler_utils": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.internal.slice_sampler_utils._find_best_interval_idx": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "tensorflow.argmax",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.newaxis",
    "tensorflow.range",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.slice_sampler_utils._left_doubling_increments": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.cumsum",
    "tensorflow.ones_like",
    "tensorflow.range",
    "tensorflow.reshape",
    "tensorflow_probability.python.distributions.Bernoulli"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.slice_sampler_utils._sample_with_shrinkage": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": [
    "seed_gen",
    "tensorflow.bool",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.identity",
    "tensorflow.reduce_all",
    "tensorflow.shape",
    "tensorflow.while_loop",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.distributions.SeedStream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.slice_sampler_utils._sample_with_shrinkage._body": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": [
    "seed_gen",
    "target_log_prob",
    "tensorflow.compat.v1.where",
    "tensorflow.random.uniform",
    "tensorflow_probability.python.mcmc.internal.slice_sampler_utils._test_acceptance"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.slice_sampler_utils._test_acceptance": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": [
    "tensorflow.bool",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.ones_like",
    "tensorflow.while_loop",
    "tensorflow.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.slice_sampler_utils._test_acceptance.body": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": [
    "target_log_prob",
    "tensorflow.compat.v1.where"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.slice_sampler_utils._test_acceptance.cond": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": [
    "tensorflow.reduce_all"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.slice_sampler_utils.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.slice_sampler_utils.distributions": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.slice_sampler_utils.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.slice_sampler_utils.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.slice_sampler_utils.slice_bounds_by_doubling": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "seed_gen",
    "tensorflow.cast",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.gather_nd",
    "tensorflow.int32",
    "tensorflow.map_fn",
    "tensorflow.random.uniform",
    "tensorflow.range",
    "tensorflow.reduce_any",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow.size",
    "tensorflow.stack",
    "tensorflow_probability.python.distributions.SeedStream",
    "tensorflow_probability.python.mcmc.internal.slice_sampler_utils._find_best_interval_idx",
    "tensorflow_probability.python.mcmc.internal.slice_sampler_utils._left_doubling_increments"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.slice_sampler_utils.slice_sampler_one_dim": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": [
    "target_log_prob",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.random.gamma",
    "tensorflow.shape",
    "tensorflow_probability.python.mcmc.internal.slice_sampler_utils._sample_with_shrinkage",
    "tensorflow_probability.python.mcmc.internal.slice_sampler_utils.slice_bounds_by_doubling"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.slice_sampler_utils.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.util": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.internal.util.__all__": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.internal.util._choose_base_case": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "_where",
    "choose",
    "tensorflow.compat.v1.name_scope",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like",
    "tensorflow_probability.python.mcmc.internal.util.is_namedtuple_like",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util._choose_base_case._expand_is_accepted_like": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.concat",
    "tensorflow.int32",
    "tensorflow.ones",
    "tensorflow.rank",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow.tile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util._choose_base_case._where": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "_expand_is_accepted_like",
    "tensorflow.compat.v1.where",
    "tensorflow.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util._is_tensor_like": {
  "data": {
   "lineno": 478,
   "symbols_in_volume": [
    "all",
    "isinstance",
    "numpy.array",
    "numpy.object",
    "tensorflow.Tensor",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util._value_and_gradients": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "_convert_to_tensor",
    "fn",
    "fn_slice",
    "len",
    "list",
    "range",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.math.gradient.value_and_gradient",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util._value_and_gradients._convert_to_tensor": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "ctt",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util._value_and_gradients.fn_slice": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.util.choose": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "TypeError",
    "dict",
    "getattr",
    "isinstance",
    "tensorflow_probability.python.mcmc.internal.util._choose_base_case",
    "tensorflow_probability.python.mcmc.internal.util.is_namedtuple_like",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.control_flow_util": {
  "data": {
   "shadows": "tensorflow.python.ops.control_flow_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.util.deprecation": {
  "data": {
   "shadows": "tensorflow.python.util.deprecation"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.util.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.util.enable_store_parameters_in_results": {
  "data": {
   "lineno": 441,
   "symbols_in_volume": [
    "_recreate_kernel",
    "hasattr",
    "reversed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.enable_store_parameters_in_results._recreate_kernel": {
  "data": {
   "lineno": 460,
   "symbols_in_volume": [
    "tensorflow.python.util.deprecation.silence",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.util.is_list_like": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.is_namedtuple_like": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "AttributeError",
    "getattr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.make_innermost_getter": {
  "data": {
   "lineno": 415
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.make_innermost_getter._new_getter": {
  "data": {
   "lineno": 428,
   "symbols_in_volume": [
    "getter",
    "hasattr",
    "tensorflow_probability.python.mcmc.internal.util.functools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.make_innermost_setter": {
  "data": {
   "lineno": 383
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.make_innermost_setter._new_setter": {
  "data": {
   "lineno": 397,
   "symbols_in_volume": [
    "hasattr",
    "reversed",
    "setter",
    "tensorflow_probability.python.mcmc.internal.util.functools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.make_name": {
  "data": {
   "lineno": 66
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.maybe_call_fn_and_grads": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "all",
    "any",
    "fn",
    "len",
    "list",
    "tensorflow.compat.v1.name_scope",
    "tensorflow_probability.python.mcmc.internal.util._value_and_gradients",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.util.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.util.safe_sum": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "numpy.array",
    "numpy.inf",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.compat.v1.where",
    "tensorflow.fill",
    "tensorflow.math.is_finite",
    "tensorflow.reduce_sum",
    "tensorflow.shape",
    "tensorflow.stack",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.set_doc": {
  "data": {
   "lineno": 169
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.set_doc._doc": {
  "data": {
   "lineno": 171
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.smart_for_loop": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": [
    "body_fn",
    "list",
    "numpy.int32",
    "range",
    "tensorflow.cast",
    "tensorflow.compat.v1.get_default_graph",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.executing_eagerly",
    "tensorflow.get_static_value",
    "tensorflow.int32",
    "tensorflow.python.ops.control_flow_util.GraphOrParentsInXlaContext",
    "tensorflow.while_loop"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.util.tfp_math_value_and_gradients": {
  "data": {
   "shadows": "tensorflow_probability.python.math.gradient.value_and_gradient"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.util.trace_scan": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": [
    "tensorflow.TensorArray",
    "tensorflow.compat.dimension_value",
    "tensorflow.compat.v1.get_variable_scope",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.compat.v1.variable_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.executing_eagerly",
    "tensorflow.int32",
    "tensorflow.nest.map_structure",
    "tensorflow.shape",
    "tensorflow.while_loop",
    "trace_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.trace_scan._body": {
  "data": {
   "lineno": 358,
   "symbols_in_volume": [
    "loop_fn",
    "tensorflow.nest.flatten",
    "tensorflow.nest.pack_sequence_as",
    "trace_fn",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.trace_scan._merge_static_length": {
  "data": {
   "lineno": 375,
   "symbols_in_volume": [
    "tensorflow.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.warn_if_parameters_are_not_simple_tensors": {
  "data": {
   "lineno": 484,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.internal.util._is_tensor_like",
    "tensorflow_probability.python.mcmc.internal.util.warnings"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.util_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.constant",
    "tensorflow.register_tensor_conversion_function",
    "tensorflow.test.main",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.mcmc.internal.util_test.TensorConvertible",
    "tensorflow_probability.python.mcmc.internal.util_test.collections"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.ChooseTest": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.ChooseTest.test_selects_batch_members_from_list_of_arrays": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "list",
    "numpy.array",
    "numpy.ones",
    "numpy.zeros",
    "tensorflow.constant",
    "tensorflow_probability.python.mcmc.internal.util.choose"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.ChooseTest.test_works_for_nested_namedtuple": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "InnerResults",
    "Results",
    "numpy.float32",
    "numpy.float64",
    "numpy.int32",
    "tensorflow.constant",
    "tensorflow_probability.python.mcmc.internal.util.choose",
    "tensorflow_probability.python.mcmc.internal.util_test.collections"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.EnableStoreParametersInResultsTest": {
  "data": {
   "lineno": 326,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.EnableStoreParametersInResultsTest.testAllCases": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "len",
    "tensorflow_probability.python.mcmc.internal.util.enable_store_parameters_in_results",
    "tensorflow_probability.python.mcmc.internal.util_test.FakeInnerNew",
    "tensorflow_probability.python.mcmc.internal.util_test.FakeInnerOld",
    "tensorflow_probability.python.mcmc.internal.util_test.FakeWrapperNew",
    "tensorflow_probability.python.mcmc.internal.util_test.FakeWrapperOld",
    "type",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.EnableStoreParametersInResultsTest.testNoParameters": {
  "data": {
   "lineno": 364,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.internal.util.enable_store_parameters_in_results",
    "tensorflow_probability.python.mcmc.internal.util_test.FakeInnerNoParameters"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.FakeInnerNew": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.FakeInnerNew.__init__": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.FakeInnerNoParameters": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.FakeInnerOld": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.FakeInnerOld.__init__": {
  "data": {
   "lineno": 311
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.FakeWrapperNew": {
  "data": {
   "lineno": 301,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.FakeWrapperNew.__init__": {
  "data": {
   "lineno": 303,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.FakeWrapperOld": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.FakeWrapperOld.__init__": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.GradientTest": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.GradientTest.testGradientComputesCorrectly": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "dtype",
    "numpy.float32",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.mcmc.internal.util.maybe_call_fn_and_grads"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.GradientTest.testGradientComputesCorrectly.fn": {
  "data": {
   "lineno": 121
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.GradientTest.testGradientWorksDespiteBijectorCaching": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.python.mcmc.internal.util.maybe_call_fn_and_grads",
    "tensorflow_probability.python.mcmc.internal.util_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.GradientTest.testNoGradientsNiceError": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "ValueError",
    "dtype",
    "enumerate",
    "numpy.float32",
    "tensorflow.convert_to_tensor",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.mcmc.internal.util.maybe_call_fn_and_grads"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.GradientTest.testNoGradientsNiceError.fn": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "tensorflow.stop_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.IsNamedTupleLikeTest": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.IsNamedTupleLikeTest.test_false_for_base_case": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "dict",
    "list",
    "numpy.int32",
    "tensorflow.constant",
    "tensorflow_probability.python.mcmc.internal.util.is_namedtuple_like",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.IsNamedTupleLikeTest.test_true_for_namedtuple_with_fields": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "HasFields",
    "tensorflow_probability.python.mcmc.internal.util.is_namedtuple_like",
    "tensorflow_probability.python.mcmc.internal.util_test.collections"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.IsNamedTupleLikeTest.test_true_for_namedtuple_without_fields": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "NoFields",
    "tensorflow_probability.python.mcmc.internal.util.is_namedtuple_like",
    "tensorflow_probability.python.mcmc.internal.util_test.collections"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.MakeInnermostGetterTest": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.MakeInnermostGetterTest.testNoWrapper": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.internal.util.make_innermost_getter",
    "tensorflow_probability.python.mcmc.internal.util_test.SimpleResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.MakeInnermostGetterTest.testNoWrapperArg": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.internal.util.make_innermost_getter",
    "tensorflow_probability.python.mcmc.internal.util_test.SimpleResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.MakeInnermostGetterTest.testNoWrapperKwarg": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.internal.util.make_innermost_getter",
    "tensorflow_probability.python.mcmc.internal.util_test.SimpleResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.MakeInnermostGetterTest.testOneWrapper": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.internal.util.make_innermost_getter",
    "tensorflow_probability.python.mcmc.internal.util_test.SimpleResults",
    "tensorflow_probability.python.mcmc.internal.util_test.WrapperResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.MakeInnermostGetterTest.testTwoWrappers": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.internal.util.make_innermost_getter",
    "tensorflow_probability.python.mcmc.internal.util_test.SimpleResults",
    "tensorflow_probability.python.mcmc.internal.util_test.WrapperResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.MakeInnermostSetterTest": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.MakeInnermostSetterTest.testNoWrapper": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.internal.util.make_innermost_setter",
    "tensorflow_probability.python.mcmc.internal.util_test.SimpleResults",
    "tensorflow_probability.python.mcmc.internal.util_test._test_setter_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.MakeInnermostSetterTest.testNoWrapperArg": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.internal.util.make_innermost_setter",
    "tensorflow_probability.python.mcmc.internal.util_test.SimpleResults",
    "tensorflow_probability.python.mcmc.internal.util_test._test_setter_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.MakeInnermostSetterTest.testNoWrapperKwarg": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.internal.util.make_innermost_setter",
    "tensorflow_probability.python.mcmc.internal.util_test.SimpleResults",
    "tensorflow_probability.python.mcmc.internal.util_test._test_setter_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.MakeInnermostSetterTest.testOneWrapper": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.internal.util.make_innermost_setter",
    "tensorflow_probability.python.mcmc.internal.util_test.SimpleResults",
    "tensorflow_probability.python.mcmc.internal.util_test.WrapperResults",
    "tensorflow_probability.python.mcmc.internal.util_test._test_setter_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.MakeInnermostSetterTest.testTwoWrappers": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.internal.util.make_innermost_setter",
    "tensorflow_probability.python.mcmc.internal.util_test.SimpleResults",
    "tensorflow_probability.python.mcmc.internal.util_test.WrapperResults",
    "tensorflow_probability.python.mcmc.internal.util_test._test_setter_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.SimpleResults": {
  "data": {
   "lineno": 224
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.SimpleTensorWarningTest": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.SimpleTensorWarningTest.testNoWarn": {
  "data": {
   "lineno": 394,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "any",
    "numpy.array",
    "str",
    "tensor_callable",
    "tensorflow.constant",
    "tensorflow_probability.python.mcmc.internal.util.warn_if_parameters_are_not_simple_tensors",
    "tensorflow_probability.python.mcmc.internal.util_test.warnings"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.SimpleTensorWarningTest.testWarn": {
  "data": {
   "lineno": 382,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "any",
    "str",
    "tensor_callable",
    "tensorflow.Variable",
    "tensorflow.compat.v2.Variable",
    "tensorflow_probability.python.mcmc.internal.util.warn_if_parameters_are_not_simple_tensors",
    "tensorflow_probability.python.mcmc.internal.util_test.TensorConvertible",
    "tensorflow_probability.python.mcmc.internal.util_test.warnings"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.SmartForLoopTest": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.SmartForLoopTest.test_python_for_loop": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.int32",
    "tensorflow.int64",
    "tensorflow_probability.python.mcmc.internal.util.smart_for_loop",
    "tensorflow_probability.python.mcmc.internal.util_test.collections"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.SmartForLoopTest.test_python_for_loop.body": {
  "data": {
   "lineno": 173
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.SmartForLoopTest.test_tf_while_loop": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "numpy.int64",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.mcmc.internal.util.smart_for_loop",
    "tensorflow_probability.python.mcmc.internal.util_test.collections"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.SmartForLoopTest.test_tf_while_loop.body": {
  "data": {
   "lineno": 186
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.TensorConvertible": {
  "data": {
   "lineno": 370,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.TraceScanTest": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.TraceScanTest.testBasic": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.internal.util.trace_scan"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.TraceScanTest.testBasic._loop_fn": {
  "data": {
   "lineno": 202
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.TraceScanTest.testBasic._trace_fn": {
  "data": {
   "lineno": 205
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.WrapperResults": {
  "data": {
   "lineno": 222
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.internal.util_test._test_setter_fn": {
  "data": {
   "lineno": 227
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.tfd": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.util": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.internal.util_test.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.kernel": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.kernel.TransitionKernel": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "object",
    "tensorflow_probability.python.mcmc.kernel.abc",
    "tensorflow_probability.python.mcmc.kernel.six"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.kernel.TransitionKernel.bootstrap_results": {
  "data": {
   "lineno": 75
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.kernel.TransitionKernel.is_calibrated": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "NotImplementedError",
    "tensorflow_probability.python.mcmc.kernel.abc"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.kernel.TransitionKernel.one_step": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "NotImplementedError",
    "tensorflow_probability.python.mcmc.kernel.abc"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.kernel.__all__": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.kernel.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.kernel.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.kernel.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.kernel.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.kernel.six": {
  "data": {
   "shadows": "six"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.langevin": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.langevin.collections"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.kernel.TransitionKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm.__init__": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "UncalibratedLangevin",
    "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastings"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm.bootstrap_results": {
  "data": {
   "lineno": 362
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm.is_calibrated": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm.name": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm.one_step": {
  "data": {
   "lineno": 338
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm.parallel_iterations": {
  "data": {
   "lineno": 321,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm.parameters": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm.seed": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm.step_size": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm.target_log_prob_fn": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm.volatility_fn": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin": {
  "data": {
   "lineno": 367,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.kernel.TransitionKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.__init__": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": [
    "TypeError",
    "callable",
    "dict",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.SeedStream",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.bootstrap_results": {
  "data": {
   "lineno": 586,
   "symbols_in_volume": [
    "_prepare_args",
    "list",
    "maybe_flatten",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like",
    "tensorflow_probability.python.mcmc.internal.util.make_name",
    "tensorflow_probability.python.mcmc.internal.util.set_doc",
    "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm",
    "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevinKernelResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.bootstrap_results.maybe_flatten": {
  "data": {
   "lineno": 617,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.internal.util.is_list_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.compute_acceptance": {
  "data": {
   "lineno": 459,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.is_calibrated": {
  "data": {
   "lineno": 480,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.name": {
  "data": {
   "lineno": 471,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.one_step": {
  "data": {
   "lineno": 484,
   "symbols_in_volume": [
    "_compute_log_acceptance_correction",
    "_euler_method",
    "_prepare_args",
    "maybe_flatten",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.cond",
    "tensorflow.random.normal",
    "tensorflow.shape",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_rank",
    "tensorflow_probability.python.mcmc.internal.util.make_name",
    "tensorflow_probability.python.mcmc.internal.util.set_doc",
    "tensorflow_probability.python.mcmc.langevin.MetropolisAdjustedLangevinAlgorithm",
    "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevinKernelResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.one_step.maybe_flatten": {
  "data": {
   "lineno": 554,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.internal.util.is_list_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.parallel_iterations": {
  "data": {
   "lineno": 467,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.parameters": {
  "data": {
   "lineno": 475,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.seed": {
  "data": {
   "lineno": 463,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.step_size": {
  "data": {
   "lineno": 451,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.target_log_prob_fn": {
  "data": {
   "lineno": 447,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevin.volatility_fn": {
  "data": {
   "lineno": 455,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.UncalibratedLangevinKernelResults": {
  "data": {
   "lineno": 41
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.langevin.__all__": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.langevin._compute_log_acceptance_correction": {
  "data": {
   "lineno": 748,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.math.log",
    "tensorflow.range",
    "tensorflow.rank",
    "tensorflow.reduce_sum",
    "tensorflow.sqrt",
    "tensorflow.stack",
    "tensorflow_probability.python.mcmc.internal.util.safe_sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin._euler_method": {
  "data": {
   "lineno": 630,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.sqrt",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin._get_drift": {
  "data": {
   "lineno": 691,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.square",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin._maybe_broadcast_volatility": {
  "data": {
   "lineno": 925,
   "symbols_in_volume": [
    "tensorflow.zeros_like",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin._maybe_call_volatility_fn_and_grads": {
  "data": {
   "lineno": 872,
   "symbols_in_volume": [
    "ValueError",
    "_maybe_broadcast_volatility",
    "len",
    "list",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.math.diag_jacobian",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like",
    "volatility_fn",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin._prepare_args": {
  "data": {
   "lineno": 932,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "list",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_shape",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like",
    "tensorflow_probability.python.mcmc.internal.util.maybe_call_fn_and_grads",
    "tensorflow_probability.python.mcmc.langevin._get_drift",
    "tensorflow_probability.python.mcmc.langevin._maybe_call_volatility_fn_and_grads",
    "volatility_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.langevin.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.langevin.diag_jacobian": {
  "data": {
   "shadows": "tensorflow_probability.python.math.diag_jacobian"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.langevin.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.langevin.distributions": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.langevin.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.langevin.kernel_base": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.kernel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.langevin.mcmc_util": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.langevin.metropolis_hastings": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.metropolis_hastings"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.langevin.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.langevin.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.langevin_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.langevin_test.LangevinTest": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.langevin_test.LangevinTest.testLangevin1DNormal": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "dtype",
    "numpy.float32",
    "tensorflow.math.squared_difference",
    "tensorflow.reduce_mean",
    "tensorflow.sqrt",
    "tensorflow_probability.mcmc.MetropolisAdjustedLangevinAlgorithm",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.langevin_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin_test.LangevinTest.testLangevin3DNormal": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "dtype",
    "numpy.float32",
    "numpy.ones",
    "numpy.squeeze",
    "tensorflow.concat",
    "tensorflow.expand_dims",
    "tensorflow.linalg.cholesky",
    "tensorflow.matmul",
    "tensorflow.reduce_mean",
    "tensorflow.transpose",
    "tensorflow_probability.mcmc.MetropolisAdjustedLangevinAlgorithm",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.langevin_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin_test.LangevinTest.testLangevin3DNormal.target_log_prob": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "tensorflow.concat"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin_test.LangevinTest.testLangevin3DNormalDynamicVolatility": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "dtype",
    "numpy.float32",
    "numpy.ones",
    "numpy.squeeze",
    "tensorflow.concat",
    "tensorflow.expand_dims",
    "tensorflow.linalg.cholesky",
    "tensorflow.matmul",
    "tensorflow.reduce_mean",
    "tensorflow.transpose",
    "tensorflow_probability.mcmc.MetropolisAdjustedLangevinAlgorithm",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.langevin_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin_test.LangevinTest.testLangevin3DNormalDynamicVolatility.target_log_prob": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "tensorflow.concat"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin_test.LangevinTest.testLangevin3DNormalDynamicVolatility.volatility_fn": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "tensorflow.abs"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin_test.LangevinTest.testLangevinCorrectVolatilityGradient": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "dtype",
    "numpy.float32",
    "numpy.ones",
    "numpy.zeros",
    "tensorflow.linalg.cholesky",
    "tensorflow_probability.mcmc.MetropolisAdjustedLangevinAlgorithm",
    "tensorflow_probability.python.mcmc.langevin_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin_test.LangevinTest.testLangevinCorrectVolatilityGradient.target_log_prob": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "tensorflow.concat"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin_test.LangevinTest.testLangevinCorrectVolatilityGradient.volatility_fn": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "tensorflow.abs"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.langevin_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.langevin_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.langevin_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.langevin_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.langevin_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.langevin_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.langevin_test.tfd": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.langevin_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.make_simple_step_size_update_policy": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.hmc.make_simple_step_size_update_policy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.metropolis_hastings.collections",
    "tensorflow_probability.python.mcmc.metropolis_hastings.warnings"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastings": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.kernel.TransitionKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastings.__init__": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "dict",
    "tensorflow_probability.python.distributions.SeedStream",
    "tensorflow_probability.python.mcmc.metropolis_hastings.warnings"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastings.bootstrap_results": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "ValueError",
    "has_target_log_prob",
    "tensorflow.bool",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.ones_like",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.mcmc.internal.util.make_name",
    "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastingsKernelResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastings.inner_kernel": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastings.is_calibrated": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastings.name": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastings.one_step": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "AttributeError",
    "ValueError",
    "has_target_log_prob",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.math.log",
    "tensorflow.random.uniform",
    "tensorflow.shape",
    "tensorflow_probability.python.mcmc.internal.util.choose",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like",
    "tensorflow_probability.python.mcmc.internal.util.make_name",
    "tensorflow_probability.python.mcmc.internal.util.safe_sum",
    "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastingsKernelResults",
    "tensorflow_probability.python.mcmc.metropolis_hastings.warnings"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastings.parameters": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastings.seed": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastingsKernelResults": {
  "data": {
   "lineno": 42
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.__all__": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.distributions": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.has_target_log_prob": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": [
    "getattr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.kernel_base": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.kernel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.mcmc_util": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.python.mcmc.metropolis_hastings_test.collections"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.FakeTransitionKernel": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "tensorflow_probability.mcmc.TransitionKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.FakeTransitionKernel.__init__": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.metropolis_hastings_test.collections"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.FakeTransitionKernel.bootstrap_results": {
  "data": {
   "lineno": 78
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.FakeTransitionKernel.call_count": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.FakeTransitionKernel.is_calibrated": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.FakeTransitionKernel.one_step": {
  "data": {
   "lineno": 74
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.InnerKernelResultsWithCorrection": {
  "data": {
   "lineno": 44
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.InnerKernelResultsWithoutCorrection": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.MetropolisHastingsTest": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.MetropolisHastingsTest.setUp": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "numpy.float32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.MetropolisHastingsTest.testCorrectlyWorksWithCorrection": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "bootstrap_fn",
    "dict",
    "getattr",
    "numpy.nan",
    "one_step_fn",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.mcmc.MetropolisHastings",
    "tensorflow_probability.python.mcmc.metropolis_hastings_test.FakeTransitionKernel",
    "tensorflow_probability.python.mcmc.metropolis_hastings_test.InnerKernelResultsWithCorrection",
    "tensorflow_probability.python.mcmc.metropolis_hastings_test.make_bootstrap_results_fn",
    "tensorflow_probability.python.mcmc.metropolis_hastings_test.make_one_step_fn",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.MetropolisHastingsTest.testCorrectlyWorksWithoutCorrection": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "bootstrap_fn",
    "dict",
    "getattr",
    "numpy.nan",
    "one_step_fn",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.mcmc.MetropolisHastings",
    "tensorflow_probability.python.mcmc.metropolis_hastings_test.FakeTransitionKernel",
    "tensorflow_probability.python.mcmc.metropolis_hastings_test.InnerKernelResultsWithoutCorrection",
    "tensorflow_probability.python.mcmc.metropolis_hastings_test.make_bootstrap_results_fn",
    "tensorflow_probability.python.mcmc.metropolis_hastings_test.make_one_step_fn",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.MetropolisHastingsTest.testWarnings": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": [
    "bootstrap_fn",
    "one_step_fn",
    "sorted",
    "str",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.mcmc.MetropolisHastings",
    "tensorflow_probability.python.mcmc.metropolis_hastings_test.FakeTransitionKernel",
    "tensorflow_probability.python.mcmc.metropolis_hastings_test.InnerKernelResultsWithoutCorrection",
    "tensorflow_probability.python.mcmc.metropolis_hastings_test.make_bootstrap_results_fn",
    "tensorflow_probability.python.mcmc.metropolis_hastings_test.make_one_step_fn",
    "tensorflow_probability.python.mcmc.metropolis_hastings_test.warnings"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.is_list_like": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.internal.util.is_list_like"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.make_bootstrap_results_fn": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.make_bootstrap_results_fn.bootstrap_results": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "getattr",
    "kernel_results_cls",
    "sorted",
    "tensorflow.identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.make_one_step_fn": {
  "data": {
   "lineno": 83
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.make_one_step_fn.one_step": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "dtype",
    "enumerate",
    "getattr",
    "sorted",
    "tensorflow.identity",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.metropolis_hastings_test.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.potential_scale_reduction": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.diagnostic.potential_scale_reduction"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.random_walk_metropolis.collections"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.RandomWalkMetropolis": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.kernel.TransitionKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.RandomWalkMetropolis.__init__": {
  "data": {
   "lineno": 350,
   "symbols_in_volume": [
    "UncalibratedRandomWalk",
    "tensorflow_probability.python.mcmc.metropolis_hastings.MetropolisHastings",
    "tensorflow_probability.python.mcmc.random_walk_metropolis.random_walk_normal_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.RandomWalkMetropolis.bootstrap_results": {
  "data": {
   "lineno": 442
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.RandomWalkMetropolis.is_calibrated": {
  "data": {
   "lineno": 409,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.RandomWalkMetropolis.name": {
  "data": {
   "lineno": 405,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.RandomWalkMetropolis.new_state_fn": {
  "data": {
   "lineno": 397,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.RandomWalkMetropolis.one_step": {
  "data": {
   "lineno": 418
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.RandomWalkMetropolis.parameters": {
  "data": {
   "lineno": 413,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.RandomWalkMetropolis.seed": {
  "data": {
   "lineno": 401,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.RandomWalkMetropolis.target_log_prob_fn": {
  "data": {
   "lineno": 393,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalk": {
  "data": {
   "lineno": 447,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.kernel.TransitionKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalk.__init__": {
  "data": {
   "lineno": 459,
   "symbols_in_volume": [
    "dict",
    "tensorflow_probability.python.distributions.SeedStream",
    "tensorflow_probability.python.mcmc.internal.util.set_doc",
    "tensorflow_probability.python.mcmc.random_walk_metropolis.RandomWalkMetropolis",
    "tensorflow_probability.python.mcmc.random_walk_metropolis.random_walk_normal_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalk.bootstrap_results": {
  "data": {
   "lineno": 538,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like",
    "tensorflow_probability.python.mcmc.internal.util.set_doc",
    "tensorflow_probability.python.mcmc.random_walk_metropolis.RandomWalkMetropolis",
    "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalkResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalk.is_calibrated": {
  "data": {
   "lineno": 499,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalk.name": {
  "data": {
   "lineno": 490,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalk.new_state_fn": {
  "data": {
   "lineno": 482,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalk.one_step": {
  "data": {
   "lineno": 503,
   "symbols_in_volume": [
    "list",
    "maybe_flatten",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.shape",
    "tensorflow.zeros",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like",
    "tensorflow_probability.python.mcmc.internal.util.make_name",
    "tensorflow_probability.python.mcmc.internal.util.set_doc",
    "tensorflow_probability.python.mcmc.random_walk_metropolis.RandomWalkMetropolis",
    "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalkResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalk.one_step.maybe_flatten": {
  "data": {
   "lineno": 525,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.internal.util.is_list_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalk.parameters": {
  "data": {
   "lineno": 494,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalk.seed": {
  "data": {
   "lineno": 486,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalk.target_log_prob_fn": {
  "data": {
   "lineno": 478,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.UncalibratedRandomWalkResults": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.__all__": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis._maybe_call_fn": {
  "data": {
   "lineno": 551,
   "symbols_in_volume": [
    "TypeError",
    "fn",
    "list",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.distributions": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.kernel_base": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.kernel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.mcmc_util": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.metropolis_hastings": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.metropolis_hastings"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.random_walk_normal_fn": {
  "data": {
   "lineno": 48
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.random_walk_normal_fn._fn": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "seed_stream",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.random.normal",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.SeedStream",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.random_walk_uniform_fn": {
  "data": {
   "lineno": 112
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.random_walk_uniform_fn._fn": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "seed_stream",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.random.uniform",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.SeedStream",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test.RWMTest": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test.RWMTest.testRWM1DCauchy": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "cauchy_new_state_fn",
    "dtype",
    "numpy.float32",
    "tensorflow.math.reduce_mean",
    "tensorflow.math.sqrt",
    "tensorflow.math.squared_difference",
    "tensorflow_probability.mcmc.RandomWalkMetropolis",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.random_walk_metropolis_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test.RWMTest.testRWM1DCauchy.cauchy_new_state_fn": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "dtype",
    "tensorflow_probability.python.mcmc.random_walk_metropolis_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test.RWMTest.testRWM1DCauchy.cauchy_new_state_fn._fn": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "seed_stream",
    "tensorflow_probability.python.mcmc.random_walk_metropolis_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test.RWMTest.testRWM1DNormal": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "dtype",
    "numpy.float32",
    "tensorflow.math.reduce_mean",
    "tensorflow.math.sqrt",
    "tensorflow.math.squared_difference",
    "tensorflow_probability.mcmc.RandomWalkMetropolis",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.random_walk_metropolis_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test.RWMTest.testRWM1DUniform": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "dtype",
    "numpy.float32",
    "tensorflow.math.reduce_mean",
    "tensorflow.math.sqrt",
    "tensorflow.math.squared_difference",
    "tensorflow_probability.mcmc.RandomWalkMetropolis",
    "tensorflow_probability.mcmc.random_walk_uniform_fn",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.random_walk_metropolis_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test.RWMTest.testRWM2DNormal": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "dtype",
    "numpy.float32",
    "numpy.ones",
    "numpy.squeeze",
    "tensorflow.linalg.cholesky",
    "tensorflow.linalg.matmul",
    "tensorflow.math.reduce_mean",
    "tensorflow.stack",
    "tensorflow_probability.mcmc.RandomWalkMetropolis",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.random_walk_metropolis_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test.RWMTest.testRWM2DNormal.target_log_prob": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "tensorflow.squeeze",
    "tensorflow.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test._reduce_variance": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow.math.reduce_mean",
    "tensorflow.math.squared_difference"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test.tfd": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.random_walk_metropolis_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.random_walk_normal_fn": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.random_walk_metropolis.random_walk_normal_fn"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.random_walk_uniform_fn": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.random_walk_metropolis.random_walk_uniform_fn"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.replica_exchange_mc.collections"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.kernel.TransitionKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC.__init__": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "_replica_log_prob_fn",
    "dict",
    "make_kernel_fn",
    "range",
    "tensorflow.compat.dimension_value",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.SeedStream",
    "tensorflow_probability.python.mcmc.replica_exchange_mc.default_exchange_proposed_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC._get_exchanged_states": {
  "data": {
   "lineno": 419,
   "symbols_in_volume": [
    "_get_field",
    "len",
    "range",
    "tensorflow.TensorArray",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.concat",
    "tensorflow.constant",
    "tensorflow.math.log",
    "tensorflow.random.uniform",
    "tensorflow.shape",
    "tensorflow.stack",
    "tensorflow.while_loop"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC._get_exchanged_states._swap": {
  "data": {
   "lineno": 460,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow_probability.python.mcmc.internal.util.choose"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC._get_exchanged_states.body": {
  "data": {
   "lineno": 470,
   "symbols_in_volume": [
    "_swap",
    "range",
    "tensorflow.unstack",
    "tensorflow_probability.python.mcmc.internal.util.safe_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC._get_exchanged_states.cond": {
  "data": {
   "lineno": 467
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC._insert_old_states_where_no_exchange_was_proposed": {
  "data": {
   "lineno": 500,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.constant",
    "tensorflow.while_loop"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC._insert_old_states_where_no_exchange_was_proposed.body": {
  "data": {
   "lineno": 508,
   "symbols_in_volume": [
    "len",
    "range"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC._insert_old_states_where_no_exchange_was_proposed.cond": {
  "data": {
   "lineno": 505,
   "symbols_in_volume": [
    "tensorflow.size"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC.bootstrap_results": {
  "data": {
   "lineno": 519,
   "symbols_in_volume": [
    "list",
    "range",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like",
    "tensorflow_probability.python.mcmc.internal.util.make_name",
    "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMCKernelResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC.exchange_proposed_fn": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC.inverse_temperatures": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC.is_calibrated": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC.name": {
  "data": {
   "lineno": 303,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC.num_replica": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC.one_step": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": [
    "enumerate",
    "len",
    "list",
    "range",
    "tensorflow.TensorArray",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.compat.v1.setdiff1d",
    "tensorflow.range",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like",
    "tensorflow_probability.python.mcmc.internal.util.make_name",
    "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMCKernelResults",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC.parameters": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC.seed": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMC.target_log_prob_fn": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.ReplicaExchangeMCKernelResults": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc._get_field": {
  "data": {
   "lineno": 569,
   "symbols_in_volume": [
    "TypeError",
    "getattr",
    "hasattr"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc._replica_log_prob_fn": {
  "data": {
   "lineno": 559
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc._replica_log_prob_fn._replica_log_prob_fn_": {
  "data": {
   "lineno": 562,
   "symbols_in_volume": [
    "target_log_prob_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.default_exchange_proposed_fn": {
  "data": {
   "lineno": 49
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.default_exchange_proposed_fn.default_exchange_proposed_fn_": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "seed_stream",
    "tensorflow.cond",
    "tensorflow.random.uniform",
    "tensorflow_probability.python.distributions.SeedStream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.default_exchange_proposed_fn.default_exchange_proposed_fn_._exchange": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.int32",
    "tensorflow.range",
    "tensorflow.reshape",
    "tensorflow.size"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.default_exchange_proposed_fn.default_exchange_proposed_fn_._null_exchange": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.int32",
    "tensorflow.reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.distributions": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.kernel_base": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.kernel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.mcmc_util": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.DefaultExchangeProposedFnTest": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.DefaultExchangeProposedFnTest.generate_exchanges": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "tensorflow.range",
    "tensorflow.scan"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.DefaultExchangeProposedFnTest.generate_exchanges._scan_fn": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "exchange_proposed_fn",
    "tensorflow.compat.v1.assert_equal",
    "tensorflow.compat.v1.assert_greater_equal",
    "tensorflow.compat.v1.assert_less",
    "tensorflow.control_dependencies",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow.size",
    "tensorflow.unique"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.DefaultExchangeProposedFnTest.setUp": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "tensorflow.compat.v1.set_random_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.DefaultExchangeProposedFnTest.testProbExchange0p0": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "numpy.mean",
    "tensorflow_probability.mcmc.default_exchange_proposed_fn",
    "tensorflow_probability.python.mcmc.replica_exchange_mc_test._set_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.DefaultExchangeProposedFnTest.testProbExchange0p5NumReplica2": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "numpy.mean",
    "tensorflow_probability.mcmc.default_exchange_proposed_fn",
    "tensorflow_probability.python.mcmc.replica_exchange_mc_test._set_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.DefaultExchangeProposedFnTest.testProbExchange0p5NumReplica3": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "numpy.mean",
    "tensorflow_probability.mcmc.default_exchange_proposed_fn",
    "tensorflow_probability.python.mcmc.replica_exchange_mc_test._set_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.DefaultExchangeProposedFnTest.testProbExchange0p5NumReplica4": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "numpy.mean",
    "tensorflow_probability.mcmc.default_exchange_proposed_fn",
    "tensorflow_probability.python.mcmc.replica_exchange_mc_test._set_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.DefaultExchangeProposedFnTest.testProbExchange0p5NumReplica5": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "numpy.mean",
    "tensorflow_probability.mcmc.default_exchange_proposed_fn",
    "tensorflow_probability.python.mcmc.replica_exchange_mc_test._set_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.DefaultExchangeProposedFnTest.testProbExchange1p0": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "numpy.mean",
    "tensorflow_probability.mcmc.default_exchange_proposed_fn",
    "tensorflow_probability.python.mcmc.replica_exchange_mc_test._set_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest._getNormalREMCSamples": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "dtype",
    "numpy.float32",
    "tensorflow.function",
    "tensorflow_probability.mcmc.ReplicaExchangeMC",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.replica_exchange_mc_test._set_seed",
    "tensorflow_probability.python.mcmc.replica_exchange_mc_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest._getNormalREMCSamples.make_kernel_fn": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.setUp": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "tensorflow.compat.v1.set_random_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testInverseTemperaturesValueError": {
  "data": {
   "lineno": 468,
   "symbols_in_volume": [
    "ValueError",
    "dtype",
    "numpy.float32",
    "tensorflow.executing_eagerly",
    "tensorflow.function",
    "tensorflow.int32",
    "tensorflow.linspace",
    "tensorflow.random.uniform",
    "tensorflow_probability.mcmc.ReplicaExchangeMC",
    "tensorflow_probability.python.mcmc.replica_exchange_mc_test._set_seed",
    "tensorflow_probability.python.mcmc.replica_exchange_mc_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testInverseTemperaturesValueError.make_kernel_fn": {
  "data": {
   "lineno": 476,
   "symbols_in_volume": [
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testMultipleCorrelatedStatesWithFourBatchDims": {
  "data": {
   "lineno": 417,
   "symbols_in_volume": [
    "dtype",
    "numpy.cov",
    "numpy.float32",
    "tensorflow.function",
    "tensorflow.linalg.LinearOperatorLowerTriangular",
    "tensorflow.linalg.cholesky",
    "tensorflow.ones",
    "tensorflow.stack",
    "tensorflow_probability.mcmc.ReplicaExchangeMC",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.replica_exchange_mc_test._set_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testMultipleCorrelatedStatesWithFourBatchDims.make_kernel_fn": {
  "data": {
   "lineno": 434,
   "symbols_in_volume": [
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testMultipleCorrelatedStatesWithFourBatchDims.target_log_prob": {
  "data": {
   "lineno": 427,
   "symbols_in_volume": [
    "tensorflow.reduce_sum",
    "tensorflow.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testMultipleCorrelatedStatesWithNoBatchDims": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": [
    "dtype",
    "numpy.float32",
    "tensorflow.compat.dimension_value",
    "tensorflow.function",
    "tensorflow.linalg.LinearOperatorLowerTriangular",
    "tensorflow.linalg.cholesky",
    "tensorflow.matmul",
    "tensorflow.reduce_mean",
    "tensorflow.stack",
    "tensorflow_probability.mcmc.ReplicaExchangeMC",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.replica_exchange_mc_test._set_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testMultipleCorrelatedStatesWithNoBatchDims.make_kernel_fn": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": [
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testMultipleCorrelatedStatesWithNoBatchDims.target_log_prob": {
  "data": {
   "lineno": 326,
   "symbols_in_volume": [
    "tensorflow.reduce_sum",
    "tensorflow.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testNormalEvenNumReplicas": {
  "data": {
   "lineno": 205
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testNormalEvenNumReplicasLowTolerance": {
  "data": {
   "lineno": 221
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testNormalHighTemperatureOnlyHasLargerStddev": {
  "data": {
   "lineno": 229
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testNormalLowTemperatureOnlyHasSmallerStddev": {
  "data": {
   "lineno": 237
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testNormalOddNumReplicas": {
  "data": {
   "lineno": 197
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testNormalOddNumReplicasLowTolerance": {
  "data": {
   "lineno": 213
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testNormalWithTwoBatchDimsAndThreeReplicas": {
  "data": {
   "lineno": 366,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.cov",
    "numpy.float32",
    "tensorflow.function",
    "tensorflow_probability.mcmc.ReplicaExchangeMC",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.replica_exchange_mc_test._set_seed",
    "tensorflow_probability.python.mcmc.replica_exchange_mc_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testNormalWithTwoBatchDimsAndThreeReplicas.make_kernel_fn": {
  "data": {
   "lineno": 381,
   "symbols_in_volume": [
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testRWM2DMixNormal": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "dtype",
    "numpy.float32",
    "numpy.ones",
    "numpy.sqrt",
    "tensorflow.compat.v1.logging.vlog",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow.exp",
    "tensorflow.function",
    "tensorflow.linspace",
    "tensorflow.math.squared_difference",
    "tensorflow.minimum",
    "tensorflow.reduce_mean",
    "tensorflow.sqrt",
    "tensorflow_probability.mcmc.ReplicaExchangeMC",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.replica_exchange_mc_test._set_seed",
    "tensorflow_probability.python.mcmc.replica_exchange_mc_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testRWM2DMixNormal._trace_log_accept_ratio": {
  "data": {
   "lineno": 282
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.REMCTest.testRWM2DMixNormal.make_kernel_fn": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test._set_seed": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow.executing_eagerly"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.tfd": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.replica_exchange_mc_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.sample.warnings"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.sample.CheckpointableStatesAndTrace": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.sample.collections"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.sample.StatesAndTrace": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.sample.collections"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.sample.__all__": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.sample.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample.mcmc_util": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample.sample_chain": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.int32",
    "tensorflow.nest.map_structure",
    "tensorflow.one_hot",
    "tensorflow_probability.python.mcmc.internal.util.trace_scan",
    "tensorflow_probability.python.mcmc.sample.CheckpointableStatesAndTrace",
    "tensorflow_probability.python.mcmc.sample.StatesAndTrace",
    "tensorflow_probability.python.mcmc.sample.warnings",
    "trace_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample.sample_chain._trace_scan_fn": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": [
    "list",
    "tensorflow_probability.python.mcmc.internal.util.smart_for_loop"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.sample_annealed_importance.collections"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance.AISResults": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance.mcmc_util": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance.sample_annealed_importance_chain": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "_bootstrap_results",
    "numpy.int32",
    "tensorflow.broadcast_dynamic_shape",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.int32",
    "tensorflow.shape",
    "tensorflow.while_loop",
    "tensorflow.zeros",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance.sample_annealed_importance_chain._bootstrap_results": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "_make_convex_combined_log_prob_fn",
    "dtype",
    "make_kernel_fn",
    "numpy.nan",
    "tensorflow.fill",
    "tensorflow.shape",
    "tensorflow_probability.python.mcmc.sample_annealed_importance.AISResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance.sample_annealed_importance_chain._loop_body": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "_make_convex_combined_log_prob_fn",
    "make_kernel_fn",
    "proposal_log_prob_fn",
    "target_log_prob_fn",
    "tensorflow.cast",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like",
    "tensorflow_probability.python.mcmc.sample_annealed_importance.AISResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance.sample_annealed_importance_chain._make_convex_combined_log_prob_fn": {
  "data": {
   "lineno": 205
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance.sample_annealed_importance_chain._make_convex_combined_log_prob_fn._fn": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "proposal_log_prob_fn",
    "target_log_prob_fn",
    "tensorflow.cast",
    "tensorflow.identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_chain": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.sample_annealed_importance.sample_annealed_importance_chain"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow.executing_eagerly",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest._ais_gets_correct_log_normalizer": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "dict",
    "tensorflow.cast",
    "tensorflow.compat.v1.logging.vlog",
    "tensorflow.executing_eagerly",
    "tensorflow.exp",
    "tensorflow.math.lgamma",
    "tensorflow.math.log",
    "tensorflow.reduce_logsumexp",
    "tensorflow.reduce_prod",
    "tensorflow.shape",
    "tensorflow.size",
    "tensorflow.sqrt",
    "tensorflow_probability.distributions.SeedStream",
    "tensorflow_probability.mcmc.sample_annealed_importance_chain",
    "tensorflow_probability.python.mcmc.sample_annealed_importance_test._compute_sample_variance",
    "tensorflow_probability.python.mcmc.sample_annealed_importance_test.collections"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest._ais_gets_correct_log_normalizer.make_kernel": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
    "tensorflow_probability.python.mcmc.sample_annealed_importance_test._maybe_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest._ais_gets_correct_log_normalizer.proposal_log_prob": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "tensorflow.range",
    "tensorflow.rank",
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.mcmc.sample_annealed_importance_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest._ais_gets_correct_log_normalizer.target_log_prob": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "tensorflow.range",
    "tensorflow.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest._ais_gets_correct_log_normalizer_wrapper": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.random.normal",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest._log_gamma_log_prob": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "tensorflow.exp",
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest.setUp": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "numpy.random.seed",
    "tensorflow.compat.v1.random.set_random_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest.testAIS1": {
  "data": {
   "lineno": 158
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest.testAIS2": {
  "data": {
   "lineno": 161
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest.testAIS3": {
  "data": {
   "lineno": 164
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest.testSampleAIChainSeedReproducibleWorksCorrectly": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "dict",
    "numpy.random.rand",
    "tensorflow_probability.mcmc.sample_annealed_importance_chain"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest.testSampleAIChainSeedReproducibleWorksCorrectly.make_kernel": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
    "tensorflow_probability.python.mcmc.sample_annealed_importance_test._maybe_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest.testSampleAIChainSeedReproducibleWorksCorrectly.proposal_log_prob": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.pi",
    "tensorflow.range",
    "tensorflow.rank",
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.SampleAnnealedImportanceTest.testSampleAIChainSeedReproducibleWorksCorrectly.target_log_prob": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "tensorflow.range",
    "tensorflow.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test._compute_sample_variance": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow.math.squared_difference",
    "tensorflow.reduce_mean"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test._maybe_seed": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.tfd": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.sample_annealed_importance_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_chain": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.sample.sample_chain"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.sample_halton_sequence.sample_halton_sequence"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence._MAX_DIMENSION": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence._PRIMES": {
  "data": {
   "lineno": 385
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence._base_expansion_size": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": [
    "tensorflow.floor",
    "tensorflow.math.log"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence._get_indices": {
  "data": {
   "lineno": 303,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.range",
    "tensorflow.reshape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence._get_permutations": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": [
    "generate_one",
    "stream",
    "tensorflow.concat",
    "tensorflow.range",
    "tensorflow.unstack",
    "tensorflow_probability.python.distributions.SeedStream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence._get_permutations.generate_one": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": [
    "stream",
    "tensorflow.map_fn",
    "tensorflow.random.shuffle",
    "tensorflow.range"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence._primes_less_than": {
  "data": {
   "lineno": 367,
   "symbols_in_volume": [
    "int",
    "numpy.array",
    "numpy.bool",
    "numpy.nonzero",
    "numpy.ones",
    "numpy.r_",
    "range"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence._randomize": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "_get_permutations",
    "stream",
    "tensorflow.cast",
    "tensorflow.cumsum",
    "tensorflow.gather",
    "tensorflow.int32",
    "tensorflow.range",
    "tensorflow.reduce_sum",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.SeedStream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence.distributions": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence.sample_halton_sequence": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "ValueError",
    "_base_expansion_size",
    "_get_indices",
    "_randomize",
    "stream",
    "tensorflow.cast",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.compat.v1.where",
    "tensorflow.constant",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.math.floordiv",
    "tensorflow.random.uniform",
    "tensorflow.range",
    "tensorflow.reduce_max",
    "tensorflow.reduce_sum",
    "tensorflow.reshape",
    "tensorflow.tile",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.distributions.SeedStream",
    "tensorflow_probability.python.mcmc.sample_halton_sequence._MAX_DIMENSION"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.HaltonSequenceTest": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.HaltonSequenceTest.test_docstring_example": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "tensorflow.int32",
    "tensorflow.range",
    "tensorflow.reduce_mean",
    "tensorflow.reduce_prod",
    "tensorflow_probability.mcmc.sample_halton_sequence"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.HaltonSequenceTest.test_dtypes_works_correctly": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.float64",
    "tensorflow.float32",
    "tensorflow.float64",
    "tensorflow_probability.mcmc.sample_halton_sequence"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.HaltonSequenceTest.test_dynamic_num_samples": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow_probability.mcmc.sample_halton_sequence"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.HaltonSequenceTest.test_known_values_small_bases": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow_probability.mcmc.sample_halton_sequence"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.HaltonSequenceTest.test_normal_integral_mean_and_var_correctly_estimated": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "int",
    "tensorflow.constant",
    "tensorflow.float64",
    "tensorflow.sqrt",
    "tensorflow.square",
    "tensorflow_probability.mcmc.sample_halton_sequence",
    "tensorflow_probability.python.internal.monte_carlo.expectation_importance_sampler",
    "tensorflow_probability.python.mcmc.sample_halton_sequence_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.HaltonSequenceTest.test_partial_sum_func_qmc": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "func_estimate",
    "numpy.array",
    "numpy.log",
    "numpy.mean",
    "range",
    "seed_hi",
    "seed_lo",
    "tensorflow_probability.mcmc.sample_halton_sequence",
    "tensorflow_probability.python.mcmc.sample_halton_sequence_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.HaltonSequenceTest.test_partial_sum_func_qmc.func_estimate": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "tensorflow.math.squared_difference",
    "tensorflow.reduce_mean",
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.HaltonSequenceTest.test_randomized_qmc_basic": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "numpy.mean",
    "numpy.std",
    "range",
    "seed",
    "tensorflow.reduce_mean",
    "tensorflow.reduce_sum",
    "tensorflow_probability.mcmc.sample_halton_sequence",
    "tensorflow_probability.python.mcmc.sample_halton_sequence_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.HaltonSequenceTest.test_seed_implies_deterministic_results": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": [
    "tensorflow_probability.mcmc.sample_halton_sequence",
    "tensorflow_probability.python.mcmc.sample_halton_sequence_test._set_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.HaltonSequenceTest.test_sequence_indices": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "tensorflow.int32",
    "tensorflow.range",
    "tensorflow_probability.mcmc.sample_halton_sequence"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test._set_seed": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow.executing_eagerly"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.monte_carlo": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.monte_carlo"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.tfd": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.sample_halton_sequence_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.python.mcmc.sample_test.collections"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.sample_test.SampleChainTest": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.sample_test.SampleChainTest.setUp": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "numpy.random.seed",
    "tensorflow.compat.v1.random.set_random_seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.SampleChainTest.testBasicOperation": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.sample_test.TestTransitionKernel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.SampleChainTest.testBurnin": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.sample_test.TestTransitionKernel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.SampleChainTest.testChainWorksCorrelatedMultivariate": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "dict",
    "dtype",
    "numpy.float32",
    "tensorflow.compat.dimension_value",
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow.executing_eagerly",
    "tensorflow.matmul",
    "tensorflow.reduce_mean",
    "tensorflow.stack",
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.sample_test.collections"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.SampleChainTest.testChainWorksCorrelatedMultivariate.target_log_prob": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "numpy.linalg.cholesky",
    "tensorflow.linalg.triangular_solve",
    "tensorflow.newaxis",
    "tensorflow.reduce_sum",
    "tensorflow.squeeze",
    "tensorflow.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.SampleChainTest.testCheckpointing": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.sample_test.TestTransitionKernel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.SampleChainTest.testCustomTrace": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.sample_test.TestTransitionKernel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.SampleChainTest.testDefaultTraceNamedTuple": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.sample_test.TestTransitionKernel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.SampleChainTest.testNoTraceFn": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.sample_test.TestTransitionKernel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.SampleChainTest.testNoWarningsExplicit": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "any",
    "str",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.sample_test.TestTransitionKernel",
    "tensorflow_probability.python.mcmc.sample_test.warnings"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.SampleChainTest.testThinning": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.sample_test.TestTransitionKernel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.SampleChainTest.testWarningsDefault": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "any",
    "str",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.sample_test.TestTransitionKernel",
    "tensorflow_probability.python.mcmc.sample_test.warnings"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.TestTransitionKernel": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.mcmc.TransitionKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.sample_test.TestTransitionKernel.bootstrap_results": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.sample_test.TestTransitionKernelResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.TestTransitionKernel.is_calibrated": {
  "data": {
   "lineno": 49
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.TestTransitionKernel.one_step": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.sample_test.TestTransitionKernelResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.sample_test.TestTransitionKernelResults": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.sample_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_test.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.sample_test.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptation": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.kernel.TransitionKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptation.__init__": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "_maybe_validate_target_accept_prob",
    "dict",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.int32",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.mcmc.internal.util.enable_store_parameters_in_results",
    "tensorflow_probability.python.mcmc.internal.util.make_name",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation._hmc_like_log_accept_prob_getter_fn",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation._hmc_like_step_size_getter_fn",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation._hmc_like_step_size_setter_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptation.bootstrap_results": {
  "data": {
   "lineno": 403,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.constant",
    "tensorflow.int32",
    "tensorflow_probability.python.mcmc.internal.util.make_name",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptationResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptation.inner_kernel": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptation.is_calibrated": {
  "data": {
   "lineno": 419
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptation.log_accept_prob_getter_fn": {
  "data": {
   "lineno": 304
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptation.name": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptation.num_adaptation_steps": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptation.one_step": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.compat.v1.where",
    "tensorflow.math.log",
    "tensorflow.minimum",
    "tensorflow.nest.flatten",
    "tensorflow.nest.pack_sequence_as",
    "tensorflow.range",
    "tensorflow.rank",
    "tensorflow_probability.python.mcmc.internal.util.choose",
    "tensorflow_probability.python.mcmc.internal.util.make_name",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation._get_differing_dims",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation._reduce_logmeanexp",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptation.parameters": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptation.step_size_getter_fn": {
  "data": {
   "lineno": 301
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptation.step_size_setter_fn": {
  "data": {
   "lineno": 297
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.SimpleStepSizeAdaptationResults": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation.collections"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation._get_differing_dims": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "len",
    "numpy.array",
    "numpy.where",
    "tensorflow.compat.v1.where",
    "tensorflow.not_equal",
    "tensorflow.rank",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation._hmc_like_log_accept_prob_getter_fn": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.minimum",
    "tensorflow_probability.python.mcmc.internal.util.make_innermost_getter"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation._hmc_like_step_size_getter_fn": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.internal.util.make_innermost_getter"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation._hmc_like_step_size_setter_fn": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.internal.util.make_innermost_setter"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation._maybe_validate_target_accept_prob": {
  "data": {
   "lineno": 423,
   "symbols_in_volume": [
    "tensorflow.compat.v1.assert_less",
    "tensorflow.compat.v1.assert_positive",
    "tensorflow.control_dependencies",
    "tensorflow.identity",
    "tensorflow.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation._reduce_logmeanexp": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "tensorflow.exp",
    "tensorflow.math.log",
    "tensorflow.reduce_mean"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.kernel_base": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.kernel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.mcmc_util": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.collections"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeMHKernel": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "tensorflow_probability.mcmc.TransitionKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeMHKernel.__init__": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeMHKernel.bootstrap_results": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeMHKernelResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeMHKernel.is_calibrated": {
  "data": {
   "lineno": 77
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeMHKernel.one_step": {
  "data": {
   "lineno": 63
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeMHKernelResults": {
  "data": {
   "lineno": 47
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeSteppedKernel": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "tensorflow_probability.mcmc.TransitionKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeSteppedKernel.__init__": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeSteppedKernel.bootstrap_results": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "tensorflow.convert_to_tensor",
    "tensorflow.nest.map_structure",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeSteppedKernelResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeSteppedKernel.is_calibrated": {
  "data": {
   "lineno": 100
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeSteppedKernel.one_step": {
  "data": {
   "lineno": 92
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeSteppedKernelResults": {
  "data": {
   "lineno": 81
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeWrapperKernel": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "tensorflow_probability.mcmc.TransitionKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeWrapperKernel.__init__": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeWrapperKernel.bootstrap_results": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeWrapperKernelResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeWrapperKernel.inner_kernel": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeWrapperKernel.is_calibrated": {
  "data": {
   "lineno": 127
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeWrapperKernel.one_step": {
  "data": {
   "lineno": 117
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeWrapperKernelResults": {
  "data": {
   "lineno": 104
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationDynamicBroadcastingTest": {
  "data": {
   "lineno": 450,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationStaticBroadcastingTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationStaticBroadcastingTest": {
  "data": {
   "lineno": 381,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationStaticBroadcastingTest.testBroadcasting": {
  "data": {
   "lineno": 386,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.array",
    "numpy.float64",
    "numpy.log",
    "numpy.ones",
    "range",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.constant",
    "tensorflow.float64",
    "tensorflow.zeros",
    "tensorflow_probability.mcmc.SimpleStepSizeAdaptation",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeMHKernel",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeSteppedKernel",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test._RATE"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationTest": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationTest.testAdaptationSteps": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "range",
    "tensorflow_probability.mcmc.SimpleStepSizeAdaptation",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeMHKernel",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeSteppedKernel",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test._RATE"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationTest.testAdaptiveAdaptation": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "range",
    "tensorflow.math.log",
    "tensorflow.stack",
    "tensorflow.zeros",
    "tensorflow_probability.mcmc.SimpleStepSizeAdaptation",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeMHKernel",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeSteppedKernel",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test._RATE"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationTest.testChainLogProbChainTarget": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "range",
    "tensorflow.constant",
    "tensorflow.math.log",
    "tensorflow.minimum",
    "tensorflow.stack",
    "tensorflow.zeros",
    "tensorflow_probability.mcmc.SimpleStepSizeAdaptation",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeMHKernel",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeSteppedKernel",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test._RATE"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationTest.testChainLogProbScalarTarget": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "range",
    "tensorflow.constant",
    "tensorflow.math.log",
    "tensorflow.minimum",
    "tensorflow.stack",
    "tensorflow.zeros",
    "tensorflow_probability.mcmc.SimpleStepSizeAdaptation",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeMHKernel",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeSteppedKernel",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test._RATE"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationTest.testExample": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": [
    "int",
    "tensorflow.compat.v1.random.set_random_seed",
    "tensorflow.exp",
    "tensorflow.minimum",
    "tensorflow.reduce_mean",
    "tensorflow.zeros",
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
    "tensorflow_probability.mcmc.SimpleStepSizeAdaptation",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.internal.test_util.test_seed",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test._set_seed",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationTest.testListStep": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "range",
    "tensorflow.constant",
    "tensorflow.math.log",
    "tensorflow.stack",
    "tensorflow.zeros",
    "tensorflow_probability.mcmc.SimpleStepSizeAdaptation",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeMHKernel",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeSteppedKernel",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test._RATE"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationTest.testStepSizeDecreases": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "range",
    "tensorflow.math.log",
    "tensorflow.stack",
    "tensorflow.zeros",
    "tensorflow_probability.mcmc.SimpleStepSizeAdaptation",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeMHKernel",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeSteppedKernel",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test._RATE"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationTest.testStepSizeIncreases": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "range",
    "tensorflow.math.log",
    "tensorflow.stack",
    "tensorflow.zeros",
    "tensorflow_probability.mcmc.SimpleStepSizeAdaptation",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeMHKernel",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeSteppedKernel",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test._RATE"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationTest.testTargetAcceptanceProbChecks": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": [
    "_impl",
    "absl.testing.parameterized.parameters",
    "tensorflow.errors.InvalidArgumentError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationTest.testTargetAcceptanceProbChecks._impl": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": [
    "tensorflow.zeros",
    "tensorflow_probability.mcmc.SimpleStepSizeAdaptation",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeMHKernel",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeSteppedKernel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationTest.testTurnOnStoreParametersInKernelResults": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "tensorflow_probability.mcmc.SimpleStepSizeAdaptation",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeSteppedKernel",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeWrapperKernel",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test._RATE"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.SimpleStepSizeAdaptationTest.testWrapped": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "range",
    "tensorflow.math.log",
    "tensorflow.stack",
    "tensorflow_probability.mcmc.SimpleStepSizeAdaptation",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeMHKernel",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeSteppedKernel",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.FakeWrapperKernel",
    "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test._RATE"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test._RATE": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test._set_seed": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "tensorflow.executing_eagerly"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.tfd": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.simple_step_size_adaptation_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.slice_sampler_kernel.collections"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSampler": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.kernel.TransitionKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSampler.__init__": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "dict",
    "tensorflow_probability.python.distributions.SeedStream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSampler.bootstrap_results": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": [
    "tensorflow.bool",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.shape",
    "tensorflow.zeros",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like",
    "tensorflow_probability.python.mcmc.internal.util.make_name",
    "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSamplerKernelResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSampler.is_calibrated": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSampler.max_doublings": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSampler.name": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSampler.one_step": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": [
    "_prepare_args",
    "_sample_next",
    "maybe_flatten",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.int32",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_rank",
    "tensorflow_probability.python.mcmc.internal.util.make_name",
    "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSamplerKernelResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSampler.one_step.maybe_flatten": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.internal.util.is_list_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSampler.parameters": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSampler.seed": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSampler.step_size": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSampler.target_log_prob_fn": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.SliceSamplerKernelResults": {
  "data": {
   "lineno": 39
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.__all__": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel._choose_random_direction": {
  "data": {
   "lineno": 356,
   "symbols_in_volume": [
    "seed_gen",
    "sum",
    "tensorflow.float32",
    "tensorflow.random.normal",
    "tensorflow.range",
    "tensorflow.rank",
    "tensorflow.reduce_sum",
    "tensorflow.shape",
    "tensorflow.sqrt",
    "tensorflow_probability.python.distributions.SeedStream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel._maybe_call_fn": {
  "data": {
   "lineno": 540,
   "symbols_in_volume": [
    "TypeError",
    "fn",
    "list",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel._prepare_args": {
  "data": {
   "lineno": 583,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "list",
    "maybe_flatten",
    "target_log_prob_fn",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like",
    "tensorflow_probability.python.mcmc.slice_sampler_kernel._maybe_call_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel._prepare_args.maybe_flatten": {
  "data": {
   "lineno": 609,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.internal.util.is_list_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel._right_pad": {
  "data": {
   "lineno": 555,
   "symbols_in_volume": [
    "int",
    "isinstance",
    "len",
    "tensorflow.concat",
    "tensorflow.int32",
    "tensorflow.ones",
    "tensorflow.rank",
    "tensorflow.reshape",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel._sample_next": {
  "data": {
   "lineno": 381,
   "symbols_in_volume": [
    "_get_rank",
    "_step_along_direction",
    "enumerate",
    "tensorflow.add_n",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.math.rsqrt",
    "tensorflow.range",
    "tensorflow.rank",
    "tensorflow.reduce_sum",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.mcmc.internal.slice_sampler_utils.slice_sampler_one_dim",
    "tensorflow_probability.python.mcmc.slice_sampler_kernel._choose_random_direction",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel._sample_next._get_rank": {
  "data": {
   "lineno": 475,
   "symbols_in_volume": [
    "len",
    "tensorflow.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel._sample_next._step_along_direction": {
  "data": {
   "lineno": 480,
   "symbols_in_volume": [
    "_right_pad",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel._sample_next.projected_target_log_prob_fn": {
  "data": {
   "lineno": 504,
   "symbols_in_volume": [
    "_step_along_direction",
    "target_log_prob_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.distributions": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.kernel_base": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.kernel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.mcmc_util": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.ssu": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.internal.slice_sampler_utils"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_kernel.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test.SliceSamplerTest": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test.SliceSamplerTest.testFourDimNormal": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "dtype",
    "numpy.float32",
    "numpy.ones",
    "numpy.zeros_like",
    "tensorflow.cast",
    "tensorflow.float32",
    "tensorflow.linalg.cholesky",
    "tensorflow.matmul",
    "tensorflow.reduce_mean",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow_probability.mcmc.SliceSampler",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.slice_sampler_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test.SliceSamplerTest.testOneDimNormal": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "dtype",
    "numpy.float32",
    "tensorflow.math.squared_difference",
    "tensorflow.reduce_mean",
    "tensorflow.sqrt",
    "tensorflow_probability.mcmc.SliceSampler",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.slice_sampler_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test.SliceSamplerTest.testTwoDimNormal": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "dtype",
    "numpy.float32",
    "numpy.ones",
    "numpy.squeeze",
    "tensorflow.linalg.cholesky",
    "tensorflow.matmul",
    "tensorflow.reduce_mean",
    "tensorflow.stack",
    "tensorflow_probability.mcmc.SliceSampler",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.slice_sampler_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test.SliceSamplerTest.testTwoDimNormal.target_log_prob": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "tensorflow.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test.SliceSamplerTest.testTwoDimNormalDynamicRank": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "dtype",
    "numpy.float32",
    "numpy.ones",
    "numpy.squeeze",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow.linalg.cholesky",
    "tensorflow.matmul",
    "tensorflow.reduce_mean",
    "tensorflow.stack",
    "tensorflow_probability.mcmc.SliceSampler",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.slice_sampler_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test.SliceSamplerTest.testTwoDimNormalDynamicRank.target_log_prob": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "tensorflow.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test.SliceSamplerTest.testTwoDimNormalDynamicShape": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "dtype",
    "numpy.float32",
    "numpy.ones",
    "numpy.squeeze",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow.linalg.cholesky",
    "tensorflow.matmul",
    "tensorflow.reduce_mean",
    "tensorflow.stack",
    "tensorflow_probability.mcmc.SliceSampler",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.slice_sampler_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test.SliceSamplerTest.testTwoDimNormalDynamicShape.target_log_prob": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "tensorflow.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test.tfd": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.slice_sampler_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.TextMessagesHmcBenchmarkTestHarness": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.TextMessagesHmcBenchmarkTestHarness.__init__": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "tensorflow.executing_eagerly"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.TextMessagesHmcBenchmarkTestHarness.benchmark_text_messages_hmc_num_leapfrog_1": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.text_messages_hmc.benchmark_text_messages_hmc"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.TextMessagesHmcBenchmarkTestHarness.benchmark_text_messages_hmc_num_leapfrog_10": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.text_messages_hmc.benchmark_text_messages_hmc"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.TextMessagesHmcBenchmarkTestHarness.benchmark_text_messages_hmc_num_leapfrog_2": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.text_messages_hmc.benchmark_text_messages_hmc"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.TextMessagesHmcBenchmarkTestHarness.benchmark_text_messages_hmc_num_leapfrog_20": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.text_messages_hmc.benchmark_text_messages_hmc"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.TextMessagesHmcBenchmarkTestHarness.benchmark_text_messages_hmc_num_leapfrog_3": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.text_messages_hmc.benchmark_text_messages_hmc"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.__all__": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.benchmark_text_messages_hmc": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "computation",
    "dict",
    "int",
    "numpy.float32",
    "numpy.sum",
    "tensorflow.cast",
    "tensorflow.compat.v1.Session",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v1.reset_default_graph",
    "tensorflow.compat.v2.Variable",
    "tensorflow.concat",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow.float32",
    "tensorflow.function",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.text_messages_hmc.tfd",
    "tensorflow_probability.python.mcmc.text_messages_hmc.time"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.benchmark_text_messages_hmc.computation": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "sample_chain",
    "tensorflow.constant",
    "tensorflow_probability.bijectors.Exp",
    "tensorflow_probability.bijectors.Sigmoid",
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
    "tensorflow_probability.mcmc.TransformedTransitionKernel",
    "tensorflow_probability.mcmc.make_simple_step_size_update_policy"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.benchmark_text_messages_hmc.unnormalized_log_posterior": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.text_messages_hmc.text_messages_joint_log_prob"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.mvn": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.text_messages_hmc.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.text_messages_joint_log_prob": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.float32",
    "tensorflow.gather",
    "tensorflow.int32",
    "tensorflow.range",
    "tensorflow.reduce_mean",
    "tensorflow.reduce_sum",
    "tensorflow.size",
    "tensorflow_probability.python.mcmc.text_messages_hmc.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.tfd": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc_eager_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.compat.v1.enable_eager_execution",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc_eager_test.EagerTextMessagesHmcBenchmark": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": [
    "tensorflow.test.Benchmark",
    "tensorflow_probability.python.mcmc.text_messages_hmc.TextMessagesHmcBenchmarkTestHarness"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc_eager_test.TextMessagesHmcBenchmarkTestHarness": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.text_messages_hmc.TextMessagesHmcBenchmarkTestHarness"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc_eager_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc_graph_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc_graph_test.GraphTextMessagesHmcBenchmark": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": [
    "tensorflow.test.Benchmark",
    "tensorflow_probability.python.mcmc.text_messages_hmc.TextMessagesHmcBenchmarkTestHarness"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc_graph_test.TextMessagesHmcBenchmarkTestHarness": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.text_messages_hmc.TextMessagesHmcBenchmarkTestHarness"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.text_messages_hmc_graph_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.transformed_kernel.collections"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.TransformedTransitionKernel": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.kernel.TransitionKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.TransformedTransitionKernel.__init__": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "dict",
    "tensorflow.python.util.deprecation.silence",
    "tensorflow_probability.python.mcmc.transformed_kernel.forward_log_det_jacobian_fn",
    "tensorflow_probability.python.mcmc.transformed_kernel.forward_transform_fn",
    "tensorflow_probability.python.mcmc.transformed_kernel.inverse_transform_fn",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.TransformedTransitionKernel.__init__.new_target_log_prob": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "target_log_prob_fn",
    "tensorflow.identity",
    "tensorflow.rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.TransformedTransitionKernel.bijector": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.TransformedTransitionKernel.bootstrap_results": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like",
    "tensorflow_probability.python.mcmc.internal.util.make_name",
    "tensorflow_probability.python.mcmc.transformed_kernel.TransformedTransitionKernelResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.TransformedTransitionKernel.inner_kernel": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.TransformedTransitionKernel.is_calibrated": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.TransformedTransitionKernel.name": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.TransformedTransitionKernel.one_step": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow_probability.python.mcmc.internal.util.is_list_like",
    "tensorflow_probability.python.mcmc.internal.util.make_name",
    "tensorflow_probability.python.mcmc.transformed_kernel.TransformedTransitionKernelResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.TransformedTransitionKernel.parameters": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.TransformedTransitionKernelResults": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.__all__": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.deprecation": {
  "data": {
   "shadows": "tensorflow.python.util.deprecation"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.forward_log_det_jacobian_fn": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.internal.util.is_list_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.forward_log_det_jacobian_fn.fn": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.forward_transform_fn": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.internal.util.is_list_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.forward_transform_fn.fn": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.inverse_transform_fn": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.internal.util.is_list_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.inverse_transform_fn.fn": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.kernel_base": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.kernel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.mcmc_util": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.bijectors",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.mcmc.transformed_kernel_test.collections"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.FakeInnerKernel": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "tensorflow_probability.mcmc.TransitionKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.FakeInnerKernel.__init__": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.FakeInnerKernel.bootstrap_results": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "tensorflow_probability.python.mcmc.transformed_kernel_test.FakeInnerKernelResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.FakeInnerKernel.is_calibrated": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.FakeInnerKernel.one_step": {
  "data": {
   "lineno": 60
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.FakeInnerKernel.parameters": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.FakeInnerKernelResults": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest.setUp": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": [
    "numpy.float32",
    "super",
    "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest.test_bootstrap_correctly_untransforms": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": [
    "numpy.log",
    "tensorflow_probability.mcmc.TransformedTransitionKernel",
    "tensorflow_probability.python.mcmc.transformed_kernel_test.FakeInnerKernel",
    "tensorflow_probability.python.mcmc.transformed_kernel_test.tfb"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest.test_bootstrap_correctly_untransforms.fake_target_log_prob": {
  "data": {
   "lineno": 273
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest.test_bootstrap_requires_xor_args": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": [
    "ValueError",
    "numpy.log",
    "tensorflow_probability.mcmc.TransformedTransitionKernel",
    "tensorflow_probability.python.mcmc.transformed_kernel_test.FakeInnerKernel",
    "tensorflow_probability.python.mcmc.transformed_kernel_test.tfb"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest.test_bootstrap_requires_xor_args.fake_target_log_prob": {
  "data": {
   "lineno": 258
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest.test_copy_works": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": [
    "tensorflow_probability.mcmc.TransformedTransitionKernel",
    "tensorflow_probability.python.mcmc.transformed_kernel_test.FakeInnerKernel",
    "tensorflow_probability.python.mcmc.transformed_kernel_test.tfb"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest.test_copy_works.fake_target_log_prob": {
  "data": {
   "lineno": 288
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest.test_end_to_end_works_correctly": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "tensorflow.compat.dimension_value",
    "tensorflow.function",
    "tensorflow.matmul",
    "tensorflow.reduce_mean",
    "tensorflow.stack",
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
    "tensorflow_probability.mcmc.TransformedTransitionKernel",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.transformed_kernel_test._maybe_seed",
    "tensorflow_probability.python.mcmc.transformed_kernel_test.tfb"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest.test_end_to_end_works_correctly.target_log_prob": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "numpy.linalg.cholesky",
    "tensorflow.linalg.triangular_solve",
    "tensorflow.newaxis",
    "tensorflow.reduce_sum",
    "tensorflow.squeeze",
    "tensorflow.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest.test_support_works_correctly_with_HMC": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "tensorflow.compat.dimension_value",
    "tensorflow.function",
    "tensorflow.math.squared_difference",
    "tensorflow.reduce_mean",
    "tensorflow_probability.mcmc.HamiltonianMonteCarlo",
    "tensorflow_probability.mcmc.TransformedTransitionKernel",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.transformed_kernel_test._maybe_seed",
    "tensorflow_probability.python.mcmc.transformed_kernel_test.tfb",
    "tensorflow_probability.python.mcmc.transformed_kernel_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest.test_support_works_correctly_with_MALA": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "tensorflow.compat.dimension_value",
    "tensorflow.function",
    "tensorflow.math.squared_difference",
    "tensorflow.reduce_mean",
    "tensorflow_probability.mcmc.MetropolisAdjustedLangevinAlgorithm",
    "tensorflow_probability.mcmc.TransformedTransitionKernel",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.transformed_kernel_test._maybe_seed",
    "tensorflow_probability.python.mcmc.transformed_kernel_test.tfb",
    "tensorflow_probability.python.mcmc.transformed_kernel_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.TransformedTransitionKernelTest.test_support_works_correctly_with_RWM": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "tensorflow.compat.dimension_value",
    "tensorflow.function",
    "tensorflow.math.squared_difference",
    "tensorflow.reduce_mean",
    "tensorflow_probability.mcmc.RandomWalkMetropolis",
    "tensorflow_probability.mcmc.TransformedTransitionKernel",
    "tensorflow_probability.mcmc.random_walk_normal_fn",
    "tensorflow_probability.mcmc.sample_chain",
    "tensorflow_probability.python.mcmc.transformed_kernel_test._maybe_seed",
    "tensorflow_probability.python.mcmc.transformed_kernel_test.tfb",
    "tensorflow_probability.python.mcmc.transformed_kernel_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test._maybe_seed": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow.executing_eagerly"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.tfb": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.tfd": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.mcmc.transformed_kernel_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.monte_carlo": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.python.util.all_util.remove_undocumented",
    "tensorflow_probability.python.monte_carlo._allowed_symbols"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.monte_carlo._allowed_symbols": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "tensorflow_probability.python.monte_carlo.expectation": {
  "data": {
   "shadows": "tensorflow_probability.python.monte_carlo.expectation.expectation"
  },
  "type": "import"
 },
 "tensorflow_probability.python.monte_carlo.expectation.__all__": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "tensorflow_probability.python.monte_carlo.expectation._get_samples": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.monte_carlo.expectation._sample_max": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "tensorflow.reduce_max"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.monte_carlo.expectation._sample_mean": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "tensorflow.reduce_mean"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.monte_carlo.expectation.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.monte_carlo.expectation.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.monte_carlo.expectation.expectation": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "ValueError",
    "callable",
    "f",
    "log_prob",
    "stop",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.exp",
    "tensorflow.reduce_mean",
    "tensorflow.stop_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.monte_carlo.expectation.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.monte_carlo.expectation.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test.ExpectationTest": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test.ExpectationTest.test_docstring_example_bernoulli": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "gradp",
    "gradq",
    "int",
    "print",
    "tensorflow.GradientTape",
    "tensorflow.constant",
    "tensorflow_probability.monte_carlo.expectation",
    "tensorflow_probability.python.monte_carlo.expectation_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test.ExpectationTest.test_docstring_example_normal": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "gradp",
    "gradq",
    "int",
    "tensorflow.GradientTape",
    "tensorflow.constant",
    "tensorflow_probability.monte_carlo.expectation",
    "tensorflow_probability.python.monte_carlo.expectation_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test.ExpectationTest.test_works_correctly": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "int",
    "numpy.bool",
    "numpy.isfinite",
    "numpy.ones_like",
    "tensorflow.GradientTape",
    "tensorflow.constant",
    "tensorflow_probability.monte_carlo.expectation",
    "tensorflow_probability.python.monte_carlo.expectation_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test.GetSamplesTest": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test.GetSamplesTest.test_raises_if_both_z_and_n_are_none": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.monte_carlo.expectation._get_samples",
    "tensorflow_probability.python.monte_carlo.expectation_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test.GetSamplesTest.test_raises_if_both_z_and_n_are_not_none": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.monte_carlo.expectation._get_samples",
    "tensorflow_probability.python.monte_carlo.expectation_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test.GetSamplesTest.test_returns_n_samples_if_n_provided": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "tensorflow_probability.python.monte_carlo.expectation._get_samples",
    "tensorflow_probability.python.monte_carlo.expectation_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test.GetSamplesTest.test_returns_z_if_z_provided": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "tensorflow_probability.python.monte_carlo.expectation._get_samples",
    "tensorflow_probability.python.monte_carlo.expectation_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test._get_samples": {
  "data": {
   "shadows": "tensorflow_probability.python.monte_carlo.expectation._get_samples"
  },
  "type": "import"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test.tfd": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.monte_carlo.expectation_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.monte_carlo.remove_undocumented": {
  "data": {
   "shadows": "tensorflow.python.util.all_util.remove_undocumented"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.python.util.all_util.remove_undocumented",
    "tensorflow_probability.python.optimizer._allowed_symbols"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.StochasticGradientLangevinDynamics": {
  "data": {
   "shadows": "tensorflow_probability.python.optimizer.sgld.StochasticGradientLangevinDynamics"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.VariationalSGD": {
  "data": {
   "shadows": "tensorflow_probability.python.optimizer.variational_sgd.VariationalSGD"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer._allowed_symbols": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "tensorflow_probability.python.optimizer.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability.python.optimizer.bfgs.collections"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.bfgs.BfgsOptimizerResults": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "tensorflow_probability.python.optimizer.bfgs._batch_transpose": {
  "data": {
   "lineno": 495,
   "symbols_in_volume": [
    "tensorflow.concat",
    "tensorflow.range",
    "tensorflow.transpose",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_rank"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs._bfgs_inv_hessian_update": {
  "data": {
   "lineno": 356,
   "symbols_in_volume": [
    "_expand_scalar",
    "_mul_right",
    "_tensor_product",
    "tensorflow.control_dependencies",
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs._bfgs_inv_hessian_update._expand_scalar": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": [
    "tensorflow.newaxis"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs._get_search_direction": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": [
    "_mul_right"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs._inv_hessian_control_inputs": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "_batch_transpose",
    "tensorflow.Assert",
    "tensorflow.equal",
    "tensorflow.linalg.cholesky",
    "tensorflow.math.is_finite",
    "tensorflow.reduce_all",
    "tensorflow_probability.python.optimizer.bfgs_utils.norm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs._mul_right": {
  "data": {
   "lineno": 437,
   "symbols_in_volume": [
    "tensorflow.expand_dims",
    "tensorflow.matmul",
    "tensorflow.squeeze"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs._tensor_product": {
  "data": {
   "lineno": 477,
   "symbols_in_volume": [
    "tensorflow.expand_dims",
    "tensorflow.matmul"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs._update_inv_hessian": {
  "data": {
   "lineno": 328,
   "symbols_in_volume": [
    "tensorflow.equal",
    "tensorflow.reduce_any",
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.internal.prefer_static.cond"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs._update_inv_hessian._do_update_inv_hessian": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": [
    "_bfgs_inv_hessian_update",
    "tensorflow.compat.v1.where",
    "tensorflow_probability.python.optimizer.bfgs_utils.update_fields"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs.bfgs_utils": {
  "data": {
   "shadows": "tensorflow_probability.python.optimizer.bfgs_utils"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs.minimize": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "_inv_hessian_control_inputs",
    "tensorflow.broadcast_to",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.eye",
    "tensorflow.while_loop",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_shape",
    "tensorflow_probability.python.optimizer.bfgs.BfgsOptimizerResults",
    "tensorflow_probability.python.optimizer.bfgs_utils.converged_all",
    "tensorflow_probability.python.optimizer.bfgs_utils.get_initial_state_args"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs.minimize._body": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "_get_search_direction",
    "_update_inv_hessian",
    "stopping_condition",
    "tensorflow.compat.v1.where",
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.optimizer.bfgs_utils.line_search_step",
    "tensorflow_probability.python.optimizer.bfgs_utils.update_fields"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs.minimize._cond": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "stopping_condition",
    "tensorflow.logical_not"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs.prefer_static": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.prefer_static"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs_minimize": {
  "data": {
   "shadows": "tensorflow_probability.python.optimizer.bfgs.minimize"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_asymmetric_inverse_hessian_spec": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow.float32",
    "tensorflow_probability.optimizer.bfgs_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_asymmetric_inverse_hessian_spec.quadratic": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.optimizer.bfgs_test._make_val_and_grad_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_bad_inverse_hessian_spec": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow.float32",
    "tensorflow_probability.optimizer.bfgs_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_bad_inverse_hessian_spec.quadratic": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.optimizer.bfgs_test._make_val_and_grad_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_data_fitting": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.random.choice",
    "numpy.random.geometric",
    "numpy.random.seed",
    "numpy.sum",
    "tensorflow.convert_to_tensor",
    "tensorflow.expand_dims",
    "tensorflow.float64",
    "tensorflow.ones",
    "tensorflow_probability.optimizer.bfgs_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_data_fitting.neg_log_likelihood": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": [
    "tensorflow.expand_dims",
    "tensorflow.matmul",
    "tensorflow.reduce_logsumexp",
    "tensorflow.reduce_sum",
    "tensorflow.squeeze",
    "tensorflow.stack",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.optimizer.bfgs_test._make_val_and_grad_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_determinism": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": [
    "get_results",
    "numpy.random.rand"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_determinism.get_results": {
  "data": {
   "lineno": 386,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.optimizer.bfgs_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_determinism.rastrigin": {
  "data": {
   "lineno": 361,
   "symbols_in_volume": [
    "numpy.pi",
    "tensorflow.cos",
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.optimizer.bfgs_test._make_val_and_grad_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_dynamic_shapes": {
  "data": {
   "lineno": 404,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.compat.v1.placeholder",
    "tensorflow.executing_eagerly",
    "tensorflow.float32",
    "tensorflow_probability.optimizer.bfgs_minimize",
    "tensorflow_probability.python.optimizer.bfgs_test._norm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_dynamic_shapes.quadratic": {
  "data": {
   "lineno": 410,
   "symbols_in_volume": [
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.optimizer.bfgs_test._make_val_and_grad_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_himmelblau": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "numpy.array",
    "print",
    "tensorflow.constant",
    "tensorflow_probability.optimizer.bfgs_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_himmelblau.himmelblau": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "tensorflow_probability.python.optimizer.bfgs_test._make_val_and_grad_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_himmelblau_batch_all": {
  "data": {
   "lineno": 261,
   "symbols_in_volume": [
    "numpy.all",
    "numpy.any",
    "numpy.array",
    "tensorflow.constant",
    "tensorflow_probability.optimizer.bfgs_minimize",
    "tensorflow_probability.optimizer.converged_all",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_himmelblau_batch_all.himmelblau": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "tensorflow_probability.python.optimizer.bfgs_test._make_val_and_grad_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_himmelblau_batch_any": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": [
    "numpy.all",
    "numpy.any",
    "numpy.array",
    "tensorflow.constant",
    "tensorflow_probability.optimizer.bfgs_minimize",
    "tensorflow_probability.optimizer.converged_any",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_himmelblau_batch_any.himmelblau": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": [
    "tensorflow_probability.python.optimizer.bfgs_test._make_val_and_grad_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_inverse_hessian_spec": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float32",
    "tensorflow.constant",
    "tensorflow_probability.optimizer.bfgs_minimize",
    "tensorflow_probability.python.optimizer.bfgs_test._norm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_inverse_hessian_spec.quadratic": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.optimizer.bfgs_test._make_val_and_grad_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_quadratic_bowl_10d": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.random.randn",
    "numpy.random.seed",
    "tensorflow.ones_like",
    "tensorflow_probability.optimizer.bfgs_minimize",
    "tensorflow_probability.python.optimizer.bfgs_test._norm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_quadratic_bowl_10d.quadratic": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.optimizer.bfgs_test._make_val_and_grad_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_quadratic_bowl_2d": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.constant",
    "tensorflow_probability.optimizer.bfgs_minimize",
    "tensorflow_probability.python.optimizer.bfgs_test._norm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_quadratic_bowl_2d.quadratic": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.optimizer.bfgs_test._make_val_and_grad_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_quadratic_with_skew": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "numpy.diag",
    "numpy.dot",
    "numpy.exp",
    "numpy.random.randn",
    "numpy.random.seed",
    "numpy.transpose",
    "scipy.stats.special_ortho_group.rvs",
    "tensorflow.ones_like",
    "tensorflow_probability.optimizer.bfgs_minimize",
    "tensorflow_probability.python.optimizer.bfgs_test._norm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_quadratic_with_skew.quadratic": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "tensorflow.reduce_sum",
    "tensorflow.tensordot",
    "tensorflow_probability.python.optimizer.bfgs_test._make_val_and_grad_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_quadratic_with_strong_skew": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.diag",
    "numpy.dot",
    "numpy.random.randn",
    "numpy.random.seed",
    "numpy.transpose",
    "print",
    "scipy.stats.special_ortho_group.rvs",
    "tensorflow.ones_like",
    "tensorflow_probability.optimizer.bfgs_minimize",
    "tensorflow_probability.python.optimizer.bfgs_test._norm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_quadratic_with_strong_skew.quadratic": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "tensorflow.reduce_sum",
    "tensorflow.tensordot",
    "tensorflow_probability.python.optimizer.bfgs_test._make_val_and_grad_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_rosenbrock_2d": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.constant",
    "tensorflow_probability.optimizer.bfgs_minimize",
    "tensorflow_probability.python.optimizer.bfgs_test._norm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.BfgsTest.test_rosenbrock_2d.rosenbrock": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "tensorflow.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test._make_val_and_grad_fn": {
  "data": {
   "lineno": 31
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test._make_val_and_grad_fn.val_and_grad": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.optimizer.bfgs_test.functools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test._norm": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "numpy.inf",
    "numpy.linalg.norm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.special_ortho_group": {
  "data": {
   "shadows": "scipy.stats.special_ortho_group"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability.python.optimizer.bfgs_utils.collections"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils.ValueAndGradient": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils._broadcast": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": [
    "tensorflow.broadcast_to",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils._check_convergence": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": [
    "tensorflow_probability.python.optimizer.bfgs_utils.norm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils._restrict_along_direction": {
  "data": {
   "lineno": 201
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils._restrict_along_direction._restricted_func": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "_broadcast",
    "tensorflow.expand_dims",
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.optimizer.bfgs_utils.ValueAndGradient",
    "value_and_gradients_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils._update_position": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": [
    "_check_convergence",
    "tensorflow.math.is_finite",
    "tensorflow.reduce_all",
    "tensorflow_probability.python.optimizer.bfgs_utils.update_fields"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils.converged_all": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "tensorflow.reduce_all"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils.converged_any": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "tensorflow.reduce_all",
    "tensorflow.reduce_any"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils.get_initial_state_args": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "dict",
    "norm",
    "tensorflow.control_dependencies",
    "tensorflow.convert_to_tensor",
    "tensorflow.zeros_like",
    "value_and_gradients_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils.line_search_step": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "_broadcast",
    "_restrict_along_direction",
    "stopping_condition",
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.internal.prefer_static.cond",
    "tensorflow_probability.python.optimizer.bfgs_utils.ValueAndGradient",
    "tensorflow_probability.python.optimizer.linesearch.hager_zhang",
    "update_fields",
    "value_and_gradients_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils.line_search_step._do_update_position": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "_update_position",
    "tensorflow.compat.v1.where",
    "tensorflow.expand_dims",
    "tensorflow.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils.linesearch": {
  "data": {
   "shadows": "tensorflow_probability.python.optimizer.linesearch"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils.norm": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": [
    "ValueError",
    "numpy.inf",
    "tensorflow.math.abs",
    "tensorflow.norm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils.prefer_static": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.prefer_static"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.bfgs_utils.update_fields": {
  "data": {
   "lineno": 182
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.converged_all": {
  "data": {
   "shadows": "tensorflow_probability.python.optimizer.bfgs_utils.converged_all"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.converged_any": {
  "data": {
   "shadows": "tensorflow_probability.python.optimizer.bfgs_utils.converged_any"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.differential_evolution": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability.python.optimizer.differential_evolution.collections"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.differential_evolution.DifferentialEvolutionOptimizerResults": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "tensorflow_probability.python.optimizer.differential_evolution._DifferentialEvolutionOptimizerResults"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.differential_evolution._DifferentialEvolutionOptimizerResults": {
  "data": {
   "lineno": 57
  },
  "type": "constant"
 },
 "tensorflow_probability.python.optimizer.differential_evolution._MinimizeLoopVars": {
  "data": {
   "lineno": 110
  },
  "type": "constant"
 },
 "tensorflow_probability.python.optimizer.differential_evolution._binary_crossover": {
  "data": {
   "lineno": 607,
   "symbols_in_volume": [
    "enumerate",
    "seed_stream",
    "tensorflow.bool",
    "tensorflow.cast",
    "tensorflow.compat.v1.where",
    "tensorflow.float64",
    "tensorflow.int32",
    "tensorflow.math.equal",
    "tensorflow.one_hot",
    "tensorflow.random.uniform",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow.size",
    "tensorflow_probability.python.distributions.Categorical",
    "tensorflow_probability.python.distributions.SeedStream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution._check_convergence": {
  "data": {
   "lineno": 521,
   "symbols_in_volume": [
    "part_converged",
    "tensorflow.math.abs",
    "tensorflow.math.reduce_all",
    "tensorflow.math.reduce_max",
    "tensorflow.math.reduce_min"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution._check_convergence.part_converged": {
  "data": {
   "lineno": 547,
   "symbols_in_volume": [
    "tensorflow.math.abs",
    "tensorflow.math.reduce_max"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution._check_failure": {
  "data": {
   "lineno": 507,
   "symbols_in_volume": [
    "tensorflow.math.is_inf",
    "tensorflow.math.reduce_all"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution._ensure_list": {
  "data": {
   "lineno": 771,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution._find_best_in_population": {
  "data": {
   "lineno": 512,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.math.equal",
    "tensorflow.math.reduce_min"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution._get_initial_args": {
  "data": {
   "lineno": 461,
   "symbols_in_volume": [
    "_ensure_list",
    "_get_starting_population",
    "objective_function",
    "tensorflow.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution._get_mixing_indices": {
  "data": {
   "lineno": 712,
   "symbols_in_volume": [
    "seed_stream",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.compat.v1.where",
    "tensorflow.convert_to_tensor",
    "tensorflow.expand_dims",
    "tensorflow.math.maximum",
    "tensorflow.math.minimum",
    "tensorflow.random.uniform",
    "tensorflow.range",
    "tensorflow.stack",
    "tensorflow_probability.python.distributions.SeedStream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution._get_mutants": {
  "data": {
   "lineno": 674,
   "symbols_in_volume": [
    "_mutant_part",
    "tensorflow.reshape",
    "tensorflow.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution._get_mutants._mutant_part": {
  "data": {
   "lineno": 703,
   "symbols_in_volume": [
    "tensorflow.gather",
    "tensorflow.math.reduce_sum",
    "tensorflow.reshape",
    "tensorflow.transpose"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution._get_starting_population": {
  "data": {
   "lineno": 556,
   "symbols_in_volume": [
    "seed_stream",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.random.normal",
    "tensorflow.shape",
    "tensorflow_probability.python.distributions.SeedStream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.differential_evolution.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.differential_evolution.distributions": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.differential_evolution.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.differential_evolution.minimize": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "ValueError",
    "_find_best_in_population",
    "_get_initial_args",
    "objective_function",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.while_loop",
    "tensorflow_probability.python.optimizer.differential_evolution.DifferentialEvolutionOptimizerResults",
    "tensorflow_probability.python.optimizer.differential_evolution._MinimizeLoopVars"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution.minimize.evolve_body": {
  "data": {
   "lineno": 402,
   "symbols_in_volume": [
    "_check_convergence",
    "_check_failure",
    "objective_function",
    "tensorflow_probability.python.optimizer.differential_evolution._MinimizeLoopVars",
    "tensorflow_probability.python.optimizer.differential_evolution.one_step"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution.minimize.evolve_cond": {
  "data": {
   "lineno": 425
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.differential_evolution.one_step": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "_binary_crossover",
    "_ensure_list",
    "_get_mixing_indices",
    "_get_mutants",
    "numpy.inf",
    "objective_function",
    "seed_stream",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.compat.v1.where",
    "tensorflow.math.is_nan",
    "tensorflow.shape",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.distributions.SeedStream",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.differential_evolution.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_minimize": {
  "data": {
   "shadows": "tensorflow_probability.python.optimizer.differential_evolution.minimize"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_one_step": {
  "data": {
   "shadows": "tensorflow_probability.python.optimizer.differential_evolution.one_step"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_abs_function": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.constant",
    "tensorflow.float64",
    "tensorflow_probability.optimizer.differential_evolution_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_abs_function.abs_func": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "tensorflow.abs",
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_docstring_example": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": [
    "numpy.pi",
    "tensorflow.constant",
    "tensorflow.float64",
    "tensorflow_probability.optimizer.differential_evolution_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_docstring_example.easom": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "numpy.pi",
    "tensorflow.cos",
    "tensorflow.exp",
    "tensorflow.reduce_prod",
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_quadratic_bowl_10d": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.random.randn",
    "numpy.random.seed",
    "tensorflow.ones_like",
    "tensorflow_probability.optimizer.differential_evolution_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_quadratic_bowl_10d.quadratic": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_quadratic_bowl_2d": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.constant",
    "tensorflow_probability.optimizer.differential_evolution_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_quadratic_bowl_2d.quadratic": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_quadratic_bowl_with_initial_simplex": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.random.uniform",
    "tensorflow_probability.optimizer.differential_evolution_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_quadratic_bowl_with_initial_simplex.quadratic": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_quadratic_with_skew": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "numpy.diag",
    "numpy.dot",
    "numpy.exp",
    "numpy.random.randn",
    "numpy.random.seed",
    "numpy.transpose",
    "scipy.stats.special_ortho_group.rvs",
    "tensorflow.ones_like",
    "tensorflow_probability.optimizer.differential_evolution_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_quadratic_with_skew.objective_func": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "tensorflow.map_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_quadratic_with_skew.quadratic_single": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "tensorflow.reduce_sum",
    "tensorflow.tensordot"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_quadratic_with_strong_skew": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.diag",
    "numpy.dot",
    "numpy.random.randn",
    "numpy.random.seed",
    "numpy.transpose",
    "scipy.stats.special_ortho_group.rvs",
    "tensorflow.ones_like",
    "tensorflow_probability.optimizer.differential_evolution_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_quadratic_with_strong_skew.objective_func": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "tensorflow.map_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_quadratic_with_strong_skew.quadratic": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "tensorflow.reduce_sum",
    "tensorflow.tensordot"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_rosenbrock_2d": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.optimizer.differential_evolution_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_rosenbrock_2d.rosenbrock": {
  "data": {
   "lineno": 179
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_sqrt_quadratic_function": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.constant",
    "tensorflow_probability.optimizer.differential_evolution_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.DifferentialEvolutionTest.test_sqrt_quadratic_function.sqrt_quad": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "tensorflow.reduce_sum",
    "tensorflow.sqrt"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.special_ortho_group": {
  "data": {
   "shadows": "scipy.stats.special_ortho_group"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.differential_evolution_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.lbfgs": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability.python.optimizer.lbfgs.collections"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.lbfgs.LBfgsOptimizerResults": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "tensorflow_probability.python.optimizer.lbfgs._get_initial_state": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": [
    "_make_empty_queue_for",
    "tensorflow_probability.python.optimizer.bfgs_utils.get_initial_state_args",
    "tensorflow_probability.python.optimizer.lbfgs.LBfgsOptimizerResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs._get_search_direction": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": [
    "tensorflow.equal",
    "tensorflow.minimum",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_shape",
    "tensorflow_probability.python.internal.prefer_static.cond"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs._get_search_direction._two_loop_algorithm": {
  "data": {
   "lineno": 318,
   "symbols_in_volume": [
    "tensorflow.expand_dims",
    "tensorflow.reduce_sum",
    "tensorflow.scan",
    "tensorflow.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs._get_search_direction._two_loop_algorithm.first_loop": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": [
    "tensorflow.expand_dims",
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs._get_search_direction._two_loop_algorithm.second_loop": {
  "data": {
   "lineno": 350,
   "symbols_in_volume": [
    "tensorflow.expand_dims",
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs._make_empty_queue_for": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": [
    "tensorflow.concat",
    "tensorflow.zeros",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs._queue_push": {
  "data": {
   "lineno": 403,
   "symbols_in_volume": [
    "tensorflow.broadcast_to",
    "tensorflow.compat.v1.where",
    "tensorflow.concat",
    "tensorflow.newaxis",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.lbfgs.bfgs_utils": {
  "data": {
   "shadows": "tensorflow_probability.python.optimizer.bfgs_utils"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.lbfgs.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.lbfgs.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.lbfgs.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.lbfgs.minimize": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "NotImplementedError",
    "_get_initial_state",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.while_loop",
    "tensorflow_probability.python.optimizer.bfgs_utils.converged_all"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs.minimize._body": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "_get_search_direction",
    "_queue_push",
    "stopping_condition",
    "tensorflow_probability.python.optimizer.bfgs_utils.line_search_step",
    "tensorflow_probability.python.optimizer.bfgs_utils.update_fields"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs.minimize._cond": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "stopping_condition",
    "tensorflow.logical_not"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs.prefer_static": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.prefer_static"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.lbfgs.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.lbfgs.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.lbfgs_minimize": {
  "data": {
   "shadows": "tensorflow_probability.python.optimizer.lbfgs.minimize"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_data_fitting": {
  "data": {
   "lineno": 271,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.random.choice",
    "numpy.random.geometric",
    "numpy.random.seed",
    "numpy.sum",
    "tensorflow.convert_to_tensor",
    "tensorflow.expand_dims",
    "tensorflow.float64",
    "tensorflow.ones",
    "tensorflow_probability.optimizer.lbfgs_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_data_fitting.neg_log_likelihood": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "tensorflow.expand_dims",
    "tensorflow.matmul",
    "tensorflow.reduce_logsumexp",
    "tensorflow.reduce_sum",
    "tensorflow.squeeze",
    "tensorflow.stack",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.optimizer.lbfgs_test._make_val_and_grad_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_determinism": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": [
    "get_results",
    "numpy.random.rand"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_determinism.get_results": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.optimizer.lbfgs_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_determinism.rastrigin": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": [
    "numpy.pi",
    "tensorflow.cos",
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.optimizer.lbfgs_test._make_val_and_grad_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_dynamic_shapes": {
  "data": {
   "lineno": 353,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.ones",
    "tensorflow.compat.v1.placeholder",
    "tensorflow.executing_eagerly",
    "tensorflow.float32",
    "tensorflow_probability.optimizer.lbfgs_minimize",
    "tensorflow_probability.python.optimizer.lbfgs_test._norm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_dynamic_shapes.quadratic": {
  "data": {
   "lineno": 360,
   "symbols_in_volume": [
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.optimizer.lbfgs_test._make_val_and_grad_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_high_dims_quadratic_bowl_trivial": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "numpy.ones",
    "numpy.zeros",
    "tensorflow_probability.optimizer.lbfgs_minimize",
    "tensorflow_probability.python.optimizer.lbfgs_test._norm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_high_dims_quadratic_bowl_trivial.quadratic": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.optimizer.lbfgs_test._make_val_and_grad_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_himmelblau": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.constant",
    "tensorflow_probability.optimizer.lbfgs_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_himmelblau.himmelblau": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": [
    "tensorflow_probability.python.optimizer.lbfgs_test._make_val_and_grad_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_himmelblau_batch_all": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "numpy.all",
    "numpy.any",
    "numpy.array",
    "tensorflow.constant",
    "tensorflow_probability.optimizer.converged_all",
    "tensorflow_probability.optimizer.lbfgs_minimize",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_himmelblau_batch_all.himmelblau": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "tensorflow_probability.python.optimizer.lbfgs_test._make_val_and_grad_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_himmelblau_batch_any": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": [
    "numpy.all",
    "numpy.any",
    "numpy.array",
    "tensorflow.constant",
    "tensorflow_probability.optimizer.converged_any",
    "tensorflow_probability.optimizer.lbfgs_minimize",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_himmelblau_batch_any.himmelblau": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": [
    "tensorflow_probability.python.optimizer.lbfgs_test._make_val_and_grad_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_quadratic_bowl_2d": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.constant",
    "tensorflow_probability.optimizer.lbfgs_minimize",
    "tensorflow_probability.python.optimizer.lbfgs_test._norm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_quadratic_bowl_2d.quadratic": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.optimizer.lbfgs_test._make_val_and_grad_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_quadratic_bowl_40d": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.random.randn",
    "numpy.random.seed",
    "tensorflow.ones_like",
    "tensorflow_probability.optimizer.lbfgs_minimize",
    "tensorflow_probability.python.optimizer.lbfgs_test._norm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_quadratic_bowl_40d.quadratic": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.optimizer.lbfgs_test._make_val_and_grad_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_quadratic_with_skew": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "numpy.diag",
    "numpy.dot",
    "numpy.exp",
    "numpy.random.randn",
    "numpy.random.seed",
    "numpy.transpose",
    "scipy.stats.special_ortho_group.rvs",
    "tensorflow.ones_like",
    "tensorflow_probability.optimizer.lbfgs_minimize",
    "tensorflow_probability.python.optimizer.lbfgs_test._norm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_quadratic_with_skew.quadratic": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "tensorflow.reduce_sum",
    "tensorflow.tensordot",
    "tensorflow_probability.python.optimizer.lbfgs_test._make_val_and_grad_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_quadratic_with_strong_skew": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.diag",
    "numpy.dot",
    "numpy.random.randn",
    "numpy.random.seed",
    "numpy.transpose",
    "scipy.stats.special_ortho_group.rvs",
    "tensorflow.ones_like",
    "tensorflow_probability.optimizer.lbfgs_minimize",
    "tensorflow_probability.python.optimizer.lbfgs_test._norm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_quadratic_with_strong_skew.quadratic": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "tensorflow.reduce_sum",
    "tensorflow.tensordot",
    "tensorflow_probability.python.optimizer.lbfgs_test._make_val_and_grad_fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_rosenbrock_2d": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.constant",
    "tensorflow_probability.optimizer.lbfgs_minimize",
    "tensorflow_probability.python.optimizer.lbfgs_test._norm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.LBfgsTest.test_rosenbrock_2d.rosenbrock": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "tensorflow.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test._make_val_and_grad_fn": {
  "data": {
   "lineno": 30
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test._make_val_and_grad_fn.val_and_grad": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.python.optimizer.lbfgs_test.functools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test._norm": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "numpy.inf",
    "numpy.linalg.norm"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.special_ortho_group": {
  "data": {
   "shadows": "scipy.stats.special_ortho_group"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.lbfgs_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.python.util.all_util.remove_undocumented",
    "tensorflow_probability.python.optimizer.linesearch._allowed_symbols"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.linesearch._allowed_symbols": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "tensorflow_probability.python.optimizer.linesearch.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang": {
  "data": {
   "shadows": "tensorflow_probability.python.optimizer.linesearch.hager_zhang.hager_zhang"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang.HagerZhangLineSearchResult": {
  "data": {
   "lineno": 52
  },
  "type": "constant"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._LineSearchInnerResult": {
  "data": {
   "lineno": 324
  },
  "type": "constant"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang.__all__": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._bracket_and_search": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": [
    "_line_search_after_bracketing",
    "_very_close",
    "tensorflow.greater_equal",
    "tensorflow_probability.python.optimizer.linesearch.hager_zhang.HagerZhangLineSearchResult",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.bracket",
    "value_and_gradients_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._fix_step_size": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": [
    "numpy.ceil",
    "numpy.log2",
    "tensorflow.while_loop",
    "tensorflow_probability.python.optimizer.linesearch.hager_zhang._machine_eps",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.is_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._fix_step_size._body": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.is_finite",
    "value_and_gradients_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._fix_step_size._cond": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": [
    "tensorflow.reduce_any"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._line_search_after_bracketing": {
  "data": {
   "lineno": 421,
   "symbols_in_volume": [
    "tensorflow.while_loop"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._line_search_after_bracketing._loop_body": {
  "data": {
   "lineno": 489,
   "symbols_in_volume": [
    "_very_close",
    "tensorflow.reduce_any",
    "tensorflow_probability.python.internal.prefer_static.cond",
    "tensorflow_probability.python.optimizer.linesearch.hager_zhang.HagerZhangLineSearchResult",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.secant2",
    "value_and_gradients_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._line_search_after_bracketing._loop_body._do_check_shrinkage": {
  "data": {
   "lineno": 504,
   "symbols_in_volume": [
    "_very_close",
    "tensorflow.reduce_any",
    "tensorflow_probability.python.internal.prefer_static.cond"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._line_search_after_bracketing._loop_body._do_check_shrinkage._apply_inner_bisect": {
  "data": {
   "lineno": 520,
   "symbols_in_volume": [
    "_line_search_inner_bisection",
    "value_and_gradients_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._line_search_after_bracketing._loop_cond": {
  "data": {
   "lineno": 483,
   "symbols_in_volume": [
    "tensorflow.reduce_any"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._line_search_inner_bisection": {
  "data": {
   "lineno": 546,
   "symbols_in_volume": [
    "tensorflow.reduce_any",
    "tensorflow_probability.python.internal.prefer_static.cond",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.is_finite",
    "value_and_gradients_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._line_search_inner_bisection._apply_update": {
  "data": {
   "lineno": 562,
   "symbols_in_volume": [
    "tensorflow_probability.python.optimizer.linesearch.hager_zhang.HagerZhangLineSearchResult",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.update",
    "value_and_gradients_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._machine_eps": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "isinstance",
    "numpy.finfo",
    "tensorflow.DType"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._prepare_args": {
  "data": {
   "lineno": 580,
   "symbols_in_volume": [
    "tensorflow.abs",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.zeros_like",
    "value_and_gradients_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._print": {
  "data": {
   "lineno": 668,
   "symbols_in_volume": [
    "getattr",
    "hasattr",
    "isinstance",
    "list",
    "tensorflow.compat.v1.Print",
    "tensorflow_probability.python.optimizer.linesearch.hager_zhang._to_str",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._to_str": {
  "data": {
   "lineno": 658,
   "symbols_in_volume": [
    "tensorflow.bool",
    "tensorflow.compat.v1.where",
    "tensorflow.convert_to_tensor",
    "tensorflow.fill"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang._very_close": {
  "data": {
   "lineno": 654,
   "symbols_in_volume": [
    "tensorflow.math.nextafter"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang.hager_zhang": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "_fix_step_size",
    "_prepare_args",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.math.is_finite",
    "tensorflow.reduce_any",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.internal.prefer_static.cond",
    "tensorflow_probability.python.optimizer.linesearch.hager_zhang.HagerZhangLineSearchResult",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.is_finite",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.val_where"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang.hager_zhang._apply_bracket_and_search": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "_bracket_and_search"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang.hzl": {
  "data": {
   "shadows": "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang.prefer_static": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.prefer_static"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.collections"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest._test_eval_count_eager": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "fdf",
    "fdf.num_calls",
    "get_val_and_grad_fn",
    "tensorflow.constant",
    "tensorflow_probability.optimizer.linesearch.hager_zhang"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest._test_eval_count_eager.get_val_and_grad_fn": {
  "data": {
   "lineno": 186
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest._test_eval_count_eager.get_val_and_grad_fn._val_and_grad_fn": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.ValueAndGradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest._test_eval_count_graph": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "fdf",
    "get_fn",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.constant",
    "tensorflow_probability.optimizer.linesearch.hager_zhang"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest._test_eval_count_graph.get_fn": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": [
    "tensorflow.compat.v2.Variable"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest._test_eval_count_graph.get_fn._fdf": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "tensorflow.compat.v1.assign_add",
    "tensorflow.control_dependencies",
    "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.ValueAndGradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_approx_wolfe": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "dtype",
    "fdf",
    "numpy.float64",
    "tensorflow.constant",
    "tensorflow_probability.optimizer.linesearch.hager_zhang",
    "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test._is_approx_wolfe",
    "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test._is_exact_wolfe"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_approx_wolfe.fdf": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "dtype",
    "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.ValueAndGradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_batched_multiple_minima": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "all",
    "fdf",
    "numpy.all",
    "numpy.array",
    "sum",
    "tensorflow_probability.optimizer.linesearch.hager_zhang"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_batched_multiple_minima.fdf": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.ValueAndGradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_consistency": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "rastrigin",
    "tensorflow.constant",
    "tensorflow.float64",
    "tensorflow_probability.optimizer.linesearch.hager_zhang"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_consistency.rastrigin": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": [
    "cos",
    "numpy.cos",
    "numpy.pi",
    "numpy.sin",
    "sin",
    "tensorflow.cos",
    "tensorflow.sin",
    "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.ValueAndGradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_determinism": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "fdf",
    "get_results",
    "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.ValueAndGradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_determinism.get_results": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "fdf",
    "tensorflow.constant",
    "tensorflow_probability.optimizer.linesearch.hager_zhang"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_eval_count": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "tensorflow.executing_eagerly"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_multiple_minima": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "fdf",
    "tensorflow.constant",
    "tensorflow_probability.optimizer.linesearch.hager_zhang",
    "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test._is_exact_wolfe"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_multiple_minima.fdf": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.ValueAndGradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_quadratic": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "fdf",
    "tensorflow.constant",
    "tensorflow_probability.optimizer.linesearch.hager_zhang",
    "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.ValueAndGradient",
    "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test._is_exact_wolfe"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_rosenbrock": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "fdf",
    "tensorflow.constant",
    "tensorflow_probability.optimizer.linesearch.hager_zhang"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_rosenbrock.fdf": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "rosenbrock",
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.ValueAndGradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.HagerZhangTest.test_rosenbrock.rosenbrock": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "tensorflow.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.ValueAndGradient": {
  "data": {
   "lineno": 42
  },
  "type": "constant"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test._is_approx_wolfe": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "numpy.abs"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test._is_exact_wolfe": {
  "data": {
   "lineno": 29
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.hager_zhang_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.collections"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._IntermediateResult": {
  "data": {
   "lineno": 289
  },
  "type": "constant"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._Secant2Result": {
  "data": {
   "lineno": 50
  },
  "type": "constant"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._bisect": {
  "data": {
   "lineno": 597,
   "symbols_in_volume": [
    "tensorflow.while_loop"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._bisect._loop_body": {
  "data": {
   "lineno": 603,
   "symbols_in_volume": [
    "is_finite",
    "tensorflow.equal",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._IntermediateResult",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.val_where",
    "value_and_gradients_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._bisect._loop_cond": {
  "data": {
   "lineno": 599,
   "symbols_in_volume": [
    "tensorflow.reduce_all"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._satisfies_wolfe": {
  "data": {
   "lineno": 664
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._secant": {
  "data": {
   "lineno": 731
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._secant2_inner": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "_secant",
    "tensorflow.cast",
    "tensorflow.compat.v1.where",
    "tensorflow.equal",
    "tensorflow.reduce_any",
    "tensorflow_probability.python.internal.prefer_static.cond",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._Secant2Result",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.val_where",
    "update",
    "value_and_gradients_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._secant2_inner._apply_inner_update": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "_secant2_inner_update",
    "tensorflow_probability.python.internal.prefer_static.cond",
    "value_and_gradients_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._secant2_inner_update": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": [
    "_satisfies_wolfe",
    "is_finite",
    "tensorflow.reduce_any",
    "tensorflow_probability.python.internal.prefer_static.cond",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.val_where"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._secant2_inner_update._apply_update": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": [
    "tensorflow.zeros_like",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._Secant2Result",
    "update",
    "value_and_gradients_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._secant2_inner_update._default": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": [
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._Secant2Result"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.bisect": {
  "data": {
   "lineno": 546,
   "symbols_in_volume": [
    "_bisect",
    "is_finite",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._IntermediateResult",
    "value_and_gradients_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.bracket": {
  "data": {
   "lineno": 424,
   "symbols_in_volume": [
    "_bisect",
    "tensorflow.while_loop",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._IntermediateResult",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.val_where",
    "value_and_gradients_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.bracket._loop_body": {
  "data": {
   "lineno": 511,
   "symbols_in_volume": [
    "is_finite",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._IntermediateResult",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.val_where",
    "value_and_gradients_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.bracket._loop_cond": {
  "data": {
   "lineno": 507,
   "symbols_in_volume": [
    "tensorflow.reduce_all"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.is_finite": {
  "data": {
   "lineno": 644,
   "symbols_in_volume": [
    "tensorflow.math.is_finite"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.prefer_static": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.prefer_static"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.secant2": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "_satisfies_wolfe",
    "_secant",
    "is_finite",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.reduce_any",
    "tensorflow_probability.python.internal.prefer_static.cond",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._Secant2Result",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.val_where",
    "value_and_gradients_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.secant2._apply_secant2_inner": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "_secant2_inner",
    "value_and_gradients_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.update": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": [
    "_bisect",
    "tensorflow.convert_to_tensor",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib._IntermediateResult",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.val_where",
    "value_and_gradients_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.val_where": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "Exception",
    "TypeError",
    "cls",
    "isinstance",
    "tensorflow.Tensor",
    "tensorflow.compat.v1.where",
    "tuple",
    "type",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.collections"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.HagerZhangLibTest": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.HagerZhangLibTest.test_bisect_batching": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": [
    "fun",
    "numpy.all",
    "numpy.array",
    "tensorflow.abs",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.bisect",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.test_function_x_y_dy"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.HagerZhangLibTest.test_bisect_simple": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "fun",
    "numpy.array",
    "tensorflow.abs",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.bisect",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.test_function_x_y_dy"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.HagerZhangLibTest.test_bracket_batching": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "fun",
    "numpy.all",
    "numpy.array",
    "tensorflow.abs",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.bracket",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test._interval",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.test_function_x_y_dy"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.HagerZhangLibTest.test_bracket_simple": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "fun",
    "numpy.array",
    "tensorflow.abs",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.bracket",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test._interval",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.test_function_x_y_dy"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.HagerZhangLibTest.test_secant2_batching_vs_mapping": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "eval_secant2",
    "numpy.array",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.test_function_x_y_dy"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.HagerZhangLibTest.test_secant2_batching_vs_mapping.eval_secant2": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "fun",
    "tensorflow.abs",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.secant2",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test._interval"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.HagerZhangLibTest.test_update_batching": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "fun",
    "numpy.all",
    "numpy.array",
    "tensorflow.abs",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.update",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.test_function_x_y_dy"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.HagerZhangLibTest.test_update_batching_vs_mapping": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": [
    "eval_update",
    "numpy.array",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.test_function_x_y_dy"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.HagerZhangLibTest.test_update_batching_vs_mapping.eval_update": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "fun",
    "tensorflow.abs",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.update"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.HagerZhangLibTest.test_update_simple": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "fun",
    "numpy.array",
    "tensorflow.abs",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib.update",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.test_function_x_y_dy"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.LineSearchInterval": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.ValueAndGradient": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test._interval": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "bool",
    "tensorflow.constant",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.LineSearchInterval"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.hzl": {
  "data": {
   "shadows": "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.test_function_x_y": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "len",
    "numpy.polyfit",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.test_function_x_y.f": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "tensorflow.convert_to_tensor",
    "tensorflow.expand_dims",
    "tensorflow.float32",
    "tensorflow.math.polyval",
    "tensorflow.squeeze",
    "tensorflow.tile",
    "tensorflow_probability.python.math.gradient.value_and_gradient",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.ValueAndGradient",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.test_function_x_y_dy": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "numpy.concatenate",
    "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.test_function_x_y"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.internal.hager_zhang_lib_test.value_and_gradient": {
  "data": {
   "shadows": "tensorflow_probability.python.math.gradient.value_and_gradient"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.linesearch.remove_undocumented": {
  "data": {
   "shadows": "tensorflow.python.util.all_util.remove_undocumented"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.nelder_mead": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability.python.optimizer.nelder_mead.collections"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.nelder_mead.NelderMeadOptimizerResults": {
  "data": {
   "lineno": 39
  },
  "type": "constant"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._EPSILON": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._accept_reflected_fn": {
  "data": {
   "lineno": 459
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._accept_reflected_fn._replace_worst_with_reflected": {
  "data": {
   "lineno": 465,
   "symbols_in_volume": [
    "_replace_at_index"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._check_convergence": {
  "data": {
   "lineno": 609,
   "symbols_in_volume": [
    "tensorflow.abs",
    "tensorflow.reduce_max"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._default_step_sizes": {
  "data": {
   "lineno": 754,
   "symbols_in_volume": [
    "tensorflow.abs",
    "tensorflow.compat.v1.where",
    "tensorflow.ones_like",
    "tensorflow_probability.python.optimizer.nelder_mead._EPSILON"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._evaluate_objective_multiple": {
  "data": {
   "lineno": 846,
   "symbols_in_volume": [
    "objective_function",
    "tensorflow.map_fn",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._expansion_fn": {
  "data": {
   "lineno": 473
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._expansion_fn._expand_and_maybe_replace": {
  "data": {
   "lineno": 482,
   "symbols_in_volume": [
    "_replace_at_index",
    "objective_function",
    "tensorflow_probability.python.internal.prefer_static.cond"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._inside_contraction_fn": {
  "data": {
   "lineno": 541
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._inside_contraction_fn._contraction": {
  "data": {
   "lineno": 552,
   "symbols_in_volume": [
    "objective_function",
    "tensorflow_probability.python.internal.prefer_static.cond"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._inside_contraction_fn._contraction._accept_contraction": {
  "data": {
   "lineno": 558,
   "symbols_in_volume": [
    "_replace_at_index"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._inside_contraction_fn._contraction._reject_contraction": {
  "data": {
   "lineno": 571,
   "symbols_in_volume": [
    "_shrink_towards_best",
    "objective_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._outside_contraction_fn": {
  "data": {
   "lineno": 500
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._outside_contraction_fn._contraction": {
  "data": {
   "lineno": 512,
   "symbols_in_volume": [
    "objective_function",
    "tensorflow_probability.python.internal.prefer_static.cond"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._outside_contraction_fn._contraction._accept_contraction": {
  "data": {
   "lineno": 517,
   "symbols_in_volume": [
    "_replace_at_index"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._outside_contraction_fn._contraction._reject_contraction": {
  "data": {
   "lineno": 528,
   "symbols_in_volume": [
    "_shrink_towards_best",
    "objective_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._prepare_args": {
  "data": {
   "lineno": 649,
   "symbols_in_volume": [
    "ValueError",
    "_default_step_sizes",
    "_prepare_args_with_initial_simplex",
    "_prepare_args_with_initial_vertex",
    "objective_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._prepare_args_with_initial_simplex": {
  "data": {
   "lineno": 764,
   "symbols_in_volume": [
    "_evaluate_objective_multiple",
    "objective_function",
    "tensorflow.convert_to_tensor",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._prepare_args_with_initial_vertex": {
  "data": {
   "lineno": 791,
   "symbols_in_volume": [
    "_evaluate_objective_multiple",
    "objective_function",
    "tensorflow.concat",
    "tensorflow.expand_dims",
    "tensorflow.eye",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow.size"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._replace_at_index": {
  "data": {
   "lineno": 602,
   "symbols_in_volume": [
    "tensorflow.concat",
    "tensorflow.expand_dims"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._resolve_parameters": {
  "data": {
   "lineno": 831,
   "symbols_in_volume": [
    "tensorflow.cast"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead._shrink_towards_best": {
  "data": {
   "lineno": 581,
   "symbols_in_volume": [
    "_evaluate_objective_multiple",
    "objective_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.nelder_mead.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.nelder_mead.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.nelder_mead.minimize": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "_prepare_args",
    "_resolve_parameters",
    "dict",
    "tensorflow.argsort",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.while_loop",
    "tensorflow_probability.python.optimizer.nelder_mead.NelderMeadOptimizerResults"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead.minimize._is_converged": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "tensorflow.logical_not"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead.minimize._loop_body": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": [
    "nelder_mead_one_step"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead.nelder_mead_one_step": {
  "data": {
   "lineno": 343,
   "symbols_in_volume": [
    "_accept_reflected_fn",
    "_check_convergence",
    "_expansion_fn",
    "_inside_contraction_fn",
    "_outside_contraction_fn",
    "objective_function",
    "tensorflow.argsort",
    "tensorflow.cast",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.internal.prefer_static.case"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead.nelder_mead_one_step._converged_fn": {
  "data": {
   "lineno": 394
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead.prefer_static": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.prefer_static"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.nelder_mead.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.nelder_mead.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_minimize": {
  "data": {
   "shadows": "tensorflow_probability.python.optimizer.nelder_mead.minimize"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_one_step": {
  "data": {
   "shadows": "tensorflow_probability.python.optimizer.nelder_mead.nelder_mead_one_step"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_abs_function": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.constant",
    "tensorflow.float64",
    "tensorflow_probability.optimizer.nelder_mead_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_abs_function.abs_func": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "tensorflow.abs",
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_batch_consistent_with_nonbatch": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.float64",
    "tensorflow_probability.optimizer.nelder_mead_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_batch_consistent_with_nonbatch.easom": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "numpy.pi",
    "tensorflow.cos",
    "tensorflow.exp",
    "tensorflow.reduce_prod",
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_determinism": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": [
    "get_results",
    "numpy.random.rand"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_determinism.get_results": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.optimizer.nelder_mead_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_determinism.rastrigin": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": [
    "numpy.pi",
    "tensorflow.cos",
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_max_iteration_bounds_work": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.optimizer.nelder_mead_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_max_iteration_bounds_work.beale": {
  "data": {
   "lineno": 301
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_quadratic_bowl_10d": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.random.randn",
    "numpy.random.seed",
    "tensorflow.ones_like",
    "tensorflow_probability.optimizer.nelder_mead_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_quadratic_bowl_10d.quadratic": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_quadratic_bowl_2d": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.constant",
    "tensorflow_probability.optimizer.nelder_mead_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_quadratic_bowl_2d.quadratic": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_quadratic_bowl_with_initial_simplex": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.constant",
    "tensorflow_probability.optimizer.nelder_mead_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_quadratic_bowl_with_initial_simplex.quadratic": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_quadratic_bowl_with_step_sizes": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.constant",
    "tensorflow_probability.optimizer.nelder_mead_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_quadratic_bowl_with_step_sizes.quadratic": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_quadratic_with_skew": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "numpy.diag",
    "numpy.dot",
    "numpy.exp",
    "numpy.random.randn",
    "numpy.random.seed",
    "numpy.transpose",
    "scipy.stats.special_ortho_group.rvs",
    "tensorflow.ones_like",
    "tensorflow_probability.optimizer.nelder_mead_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_quadratic_with_skew.quadratic": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "tensorflow.reduce_sum",
    "tensorflow.tensordot"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_quadratic_with_strong_skew": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.diag",
    "numpy.dot",
    "numpy.random.randn",
    "numpy.random.seed",
    "numpy.transpose",
    "scipy.stats.special_ortho_group.rvs",
    "tensorflow.ones_like",
    "tensorflow_probability.optimizer.nelder_mead_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_quadratic_with_strong_skew.quadratic": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "tensorflow.reduce_sum",
    "tensorflow.tensordot"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_rosenbrock_2d": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow_probability.optimizer.nelder_mead_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_rosenbrock_2d.rosenbrock": {
  "data": {
   "lineno": 185
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_sqrt_quadratic_function": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.constant",
    "tensorflow_probability.optimizer.nelder_mead_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.NelderMeadTest.test_sqrt_quadratic_function.sqrt_quad": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "tensorflow.reduce_sum",
    "tensorflow.sqrt"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.special_ortho_group": {
  "data": {
   "shadows": "scipy.stats.special_ortho_group"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.nelder_mead_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse.__all__": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse._add_ignoring_nones": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "tensorflow_probability.python.optimizer.proximal_hessian_sparse._reduce_ignoring_nones"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse._get_shape": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.int32",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse._mul_ignoring_nones": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "tensorflow_probability.python.optimizer.proximal_hessian_sparse._reduce_ignoring_nones"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse._mul_or_none": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "tensorflow_probability.python.optimizer.proximal_hessian_sparse._reduce_exiting_on_none"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse._one_hot_like": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.compat.dimension_value",
    "tensorflow.one_hot",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse._reduce_exiting_on_none": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "any",
    "fn",
    "list",
    "tensorflow_probability.python.optimizer.proximal_hessian_sparse._reduce_ignoring_nones"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse._reduce_ignoring_nones": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "fn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse._sparse_or_dense_matmul_onehot": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "isinstance",
    "tensorflow.SparseTensor",
    "tensorflow.cast",
    "tensorflow.compat.v1.SparseTensorValue",
    "tensorflow.concat",
    "tensorflow.gather",
    "tensorflow.int64",
    "tensorflow.reshape",
    "tensorflow.sparse.slice",
    "tensorflow.sparse.to_dense",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.optimizer.proximal_hessian_sparse._get_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse.minimize": {
  "data": {
   "lineno": 471,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.int32",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.while_loop",
    "tensorflow.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse.minimize._loop_body": {
  "data": {
   "lineno": 569,
   "symbols_in_volume": [
    "grad_and_hessian_loss_fn",
    "tensorflow_probability.python.optimizer.proximal_hessian_sparse.minimize_one_step"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse.minimize._loop_cond": {
  "data": {
   "lineno": 564,
   "symbols_in_volume": [
    "tensorflow.logical_and",
    "tensorflow.logical_not"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse.minimize_one_step": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "numpy.int32",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.concat",
    "tensorflow.norm",
    "tensorflow.range",
    "tensorflow.rank",
    "tensorflow.reduce_all",
    "tensorflow.roll",
    "tensorflow.transpose",
    "tensorflow.while_loop",
    "tensorflow.zeros",
    "tensorflow_probability.python.optimizer.proximal_hessian_sparse._add_ignoring_nones",
    "tensorflow_probability.python.optimizer.proximal_hessian_sparse._get_shape",
    "tensorflow_probability.python.optimizer.proximal_hessian_sparse._mul_or_none"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse.minimize_one_step._hessian_diag_elt_with_l2": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.optimizer.proximal_hessian_sparse._add_ignoring_nones",
    "tensorflow_probability.python.optimizer.proximal_hessian_sparse._mul_or_none",
    "tensorflow_probability.python.optimizer.proximal_hessian_sparse._sparse_or_dense_matmul_onehot"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse.minimize_one_step._loop_body": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": [
    "_do_update",
    "_hessian_diag_elt_with_l2",
    "tensorflow.compat.v1.where",
    "tensorflow.equal",
    "tensorflow.reduce_all",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.internal.prefer_static.cond",
    "tensorflow_probability.python.math.numeric.soft_threshold",
    "tensorflow_probability.python.optimizer.proximal_hessian_sparse._mul_ignoring_nones"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse.minimize_one_step._loop_body._do_update": {
  "data": {
   "lineno": 379,
   "symbols_in_volume": [
    "tensorflow.control_dependencies",
    "tensorflow.range",
    "tensorflow.rank",
    "tensorflow.roll",
    "tensorflow.tensor_scatter_nd_add",
    "tensorflow.transpose",
    "tensorflow_probability.python.math.linalg.sparse_or_dense_matvecmul",
    "tensorflow_probability.python.optimizer.proximal_hessian_sparse._one_hot_like",
    "tensorflow_probability.python.optimizer.proximal_hessian_sparse._sparse_or_dense_matmul_onehot"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse.minimize_one_step._loop_cond": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": [
    "tensorflow.equal",
    "tensorflow.reduce_any"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse.prefer_static": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.prefer_static"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse.soft_threshold": {
  "data": {
   "shadows": "tensorflow_probability.python.math.numeric.soft_threshold"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse.sparse_or_dense_matvecmul": {
  "data": {
   "shadows": "tensorflow_probability.python.math.linalg.sparse_or_dense_matvecmul"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_minimize": {
  "data": {
   "shadows": "tensorflow_probability.python.optimizer.proximal_hessian_sparse.minimize"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_one_step": {
  "data": {
   "shadows": "tensorflow_probability.python.optimizer.proximal_hessian_sparse.minimize_one_step"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test.ProximalHessianTestDynamicShapeFloat32": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "tensorflow.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test.ProximalHessianTestDynamicShapeFloat64": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "tensorflow.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test.ProximalHessianTestStaticShapeFloat32": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "tensorflow.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test.ProximalHessianTestStaticShapeFloat64": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "tensorflow.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest._adjust_dtype_and_shape_hints": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "isinstance",
    "tensorflow.SparseTensor",
    "tensorflow.cast"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest._make_placeholder": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest._test_finding_sparse_solution": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "numpy.concatenate",
    "numpy.full",
    "numpy.random.random",
    "tensorflow.concat",
    "tensorflow.zeros",
    "tensorflow_probability.optimizer.proximal_hessian_sparse_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest._test_finding_sparse_solution._grad_and_hessian_unregularized_loss_fn": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "numpy.ndindex",
    "numpy.product",
    "range",
    "tensorflow.SparseTensor",
    "tensorflow.concat",
    "tensorflow.ones",
    "tensorflow.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest.testFindingSparseSolution_BatchOfRank2": {
  "data": {
   "lineno": 131
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest.testFindingSparseSolution_SingleBatch": {
  "data": {
   "lineno": 128
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest.testFindingSparseSolution_SingleInstance": {
  "data": {
   "lineno": 125
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest.testL2Regularization": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "numpy.random.random",
    "numpy.random.seed",
    "tensorflow.zeros_like",
    "tensorflow_probability.optimizer.proximal_hessian_sparse_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest.testL2Regularization._grad_and_hessian_unregularized_loss_fn": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "tensorflow.eye",
    "tensorflow.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest.testNumIter": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "numpy.random.random",
    "numpy.random.seed",
    "tensorflow.zeros_like",
    "tensorflow_probability.optimizer.proximal_hessian_sparse_minimize"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test._ProximalHessianTest.testNumIter._grad_and_hessian_unregularized_loss_fn": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "tensorflow.linalg.tensor_diag",
    "tensorflow.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test.tfd": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.optimizer.proximal_hessian_sparse_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.remove_undocumented": {
  "data": {
   "shadows": "tensorflow.python.util.all_util.remove_undocumented"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.sgld": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.sgld.StochasticGradientLangevinDynamics": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow.compat.v2.optimizers.Optimizer"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.sgld.StochasticGradientLangevinDynamics.__init__": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "NotImplementedError",
    "super",
    "tensorflow.compat.v1.assert_greater",
    "tensorflow.compat.v1.assert_integer",
    "tensorflow.compat.v1.assert_less_equal",
    "tensorflow.compat.v1.assert_non_negative",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.executing_eagerly",
    "tensorflow.int64",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.optimizer.sgld.StochasticGradientLangevinDynamics"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld.StochasticGradientLangevinDynamics._apply_noisy_update": {
  "data": {
   "lineno": 261,
   "symbols_in_volume": [
    "tensorflow.broadcast_dynamic_shape",
    "tensorflow.cast",
    "tensorflow.compat.v1.where",
    "tensorflow.control_dependencies",
    "tensorflow.int64",
    "tensorflow.math.rsqrt",
    "tensorflow.random.normal",
    "tensorflow.shape",
    "tensorflow.sqrt",
    "tensorflow.square",
    "tensorflow.squeeze",
    "tensorflow.zeros",
    "tensorflow_probability.python.math.diag_jacobian"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld.StochasticGradientLangevinDynamics._create_slots": {
  "data": {
   "lineno": 215
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld.StochasticGradientLangevinDynamics._prepare": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v1.assert_non_negative",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.optimizer.sgld.StochasticGradientLangevinDynamics"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld.StochasticGradientLangevinDynamics._resource_apply_dense": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.python.training.training_ops.resource_apply_gradient_descent"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld.StochasticGradientLangevinDynamics._resource_apply_sparse": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "tensorflow.cast"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld.StochasticGradientLangevinDynamics.get_config": {
  "data": {
   "lineno": 219
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld.StochasticGradientLangevinDynamics.variable_scope": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.optimizer.sgld.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.sgld.diag_jacobian": {
  "data": {
   "shadows": "tensorflow_probability.python.math.diag_jacobian"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.sgld.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.sgld.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.sgld.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.sgld.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.sgld.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.sgld.training_ops": {
  "data": {
   "shadows": "tensorflow.python.training.training_ops"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.sgld_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.sgld_test.StochasticGradientLangevinDynamicsOptimizerTest": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.sgld_test.StochasticGradientLangevinDynamicsOptimizerTest.testBasic": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "numpy.sqrt",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow.float32",
    "tensorflow.float64",
    "tensorflow.half",
    "tensorflow_probability.optimizer.StochasticGradientLangevinDynamics",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld_test.StochasticGradientLangevinDynamicsOptimizerTest.testBasicMultiInstance": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "numpy.sqrt",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow.float32",
    "tensorflow.float64",
    "tensorflow.half",
    "tensorflow_probability.optimizer.StochasticGradientLangevinDynamics",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld_test.StochasticGradientLangevinDynamicsOptimizerTest.testBurnin": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow.float32",
    "tensorflow.int16",
    "tensorflow.int32",
    "tensorflow.int64",
    "tensorflow.int8",
    "tensorflow_probability.optimizer.StochasticGradientLangevinDynamics"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld_test.StochasticGradientLangevinDynamicsOptimizerTest.testDiffusionBehavesCorrectly": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": [
    "dtype",
    "numpy.concatenate",
    "numpy.float32",
    "numpy.mean",
    "numpy.zeros",
    "range",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow.compat.v1.train.get_or_create_global_step",
    "tensorflow.compat.v1.train.polynomial_decay",
    "tensorflow.compat.v2.Variable",
    "tensorflow.executing_eagerly",
    "tensorflow.linalg.cholesky",
    "tensorflow_probability.optimizer.StochasticGradientLangevinDynamics"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld_test.StochasticGradientLangevinDynamicsOptimizerTest.testDiffusionBehavesCorrectly.loss_fn": {
  "data": {
   "lineno": 365,
   "symbols_in_volume": [
    "tensorflow.concat",
    "tensorflow.expand_dims",
    "tensorflow.linalg.cholesky_solve",
    "tensorflow.linalg.matvec"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld_test.StochasticGradientLangevinDynamicsOptimizerTest.testGradWrtRef": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.executing_eagerly",
    "tensorflow.float32",
    "tensorflow.float64",
    "tensorflow.half",
    "tensorflow.python.framework.test_util.run_deprecated_v1",
    "tensorflow_probability.optimizer.StochasticGradientLangevinDynamics"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld_test.StochasticGradientLangevinDynamicsOptimizerTest.testPreconditionerComputedCorrectly": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "dtype",
    "numpy.float32",
    "target_fn",
    "tensorflow.cast",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.executing_eagerly",
    "tensorflow.gradients",
    "tensorflow.linalg.cholesky",
    "tensorflow.math.rsqrt",
    "tensorflow.ones_like",
    "tensorflow.square",
    "tensorflow_probability.optimizer.StochasticGradientLangevinDynamics",
    "tensorflow_probability.python.math.diag_jacobian",
    "tensorflow_probability.python.optimizer.sgld_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld_test.StochasticGradientLangevinDynamicsOptimizerTest.testPreconditionerComputedCorrectly.target_fn": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": [
    "tensorflow.concat"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld_test.StochasticGradientLangevinDynamicsOptimizerTest.testSparseBasic": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "numpy.sqrt",
    "tensorflow.IndexedSlices",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow.float32",
    "tensorflow.float64",
    "tensorflow.half",
    "tensorflow_probability.optimizer.StochasticGradientLangevinDynamics",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld_test.StochasticGradientLangevinDynamicsOptimizerTest.testTensorLearningRate": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "numpy.sqrt",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow.float32",
    "tensorflow.float64",
    "tensorflow.half",
    "tensorflow_probability.optimizer.StochasticGradientLangevinDynamics",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld_test.StochasticGradientLangevinDynamicsOptimizerTest.testWithGlobalStep": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": [
    "numpy.sqrt",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow.float32",
    "tensorflow.float64",
    "tensorflow.int64",
    "tensorflow_probability.optimizer.StochasticGradientLangevinDynamics",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.sgld_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.sgld_test.diag_jacobian": {
  "data": {
   "shadows": "tensorflow_probability.python.math.diag_jacobian"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.sgld_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.sgld_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.sgld_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.sgld_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.sgld_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.sgld_test.tfd": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.optimizer.sgld_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.variational_sgd": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.variational_sgd.VariationalSGD": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow.compat.v2.optimizers.Optimizer"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.variational_sgd.VariationalSGD.__init__": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v1.assert_greater",
    "tensorflow.compat.v1.assert_integer",
    "tensorflow.compat.v1.assert_less_equal",
    "tensorflow.compat.v1.assert_non_negative",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.int64",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.optimizer.variational_sgd.VariationalSGD"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd.VariationalSGD._create_slots": {
  "data": {
   "lineno": 164
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd.VariationalSGD._get_coordinatewise_learning_rate": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "isinstance",
    "tensorflow.IndexedSlices",
    "tensorflow.Tensor",
    "tensorflow.cast",
    "tensorflow.clip_by_value",
    "tensorflow.compat.v1.scatter_add",
    "tensorflow.compat.v1.where",
    "tensorflow.control_dependencies",
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow.gather_nd",
    "tensorflow.reduce_mean",
    "tensorflow.square",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd.VariationalSGD._prepare": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "super",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.optimizer.variational_sgd.VariationalSGD"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd.VariationalSGD._resource_apply_dense": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.clip_by_value",
    "tensorflow.compat.v1.where",
    "tensorflow.int64",
    "tensorflow.python.training.training_ops.resource_apply_gradient_descent"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd.VariationalSGD._resource_apply_sparse": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.clip_by_value",
    "tensorflow.compat.v1.where",
    "tensorflow.int64"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd.VariationalSGD.get_config": {
  "data": {
   "lineno": 158
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.optimizer.variational_sgd.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.variational_sgd.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.variational_sgd.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.variational_sgd.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.variational_sgd.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.variational_sgd.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.variational_sgd.training_ops": {
  "data": {
   "shadows": "tensorflow.python.training.training_ops"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.variational_sgd_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.optimizer.variational_sgd_test.VariationalSGDTest": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.optimizer.variational_sgd_test.VariationalSGDTest.testBasic": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow.float32",
    "tensorflow.float64",
    "tensorflow.half",
    "tensorflow_probability.optimizer.VariationalSGD",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd_test.VariationalSGDTest.testBasicMultiInstance": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow.float32",
    "tensorflow.float64",
    "tensorflow.half",
    "tensorflow_probability.optimizer.VariationalSGD",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd_test.VariationalSGDTest.testBurnin": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow.float32",
    "tensorflow.int16",
    "tensorflow.int32",
    "tensorflow.int64",
    "tensorflow.int8",
    "tensorflow_probability.optimizer.VariationalSGD"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd_test.VariationalSGDTest.testGradWrtRef": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.float32",
    "tensorflow.float64",
    "tensorflow.half",
    "tensorflow.python.framework.test_util.run_deprecated_v1",
    "tensorflow_probability.optimizer.VariationalSGD"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd_test.VariationalSGDTest.testSparseBasic": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": [
    "tensorflow.IndexedSlices",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow.float32",
    "tensorflow.float64",
    "tensorflow.half",
    "tensorflow_probability.optimizer.VariationalSGD",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd_test.VariationalSGDTest.testTensorDecayLearningRate": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.constant",
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow.executing_eagerly",
    "tensorflow.float32",
    "tensorflow.float64",
    "tensorflow.half",
    "tensorflow_probability.optimizer.VariationalSGD",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd_test.VariationalSGDTest.testTensorLearningRate": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow.float32",
    "tensorflow.float64",
    "tensorflow_probability.optimizer.VariationalSGD",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd_test.VariationalSGDTest.testWithGlobalStep": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": [
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow.float32",
    "tensorflow.float64",
    "tensorflow.half",
    "tensorflow.int64",
    "tensorflow_probability.optimizer.VariationalSGD",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.optimizer.variational_sgd_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.variational_sgd_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.variational_sgd_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.variational_sgd_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.variational_sgd_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.optimizer.variational_sgd_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.python.util.all_util.remove_undocumented",
    "tensorflow_probability.python.positive_semidefinite_kernels._allowed_symbols"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.ExpSinSquared": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared.ExpSinSquared"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic.ExponentiatedQuadratic"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.FeatureScaled": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled.FeatureScaled"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.FeatureTransformed": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed.FeatureTransformed"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.KumaraswamyTransformed": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed.KumaraswamyTransformed"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.Linear": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.Linear"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.MaternFiveHalves": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.matern.MaternFiveHalves"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.MaternOneHalf": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.matern.MaternOneHalf"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.MaternThreeHalves": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.matern.MaternThreeHalves"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.Polynomial": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.Polynomial"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.PositiveSemidefiniteKernel": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.RationalQuadratic": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic.RationalQuadratic"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.SchurComplement": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement.SchurComplement"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels._allowed_symbols": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared.ExpSinSquared": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared.ExpSinSquared.__init__": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v1.assert_positive",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared.ExpSinSquared",
    "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared._validate_arg_if_not_none",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.maybe_get_common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared.ExpSinSquared._apply": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "numpy.pi",
    "tensorflow.abs",
    "tensorflow.exp",
    "tensorflow.math.log",
    "tensorflow.sin",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.pad_shape_with_ones",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.sum_rightmost_ndims_preserving_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared.ExpSinSquared._batch_shape": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared.ExpSinSquared._batch_shape_tensor": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "tensorflow.broadcast_dynamic_shape",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared.ExpSinSquared.amplitude": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared.ExpSinSquared.length_scale": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared.ExpSinSquared.period": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared.__all__": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared._validate_arg_if_not_none": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "assertion",
    "tensorflow.control_dependencies",
    "tensorflow.identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared.psd_kernel": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared.util": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared_test.ExpSinSquaredTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared_test.ExpSinSquaredTest._exp_sin_squared_kernel": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "numpy.abs",
    "numpy.exp",
    "numpy.pi",
    "numpy.sin",
    "numpy.sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared_test.ExpSinSquaredTest.testMismatchedFloatTypesAreBad": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "TypeError",
    "numpy.float32",
    "numpy.float64",
    "tensorflow_probability.positive_semidefinite_kernels.ExpSinSquared"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared_test.ExpSinSquaredTest.testNoneShapes": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "numpy.reshape",
    "tensorflow_probability.positive_semidefinite_kernels.ExpSinSquared"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared_test.ExpSinSquaredTest.testShapesAreCorrect": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.ones",
    "tensorflow.stack",
    "tensorflow_probability.positive_semidefinite_kernels.ExpSinSquared"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared_test.ExpSinSquaredTest.testValidateArgs": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.positive_semidefinite_kernels.ExpSinSquared"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared_test.ExpSinSquaredTest.testValuesAreCorrect": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.array",
    "numpy.float32",
    "numpy.float64",
    "numpy.random.seed",
    "numpy.random.uniform",
    "range",
    "tensorflow_probability.positive_semidefinite_kernels.ExpSinSquared"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exp_sin_squared_test.tfpk": {
  "data": {
   "shadows": "tensorflow_probability.positive_semidefinite_kernels"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic.ExponentiatedQuadratic": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic.ExponentiatedQuadratic.__init__": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v1.assert_positive",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic.ExponentiatedQuadratic",
    "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic._validate_arg_if_not_none",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.maybe_get_common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic.ExponentiatedQuadratic._apply": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "tensorflow.exp",
    "tensorflow.math.log",
    "tensorflow.math.squared_difference",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.pad_shape_with_ones",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.sum_rightmost_ndims_preserving_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic.ExponentiatedQuadratic._batch_shape": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic.ExponentiatedQuadratic._batch_shape_tensor": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "tensorflow.broadcast_dynamic_shape",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic.ExponentiatedQuadratic.amplitude": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic.ExponentiatedQuadratic.length_scale": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic.__all__": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic._validate_arg_if_not_none": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "assertion",
    "tensorflow.control_dependencies",
    "tensorflow.identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic.psd_kernel": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic.util": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic_test.ExponentiatedQuadraticTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic_test.ExponentiatedQuadraticTest.testMismatchedFloatTypesAreBad": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "TypeError",
    "numpy.float32",
    "numpy.float64",
    "tensorflow_probability.positive_semidefinite_kernels.ExponentiatedQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic_test.ExponentiatedQuadraticTest.testNoneShapes": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.reshape",
    "tensorflow_probability.positive_semidefinite_kernels.ExponentiatedQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic_test.ExponentiatedQuadraticTest.testShapesAreCorrect": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.ones",
    "tensorflow.stack",
    "tensorflow_probability.positive_semidefinite_kernels.ExponentiatedQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic_test.ExponentiatedQuadraticTest.testValidateArgs": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.positive_semidefinite_kernels.ExponentiatedQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic_test.ExponentiatedQuadraticTest.testValuesAreCorrect": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.exp",
    "numpy.float32",
    "numpy.random.seed",
    "numpy.random.uniform",
    "numpy.sum",
    "range",
    "tensorflow_probability.positive_semidefinite_kernels.ExponentiatedQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.exponentiated_quadratic_test.tfpk": {
  "data": {
   "shadows": "tensorflow_probability.positive_semidefinite_kernels"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled.FeatureScaled": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed.FeatureTransformed"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled.FeatureScaled.__init__": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v1.assert_positive",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.control_dependencies",
    "tensorflow.convert_to_tensor",
    "tensorflow.identity",
    "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled.FeatureScaled"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled.FeatureScaled.__init__.rescale_input": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.pad_shape_with_ones"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled.FeatureScaled.scale_diag": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled.__all__": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled.feature_transformed": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled.util": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled_test._FeatureScaledTest"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled_test.FeatureScaledFloat32Test": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled_test._FeatureScaledTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled_test.FeatureScaledFloat64Test": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled_test._FeatureScaledTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled_test._FeatureScaledTest": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled_test._FeatureScaledTest.testKernelParametersBroadcast": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.expand_dims",
    "numpy.random.uniform",
    "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic",
    "tensorflow_probability.python.positive_semidefinite_kernels.FeatureScaled",
    "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled_test._numpy_exp_quad",
    "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled_test._numpy_exp_quad_matrix"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled_test._numpy_exp_quad": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.sum",
    "range",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled_test._numpy_exp_quad_matrix": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "numpy.expand_dims",
    "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled_test._numpy_exp_quad"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_scaled_test.tfpk": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed.FeatureTransformed": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed.FeatureTransformed.__init__": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed.FeatureTransformed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed.FeatureTransformed._apply": {
  "data": {
   "lineno": 107
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed.FeatureTransformed.kernel": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed.FeatureTransformed.transformation_fn": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed.__all__": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed.psd_kernel": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test._FeatureTransformedTest"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test.FeatureTransformedFloat32Test": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test._FeatureTransformedTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test.FeatureTransformedFloat64Test": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test._FeatureTransformedTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test._FeatureTransformedTest": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test._FeatureTransformedTest.testKernelParametersBroadcast": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.random.uniform",
    "range",
    "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic",
    "tensorflow_probability.python.positive_semidefinite_kernels.FeatureTransformed",
    "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test._numpy_exp_quad",
    "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test._numpy_exp_quad_matrix"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test._FeatureTransformedTest.testKernelParametersBroadcast.vector_transform": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": [
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.pad_shape_with_ones"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test._FeatureTransformedTest.testValuesAreCorrectIdentity": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.random.uniform",
    "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic",
    "tensorflow_probability.python.positive_semidefinite_kernels.FeatureTransformed",
    "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test._numpy_exp_quad"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test._FeatureTransformedTest.testValuesAreCorrectScalarTransform": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.random.uniform",
    "tensorflow_probability.python.bijectors.AffineScalar",
    "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic",
    "tensorflow_probability.python.positive_semidefinite_kernels.FeatureTransformed",
    "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test._numpy_exp_quad"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test._FeatureTransformedTest.testValuesAreCorrectScalarTransform.scale_transform": {
  "data": {
   "lineno": 88
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test._FeatureTransformedTest.testValuesAreCorrectVectorTransform": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.random.uniform",
    "tensorflow_probability.python.bijectors.Affine",
    "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic",
    "tensorflow_probability.python.positive_semidefinite_kernels.FeatureTransformed",
    "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test._numpy_exp_quad"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test._FeatureTransformedTest.testValuesAreCorrectVectorTransform.vector_transform": {
  "data": {
   "lineno": 120
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test._numpy_exp_quad": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.sum",
    "range",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test._numpy_exp_quad_matrix": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "numpy.expand_dims",
    "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test._numpy_exp_quad"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test.bijectors": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test.tfpk": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed_test.util": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.maybe_get_common_dtype": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "all",
    "tensorflow.float32",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.pad_shape_with_ones": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "isinstance",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.rank",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow_probability.python.internal.distribution_util.pad"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.sqrt_with_finite_grads": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "TypeError",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.custom_gradient",
    "tensorflow.sqrt"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.sqrt_with_finite_grads.grad": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "numpy.finfo",
    "numpy.sqrt",
    "tensorflow.compat.v1.where",
    "tensorflow.equal",
    "tensorflow.fill",
    "tensorflow.math.rsqrt",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.sum_rightmost_ndims_preserving_shape": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": [
    "tensorflow.convert_to_tensor",
    "tensorflow.range",
    "tensorflow.rank",
    "tensorflow.reduce_sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util_test.UtilTest": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util_test.UtilTest.testPadShapeMiddleWithOnes": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.ones",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.pad_shape_with_ones"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util_test.UtilTest.testPadShapeRightWithOnes": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.ones",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.pad_shape_with_ones"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util_test.UtilTest.testPadShapeRightWithOnesCanBeGraphNoop": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.ones",
    "tensorflow.Graph",
    "tensorflow.constant",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.pad_shape_with_ones"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util_test.UtilTest.testPadShapeRightWithOnesDynamicShape": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.ones",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.pad_shape_with_ones"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util_test.UtilTest.testPadShapeStartWithOnes": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.ones",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.pad_shape_with_ones"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util_test.UtilTest.testSqrtWithFiniteGradsBackpropsCorrectly": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "f",
    "g",
    "h",
    "numpy.linspace",
    "tensorflow.constant",
    "tensorflow.sqrt",
    "tensorflow_probability.python.math.gradient.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util_test.UtilTest.testSqrtWithFiniteGradsBackpropsCorrectly.f": {
  "data": {
   "lineno": 145
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util_test.UtilTest.testSqrtWithFiniteGradsBackpropsCorrectly.g": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.sqrt_with_finite_grads"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util_test.UtilTest.testSqrtWithFiniteGradsBackpropsCorrectly.h": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "tensorflow.sin"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util_test.UtilTest.testSqrtWithFiniteGradsHasCorrectGradients": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "numpy.isnan",
    "numpy.linspace",
    "tensorflow.constant",
    "tensorflow.sqrt",
    "tensorflow_probability.python.math.gradient.value_and_gradient",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.sqrt_with_finite_grads"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util_test.UtilTest.testSqrtWithFiniteGradsHasCorrectValues": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "numpy.isnan",
    "numpy.linspace",
    "tensorflow.sqrt",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.sqrt_with_finite_grads"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util_test.UtilTest.testSqrtWithFiniteGradsWithDynamicShape": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.sqrt",
    "tensorflow_probability.python.math.gradient.value_and_gradient",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.sqrt_with_finite_grads"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util_test.UtilTest.testSumRightmostNdimsPreservingShapeDynamicRank": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "numpy.ones",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.sum_rightmost_ndims_preserving_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util_test.UtilTest.testSumRightmostNdimsPreservingShapeStaticRank": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "numpy.ones",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.sum_rightmost_ndims_preserving_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util_test.util": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.internal.util_test.value_and_gradient": {
  "data": {
   "shadows": "tensorflow_probability.python.math.gradient.value_and_gradient"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed.KumaraswamyTransformed": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed.FeatureTransformed"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed.KumaraswamyTransformed.__init__": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed.KumaraswamyTransformed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed.KumaraswamyTransformed.__init__.transform_by_kumaraswamy": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "tensorflow_probability.python.bijectors.Kumaraswamy",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.pad_shape_with_ones"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed.KumaraswamyTransformed.concentration0": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed.KumaraswamyTransformed.concentration1": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed.__all__": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed.bijectors": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed.feature_transformed": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.feature_transformed"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed.util": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test._KumaraswamyTransformedTest"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test.KumaraswamyTransformedFloat32Test": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test._KumaraswamyTransformedTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test.KumaraswamyTransformedFloat64Test": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test._KumaraswamyTransformedTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test._KumaraswamyTransformedTest": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test._KumaraswamyTransformedTest.testKernelParametersBroadcast": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.expand_dims",
    "numpy.random.uniform",
    "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic",
    "tensorflow_probability.python.positive_semidefinite_kernels.KumaraswamyTransformed",
    "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test._kumaraswamy_warp",
    "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test._numpy_exp_quad",
    "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test._numpy_exp_quad_matrix"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test._KumaraswamyTransformedTest.testRetrieveIdentityTransform": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.random.uniform",
    "tensorflow_probability.python.positive_semidefinite_kernels.ExponentiatedQuadratic",
    "tensorflow_probability.python.positive_semidefinite_kernels.KumaraswamyTransformed",
    "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test._numpy_exp_quad",
    "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test._numpy_exp_quad_matrix"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test._kumaraswamy_warp": {
  "data": {
   "lineno": 29
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test._numpy_exp_quad": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.sum",
    "range",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test._numpy_exp_quad_matrix": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "numpy.expand_dims",
    "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test._numpy_exp_quad"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.kumaraswamy_transformed_test.tfpk": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern.MaternFiveHalves": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "tensorflow_probability.python.positive_semidefinite_kernels.matern._AmplitudeLengthScaleMixin",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern.MaternFiveHalves.__init__": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v1.name_scope",
    "tensorflow_probability.python.positive_semidefinite_kernels.matern.MaternFiveHalves"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern.MaternFiveHalves._apply": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": [
    "numpy.sqrt",
    "tensorflow.exp",
    "tensorflow.math.log",
    "tensorflow.math.log1p",
    "tensorflow.math.squared_difference",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.pad_shape_with_ones",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.sqrt_with_finite_grads",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.sum_rightmost_ndims_preserving_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern.MaternOneHalf": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "tensorflow_probability.python.positive_semidefinite_kernels.matern._AmplitudeLengthScaleMixin",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern.MaternOneHalf.__init__": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v1.name_scope",
    "tensorflow_probability.python.positive_semidefinite_kernels.matern.MaternOneHalf"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern.MaternOneHalf._apply": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "tensorflow.exp",
    "tensorflow.math.log",
    "tensorflow.math.squared_difference",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.pad_shape_with_ones",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.sqrt_with_finite_grads",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.sum_rightmost_ndims_preserving_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern.MaternThreeHalves": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "tensorflow_probability.python.positive_semidefinite_kernels.matern._AmplitudeLengthScaleMixin",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern.MaternThreeHalves.__init__": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v1.name_scope",
    "tensorflow_probability.python.positive_semidefinite_kernels.matern.MaternThreeHalves"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern.MaternThreeHalves._apply": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": [
    "numpy.sqrt",
    "tensorflow.exp",
    "tensorflow.math.log",
    "tensorflow.math.log1p",
    "tensorflow.math.squared_difference",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.pad_shape_with_ones",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.sqrt_with_finite_grads",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.sum_rightmost_ndims_preserving_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern._AmplitudeLengthScaleMixin": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern._AmplitudeLengthScaleMixin._batch_shape": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern._AmplitudeLengthScaleMixin._batch_shape_tensor": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "tensorflow.broadcast_dynamic_shape",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern._AmplitudeLengthScaleMixin._init_params": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "tensorflow.compat.v1.assert_positive",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.maybe_get_common_dtype",
    "tensorflow_probability.python.positive_semidefinite_kernels.matern._validate_arg_if_not_none"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern._AmplitudeLengthScaleMixin.amplitude": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern._AmplitudeLengthScaleMixin.length_scale": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern.__all__": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern._validate_arg_if_not_none": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "assertion",
    "tensorflow.control_dependencies",
    "tensorflow.identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern.psd_kernel": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern.util": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.python.positive_semidefinite_kernels.matern_test._MaternTestCase"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern_test.MaternFiveHalvesTest": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.positive_semidefinite_kernels.MaternFiveHalves",
    "tensorflow_probability.python.positive_semidefinite_kernels.matern_test._MaternTestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern_test.MaternFiveHalvesTest._numpy_kernel": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.sqrt",
    "numpy.sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern_test.MaternOneHalfTest": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.positive_semidefinite_kernels.MaternOneHalf",
    "tensorflow_probability.python.positive_semidefinite_kernels.matern_test._MaternTestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern_test.MaternOneHalfTest._numpy_kernel": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.sqrt",
    "numpy.sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern_test.MaternThreeHalvesTest": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.positive_semidefinite_kernels.MaternThreeHalves",
    "tensorflow_probability.python.positive_semidefinite_kernels.matern_test._MaternTestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern_test.MaternThreeHalvesTest._numpy_kernel": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.sqrt",
    "numpy.sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern_test._MaternTestCase": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern_test._MaternTestCase.testBatchShape": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.random.uniform",
    "tensorflow.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern_test._MaternTestCase.testBatchShapeWithNone": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.random.uniform",
    "tensorflow.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern_test._MaternTestCase.testGradsAtIdenticalInputsAreZeroNotNaN": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.float32",
    "numpy.zeros",
    "range",
    "tensorflow.GradientTape",
    "tensorflow.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern_test._MaternTestCase.testMismatchedFloatTypesAreBad": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "TypeError",
    "numpy.float32",
    "numpy.float64"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern_test._MaternTestCase.testShapesAreCorrect": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.ones",
    "tensorflow.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern_test._MaternTestCase.testValidateArgs": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow.executing_eagerly"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern_test._MaternTestCase.testValuesAreCorrect": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.array",
    "numpy.float32",
    "numpy.float64",
    "numpy.random.seed",
    "numpy.random.uniform",
    "range"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.matern_test.tfpk": {
  "data": {
   "shadows": "tensorflow_probability.positive_semidefinite_kernels"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.Linear": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.Polynomial"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.Linear.__init__": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.Linear"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.Polynomial": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.Polynomial.__init__": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v1.assert_positive",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.maybe_get_common_dtype",
    "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.Polynomial",
    "tensorflow_probability.python.positive_semidefinite_kernels.polynomial._validate_arg_if_not_none"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.Polynomial._apply": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.pad_shape_with_ones",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.sum_rightmost_ndims_preserving_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.Polynomial._batch_shape": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "map",
    "tensorflow.broadcast_static_shape",
    "tensorflow_probability.python.positive_semidefinite_kernels.polynomial._maybe_shape_static",
    "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.functools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.Polynomial._batch_shape_tensor": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": [
    "map",
    "tensorflow.broadcast_dynamic_shape",
    "tensorflow_probability.python.positive_semidefinite_kernels.polynomial._maybe_shape_dynamic",
    "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.functools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.Polynomial.bias_variance": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.Polynomial.exponent": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.Polynomial.shift": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.Polynomial.slope_variance": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial._maybe_shape_dynamic": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial._maybe_shape_static": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "tensorflow.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial._validate_arg_if_not_none": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "assertion",
    "tensorflow.control_dependencies",
    "tensorflow.identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.psd_kernel": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial.util": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial_test.LinearTest": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial_test.LinearTest.testIsPolynomial": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "tensorflow_probability.positive_semidefinite_kernels.Linear",
    "tensorflow_probability.positive_semidefinite_kernels.Polynomial"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial_test.LinearTest.testValuesAreCorrect": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.random.uniform",
    "tensorflow_probability.positive_semidefinite_kernels.Linear"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial_test.PolynomialTest": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial_test.PolynomialTest.testBatchShape": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "absl.testing.parameterized.named_parameters",
    "dict",
    "tensorflow_probability.positive_semidefinite_kernels.Polynomial"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial_test.PolynomialTest.testFloat32": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.ones",
    "tensorflow_probability.positive_semidefinite_kernels.Polynomial"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial_test.PolynomialTest.testFloat32Fallback": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow_probability.positive_semidefinite_kernels.Polynomial"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial_test.PolynomialTest.testFloat64": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.ones",
    "tensorflow_probability.positive_semidefinite_kernels.Polynomial"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial_test.PolynomialTest.testNoneShapes": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.reshape",
    "tensorflow_probability.positive_semidefinite_kernels.Polynomial"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial_test.PolynomialTest.testShapesAreCorrectApply": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": [
    "absl.testing.parameterized.named_parameters",
    "dict",
    "numpy.float32",
    "numpy.ones",
    "tensorflow_probability.positive_semidefinite_kernels.Polynomial"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial_test.PolynomialTest.testShapesAreCorrectBroadcast": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.ones",
    "tensorflow_probability.positive_semidefinite_kernels.Polynomial"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial_test.PolynomialTest.testShapesAreCorrectMatrix": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "absl.testing.parameterized.named_parameters",
    "dict",
    "numpy.float32",
    "numpy.ones",
    "tensorflow_probability.positive_semidefinite_kernels.Polynomial"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial_test.PolynomialTest.testShifttNonPositiveIsOk": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "tensorflow_probability.positive_semidefinite_kernels.Polynomial"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial_test.PolynomialTest.testValidateArgsNonPositiveAreBad": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": [
    "tensorflow_probability.positive_semidefinite_kernels.Polynomial"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial_test.PolynomialTest.testValidateArgsNoneIsOk": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "tensorflow_probability.positive_semidefinite_kernels.Polynomial"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial_test.PolynomialTest.testValuesAreCorrect": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.random.uniform",
    "tensorflow_probability.positive_semidefinite_kernels.Polynomial"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial_test.PolynomialTest.test_mismatched_float_types_are_bad": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "TypeError",
    "numpy.float32",
    "numpy.float64",
    "tensorflow_probability.positive_semidefinite_kernels.Polynomial"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.polynomial_test.tfpk": {
  "data": {
   "shadows": "tensorflow_probability.positive_semidefinite_kernels"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "object",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.abc",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.six"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.__add__": {
  "data": {
   "lineno": 563,
   "symbols_in_volume": [
    "ValueError",
    "_SumKernel",
    "isinstance",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.__iadd__": {
  "data": {
   "lineno": 569
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.__imul__": {
  "data": {
   "lineno": 578
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.__init__": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "isinstance",
    "tensorflow.compat.v1.name_scope",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.__mul__": {
  "data": {
   "lineno": 572,
   "symbols_in_volume": [
    "ValueError",
    "_ProductKernel",
    "isinstance",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel",
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.__repr__": {
  "data": {
   "lineno": 595,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.__str__": {
  "data": {
   "lineno": 581,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel._apply": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel._batch_shape": {
  "data": {
   "lineno": 556,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel._batch_shape_tensor": {
  "data": {
   "lineno": 559,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel._name_scope": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.contextlib"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.apply": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "tensorflow.convert_to_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.batch_shape": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.batch_shape_tensor": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.dtype": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.feature_ndims": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.matrix": {
  "data": {
   "lineno": 366,
   "symbols_in_volume": [
    "tensorflow.convert_to_tensor",
    "tensorflow.expand_dims"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel.name": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel._ProductKernel": {
  "data": {
   "lineno": 724,
   "symbols_in_volume": [
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel._ProductKernel.__init__": {
  "data": {
   "lineno": 744,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "set",
    "str",
    "super",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.maybe_get_common_dtype",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel._ProductKernel",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel._flatten_multiplicand_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel._ProductKernel._apply": {
  "data": {
   "lineno": 780,
   "symbols_in_volume": [
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.functools",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.operator"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel._ProductKernel._batch_shape": {
  "data": {
   "lineno": 785,
   "symbols_in_volume": [
    "tensorflow.broadcast_static_shape",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.functools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel._ProductKernel._batch_shape_tensor": {
  "data": {
   "lineno": 789,
   "symbols_in_volume": [
    "tensorflow.broadcast_dynamic_shape",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.functools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel._ProductKernel.kernels": {
  "data": {
   "lineno": 775,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel._SumKernel": {
  "data": {
   "lineno": 646,
   "symbols_in_volume": [
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel._SumKernel.__init__": {
  "data": {
   "lineno": 676,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "set",
    "str",
    "super",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.maybe_get_common_dtype",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel._SumKernel",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel._flatten_summand_list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel._SumKernel._apply": {
  "data": {
   "lineno": 712,
   "symbols_in_volume": [
    "sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel._SumKernel._batch_shape": {
  "data": {
   "lineno": 715,
   "symbols_in_volume": [
    "tensorflow.broadcast_static_shape",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.functools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel._SumKernel._batch_shape_tensor": {
  "data": {
   "lineno": 719,
   "symbols_in_volume": [
    "tensorflow.broadcast_dynamic_shape",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.functools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel._SumKernel.kernels": {
  "data": {
   "lineno": 707,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.__all__": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel._flatten_multiplicand_list": {
  "data": {
   "lineno": 627,
   "symbols_in_volume": [
    "_ProductKernel",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel._flatten_summand_list": {
  "data": {
   "lineno": 608,
   "symbols_in_volume": [
    "_SumKernel",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.contextlib": {
  "data": {
   "shadows": "contextlib"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.operator": {
  "data": {
   "shadows": "operator"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.six": {
  "data": {
   "shadows": "six"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.util": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.positive_semidefinite_kernels"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.IncompletelyDefinedKernel": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.tfpk"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.IncompletelyDefinedKernel.__init__": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "super",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.IncompletelyDefinedKernel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PARAMS_0": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PARAMS_1": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PARAMS_2": {
  "data": {
   "lineno": 37
  },
  "type": "constant"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PARAMS_21": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.createKernelInputs": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.stack"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testApplyOutputWithDynamicShapes": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.TestKernel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testApplyOutputWithStaticShapes": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PARAMS_0",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PARAMS_2",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PARAMS_21",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.TestKernel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testDynamicBatchShape": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "absl.testing.parameterized.named_parameters",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.TestKernel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testDynamicShapesAndValuesOfProduct": {
  "data": {
   "lineno": 356,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.float32",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.TestKernel",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.functools",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.operator"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testDynamicShapesAndValuesOfSum": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": [
    "sum",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.float32",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.TestKernel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testFeatureNdimsExceptions": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "FeatureNdimsKernel",
    "ValueError",
    "absl.testing.parameterized.named_parameters"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testFeatureNdimsExceptions.FeatureNdimsKernel": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.tfpk"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testFeatureNdimsExceptions.FeatureNdimsKernel.__init__": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testMatrixOutputWithDynamicShapes": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.TestKernel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testMatrixOutputWithStaticShapes": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PARAMS_0",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PARAMS_2",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PARAMS_21",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.TestKernel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testNotImplementedExceptions": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "NotImplementedError",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.IncompletelyDefinedKernel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testOperatorOverloads": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": [
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PARAMS_0",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.TestKernel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testProductOfKernelsWithNoneDtypes": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": [
    "TypeError",
    "numpy.float32",
    "numpy.float64",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.TestKernel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testRepr": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "repr",
    "tensorflow.cast",
    "tensorflow.float32",
    "tensorflow.float64",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.TestKernel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testReprUnknownBatchShape": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "repr",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.TestKernel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testStaticBatchShape": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "absl.testing.parameterized.named_parameters",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.TestKernel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testStaticShapesAndValuesOfProduct": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": [
    "tensorflow.float32",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PARAMS_0",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PARAMS_1",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PARAMS_2",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PARAMS_21",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.TestKernel",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.functools",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.operator"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testStaticShapesAndValuesOfSum": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "sum",
    "tensorflow.float32",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PARAMS_0",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PARAMS_1",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PARAMS_2",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PARAMS_21",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.TestKernel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testStr": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "str",
    "tensorflow.cast",
    "tensorflow.float32",
    "tensorflow.float64",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.TestKernel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testStrUnknownBatchShape": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "str",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.TestKernel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.PositiveSemidefiniteKernelTest.testSumOfKernelsWithNoneDtypes": {
  "data": {
   "lineno": 376,
   "symbols_in_volume": [
    "TypeError",
    "numpy.float32",
    "numpy.float64",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.TestKernel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.TestKernel": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.tfpk"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.TestKernel.__init__": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": [
    "super",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.TestKernel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.TestKernel._apply": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "tensorflow.convert_to_tensor",
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.pad_shape_with_ones"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.TestKernel._batch_shape": {
  "data": {
   "lineno": 66
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.TestKernel._batch_shape_tensor": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.TestKernel.multiplier": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.kernels_util": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.operator": {
  "data": {
   "shadows": "operator"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel_test.tfpk": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic.RationalQuadratic": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic.RationalQuadratic.__init__": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v1.assert_positive",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.maybe_get_common_dtype",
    "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic.RationalQuadratic",
    "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic._validate_arg_if_not_none"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic.RationalQuadratic._apply": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": [
    "tensorflow.math.squared_difference",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.pad_shape_with_ones",
    "tensorflow_probability.python.positive_semidefinite_kernels.internal.util.sum_rightmost_ndims_preserving_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic.RationalQuadratic._batch_shape": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "tensorflow.TensorShape",
    "tensorflow.broadcast_static_shape",
    "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic.functools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic.RationalQuadratic._batch_shape_tensor": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "tensorflow.broadcast_dynamic_shape",
    "tensorflow.constant",
    "tensorflow.int32",
    "tensorflow.shape",
    "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic.functools"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic.RationalQuadratic.amplitude": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic.RationalQuadratic.length_scale": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic.RationalQuadratic.scale_mixture_rate": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic._validate_arg_if_not_none": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "assertion",
    "tensorflow.control_dependencies",
    "tensorflow.identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic.psd_kernel": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic.util": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic_test.RationalQuadraticTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic_test.RationalQuadraticTest._rational_quadratic": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "numpy.sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic_test.RationalQuadraticTest.testBatchShape": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.random.uniform",
    "tensorflow.TensorShape",
    "tensorflow_probability.positive_semidefinite_kernels.RationalQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic_test.RationalQuadraticTest.testMismatchedFloatTypesAreBad": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "TypeError",
    "numpy.float32",
    "numpy.float64",
    "tensorflow_probability.positive_semidefinite_kernels.RationalQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic_test.RationalQuadraticTest.testNoneScaleMixture": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.random.seed",
    "numpy.random.uniform",
    "tensorflow_probability.positive_semidefinite_kernels.RationalQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic_test.RationalQuadraticTest.testShapesAreCorrect": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.ones",
    "tensorflow.stack",
    "tensorflow_probability.positive_semidefinite_kernels.RationalQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic_test.RationalQuadraticTest.testValidateArgs": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "tensorflow.errors.InvalidArgumentError",
    "tensorflow_probability.positive_semidefinite_kernels.RationalQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic_test.RationalQuadraticTest.testValuesAreCorrect": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.array",
    "numpy.float32",
    "numpy.float64",
    "numpy.random.seed",
    "numpy.random.uniform",
    "range",
    "tensorflow_probability.positive_semidefinite_kernels.RationalQuadratic"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.rational_quadratic_test.tfpk": {
  "data": {
   "shadows": "tensorflow_probability.positive_semidefinite_kernels"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.remove_undocumented": {
  "data": {
   "shadows": "tensorflow.python.util.all_util.remove_undocumented"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement.SchurComplement": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel.PositiveSemidefiniteKernel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement.SchurComplement.__init__": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow_probability.python.bijectors.cholesky_outer_product.CholeskyOuterProduct",
    "tensorflow_probability.python.bijectors.invert.Invert",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement.SchurComplement",
    "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement._add_diagonal_shift"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement.SchurComplement._batch_shape": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "tensorflow.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement.SchurComplement._batch_shape_tensor": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": [
    "tensorflow.broadcast_dynamic_shape",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement.SchurComplement._covariance_decrease": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "tensorflow.linalg.LinearOperatorFullMatrix",
    "tensorflow.linalg.LinearOperatorLowerTriangular"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement.SchurComplement._is_empty_fixed_inputs": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": [
    "tensorflow.compat.dimension_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement.SchurComplement.apply": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "tensorflow.expand_dims",
    "tensorflow.squeeze"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement.SchurComplement.base_kernel": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement.SchurComplement.cholesky_bijector": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement.SchurComplement.divisor_matrix": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement.SchurComplement.divisor_matrix_cholesky": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement.SchurComplement.fixed_inputs": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement.SchurComplement.matrix": {
  "data": {
   "lineno": 288
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement._add_diagonal_shift": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "tensorflow.linalg.diag_part",
    "tensorflow.linalg.set_diag"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement._validate_arg_if_not_none": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "assertion",
    "tensorflow.control_dependencies",
    "tensorflow.identity"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement.cholesky_outer_product": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.cholesky_outer_product"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement.invert": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors.invert"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement.psd_kernel": {
  "data": {
   "shadows": "tensorflow_probability.python.positive_semidefinite_kernels.positive_semidefinite_kernel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement_test.SchurComplementTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement_test.SchurComplementTest.testBaseKernelNoneDtype": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "TypeError",
    "numpy.arange",
    "numpy.float32",
    "numpy.float64",
    "tensorflow_probability.positive_semidefinite_kernels.ExponentiatedQuadratic",
    "tensorflow_probability.positive_semidefinite_kernels.SchurComplement"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement_test.SchurComplementTest.testEmptyFixedInputs": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.ones",
    "tensorflow.ones",
    "tensorflow_probability.positive_semidefinite_kernels.ExponentiatedQuadratic",
    "tensorflow_probability.positive_semidefinite_kernels.SchurComplement"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement_test.SchurComplementTest.testMismatchedFloatTypesAreBad": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "TypeError",
    "numpy.float32",
    "numpy.float64",
    "numpy.random.uniform",
    "tensorflow_probability.positive_semidefinite_kernels.ExponentiatedQuadratic",
    "tensorflow_probability.positive_semidefinite_kernels.SchurComplement"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement_test.SchurComplementTest.testNoneFixedInputs": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.ones",
    "tensorflow_probability.positive_semidefinite_kernels.ExponentiatedQuadratic",
    "tensorflow_probability.positive_semidefinite_kernels.SchurComplement"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement_test.SchurComplementTest.testShapesAreCorrect": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.ones",
    "numpy.random.uniform",
    "tensorflow.stack",
    "tensorflow_probability.positive_semidefinite_kernels.ExponentiatedQuadratic",
    "tensorflow_probability.positive_semidefinite_kernels.SchurComplement"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement_test.SchurComplementTest.testValuesAreCorrect": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.einsum",
    "numpy.expand_dims",
    "numpy.float64",
    "numpy.random.seed",
    "numpy.random.uniform",
    "range",
    "tensorflow.linalg.LinearOperatorLowerTriangular",
    "tensorflow.linalg.cholesky",
    "tensorflow_probability.positive_semidefinite_kernels.ExponentiatedQuadratic",
    "tensorflow_probability.positive_semidefinite_kernels.SchurComplement"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.positive_semidefinite_kernels.schur_complement_test.tfpk": {
  "data": {
   "shadows": "tensorflow_probability.positive_semidefinite_kernels"
  },
  "type": "import"
 },
 "tensorflow_probability.python.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.remove_undocumented": {
  "data": {
   "shadows": "tensorflow.python.util.all_util.remove_undocumented"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.python.util.all_util.remove_undocumented",
    "tensorflow_probability.python.stats.__all__"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.stats.__all__": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "tensorflow_probability.python.stats.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.auto_correlation": {
  "data": {
   "shadows": "tensorflow_probability.python.stats.sample_stats.auto_correlation"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.cholesky_covariance": {
  "data": {
   "shadows": "tensorflow_probability.python.stats.sample_stats.cholesky_covariance"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.correlation": {
  "data": {
   "shadows": "tensorflow_probability.python.stats.sample_stats.correlation"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.count_integers": {
  "data": {
   "shadows": "tensorflow_probability.python.stats.quantiles.count_integers"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.covariance": {
  "data": {
   "shadows": "tensorflow_probability.python.stats.sample_stats.covariance"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.find_bins": {
  "data": {
   "shadows": "tensorflow_probability.python.stats.quantiles.find_bins"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.histogram": {
  "data": {
   "shadows": "tensorflow_probability.python.stats.quantiles.histogram"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.percentile": {
  "data": {
   "shadows": "tensorflow_probability.python.stats.quantiles.percentile"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.quantiles": {
  "data": {
   "shadows": "tensorflow_probability.python.stats.quantiles.quantiles"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.quantiles.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.stats.quantiles._get_best_effort_ndims": {
  "data": {
   "lineno": 790,
   "symbols_in_volume": [
    "tensorflow.rank",
    "tensorflow_probability.python.stats.quantiles._get_static_ndims"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles._get_static_ndims": {
  "data": {
   "lineno": 726,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow.get_static_value",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles._insert_back_keep_dims": {
  "data": {
   "lineno": 805,
   "symbols_in_volume": [
    "sorted",
    "tensorflow.expand_dims"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles._make_static_axis_non_negative_list": {
  "data": {
   "lineno": 820,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "list",
    "numpy.zeros",
    "tensorflow.get_static_value",
    "tensorflow_probability.python.internal.distribution_util.make_non_negative_axis"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles._move_dims_to_flat_end": {
  "data": {
   "lineno": 847,
   "symbols_in_volume": [
    "list",
    "numpy.prod",
    "range",
    "set",
    "sorted",
    "tensorflow.concat",
    "tensorflow.gather",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow.transpose"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles._sort_tensor": {
  "data": {
   "lineno": 887,
   "symbols_in_volume": [
    "tensorflow.nn.top_k",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.quantiles.count_integers": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "_get_static_ndims",
    "_make_static_axis_non_negative_list",
    "_move_dims_to_flat_end",
    "range",
    "set",
    "sorted",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.gather",
    "tensorflow.int32",
    "tensorflow.map_fn",
    "tensorflow.math.bincount",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow.transpose"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles.count_integers.one_bincount": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "tensorflow.math.bincount"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.quantiles.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.quantiles.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.quantiles.find_bins": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "ValueError",
    "numpy.nan",
    "tensorflow.as_dtype",
    "tensorflow.cast",
    "tensorflow.clip_by_value",
    "tensorflow.compat.dimension_value",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.compat.v1.where",
    "tensorflow.convert_to_tensor",
    "tensorflow.expand_dims",
    "tensorflow.fill",
    "tensorflow.float32",
    "tensorflow.int32",
    "tensorflow.int64",
    "tensorflow.reshape",
    "tensorflow.searchsorted",
    "tensorflow.shape",
    "tensorflow_probability.python.internal.distribution_util.rotate_transpose",
    "tensorflow_probability.python.internal.dtype_util.common_dtype"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles.histogram": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "ValueError",
    "_get_static_ndims",
    "_make_static_axis_non_negative_list",
    "_move_dims_to_flat_end",
    "tensorflow.TensorShape",
    "tensorflow.compat.dimension_value",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.int32",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.stats.quantiles.count_integers",
    "tensorflow_probability.python.stats.quantiles.find_bins"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.quantiles.percentile": {
  "data": {
   "lineno": 404,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "_get_best_effort_ndims",
    "_get_indices",
    "_get_static_ndims",
    "_insert_back_keep_dims",
    "_make_static_axis_non_negative_list",
    "_move_dims_to_flat_end",
    "_sort_tensor",
    "numpy.array",
    "numpy.nan",
    "tensorflow.bfloat16",
    "tensorflow.broadcast_to",
    "tensorflow.cast",
    "tensorflow.compat.v1.assert_greater_equal",
    "tensorflow.compat.v1.assert_less_equal",
    "tensorflow.compat.v1.assert_rank_in",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.compat.v1.where",
    "tensorflow.convert_to_tensor",
    "tensorflow.fill",
    "tensorflow.float16",
    "tensorflow.float32",
    "tensorflow.float64",
    "tensorflow.gather",
    "tensorflow.int32",
    "tensorflow.math.ceil",
    "tensorflow.math.is_nan",
    "tensorflow.maximum",
    "tensorflow.minimum",
    "tensorflow.ones",
    "tensorflow.pad",
    "tensorflow.rank",
    "tensorflow.reduce_any",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow_probability.python.internal.distribution_util.rotate_transpose",
    "tensorflow_probability.python.internal.distribution_util.with_dependencies"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles.percentile._get_indices": {
  "data": {
   "lineno": 545,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.clip_by_value",
    "tensorflow.floor",
    "tensorflow.int32",
    "tensorflow.math.ceil",
    "tensorflow.round",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.quantiles.quantiles": {
  "data": {
   "lineno": 626,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.float64",
    "tensorflow.linspace",
    "tensorflow_probability.python.stats.quantiles.percentile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.quantiles_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "numpy.random.RandomState",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.stats.quantiles_test.BincountTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.stats.quantiles_test.BincountTest.test_2d_arr_axis_0_yes_weights": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": [
    "numpy.int32",
    "tensorflow.math.bincount",
    "tensorflow_probability.python.stats.quantiles_test.rng",
    "tensorflow_probability.stats.count_integers"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.BincountTest.test_3d_arr_axis_1_neg1_no_weights": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "numpy.int32",
    "tensorflow.math.bincount",
    "tensorflow_probability.python.stats.quantiles_test.rng",
    "tensorflow_probability.stats.count_integers"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.BincountTest.test_like_tf_math_bincount_if_axis_is_all_the_dims": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "numpy.int32",
    "tensorflow.math.bincount",
    "tensorflow_probability.python.stats.quantiles_test.rng",
    "tensorflow_probability.stats.count_integers"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.BincountTest.test_like_tf_math_bincount_if_axis_is_none": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "numpy.int32",
    "tensorflow.math.bincount",
    "tensorflow_probability.python.stats.quantiles_test.rng",
    "tensorflow_probability.stats.count_integers"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.FindBinsTest": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.stats.quantiles_test.FindBinsTest.test_1d_array_extend_lower_and_upper": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow_probability.stats.find_bins"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.FindBinsTest.test_1d_array_no_extend_lower_and_upper": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.nan",
    "tensorflow_probability.stats.find_bins"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.FindBinsTest.test_1d_array_no_extend_lower_and_upper_dtype_int64": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "numpy.int64",
    "tensorflow.int64",
    "tensorflow_probability.stats.find_bins"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.FindBinsTest.test_3d_array_has_expected_bins": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.linspace",
    "numpy.ones",
    "numpy.ravel",
    "numpy.zeros",
    "tensorflow_probability.stats.find_bins"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.FindBinsTest.test_large_random_array_has_expected_bin_fractions": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.linspace",
    "numpy.ones",
    "numpy.zeros",
    "tensorflow_probability.python.stats.quantiles_test.rng",
    "tensorflow_probability.stats.find_bins"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.FindBinsTest.test_large_random_array_has_expected_bin_fractions_with_broadcast": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.linspace",
    "numpy.ones",
    "tensorflow_probability.python.stats.quantiles_test.rng",
    "tensorflow_probability.stats.find_bins"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.FindBinsTest.test_too_few_edges_raises": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.stats.find_bins"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.FindBinsTest.test_x_is_2d_array_dtype_int32": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "numpy.int32",
    "tensorflow.int32",
    "tensorflow_probability.stats.find_bins"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.HistogramTest": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.stats.quantiles_test.HistogramTest.test_2d_uniform_reduce_axis_0": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.sqrt",
    "numpy.stack",
    "tensorflow_probability.python.stats.quantiles_test.rng",
    "tensorflow_probability.stats.histogram"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.HistogramTest.test_2d_uniform_reduce_axis_0_edges_is_2d": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": [
    "numpy.float64",
    "numpy.sqrt",
    "numpy.stack",
    "tensorflow_probability.python.stats.quantiles_test.rng",
    "tensorflow_probability.stats.histogram"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.HistogramTest.test_2d_uniform_reduce_axis_1_and_change_dtype": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.float64",
    "numpy.sqrt",
    "numpy.stack",
    "tensorflow_probability.python.stats.quantiles_test.rng",
    "tensorflow_probability.stats.histogram"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.HistogramTest.test_uniform_dist_in_1d_specify_extend_interval_and_dtype": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "numpy.int32",
    "numpy.sqrt",
    "tensorflow.int32",
    "tensorflow_probability.python.stats.quantiles_test.rng",
    "tensorflow_probability.stats.histogram"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithHigherInterpolation": {
  "data": {
   "lineno": 656,
   "symbols_in_volume": [
    "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLinearInterpolation": {
  "data": {
   "lineno": 549,
   "symbols_in_volume": [
    "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLinearInterpolation.test_grads_at_sample_pts_with_no_preserve_gradients": {
  "data": {
   "lineno": 558,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float64",
    "numpy.ones",
    "numpy.pi",
    "numpy.sqrt",
    "tensorflow.constant",
    "tensorflow_probability.distributions.Normal",
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.stats.percentile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLinearInterpolation.test_grads_at_sample_pts_with_yes_preserve_gradients": {
  "data": {
   "lineno": 604,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.float64",
    "numpy.ones",
    "numpy.pi",
    "numpy.sqrt",
    "tensorflow.constant",
    "tensorflow_probability.distributions.Normal",
    "tensorflow_probability.math.value_and_gradient",
    "tensorflow_probability.stats.percentile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLinearInterpolation.test_integer_dtype_raises": {
  "data": {
   "lineno": 554,
   "symbols_in_volume": [
    "TypeError",
    "tensorflow_probability.stats.percentile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_four_dimensional_input": {
  "data": {
   "lineno": 436,
   "symbols_in_volume": [
    "numpy.percentile",
    "tensorflow_probability.python.stats.quantiles_test.rng",
    "tensorflow_probability.stats.percentile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_four_dimensional_input_and_keepdims": {
  "data": {
   "lineno": 468,
   "symbols_in_volume": [
    "numpy.percentile",
    "tensorflow_probability.python.stats.quantiles_test.rng",
    "tensorflow_probability.stats.percentile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_four_dimensional_input_and_keepdims_x_static_ndims_dynamic_sz": {
  "data": {
   "lineno": 497,
   "symbols_in_volume": [
    "numpy.percentile",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.stats.quantiles_test.rng",
    "tensorflow_probability.stats.percentile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_four_dimensional_input_q_vector": {
  "data": {
   "lineno": 446,
   "symbols_in_volume": [
    "numpy.percentile",
    "tensorflow_probability.python.stats.quantiles_test.rng",
    "tensorflow_probability.stats.percentile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_four_dimensional_input_q_vector_and_keepdims": {
  "data": {
   "lineno": 457,
   "symbols_in_volume": [
    "numpy.percentile",
    "tensorflow_probability.python.stats.quantiles_test.rng",
    "tensorflow_probability.stats.percentile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_four_dimensional_input_x_static_ndims_but_dynamic_sizes": {
  "data": {
   "lineno": 486,
   "symbols_in_volume": [
    "numpy.percentile",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.stats.quantiles_test.rng",
    "tensorflow_probability.stats.percentile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_nan_propagation": {
  "data": {
   "lineno": 529,
   "symbols_in_volume": [
    "float",
    "numpy.isnan",
    "numpy.percentile",
    "tensorflow.math.is_nan",
    "tensorflow_probability.stats.percentile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_one_dim_even_input": {
  "data": {
   "lineno": 382,
   "symbols_in_volume": [
    "numpy.percentile",
    "tensorflow_probability.stats.percentile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_one_dim_odd_input": {
  "data": {
   "lineno": 362,
   "symbols_in_volume": [
    "numpy.percentile",
    "tensorflow_probability.stats.percentile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_one_dim_odd_input_vector_q": {
  "data": {
   "lineno": 372,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.percentile",
    "tensorflow_probability.stats.percentile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_simple": {
  "data": {
   "lineno": 406,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.percentile",
    "tensorflow_probability.stats.percentile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_two_dim_even_axis_0": {
  "data": {
   "lineno": 416,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.percentile",
    "tensorflow_probability.stats.percentile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_two_dim_even_input_and_keep_dims_true": {
  "data": {
   "lineno": 426,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.percentile",
    "tensorflow_probability.stats.percentile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_two_dim_odd_input_axis_0": {
  "data": {
   "lineno": 391,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.percentile",
    "tensorflow_probability.stats.percentile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation.test_with_integer_dtype": {
  "data": {
   "lineno": 516,
   "symbols_in_volume": [
    "numpy.percentile",
    "tensorflow.int32",
    "tensorflow_probability.stats.percentile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithMidpointInterpolation": {
  "data": {
   "lineno": 646,
   "symbols_in_volume": [
    "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithLowerInterpolation"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithMidpointInterpolation.test_integer_dtype_raises": {
  "data": {
   "lineno": 651,
   "symbols_in_volume": [
    "TypeError",
    "tensorflow_probability.stats.percentile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithNearestInterpolation": {
  "data": {
   "lineno": 662,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithNearestInterpolation.test_2d_q_raises_dynamic": {
  "data": {
   "lineno": 695,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow_probability.stats.percentile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithNearestInterpolation.test_2d_q_raises_static": {
  "data": {
   "lineno": 690,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.stats.percentile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithNearestInterpolation.test_finds_max_of_long_array": {
  "data": {
   "lineno": 704,
   "symbols_in_volume": [
    "int",
    "tensorflow.linspace",
    "tensorflow_probability.stats.percentile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithNearestInterpolation.test_invalid_interpolation_raises": {
  "data": {
   "lineno": 685,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.stats.percentile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithNearestInterpolation.test_one_dim_even_input": {
  "data": {
   "lineno": 676,
   "symbols_in_volume": [
    "numpy.percentile",
    "tensorflow_probability.stats.percentile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.PercentileTestWithNearestInterpolation.test_one_dim_odd_input": {
  "data": {
   "lineno": 667,
   "symbols_in_volume": [
    "numpy.percentile",
    "tensorflow_probability.stats.percentile"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.QuantilesTest": {
  "data": {
   "lineno": 715,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.stats.quantiles_test.QuantilesTest.test_deciles_of_rank_3_tensor": {
  "data": {
   "lineno": 726,
   "symbols_in_volume": [
    "numpy.linspace",
    "tensorflow_probability.python.stats.quantiles_test.rng",
    "tensorflow_probability.stats.quantiles"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.QuantilesTest.test_quartiles_of_vector": {
  "data": {
   "lineno": 719,
   "symbols_in_volume": [
    "tensorflow.linspace",
    "tensorflow_probability.stats.quantiles"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.quantiles_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.quantiles_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.quantiles_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.quantiles_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.quantiles_test.rng": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.stats.quantiles_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.quantiles_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.quantiles_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.remove_undocumented": {
  "data": {
   "shadows": "tensorflow.python.util.all_util.remove_undocumented"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.sample_stats": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.stats.sample_stats.__all__": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.stats.sample_stats._is_list_like": {
  "data": {
   "lineno": 641,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats._make_list_or_1d_tensor": {
  "data": {
   "lineno": 646,
   "symbols_in_volume": [
    "ValueError",
    "list",
    "numpy.zeros",
    "tensorflow.convert_to_tensor",
    "tensorflow.get_static_value",
    "tensorflow.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats._make_positive_axis": {
  "data": {
   "lineno": 664,
   "symbols_in_volume": [
    "tensorflow.compat.v1.where",
    "tensorflow.convert_to_tensor",
    "tensorflow.get_static_value",
    "tensorflow.int32",
    "tensorflow_probability.python.stats.sample_stats._is_list_like",
    "tensorflow_probability.python.stats.sample_stats._make_list_or_1d_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats._squeeze": {
  "data": {
   "lineno": 686,
   "symbols_in_volume": [
    "tensorflow.compat.v1.setdiff1d",
    "tensorflow.convert_to_tensor",
    "tensorflow.gather",
    "tensorflow.int32",
    "tensorflow.range",
    "tensorflow.rank",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow.squeeze",
    "tensorflow.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.sample_stats.auto_correlation": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "TypeError",
    "min",
    "numpy.float64",
    "numpy.int32",
    "numpy.log",
    "tensorflow.cast",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.complex",
    "tensorflow.convert_to_tensor",
    "tensorflow.get_static_value",
    "tensorflow.math.ceil",
    "tensorflow.math.conj",
    "tensorflow.math.log",
    "tensorflow.minimum",
    "tensorflow.pow",
    "tensorflow.range",
    "tensorflow.reduce_mean",
    "tensorflow.signal.fft",
    "tensorflow.signal.ifft",
    "tensorflow_probability.python.internal.distribution_util.pad",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_rank",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_shape",
    "tensorflow_probability.python.internal.distribution_util.rotate_transpose"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats.cholesky_covariance": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "covariance",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.int32",
    "tensorflow.linalg.cholesky"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats.correlation": {
  "data": {
   "lineno": 465,
   "symbols_in_volume": [
    "stddev",
    "tensorflow.compat.v1.name_scope",
    "tensorflow_probability.python.stats.sample_stats.covariance"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats.covariance": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": [
    "ValueError",
    "_is_list_like",
    "_make_positive_axis",
    "_squeeze",
    "list",
    "numpy.diff",
    "range",
    "set",
    "sorted",
    "tensorflow.cast",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.compat.v1.setdiff1d",
    "tensorflow.compat.v1.where",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.int32",
    "tensorflow.math.conj",
    "tensorflow.math.invert_permutation",
    "tensorflow.matmul",
    "tensorflow.ones",
    "tensorflow.range",
    "tensorflow.rank",
    "tensorflow.reduce_mean",
    "tensorflow.reduce_prod",
    "tensorflow.reshape",
    "tensorflow.shape",
    "tensorflow.size",
    "tensorflow.transpose"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.sample_stats.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.sample_stats.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.sample_stats.stddev": {
  "data": {
   "lineno": 552,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.sqrt",
    "variance"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.sample_stats.util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.sample_stats.variance": {
  "data": {
   "lineno": 602,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow_probability.python.stats.sample_stats.covariance"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "numpy.random.RandomState",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.stats.sample_stats_test.AutoCorrelationTestDynamicShapeFloat32": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.stats.sample_stats_test.AutoCorrelationTestDynamicShapeFloat32.dtype": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": [
    "numpy.float32",
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.AutoCorrelationTestDynamicShapeFloat32.use_static_shape": {
  "data": {
   "lineno": 258,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.AutoCorrelationTestStaticShapeComplex64": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.stats.sample_stats_test.AutoCorrelationTestStaticShapeComplex64.dtype": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "numpy.complex64",
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.AutoCorrelationTestStaticShapeComplex64.use_static_shape": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.AutoCorrelationTestStaticShapeFloat32": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.stats.sample_stats_test.AutoCorrelationTestStaticShapeFloat32.dtype": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "numpy.float32",
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.AutoCorrelationTestStaticShapeFloat32.use_static_shape": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CholeskyCovarianceTest": {
  "data": {
   "lineno": 478,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CholeskyCovarianceTest.test_batch_vector_sampaxis1_eventaxis2": {
  "data": {
   "lineno": 481,
   "symbols_in_volume": [
    "numpy.eye",
    "numpy.squeeze",
    "numpy.stack",
    "tensorflow_probability.python.stats.sample_stats_test.rng",
    "tensorflow_probability.stats.cholesky_covariance"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CorrelationTest": {
  "data": {
   "lineno": 418,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CorrelationTest._np_corr_1d": {
  "data": {
   "lineno": 421,
   "symbols_in_volume": [
    "numpy.sqrt"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CorrelationTest.test_batch_scalar": {
  "data": {
   "lineno": 429,
   "symbols_in_volume": [
    "range",
    "tensorflow_probability.python.stats.sample_stats_test.rng",
    "tensorflow_probability.stats.correlation"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CorrelationTest.test_batch_vector_sampaxis0_eventaxisn1": {
  "data": {
   "lineno": 452,
   "symbols_in_volume": [
    "range",
    "tensorflow_probability.python.stats.sample_stats_test.rng",
    "tensorflow_probability.stats.correlation"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CorrelationTest.test_diagonal_of_correlation_matrix_x_with_x_is_one": {
  "data": {
   "lineno": 443,
   "symbols_in_volume": [
    "numpy.diag",
    "numpy.float32",
    "tensorflow_probability.python.stats.sample_stats_test.rng",
    "tensorflow_probability.stats.correlation"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CovarianceTest": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CovarianceTest._np_cov_1d": {
  "data": {
   "lineno": 266
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CovarianceTest.test_batch_scalar": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "range",
    "tensorflow_probability.python.stats.sample_stats_test.rng",
    "tensorflow_probability.stats.covariance"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CovarianceTest.test_batch_vector_sampaxis02_eventaxis1": {
  "data": {
   "lineno": 335,
   "symbols_in_volume": [
    "numpy.reshape",
    "numpy.transpose",
    "range",
    "tensorflow_probability.python.stats.sample_stats_test.rng",
    "tensorflow_probability.stats.covariance"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CovarianceTest.test_batch_vector_sampaxis03_eventaxis12_dynamic": {
  "data": {
   "lineno": 361,
   "symbols_in_volume": [
    "numpy.reshape",
    "numpy.transpose",
    "range",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.stats.sample_stats_test.rng",
    "tensorflow_probability.stats.covariance"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CovarianceTest.test_batch_vector_sampaxis0_eventaxisn1": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": [
    "range",
    "tensorflow_probability.python.stats.sample_stats_test.rng",
    "tensorflow_probability.stats.covariance"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CovarianceTest.test_batch_vector_sampaxis13_eventaxis2": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": [
    "numpy.reshape",
    "numpy.transpose",
    "range",
    "tensorflow_probability.python.stats.sample_stats_test.rng",
    "tensorflow_probability.stats.covariance"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CovarianceTest.test_batch_vector_shape_dtype_ok": {
  "data": {
   "lineno": 409,
   "symbols_in_volume": [
    "tensorflow.ones",
    "tensorflow_probability.stats.covariance"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CovarianceTest.test_non_contiguous_event_axis_raises": {
  "data": {
   "lineno": 393,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.stats.sample_stats_test.rng",
    "tensorflow_probability.stats.covariance"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.CovarianceTest.test_overlapping_axis_raises": {
  "data": {
   "lineno": 401,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.stats.sample_stats_test.rng",
    "tensorflow_probability.stats.covariance"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.StddevTest": {
  "data": {
   "lineno": 527,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.stats.sample_stats_test.StddevTest.test_independent_uniform_samples": {
  "data": {
   "lineno": 531,
   "symbols_in_volume": [
    "numpy.std",
    "tensorflow_probability.python.stats.sample_stats_test.rng",
    "tensorflow_probability.stats.stddev"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.VarianceTest": {
  "data": {
   "lineno": 507,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.stats.sample_stats_test.VarianceTest.test_independent_uniform_samples": {
  "data": {
   "lineno": 511,
   "symbols_in_volume": [
    "numpy.var",
    "tensorflow_probability.python.stats.sample_stats_test.rng",
    "tensorflow_probability.stats.variance"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "object",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.check_results_versus_brute_force": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "list",
    "min",
    "numpy.concatenate",
    "numpy.conj",
    "numpy.take",
    "range",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map",
    "tensorflow_probability.stats.auto_correlation"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.dtype": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "NotImplementedError",
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.test_axis_0_center_true_max_lags_none": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "numpy.complex64",
    "tensorflow_probability.python.stats.sample_stats_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.test_axis_2_center_true_max_lags_1": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "numpy.complex64",
    "tensorflow_probability.python.stats.sample_stats_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.test_axis_2_center_true_max_lags_100": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "numpy.complex64",
    "tensorflow_probability.python.stats.sample_stats_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.test_axis_n1_center_false_max_lags_none": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": [
    "numpy.complex64",
    "tensorflow_probability.python.stats.sample_stats_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.test_axis_n1_center_false_max_lags_none_normalize_true": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "numpy.complex64",
    "tensorflow_probability.python.stats.sample_stats_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.test_axis_n2_center_false_max_lags_none": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "numpy.complex64",
    "tensorflow_probability.python.stats.sample_stats_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.test_axis_n2_center_false_max_lags_none_normalize_true": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "numpy.complex64",
    "tensorflow_probability.python.stats.sample_stats_test.rng"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.test_constant_sequence_axis_0_max_lags_none_center_false": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map",
    "tensorflow_probability.stats.auto_correlation"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.test_constant_sequence_axis_0_max_lags_none_center_true": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "numpy.array",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map",
    "tensorflow_probability.stats.auto_correlation"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.test_long_orthonormal_sequence_has_corr_length_0": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "numpy.abs",
    "numpy.zeros",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map",
    "tensorflow_probability.python.stats.sample_stats_test.rng",
    "tensorflow_probability.stats.auto_correlation"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.test_normalization": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": [
    "numpy.abs",
    "numpy.zeros",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map",
    "tensorflow_probability.python.stats.sample_stats_test.rng",
    "tensorflow_probability.stats.auto_correlation"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.test_step_function_sequence": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "numpy.diff",
    "numpy.ones",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.executing_eagerly",
    "tensorflow.python.ops.spectral_ops_test_util.fft_kernel_label_map",
    "tensorflow_probability.python.stats.sample_stats_test.rng",
    "tensorflow_probability.stats.auto_correlation"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test._AutoCorrelationTest.use_static_shape": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "NotImplementedError",
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.stats.sample_stats_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.sample_stats_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.sample_stats_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.sample_stats_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.sample_stats_test.rng": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.stats.sample_stats_test.spectral_ops_test_util": {
  "data": {
   "shadows": "tensorflow.python.ops.spectral_ops_test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.sample_stats_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.sample_stats_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.sample_stats_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.stddev": {
  "data": {
   "shadows": "tensorflow_probability.python.stats.sample_stats.stddev"
  },
  "type": "import"
 },
 "tensorflow_probability.python.stats.variance": {
  "data": {
   "shadows": "tensorflow_probability.python.stats.sample_stats.variance"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.python.util.all_util.remove_undocumented",
    "tensorflow_probability.python.sts._allowed_symbols"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.sts.AdditiveStateSpaceModel": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.sum.AdditiveStateSpaceModel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.Autoregressive": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.autoregressive.Autoregressive"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.AutoregressiveStateSpaceModel": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.autoregressive.AutoregressiveStateSpaceModel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.ConstrainedSeasonalStateSpaceModel": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.seasonal.ConstrainedSeasonalStateSpaceModel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.DynamicLinearRegression": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.dynamic_regression.DynamicLinearRegression"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.DynamicLinearRegressionStateSpaceModel": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.dynamic_regression.DynamicLinearRegressionStateSpaceModel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.LinearRegression": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.regression.LinearRegression"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.LocalLevel": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.local_level.LocalLevel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.LocalLevelStateSpaceModel": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.local_level.LocalLevelStateSpaceModel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.LocalLinearTrend": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.local_linear_trend.LocalLinearTrend"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.LocalLinearTrendStateSpaceModel": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.local_linear_trend.LocalLinearTrendStateSpaceModel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.MaskedTimeSeries": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.internal.missing_values_util.MaskedTimeSeries"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.Seasonal": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.seasonal.Seasonal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.SeasonalStateSpaceModel": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.seasonal.SeasonalStateSpaceModel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.SemiLocalLinearTrend": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrend"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.SemiLocalLinearTrendStateSpaceModel": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrendStateSpaceModel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.SparseLinearRegression": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.regression.SparseLinearRegression"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.StructuralTimeSeries": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.Sum": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.sum.Sum"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts._allowed_symbols": {
  "data": {
   "lineno": 50
  },
  "type": "constant"
 },
 "tensorflow_probability.python.sts.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.autoregressive": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.sts.autoregressive.Autoregressive": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.autoregressive.Autoregressive.__init__": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": [
    "ValueError",
    "super",
    "tensorflow.abs",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.float32",
    "tensorflow.math.log",
    "tensorflow.newaxis",
    "tensorflow.ones",
    "tensorflow.shape",
    "tensorflow_probability.python.bijectors.Softplus",
    "tensorflow_probability.python.bijectors.Tanh",
    "tensorflow_probability.python.distributions.LogNormal",
    "tensorflow_probability.python.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.sts.autoregressive.Autoregressive",
    "tensorflow_probability.python.sts.internal.util.canonicalize_observed_time_series_with_mask",
    "tensorflow_probability.python.sts.internal.util.empirical_statistics",
    "tensorflow_probability.python.sts.structural_time_series.Parameter"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.autoregressive.Autoregressive._make_state_space_model": {
  "data": {
   "lineno": 400,
   "symbols_in_volume": [
    "tensorflow_probability.python.sts.autoregressive.AutoregressiveStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.autoregressive.Autoregressive.initial_state_prior": {
  "data": {
   "lineno": 396,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.autoregressive.AutoregressiveStateSpaceModel": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.autoregressive.AutoregressiveStateSpaceModel.__init__": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "ValueError",
    "make_ar_transition_matrix",
    "super",
    "tensorflow.compat.dimension_value",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.newaxis",
    "tensorflow.ones",
    "tensorflow.stack",
    "tensorflow.zeros",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.sts.autoregressive.AutoregressiveStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.autoregressive.AutoregressiveStateSpaceModel.coefficients": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.autoregressive.AutoregressiveStateSpaceModel.level_scale": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.autoregressive.AutoregressiveStateSpaceModel.order": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.autoregressive.Parameter": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.structural_time_series.Parameter"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.autoregressive.StructuralTimeSeries": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.autoregressive.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.autoregressive.dist_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.autoregressive.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.autoregressive.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.autoregressive.make_ar_transition_matrix": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "tensorflow.concat",
    "tensorflow.expand_dims",
    "tensorflow.eye",
    "tensorflow.zeros",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.autoregressive.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.autoregressive.sts_util": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.autoregressive.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.autoregressive.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.autoregressive.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.autoregressive_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.python.sts.autoregressive_test._AutoregressiveStateSpaceModelTest"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.sts.autoregressive_test.AutoregressiveStateSpaceModel": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.AutoregressiveStateSpaceModel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.autoregressive_test.AutoregressiveStateSpaceModelTestDynamicShape32": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.sts.autoregressive_test._AutoregressiveStateSpaceModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.autoregressive_test.AutoregressiveStateSpaceModelTestStaticShape32": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.sts.autoregressive_test._AutoregressiveStateSpaceModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.autoregressive_test.AutoregressiveStateSpaceModelTestStaticShape64": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.sts.autoregressive_test._AutoregressiveStateSpaceModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.autoregressive_test.LocalLevelStateSpaceModel": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.LocalLevelStateSpaceModel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.autoregressive_test._AutoregressiveStateSpaceModelTest": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.autoregressive_test._AutoregressiveStateSpaceModelTest._build_placeholder": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": [
    "numpy.asarray",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.autoregressive_test._AutoregressiveStateSpaceModelTest.testBatchShape": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.ones",
    "numpy.random.randn",
    "tensorflow.shape",
    "tensorflow_probability.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.sts.AutoregressiveStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.autoregressive_test._AutoregressiveStateSpaceModelTest.testEqualsLocalLevel": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.random.randn",
    "tensorflow_probability.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.sts.AutoregressiveStateSpaceModel",
    "tensorflow_probability.python.sts.LocalLevelStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.autoregressive_test._AutoregressiveStateSpaceModelTest.testLogprobCorrectness": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.random.randn",
    "tensorflow.newaxis",
    "tensorflow_probability.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.sts.AutoregressiveStateSpaceModel",
    "tensorflow_probability.python.sts.autoregressive_test.ar_explicit_logp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.autoregressive_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.autoregressive_test.ar_explicit_logp": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "len",
    "numpy.dot",
    "numpy.zeros",
    "range",
    "tensorflow_probability.distributions.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.autoregressive_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.autoregressive_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.autoregressive_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.autoregressive_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.autoregressive_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.autoregressive_test.tfd": {
  "data": {
   "shadows": "tensorflow_probability.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.build_factored_variational_loss": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.fitting.build_factored_variational_loss"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.decompose_by_component": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.decomposition.decompose_by_component"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.decompose_forecast_by_component": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.decomposition.decompose_forecast_by_component"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.decomposition": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.sts.decomposition._decompose_from_posterior_marginals": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "AttributeError",
    "ValueError",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.shape",
    "tensorflow.split",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_value",
    "tensorflow_probability.python.sts.decomposition._split_covariance_into_marginals",
    "tensorflow_probability.python.sts.decomposition.collections",
    "tensorflow_probability.python.sts.internal.util.mix_over_posterior_draws",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.decomposition._split_covariance_into_marginals": {
  "data": {
   "lineno": 29
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.decomposition.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.decomposition.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.decomposition.decompose_by_component": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.shape",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_value",
    "tensorflow_probability.python.sts.decomposition._decompose_from_posterior_marginals",
    "tensorflow_probability.python.sts.internal.util.canonicalize_observed_time_series_with_mask"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.decomposition.decompose_forecast_by_component": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "AttributeError",
    "ValueError",
    "tensorflow.compat.v1.name_scope",
    "tensorflow_probability.python.internal.distribution_util.move_dimension",
    "tensorflow_probability.python.sts.decomposition._decompose_from_posterior_marginals"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.decomposition.dist_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.decomposition.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.decomposition.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.decomposition.sts_util": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.decomposition.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.decomposition_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.linalg",
    "tensorflow.test.main",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.sts.decomposition_test._DecompositionTest"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.sts.decomposition_test.DecompositionTestDynamic64": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow_probability.python.sts.decomposition_test._DecompositionTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.decomposition_test.DecompositionTestStatic32": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.sts.decomposition_test._DecompositionTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.decomposition_test._DecompositionTest": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.decomposition_test._DecompositionTest._build_model_and_params": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "numpy.random.randn",
    "tensorflow_probability.sts.LocalLinearTrend",
    "tensorflow_probability.sts.Seasonal",
    "tensorflow_probability.sts.Sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.decomposition_test._DecompositionTest._build_tensor": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "numpy.asarray",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.decomposition_test._DecompositionTest._check_component_shapes_helper": {
  "data": {
   "lineno": 116
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.decomposition_test._DecompositionTest._get_tensor_shape": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.decomposition_test._DecompositionTest.testDecomposeByComponentSupportsBatchShape": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": [
    "tensorflow_probability.sts.decompose_by_component"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.decomposition_test._DecompositionTest.testDecomposeByComponentSupportsMissingData": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": [
    "numpy.all",
    "numpy.isfinite",
    "numpy.nan",
    "numpy.zeros",
    "tensorflow_probability.sts.MaskedTimeSeries",
    "tensorflow_probability.sts.decompose_by_component"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.decomposition_test._DecompositionTest.testDecomposeForecastByComponentSupportsBatchShape": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "tensorflow_probability.sts.decompose_forecast_by_component",
    "tensorflow_probability.sts.forecast"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.decomposition_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.decomposition_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.decomposition_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.decomposition_test.tfd": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "tensorflow_probability.python.sts.decomposition_test.tfl": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "tensorflow_probability.python.sts.decomposition_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.dynamic_regression": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.sts.dynamic_regression.DynamicLinearRegression": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.dynamic_regression.DynamicLinearRegression.__init__": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.constant",
    "tensorflow.math.log",
    "tensorflow.ones",
    "tensorflow_probability.python.bijectors.Softplus",
    "tensorflow_probability.python.distributions.LogNormal",
    "tensorflow_probability.python.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.prefer_static.shape",
    "tensorflow_probability.python.sts.dynamic_regression.DynamicLinearRegression",
    "tensorflow_probability.python.sts.internal.util.empirical_statistics",
    "tensorflow_probability.python.sts.structural_time_series.Parameter"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.dynamic_regression.DynamicLinearRegression._make_state_space_model": {
  "data": {
   "lineno": 328,
   "symbols_in_volume": [
    "tensorflow_probability.python.sts.dynamic_regression.DynamicLinearRegressionStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.dynamic_regression.DynamicLinearRegression.design_matrix": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.dynamic_regression.DynamicLinearRegression.initial_state_prior": {
  "data": {
   "lineno": 318,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.dynamic_regression.DynamicLinearRegressionStateSpaceModel": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.dynamic_regression.DynamicLinearRegressionStateSpaceModel.__init__": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.linalg.LinearOperatorIdentity",
    "tensorflow.newaxis",
    "tensorflow.ones",
    "tensorflow_probability.python.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.internal.prefer_static.shape",
    "tensorflow_probability.python.sts.dynamic_regression.DynamicLinearRegressionStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.dynamic_regression.DynamicLinearRegressionStateSpaceModel.__init__.observation_matrix_fn": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": [
    "tensorflow.linalg.LinearOperatorFullMatrix",
    "tensorflow.newaxis"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.dynamic_regression.DynamicLinearRegressionStateSpaceModel.drift_scale": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.dynamic_regression.DynamicLinearRegressionStateSpaceModel.observation_noise_scale": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.dynamic_regression.Parameter": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.structural_time_series.Parameter"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.dynamic_regression.StructuralTimeSeries": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.dynamic_regression.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.dynamic_regression.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.dynamic_regression.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.dynamic_regression.prefer_static": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.prefer_static"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.dynamic_regression.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.dynamic_regression.sts_util": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.dynamic_regression.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.dynamic_regression.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.dynamic_regression.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test.DynamicLinearRegression": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.DynamicLinearRegression"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test.DynamicLinearRegressionStateSpaceModel": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.DynamicLinearRegressionStateSpaceModel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test.DynamicRegressionStateSpaceModelTestDynamicShape32": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.dynamic_regression_test._DynamicLinearRegressionStateSpaceModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test.DynamicRegressionStateSpaceModelTestStaticShape32": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.dynamic_regression_test._DynamicLinearRegressionStateSpaceModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test.DynamicRegressionStateSpaceModelTestStaticShape64": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.dynamic_regression_test._DynamicLinearRegressionStateSpaceModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test._DynamicLinearRegressionStateSpaceModelTest": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test._DynamicLinearRegressionStateSpaceModelTest._build_placeholder": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "numpy.asarray",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test._DynamicLinearRegressionStateSpaceModelTest.test_basic_statistics_no_latent_variance": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "numpy.random.randn",
    "tensorflow.linalg.matmul",
    "tensorflow.newaxis",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.sts.DynamicLinearRegressionStateSpaceModel",
    "tensorflow_probability.python.sts.dynamic_regression_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test._DynamicLinearRegressionStateSpaceModelTest.test_initial_state_broadcasts_over_batch": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": [
    "numpy.random.randn",
    "tensorflow_probability.python.sts.DynamicLinearRegressionStateSpaceModel",
    "tensorflow_probability.python.sts.dynamic_regression_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test._DynamicLinearRegressionStateSpaceModelTest.test_matrices_from_component": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "numpy.eye",
    "numpy.random.randn",
    "numpy.square",
    "numpy.zeros",
    "range",
    "tensorflow.newaxis",
    "tensorflow_probability.python.sts.DynamicLinearRegression"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test.tfd": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "tensorflow_probability.python.sts.dynamic_regression_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.fit_with_hmc": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.fitting.fit_with_hmc"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.fitting": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.sts.fitting._build_trainable_posterior": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "initial_loc_fn",
    "tensorflow.compat.v1.get_variable",
    "tensorflow.nn.softplus",
    "tensorflow.ones_like",
    "tensorflow_probability.python.distributions.Independent",
    "tensorflow_probability.python.distributions.Normal",
    "tensorflow_probability.python.distributions.TransformedDistribution"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting._minimize_in_graph": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "tensorflow.compat.v1.train.AdamOptimizer",
    "tensorflow.compat.v1.while_loop",
    "tensorflow.constant"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting._minimize_in_graph.train_loop_body": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": [
    "build_loss_fn",
    "tensorflow.add",
    "tensorflow.executing_eagerly",
    "tensorflow.tuple"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.fitting.build_factored_variational_loss": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "initial_loc_fn",
    "log_prob_fn",
    "seed",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.reduce_sum",
    "tensorflow_probability.python.distributions.SeedStream",
    "tensorflow_probability.python.sts.fitting._build_trainable_posterior",
    "tensorflow_probability.python.sts.fitting.collections",
    "tensorflow_probability.python.sts.internal.util.pad_batch_dimension_for_multiple_chains",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting.build_factored_variational_loss.initial_loc_fn": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "seed",
    "tensorflow_probability.python.sts.fitting.sample_uniform_initial_state"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.fitting.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.fitting.fit_with_hmc": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": [
    "int",
    "make_variational",
    "seed",
    "tensorflow.compat.v1.make_template",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.control_dependencies",
    "tensorflow.convert_to_tensor",
    "tensorflow.stop_gradient",
    "tensorflow_probability.python.distributions.SeedStream",
    "tensorflow_probability.python.mcmc.HamiltonianMonteCarlo",
    "tensorflow_probability.python.mcmc.SimpleStepSizeAdaptation",
    "tensorflow_probability.python.mcmc.TransformedTransitionKernel",
    "tensorflow_probability.python.mcmc.sample_chain",
    "tensorflow_probability.python.sts.fitting._minimize_in_graph",
    "tensorflow_probability.python.sts.internal.util.pad_batch_dimension_for_multiple_chains"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting.fit_with_hmc.make_variational": {
  "data": {
   "lineno": 488,
   "symbols_in_volume": [
    "seed",
    "tensorflow_probability.python.sts.fitting.build_factored_variational_loss"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting.mcmc": {
  "data": {
   "shadows": "tensorflow_probability.python.mcmc"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.fitting.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.fitting.sample_uniform_initial_state": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "tensorflow.random.uniform",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting.sts_util": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.fitting.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.fitting.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.fitting_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.linalg",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.sts.fitting_test.HMCTestsDynamic32": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.fitting_test._HMCTests"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.fitting_test.HMCTestsStatic32": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "absl.testing.parameterized.TestCase",
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.fitting_test._HMCTests"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.fitting_test.HMCTestsStatic32.test_chain_batch_shape": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": [
    "absl.testing.parameterized.parameters",
    "numpy.random.randn",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow_probability.sts.fit_with_hmc",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting_test.HMCTestsStatic64": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.fitting_test._HMCTests"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.fitting_test.VariationalInferenceTests": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.fitting_test.VariationalInferenceTests._build_model": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "tensorflow_probability.sts.LocalLinearTrend",
    "tensorflow_probability.sts.Seasonal",
    "tensorflow_probability.sts.Sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting_test.VariationalInferenceTests.test_multiple_inits_example": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "build_variational_loss",
    "numpy.float32",
    "numpy.mean",
    "numpy.random.randn",
    "range",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v1.train.AdamOptimizer",
    "tensorflow.executing_eagerly"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting_test.VariationalInferenceTests.test_multiple_inits_example.build_variational_loss": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "tensorflow_probability.sts.build_factored_variational_loss"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting_test._HMCTests": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.fitting_test._HMCTests._batch_shape_as_list": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting_test._HMCTests._build_model": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "tensorflow_probability.sts.LocalLinearTrend",
    "tensorflow_probability.sts.Seasonal",
    "tensorflow_probability.sts.Sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting_test._HMCTests._build_tensor": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "numpy.asarray",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting_test._HMCTests._event_shape_as_list": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting_test._HMCTests._shape_as_list": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "list",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting_test._HMCTests.test_basic_hmc_example": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "numpy.mean",
    "numpy.random.randn",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow_probability.sts.fit_with_hmc",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting_test._HMCTests.test_multiple_chains_example": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "list",
    "numpy.bool",
    "numpy.mean",
    "numpy.random.randn",
    "numpy.reshape",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow_probability.sts.MaskedTimeSeries",
    "tensorflow_probability.sts.fit_with_hmc",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.fitting_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.fitting_test.parameterized": {
  "data": {
   "shadows": "absl.testing.parameterized"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.fitting_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.fitting_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.fitting_test.tfd": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "tensorflow_probability.python.sts.fitting_test.tfl": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "tensorflow_probability.python.sts.fitting_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.forecast": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.forecast.forecast"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.forecast._prefer_static_event_ndims": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "tensorflow.size"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.forecast.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.forecast.dist_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.forecast.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.forecast.forecast": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "hasattr",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.newaxis",
    "tensorflow.shape",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.Categorical",
    "tensorflow_probability.python.distributions.MixtureSameFamily",
    "tensorflow_probability.python.distributions.MultivariateNormalFullCovariance",
    "tensorflow_probability.python.internal.distribution_util.move_dimension",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_value",
    "tensorflow_probability.python.sts.forecast._prefer_static_event_ndims",
    "tensorflow_probability.python.sts.internal.util.canonicalize_observed_time_series_with_mask"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.forecast.one_step_predictive": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.shape",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_value",
    "tensorflow_probability.python.sts.internal.util.canonicalize_observed_time_series_with_mask",
    "tensorflow_probability.python.sts.internal.util.mix_over_posterior_draws"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.forecast.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.forecast.sts_util": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.forecast.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.forecast.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.forecast_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.linalg",
    "tensorflow.python.platform.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.sts.forecast_test.ForecastTestDynamic32": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.forecast_test._ForecastTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.forecast_test.ForecastTestStatic32": {
  "data": {
   "lineno": 271,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.forecast_test._ForecastTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.forecast_test.ForecastTestStatic64": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.forecast_test._ForecastTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.forecast_test._ForecastTest": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.forecast_test._ForecastTest._build_model": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "numpy.zeros",
    "tensorflow_probability.python.sts.forecast_test.tfd",
    "tensorflow_probability.sts.Seasonal",
    "tensorflow_probability.sts.Sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.forecast_test._ForecastTest._build_tensor": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "numpy.asarray",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.forecast_test._ForecastTest.test_forecast_correctness": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.concatenate",
    "numpy.sqrt",
    "tensorflow_probability.sts.forecast"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.forecast_test._ForecastTest.test_forecast_from_hmc": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "numpy.random.randn",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow_probability.sts.fit_with_hmc",
    "tensorflow_probability.sts.forecast"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.forecast_test._ForecastTest.test_forecast_with_batch_shape": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": [
    "numpy.random.randn",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow_probability.sts.forecast"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.forecast_test._ForecastTest.test_methods_handle_masked_inputs": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": [
    "numpy.all",
    "numpy.bool",
    "numpy.isfinite",
    "numpy.nan",
    "numpy.random.randn",
    "tensorflow_probability.sts.MaskedTimeSeries",
    "tensorflow_probability.sts.forecast",
    "tensorflow_probability.sts.one_step_predictive"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.forecast_test._ForecastTest.test_one_step_predictive_correctness": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.concatenate",
    "numpy.sqrt",
    "numpy.zeros",
    "tensorflow_probability.sts.one_step_predictive"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.forecast_test._ForecastTest.test_one_step_predictive_with_batch_shape": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "numpy.random.randn",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow_probability.sts.one_step_predictive"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.forecast_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.forecast_test.test": {
  "data": {
   "shadows": "tensorflow.python.platform.test"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.forecast_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.forecast_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.forecast_test.tfd": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "tensorflow_probability.python.sts.forecast_test.tfl": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "tensorflow_probability.python.sts.forecast_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util": {
  "data": {
   "symbols_in_volume": [
    "tensorflow.linalg"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util.MaskedTimeSeries": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": [
    "tensorflow_probability.python.sts.internal.missing_values_util.collections"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util.initial_value_of_masked_time_series": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "NotImplementedError",
    "tensorflow.cast",
    "tensorflow.compat.v1.batch_gather",
    "tensorflow.int32",
    "tensorflow.newaxis",
    "tensorflow.range",
    "tensorflow.reduce_max",
    "tensorflow.shape",
    "tensorflow.squeeze"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util.moments_of_masked_time_series": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "tensorflow.cast",
    "tensorflow.compat.v1.where",
    "tensorflow.int32",
    "tensorflow.newaxis",
    "tensorflow.reduce_sum",
    "tensorflow.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util.tfl": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.python.sts.internal.missing_values_util_test._MissingValuesUtilityTests"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util_test._MissingValuesUtilityTests": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util_test._MissingValuesUtilityTests._build_tensor": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": [
    "numpy.asarray",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util_test._MissingValuesUtilityTests.testInitialValueOfMaskedTimeSeries": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.bool",
    "numpy.random.randn",
    "tensorflow_probability.python.sts.internal.missing_values_util.initial_value_of_masked_time_series"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util_test._MissingValuesUtilityTests.testMoments": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.bool",
    "numpy.mean",
    "numpy.random.randn",
    "numpy.var",
    "tensorflow_probability.python.sts.internal.missing_values_util.moments_of_masked_time_series"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util_test._MissingValuesUtilityTestsDynamicFloat32": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow_probability.python.sts.internal.missing_values_util_test._MissingValuesUtilityTests"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util_test._MissingValuesUtilityTestsStaticFloat64": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.sts.internal.missing_values_util_test._MissingValuesUtilityTests"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util_test.missing_values_util": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.internal.missing_values_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.missing_values_util_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.util": {
  "data": {
   "symbols_in_volume": [
    "tensorflow.linalg"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.sts.internal.util.MultivariateNormalLinearOperator": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.util._maybe_expand_trailing_dim": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": [
    "tensorflow.compat.dimension_value",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.cond",
    "tensorflow.equal",
    "tensorflow.newaxis",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.util.broadcast_batch_shape": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow.broadcast_dynamic_shape",
    "tensorflow.broadcast_static_shape",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions",
    "tensorflow_probability.python.distributions.batch_shape",
    "tensorflow_probability.python.distributions.batch_shape_tensor"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util.canonicalize_observed_time_series_with_mask": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": [
    "hasattr",
    "tensorflow.bool",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.sts.internal.missing_values_util.MaskedTimeSeries",
    "tensorflow_probability.python.sts.internal.util._maybe_expand_trailing_dim"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util.dist_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.util.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.util.empirical_statistics": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "NotImplementedError",
    "canonicalize_observed_time_series_with_mask",
    "tensorflow.bool",
    "tensorflow.broadcast_to",
    "tensorflow.cast",
    "tensorflow.compat.v1.logging.warn",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.nn.moments",
    "tensorflow.shape",
    "tensorflow.sqrt",
    "tensorflow_probability.python.sts.internal.missing_values_util.initial_value_of_masked_time_series",
    "tensorflow_probability.python.sts.internal.missing_values_util.moments_of_masked_time_series"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util.factored_joint_mvn": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.concat",
    "tensorflow.debugging.assert_same_float_dtype",
    "tensorflow.newaxis",
    "tensorflow.ones",
    "tensorflow_probability.python.distributions",
    "tensorflow_probability.python.distributions.mvn_linear_operator.MultivariateNormalLinearOperator",
    "tensorflow_probability.python.sts.internal.util.broadcast_batch_shape",
    "tensorflow_probability.python.sts.internal.util.tfl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util.missing_values_util": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.internal.missing_values_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.util.mix_over_posterior_draws": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.shape",
    "tensorflow.sqrt",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.Categorical",
    "tensorflow_probability.python.distributions.Independent",
    "tensorflow_probability.python.distributions.MixtureSameFamily",
    "tensorflow_probability.python.distributions.Normal",
    "tensorflow_probability.python.internal.distribution_util.move_dimension",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util.pad_batch_dimension_for_multiple_chains": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": [
    "ValueError",
    "canonicalize_observed_time_series_with_mask",
    "do_padding",
    "tensorflow.compat.dimension_value",
    "tensorflow.convert_to_tensor",
    "tensorflow.int32",
    "tensorflow.newaxis",
    "tensorflow.shape",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_rank",
    "tensorflow_probability.python.internal.prefer_static.cond",
    "tensorflow_probability.python.sts.internal.missing_values_util.MaskedTimeSeries"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util.pad_batch_dimension_for_multiple_chains.do_padding": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": [
    "tensorflow.concat",
    "tensorflow.int32",
    "tensorflow.ones",
    "tensorflow.reshape",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util.prefer_static": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.prefer_static"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.util.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.util.sum_mvns": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": [
    "NotImplementedError",
    "all",
    "isinstance",
    "sum",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.sqrt",
    "tensorflow_probability.python.distributions",
    "tensorflow_probability.python.distributions.MultivariateNormalDiag"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.util.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.util.tfl": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.sts.internal.util_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.python.sts.internal.util_test._UtilityTests"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.sts.internal.util_test.MultivariateNormalUtilsTest": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.internal.util_test.MultivariateNormalUtilsTest.test_factored_joint_mvn_broadcast_batch_shape": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.random.standard_normal",
    "random_with_shape",
    "tensorflow.exp",
    "tensorflow.ones_like",
    "tensorflow_probability.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.sts.internal.util.factored_joint_mvn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util_test.MultivariateNormalUtilsTest.test_factored_joint_mvn_diag_full": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "tensorflow.ones",
    "tensorflow.zeros",
    "tensorflow_probability.distributions.MultivariateNormalDiag",
    "tensorflow_probability.distributions.MultivariateNormalFullCovariance",
    "tensorflow_probability.python.sts.internal.util.factored_joint_mvn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util_test.MultivariateNormalUtilsTest.test_sum_mvns": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.float32",
    "numpy.random.standard_normal",
    "random_with_shape",
    "tensorflow_probability.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.sts.internal.util.sum_mvns"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util_test.MultivariateNormalUtilsTest.test_sum_mvns_broadcast_batch_shape": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.float32",
    "numpy.random.standard_normal",
    "random_with_shape",
    "tensorflow_probability.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.sts.internal.util.sum_mvns"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util_test.UtilityTestsDynamicFloat32": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow_probability.python.sts.internal.util_test._UtilityTests"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.internal.util_test.UtilityTestsStaticFloat64": {
  "data": {
   "lineno": 301,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.sts.internal.util_test._UtilityTests"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.internal.util_test._UtilityTests": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.internal.util_test._UtilityTests._build_tensor": {
  "data": {
   "lineno": 279,
   "symbols_in_volume": [
    "numpy.asarray",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util_test._UtilityTests._shape_as_list": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "list",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util_test._UtilityTests.test_broadcast_batch_shape": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": [
    "numpy.ones",
    "numpy.zeros",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.distributions",
    "tensorflow_probability.distributions.Normal",
    "tensorflow_probability.python.sts.internal.util.broadcast_batch_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util_test._UtilityTests.test_dont_pad_batch_dimension_when_input_has_no_sample_shape": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": [
    "numpy.random.randn",
    "tensorflow_probability.distributions.Normal",
    "tensorflow_probability.python.sts.internal.util.pad_batch_dimension_for_multiple_chains",
    "tensorflow_probability.sts.LocalLevel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util_test._UtilityTests.test_empirical_statistics_accepts_masked_values": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.broadcast_to",
    "numpy.random.randn",
    "tensorflow_probability.python.sts.internal.missing_values_util.MaskedTimeSeries",
    "tensorflow_probability.python.sts.internal.util.empirical_statistics"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util_test._UtilityTests.test_maybe_expand_trailing_dim": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "numpy.zeros",
    "tensorflow_probability.python.sts.internal.util._maybe_expand_trailing_dim"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util_test._UtilityTests.test_mix_over_posterior_draws": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "numpy.concatenate",
    "numpy.exp",
    "numpy.mean",
    "numpy.random.randn",
    "tensorflow_probability.python.sts.internal.util.mix_over_posterior_draws"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util_test._UtilityTests.test_pad_batch_dimension_when_input_has_sample_shape": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "numpy.random.randn",
    "tensorflow_probability.distributions.Normal",
    "tensorflow_probability.python.sts.internal.util.pad_batch_dimension_for_multiple_chains",
    "tensorflow_probability.sts.LocalLevel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.internal.util_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.util_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.util_test.missing_values_util": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.internal.missing_values_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.util_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.util_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.util_test.sts_util": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.util_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.util_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.util_test.tfd": {
  "data": {
   "shadows": "tensorflow_probability.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.internal.util_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_level": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.sts.local_level.LocalLevel": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.local_level.LocalLevel.__init__": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": [
    "super",
    "tensorflow.abs",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.math.log",
    "tensorflow.newaxis",
    "tensorflow_probability.python.bijectors.Softplus",
    "tensorflow_probability.python.distributions.LogNormal",
    "tensorflow_probability.python.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.internal.dtype_util.common_dtype",
    "tensorflow_probability.python.sts.internal.util.empirical_statistics",
    "tensorflow_probability.python.sts.local_level.LocalLevel",
    "tensorflow_probability.python.sts.structural_time_series.Parameter"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_level.LocalLevel._make_state_space_model": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": [
    "tensorflow_probability.python.sts.local_level.LocalLevelStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_level.LocalLevel.initial_state_prior": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_level.LocalLevelStateSpaceModel": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.local_level.LocalLevelStateSpaceModel.__init__": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.constant",
    "tensorflow.convert_to_tensor",
    "tensorflow.newaxis",
    "tensorflow_probability.python.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.sts.local_level.LocalLevelStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_level.LocalLevelStateSpaceModel.level_scale": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_level.LocalLevelStateSpaceModel.observation_noise_scale": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_level.Parameter": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.structural_time_series.Parameter"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_level.StructuralTimeSeries": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_level.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_level.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_level.dtype_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.dtype_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_level.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_level.sts_util": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_level.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_level.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_level.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_level_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.linalg",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.sts.local_level_test.LocalLevelStateSpaceModel": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.LocalLevelStateSpaceModel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_level_test.LocalLevelStateSpaceModelTestDynamicShape32": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.local_level_test._LocalLevelStateSpaceModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.local_level_test.LocalLevelStateSpaceModelTestStaticShape32": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.local_level_test._LocalLevelStateSpaceModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.local_level_test.LocalLevelStateSpaceModelTestStaticShape64": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.local_level_test._LocalLevelStateSpaceModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.local_level_test._LocalLevelStateSpaceModelTest": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "object",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.local_level_test._LocalLevelStateSpaceModelTest._build_placeholder": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": [
    "numpy.asarray",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_level_test._LocalLevelStateSpaceModelTest.test_batch_shape": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.random.randn",
    "tensorflow.shape",
    "tensorflow_probability.python.sts.LocalLevelStateSpaceModel",
    "tensorflow_probability.python.sts.local_level_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_level_test._LocalLevelStateSpaceModelTest.test_logprob": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "numpy.newaxis",
    "tensorflow_probability.python.sts.LocalLevelStateSpaceModel",
    "tensorflow_probability.python.sts.local_level_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_level_test._LocalLevelStateSpaceModelTest.test_stats": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.newaxis",
    "numpy.zeros",
    "tensorflow_probability.python.sts.LocalLevelStateSpaceModel",
    "tensorflow_probability.python.sts.local_level_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_level_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_level_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_level_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_level_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_level_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_level_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_level_test.tfd": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.sts.local_level_test.tfl": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.sts.local_level_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_linear_trend": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.sts.local_linear_trend.LocalLinearTrend": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.local_linear_trend.LocalLinearTrend.__init__": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": [
    "super",
    "tensorflow.abs",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.debugging.assert_same_float_dtype",
    "tensorflow.math.log",
    "tensorflow.stack",
    "tensorflow_probability.python.bijectors.Softplus",
    "tensorflow_probability.python.distributions.LogNormal",
    "tensorflow_probability.python.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.distributions.Normal",
    "tensorflow_probability.python.sts.internal.util.empirical_statistics",
    "tensorflow_probability.python.sts.local_linear_trend.LocalLinearTrend",
    "tensorflow_probability.python.sts.structural_time_series.Parameter"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_linear_trend.LocalLinearTrend._make_state_space_model": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": [
    "tensorflow_probability.python.sts.local_linear_trend.LocalLinearTrendStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_linear_trend.LocalLinearTrend.initial_state_prior": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_linear_trend.LocalLinearTrendStateSpaceModel": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.local_linear_trend.LocalLinearTrendStateSpaceModel.__init__": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": [
    "super",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.constant",
    "tensorflow.convert_to_tensor",
    "tensorflow.newaxis",
    "tensorflow.ones",
    "tensorflow.stack",
    "tensorflow_probability.python.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.internal.distribution_util.get_broadcast_shape",
    "tensorflow_probability.python.sts.local_linear_trend.LocalLinearTrendStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_linear_trend.LocalLinearTrendStateSpaceModel.level_scale": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_linear_trend.LocalLinearTrendStateSpaceModel.observation_noise_scale": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_linear_trend.LocalLinearTrendStateSpaceModel.slope_scale": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_linear_trend.Parameter": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.structural_time_series.Parameter"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_linear_trend.StructuralTimeSeries": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_linear_trend.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_linear_trend.dist_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_linear_trend.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_linear_trend.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_linear_trend.sts_util": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_linear_trend.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_linear_trend.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_linear_trend.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.linalg",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test.LocalLinearTrendStateSpaceModel": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.LocalLinearTrendStateSpaceModel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test.LocalLinearTrendStateSpaceModelTestDynamicShape32": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.local_linear_trend_test._LocalLinearTrendStateSpaceModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test.LocalLinearTrendStateSpaceModelTestStaticShape32": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.local_linear_trend_test._LocalLinearTrendStateSpaceModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test.LocalLinearTrendStateSpaceModelTestStaticShape64": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.local_linear_trend_test._LocalLinearTrendStateSpaceModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test._LocalLinearTrendStateSpaceModelTest": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test._LocalLinearTrendStateSpaceModelTest._build_placeholder": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": [
    "numpy.asarray",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test._LocalLinearTrendStateSpaceModelTest.test_batch_shape": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.random.randn",
    "tensorflow.shape",
    "tensorflow_probability.python.sts.LocalLinearTrendStateSpaceModel",
    "tensorflow_probability.python.sts.local_linear_trend_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test._LocalLinearTrendStateSpaceModelTest.test_logprob": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "numpy.newaxis",
    "tensorflow_probability.python.sts.LocalLinearTrendStateSpaceModel",
    "tensorflow_probability.python.sts.local_linear_trend_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test._LocalLinearTrendStateSpaceModelTest.test_stats": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.array",
    "numpy.newaxis",
    "tensorflow_probability.python.sts.LocalLinearTrendStateSpaceModel",
    "tensorflow_probability.python.sts.local_linear_trend_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test.tfd": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test.tfl": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.sts.local_linear_trend_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.one_step_predictive": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.forecast.one_step_predictive"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.regression": {
  "data": {
   "symbols_in_volume": [
    "tensorflow.linalg"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.sts.regression.LinearRegression": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.regression.LinearRegression.__init__": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "isinstance",
    "super",
    "tensorflow.compat.dimension_value",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.debugging.assert_same_float_dtype",
    "tensorflow.ones",
    "tensorflow.zeros",
    "tensorflow_probability.python.bijectors.Identity",
    "tensorflow_probability.python.distributions.StudentT",
    "tensorflow_probability.python.distributions.TransformedDistribution",
    "tensorflow_probability.python.sts.regression.LinearRegression",
    "tensorflow_probability.python.sts.regression.tfl",
    "tensorflow_probability.python.sts.structural_time_series.Parameter"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression.LinearRegression._make_state_space_model": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "tensorflow.newaxis",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel",
    "tensorflow_probability.python.sts.regression._observe_timeseries_fn",
    "tensorflow_probability.python.sts.regression._zero_dimensional_mvndiag"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression.LinearRegression.design_matrix": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression.Parameter": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.structural_time_series.Parameter"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.regression.SparseLinearRegression": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": [
    "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.regression.SparseLinearRegression.__init__": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": [
    "isinstance",
    "super",
    "tensorflow.compat.dimension_value",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.int32",
    "tensorflow.ones",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.bijectors.Identity",
    "tensorflow_probability.python.bijectors.Softplus",
    "tensorflow_probability.python.distributions.HalfNormal",
    "tensorflow_probability.python.distributions.Independent",
    "tensorflow_probability.python.distributions.InverseGamma",
    "tensorflow_probability.python.distributions.Normal",
    "tensorflow_probability.python.sts.regression.SparseLinearRegression",
    "tensorflow_probability.python.sts.regression.tfl",
    "tensorflow_probability.python.sts.structural_time_series.Parameter"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression.SparseLinearRegression._make_state_space_model": {
  "data": {
   "lineno": 488,
   "symbols_in_volume": [
    "tensorflow.newaxis",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel",
    "tensorflow_probability.python.sts.regression._observe_timeseries_fn",
    "tensorflow_probability.python.sts.regression._zero_dimensional_mvndiag"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression.SparseLinearRegression.design_matrix": {
  "data": {
   "lineno": 465,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression.SparseLinearRegression.params_to_weights": {
  "data": {
   "lineno": 474,
   "symbols_in_volume": [
    "tensorflow.newaxis",
    "tensorflow.sqrt"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression.SparseLinearRegression.weights_prior_scale": {
  "data": {
   "lineno": 470,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression.StructuralTimeSeries": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.regression._observe_timeseries_fn": {
  "data": {
   "lineno": 40
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression._observe_timeseries_fn.observation_noise_fn": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "tensorflow.zeros_like",
    "tensorflow_probability.python.distributions.MultivariateNormalDiag"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression._zero_dimensional_mvndiag": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow.newaxis",
    "tensorflow.ones",
    "tensorflow_probability.python.distributions.MultivariateNormalDiag"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.regression.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.regression.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.regression.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.regression.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.regression.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.regression.tfl": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.sts.regression_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.linalg",
    "tensorflow.python.platform.test.main",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.sts.regression_test._LinearRegressionTest",
    "tensorflow_probability.python.sts.regression_test._SparseLinearRegressionTest"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.sts.regression_test.LinearRegression": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.LinearRegression"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.regression_test.LinearRegressionTestDynamicShape32": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow_probability.python.sts.regression_test._LinearRegressionTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.regression_test.LinearRegressionTestStaticShape64": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow_probability.python.sts.regression_test._LinearRegressionTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.regression_test.SparseLinearRegression": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.SparseLinearRegression"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.regression_test.SparseLinearRegressionTestDynamicShape32": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow_probability.python.sts.regression_test._SparseLinearRegressionTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.regression_test.SparseLinearRegressionTestStaticShape64": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow_probability.python.sts.regression_test._SparseLinearRegressionTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.regression_test.Sum": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.Sum"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.regression_test._LinearRegressionTest": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.regression_test._LinearRegressionTest._build_placeholder": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "numpy.asarray",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression_test._LinearRegressionTest.test_basic_statistics": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": [
    "numpy.random.randn",
    "tensorflow.linalg.matmul",
    "tensorflow.newaxis",
    "tensorflow.python.framework.test_util.run_in_graph_and_eager_modes",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.sts.LinearRegression"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression_test._LinearRegressionTest.test_scalar_priors_broadcast": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "numpy.random.randn",
    "tensorflow.python.framework.test_util.run_in_graph_and_eager_modes",
    "tensorflow_probability.python.sts.LinearRegression",
    "tensorflow_probability.python.sts.regression_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression_test._LinearRegressionTest.test_simple_regression_correctness": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "build_loss",
    "numpy.ones",
    "numpy.random.randn",
    "numpy.zeros",
    "range",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.compat.v1.train.AdamOptimizer",
    "tensorflow.compat.v2.Variable",
    "tensorflow.executing_eagerly",
    "tensorflow.linalg.matmul",
    "tensorflow.newaxis",
    "tensorflow.zeros",
    "tensorflow_probability.python.sts.LinearRegression",
    "tensorflow_probability.python.sts.Sum",
    "tensorflow_probability.python.sts.regression_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression_test._LinearRegressionTest.test_simple_regression_correctness.build_loss": {
  "data": {
   "lineno": 88
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression_test._SparseLinearRegressionTest": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.regression_test._SparseLinearRegressionTest._build_placeholder": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": [
    "numpy.asarray",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression_test._SparseLinearRegressionTest.test_builds_without_errors": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.int32",
    "numpy.random.randn",
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow.python.framework.test_util.run_in_graph_and_eager_modes",
    "tensorflow.shape",
    "tensorflow_probability.python.sts.SparseLinearRegression"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.regression_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.regression_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.regression_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.regression_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.regression_test.test": {
  "data": {
   "shadows": "tensorflow.python.platform.test"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.regression_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.regression_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.regression_test.tfd": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.sts.regression_test.tfl": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.sts.regression_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.remove_undocumented": {
  "data": {
   "shadows": "tensorflow.python.util.all_util.remove_undocumented"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.sample_uniform_initial_state": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.fitting.sample_uniform_initial_state"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.seasonal": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.sts.seasonal.ConstrainedSeasonalStateSpaceModel": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.seasonal.ConstrainedSeasonalStateSpaceModel.__init__": {
  "data": {
   "lineno": 410,
   "symbols_in_volume": [
    "ValueError",
    "build_constrained_seasonal_transition_noise",
    "build_effects_to_residuals_matrix",
    "build_is_last_day_of_season",
    "build_seasonal_transition_matrix",
    "numpy.asarray",
    "numpy.squeeze",
    "numpy.tile",
    "super",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.matmul",
    "tensorflow.newaxis",
    "tensorflow.ones",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.sts.seasonal.ConstrainedSeasonalStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.ConstrainedSeasonalStateSpaceModel.drift_scale": {
  "data": {
   "lineno": 492,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.ConstrainedSeasonalStateSpaceModel.num_seasons": {
  "data": {
   "lineno": 502,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.ConstrainedSeasonalStateSpaceModel.num_steps_per_season": {
  "data": {
   "lineno": 507,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.ConstrainedSeasonalStateSpaceModel.observation_noise_scale": {
  "data": {
   "lineno": 497,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.Parameter": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.structural_time_series.Parameter"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.seasonal.Seasonal": {
  "data": {
   "lineno": 694,
   "symbols_in_volume": [
    "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.seasonal.Seasonal.__init__": {
  "data": {
   "lineno": 774,
   "symbols_in_volume": [
    "isinstance",
    "super",
    "tensorflow.abs",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.debugging.assert_same_float_dtype",
    "tensorflow.linalg.LinearOperatorFullMatrix",
    "tensorflow.math.log",
    "tensorflow.stack",
    "tensorflow_probability.python.bijectors.Softplus",
    "tensorflow_probability.python.distributions.LogNormal",
    "tensorflow_probability.python.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.distributions.MultivariateNormalFullCovariance",
    "tensorflow_probability.python.distributions.Normal",
    "tensorflow_probability.python.sts.internal.util.empirical_statistics",
    "tensorflow_probability.python.sts.seasonal.Seasonal",
    "tensorflow_probability.python.sts.seasonal.build_effects_to_residuals_matrix",
    "tensorflow_probability.python.sts.structural_time_series.Parameter"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.Seasonal._make_state_space_model": {
  "data": {
   "lineno": 905,
   "symbols_in_volume": [
    "tensorflow_probability.python.sts.seasonal.ConstrainedSeasonalStateSpaceModel",
    "tensorflow_probability.python.sts.seasonal.SeasonalStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.Seasonal.constrain_mean_effect_to_zero": {
  "data": {
   "lineno": 885,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.Seasonal.initial_state_prior": {
  "data": {
   "lineno": 900,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.Seasonal.num_seasons": {
  "data": {
   "lineno": 890,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.Seasonal.num_steps_per_season": {
  "data": {
   "lineno": 895,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.SeasonalStateSpaceModel": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.seasonal.SeasonalStateSpaceModel.__init__": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "ValueError",
    "build_is_last_day_of_season",
    "build_seasonal_transition_matrix",
    "build_seasonal_transition_noise",
    "numpy.asarray",
    "numpy.squeeze",
    "numpy.tile",
    "super",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.concat",
    "tensorflow.convert_to_tensor",
    "tensorflow.newaxis",
    "tensorflow.ones",
    "tensorflow.zeros",
    "tensorflow_probability.python.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.sts.seasonal.SeasonalStateSpaceModel",
    "tensorflow_probability.python.sts.seasonal.seasonal_init_args",
    "tensorflow_probability.python.util.docstring.expand_docstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.SeasonalStateSpaceModel.drift_scale": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.SeasonalStateSpaceModel.num_seasons": {
  "data": {
   "lineno": 279,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.SeasonalStateSpaceModel.num_steps_per_season": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.SeasonalStateSpaceModel.observation_noise_scale": {
  "data": {
   "lineno": 274,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.StructuralTimeSeries": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.seasonal.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.seasonal.build_constrained_seasonal_transition_noise": {
  "data": {
   "lineno": 628,
   "symbols_in_volume": [
    "tensorflow.concat",
    "tensorflow.newaxis",
    "tensorflow.ones",
    "tensorflow.zeros"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.build_constrained_seasonal_transition_noise.seasonal_transition_noise": {
  "data": {
   "lineno": 683,
   "symbols_in_volume": [
    "is_last_day_of_season",
    "tensorflow.zeros",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.distributions.MultivariateNormalTriL",
    "tensorflow_probability.python.internal.distribution_util.pick_scalar_condition"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.build_effects_to_residuals_matrix": {
  "data": {
   "lineno": 529,
   "symbols_in_volume": [
    "numpy.eye",
    "numpy.linalg.inv",
    "tensorflow.cast"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.build_is_last_day_of_season": {
  "data": {
   "lineno": 513,
   "symbols_in_volume": [
    "numpy.cumsum",
    "numpy.ravel",
    "numpy.sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.build_is_last_day_of_season.is_last_day_of_season": {
  "data": {
   "lineno": 517,
   "symbols_in_volume": [
    "any",
    "tensorflow.equal",
    "tensorflow.math.floormod",
    "tensorflow.reduce_any",
    "tensorflow_probability.python.internal.distribution_util.maybe_get_static_value"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.build_seasonal_transition_matrix": {
  "data": {
   "lineno": 573,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.concatenate",
    "numpy.eye",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.constant",
    "tensorflow.eye",
    "tensorflow.matmul",
    "tensorflow.shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.build_seasonal_transition_matrix.seasonal_transition_matrix": {
  "data": {
   "lineno": 597,
   "symbols_in_volume": [
    "is_last_day_of_season",
    "tensorflow.linalg.LinearOperatorFullMatrix",
    "tensorflow_probability.python.internal.distribution_util.pick_scalar_condition"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.build_seasonal_transition_noise": {
  "data": {
   "lineno": 607,
   "symbols_in_volume": [
    "tensorflow.stack",
    "tensorflow.zeros_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.build_seasonal_transition_noise.seasonal_transition_noise": {
  "data": {
   "lineno": 617,
   "symbols_in_volume": [
    "is_last_day_of_season",
    "tensorflow.zeros",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.internal.distribution_util.pick_scalar_condition"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal.dist_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.seasonal.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.seasonal.docstring_util": {
  "data": {
   "shadows": "tensorflow_probability.python.util.docstring"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.seasonal.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.seasonal.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.seasonal.seasonal_init_args": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "tensorflow_probability.python.sts.seasonal.sts_util": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.seasonal.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.seasonal.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.seasonal.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.seasonal_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.linalg",
    "tensorflow.test.main",
    "tensorflow_probability.distributions",
    "tensorflow_probability.python.sts.seasonal_test._ConstrainedSeasonalStateSpaceModelTest",
    "tensorflow_probability.python.sts.seasonal_test._SeasonalStateSpaceModelTest"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.sts.seasonal_test.ConstrainedSeasonalStateSpaceModel": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.ConstrainedSeasonalStateSpaceModel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.seasonal_test.ConstrainedSeasonalStateSpaceModelTestDynamicShape32": {
  "data": {
   "lineno": 391,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.sts.seasonal_test._ConstrainedSeasonalStateSpaceModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.seasonal_test.ConstrainedSeasonalStateSpaceModelTestStaticShape32": {
  "data": {
   "lineno": 384,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.sts.seasonal_test._ConstrainedSeasonalStateSpaceModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.seasonal_test.ConstrainedSeasonalStateSpaceModelTestStaticShape64": {
  "data": {
   "lineno": 398,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.sts.seasonal_test._ConstrainedSeasonalStateSpaceModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.seasonal_test.SeasonalStateSpaceModel": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.SeasonalStateSpaceModel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.seasonal_test.SeasonalStateSpaceModelTestDynamicShape32": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.sts.seasonal_test._SeasonalStateSpaceModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.seasonal_test.SeasonalStateSpaceModelTestStaticShape32": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.sts.seasonal_test._SeasonalStateSpaceModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.seasonal_test.SeasonalStateSpaceModelTestStaticShape64": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.sts.seasonal_test._SeasonalStateSpaceModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.seasonal_test._ConstrainedSeasonalStateSpaceModelTest": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.seasonal_test._ConstrainedSeasonalStateSpaceModelTest._build_placeholder": {
  "data": {
   "lineno": 367,
   "symbols_in_volume": [
    "numpy.asarray",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal_test._ConstrainedSeasonalStateSpaceModelTest.test_batch_shape": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.random.randn",
    "range",
    "tensorflow_probability.python.sts.ConstrainedSeasonalStateSpaceModel",
    "tensorflow_probability.python.sts.seasonal_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal_test._SeasonalStateSpaceModelTest": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.seasonal_test._SeasonalStateSpaceModelTest._build_placeholder": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": [
    "numpy.asarray",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal_test._SeasonalStateSpaceModelTest.test_batch_shape": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.random.randn",
    "range",
    "tensorflow_probability.python.sts.SeasonalStateSpaceModel",
    "tensorflow_probability.python.sts.seasonal_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal_test._SeasonalStateSpaceModelTest.test_day_of_week_example": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "numpy.ones",
    "range",
    "sum",
    "tensorflow_probability.python.sts.SeasonalStateSpaceModel",
    "tensorflow_probability.python.sts.seasonal_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal_test._SeasonalStateSpaceModelTest.test_month_of_year_example": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "len",
    "numpy.array",
    "numpy.linspace",
    "numpy.ones",
    "range",
    "tensorflow_probability.python.sts.SeasonalStateSpaceModel",
    "tensorflow_probability.python.sts.seasonal_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal_test._SeasonalStateSpaceModelTest.test_month_of_year_with_leap_day_example": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": [
    "len",
    "numpy.array",
    "numpy.linspace",
    "numpy.ones",
    "range",
    "tensorflow_probability.python.sts.SeasonalStateSpaceModel",
    "tensorflow_probability.python.sts.seasonal_test.tfd",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.seasonal_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.seasonal_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.seasonal_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.seasonal_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.seasonal_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.seasonal_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.seasonal_test.tfd": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.sts.seasonal_test.tfl": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.sts.seasonal_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.Parameter": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.structural_time_series.Parameter"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrend": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": [
    "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrend.__init__": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": [
    "super",
    "tensorflow.abs",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.math.log",
    "tensorflow.ones_like",
    "tensorflow.stack",
    "tensorflow_probability.python.bijectors.Identity",
    "tensorflow_probability.python.bijectors.Sigmoid",
    "tensorflow_probability.python.bijectors.Softplus",
    "tensorflow_probability.python.bijectors.Tanh",
    "tensorflow_probability.python.distributions.LogNormal",
    "tensorflow_probability.python.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.distributions.Normal",
    "tensorflow_probability.python.sts.internal.util.empirical_statistics",
    "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrend",
    "tensorflow_probability.python.sts.structural_time_series.Parameter"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrend._make_state_space_model": {
  "data": {
   "lineno": 455,
   "symbols_in_volume": [
    "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrendStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrend.initial_state_prior": {
  "data": {
   "lineno": 450,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrendStateSpaceModel": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrendStateSpaceModel.__init__": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": [
    "semilocal_linear_trend_transition_matrix",
    "semilocal_linear_trend_transition_noise",
    "super",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.constant",
    "tensorflow.convert_to_tensor",
    "tensorflow.newaxis",
    "tensorflow_probability.python.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrendStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrendStateSpaceModel.autoregressive_coef": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrendStateSpaceModel.level_scale": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrendStateSpaceModel.observation_noise_scale": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrendStateSpaceModel.slope_mean": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.SemiLocalLinearTrendStateSpaceModel.slope_scale": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.StructuralTimeSeries": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.dist_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.semilocal_linear_trend_transition_matrix": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "tensorflow.constant",
    "tensorflow.linalg.LinearOperatorFullMatrix",
    "tensorflow.newaxis"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.semilocal_linear_trend_transition_noise": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": [
    "tensorflow.ones",
    "tensorflow.stack",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.internal.distribution_util.get_broadcast_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.sts_util": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test.LocalLinearTrendStateSpaceModel": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.LocalLinearTrendStateSpaceModel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test.SemiLocalLinearTrendStateSpaceModel": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.SemiLocalLinearTrendStateSpaceModel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test.SemiLocalLinearTrendStateSpaceModelTestDynamicShape32": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.semilocal_linear_trend_test._SemiLocalLinearTrendStateSpaceModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test.SemiLocalLinearTrendStateSpaceModelTestStaticShape32": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.semilocal_linear_trend_test._SemiLocalLinearTrendStateSpaceModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test.SemiLocalLinearTrendStateSpaceModelTestStaticShape64": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.semilocal_linear_trend_test._SemiLocalLinearTrendStateSpaceModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test._SemiLocalLinearTrendStateSpaceModelTest": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "object",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test._SemiLocalLinearTrendStateSpaceModelTest._build_placeholder": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": [
    "numpy.asarray",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test._SemiLocalLinearTrendStateSpaceModelTest.test_batch_shape": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.random.randn",
    "tensorflow.shape",
    "tensorflow_probability.python.sts.SemiLocalLinearTrendStateSpaceModel",
    "tensorflow_probability.python.sts.semilocal_linear_trend_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test._SemiLocalLinearTrendStateSpaceModelTest.test_logprob": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": [
    "numpy.newaxis",
    "tensorflow_probability.python.sts.SemiLocalLinearTrendStateSpaceModel",
    "tensorflow_probability.python.sts.semilocal_linear_trend_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test._SemiLocalLinearTrendStateSpaceModelTest.test_matches_locallineartrend": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "tensorflow.newaxis",
    "tensorflow_probability.python.sts.LocalLinearTrendStateSpaceModel",
    "tensorflow_probability.python.sts.SemiLocalLinearTrendStateSpaceModel",
    "tensorflow_probability.python.sts.semilocal_linear_trend_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test._SemiLocalLinearTrendStateSpaceModelTest.test_slope_mean_and_variance": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": [
    "numpy.sqrt",
    "tensorflow.linalg.diag_part",
    "tensorflow_probability.python.sts.SemiLocalLinearTrendStateSpaceModel",
    "tensorflow_probability.python.sts.semilocal_linear_trend_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test.tfd": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.sts.semilocal_linear_trend_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.structural_time_series": {
  "data": {
   "symbols_in_volume": [
    "tensorflow.linalg",
    "tensorflow_probability.python.sts.structural_time_series.collections"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.sts.structural_time_series.Parameter": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries.__init__": {
  "data": {
   "lineno": 46
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries._canonicalize_param_vals_as_map": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": [
    "hasattr",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries.batch_shape": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "property",
    "tensorflow.TensorShape",
    "tensorflow.broadcast_static_shape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries.batch_shape_tensor": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "tensorflow.broadcast_dynamic_shape",
    "tensorflow.constant",
    "tensorflow.int32"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries.joint_log_prob": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.shape",
    "tensorflow_probability.python.internal.distribution_util.prefer_static_value",
    "tensorflow_probability.python.sts.internal.util.canonicalize_observed_time_series_with_mask"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries.joint_log_prob.log_joint_fn": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "sum",
    "tensorflow.maximum",
    "tensorflow.range",
    "tensorflow.rank",
    "tensorflow.reduce_sum",
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries.latent_size": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries.make_state_space_model": {
  "data": {
   "lineno": 134
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries.name": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries.parameters": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries.prior_sample": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "seed",
    "tensorflow.compat.v1.name_scope",
    "tensorflow_probability.python.distributions.SeedStream"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.structural_time_series.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.structural_time_series.distribution_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.distribution_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.structural_time_series.distributions": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.structural_time_series.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.structural_time_series.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.structural_time_series.sts_util": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.structural_time_series.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.structural_time_series.tfl": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "tensorflow_probability.python.sts.structural_time_series_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.bijectors",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.Autoregressive": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.Autoregressive"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.AutoregressiveTest": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.structural_time_series_test._StsTestHarness"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.AutoregressiveTest._build_sts": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": [
    "tensorflow_probability.python.sts.Autoregressive"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.DynamicLinearRegression": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.DynamicLinearRegression"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.DynamicLinearRegressionTest": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.structural_time_series_test._StsTestHarness"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.DynamicLinearRegressionTest._build_sts": {
  "data": {
   "lineno": 381,
   "symbols_in_volume": [
    "tensorflow.random.normal",
    "tensorflow_probability.python.sts.DynamicLinearRegression"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.LinearRegression": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.LinearRegression"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.LinearRegressionTest": {
  "data": {
   "lineno": 326,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.structural_time_series_test._StsTestHarness"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.LinearRegressionTest._build_sts": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": [
    "tensorflow.random.normal",
    "tensorflow.shape",
    "tensorflow_probability.python.sts.LinearRegression",
    "tensorflow_probability.python.sts.Sum",
    "tensorflow_probability.python.sts.internal.util.canonicalize_observed_time_series_with_mask",
    "tensorflow_probability.python.sts.structural_time_series_test.tfb",
    "tensorflow_probability.python.sts.structural_time_series_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.LocalLevel": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.LocalLevel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.LocalLevelTest": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.structural_time_series_test._StsTestHarness"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.LocalLevelTest._build_sts": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": [
    "tensorflow_probability.python.sts.LocalLevel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.LocalLinearTrend": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.LocalLinearTrend"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.LocalLinearTrendTest": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.structural_time_series_test._StsTestHarness"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.LocalLinearTrendTest._build_sts": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": [
    "tensorflow_probability.python.sts.LocalLinearTrend"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.Seasonal": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.Seasonal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SeasonalTest": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.structural_time_series_test._StsTestHarness"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SeasonalTest._build_sts": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": [
    "tensorflow_probability.python.sts.Seasonal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SeasonalWithMultipleStepsAndNoiseTest": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.structural_time_series_test._StsTestHarness"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SeasonalWithMultipleStepsAndNoiseTest._build_sts": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": [
    "tensorflow_probability.sts.Seasonal",
    "tensorflow_probability.sts.Sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SeasonalWithZeroMeanConstraintTest": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.structural_time_series_test._StsTestHarness"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SeasonalWithZeroMeanConstraintTest._build_sts": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": [
    "tensorflow_probability.python.sts.Seasonal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SemiLocalLinearTrend": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.SemiLocalLinearTrend"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SemiLocalLinearTrendTest": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.structural_time_series_test._StsTestHarness"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SemiLocalLinearTrendTest._build_sts": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": [
    "tensorflow_probability.python.sts.SemiLocalLinearTrend"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SparseLinearRegression": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.SparseLinearRegression"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SparseLinearRegressionTest": {
  "data": {
   "lineno": 354,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.structural_time_series_test._StsTestHarness"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SparseLinearRegressionTest._build_sts": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": [
    "tensorflow.random.normal",
    "tensorflow.shape",
    "tensorflow_probability.python.sts.SparseLinearRegression",
    "tensorflow_probability.python.sts.Sum",
    "tensorflow_probability.python.sts.internal.util.canonicalize_observed_time_series_with_mask"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.StructuralTimeSeriesTestsDynamicShape32": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.structural_time_series_test._StructuralTimeSeriesTests"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.StructuralTimeSeriesTestsStaticShape32": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.structural_time_series_test._StructuralTimeSeriesTests"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.StructuralTimeSeriesTestsStaticShape64": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.structural_time_series_test._StructuralTimeSeriesTests"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.Sum": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.Sum"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SumTest": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase",
    "tensorflow_probability.python.sts.structural_time_series_test._StsTestHarness"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.SumTest._build_sts": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": [
    "tensorflow_probability.python.sts.LocalLinearTrend",
    "tensorflow_probability.python.sts.Sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test._StructuralTimeSeriesTests": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test._StructuralTimeSeriesTests._build_placeholder": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "numpy.asarray",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test._StructuralTimeSeriesTests.test_broadcast_batch_shapes": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "numpy.random.randn",
    "tensorflow.ones_like",
    "tensorflow_probability.python.sts.LocalLinearTrend",
    "tensorflow_probability.python.sts.Seasonal",
    "tensorflow_probability.python.sts.Sum",
    "tensorflow_probability.python.sts.structural_time_series_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test._StsTestHarness": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.structural_time_series_test._StsTestHarness.setUp": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "numpy.random.seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test._StsTestHarness.test_default_priors_follow_batch_shapes": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.random.randn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test._StsTestHarness.test_log_joint": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "enumerate",
    "log_joint_fn",
    "numpy.float32",
    "numpy.random.standard_normal",
    "tensorflow.TensorShape"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test._StsTestHarness.test_log_joint_with_missing_observations": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "log_joint_fn",
    "numpy.array",
    "numpy.bool",
    "numpy.float32",
    "numpy.inf",
    "numpy.isfinite",
    "numpy.nan",
    "tensorflow.TensorShape",
    "tensorflow_probability.sts.MaskedTimeSeries"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test._StsTestHarness.test_prior_sample": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "zip"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test._StsTestHarness.test_state_space_model": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "tensorflow.ones",
    "tensorflow.zeros",
    "tensorflow_probability.python.sts.structural_time_series_test.tfd"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.sts_util": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.tfb": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.tfd": {
  "data": {
   "lineno": 37
  },
  "type": "constant"
 },
 "tensorflow_probability.python.sts.structural_time_series_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.sum": {
  "data": {
   "symbols_in_volume": [
    "tensorflow.linalg"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.sts.sum.AdditiveStateSpaceModel": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "tensorflow_probability.python.distributions.LinearGaussianStateSpaceModel"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.sum.AdditiveStateSpaceModel.__init__": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": [
    "ValueError",
    "all",
    "len",
    "super",
    "tensorflow.compat.v1.assert_equal",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.concat",
    "tensorflow.control_dependencies",
    "tensorflow.convert_to_tensor",
    "tensorflow.debugging.assert_same_float_dtype",
    "tensorflow.get_static_value",
    "tensorflow.identity",
    "tensorflow.int32",
    "tensorflow.newaxis",
    "tensorflow.ones",
    "tensorflow_probability.python.sts.internal.util.broadcast_batch_shape",
    "tensorflow_probability.python.sts.internal.util.factored_joint_mvn",
    "tensorflow_probability.python.sts.sum.AdditiveStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum.AdditiveStateSpaceModel.__init__.observation_matrix_fn": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "tensorflow.concat",
    "tensorflow_probability.python.sts.sum.tfl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum.AdditiveStateSpaceModel.__init__.observation_noise_fn": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": [
    "tensorflow.zeros_like",
    "tensorflow_probability.python.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.sts.internal.util.sum_mvns"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum.AdditiveStateSpaceModel.__init__.transition_matrix_fn": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": [
    "tensorflow_probability.python.sts.sum.tfl"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum.AdditiveStateSpaceModel.__init__.transition_noise_fn": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": [
    "tensorflow_probability.python.sts.internal.util.factored_joint_mvn"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum.Parameter": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.structural_time_series.Parameter"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.sum.StructuralTimeSeries": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.sum.Sum": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": [
    "tensorflow_probability.python.sts.structural_time_series.StructuralTimeSeries"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.sum.Sum.__init__": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": [
    "ValueError",
    "len",
    "set",
    "sum",
    "super",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.math.log",
    "tensorflow_probability.python.bijectors.Softplus",
    "tensorflow_probability.python.distributions.LogNormal",
    "tensorflow_probability.python.sts.internal.util.empirical_statistics",
    "tensorflow_probability.python.sts.structural_time_series.Parameter",
    "tensorflow_probability.python.sts.sum.Sum",
    "tensorflow_probability.python.sts.sum.collections"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum.Sum._make_state_space_model": {
  "data": {
   "lineno": 518,
   "symbols_in_volume": [
    "tensorflow_probability.python.sts.sum.AdditiveStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum.Sum.components": {
  "data": {
   "lineno": 460,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum.Sum.components_by_name": {
  "data": {
   "lineno": 465,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum.Sum.constant_offset": {
  "data": {
   "lineno": 470,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum.Sum.make_component_state_space_models": {
  "data": {
   "lineno": 475,
   "symbols_in_volume": [
    "len",
    "tensorflow.compat.v1.name_scope"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.sum.collections": {
  "data": {
   "shadows": "collections"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.sum.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.sum.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.sum.sts_util": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.internal.util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.sum.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.sum.tfb": {
  "data": {
   "shadows": "tensorflow_probability.python.bijectors"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.sum.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.sum.tfl": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.sts.sum_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.linalg",
    "tensorflow.test.main",
    "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.sts.sum_test.AdditiveStateSpaceModel": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.AdditiveStateSpaceModel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.sum_test.AdditiveStateSpaceModelTestDynamicShape32": {
  "data": {
   "lineno": 428,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.sum_test.AdditiveStateSpaceModelTestDynamicShape32.test_dynamic_num_timesteps": {
  "data": {
   "lineno": 432,
   "symbols_in_volume": [
    "tensorflow.compat.v1.placeholder_with_default",
    "tensorflow_probability.python.sts.AdditiveStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test.AdditiveStateSpaceModelTestStaticShape32": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.sum_test.AdditiveStateSpaceModelTestStaticShape64": {
  "data": {
   "lineno": 451,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.sum_test.LocalLinearTrendStateSpaceModel": {
  "data": {
   "shadows": "tensorflow_probability.python.sts.LocalLinearTrendStateSpaceModel"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest._build_placeholder": {
  "data": {
   "lineno": 372,
   "symbols_in_volume": [
    "numpy.asarray",
    "tensorflow.compat.v1.placeholder_with_default"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest._dummy_model": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": [
    "numpy.eye",
    "numpy.ones",
    "numpy.random.standard_normal",
    "tensorflow_probability.distributions.LinearGaussianStateSpaceModel",
    "tensorflow_probability.distributions.MultivariateNormalDiag"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest.test_batch_shape": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": [
    "tensorflow.shape",
    "tensorflow_probability.python.sts.AdditiveStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest.test_batch_shape_ignores_component_state_priors": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": [
    "numpy.ones",
    "tensorflow_probability.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.sts.AdditiveStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest.test_broadcasting_batch_shape": {
  "data": {
   "lineno": 215,
   "symbols_in_volume": [
    "tensorflow.shape",
    "tensorflow_probability.python.sts.AdditiveStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest.test_broadcasting_correctness": {
  "data": {
   "lineno": 238,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.ones",
    "numpy.random.randn",
    "tensorflow_probability.distributions.LinearGaussianStateSpaceModel",
    "tensorflow_probability.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.sts.AdditiveStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest.test_constant_offset": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": [
    "print",
    "tensorflow_probability.python.sts.AdditiveStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest.test_identity": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "numpy.newaxis",
    "tensorflow_probability.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.sts.AdditiveStateSpaceModel",
    "tensorflow_probability.python.sts.LocalLinearTrendStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest.test_mismatched_dtype_error": {
  "data": {
   "lineno": 310,
   "symbols_in_volume": [
    "Exception",
    "numpy.float16",
    "tensorflow_probability.python.sts.AdditiveStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest.test_mismatched_num_timesteps_error": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "ValueError",
    "tensorflow_probability.python.sts.AdditiveStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest.test_mismatched_observation_size_error": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": [
    "Exception",
    "tensorflow_probability.python.sts.AdditiveStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest.test_multivariate_observations": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": [
    "tensorflow.shape",
    "tensorflow_probability.python.sts.AdditiveStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest.test_nesting_additive_ssms": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": [
    "tensorflow_probability.python.sts.AdditiveStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test._AdditiveStateSpaceModelTest.test_sum_of_local_linear_trends": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.newaxis",
    "numpy.sqrt",
    "tensorflow_probability.distributions.MultivariateNormalDiag",
    "tensorflow_probability.python.sts.AdditiveStateSpaceModel",
    "tensorflow_probability.python.sts.LocalLinearTrendStateSpaceModel"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.sts.sum_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.sum_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.sum_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.sum_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.sum_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.sum_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.sum_test.tfd": {
  "data": {
   "shadows": "tensorflow_probability.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.sts.sum_test.tfl": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "tensorflow_probability.python.trainable_distributions": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.python.util.all_util.remove_undocumented",
    "tensorflow_probability.python.trainable_distributions._allowed_symbols"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.trainable_distributions._allowed_symbols": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.trainable_distributions.bernoulli": {
  "data": {
   "shadows": "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.bernoulli"
  },
  "type": "import"
 },
 "tensorflow_probability.python.trainable_distributions.multivariate_normal_tril": {
  "data": {
   "shadows": "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.multivariate_normal_tril"
  },
  "type": "import"
 },
 "tensorflow_probability.python.trainable_distributions.normal": {
  "data": {
   "shadows": "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.normal"
  },
  "type": "import"
 },
 "tensorflow_probability.python.trainable_distributions.poisson": {
  "data": {
   "shadows": "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.poisson"
  },
  "type": "import"
 },
 "tensorflow_probability.python.trainable_distributions.remove_undocumented": {
  "data": {
   "shadows": "tensorflow.python.util.all_util.remove_undocumented"
  },
  "type": "import"
 },
 "tensorflow_probability.python.trainable_distributions.softplus_and_shift": {
  "data": {
   "shadows": "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.softplus_and_shift"
  },
  "type": "import"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.__all__": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.bernoulli": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "layer_fn",
    "tensorflow.compat.v1.layers.dense",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.squeeze",
    "tensorflow_probability.python.distributions.Bernoulli"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.multivariate_normal_tril": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": [
    "layer_fn",
    "loc_fn",
    "scale_fn",
    "tensorflow.compat.v1.layers.dense",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.distributions.MultivariateNormalTriL",
    "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.tril_with_diag_softplus_and_shift"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.normal": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": [
    "callable",
    "layer_fn",
    "loc_fn",
    "scale_fn",
    "tensorflow.cast",
    "tensorflow.compat.v1.layers.dense",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.squeeze",
    "tensorflow_probability.python.distributions.Normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.poisson": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": [
    "layer_fn",
    "log_rate_fn",
    "tensorflow.compat.v1.layers.dense",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.squeeze",
    "tensorflow_probability.python.distributions.Poisson"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.softplus_and_shift": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.nn.softplus"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.tril_with_diag_softplus_and_shift": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.linalg.diag_part",
    "tensorflow.linalg.set_diag",
    "tensorflow_probability.python.distributions.fill_triangular",
    "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.softplus_and_shift"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestBernoulli": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestBernoulli.setUp": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "numpy.random.seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestBernoulli.testDefaultsYieldCorrectShape": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": [
    "numpy.concatenate",
    "numpy.random.randn",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.constant",
    "tensorflow_probability.trainable_distributions.bernoulli"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestBernoulli.testNonDefaultsYieldCorrectShapeAndValues": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "numpy.concatenate",
    "numpy.random.randn",
    "numpy.sum",
    "tensorflow.constant",
    "tensorflow.reduce_sum",
    "tensorflow_probability.trainable_distributions.bernoulli"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestMVNTriL": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestMVNTriL.setUp": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "numpy.random.seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestMVNTriL.testDefaultsYieldCorrectShapesAndValues": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "numpy.bool",
    "numpy.concatenate",
    "numpy.ones_like",
    "numpy.random.randn",
    "numpy.zeros_like",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.constant",
    "tensorflow.linalg.band_part",
    "tensorflow.linalg.diag_part",
    "tensorflow.linalg.set_diag",
    "tensorflow.zeros",
    "tensorflow_probability.trainable_distributions.multivariate_normal_tril"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestMVNTriL.testNonDefaultsYieldCorrectShapesAndValues": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "numpy.concatenate",
    "numpy.random.randn",
    "numpy.zeros_like",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.constant",
    "tensorflow.linalg.band_part",
    "tensorflow.ones",
    "tensorflow.ones_like",
    "tensorflow.zeros_like",
    "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.tfd",
    "tensorflow_probability.trainable_distributions.multivariate_normal_tril"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestMakePositiveFunctions": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestMakePositiveFunctions.softplus": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.log1p"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestMakePositiveFunctions.testPositiveTriLWorks": {
  "data": {
   "lineno": 301,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.float32",
    "tensorflow_probability.trainable_distributions.tril_with_diag_softplus_and_shift"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestMakePositiveFunctions.testPositiveWorks": {
  "data": {
   "lineno": 319,
   "symbols_in_volume": [
    "numpy.arange",
    "numpy.float32",
    "tensorflow_probability.trainable_distributions.softplus_and_shift"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestNormal": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestNormal.setUp": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "numpy.random.seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestNormal.testDefaultsYieldCorrectShape": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "numpy.concatenate",
    "numpy.random.randn",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.constant",
    "tensorflow_probability.trainable_distributions.normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestNormal.testNonDefaultsYieldCorrectShapeAndValues": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": [
    "numpy.concatenate",
    "numpy.random.randn",
    "numpy.sum",
    "tensorflow.constant",
    "tensorflow.reduce_sum",
    "tensorflow_probability.trainable_distributions.normal"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestPoisson": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestPoisson.setUp": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": [
    "numpy.random.seed"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestPoisson.testDefaultsYieldCorrectShape": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": [
    "numpy.concatenate",
    "numpy.random.randn",
    "tensorflow.compat.v1.global_variables_initializer",
    "tensorflow.constant",
    "tensorflow_probability.trainable_distributions.poisson"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.TestPoisson.testNonDefaultsYieldCorrectShapeAndValues": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "numpy.concatenate",
    "numpy.random.randn",
    "numpy.sum",
    "tensorflow.constant",
    "tensorflow.reduce_sum",
    "tensorflow_probability.trainable_distributions.poisson"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.tfd": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.trainable_distributions.tril_with_diag_softplus_and_shift": {
  "data": {
   "shadows": "tensorflow_probability.python.trainable_distributions.trainable_distributions_lib.tril_with_diag_softplus_and_shift"
  },
  "type": "import"
 },
 "tensorflow_probability.python.util": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.util.docstring": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.util.docstring.__all__": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "tensorflow_probability.python.util.docstring.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.util.docstring.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.util.docstring.expand_docstring": {
  "data": {
   "lineno": 30
  },
  "type": "function"
 },
 "tensorflow_probability.python.util.docstring.expand_docstring._fn_wrapped": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "str",
    "tensorflow_probability.python.util.docstring.inspect",
    "tensorflow_probability.python.util.docstring.re",
    "tensorflow_probability.python.util.docstring.six"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.util.docstring.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "tensorflow_probability.python.util.docstring.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.util.docstring.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "tensorflow_probability.python.util.docstring.six": {
  "data": {
   "shadows": "six"
  },
  "type": "import"
 },
 "tensorflow_probability.python.util.docstring_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.util.docstring_test.DocstringUtil": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "tensorflow.test.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.util.docstring_test.DocstringUtil._testClassInit": {
  "data": {
   "lineno": 56
  },
  "type": "function"
 },
 "tensorflow_probability.python.util.docstring_test.DocstringUtil._testClassInit.Foo": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.util.docstring_test.DocstringUtil._testClassInit.Foo.__init__": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "tensorflow_probability.python.util.docstring.expand_docstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.util.docstring_test.DocstringUtil._testFunction": {
  "data": {
   "lineno": 28
  },
  "type": "function"
 },
 "tensorflow_probability.python.util.docstring_test.DocstringUtil._testFunction.foo": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": [
    "tensorflow_probability.python.util.docstring.expand_docstring"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.util.docstring_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.util.docstring_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.util.docstring_test.docstring_util": {
  "data": {
   "shadows": "tensorflow_probability.python.util.docstring"
  },
  "type": "import"
 },
 "tensorflow_probability.python.util.docstring_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.util.docstring_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.version": {
  "data": {
   "symbols_in_volume": [
    "tensorflow_probability.python.version._MAJOR_VERSION",
    "tensorflow_probability.python.version._MINOR_VERSION",
    "tensorflow_probability.python.version._PATCH_VERSION",
    "tensorflow_probability.python.version._VERSION_SUFFIX"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.version._MAJOR_VERSION": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "tensorflow_probability.python.version._MINOR_VERSION": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "tensorflow_probability.python.version._PATCH_VERSION": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "tensorflow_probability.python.version._VERSION_SUFFIX": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "tensorflow_probability.python.version.__version__": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "tensorflow_probability.python.vi": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.python.util.all_util.remove_undocumented",
    "tensorflow_probability.python.vi._allowed_symbols"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.vi._allowed_symbols": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "tensorflow_probability.python.vi.amari_alpha": {
  "data": {
   "shadows": "tensorflow_probability.python.vi.csiszar_divergence.amari_alpha"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.arithmetic_geometric": {
  "data": {
   "shadows": "tensorflow_probability.python.vi.csiszar_divergence.arithmetic_geometric"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.chi_square": {
  "data": {
   "shadows": "tensorflow_probability.python.vi.csiszar_divergence.chi_square"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.csiszar_divergence": {
  "data": {},
  "type": "module"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.__all__": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.amari_alpha": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "TypeError",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.exp",
    "tensorflow.is_tensor",
    "tensorflow.math.expm1"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.arithmetic_geometric": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": [
    "numpy.log",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.exp",
    "tensorflow.nn.softplus"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.chi_square": {
  "data": {
   "lineno": 587,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.math.expm1"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.csiszar_vimco": {
  "data": {
   "lineno": 908,
   "symbols_in_volume": [
    "ValueError",
    "csiszar_vimco_helper",
    "f",
    "p_log_prob",
    "stop",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.reduce_mean",
    "tensorflow.reduce_sum",
    "tensorflow.stop_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.csiszar_vimco_helper": {
  "data": {
   "lineno": 1008,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.asarray",
    "numpy.inf",
    "numpy.log",
    "tensorflow.cast",
    "tensorflow.compat.dimension_value",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.compat.v1.where",
    "tensorflow.convert_to_tensor",
    "tensorflow.equal",
    "tensorflow.fill",
    "tensorflow.logical_and",
    "tensorflow.math.log",
    "tensorflow.newaxis",
    "tensorflow.not_equal",
    "tensorflow.ones_like",
    "tensorflow.pad",
    "tensorflow.rank",
    "tensorflow.reduce_logsumexp",
    "tensorflow.reduce_max",
    "tensorflow.reduce_sum",
    "tensorflow.shape",
    "tensorflow.stack",
    "tensorflow.tile",
    "tensorflow_probability.python.distributions.softplus_inverse"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.dual_csiszar_function": {
  "data": {
   "lineno": 663,
   "symbols_in_volume": [
    "csiszar_function",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.exp"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.jeffreys": {
  "data": {
   "lineno": 549,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.math.expm1"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.jensen_shannon": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": [
    "numpy.log",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.exp",
    "tensorflow.nn.softplus"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.kl_forward": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow_probability.python.vi.csiszar_divergence.amari_alpha"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.kl_reverse": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow_probability.python.vi.csiszar_divergence.amari_alpha"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.log1p_abs": {
  "data": {
   "lineno": 505,
   "symbols_in_volume": [
    "tensorflow.abs",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.math.expm1"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.modified_gan": {
  "data": {
   "lineno": 619,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.math.expm1",
    "tensorflow.nn.softplus"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.monte_carlo": {
  "data": {
   "shadows": "tensorflow_probability.python.monte_carlo"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.monte_carlo_csiszar_f_divergence": {
  "data": {
   "lineno": 782,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "all",
    "any",
    "callable",
    "f",
    "p_log_prob",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.nest.flatten",
    "tensorflow_probability.python.distributions.FULLY_REPARAMETERIZED",
    "tensorflow_probability.python.monte_carlo.expectation"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.pearson": {
  "data": {
   "lineno": 360,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.math.expm1",
    "tensorflow.square"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.squared_hellinger": {
  "data": {
   "lineno": 392,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.vi.csiszar_divergence.pearson"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.symmetrized_csiszar_function": {
  "data": {
   "lineno": 711,
   "symbols_in_volume": [
    "csiszar_function",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow_probability.python.vi.csiszar_divergence.dual_csiszar_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.t_power": {
  "data": {
   "lineno": 462,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.compat.v1.where",
    "tensorflow.convert_to_tensor",
    "tensorflow.logical_and",
    "tensorflow.math.expm1",
    "tensorflow.ones_like"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.tfd": {
  "data": {
   "shadows": "tensorflow_probability.python.distributions"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.total_variation": {
  "data": {
   "lineno": 328,
   "symbols_in_volume": [
    "tensorflow.abs",
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.math.expm1"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence.triangular": {
  "data": {
   "lineno": 427,
   "symbols_in_volume": [
    "tensorflow.compat.v1.name_scope",
    "tensorflow.convert_to_tensor",
    "tensorflow.exp",
    "tensorflow_probability.python.vi.csiszar_divergence.pearson"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test": {
  "data": {
   "symbols_in_volume": [
    "__name__",
    "tensorflow.test.main",
    "tensorflow_probability.distributions"
   ]
  },
  "type": "module"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.AmariAlphaTest": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.AmariAlphaTest.setUp": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.linspace"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.AmariAlphaTest.test_at_zero": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "tensorflow_probability.vi.amari_alpha"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.AmariAlphaTest.test_correct_when_alpha0": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "tensorflow_probability.vi.amari_alpha"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.AmariAlphaTest.test_correct_when_alpha1": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": [
    "tensorflow_probability.vi.amari_alpha"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.AmariAlphaTest.test_correct_when_alpha_not_01": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "tensorflow_probability.vi.amari_alpha"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.ArithmeticGeometricMeanTest": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.ArithmeticGeometricMeanTest.setUp": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.linspace"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.ArithmeticGeometricMeanTest.test_at_zero": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "numpy.log",
    "tensorflow_probability.vi.arithmetic_geometric"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.ArithmeticGeometricMeanTest.test_correct": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.sqrt",
    "tensorflow_probability.vi.arithmetic_geometric"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.ArithmeticGeometricMeanTest.test_symmetric": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": [
    "tensorflow_probability.vi.arithmetic_geometric",
    "tensorflow_probability.vi.symmetrized_csiszar_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.ChiSquareTest": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.ChiSquareTest.setUp": {
  "data": {
   "lineno": 372,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.linspace"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.ChiSquareTest.test_at_zero": {
  "data": {
   "lineno": 376,
   "symbols_in_volume": [
    "tensorflow_probability.vi.chi_square"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.ChiSquareTest.test_correct": {
  "data": {
   "lineno": 379,
   "symbols_in_volume": [
    "tensorflow_probability.vi.chi_square"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.CsiszarVIMCOTest": {
  "data": {
   "lineno": 740,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.CsiszarVIMCOTest._csiszar_vimco_helper": {
  "data": {
   "lineno": 743,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.exp",
    "numpy.float128",
    "numpy.log",
    "numpy.mean",
    "numpy.sum",
    "range"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.CsiszarVIMCOTest._csiszar_vimco_helper_grad": {
  "data": {
   "lineno": 772,
   "symbols_in_volume": [
    "len",
    "numpy.diag",
    "numpy.sum"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.CsiszarVIMCOTest.test_vimco_and_gradient": {
  "data": {
   "lineno": 909,
   "symbols_in_volume": [
    "f",
    "int",
    "np_f",
    "numpy.mean",
    "numpy.sum",
    "tensorflow.GradientTape",
    "tensorflow.compat.v1.set_random_seed",
    "tensorflow.constant",
    "tensorflow.executing_eagerly",
    "tensorflow.stop_gradient",
    "tensorflow.tile",
    "tensorflow_probability.python.internal.test_util.test_seed",
    "tensorflow_probability.python.vi.csiszar_divergence_test.tfd",
    "tensorflow_probability.python.vi.csiszar_divergence_test.tridiag",
    "tensorflow_probability.vi.csiszar_vimco",
    "tensorflow_probability.vi.csiszar_vimco_helper",
    "tensorflow_probability.vi.kl_reverse"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.CsiszarVIMCOTest.test_vimco_helper_1": {
  "data": {
   "lineno": 786,
   "symbols_in_volume": [
    "numpy.linspace",
    "tensorflow_probability.vi.csiszar_vimco_helper"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.CsiszarVIMCOTest.test_vimco_helper_2": {
  "data": {
   "lineno": 797,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow_probability.vi.csiszar_vimco_helper"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.CsiszarVIMCOTest.test_vimco_helper_3": {
  "data": {
   "lineno": 809,
   "symbols_in_volume": [
    "numpy.float32",
    "tensorflow_probability.vi.csiszar_vimco_helper"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.CsiszarVIMCOTest.test_vimco_helper_gradient_using_finite_difference_1": {
  "data": {
   "lineno": 820,
   "symbols_in_volume": [
    "numpy.linspace",
    "numpy.ones_like",
    "tensorflow.constant",
    "tensorflow_probability.python.math.gradient.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.CsiszarVIMCOTest.test_vimco_helper_gradient_using_finite_difference_1.log_avg_u": {
  "data": {
   "lineno": 826,
   "symbols_in_volume": [
    "tensorflow_probability.vi.csiszar_vimco_helper"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.CsiszarVIMCOTest.test_vimco_helper_gradient_using_finite_difference_1.log_sooavg_u": {
  "data": {
   "lineno": 830,
   "symbols_in_volume": [
    "tensorflow_probability.vi.csiszar_vimco_helper"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.CsiszarVIMCOTest.test_vimco_helper_gradient_using_finite_difference_2": {
  "data": {
   "lineno": 845,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.ones_like",
    "tensorflow.constant",
    "tensorflow_probability.python.math.gradient.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.CsiszarVIMCOTest.test_vimco_helper_gradient_using_finite_difference_2.log_avg_u": {
  "data": {
   "lineno": 857,
   "symbols_in_volume": [
    "tensorflow_probability.vi.csiszar_vimco_helper"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.CsiszarVIMCOTest.test_vimco_helper_gradient_using_finite_difference_2.log_sooavg_u": {
  "data": {
   "lineno": 861,
   "symbols_in_volume": [
    "tensorflow_probability.vi.csiszar_vimco_helper"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.CsiszarVIMCOTest.test_vimco_helper_gradient_using_finite_difference_3": {
  "data": {
   "lineno": 877,
   "symbols_in_volume": [
    "numpy.float32",
    "numpy.ones_like",
    "tensorflow.constant",
    "tensorflow_probability.python.math.gradient.value_and_gradient"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.CsiszarVIMCOTest.test_vimco_helper_gradient_using_finite_difference_3.log_avg_u": {
  "data": {
   "lineno": 889,
   "symbols_in_volume": [
    "tensorflow_probability.vi.csiszar_vimco_helper"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.CsiszarVIMCOTest.test_vimco_helper_gradient_using_finite_difference_3.log_sooavg_u": {
  "data": {
   "lineno": 893,
   "symbols_in_volume": [
    "tensorflow_probability.vi.csiszar_vimco_helper"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.DualCsiszarFunctionTest": {
  "data": {
   "lineno": 448,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.DualCsiszarFunctionTest.setUp": {
  "data": {
   "lineno": 451,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.linspace"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.DualCsiszarFunctionTest.test_kl_forward": {
  "data": {
   "lineno": 455,
   "symbols_in_volume": [
    "tensorflow_probability.vi.dual_csiszar_function",
    "tensorflow_probability.vi.kl_forward",
    "tensorflow_probability.vi.kl_reverse"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.DualCsiszarFunctionTest.test_kl_reverse": {
  "data": {
   "lineno": 461,
   "symbols_in_volume": [
    "tensorflow_probability.vi.dual_csiszar_function",
    "tensorflow_probability.vi.kl_forward",
    "tensorflow_probability.vi.kl_reverse"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.JeffreysTest": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.JeffreysTest.setUp": {
  "data": {
   "lineno": 350,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.linspace"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.JeffreysTest.test_at_zero": {
  "data": {
   "lineno": 354,
   "symbols_in_volume": [
    "tensorflow_probability.vi.jeffreys"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.JeffreysTest.test_correct": {
  "data": {
   "lineno": 363,
   "symbols_in_volume": [
    "tensorflow_probability.vi.jeffreys"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.JeffreysTest.test_symmetric": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": [
    "tensorflow_probability.vi.jeffreys",
    "tensorflow_probability.vi.symmetrized_csiszar_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.JensenShannonTest": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.JensenShannonTest.setUp": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.linspace"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.JensenShannonTest.test_at_zero": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "numpy.log",
    "tensorflow_probability.vi.jensen_shannon"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.JensenShannonTest.test_correct": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "numpy.log",
    "numpy.log1p",
    "tensorflow_probability.vi.jensen_shannon"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.JensenShannonTest.test_symmetric": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "tensorflow_probability.vi.jensen_shannon",
    "tensorflow_probability.vi.symmetrized_csiszar_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.KLForwardTest": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.KLForwardTest.setUp": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.linspace"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.KLForwardTest.test_at_zero": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "tensorflow_probability.vi.kl_forward"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.KLForwardTest.test_correct": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": [
    "tensorflow_probability.vi.kl_forward"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.KLReverseTest": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.KLReverseTest.setUp": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.linspace"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.KLReverseTest.test_at_zero": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": [
    "tensorflow_probability.vi.kl_reverse"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.KLReverseTest.test_correct": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": [
    "tensorflow_probability.vi.kl_reverse"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.Log1pAbsTest": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.Log1pAbsTest.setUp": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.linspace"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.Log1pAbsTest.test_at_zero": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": [
    "tensorflow_probability.vi.log1p_abs"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.Log1pAbsTest.test_correct": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": [
    "numpy.sign",
    "tensorflow_probability.vi.log1p_abs"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.ModifiedGanTest": {
  "data": {
   "lineno": 385,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.ModifiedGanTest.setUp": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.linspace"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.ModifiedGanTest.test_at_zero": {
  "data": {
   "lineno": 392,
   "symbols_in_volume": [
    "numpy.log",
    "tensorflow_probability.vi.modified_gan"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.ModifiedGanTest.test_correct": {
  "data": {
   "lineno": 399,
   "symbols_in_volume": [
    "numpy.log1p",
    "tensorflow_probability.vi.modified_gan"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.MonteCarloCsiszarFDivergenceTest": {
  "data": {
   "lineno": 468,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.MonteCarloCsiszarFDivergenceTest.test_kl_forward": {
  "data": {
   "lineno": 471,
   "symbols_in_volume": [
    "int",
    "numpy.array",
    "numpy.ones",
    "tensorflow_probability.python.internal.test_util.test_seed",
    "tensorflow_probability.python.vi.csiszar_divergence_test.tfd",
    "tensorflow_probability.vi.kl_forward",
    "tensorflow_probability.vi.monte_carlo_csiszar_f_divergence"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.MonteCarloCsiszarFDivergenceTest.test_kl_forward_multidim": {
  "data": {
   "lineno": 539,
   "symbols_in_volume": [
    "int",
    "tensorflow_probability.python.internal.test_util.test_seed",
    "tensorflow_probability.python.vi.csiszar_divergence_test.tfd",
    "tensorflow_probability.python.vi.csiszar_divergence_test.tridiag",
    "tensorflow_probability.vi.kl_forward",
    "tensorflow_probability.vi.monte_carlo_csiszar_f_divergence"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.MonteCarloCsiszarFDivergenceTest.test_kl_jd": {
  "data": {
   "lineno": 616,
   "symbols_in_volume": [
    "int",
    "tensorflow.sqrt",
    "tensorflow_probability.python.internal.test_util.test_seed",
    "tensorflow_probability.python.vi.csiszar_divergence_test.tfd",
    "tensorflow_probability.vi.kl_forward",
    "tensorflow_probability.vi.kl_reverse",
    "tensorflow_probability.vi.monte_carlo_csiszar_f_divergence"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.MonteCarloCsiszarFDivergenceTest.test_kl_reverse": {
  "data": {
   "lineno": 505,
   "symbols_in_volume": [
    "int",
    "numpy.array",
    "numpy.ones",
    "tensorflow_probability.python.internal.test_util.test_seed",
    "tensorflow_probability.python.vi.csiszar_divergence_test.tfd",
    "tensorflow_probability.vi.kl_reverse",
    "tensorflow_probability.vi.monte_carlo_csiszar_f_divergence"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.MonteCarloCsiszarFDivergenceTest.test_kl_reverse_multidim": {
  "data": {
   "lineno": 577,
   "symbols_in_volume": [
    "int",
    "tensorflow_probability.python.internal.test_util.test_seed",
    "tensorflow_probability.python.vi.csiszar_divergence_test.tfd",
    "tensorflow_probability.python.vi.csiszar_divergence_test.tridiag",
    "tensorflow_probability.vi.kl_reverse",
    "tensorflow_probability.vi.monte_carlo_csiszar_f_divergence"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.MonteCarloCsiszarFDivergenceTest.test_score_trick": {
  "data": {
   "lineno": 649,
   "symbols_in_volume": [
    "construct_monte_carlo_csiszar_f_divergence",
    "int",
    "list",
    "tensorflow.constant",
    "tensorflow_probability.python.internal.test_util.test_seed",
    "tensorflow_probability.python.math.gradient.value_and_gradient",
    "tensorflow_probability.vi.kl_reverse"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.MonteCarloCsiszarFDivergenceTest.test_score_trick.construct_monte_carlo_csiszar_f_divergence": {
  "data": {
   "lineno": 659
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.MonteCarloCsiszarFDivergenceTest.test_score_trick.construct_monte_carlo_csiszar_f_divergence._fn": {
  "data": {
   "lineno": 661,
   "symbols_in_volume": [
    "tensorflow.tile",
    "tensorflow_probability.python.vi.csiszar_divergence_test.tfd",
    "tensorflow_probability.python.vi.csiszar_divergence_test.tridiag",
    "tensorflow_probability.vi.monte_carlo_csiszar_f_divergence"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.MonteCarloCsiszarFDivergenceTest.test_score_trick.exact_kl": {
  "data": {
   "lineno": 688,
   "symbols_in_volume": [
    "tensorflow.tile",
    "tensorflow_probability.python.vi.csiszar_divergence_test.tfd",
    "tensorflow_probability.python.vi.csiszar_divergence_test.tridiag"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.PearsonTest": {
  "data": {
   "lineno": 227,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.PearsonTest.setUp": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.linspace"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.PearsonTest.test_at_zero": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "tensorflow_probability.vi.pearson"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.PearsonTest.test_correct": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "numpy.square",
    "tensorflow_probability.vi.pearson"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.SquaredHellingerTest": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.SquaredHellingerTest.setUp": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.linspace"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.SquaredHellingerTest.test_at_zero": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "tensorflow_probability.vi.squared_hellinger"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.SquaredHellingerTest.test_correct": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": [
    "numpy.sqrt",
    "numpy.square",
    "tensorflow_probability.vi.squared_hellinger"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.SquaredHellingerTest.test_symmetric": {
  "data": {
   "lineno": 253,
   "symbols_in_volume": [
    "tensorflow_probability.vi.squared_hellinger",
    "tensorflow_probability.vi.symmetrized_csiszar_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.SymmetrizedCsiszarFunctionTest": {
  "data": {
   "lineno": 409,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.SymmetrizedCsiszarFunctionTest.setUp": {
  "data": {
   "lineno": 412,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.linspace"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.SymmetrizedCsiszarFunctionTest.test_jeffreys": {
  "data": {
   "lineno": 436,
   "symbols_in_volume": [
    "tensorflow_probability.vi.jeffreys",
    "tensorflow_probability.vi.kl_forward",
    "tensorflow_probability.vi.kl_reverse",
    "tensorflow_probability.vi.symmetrized_csiszar_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.SymmetrizedCsiszarFunctionTest.test_jensen_shannon": {
  "data": {
   "lineno": 416,
   "symbols_in_volume": [
    "tensorflow_probability.vi.jensen_shannon",
    "tensorflow_probability.vi.symmetrized_csiszar_function"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.SymmetrizedCsiszarFunctionTest.test_jensen_shannon.js1": {
  "data": {
   "lineno": 419,
   "symbols_in_volume": [
    "tensorflow.exp",
    "tensorflow.nn.softplus"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.SymmetrizedCsiszarFunctionTest.test_jensen_shannon.js2": {
  "data": {
   "lineno": 424,
   "symbols_in_volume": [
    "tensorflow.exp",
    "tensorflow.nn.softplus"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TPowerTest": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TPowerTest.setUp": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.linspace"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TPowerTest.test_at_zero": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": [
    "tensorflow_probability.vi.t_power"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TPowerTest.test_correct": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow_probability.vi.t_power"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TPowerTest.test_correct_self_normalized": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": [
    "numpy.float64",
    "tensorflow_probability.vi.t_power"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TotalVariationTest": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TotalVariationTest.setUp": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.linspace"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TotalVariationTest.test_at_zero": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": [
    "tensorflow_probability.vi.total_variation"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TotalVariationTest.test_correct": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": [
    "numpy.abs",
    "tensorflow_probability.vi.total_variation"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TriangularTest": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": [
    "tensorflow.python.framework.test_util.run_all_in_graph_and_eager_modes",
    "tensorflow_probability.python.internal.test_case.TestCase"
   ]
  },
  "type": "class"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TriangularTest.setUp": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": [
    "numpy.exp",
    "numpy.linspace"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TriangularTest.test_at_zero": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": [
    "tensorflow_probability.vi.triangular"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TriangularTest.test_correct": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": [
    "numpy.square",
    "tensorflow_probability.vi.triangular"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.TriangularTest.test_symmetric": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": [
    "tensorflow_probability.vi.symmetrized_csiszar_function",
    "tensorflow_probability.vi.triangular"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.absolute_import": {
  "data": {
   "shadows": "__future__.absolute_import"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.division": {
  "data": {
   "shadows": "__future__.division"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.print_function": {
  "data": {
   "shadows": "__future__.print_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.test_case": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_case"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.test_util": {
  "data": {
   "shadows": "tensorflow.python.framework.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.tfd": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.tfp": {
  "data": {
   "shadows": "tensorflow_probability"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.tfp_test_util": {
  "data": {
   "shadows": "tensorflow_probability.python.internal.test_util"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.tridiag": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": [
    "tensorflow.eye",
    "tensorflow.fill",
    "tensorflow.linalg.band_part"
   ]
  },
  "type": "function"
 },
 "tensorflow_probability.python.vi.csiszar_divergence_test.value_and_gradient": {
  "data": {
   "shadows": "tensorflow_probability.python.math.gradient.value_and_gradient"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.csiszar_vimco": {
  "data": {
   "shadows": "tensorflow_probability.python.vi.csiszar_divergence.csiszar_vimco"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.csiszar_vimco_helper": {
  "data": {
   "shadows": "tensorflow_probability.python.vi.csiszar_divergence.csiszar_vimco_helper"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.dual_csiszar_function": {
  "data": {
   "shadows": "tensorflow_probability.python.vi.csiszar_divergence.dual_csiszar_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.jeffreys": {
  "data": {
   "shadows": "tensorflow_probability.python.vi.csiszar_divergence.jeffreys"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.jensen_shannon": {
  "data": {
   "shadows": "tensorflow_probability.python.vi.csiszar_divergence.jensen_shannon"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.kl_forward": {
  "data": {
   "shadows": "tensorflow_probability.python.vi.csiszar_divergence.kl_forward"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.kl_reverse": {
  "data": {
   "shadows": "tensorflow_probability.python.vi.csiszar_divergence.kl_reverse"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.log1p_abs": {
  "data": {
   "shadows": "tensorflow_probability.python.vi.csiszar_divergence.log1p_abs"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.modified_gan": {
  "data": {
   "shadows": "tensorflow_probability.python.vi.csiszar_divergence.modified_gan"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.monte_carlo_csiszar_f_divergence": {
  "data": {
   "shadows": "tensorflow_probability.python.vi.csiszar_divergence.monte_carlo_csiszar_f_divergence"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.pearson": {
  "data": {
   "shadows": "tensorflow_probability.python.vi.csiszar_divergence.pearson"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.remove_undocumented": {
  "data": {
   "shadows": "tensorflow.python.util.all_util.remove_undocumented"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.squared_hellinger": {
  "data": {
   "shadows": "tensorflow_probability.python.vi.csiszar_divergence.squared_hellinger"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.symmetrized_csiszar_function": {
  "data": {
   "shadows": "tensorflow_probability.python.vi.csiszar_divergence.symmetrized_csiszar_function"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.t_power": {
  "data": {
   "shadows": "tensorflow_probability.python.vi.csiszar_divergence.t_power"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.total_variation": {
  "data": {
   "shadows": "tensorflow_probability.python.vi.csiszar_divergence.total_variation"
  },
  "type": "import"
 },
 "tensorflow_probability.python.vi.triangular": {
  "data": {
   "shadows": "tensorflow_probability.python.vi.csiszar_divergence.triangular"
  },
  "type": "import"
 },
 "tensorflow_probability.tf": {
  "data": {
   "shadows": "tensorflow"
  },
  "type": "import"
 }
}