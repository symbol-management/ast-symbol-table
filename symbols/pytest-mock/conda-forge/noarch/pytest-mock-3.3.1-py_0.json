{
 "*": {
  "data": {
   "imports": [
    "pytest_mock.plugin"
   ]
  },
  "type": "star-import"
 },
 "pytest_mock": {
  "data": {},
  "type": "module"
 },
 "pytest_mock.MockFixture": {
  "data": {
   "lineno": 3
  },
  "type": "constant"
 },
 "pytest_mock.__all__": {
  "data": {
   "lineno": 5
  },
  "type": "constant"
 },
 "pytest_mock._version": {
  "data": {},
  "type": "module"
 },
 "pytest_mock._version.version": {
  "data": {
   "lineno": 4
  },
  "type": "constant"
 },
 "pytest_mock.plugin": {
  "data": {
   "symbols_in_volume": [
    "pytest_mock.plugin._mocker",
    "pytest_mock.plugin.pytest",
    "typing.TypeVar"
   ]
  },
  "type": "module"
 },
 "pytest_mock.plugin.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "pytest_mock.plugin.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "pytest_mock.plugin.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "pytest_mock.plugin.Generator": {
  "data": {
   "shadows": "typing.Generator"
  },
  "type": "import"
 },
 "pytest_mock.plugin.Iterable": {
  "data": {
   "shadows": "typing.Iterable"
  },
  "type": "import"
 },
 "pytest_mock.plugin.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "pytest_mock.plugin.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "pytest_mock.plugin.MockerFixture": {
  "data": {
   "lineno": 45
  },
  "type": "class"
 },
 "pytest_mock.plugin.MockerFixture._Patcher": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "pytest_mock.plugin.MockerFixture._Patcher.__call__": {
  "data": {
   "lineno": 318,
   "symbols_in_volume": [
    "bool",
    "pytest_mock.plugin.builtins",
    "str",
    "typing.Any",
    "typing.Callable",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.MockerFixture._Patcher.__init__": {
  "data": {
   "lineno": 169
  },
  "type": "function"
 },
 "pytest_mock.plugin.MockerFixture._Patcher._start_patch": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": [
    "ValueError",
    "hasattr",
    "mock_func",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.MockerFixture._Patcher.dict": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "bool",
    "typing.Any",
    "typing.Iterable",
    "typing.Mapping",
    "typing.Tuple",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.MockerFixture._Patcher.multiple": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "bool",
    "pytest_mock.plugin.builtins",
    "str",
    "typing.Any",
    "typing.Dict",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.MockerFixture._Patcher.object": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": [
    "bool",
    "object",
    "str",
    "typing.Any",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.MockerFixture.__init__": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": [
    "hasattr",
    "pytest_mock.plugin._get_mock_module",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.MockerFixture.resetall": {
  "data": {
   "lineno": 72
  },
  "type": "function"
 },
 "pytest_mock.plugin.MockerFixture.spy": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": [
    "AttributeError",
    "Exception",
    "classmethod",
    "getattr",
    "isinstance",
    "method",
    "object",
    "pytest_mock.plugin.asyncio",
    "pytest_mock.plugin.functools",
    "pytest_mock.plugin.inspect",
    "staticmethod",
    "str"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.MockerFixture.spy.wrapper": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "Exception",
    "method"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.MockerFixture.stopall": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": [
    "reversed"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.MockerFixture.stub": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": [
    "str",
    "typing.Optional",
    "typing.cast"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "pytest_mock.plugin.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "pytest_mock.plugin.TypeVar": {
  "data": {
   "shadows": "typing.TypeVar"
  },
  "type": "import"
 },
 "pytest_mock.plugin.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "pytest_mock.plugin._T": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "pytest_mock.plugin._get_mock_module": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "hasattr",
    "parse_ini_boolean",
    "pytest_mock.plugin.unittest.mock"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin._mock_module_originals": {
  "data": {
   "lineno": 363
  },
  "type": "constant"
 },
 "pytest_mock.plugin._mock_module_patches": {
  "data": {
   "lineno": 362
  },
  "type": "constant"
 },
 "pytest_mock.plugin._mocker": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": [
    "pytest_mock.plugin.MockerFixture",
    "typing.Any",
    "typing.Generator"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.assert_wrapper": {
  "data": {
   "lineno": 366,
   "symbols_in_volume": [
    "AssertionError",
    "__wrapped_mock_method__",
    "getattr",
    "str",
    "typing.Any",
    "typing.Callable"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.asyncio": {
  "data": {
   "shadows": "asyncio"
  },
  "type": "import"
 },
 "pytest_mock.plugin.builtins": {
  "data": {
   "shadows": "builtins"
  },
  "type": "import"
 },
 "pytest_mock.plugin.cast": {
  "data": {
   "shadows": "typing.cast"
  },
  "type": "import"
 },
 "pytest_mock.plugin.class_mocker": {
  "data": {
   "lineno": 356
  },
  "type": "constant"
 },
 "pytest_mock.plugin.functools": {
  "data": {
   "shadows": "functools"
  },
  "type": "import"
 },
 "pytest_mock.plugin.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "pytest_mock.plugin.mock": {
  "data": {
   "shadows": "mock"
  },
  "type": "import"
 },
 "pytest_mock.plugin.mocker": {
  "data": {
   "lineno": 355
  },
  "type": "constant"
 },
 "pytest_mock.plugin.module_mocker": {
  "data": {
   "lineno": 357
  },
  "type": "constant"
 },
 "pytest_mock.plugin.overload": {
  "data": {
   "shadows": "typing.overload"
  },
  "type": "import"
 },
 "pytest_mock.plugin.package_mocker": {
  "data": {
   "lineno": 358
  },
  "type": "constant"
 },
 "pytest_mock.plugin.parse_ini_boolean": {
  "data": {
   "lineno": 552,
   "symbols_in_volume": [
    "ValueError",
    "bool",
    "isinstance",
    "str",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.pytest": {
  "data": {
   "shadows": "pytest"
  },
  "type": "import"
 },
 "pytest_mock.plugin.pytest_addoption": {
  "data": {
   "lineno": 537,
   "symbols_in_volume": [
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.pytest_configure": {
  "data": {
   "lineno": 562,
   "symbols_in_volume": [
    "pytest_mock.plugin.parse_ini_boolean",
    "pytest_mock.plugin.wrap_assert_methods",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.session_mocker": {
  "data": {
   "lineno": 359
  },
  "type": "constant"
 },
 "pytest_mock.plugin.unittest.mock": {
  "data": {
   "shadows": "unittest.mock"
  },
  "type": "import"
 },
 "pytest_mock.plugin.unwrap_assert_methods": {
  "data": {
   "lineno": 520,
   "symbols_in_volume": [
    "RuntimeError",
    "pytest_mock.plugin._mock_module_originals",
    "pytest_mock.plugin._mock_module_patches",
    "str"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.wrap_assert_any_await": {
  "data": {
   "lineno": 457,
   "symbols_in_volume": [
    "pytest_mock.plugin._mock_module_originals",
    "pytest_mock.plugin.assert_wrapper",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.wrap_assert_any_call": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": [
    "pytest_mock.plugin._mock_module_originals",
    "pytest_mock.plugin.assert_wrapper",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.wrap_assert_awaited": {
  "data": {
   "lineno": 462,
   "symbols_in_volume": [
    "pytest_mock.plugin._mock_module_originals",
    "pytest_mock.plugin.assert_wrapper",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.wrap_assert_awaited_once": {
  "data": {
   "lineno": 442,
   "symbols_in_volume": [
    "pytest_mock.plugin._mock_module_originals",
    "pytest_mock.plugin.assert_wrapper",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.wrap_assert_awaited_once_with": {
  "data": {
   "lineno": 447,
   "symbols_in_volume": [
    "pytest_mock.plugin._mock_module_originals",
    "pytest_mock.plugin.assert_wrapper",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.wrap_assert_awaited_with": {
  "data": {
   "lineno": 437,
   "symbols_in_volume": [
    "pytest_mock.plugin._mock_module_originals",
    "pytest_mock.plugin.assert_wrapper",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.wrap_assert_called": {
  "data": {
   "lineno": 427,
   "symbols_in_volume": [
    "pytest_mock.plugin._mock_module_originals",
    "pytest_mock.plugin.assert_wrapper",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.wrap_assert_called_once": {
  "data": {
   "lineno": 407,
   "symbols_in_volume": [
    "pytest_mock.plugin._mock_module_originals",
    "pytest_mock.plugin.assert_wrapper",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.wrap_assert_called_once_with": {
  "data": {
   "lineno": 412,
   "symbols_in_volume": [
    "pytest_mock.plugin._mock_module_originals",
    "pytest_mock.plugin.assert_wrapper",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.wrap_assert_called_with": {
  "data": {
   "lineno": 402,
   "symbols_in_volume": [
    "pytest_mock.plugin._mock_module_originals",
    "pytest_mock.plugin.assert_wrapper",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.wrap_assert_has_awaits": {
  "data": {
   "lineno": 452,
   "symbols_in_volume": [
    "pytest_mock.plugin._mock_module_originals",
    "pytest_mock.plugin.assert_wrapper",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.wrap_assert_has_calls": {
  "data": {
   "lineno": 417,
   "symbols_in_volume": [
    "pytest_mock.plugin._mock_module_originals",
    "pytest_mock.plugin.assert_wrapper",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.wrap_assert_methods": {
  "data": {
   "lineno": 467,
   "symbols_in_volume": [
    "AttributeError",
    "getattr",
    "hasattr",
    "method",
    "pytest_mock.plugin._get_mock_module",
    "pytest_mock.plugin._mock_module_originals",
    "pytest_mock.plugin._mock_module_patches",
    "pytest_mock.plugin.wrap_assert_any_await",
    "pytest_mock.plugin.wrap_assert_any_call",
    "pytest_mock.plugin.wrap_assert_awaited",
    "pytest_mock.plugin.wrap_assert_awaited_once",
    "pytest_mock.plugin.wrap_assert_awaited_once_with",
    "pytest_mock.plugin.wrap_assert_awaited_with",
    "pytest_mock.plugin.wrap_assert_called",
    "pytest_mock.plugin.wrap_assert_called_once",
    "pytest_mock.plugin.wrap_assert_called_once_with",
    "pytest_mock.plugin.wrap_assert_called_with",
    "pytest_mock.plugin.wrap_assert_has_awaits",
    "pytest_mock.plugin.wrap_assert_has_calls",
    "pytest_mock.plugin.wrap_assert_not_awaited",
    "pytest_mock.plugin.wrap_assert_not_called",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.wrap_assert_not_awaited": {
  "data": {
   "lineno": 432,
   "symbols_in_volume": [
    "pytest_mock.plugin._mock_module_originals",
    "pytest_mock.plugin.assert_wrapper",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "pytest_mock.plugin.wrap_assert_not_called": {
  "data": {
   "lineno": 397,
   "symbols_in_volume": [
    "pytest_mock.plugin._mock_module_originals",
    "pytest_mock.plugin.assert_wrapper",
    "typing.Any"
   ]
  },
  "type": "function"
 }
}