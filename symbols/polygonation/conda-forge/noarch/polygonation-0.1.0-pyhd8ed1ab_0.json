{
 "polygonation": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "polygonation._version": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "polygonation._version.get_versions": {
  "lineno": 20,
  "symbols_in_volume": [
   "json.loads"
  ],
  "type": "function"
 },
 "polygonation.polygonate": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "polygonation.polygonate.Polygonate": {
  "lineno": 51,
  "symbols_in_volume": [],
  "type": "class"
 },
 "polygonation.polygonate.Polygonate.__init__": {
  "lineno": 77,
  "symbols_in_volume": [
   "numpy.array",
   "typing.Iterable"
  ],
  "type": "function"
 },
 "polygonation.polygonate.Polygonate.__polygonation": {
  "lineno": 101,
  "symbols_in_volume": [
   "numpy.arange",
   "scipy.spatial.Delaunay"
  ],
  "type": "function"
 },
 "polygonation.polygonate.Polygonate.__polygonation.f": {
  "lineno": 122,
  "symbols_in_volume": [
   "numpy.argmin"
  ],
  "type": "function"
 },
 "polygonation.polygonate.Polygonate.__polygonation.melt": {
  "lineno": 125,
  "symbols_in_volume": [],
  "type": "function"
 },
 "polygonation.polygonate.Polygonate.__polygonation.melt.new_si": {
  "lineno": 139,
  "symbols_in_volume": [],
  "type": "function"
 },
 "polygonation.polygonate.Polygonate._candidates": {
  "lineno": 161,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.array",
   "numpy.intersect1d",
   "numpy.linalg.norm",
   "numpy.pi",
   "typing.Iterable"
  ],
  "type": "function"
 },
 "polygonation.polygonate.Polygonate._candidates.PolyArea": {
  "lineno": 188,
  "symbols_in_volume": [
   "numpy.abs",
   "numpy.dot",
   "numpy.roll"
  ],
  "type": "function"
 },
 "polygonation.polygonate.Polygonate._candidates.angle": {
  "lineno": 182,
  "symbols_in_volume": [
   "numpy.arccos",
   "numpy.clip",
   "numpy.dot",
   "numpy.linalg.norm"
  ],
  "type": "function"
 },
 "polygonation.polygonate.Polygonate._candidates.prepshape": {
  "lineno": 167,
  "symbols_in_volume": [
   "numpy.flip",
   "numpy.intersect1d",
   "numpy.roll"
  ],
  "type": "function"
 },
 "polygonation.polygonate.Polygonate._candidates.vec": {
  "lineno": 179,
  "symbols_in_volume": [],
  "type": "function"
 },
 "polygonation.polygonate.Polygonate.find_shape": {
  "lineno": 234,
  "symbols_in_volume": [
   "typing.Iterable"
  ],
  "type": "function"
 },
 "polygonation.polygonate.Polygonate.neighbors": {
  "lineno": 96,
  "symbols_in_volume": [],
  "type": "function"
 },
 "polygonation.polygonate.Polygonate.points": {
  "lineno": 86,
  "symbols_in_volume": [],
  "type": "function"
 },
 "polygonation.polygonate.Polygonate.shapes": {
  "lineno": 91,
  "symbols_in_volume": [],
  "type": "function"
 },
 "polygonation.polygonate.is_convex": {
  "lineno": 16,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.roll",
   "numpy.sign",
   "typing.Iterable"
  ],
  "type": "function"
 },
 "polygonation.tests": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "polygonation.tests.test_isconvex": {
  "lineno": null,
  "symbols_in_volume": [
   "numpy.array",
   "numpy.cos",
   "numpy.linspace",
   "numpy.pi",
   "numpy.sin"
  ],
  "type": "module"
 },
 "polygonation.tests.test_isconvex.test_convex": {
  "lineno": 14,
  "symbols_in_volume": [],
  "type": "function"
 },
 "polygonation.tests.test_isconvex.test_notconvex": {
  "lineno": 22,
  "symbols_in_volume": [],
  "type": "function"
 },
 "polygonation.tests.test_polygonate": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "polygonation.tests.test_polygonate.test_convex": {
  "lineno": 6,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 },
 "polygonation.tests.test_polygonate.test_correctshape": {
  "lineno": 24,
  "symbols_in_volume": [
   "numpy.random.rand"
  ],
  "type": "function"
 },
 "polygonation.tests.test_polygonate.test_correctshape.check_correct_shape": {
  "lineno": 27,
  "symbols_in_volume": [
   "scipy.spatial.Delaunay"
  ],
  "type": "function"
 },
 "polygonation.tests.test_polygonate.test_notconvex": {
  "lineno": 15,
  "symbols_in_volume": [
   "numpy.array"
  ],
  "type": "function"
 }
}