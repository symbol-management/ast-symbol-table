{
 "airflow.providers.ssh": {
  "data": {},
  "type": "module"
 },
 "airflow.providers.ssh.get_provider_info": {
  "data": {},
  "type": "module"
 },
 "airflow.providers.ssh.get_provider_info.get_provider_info": {
  "data": {
   "lineno": 25
  },
  "type": "function"
 },
 "airflow.providers.ssh.hooks": {
  "data": {},
  "type": "module"
 },
 "airflow.providers.ssh.hooks.ssh": {
  "data": {},
  "type": "module"
 },
 "airflow.providers.ssh.hooks.ssh.AirflowException": {
  "data": {
   "shadows": "airflow.exceptions.AirflowException"
  },
  "type": "import"
 },
 "airflow.providers.ssh.hooks.ssh.BaseHook": {
  "data": {
   "shadows": "airflow.hooks.base.BaseHook"
  },
  "type": "import"
 },
 "airflow.providers.ssh.hooks.ssh.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "airflow.providers.ssh.hooks.ssh.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "airflow.providers.ssh.hooks.ssh.SSHHook": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "airflow.hooks.base.BaseHook"
   ]
  },
  "type": "class"
 },
 "airflow.providers.ssh.hooks.ssh.SSHHook.__enter__": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "DeprecationWarning",
    "airflow.providers.ssh.hooks.ssh.warnings"
   ]
  },
  "type": "function"
 },
 "airflow.providers.ssh.hooks.ssh.SSHHook.__exit__": {
  "data": {
   "lineno": 254
  },
  "type": "function"
 },
 "airflow.providers.ssh.hooks.ssh.SSHHook.__init__": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "airflow.exceptions.AirflowException",
    "airflow.providers.ssh.hooks.ssh.getpass",
    "airflow.providers.ssh.hooks.ssh.os",
    "airflow.providers.ssh.hooks.ssh.paramiko",
    "base64.decodebytes",
    "int",
    "io.StringIO",
    "open",
    "paramiko.config.SSH_PORT",
    "str",
    "super",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "airflow.providers.ssh.hooks.ssh.SSHHook.create_tunnel": {
  "data": {
   "lineno": 303,
   "symbols_in_volume": [
    "DeprecationWarning",
    "airflow.providers.ssh.hooks.ssh.warnings",
    "int",
    "sshtunnel.SSHTunnelForwarder",
    "str"
   ]
  },
  "type": "function"
 },
 "airflow.providers.ssh.hooks.ssh.SSHHook.get_conn": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": [
    "airflow.providers.ssh.hooks.ssh.paramiko",
    "dict"
   ]
  },
  "type": "function"
 },
 "airflow.providers.ssh.hooks.ssh.SSHHook.get_tunnel": {
  "data": {
   "lineno": 259,
   "symbols_in_volume": [
    "dict",
    "int",
    "sshtunnel.SSHTunnelForwarder",
    "str",
    "typing.Optional",
    "typing.Tuple",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "airflow.providers.ssh.hooks.ssh.SSHHook.get_ui_field_behaviour": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "staticmethod",
    "typing.Dict"
   ]
  },
  "type": "function"
 },
 "airflow.providers.ssh.hooks.ssh.SSHTunnelForwarder": {
  "data": {
   "shadows": "sshtunnel.SSHTunnelForwarder"
  },
  "type": "import"
 },
 "airflow.providers.ssh.hooks.ssh.SSH_PORT": {
  "data": {
   "shadows": "paramiko.config.SSH_PORT"
  },
  "type": "import"
 },
 "airflow.providers.ssh.hooks.ssh.StringIO": {
  "data": {
   "shadows": "io.StringIO"
  },
  "type": "import"
 },
 "airflow.providers.ssh.hooks.ssh.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "airflow.providers.ssh.hooks.ssh.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "airflow.providers.ssh.hooks.ssh.decodebytes": {
  "data": {
   "shadows": "base64.decodebytes"
  },
  "type": "import"
 },
 "airflow.providers.ssh.hooks.ssh.getpass": {
  "data": {
   "shadows": "getpass"
  },
  "type": "import"
 },
 "airflow.providers.ssh.hooks.ssh.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "airflow.providers.ssh.hooks.ssh.paramiko": {
  "data": {
   "shadows": "paramiko"
  },
  "type": "import"
 },
 "airflow.providers.ssh.hooks.ssh.warnings": {
  "data": {
   "shadows": "warnings"
  },
  "type": "import"
 },
 "airflow.providers.ssh.operators": {
  "data": {},
  "type": "module"
 },
 "airflow.providers.ssh.operators.ssh": {
  "data": {},
  "type": "module"
 },
 "airflow.providers.ssh.operators.ssh.AirflowException": {
  "data": {
   "shadows": "airflow.exceptions.AirflowException"
  },
  "type": "import"
 },
 "airflow.providers.ssh.operators.ssh.BaseOperator": {
  "data": {
   "shadows": "airflow.models.BaseOperator"
  },
  "type": "import"
 },
 "airflow.providers.ssh.operators.ssh.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "airflow.providers.ssh.operators.ssh.SSHHook": {
  "data": {
   "shadows": "airflow.providers.ssh.hooks.ssh.SSHHook"
  },
  "type": "import"
 },
 "airflow.providers.ssh.operators.ssh.SSHOperator": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "airflow.models.BaseOperator"
   ]
  },
  "type": "class"
 },
 "airflow.providers.ssh.operators.ssh.SSHOperator.__init__": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "airflow.providers.ssh.hooks.ssh.SSHHook",
    "airflow.utils.decorators.apply_defaults",
    "bool",
    "dict",
    "int",
    "str",
    "super",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "airflow.providers.ssh.operators.ssh.SSHOperator.execute": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": [
    "Exception",
    "airflow.configuration.conf.getboolean",
    "airflow.exceptions.AirflowException",
    "airflow.providers.ssh.hooks.ssh.SSHHook",
    "base64.b64encode",
    "bool",
    "bytes",
    "isinstance",
    "len",
    "select.select",
    "str",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "airflow.providers.ssh.operators.ssh.SSHOperator.tunnel": {
  "data": {
   "lineno": 175
  },
  "type": "function"
 },
 "airflow.providers.ssh.operators.ssh.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "airflow.providers.ssh.operators.ssh.apply_defaults": {
  "data": {
   "shadows": "airflow.utils.decorators.apply_defaults"
  },
  "type": "import"
 },
 "airflow.providers.ssh.operators.ssh.b64encode": {
  "data": {
   "shadows": "base64.b64encode"
  },
  "type": "import"
 },
 "airflow.providers.ssh.operators.ssh.conf": {
  "data": {
   "shadows": "airflow.configuration.conf"
  },
  "type": "import"
 },
 "airflow.providers.ssh.operators.ssh.select": {
  "data": {
   "shadows": "select.select"
  },
  "type": "import"
 }
}