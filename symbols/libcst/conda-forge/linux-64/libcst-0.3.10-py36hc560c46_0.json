{
 "libcst": {
  "data": {},
  "type": "module"
 },
 "libcst.Add": {
  "data": {
   "shadows": "libcst._nodes.op.Add"
  },
  "type": "import"
 },
 "libcst.AddAssign": {
  "data": {
   "shadows": "libcst._nodes.op.AddAssign"
  },
  "type": "import"
 },
 "libcst.And": {
  "data": {
   "shadows": "libcst._nodes.op.And"
  },
  "type": "import"
 },
 "libcst.AnnAssign": {
  "data": {
   "shadows": "libcst._nodes.statement.AnnAssign"
  },
  "type": "import"
 },
 "libcst.Annotation": {
  "data": {
   "shadows": "libcst._nodes.expression.Annotation"
  },
  "type": "import"
 },
 "libcst.Arg": {
  "data": {
   "shadows": "libcst._nodes.expression.Arg"
  },
  "type": "import"
 },
 "libcst.AsName": {
  "data": {
   "shadows": "libcst._nodes.statement.AsName"
  },
  "type": "import"
 },
 "libcst.Assert": {
  "data": {
   "shadows": "libcst._nodes.statement.Assert"
  },
  "type": "import"
 },
 "libcst.Assign": {
  "data": {
   "shadows": "libcst._nodes.statement.Assign"
  },
  "type": "import"
 },
 "libcst.AssignEqual": {
  "data": {
   "shadows": "libcst._nodes.op.AssignEqual"
  },
  "type": "import"
 },
 "libcst.AssignTarget": {
  "data": {
   "shadows": "libcst._nodes.statement.AssignTarget"
  },
  "type": "import"
 },
 "libcst.Asynchronous": {
  "data": {
   "shadows": "libcst._nodes.expression.Asynchronous"
  },
  "type": "import"
 },
 "libcst.Attribute": {
  "data": {
   "shadows": "libcst._nodes.expression.Attribute"
  },
  "type": "import"
 },
 "libcst.AugAssign": {
  "data": {
   "shadows": "libcst._nodes.statement.AugAssign"
  },
  "type": "import"
 },
 "libcst.Await": {
  "data": {
   "shadows": "libcst._nodes.expression.Await"
  },
  "type": "import"
 },
 "libcst.BaseAssignTargetExpression": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseAssignTargetExpression"
  },
  "type": "import"
 },
 "libcst.BaseAugOp": {
  "data": {
   "shadows": "libcst._nodes.op.BaseAugOp"
  },
  "type": "import"
 },
 "libcst.BaseBinaryOp": {
  "data": {
   "shadows": "libcst._nodes.op.BaseBinaryOp"
  },
  "type": "import"
 },
 "libcst.BaseBooleanOp": {
  "data": {
   "shadows": "libcst._nodes.op.BaseBooleanOp"
  },
  "type": "import"
 },
 "libcst.BaseComp": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseComp"
  },
  "type": "import"
 },
 "libcst.BaseCompOp": {
  "data": {
   "shadows": "libcst._nodes.op.BaseCompOp"
  },
  "type": "import"
 },
 "libcst.BaseCompoundStatement": {
  "data": {
   "shadows": "libcst._nodes.statement.BaseCompoundStatement"
  },
  "type": "import"
 },
 "libcst.BaseDelTargetExpression": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseDelTargetExpression"
  },
  "type": "import"
 },
 "libcst.BaseDict": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseDict"
  },
  "type": "import"
 },
 "libcst.BaseDictElement": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseDictElement"
  },
  "type": "import"
 },
 "libcst.BaseElement": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseElement"
  },
  "type": "import"
 },
 "libcst.BaseExpression": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseExpression"
  },
  "type": "import"
 },
 "libcst.BaseFormattedStringContent": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseFormattedStringContent"
  },
  "type": "import"
 },
 "libcst.BaseList": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseList"
  },
  "type": "import"
 },
 "libcst.BaseMetadataProvider": {
  "data": {
   "shadows": "libcst.metadata.base_provider.BaseMetadataProvider"
  },
  "type": "import"
 },
 "libcst.BaseNumber": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseNumber"
  },
  "type": "import"
 },
 "libcst.BaseParenthesizableWhitespace": {
  "data": {
   "shadows": "libcst._nodes.whitespace.BaseParenthesizableWhitespace"
  },
  "type": "import"
 },
 "libcst.BaseSet": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseSet"
  },
  "type": "import"
 },
 "libcst.BaseSimpleComp": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseSimpleComp"
  },
  "type": "import"
 },
 "libcst.BaseSlice": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseSlice"
  },
  "type": "import"
 },
 "libcst.BaseSmallStatement": {
  "data": {
   "shadows": "libcst._nodes.statement.BaseSmallStatement"
  },
  "type": "import"
 },
 "libcst.BaseStatement": {
  "data": {
   "shadows": "libcst._nodes.statement.BaseStatement"
  },
  "type": "import"
 },
 "libcst.BaseString": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseString"
  },
  "type": "import"
 },
 "libcst.BaseSuite": {
  "data": {
   "shadows": "libcst._nodes.statement.BaseSuite"
  },
  "type": "import"
 },
 "libcst.BaseUnaryOp": {
  "data": {
   "shadows": "libcst._nodes.op.BaseUnaryOp"
  },
  "type": "import"
 },
 "libcst.BatchableCSTVisitor": {
  "data": {
   "shadows": "libcst._batched_visitor.BatchableCSTVisitor"
  },
  "type": "import"
 },
 "libcst.BatchableMetadataProvider": {
  "data": {
   "shadows": "libcst.metadata.base_provider.BatchableMetadataProvider"
  },
  "type": "import"
 },
 "libcst.BinaryOperation": {
  "data": {
   "shadows": "libcst._nodes.expression.BinaryOperation"
  },
  "type": "import"
 },
 "libcst.BitAnd": {
  "data": {
   "shadows": "libcst._nodes.op.BitAnd"
  },
  "type": "import"
 },
 "libcst.BitAndAssign": {
  "data": {
   "shadows": "libcst._nodes.op.BitAndAssign"
  },
  "type": "import"
 },
 "libcst.BitInvert": {
  "data": {
   "shadows": "libcst._nodes.op.BitInvert"
  },
  "type": "import"
 },
 "libcst.BitOr": {
  "data": {
   "shadows": "libcst._nodes.op.BitOr"
  },
  "type": "import"
 },
 "libcst.BitOrAssign": {
  "data": {
   "shadows": "libcst._nodes.op.BitOrAssign"
  },
  "type": "import"
 },
 "libcst.BitXor": {
  "data": {
   "shadows": "libcst._nodes.op.BitXor"
  },
  "type": "import"
 },
 "libcst.BitXorAssign": {
  "data": {
   "shadows": "libcst._nodes.op.BitXorAssign"
  },
  "type": "import"
 },
 "libcst.BooleanOperation": {
  "data": {
   "shadows": "libcst._nodes.expression.BooleanOperation"
  },
  "type": "import"
 },
 "libcst.Break": {
  "data": {
   "shadows": "libcst._nodes.statement.Break"
  },
  "type": "import"
 },
 "libcst.CSTNode": {
  "data": {
   "shadows": "libcst._nodes.base.CSTNode"
  },
  "type": "import"
 },
 "libcst.CSTNodeT": {
  "data": {
   "shadows": "libcst._visitors.CSTNodeT"
  },
  "type": "import"
 },
 "libcst.CSTTransformer": {
  "data": {
   "shadows": "libcst._visitors.CSTTransformer"
  },
  "type": "import"
 },
 "libcst.CSTValidationError": {
  "data": {
   "shadows": "libcst._nodes.base.CSTValidationError"
  },
  "type": "import"
 },
 "libcst.CSTVisitor": {
  "data": {
   "shadows": "libcst._visitors.CSTVisitor"
  },
  "type": "import"
 },
 "libcst.CSTVisitorT": {
  "data": {
   "shadows": "libcst._visitors.CSTVisitorT"
  },
  "type": "import"
 },
 "libcst.Call": {
  "data": {
   "shadows": "libcst._nodes.expression.Call"
  },
  "type": "import"
 },
 "libcst.ClassDef": {
  "data": {
   "shadows": "libcst._nodes.statement.ClassDef"
  },
  "type": "import"
 },
 "libcst.Colon": {
  "data": {
   "shadows": "libcst._nodes.op.Colon"
  },
  "type": "import"
 },
 "libcst.Comma": {
  "data": {
   "shadows": "libcst._nodes.op.Comma"
  },
  "type": "import"
 },
 "libcst.Comment": {
  "data": {
   "shadows": "libcst._nodes.whitespace.Comment"
  },
  "type": "import"
 },
 "libcst.CompFor": {
  "data": {
   "shadows": "libcst._nodes.expression.CompFor"
  },
  "type": "import"
 },
 "libcst.CompIf": {
  "data": {
   "shadows": "libcst._nodes.expression.CompIf"
  },
  "type": "import"
 },
 "libcst.Comparison": {
  "data": {
   "shadows": "libcst._nodes.expression.Comparison"
  },
  "type": "import"
 },
 "libcst.ComparisonTarget": {
  "data": {
   "shadows": "libcst._nodes.expression.ComparisonTarget"
  },
  "type": "import"
 },
 "libcst.ConcatenatedString": {
  "data": {
   "shadows": "libcst._nodes.expression.ConcatenatedString"
  },
  "type": "import"
 },
 "libcst.Continue": {
  "data": {
   "shadows": "libcst._nodes.statement.Continue"
  },
  "type": "import"
 },
 "libcst.Decorator": {
  "data": {
   "shadows": "libcst._nodes.statement.Decorator"
  },
  "type": "import"
 },
 "libcst.Del": {
  "data": {
   "shadows": "libcst._nodes.statement.Del"
  },
  "type": "import"
 },
 "libcst.Dict": {
  "data": {
   "shadows": "libcst._nodes.expression.Dict"
  },
  "type": "import"
 },
 "libcst.DictComp": {
  "data": {
   "shadows": "libcst._nodes.expression.DictComp"
  },
  "type": "import"
 },
 "libcst.DictElement": {
  "data": {
   "shadows": "libcst._nodes.expression.DictElement"
  },
  "type": "import"
 },
 "libcst.Divide": {
  "data": {
   "shadows": "libcst._nodes.op.Divide"
  },
  "type": "import"
 },
 "libcst.DivideAssign": {
  "data": {
   "shadows": "libcst._nodes.op.DivideAssign"
  },
  "type": "import"
 },
 "libcst.Dot": {
  "data": {
   "shadows": "libcst._nodes.op.Dot"
  },
  "type": "import"
 },
 "libcst.Element": {
  "data": {
   "shadows": "libcst._nodes.expression.Element"
  },
  "type": "import"
 },
 "libcst.Ellipsis": {
  "data": {
   "shadows": "libcst._nodes.expression.Ellipsis"
  },
  "type": "import"
 },
 "libcst.Else": {
  "data": {
   "shadows": "libcst._nodes.statement.Else"
  },
  "type": "import"
 },
 "libcst.EmptyLine": {
  "data": {
   "shadows": "libcst._nodes.whitespace.EmptyLine"
  },
  "type": "import"
 },
 "libcst.Equal": {
  "data": {
   "shadows": "libcst._nodes.op.Equal"
  },
  "type": "import"
 },
 "libcst.ExceptHandler": {
  "data": {
   "shadows": "libcst._nodes.statement.ExceptHandler"
  },
  "type": "import"
 },
 "libcst.Expr": {
  "data": {
   "shadows": "libcst._nodes.statement.Expr"
  },
  "type": "import"
 },
 "libcst.Finally": {
  "data": {
   "shadows": "libcst._nodes.statement.Finally"
  },
  "type": "import"
 },
 "libcst.Float": {
  "data": {
   "shadows": "libcst._nodes.expression.Float"
  },
  "type": "import"
 },
 "libcst.FloorDivide": {
  "data": {
   "shadows": "libcst._nodes.op.FloorDivide"
  },
  "type": "import"
 },
 "libcst.FloorDivideAssign": {
  "data": {
   "shadows": "libcst._nodes.op.FloorDivideAssign"
  },
  "type": "import"
 },
 "libcst.For": {
  "data": {
   "shadows": "libcst._nodes.statement.For"
  },
  "type": "import"
 },
 "libcst.FormattedString": {
  "data": {
   "shadows": "libcst._nodes.expression.FormattedString"
  },
  "type": "import"
 },
 "libcst.FormattedStringExpression": {
  "data": {
   "shadows": "libcst._nodes.expression.FormattedStringExpression"
  },
  "type": "import"
 },
 "libcst.FormattedStringText": {
  "data": {
   "shadows": "libcst._nodes.expression.FormattedStringText"
  },
  "type": "import"
 },
 "libcst.From": {
  "data": {
   "shadows": "libcst._nodes.expression.From"
  },
  "type": "import"
 },
 "libcst.FunctionDef": {
  "data": {
   "shadows": "libcst._nodes.statement.FunctionDef"
  },
  "type": "import"
 },
 "libcst.GeneratorExp": {
  "data": {
   "shadows": "libcst._nodes.expression.GeneratorExp"
  },
  "type": "import"
 },
 "libcst.Global": {
  "data": {
   "shadows": "libcst._nodes.statement.Global"
  },
  "type": "import"
 },
 "libcst.GreaterThan": {
  "data": {
   "shadows": "libcst._nodes.op.GreaterThan"
  },
  "type": "import"
 },
 "libcst.GreaterThanEqual": {
  "data": {
   "shadows": "libcst._nodes.op.GreaterThanEqual"
  },
  "type": "import"
 },
 "libcst.If": {
  "data": {
   "shadows": "libcst._nodes.statement.If"
  },
  "type": "import"
 },
 "libcst.IfExp": {
  "data": {
   "shadows": "libcst._nodes.expression.IfExp"
  },
  "type": "import"
 },
 "libcst.Imaginary": {
  "data": {
   "shadows": "libcst._nodes.expression.Imaginary"
  },
  "type": "import"
 },
 "libcst.Import": {
  "data": {
   "shadows": "libcst._nodes.statement.Import"
  },
  "type": "import"
 },
 "libcst.ImportAlias": {
  "data": {
   "shadows": "libcst._nodes.statement.ImportAlias"
  },
  "type": "import"
 },
 "libcst.ImportFrom": {
  "data": {
   "shadows": "libcst._nodes.statement.ImportFrom"
  },
  "type": "import"
 },
 "libcst.ImportStar": {
  "data": {
   "shadows": "libcst._nodes.op.ImportStar"
  },
  "type": "import"
 },
 "libcst.In": {
  "data": {
   "shadows": "libcst._nodes.op.In"
  },
  "type": "import"
 },
 "libcst.IndentedBlock": {
  "data": {
   "shadows": "libcst._nodes.statement.IndentedBlock"
  },
  "type": "import"
 },
 "libcst.Index": {
  "data": {
   "shadows": "libcst._nodes.expression.Index"
  },
  "type": "import"
 },
 "libcst.Integer": {
  "data": {
   "shadows": "libcst._nodes.expression.Integer"
  },
  "type": "import"
 },
 "libcst.Is": {
  "data": {
   "shadows": "libcst._nodes.op.Is"
  },
  "type": "import"
 },
 "libcst.IsNot": {
  "data": {
   "shadows": "libcst._nodes.op.IsNot"
  },
  "type": "import"
 },
 "libcst.KNOWN_PYTHON_VERSION_STRINGS": {
  "data": {
   "shadows": "libcst._parser.types.config.KNOWN_PYTHON_VERSION_STRINGS"
  },
  "type": "import"
 },
 "libcst.LIBCST_VERSION": {
  "data": {
   "shadows": "libcst._version.LIBCST_VERSION"
  },
  "type": "import"
 },
 "libcst.Lambda": {
  "data": {
   "shadows": "libcst._nodes.expression.Lambda"
  },
  "type": "import"
 },
 "libcst.LeftCurlyBrace": {
  "data": {
   "shadows": "libcst._nodes.expression.LeftCurlyBrace"
  },
  "type": "import"
 },
 "libcst.LeftParen": {
  "data": {
   "shadows": "libcst._nodes.expression.LeftParen"
  },
  "type": "import"
 },
 "libcst.LeftShift": {
  "data": {
   "shadows": "libcst._nodes.op.LeftShift"
  },
  "type": "import"
 },
 "libcst.LeftShiftAssign": {
  "data": {
   "shadows": "libcst._nodes.op.LeftShiftAssign"
  },
  "type": "import"
 },
 "libcst.LeftSquareBracket": {
  "data": {
   "shadows": "libcst._nodes.expression.LeftSquareBracket"
  },
  "type": "import"
 },
 "libcst.LessThan": {
  "data": {
   "shadows": "libcst._nodes.op.LessThan"
  },
  "type": "import"
 },
 "libcst.LessThanEqual": {
  "data": {
   "shadows": "libcst._nodes.op.LessThanEqual"
  },
  "type": "import"
 },
 "libcst.List": {
  "data": {
   "shadows": "libcst._nodes.expression.List"
  },
  "type": "import"
 },
 "libcst.ListComp": {
  "data": {
   "shadows": "libcst._nodes.expression.ListComp"
  },
  "type": "import"
 },
 "libcst.MatrixMultiply": {
  "data": {
   "shadows": "libcst._nodes.op.MatrixMultiply"
  },
  "type": "import"
 },
 "libcst.MatrixMultiplyAssign": {
  "data": {
   "shadows": "libcst._nodes.op.MatrixMultiplyAssign"
  },
  "type": "import"
 },
 "libcst.MaybeSentinel": {
  "data": {
   "shadows": "libcst._maybe_sentinel.MaybeSentinel"
  },
  "type": "import"
 },
 "libcst.MetadataDependent": {
  "data": {
   "shadows": "libcst._metadata_dependent.MetadataDependent"
  },
  "type": "import"
 },
 "libcst.MetadataException": {
  "data": {
   "shadows": "libcst._exceptions.MetadataException"
  },
  "type": "import"
 },
 "libcst.MetadataWrapper": {
  "data": {
   "shadows": "libcst.metadata.wrapper.MetadataWrapper"
  },
  "type": "import"
 },
 "libcst.Minus": {
  "data": {
   "shadows": "libcst._nodes.op.Minus"
  },
  "type": "import"
 },
 "libcst.Module": {
  "data": {
   "shadows": "libcst._nodes.module.Module"
  },
  "type": "import"
 },
 "libcst.Modulo": {
  "data": {
   "shadows": "libcst._nodes.op.Modulo"
  },
  "type": "import"
 },
 "libcst.ModuloAssign": {
  "data": {
   "shadows": "libcst._nodes.op.ModuloAssign"
  },
  "type": "import"
 },
 "libcst.Multiply": {
  "data": {
   "shadows": "libcst._nodes.op.Multiply"
  },
  "type": "import"
 },
 "libcst.MultiplyAssign": {
  "data": {
   "shadows": "libcst._nodes.op.MultiplyAssign"
  },
  "type": "import"
 },
 "libcst.Name": {
  "data": {
   "shadows": "libcst._nodes.expression.Name"
  },
  "type": "import"
 },
 "libcst.NameItem": {
  "data": {
   "shadows": "libcst._nodes.statement.NameItem"
  },
  "type": "import"
 },
 "libcst.NamedExpr": {
  "data": {
   "shadows": "libcst._nodes.expression.NamedExpr"
  },
  "type": "import"
 },
 "libcst.Newline": {
  "data": {
   "shadows": "libcst._nodes.whitespace.Newline"
  },
  "type": "import"
 },
 "libcst.Nonlocal": {
  "data": {
   "shadows": "libcst._nodes.statement.Nonlocal"
  },
  "type": "import"
 },
 "libcst.Not": {
  "data": {
   "shadows": "libcst._nodes.op.Not"
  },
  "type": "import"
 },
 "libcst.NotEqual": {
  "data": {
   "shadows": "libcst._nodes.op.NotEqual"
  },
  "type": "import"
 },
 "libcst.NotIn": {
  "data": {
   "shadows": "libcst._nodes.op.NotIn"
  },
  "type": "import"
 },
 "libcst.Or": {
  "data": {
   "shadows": "libcst._nodes.op.Or"
  },
  "type": "import"
 },
 "libcst.Param": {
  "data": {
   "shadows": "libcst._nodes.expression.Param"
  },
  "type": "import"
 },
 "libcst.ParamSlash": {
  "data": {
   "shadows": "libcst._nodes.expression.ParamSlash"
  },
  "type": "import"
 },
 "libcst.ParamStar": {
  "data": {
   "shadows": "libcst._nodes.expression.ParamStar"
  },
  "type": "import"
 },
 "libcst.Parameters": {
  "data": {
   "shadows": "libcst._nodes.expression.Parameters"
  },
  "type": "import"
 },
 "libcst.ParenthesizedWhitespace": {
  "data": {
   "shadows": "libcst._nodes.whitespace.ParenthesizedWhitespace"
  },
  "type": "import"
 },
 "libcst.ParserSyntaxError": {
  "data": {
   "shadows": "libcst._exceptions.ParserSyntaxError"
  },
  "type": "import"
 },
 "libcst.PartialParserConfig": {
  "data": {
   "shadows": "libcst._parser.types.config.PartialParserConfig"
  },
  "type": "import"
 },
 "libcst.Pass": {
  "data": {
   "shadows": "libcst._nodes.statement.Pass"
  },
  "type": "import"
 },
 "libcst.Plus": {
  "data": {
   "shadows": "libcst._nodes.op.Plus"
  },
  "type": "import"
 },
 "libcst.Power": {
  "data": {
   "shadows": "libcst._nodes.op.Power"
  },
  "type": "import"
 },
 "libcst.PowerAssign": {
  "data": {
   "shadows": "libcst._nodes.op.PowerAssign"
  },
  "type": "import"
 },
 "libcst.Raise": {
  "data": {
   "shadows": "libcst._nodes.statement.Raise"
  },
  "type": "import"
 },
 "libcst.RemovalSentinel": {
  "data": {
   "shadows": "libcst._removal_sentinel.RemovalSentinel"
  },
  "type": "import"
 },
 "libcst.RemoveFromParent": {
  "data": {
   "shadows": "libcst._removal_sentinel.RemoveFromParent"
  },
  "type": "import"
 },
 "libcst.Return": {
  "data": {
   "shadows": "libcst._nodes.statement.Return"
  },
  "type": "import"
 },
 "libcst.RightCurlyBrace": {
  "data": {
   "shadows": "libcst._nodes.expression.RightCurlyBrace"
  },
  "type": "import"
 },
 "libcst.RightParen": {
  "data": {
   "shadows": "libcst._nodes.expression.RightParen"
  },
  "type": "import"
 },
 "libcst.RightShift": {
  "data": {
   "shadows": "libcst._nodes.op.RightShift"
  },
  "type": "import"
 },
 "libcst.RightShiftAssign": {
  "data": {
   "shadows": "libcst._nodes.op.RightShiftAssign"
  },
  "type": "import"
 },
 "libcst.RightSquareBracket": {
  "data": {
   "shadows": "libcst._nodes.expression.RightSquareBracket"
  },
  "type": "import"
 },
 "libcst.Semicolon": {
  "data": {
   "shadows": "libcst._nodes.op.Semicolon"
  },
  "type": "import"
 },
 "libcst.Set": {
  "data": {
   "shadows": "libcst._nodes.expression.Set"
  },
  "type": "import"
 },
 "libcst.SetComp": {
  "data": {
   "shadows": "libcst._nodes.expression.SetComp"
  },
  "type": "import"
 },
 "libcst.SimpleStatementLine": {
  "data": {
   "shadows": "libcst._nodes.statement.SimpleStatementLine"
  },
  "type": "import"
 },
 "libcst.SimpleStatementSuite": {
  "data": {
   "shadows": "libcst._nodes.statement.SimpleStatementSuite"
  },
  "type": "import"
 },
 "libcst.SimpleString": {
  "data": {
   "shadows": "libcst._nodes.expression.SimpleString"
  },
  "type": "import"
 },
 "libcst.SimpleWhitespace": {
  "data": {
   "shadows": "libcst._nodes.whitespace.SimpleWhitespace"
  },
  "type": "import"
 },
 "libcst.Slice": {
  "data": {
   "shadows": "libcst._nodes.expression.Slice"
  },
  "type": "import"
 },
 "libcst.StarredDictElement": {
  "data": {
   "shadows": "libcst._nodes.expression.StarredDictElement"
  },
  "type": "import"
 },
 "libcst.StarredElement": {
  "data": {
   "shadows": "libcst._nodes.expression.StarredElement"
  },
  "type": "import"
 },
 "libcst.Subscript": {
  "data": {
   "shadows": "libcst._nodes.expression.Subscript"
  },
  "type": "import"
 },
 "libcst.SubscriptElement": {
  "data": {
   "shadows": "libcst._nodes.expression.SubscriptElement"
  },
  "type": "import"
 },
 "libcst.Subtract": {
  "data": {
   "shadows": "libcst._nodes.op.Subtract"
  },
  "type": "import"
 },
 "libcst.SubtractAssign": {
  "data": {
   "shadows": "libcst._nodes.op.SubtractAssign"
  },
  "type": "import"
 },
 "libcst.TrailingWhitespace": {
  "data": {
   "shadows": "libcst._nodes.whitespace.TrailingWhitespace"
  },
  "type": "import"
 },
 "libcst.Try": {
  "data": {
   "shadows": "libcst._nodes.statement.Try"
  },
  "type": "import"
 },
 "libcst.Tuple": {
  "data": {
   "shadows": "libcst._nodes.expression.Tuple"
  },
  "type": "import"
 },
 "libcst.UnaryOperation": {
  "data": {
   "shadows": "libcst._nodes.expression.UnaryOperation"
  },
  "type": "import"
 },
 "libcst.VisitorMetadataProvider": {
  "data": {
   "shadows": "libcst.metadata.base_provider.VisitorMetadataProvider"
  },
  "type": "import"
 },
 "libcst.While": {
  "data": {
   "shadows": "libcst._nodes.statement.While"
  },
  "type": "import"
 },
 "libcst.With": {
  "data": {
   "shadows": "libcst._nodes.statement.With"
  },
  "type": "import"
 },
 "libcst.WithItem": {
  "data": {
   "shadows": "libcst._nodes.statement.WithItem"
  },
  "type": "import"
 },
 "libcst.Yield": {
  "data": {
   "shadows": "libcst._nodes.expression.Yield"
  },
  "type": "import"
 },
 "libcst.__all__": {
  "data": {
   "lineno": 205
  },
  "type": "constant"
 },
 "libcst._add_slots": {
  "data": {
   "symbols_in_volume": {
    "typing.TypeVar": {
     "line number": [
      9
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._add_slots.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._add_slots.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "libcst._add_slots.Type": {
  "data": {
   "shadows": "typing.Type"
  },
  "type": "import"
 },
 "libcst._add_slots.TypeVar": {
  "data": {
   "shadows": "typing.TypeVar"
  },
  "type": "import"
 },
 "libcst._add_slots._T": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "libcst._add_slots.add_slots": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      18,
      39
     ]
    },
    "dict": {
     "line number": [
      21
     ]
    },
    "getattr": {
     "line number": [
      32,
      37
     ]
    },
    "libcst._add_slots._T": {
     "line number": [
      12,
      12
     ]
    },
    "libcst._add_slots.dataclasses": {
     "line number": [
      22
     ]
    },
    "tuple": {
     "line number": [
      22
     ]
    },
    "type": {
     "line number": [
      38,
      41
     ]
    },
    "typing.Type": {
     "line number": [
      12,
      12
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._add_slots.add_slots.__getstate__": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      50
     ]
    },
    "hasattr": {
     "line number": [
      50
     ]
    },
    "object": {
     "line number": [
      48
     ]
    },
    "str": {
     "line number": [
      48
     ]
    },
    "typing.Any": {
     "line number": [
      48
     ]
    },
    "typing.Mapping": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._add_slots.add_slots.__setstate__": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "object": {
     "line number": [
      53
     ]
    },
    "object.__setattr__": {
     "line number": [
      55
     ]
    },
    "str": {
     "line number": [
      53
     ]
    },
    "typing.Any": {
     "line number": [
      53
     ]
    },
    "typing.Mapping": {
     "line number": [
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._add_slots.dataclasses": {
  "data": {
   "shadows": "dataclasses"
  },
  "type": "import"
 },
 "libcst._batched_visitor": {
  "data": {
   "symbols_in_volume": {
    "libcst._batched_visitor.VisitorMethod": {
     "line number": [
      27
     ]
    },
    "str": {
     "line number": [
      27
     ]
    },
    "typing.Callable": {
     "line number": [
      26
     ]
    },
    "typing.List": {
     "line number": [
      27
     ]
    },
    "typing.Mapping": {
     "line number": [
      27
     ]
    },
    "typing.TYPE_CHECKING": {
     "line number": [
      23
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._batched_visitor.BatchableCSTVisitor": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "libcst._metadata_dependent.MetadataDependent": {
     "line number": [
      30
     ]
    },
    "libcst._typed_visitor.CSTTypedVisitorFunctions": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._batched_visitor.BatchableCSTVisitor.get_visitors": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      61
     ]
    },
    "getattr": {
     "line number": [
      53
     ]
    },
    "libcst._batched_visitor.VisitorMethod": {
     "line number": [
      40
     ]
    },
    "libcst._batched_visitor.inspect": {
     "line number": [
      48,
      51
     ]
    },
    "str": {
     "line number": [
      40
     ]
    },
    "typing.Mapping": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._batched_visitor.CSTNode": {
  "data": {
   "shadows": "libcst._nodes.base.CSTNode"
  },
  "type": "import"
 },
 "libcst._batched_visitor.CSTNodeT": {
  "data": {
   "shadows": "libcst._visitors.CSTNodeT"
  },
  "type": "import"
 },
 "libcst._batched_visitor.CSTTypedVisitorFunctions": {
  "data": {
   "shadows": "libcst._typed_visitor.CSTTypedVisitorFunctions"
  },
  "type": "import"
 },
 "libcst._batched_visitor.CSTVisitor": {
  "data": {
   "shadows": "libcst._visitors.CSTVisitor"
  },
  "type": "import"
 },
 "libcst._batched_visitor.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst._batched_visitor.Iterable": {
  "data": {
   "shadows": "typing.Iterable"
  },
  "type": "import"
 },
 "libcst._batched_visitor.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst._batched_visitor.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "libcst._batched_visitor.MetadataDependent": {
  "data": {
   "shadows": "libcst._metadata_dependent.MetadataDependent"
  },
  "type": "import"
 },
 "libcst._batched_visitor.MutableMapping": {
  "data": {
   "shadows": "typing.MutableMapping"
  },
  "type": "import"
 },
 "libcst._batched_visitor.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._batched_visitor.TYPE_CHECKING": {
  "data": {
   "shadows": "typing.TYPE_CHECKING"
  },
  "type": "import"
 },
 "libcst._batched_visitor.VisitorMethod": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "libcst._batched_visitor._BatchedCSTVisitor": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": {
    "libcst._batched_visitor.VisitorMethod": {
     "line number": [
      111,
      112
     ]
    },
    "libcst._batched_visitor._VisitorMethodCollection": {
     "line number": [
      110
     ]
    },
    "libcst._visitors.CSTVisitor": {
     "line number": [
      105
     ]
    },
    "typing.Optional": {
     "line number": [
      111,
      112
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._batched_visitor._BatchedCSTVisitor.__init__": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": {
    "libcst._batched_visitor.VisitorMethod": {
     "line number": [
      118,
      119
     ]
    },
    "libcst._batched_visitor._VisitorMethodCollection": {
     "line number": [
      116
     ]
    },
    "super": {
     "line number": [
      121
     ]
    },
    "typing.Optional": {
     "line number": [
      118,
      119
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._batched_visitor._BatchedCSTVisitor.on_leave": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": {
    "after_leave": {
     "line number": [
      147
     ]
    },
    "type": {
     "line number": [
      142
     ]
    },
    "v": {
     "line number": [
      143,
      144
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._batched_visitor._BatchedCSTVisitor.on_leave_attribute": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": {
    "str": {
     "line number": [
      158
     ]
    },
    "type": {
     "line number": [
      163
     ]
    },
    "v": {
     "line number": [
      164,
      165
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._batched_visitor._BatchedCSTVisitor.on_visit": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": {
    "before_visit": {
     "line number": [
      132
     ]
    },
    "bool": {
     "line number": [
      126
     ]
    },
    "type": {
     "line number": [
      133
     ]
    },
    "v": {
     "line number": [
      135
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._batched_visitor._BatchedCSTVisitor.on_visit_attribute": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": {
    "str": {
     "line number": [
      149
     ]
    },
    "type": {
     "line number": [
      154
     ]
    },
    "v": {
     "line number": [
      155,
      156
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._batched_visitor._VisitorMethodCollection": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "libcst._batched_visitor._get_visitor_methods": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": {
    "libcst._batched_visitor.BatchableCSTVisitor": {
     "line number": [
      91
     ]
    },
    "libcst._batched_visitor.VisitorMethod": {
     "line number": [
      98
     ]
    },
    "libcst._batched_visitor._VisitorMethodCollection": {
     "line number": [
      92
     ]
    },
    "str": {
     "line number": [
      98
     ]
    },
    "typing.Iterable": {
     "line number": [
      91
     ]
    },
    "typing.List": {
     "line number": [
      98
     ]
    },
    "typing.MutableMapping": {
     "line number": [
      98
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._batched_visitor.cast": {
  "data": {
   "shadows": "typing.cast"
  },
  "type": "import"
 },
 "libcst._batched_visitor.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "libcst._batched_visitor.visit_batched": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": {
    "libcst._batched_visitor.BatchableCSTVisitor": {
     "line number": [
      66
     ]
    },
    "libcst._batched_visitor.VisitorMethod": {
     "line number": [
      67,
      68
     ]
    },
    "libcst._batched_visitor._BatchedCSTVisitor": {
     "line number": [
      84
     ]
    },
    "libcst._batched_visitor._get_visitor_methods": {
     "line number": [
      83
     ]
    },
    "libcst._visitors.CSTNodeT": {
     "line number": [
      65,
      87,
      69
     ]
    },
    "typing.Iterable": {
     "line number": [
      66
     ]
    },
    "typing.Optional": {
     "line number": [
      67,
      68
     ]
    },
    "typing.cast": {
     "line number": [
      87
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._exceptions": {
  "data": {
   "symbols_in_volume": {
    "str": {
     "line number": [
      17,
      18,
      19,
      20
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._exceptions.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._exceptions.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst._exceptions.EOFSentinel": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "enum.Enum": {
     "line number": [
      23
     ]
    },
    "enum.auto": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._exceptions.Enum": {
  "data": {
   "shadows": "enum.Enum"
  },
  "type": "import"
 },
 "libcst._exceptions.Iterable": {
  "data": {
   "shadows": "typing.Iterable"
  },
  "type": "import"
 },
 "libcst._exceptions.MetadataException": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      230
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._exceptions.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._exceptions.ParserSyntaxError": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      90
     ]
    },
    "int": {
     "line number": [
      114,
      118
     ]
    },
    "str": {
     "line number": [
      107,
      111
     ]
    },
    "typing.Sequence": {
     "line number": [
      111
     ]
    },
    "typing_extensions.final": {
     "line number": [
      89
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._exceptions.ParserSyntaxError.__init__": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": {
    "int": {
     "line number": [
      121,
      121
     ]
    },
    "libcst._exceptions.ParserSyntaxError": {
     "line number": [
      123
     ]
    },
    "str": {
     "line number": [
      121,
      121
     ]
    },
    "super": {
     "line number": [
      123
     ]
    },
    "typing.Sequence": {
     "line number": [
      121
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._exceptions.ParserSyntaxError.__reduce__": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": {
    "libcst._exceptions._parser_syntax_error_unpickle": {
     "line number": [
      133
     ]
    },
    "object": {
     "line number": [
      131
     ]
    },
    "typing.Callable": {
     "line number": [
      131
     ]
    },
    "typing.Tuple": {
     "line number": [
      131,
      131
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._exceptions.ParserSyntaxError.__repr__": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": {
    "str": {
     "line number": [
      162
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._exceptions.ParserSyntaxError.__str__": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": {
    "str": {
     "line number": [
      144
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._exceptions.ParserSyntaxError.context": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": {
    "len": {
     "line number": [
      183,
      185,
      188
     ]
    },
    "libcst._tabs.expand_tabs": {
     "line number": [
      189
     ]
    },
    "property": {
     "line number": [
      169
     ]
    },
    "str": {
     "line number": [
      170
     ]
    },
    "typing.Optional": {
     "line number": [
      170
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._exceptions.ParserSyntaxError.editor_column": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": {
    "int": {
     "line number": [
      210
     ]
    },
    "len": {
     "line number": [
      224
     ]
    },
    "libcst._tabs.expand_tabs": {
     "line number": [
      224
     ]
    },
    "property": {
     "line number": [
      209
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._exceptions.ParserSyntaxError.editor_line": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": {
    "int": {
     "line number": [
      202
     ]
    },
    "property": {
     "line number": [
      201
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._exceptions.PartialParserSyntaxError": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      71
     ]
    },
    "str": {
     "line number": [
      83
     ]
    },
    "typing_extensions.final": {
     "line number": [
      70
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._exceptions.PartialParserSyntaxError.__init__": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": {
    "str": {
     "line number": [
      85
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._exceptions.PythonTokenTypes": {
  "data": {
   "shadows": "libcst._parser.parso.python.token.PythonTokenTypes"
  },
  "type": "import"
 },
 "libcst._exceptions.ReservedString": {
  "data": {
   "shadows": "libcst._parser.parso.pgen2.generator.ReservedString"
  },
  "type": "import"
 },
 "libcst._exceptions.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst._exceptions.Token": {
  "data": {
   "shadows": "libcst._parser.types.token.Token"
  },
  "type": "import"
 },
 "libcst._exceptions.TokenType": {
  "data": {
   "shadows": "libcst._parser.parso.python.token.TokenType"
  },
  "type": "import"
 },
 "libcst._exceptions.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst._exceptions.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst._exceptions._parser_syntax_error_unpickle": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": {
    "libcst._exceptions.ParserSyntaxError": {
     "line number": [
      67
     ]
    },
    "typing.Any": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._exceptions.auto": {
  "data": {
   "shadows": "enum.auto"
  },
  "type": "import"
 },
 "libcst._exceptions.expand_tabs": {
  "data": {
   "shadows": "libcst._tabs.expand_tabs"
  },
  "type": "import"
 },
 "libcst._exceptions.final": {
  "data": {
   "shadows": "typing_extensions.final"
  },
  "type": "import"
 },
 "libcst._exceptions.get_expected_str": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      32,
      43,
      48
     ]
    },
    "len": {
     "line number": [
      53,
      58
     ]
    },
    "libcst._exceptions.EOFSentinel": {
     "line number": [
      28,
      29,
      32,
      43
     ]
    },
    "libcst._parser.parso.pgen2.generator.ReservedString": {
     "line number": [
      29
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.DEDENT": {
     "line number": [
      38
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.ENDMARKER": {
     "line number": [
      33
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.INDENT": {
     "line number": [
      36
     ]
    },
    "libcst._parser.parso.python.token.TokenType": {
     "line number": [
      29,
      48
     ]
    },
    "libcst._parser.types.token.Token": {
     "line number": [
      28
     ]
    },
    "repr": {
     "line number": [
      41,
      48,
      48
     ]
    },
    "sorted": {
     "line number": [
      46
     ]
    },
    "str": {
     "line number": [
      30
     ]
    },
    "typing.Iterable": {
     "line number": [
      29
     ]
    },
    "typing.Union": {
     "line number": [
      28,
      29,
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._maybe_sentinel": {
  "data": {},
  "type": "module"
 },
 "libcst._maybe_sentinel.Enum": {
  "data": {
   "shadows": "enum.Enum"
  },
  "type": "import"
 },
 "libcst._maybe_sentinel.MaybeSentinel": {
  "data": {
   "lineno": 9,
   "symbols_in_volume": {
    "enum.Enum": {
     "line number": [
      9
     ]
    },
    "enum.auto": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._maybe_sentinel.MaybeSentinel.__repr__": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "str": {
     "line number": [
      58,
      57
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._maybe_sentinel.auto": {
  "data": {
   "shadows": "enum.auto"
  },
  "type": "import"
 },
 "libcst._metadata_dependent": {
  "data": {
   "symbols_in_volume": {
    "object": {
     "line number": [
      33
     ]
    },
    "typing.TYPE_CHECKING": {
     "line number": [
      21
     ]
    },
    "typing.TypeVar": {
     "line number": [
      31
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._metadata_dependent.ABC": {
  "data": {
   "shadows": "abc.ABC"
  },
  "type": "import"
 },
 "libcst._metadata_dependent.BaseMetadataProvider": {
  "data": {
   "shadows": "libcst.metadata.base_provider.BaseMetadataProvider"
  },
  "type": "import"
 },
 "libcst._metadata_dependent.CSTNode": {
  "data": {
   "shadows": "libcst._nodes.base.CSTNode"
  },
  "type": "import"
 },
 "libcst._metadata_dependent.ClassVar": {
  "data": {
   "shadows": "typing.ClassVar"
  },
  "type": "import"
 },
 "libcst._metadata_dependent.Collection": {
  "data": {
   "shadows": "typing.Collection"
  },
  "type": "import"
 },
 "libcst._metadata_dependent.Iterator": {
  "data": {
   "shadows": "typing.Iterator"
  },
  "type": "import"
 },
 "libcst._metadata_dependent.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "libcst._metadata_dependent.MetadataDependent": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      36
     ]
    },
    "object": {
     "line number": [
      46
     ]
    },
    "typing.ClassVar": {
     "line number": [
      49
     ]
    },
    "typing.Collection": {
     "line number": [
      49
     ]
    },
    "typing.Mapping": {
     "line number": [
      46,
      46
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._metadata_dependent.MetadataDependent.__init__": {
  "data": {
   "lineno": 51
  },
  "type": "function"
 },
 "libcst._metadata_dependent.MetadataDependent.get_inherited_dependencies": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      65
     ]
    },
    "classmethod": {
     "line number": [
      54
     ]
    },
    "frozenset": {
     "line number": [
      71
     ]
    },
    "issubclass": {
     "line number": [
      68
     ]
    },
    "libcst._metadata_dependent.MetadataDependent": {
     "line number": [
      68
     ]
    },
    "libcst._metadata_dependent.inspect": {
     "line number": [
      67
     ]
    },
    "set": {
     "line number": [
      66
     ]
    },
    "typing.Collection": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._metadata_dependent.MetadataDependent.get_metadata": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      101,
      106
     ]
    },
    "libcst._metadata_dependent._T": {
     "line number": [
      93,
      111,
      113,
      94
     ]
    },
    "libcst._metadata_dependent._UNDEFINED_DEFAULT": {
     "line number": [
      93,
      110
     ]
    },
    "type": {
     "line number": [
      102
     ]
    },
    "typing.Type": {
     "line number": [
      91
     ]
    },
    "typing.cast": {
     "line number": [
      111,
      113
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._metadata_dependent.MetadataDependent.resolve": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": {
    "contextlib.contextmanager": {
     "line number": [
      74
     ]
    },
    "typing.Iterator": {
     "line number": [
      75
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._metadata_dependent.MetadataWrapper": {
  "data": {
   "shadows": "libcst.metadata.wrapper.MetadataWrapper"
  },
  "type": "import"
 },
 "libcst._metadata_dependent.ProviderT": {
  "data": {
   "shadows": "libcst.metadata.base_provider.ProviderT"
  },
  "type": "import"
 },
 "libcst._metadata_dependent.TYPE_CHECKING": {
  "data": {
   "shadows": "typing.TYPE_CHECKING"
  },
  "type": "import"
 },
 "libcst._metadata_dependent.Type": {
  "data": {
   "shadows": "typing.Type"
  },
  "type": "import"
 },
 "libcst._metadata_dependent.TypeVar": {
  "data": {
   "shadows": "typing.TypeVar"
  },
  "type": "import"
 },
 "libcst._metadata_dependent._T": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "libcst._metadata_dependent._UNDEFINED_DEFAULT": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "libcst._metadata_dependent.cast": {
  "data": {
   "shadows": "typing.cast"
  },
  "type": "import"
 },
 "libcst._metadata_dependent.contextmanager": {
  "data": {
   "shadows": "contextlib.contextmanager"
  },
  "type": "import"
 },
 "libcst._metadata_dependent.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "libcst._nodes": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.base": {
  "data": {
   "symbols_in_volume": {
    "typing.Sequence": {
     "line number": [
      19
     ]
    },
    "typing.TypeVar": {
     "line number": [
      18
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._nodes.base.ABC": {
  "data": {
   "shadows": "abc.ABC"
  },
  "type": "import"
 },
 "libcst._nodes.base.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.base.BaseLeaf": {
  "data": {
   "lineno": 464,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      464
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      464
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.base.BaseLeaf._visit_and_replace_children": {
  "data": {
   "lineno": 470,
   "symbols_in_volume": {
    "libcst._nodes.base._CSTNodeSelfT": {
     "line number": [
      471,
      472
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      471
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base.BaseLeaf.children": {
  "data": {
   "lineno": 465,
   "symbols_in_volume": {
    "libcst._nodes.base.CSTNode": {
     "line number": [
      466
     ]
    },
    "property": {
     "line number": [
      465
     ]
    },
    "typing.Sequence": {
     "line number": [
      466
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base.BaseValueToken": {
  "data": {
   "lineno": 476,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      476
     ]
    },
    "libcst._nodes.base.BaseLeaf": {
     "line number": [
      476
     ]
    },
    "str": {
     "line number": [
      484
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.base.BaseValueToken._codegen_impl": {
  "data": {
   "lineno": 486,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      486
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base.CSTCodegenError": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "SyntaxError": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.base.CSTNode": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      111
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      110
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.base.CSTNode.__eq__": {
  "data": {
   "lineno": 420,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      420
     ]
    },
    "libcst._nodes.base._CSTNodeSelfT": {
     "line number": [
      420,
      420
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base.CSTNode.__hash__": {
  "data": {
   "lineno": 434,
   "symbols_in_volume": {
    "id": {
     "line number": [
      436
     ]
    },
    "int": {
     "line number": [
      434
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base.CSTNode.__init_subclass__": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      117
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      130,
      132,
      134
     ]
    },
    "super": {
     "line number": [
      127
     ]
    },
    "typing.Any": {
     "line number": [
      118
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base.CSTNode.__post_init__": {
  "data": {
   "lineno": 112
  },
  "type": "function"
 },
 "libcst._nodes.base.CSTNode.__repr__": {
  "data": {
   "lineno": 438,
   "symbols_in_volume": {
    "dataclasses.fields": {
     "line number": [
      439,
      443
     ]
    },
    "getattr": {
     "line number": [
      446
     ]
    },
    "len": {
     "line number": [
      439
     ]
    },
    "libcst._nodes.base._indent": {
     "line number": [
      447
     ]
    },
    "libcst._nodes.base._pretty_repr": {
     "line number": [
      447
     ]
    },
    "str": {
     "line number": [
      438
     ]
    },
    "type": {
     "line number": [
      440,
      442
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base.CSTNode._codegen": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      296
     ]
    },
    "typing.Any": {
     "line number": [
      296
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base.CSTNode._codegen_impl": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": {
    "abc.abstractmethod": {
     "line number": [
      292
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      293
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base.CSTNode._is_removable": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      284
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base.CSTNode._validate": {
  "data": {
   "lineno": 136
  },
  "type": "function"
 },
 "libcst._nodes.base.CSTNode._visit_and_replace_children": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": {
    "abc.abstractmethod": {
     "line number": [
      269
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      270
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base.CSTNode.children": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": {
    "libcst._nodes.base._ChildrenCollectionVisitor": {
     "line number": [
      204
     ]
    },
    "property": {
     "line number": [
      182
     ]
    },
    "typing.Sequence": {
     "line number": [
      183
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base.CSTNode.deep_clone": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      357
     ]
    },
    "bytes": {
     "line number": [
      352
     ]
    },
    "dataclasses.field": {
     "line number": [
      342
     ]
    },
    "dataclasses.field.name": {
     "line number": [
      343
     ]
    },
    "dataclasses.fields": {
     "line number": [
      342
     ]
    },
    "getattr": {
     "line number": [
      346
     ]
    },
    "isinstance": {
     "line number": [
      352
     ]
    },
    "libcst._nodes.base._CSTNodeSelfT": {
     "line number": [
      325,
      325
     ]
    },
    "libcst._nodes.base._clone": {
     "line number": [
      353,
      356,
      358
     ]
    },
    "object": {
     "line number": [
      341
     ]
    },
    "str": {
     "line number": [
      341,
      352
     ]
    },
    "tuple": {
     "line number": [
      356
     ]
    },
    "type": {
     "line number": [
      360
     ]
    },
    "typing.Dict": {
     "line number": [
      341
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base.CSTNode.deep_equals": {
  "data": {
   "lineno": 362,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      362
     ]
    },
    "libcst._nodes.deep_equals.deep_equals": {
     "line number": [
      369
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base.CSTNode.deep_remove": {
  "data": {
   "lineno": 387,
   "symbols_in_volume": {
    "libcst._nodes.base._CSTNodeSelfT": {
     "line number": [
      388,
      389
     ]
    },
    "libcst._nodes.base._ChildReplacementTransformer": {
     "line number": [
      396
     ]
    },
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      389
     ]
    },
    "libcst._removal_sentinel.RemovalSentinel.REMOVE": {
     "line number": [
      396
     ]
    },
    "typing.Union": {
     "line number": [
      389
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base.CSTNode.deep_replace": {
  "data": {
   "lineno": 371,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      384
     ]
    },
    "isinstance": {
     "line number": [
      382
     ]
    },
    "libcst._nodes.base._CSTNodeSelfT": {
     "line number": [
      372,
      373
     ]
    },
    "libcst._nodes.base._ChildReplacementTransformer": {
     "line number": [
      381
     ]
    },
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      382
     ]
    },
    "libcst._types.CSTNodeT": {
     "line number": [
      372,
      373
     ]
    },
    "typing.Union": {
     "line number": [
      373
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base.CSTNode.field": {
  "data": {
   "lineno": 451,
   "symbols_in_volume": {
    "classmethod": {
     "line number": [
      451
     ]
    },
    "cls": {
     "line number": [
      461
     ]
    },
    "dataclasses.field": {
     "line number": [
      461
     ]
    },
    "object": {
     "line number": [
      453,
      453
     ]
    },
    "typing.Any": {
     "line number": [
      453
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base.CSTNode.validate_types_deep": {
  "data": {
   "lineno": 174
  },
  "type": "function"
 },
 "libcst._nodes.base.CSTNode.validate_types_shallow": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      168
     ]
    },
    "dataclasses.fields": {
     "line number": [
      165
     ]
    },
    "getattr": {
     "line number": [
      166
     ]
    },
    "libcst._type_enforce.is_value_of_type": {
     "line number": [
      167
     ]
    },
    "type": {
     "line number": [
      170,
      171
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base.CSTNode.visit": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      238
     ]
    },
    "isinstance": {
     "line number": [
      230,
      237
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      237
     ]
    },
    "libcst._nodes.base._CSTNodeSelfT": {
     "line number": [
      209,
      225,
      210
     ]
    },
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      237,
      210
     ]
    },
    "libcst._visitors.CSTVisitor": {
     "line number": [
      230
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      209
     ]
    },
    "type": {
     "line number": [
      240
     ]
    },
    "typing.Union": {
     "line number": [
      210
     ]
    },
    "typing.cast": {
     "line number": [
      224
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base.CSTNode.with_changes": {
  "data": {
   "lineno": 301,
   "symbols_in_volume": {
    "dataclasses.replace": {
     "line number": [
      323
     ]
    },
    "libcst._nodes.base._CSTNodeSelfT": {
     "line number": [
      301,
      301
     ]
    },
    "typing.Any": {
     "line number": [
      301
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base.CSTNode.with_deep_changes": {
  "data": {
   "lineno": 399,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      417
     ]
    },
    "isinstance": {
     "line number": [
      415
     ]
    },
    "libcst._nodes.base._CSTNodeSelfT": {
     "line number": [
      400,
      401
     ]
    },
    "libcst._nodes.base._ChildWithChangesTransformer": {
     "line number": [
      414
     ]
    },
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      415
     ]
    },
    "typing.Any": {
     "line number": [
      400
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base.CSTNodeT": {
  "data": {
   "shadows": "libcst._types.CSTNodeT"
  },
  "type": "import"
 },
 "libcst._nodes.base.CSTTransformer": {
  "data": {
   "shadows": "libcst._visitors.CSTTransformer"
  },
  "type": "import"
 },
 "libcst._nodes.base.CSTValidationError": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "SyntaxError": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.base.CSTVisitor": {
  "data": {
   "shadows": "libcst._visitors.CSTVisitor"
  },
  "type": "import"
 },
 "libcst._nodes.base.CSTVisitorT": {
  "data": {
   "shadows": "libcst._visitors.CSTVisitorT"
  },
  "type": "import"
 },
 "libcst._nodes.base.CodegenState": {
  "data": {
   "shadows": "libcst._nodes.internal.CodegenState"
  },
  "type": "import"
 },
 "libcst._nodes.base.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "libcst._nodes.base.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst._nodes.base.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "libcst._nodes.base.RemovalSentinel": {
  "data": {
   "shadows": "libcst._removal_sentinel.RemovalSentinel"
  },
  "type": "import"
 },
 "libcst._nodes.base.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst._nodes.base.TypeVar": {
  "data": {
   "shadows": "typing.TypeVar"
  },
  "type": "import"
 },
 "libcst._nodes.base.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst._nodes.base._CSTNodeSelfT": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "libcst._nodes.base._ChildReplacementTransformer": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "libcst._visitors.CSTTransformer": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.base._ChildReplacementTransformer.__init__": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      41
     ]
    },
    "typing.Union": {
     "line number": [
      41
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base._ChildReplacementTransformer.on_leave": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      53
     ]
    },
    "typing.Union": {
     "line number": [
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base._ChildReplacementTransformer.on_visit": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      46
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base._ChildWithChangesTransformer": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "libcst._visitors.CSTTransformer": {
     "line number": [
      59
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.base._ChildWithChangesTransformer.__init__": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "str": {
     "line number": [
      60
     ]
    },
    "typing.Any": {
     "line number": [
      60
     ]
    },
    "typing.Mapping": {
     "line number": [
      60
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base._ChildWithChangesTransformer.on_leave": {
  "data": {
   "lineno": 69
  },
  "type": "function"
 },
 "libcst._nodes.base._ChildWithChangesTransformer.on_visit": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      64
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base._ChildrenCollectionVisitor": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "libcst._visitors.CSTVisitor": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.base._ChildrenCollectionVisitor.__init__": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "typing.List": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base._ChildrenCollectionVisitor.on_visit": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base._NOOPVisitor": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": {
    "libcst._visitors.CSTTransformer": {
     "line number": [
      75
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.base._clone": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      106
     ]
    },
    "copy.deepcopy": {
     "line number": [
      107
     ]
    },
    "object": {
     "line number": [
      97,
      97
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base._indent": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": {
    "str": {
     "line number": [
      93,
      93
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base._pretty_repr": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      80,
      80
     ]
    },
    "libcst._nodes.base._pretty_repr_sequence": {
     "line number": [
      81
     ]
    },
    "object": {
     "line number": [
      79
     ]
    },
    "repr": {
     "line number": [
      83
     ]
    },
    "str": {
     "line number": [
      80,
      79
     ]
    },
    "typing.Sequence": {
     "line number": [
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base._pretty_repr_sequence": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "len": {
     "line number": [
      87
     ]
    },
    "libcst._nodes.base._indent": {
     "line number": [
      90
     ]
    },
    "object": {
     "line number": [
      86
     ]
    },
    "repr": {
     "line number": [
      90
     ]
    },
    "str": {
     "line number": [
      86
     ]
    },
    "typing.Sequence": {
     "line number": [
      86
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.base.abstractmethod": {
  "data": {
   "shadows": "abc.abstractmethod"
  },
  "type": "import"
 },
 "libcst._nodes.base.cast": {
  "data": {
   "shadows": "typing.cast"
  },
  "type": "import"
 },
 "libcst._nodes.base.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst._nodes.base.deep_equals_impl": {
  "data": {
   "shadows": "libcst._nodes.deep_equals.deep_equals"
  },
  "type": "import"
 },
 "libcst._nodes.base.deepcopy": {
  "data": {
   "shadows": "copy.deepcopy"
  },
  "type": "import"
 },
 "libcst._nodes.base.field": {
  "data": {
   "shadows": "dataclasses.field"
  },
  "type": "import"
 },
 "libcst._nodes.base.fields": {
  "data": {
   "shadows": "dataclasses.fields"
  },
  "type": "import"
 },
 "libcst._nodes.base.is_value_of_type": {
  "data": {
   "shadows": "libcst._type_enforce.is_value_of_type"
  },
  "type": "import"
 },
 "libcst._nodes.base.replace": {
  "data": {
   "shadows": "dataclasses.replace"
  },
  "type": "import"
 },
 "libcst._nodes.deep_equals": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.deep_equals.CSTNode": {
  "data": {
   "shadows": "libcst._nodes.base.CSTNode"
  },
  "type": "import"
 },
 "libcst._nodes.deep_equals.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst._nodes.deep_equals._deep_equals_cst_node": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      45
     ]
    },
    "dataclasses.fields": {
     "line number": [
      51
     ]
    },
    "getattr": {
     "line number": [
      52,
      53
     ]
    },
    "libcst._nodes.deep_equals.deep_equals": {
     "line number": [
      54
     ]
    },
    "type": {
     "line number": [
      46,
      46
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.deep_equals._deep_equals_sequence": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "all": {
     "line number": [
      42
     ]
    },
    "bool": {
     "line number": [
      30
     ]
    },
    "len": {
     "line number": [
      40,
      40
     ]
    },
    "libcst._nodes.deep_equals.deep_equals": {
     "line number": [
      42
     ]
    },
    "object": {
     "line number": [
      30,
      30
     ]
    },
    "typing.Sequence": {
     "line number": [
      30,
      30
     ]
    },
    "zip": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.deep_equals.deep_equals": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      16
     ]
    },
    "bytes": {
     "line number": [
      21,
      23
     ]
    },
    "isinstance": {
     "line number": [
      17,
      17,
      20,
      21,
      22,
      23
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      17,
      17
     ]
    },
    "libcst._nodes.deep_equals._deep_equals_cst_node": {
     "line number": [
      18
     ]
    },
    "libcst._nodes.deep_equals._deep_equals_sequence": {
     "line number": [
      25
     ]
    },
    "object": {
     "line number": [
      16,
      16
     ]
    },
    "str": {
     "line number": [
      21,
      23
     ]
    },
    "typing.Sequence": {
     "line number": [
      20,
      22
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.deep_equals.fields": {
  "data": {
   "shadows": "dataclasses.fields"
  },
  "type": "import"
 },
 "libcst._nodes.expression": {
  "data": {
   "symbols_in_volume": {
    "typing_extensions.Literal": {
     "line number": [
      528
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._nodes.expression.ABC": {
  "data": {
   "shadows": "abc.ABC"
  },
  "type": "import"
 },
 "libcst._nodes.expression.Annotation": {
  "data": {
   "lineno": 1590,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1591
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1590
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      1614
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      1615
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      1592
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      1611
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      1614,
      1616
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      1616
     ]
    },
    "typing.Union": {
     "line number": [
      1613
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.Annotation._codegen_impl": {
  "data": {
   "lineno": 1637,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      1654
     ]
    },
    "isinstance": {
     "line number": [
      1648,
      1650
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      1650
     ]
    },
    "libcst._nodes.base.CSTCodegenError": {
     "line number": [
      1642
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      1638
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      1648
     ]
    },
    "str": {
     "line number": [
      1638
     ]
    },
    "typing.Optional": {
     "line number": [
      1638
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Annotation._visit_and_replace_children": {
  "data": {
   "lineno": 1620,
   "symbols_in_volume": {
    "libcst._nodes.expression.Annotation": {
     "line number": [
      1621
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      1628,
      1634
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      1622
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1620
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Arg": {
  "data": {
   "lineno": 2107,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      2108
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      2107
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      2125,
      2128
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      2125,
      2128
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      2109
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      2119
     ]
    },
    "libcst._nodes.expression.Name": {
     "line number": [
      2122
     ]
    },
    "libcst._nodes.op.AssignEqual": {
     "line number": [
      2125
     ]
    },
    "libcst._nodes.op.Comma": {
     "line number": [
      2128
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      2136,
      2139
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      2136,
      2139
     ]
    },
    "typing.Optional": {
     "line number": [
      2122
     ]
    },
    "typing.Union": {
     "line number": [
      2125,
      2128
     ]
    },
    "typing_extensions.Literal": {
     "line number": [
      2132
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.Arg._codegen_impl": {
  "data": {
   "lineno": 2166,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2166
     ]
    },
    "isinstance": {
     "line number": [
      2176,
      2183
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      2174,
      2181
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      2166
     ]
    },
    "libcst._nodes.op.AssignEqual": {
     "line number": [
      2176
     ]
    },
    "libcst._nodes.op.Comma": {
     "line number": [
      2183
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Arg._validate": {
  "data": {
   "lineno": 2141,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      2142
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      2143,
      2147,
      2149
     ]
    },
    "libcst._nodes.op.AssignEqual": {
     "line number": [
      2142
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Arg._visit_and_replace_children": {
  "data": {
   "lineno": 2151,
   "symbols_in_volume": {
    "libcst._nodes.expression.Arg": {
     "line number": [
      2152
     ]
    },
    "libcst._nodes.internal.visit_optional": {
     "line number": [
      2157
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      2154,
      2159,
      2161
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      2158,
      2160
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      2151
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.AssignEqual": {
  "data": {
   "shadows": "libcst._nodes.op.AssignEqual"
  },
  "type": "import"
 },
 "libcst._nodes.expression.Asynchronous": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      190
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      189
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      191
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      198
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      198
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.Asynchronous._codegen_impl": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      211
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Asynchronous._validate": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": {
    "len": {
     "line number": [
      201
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      202
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Asynchronous._visit_and_replace_children": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": {
    "libcst._nodes.expression.Asynchronous": {
     "line number": [
      205
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      206
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      204
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Attribute": {
  "data": {
   "lineno": 1355,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1356
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1355
     ]
    },
    "libcst._nodes.expression.BaseAssignTargetExpression": {
     "line number": [
      1357
     ]
    },
    "libcst._nodes.expression.BaseDelTargetExpression": {
     "line number": [
      1357
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      1376
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      1385
     ]
    },
    "libcst._nodes.expression.Name": {
     "line number": [
      1379
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      1387
     ]
    },
    "libcst._nodes.op.Dot": {
     "line number": [
      1383,
      1383
     ]
    },
    "typing.Sequence": {
     "line number": [
      1385,
      1387
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.Attribute._codegen_impl": {
  "data": {
   "lineno": 1405,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      1405
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Attribute._safe_to_use_with_word_operator": {
  "data": {
   "lineno": 1398,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1398
     ]
    },
    "libcst._nodes.expression.Attribute": {
     "line number": [
      1399
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      1398
     ]
    },
    "super": {
     "line number": [
      1399
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Attribute._visit_and_replace_children": {
  "data": {
   "lineno": 1389,
   "symbols_in_volume": {
    "libcst._nodes.expression.Attribute": {
     "line number": [
      1390
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      1392,
      1393,
      1394
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      1391,
      1395
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1389
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Await": {
  "data": {
   "lineno": 2359,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      2360
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      2359
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      2361,
      2369
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      2371
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      2373
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      2377
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      2377
     ]
    },
    "typing.Sequence": {
     "line number": [
      2371,
      2373
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.Await._codegen_impl": {
  "data": {
   "lineno": 2396,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      2396
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Await._validate": {
  "data": {
   "lineno": 2379,
   "symbols_in_volume": {
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      2384
     ]
    },
    "libcst._nodes.expression.Await": {
     "line number": [
      2381
     ]
    },
    "super": {
     "line number": [
      2381
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Await._visit_and_replace_children": {
  "data": {
   "lineno": 2386,
   "symbols_in_volume": {
    "libcst._nodes.expression.Await": {
     "line number": [
      2387
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      2389,
      2392
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      2388,
      2393
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      2386
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.BaseAssignTargetExpression": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      282
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      282
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.BaseBinaryOp": {
  "data": {
   "shadows": "libcst._nodes.op.BaseBinaryOp"
  },
  "type": "import"
 },
 "libcst._nodes.expression.BaseBooleanOp": {
  "data": {
   "shadows": "libcst._nodes.op.BaseBooleanOp"
  },
  "type": "import"
 },
 "libcst._nodes.expression.BaseComp": {
  "data": {
   "lineno": 3403,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      3403
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      3403
     ]
    },
    "libcst._nodes.expression.CompFor": {
     "line number": [
      3409
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.BaseCompOp": {
  "data": {
   "shadows": "libcst._nodes.op.BaseCompOp"
  },
  "type": "import"
 },
 "libcst._nodes.expression.BaseDelTargetExpression": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      302
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      302
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.BaseDict": {
  "data": {
   "lineno": 3127,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      3127
     ]
    },
    "libcst._nodes.expression._BaseSetOrDict": {
     "line number": [
      3127
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.BaseDictElement": {
  "data": {
   "lineno": 2671,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      2671
     ]
    },
    "libcst._nodes.expression._BaseElementImpl": {
     "line number": [
      2671
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.BaseElement": {
  "data": {
   "lineno": 2664,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      2664
     ]
    },
    "libcst._nodes.expression._BaseElementImpl": {
     "line number": [
      2664
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.BaseExpression": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      252
     ]
    },
    "libcst._nodes.expression._BaseParenthesizedNode": {
     "line number": [
      252
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.BaseExpression._check_left_right_word_concatenation_safety": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      274
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      271,
      275,
      276,
      277,
      278
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.BaseExpression._safe_to_use_with_word_operator": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      257
     ]
    },
    "len": {
     "line number": [
      267,
      267
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      257
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.BaseFormattedStringContent": {
  "data": {
   "lineno": 695,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      695
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      695
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.BaseList": {
  "data": {
   "lineno": 2953,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      2953
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      2953
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      2963
     ]
    },
    "libcst._nodes.expression.LeftSquareBracket": {
     "line number": [
      2959,
      2959
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      2965
     ]
    },
    "libcst._nodes.expression.RightSquareBracket": {
     "line number": [
      2961,
      2961
     ]
    },
    "typing.Sequence": {
     "line number": [
      2963,
      2965
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.BaseList._bracketize": {
  "data": {
   "lineno": 2970,
   "symbols_in_volume": {
    "contextlib.contextmanager": {
     "line number": [
      2970
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      2971
     ]
    },
    "typing.Generator": {
     "line number": [
      2971
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.BaseList._safe_to_use_with_word_operator": {
  "data": {
   "lineno": 2967,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2967
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      2967
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.BaseNumber": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      390
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      390
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.BaseNumber._safe_to_use_with_word_operator": {
  "data": {
   "lineno": 396,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      396
     ]
    },
    "libcst._nodes.expression.BaseNumber": {
     "line number": [
      404
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      396,
      402
     ]
    },
    "super": {
     "line number": [
      404
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.BaseParenthesizableWhitespace": {
  "data": {
   "shadows": "libcst._nodes.whitespace.BaseParenthesizableWhitespace"
  },
  "type": "import"
 },
 "libcst._nodes.expression.BaseSet": {
  "data": {
   "lineno": 3058,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      3058
     ]
    },
    "libcst._nodes.expression._BaseSetOrDict": {
     "line number": [
      3058
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.BaseSimpleComp": {
  "data": {
   "lineno": 3412,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      3412
     ]
    },
    "libcst._nodes.expression.BaseAssignTargetExpression": {
     "line number": [
      3422
     ]
    },
    "libcst._nodes.expression.BaseComp": {
     "line number": [
      3412
     ]
    },
    "libcst._nodes.expression.CompFor": {
     "line number": [
      3427
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.BaseSimpleComp._validate": {
  "data": {
   "lineno": 3429,
   "symbols_in_volume": {
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      3438
     ]
    },
    "libcst._nodes.expression.BaseSimpleComp": {
     "line number": [
      3430
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      3435
     ]
    },
    "super": {
     "line number": [
      3430
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.BaseSlice": {
  "data": {
   "lineno": 1412,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      1412
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      1412
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.BaseString": {
  "data": {
   "lineno": 519,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      519
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      519
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.BaseUnaryOp": {
  "data": {
   "shadows": "libcst._nodes.op.BaseUnaryOp"
  },
  "type": "import"
 },
 "libcst._nodes.expression.BinaryOperation": {
  "data": {
   "lineno": 1230,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1231
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1230
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      1232,
      1247,
      1254
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      1256
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      1258
     ]
    },
    "libcst._nodes.op.BaseBinaryOp": {
     "line number": [
      1251
     ]
    },
    "typing.Sequence": {
     "line number": [
      1256,
      1258
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.BinaryOperation._codegen_impl": {
  "data": {
   "lineno": 1276,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      1276
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.BinaryOperation._safe_to_use_with_word_operator": {
  "data": {
   "lineno": 1269,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1269
     ]
    },
    "libcst._nodes.expression.BinaryOperation": {
     "line number": [
      1270
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      1269
     ]
    },
    "super": {
     "line number": [
      1270
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.BinaryOperation._visit_and_replace_children": {
  "data": {
   "lineno": 1260,
   "symbols_in_volume": {
    "libcst._nodes.expression.BinaryOperation": {
     "line number": [
      1261
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      1263,
      1264,
      1265
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      1262,
      1266
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1260
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.BooleanOperation": {
  "data": {
   "lineno": 1283,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1284
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1283
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      1285,
      1300,
      1307
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      1309
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      1311
     ]
    },
    "libcst._nodes.op.BaseBooleanOp": {
     "line number": [
      1304
     ]
    },
    "typing.Sequence": {
     "line number": [
      1309,
      1311
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.BooleanOperation._codegen_impl": {
  "data": {
   "lineno": 1348,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      1348
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.BooleanOperation._safe_to_use_with_word_operator": {
  "data": {
   "lineno": 1341,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1341
     ]
    },
    "libcst._nodes.expression.BooleanOperation": {
     "line number": [
      1342
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      1341
     ]
    },
    "super": {
     "line number": [
      1342
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.BooleanOperation._validate": {
  "data": {
   "lineno": 1313,
   "symbols_in_volume": {
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      1321,
      1328
     ]
    },
    "libcst._nodes.expression.BooleanOperation": {
     "line number": [
      1315
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      1319,
      1326
     ]
    },
    "super": {
     "line number": [
      1315
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.BooleanOperation._visit_and_replace_children": {
  "data": {
   "lineno": 1332,
   "symbols_in_volume": {
    "libcst._nodes.expression.BooleanOperation": {
     "line number": [
      1333
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      1335,
      1336,
      1337
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      1334,
      1338
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1332
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.CSTCodegenError": {
  "data": {
   "shadows": "libcst._nodes.base.CSTCodegenError"
  },
  "type": "import"
 },
 "libcst._nodes.expression.CSTNode": {
  "data": {
   "shadows": "libcst._nodes.base.CSTNode"
  },
  "type": "import"
 },
 "libcst._nodes.expression.CSTValidationError": {
  "data": {
   "shadows": "libcst._nodes.base.CSTValidationError"
  },
  "type": "import"
 },
 "libcst._nodes.expression.CSTVisitorT": {
  "data": {
   "shadows": "libcst._visitors.CSTVisitorT"
  },
  "type": "import"
 },
 "libcst._nodes.expression.Call": {
  "data": {
   "lineno": 2287,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      2288
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      2287
     ]
    },
    "libcst._nodes.expression.Arg": {
     "line number": [
      2304
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      2300
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      2306
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      2310
     ]
    },
    "libcst._nodes.expression._BaseExpressionWithArgs": {
     "line number": [
      2289
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      2313,
      2317
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      2313,
      2317
     ]
    },
    "typing.Sequence": {
     "line number": [
      2304,
      2306,
      2310
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.Call._codegen_impl": {
  "data": {
   "lineno": 2347,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      2354
     ]
    },
    "len": {
     "line number": [
      2353
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      2347
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Call._safe_to_use_with_word_operator": {
  "data": {
   "lineno": 2319,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2319
     ]
    },
    "libcst._nodes.expression.Call": {
     "line number": [
      2327
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      2319,
      2325,
      2329,
      2330
     ]
    },
    "super": {
     "line number": [
      2327
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Call._visit_and_replace_children": {
  "data": {
   "lineno": 2333,
   "symbols_in_volume": {
    "libcst._nodes.expression.Call": {
     "line number": [
      2334
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      2336,
      2337,
      2340
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      2335,
      2343,
      2344
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      2333
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst._nodes.expression.CodegenState": {
  "data": {
   "shadows": "libcst._nodes.internal.CodegenState"
  },
  "type": "import"
 },
 "libcst._nodes.expression.Colon": {
  "data": {
   "shadows": "libcst._nodes.op.Colon"
  },
  "type": "import"
 },
 "libcst._nodes.expression.Comma": {
  "data": {
   "shadows": "libcst._nodes.op.Comma"
  },
  "type": "import"
 },
 "libcst._nodes.expression.CompFor": {
  "data": {
   "lineno": 3183,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      3184
     ]
    },
    "iter": {
     "line number": [
      3230
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      3183
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      3185
     ]
    },
    "libcst._nodes.expression.Asynchronous": {
     "line number": [
      3250
     ]
    },
    "libcst._nodes.expression.BaseAssignTargetExpression": {
     "line number": [
      3227
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      3230
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      3254,
      3257,
      3260,
      3263
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      3254,
      3257,
      3260,
      3263
     ]
    },
    "typing.Optional": {
     "line number": [
      3247,
      3250
     ]
    },
    "typing.Sequence": {
     "line number": [
      3242
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.CompFor._codegen_impl": {
  "data": {
   "lineno": 3339,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      3339
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.CompFor._validate": {
  "data": {
   "lineno": 3265,
   "symbols_in_volume": {
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      3272,
      3280,
      3288,
      3298,
      3310
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      3269,
      3278,
      3286,
      3295,
      3307
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.CompFor._visit_and_replace_children": {
  "data": {
   "lineno": 3314,
   "symbols_in_volume": {
    "libcst._nodes.expression.CompFor": {
     "line number": [
      3315
     ]
    },
    "libcst._nodes.internal.visit_optional": {
     "line number": [
      3319,
      3334
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      3316,
      3322,
      3325,
      3326,
      3329,
      3332
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      3333
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      3314
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.CompIf": {
  "data": {
   "lineno": 3359,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      3360
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      3359
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      3361
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      3370
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      3373,
      3376
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      3373,
      3376
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.CompIf._codegen_impl": {
  "data": {
   "lineno": 3396,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      3396
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.CompIf._validate": {
  "data": {
   "lineno": 3378,
   "symbols_in_volume": {
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      3383
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      3381
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.CompIf._visit_and_replace_children": {
  "data": {
   "lineno": 3385,
   "symbols_in_volume": {
    "libcst._nodes.expression.CompIf": {
     "line number": [
      3386
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      3387,
      3390,
      3393
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      3385
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Comparison": {
  "data": {
   "lineno": 1079,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1080
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1079
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      1081,
      1111
     ]
    },
    "libcst._nodes.expression.ComparisonTarget": {
     "line number": [
      1116
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      1118
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      1120
     ]
    },
    "typing.Sequence": {
     "line number": [
      1116,
      1118,
      1120
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.Comparison._codegen_impl": {
  "data": {
   "lineno": 1161,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      1161
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Comparison._safe_to_use_with_word_operator": {
  "data": {
   "lineno": 1122,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1122
     ]
    },
    "libcst._nodes.expression.Comparison": {
     "line number": [
      1123
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      1122
     ]
    },
    "super": {
     "line number": [
      1123
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Comparison._validate": {
  "data": {
   "lineno": 1130,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1142
     ]
    },
    "len": {
     "line number": [
      1134
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      1135,
      1148
     ]
    },
    "libcst._nodes.expression.Comparison": {
     "line number": [
      1132
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      1145
     ]
    },
    "libcst._nodes.op.In": {
     "line number": [
      1142
     ]
    },
    "libcst._nodes.op.Is": {
     "line number": [
      1142
     ]
    },
    "libcst._nodes.op.IsNot": {
     "line number": [
      1142
     ]
    },
    "libcst._nodes.op.NotIn": {
     "line number": [
      1142
     ]
    },
    "super": {
     "line number": [
      1132
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Comparison._visit_and_replace_children": {
  "data": {
   "lineno": 1153,
   "symbols_in_volume": {
    "libcst._nodes.expression.Comparison": {
     "line number": [
      1154
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      1156
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      1155,
      1157,
      1158
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1153
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.ComparisonTarget": {
  "data": {
   "lineno": 1040,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1041
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1040
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      1042
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      1052
     ]
    },
    "libcst._nodes.op.BaseCompOp": {
     "line number": [
      1049
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.ComparisonTarget._codegen_impl": {
  "data": {
   "lineno": 1074,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      1074
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.ComparisonTarget._validate": {
  "data": {
   "lineno": 1054,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1058
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      1064
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      1061
     ]
    },
    "libcst._nodes.op.In": {
     "line number": [
      1058
     ]
    },
    "libcst._nodes.op.Is": {
     "line number": [
      1058
     ]
    },
    "libcst._nodes.op.IsNot": {
     "line number": [
      1058
     ]
    },
    "libcst._nodes.op.NotIn": {
     "line number": [
      1058
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.ComparisonTarget._visit_and_replace_children": {
  "data": {
   "lineno": 1068,
   "symbols_in_volume": {
    "libcst._nodes.expression.ComparisonTarget": {
     "line number": [
      1069
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      1070,
      1071
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1068
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.ConcatenatedString": {
  "data": {
   "lineno": 947,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      948
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      947
     ]
    },
    "libcst._nodes.expression.BaseString": {
     "line number": [
      949
     ]
    },
    "libcst._nodes.expression.FormattedString": {
     "line number": [
      962,
      965
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      967
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      969
     ]
    },
    "libcst._nodes.expression.SimpleString": {
     "line number": [
      962,
      965
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      972
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      972
     ]
    },
    "typing.Sequence": {
     "line number": [
      967,
      969
     ]
    },
    "typing.Union": {
     "line number": [
      962,
      965
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.ConcatenatedString._codegen_impl": {
  "data": {
   "lineno": 1016,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      1016
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.ConcatenatedString._safe_to_use_with_word_operator": {
  "data": {
   "lineno": 974,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      974
     ]
    },
    "libcst._nodes.expression.ConcatenatedString": {
     "line number": [
      975
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      974
     ]
    },
    "super": {
     "line number": [
      975
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.ConcatenatedString._validate": {
  "data": {
   "lineno": 982,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      1001
     ]
    },
    "bool": {
     "line number": [
      986,
      986,
      988,
      988
     ]
    },
    "isinstance": {
     "line number": [
      994,
      996,
      998
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      987,
      989,
      1003
     ]
    },
    "libcst._nodes.expression.ConcatenatedString": {
     "line number": [
      983,
      994
     ]
    },
    "libcst._nodes.expression.FormattedString": {
     "line number": [
      998
     ]
    },
    "libcst._nodes.expression.SimpleString": {
     "line number": [
      996
     ]
    },
    "super": {
     "line number": [
      983
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.ConcatenatedString._visit_and_replace_children": {
  "data": {
   "lineno": 1005,
   "symbols_in_volume": {
    "libcst._nodes.expression.ConcatenatedString": {
     "line number": [
      1006
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      1008,
      1009,
      1012
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      1007,
      1013
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1005
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.ConcatenatedString.evaluated_value": {
  "data": {
   "lineno": 1022,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1031,
      1031
     ]
    },
    "libcst._nodes.expression.FormattedString": {
     "line number": [
      1031,
      1031
     ]
    },
    "property": {
     "line number": [
      1022
     ]
    },
    "str": {
     "line number": [
      1023
     ]
    },
    "typing.Optional": {
     "line number": [
      1023
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Dict": {
  "data": {
   "lineno": 3134,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      3135
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      3134
     ]
    },
    "libcst._nodes.expression.BaseDict": {
     "line number": [
      3136
     ]
    },
    "libcst._nodes.expression.BaseDictElement": {
     "line number": [
      3157
     ]
    },
    "libcst._nodes.expression.LeftCurlyBrace": {
     "line number": [
      3158,
      3158
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      3160
     ]
    },
    "libcst._nodes.expression.RightCurlyBrace": {
     "line number": [
      3159,
      3159
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      3161
     ]
    },
    "typing.Sequence": {
     "line number": [
      3157,
      3160,
      3161
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.Dict._codegen_impl": {
  "data": {
   "lineno": 3172,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      3175
     ]
    },
    "len": {
     "line number": [
      3178
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      3172
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Dict._visit_and_replace_children": {
  "data": {
   "lineno": 3163,
   "symbols_in_volume": {
    "libcst._nodes.expression.Dict": {
     "line number": [
      3164
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      3166,
      3168
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      3165,
      3167,
      3169
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      3163
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.DictComp": {
  "data": {
   "lineno": 3578,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      3579
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      3578
     ]
    },
    "libcst._nodes.expression.BaseAssignTargetExpression": {
     "line number": [
      3590,
      3593
     ]
    },
    "libcst._nodes.expression.BaseComp": {
     "line number": [
      3580
     ]
    },
    "libcst._nodes.expression.BaseDict": {
     "line number": [
      3580
     ]
    },
    "libcst._nodes.expression.CompFor": {
     "line number": [
      3598
     ]
    },
    "libcst._nodes.expression.LeftCurlyBrace": {
     "line number": [
      3600,
      3600
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      3604
     ]
    },
    "libcst._nodes.expression.RightCurlyBrace": {
     "line number": [
      3602,
      3602
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      3606
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      3609,
      3611
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      3609,
      3611
     ]
    },
    "typing.Sequence": {
     "line number": [
      3604,
      3606
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.DictComp._codegen_impl": {
  "data": {
   "lineno": 3643,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      3643
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.DictComp._validate": {
  "data": {
   "lineno": 3613,
   "symbols_in_volume": {
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      3622
     ]
    },
    "libcst._nodes.expression.DictComp": {
     "line number": [
      3614
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      3619
     ]
    },
    "super": {
     "line number": [
      3614
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.DictComp._visit_and_replace_children": {
  "data": {
   "lineno": 3626,
   "symbols_in_volume": {
    "libcst._nodes.expression.DictComp": {
     "line number": [
      3627
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      3629,
      3630,
      3631,
      3634,
      3637,
      3638,
      3639
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      3628,
      3640
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      3626
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.DictElement": {
  "data": {
   "lineno": 2710,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      2711
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      2710
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      2726
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      2726
     ]
    },
    "libcst._nodes.expression.BaseDictElement": {
     "line number": [
      2712
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      2722,
      2723
     ]
    },
    "libcst._nodes.op.Comma": {
     "line number": [
      2726
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      2729,
      2731
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      2729,
      2731
     ]
    },
    "typing.Union": {
     "line number": [
      2726
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.DictElement._codegen_impl": {
  "data": {
   "lineno": 2746,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2749,
      2750
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      2748
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.DictElement._visit_and_replace_children": {
  "data": {
   "lineno": 2733,
   "symbols_in_volume": {
    "libcst._nodes.expression.DictElement": {
     "line number": [
      2734
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      2735,
      2736,
      2739,
      2742
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      2743
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      2733
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Dot": {
  "data": {
   "shadows": "libcst._nodes.op.Dot"
  },
  "type": "import"
 },
 "libcst._nodes.expression.Element": {
  "data": {
   "lineno": 2678,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      2679
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      2678
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      2691
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      2691
     ]
    },
    "libcst._nodes.expression.BaseElement": {
     "line number": [
      2680
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      2688
     ]
    },
    "libcst._nodes.op.Comma": {
     "line number": [
      2691
     ]
    },
    "typing.Union": {
     "line number": [
      2691
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.Element._codegen_impl": {
  "data": {
   "lineno": 2699,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2702,
      2703
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      2701
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Element._visit_and_replace_children": {
  "data": {
   "lineno": 2693,
   "symbols_in_volume": {
    "libcst._nodes.expression.Element": {
     "line number": [
      2694
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      2695
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      2696
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      2693
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Ellipsis": {
  "data": {
   "lineno": 360,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      361
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      360
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      362
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      371
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      374
     ]
    },
    "typing.Sequence": {
     "line number": [
      371,
      374
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.Ellipsis._codegen_impl": {
  "data": {
   "lineno": 385,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      385
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Ellipsis._safe_to_use_with_word_operator": {
  "data": {
   "lineno": 382,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      382
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      382
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Ellipsis._visit_and_replace_children": {
  "data": {
   "lineno": 376,
   "symbols_in_volume": {
    "libcst._nodes.expression.Ellipsis": {
     "line number": [
      377
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      378,
      379
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      376
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Enum": {
  "data": {
   "shadows": "enum.Enum"
  },
  "type": "import"
 },
 "libcst._nodes.expression.ExpressionPosition": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": {
    "enum.Enum": {
     "line number": [
      247
     ]
    },
    "enum.auto": {
     "line number": [
      248,
      249
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.FLOATNUMBER_RE": {
  "data": {
   "shadows": "tokenize.Floatnumber"
  },
  "type": "import"
 },
 "libcst._nodes.expression.Float": {
  "data": {
   "lineno": 444,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      445
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      444
     ]
    },
    "libcst._nodes.expression.BaseNumber": {
     "line number": [
      446
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      454
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      456
     ]
    },
    "str": {
     "line number": [
      452
     ]
    },
    "typing.Sequence": {
     "line number": [
      454,
      456
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.Float._codegen_impl": {
  "data": {
   "lineno": 470,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      470
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Float._validate": {
  "data": {
   "lineno": 465,
   "symbols_in_volume": {
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      468
     ]
    },
    "libcst._nodes.expression.Float": {
     "line number": [
      466
     ]
    },
    "libcst._nodes.expression.re": {
     "line number": [
      467
     ]
    },
    "super": {
     "line number": [
      466
     ]
    },
    "tokenize.Floatnumber": {
     "line number": [
      467
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Float._visit_and_replace_children": {
  "data": {
   "lineno": 458,
   "symbols_in_volume": {
    "libcst._nodes.expression.Float": {
     "line number": [
      459
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      460,
      462
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      458
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Float.evaluated_value": {
  "data": {
   "lineno": 474,
   "symbols_in_volume": {
    "ast.literal_eval": {
     "line number": [
      479
     ]
    },
    "float": {
     "line number": [
      475
     ]
    },
    "property": {
     "line number": [
      474
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.FormattedString": {
  "data": {
   "lineno": 828,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      829
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      828
     ]
    },
    "libcst._nodes.expression.BaseFormattedStringContent": {
     "line number": [
      877
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      886
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      888
     ]
    },
    "libcst._nodes.expression._BasePrefixedString": {
     "line number": [
      830
     ]
    },
    "str": {
     "line number": [
      881
     ]
    },
    "typing.Sequence": {
     "line number": [
      877,
      886,
      888
     ]
    },
    "typing_extensions.Literal": {
     "line number": [
      884
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.FormattedString._codegen_impl": {
  "data": {
   "lineno": 939,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      939
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.FormattedString._validate": {
  "data": {
   "lineno": 890,
   "symbols_in_volume": {
    "len": {
     "line number": [
      899
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      896,
      901,
      905
     ]
    },
    "libcst._nodes.expression.FormattedString": {
     "line number": [
      891
     ]
    },
    "super": {
     "line number": [
      891
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.FormattedString._visit_and_replace_children": {
  "data": {
   "lineno": 930,
   "symbols_in_volume": {
    "libcst._nodes.expression.FormattedString": {
     "line number": [
      931
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      932,
      934,
      936
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      930
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.FormattedString.prefix": {
  "data": {
   "lineno": 907,
   "symbols_in_volume": {
    "property": {
     "line number": [
      907
     ]
    },
    "str": {
     "line number": [
      908
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.FormattedString.quote": {
  "data": {
   "lineno": 921,
   "symbols_in_volume": {
    "libcst._nodes.expression.StringQuoteLiteral": {
     "line number": [
      922
     ]
    },
    "property": {
     "line number": [
      921
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.FormattedStringExpression": {
  "data": {
   "lineno": 731,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      732
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      731
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      751
     ]
    },
    "libcst._nodes.expression.BaseFormattedStringContent": {
     "line number": [
      733,
      758
     ]
    },
    "libcst._nodes.op.AssignEqual": {
     "line number": [
      775
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      761,
      768
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      761,
      768
     ]
    },
    "str": {
     "line number": [
      754
     ]
    },
    "typing.Optional": {
     "line number": [
      754,
      758,
      775
     ]
    },
    "typing.Sequence": {
     "line number": [
      758
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.FormattedStringExpression._codegen_impl": {
  "data": {
   "lineno": 808,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      808
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.FormattedStringExpression._validate": {
  "data": {
   "lineno": 777,
   "symbols_in_volume": {
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      779
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.FormattedStringExpression._visit_and_replace_children": {
  "data": {
   "lineno": 781,
   "symbols_in_volume": {
    "libcst._nodes.expression.FormattedStringExpression": {
     "line number": [
      785
     ]
    },
    "libcst._nodes.internal.visit_optional": {
     "line number": [
      793
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      786,
      792,
      794
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      802
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      782
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.FormattedStringText": {
  "data": {
   "lineno": 705,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      706
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      705
     ]
    },
    "libcst._nodes.expression.BaseFormattedStringContent": {
     "line number": [
      707
     ]
    },
    "str": {
     "line number": [
      720
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.FormattedStringText._codegen_impl": {
  "data": {
   "lineno": 727,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      727
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.FormattedStringText._visit_and_replace_children": {
  "data": {
   "lineno": 722,
   "symbols_in_volume": {
    "libcst._nodes.expression.FormattedStringText": {
     "line number": [
      725
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      723
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.From": {
  "data": {
   "lineno": 2504,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      2505
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      2504
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      2516
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      2517
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      2506
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      2512
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      2516,
      2520
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      2520
     ]
    },
    "typing.Union": {
     "line number": [
      2515
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.From._codegen_impl": {
  "data": {
   "lineno": 2543,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      2545
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      2543
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      2545
     ]
    },
    "str": {
     "line number": [
      2543
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.From._validate": {
  "data": {
   "lineno": 2522,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      2524
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      2528
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      2526
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      2524
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.From._visit_and_replace_children": {
  "data": {
   "lineno": 2532,
   "symbols_in_volume": {
    "libcst._nodes.expression.From": {
     "line number": [
      2533
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      2537,
      2540
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      2534
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      2532
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Generator": {
  "data": {
   "shadows": "typing.Generator"
  },
  "type": "import"
 },
 "libcst._nodes.expression.GeneratorExp": {
  "data": {
   "lineno": 3443,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      3444
     ]
    },
    "dataclasses.field": {
     "line number": [
      3461,
      3466
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      3443
     ]
    },
    "libcst._nodes.expression.BaseAssignTargetExpression": {
     "line number": [
      3455
     ]
    },
    "libcst._nodes.expression.BaseSimpleComp": {
     "line number": [
      3445
     ]
    },
    "libcst._nodes.expression.CompFor": {
     "line number": [
      3459
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      3461,
      3461
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      3466,
      3466
     ]
    },
    "typing.Sequence": {
     "line number": [
      3461,
      3466
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.GeneratorExp._codegen_impl": {
  "data": {
   "lineno": 3488,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      3488
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.GeneratorExp._safe_to_use_with_word_operator": {
  "data": {
   "lineno": 3468,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3468
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      3468
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.GeneratorExp._visit_and_replace_children": {
  "data": {
   "lineno": 3480,
   "symbols_in_volume": {
    "libcst._nodes.expression.GeneratorExp": {
     "line number": [
      3481
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      3483,
      3484
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      3482,
      3485
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      3480
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.IMAGNUMBER_RE": {
  "data": {
   "shadows": "tokenize.Imagnumber"
  },
  "type": "import"
 },
 "libcst._nodes.expression.INTNUMBER_RE": {
  "data": {
   "shadows": "tokenize.Intnumber"
  },
  "type": "import"
 },
 "libcst._nodes.expression.IfExp": {
  "data": {
   "lineno": 2403,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      2404
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      2403
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      2405,
      2413,
      2416,
      2419
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      2421
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      2423
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      2426,
      2429,
      2432,
      2435
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      2426,
      2429,
      2432,
      2435
     ]
    },
    "typing.Sequence": {
     "line number": [
      2421,
      2423
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.IfExp._codegen_impl": {
  "data": {
   "lineno": 2491,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      2491
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.IfExp._validate": {
  "data": {
   "lineno": 2437,
   "symbols_in_volume": {
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      2445,
      2452,
      2457,
      2466
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      2443,
      2450,
      2455,
      2463
     ]
    },
    "libcst._nodes.expression.IfExp": {
     "line number": [
      2439
     ]
    },
    "super": {
     "line number": [
      2439
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.IfExp._visit_and_replace_children": {
  "data": {
   "lineno": 2470,
   "symbols_in_volume": {
    "libcst._nodes.expression.IfExp": {
     "line number": [
      2471
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      2473,
      2474,
      2477,
      2480,
      2481,
      2484,
      2487
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      2472,
      2488
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      2470
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Imaginary": {
  "data": {
   "lineno": 482,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      483
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      482
     ]
    },
    "libcst._nodes.expression.BaseNumber": {
     "line number": [
      484
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      491
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      493
     ]
    },
    "str": {
     "line number": [
      489
     ]
    },
    "typing.Sequence": {
     "line number": [
      491,
      493
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.Imaginary._codegen_impl": {
  "data": {
   "lineno": 507,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      507
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Imaginary._validate": {
  "data": {
   "lineno": 502,
   "symbols_in_volume": {
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      505
     ]
    },
    "libcst._nodes.expression.Imaginary": {
     "line number": [
      503
     ]
    },
    "libcst._nodes.expression.re": {
     "line number": [
      504
     ]
    },
    "super": {
     "line number": [
      503
     ]
    },
    "tokenize.Imagnumber": {
     "line number": [
      504
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Imaginary._visit_and_replace_children": {
  "data": {
   "lineno": 495,
   "symbols_in_volume": {
    "libcst._nodes.expression.Imaginary": {
     "line number": [
      496
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      497,
      499
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      495
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Imaginary.evaluated_value": {
  "data": {
   "lineno": 511,
   "symbols_in_volume": {
    "ast.literal_eval": {
     "line number": [
      516
     ]
    },
    "complex": {
     "line number": [
      512
     ]
    },
    "property": {
     "line number": [
      511
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.In": {
  "data": {
   "shadows": "libcst._nodes.op.In"
  },
  "type": "import"
 },
 "libcst._nodes.expression.Index": {
  "data": {
   "lineno": 1419,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1420
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1419
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      1428
     ]
    },
    "libcst._nodes.expression.BaseSlice": {
     "line number": [
      1421
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.Index._codegen_impl": {
  "data": {
   "lineno": 1433,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      1433
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Index._visit_and_replace_children": {
  "data": {
   "lineno": 1430,
   "symbols_in_volume": {
    "libcst._nodes.expression.Index": {
     "line number": [
      1431
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      1431
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1430
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Integer": {
  "data": {
   "lineno": 407,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      408
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      407
     ]
    },
    "libcst._nodes.expression.BaseNumber": {
     "line number": [
      409
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      416
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      418
     ]
    },
    "str": {
     "line number": [
      414
     ]
    },
    "typing.Sequence": {
     "line number": [
      416,
      418
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.Integer._codegen_impl": {
  "data": {
   "lineno": 432,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      432
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Integer._validate": {
  "data": {
   "lineno": 427,
   "symbols_in_volume": {
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      430
     ]
    },
    "libcst._nodes.expression.Integer": {
     "line number": [
      428
     ]
    },
    "libcst._nodes.expression.re": {
     "line number": [
      429
     ]
    },
    "super": {
     "line number": [
      428
     ]
    },
    "tokenize.Intnumber": {
     "line number": [
      429
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Integer._visit_and_replace_children": {
  "data": {
   "lineno": 420,
   "symbols_in_volume": {
    "libcst._nodes.expression.Integer": {
     "line number": [
      421
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      422,
      424
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      420
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Integer.evaluated_value": {
  "data": {
   "lineno": 436,
   "symbols_in_volume": {
    "ast.literal_eval": {
     "line number": [
      441
     ]
    },
    "int": {
     "line number": [
      437
     ]
    },
    "property": {
     "line number": [
      436
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Is": {
  "data": {
   "shadows": "libcst._nodes.op.Is"
  },
  "type": "import"
 },
 "libcst._nodes.expression.IsNot": {
  "data": {
   "shadows": "libcst._nodes.op.IsNot"
  },
  "type": "import"
 },
 "libcst._nodes.expression.Lambda": {
  "data": {
   "lineno": 2002,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      2003
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      2002
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      2039
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      2040
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      2004,
      2028
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      2033
     ]
    },
    "libcst._nodes.expression.Parameters": {
     "line number": [
      2025
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      2035
     ]
    },
    "libcst._nodes.op.Colon": {
     "line number": [
      2031
     ]
    },
    "libcst._nodes.op.Colon.field": {
     "line number": [
      2031
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      2039
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      2031
     ]
    },
    "typing.Sequence": {
     "line number": [
      2033,
      2035
     ]
    },
    "typing.Union": {
     "line number": [
      2038
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.Lambda._codegen_impl": {
  "data": {
   "lineno": 2086,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      2090,
      2094,
      2100
     ]
    },
    "len": {
     "line number": [
      2092,
      2093,
      2095
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      2090
     ]
    },
    "libcst._nodes.expression.Param": {
     "line number": [
      2094
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      2086
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      2100
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Lambda._validate": {
  "data": {
   "lineno": 2042,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      2052,
      2067
     ]
    },
    "len": {
     "line number": [
      2059
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      2062,
      2070
     ]
    },
    "libcst._nodes.expression.Lambda": {
     "line number": [
      2044
     ]
    },
    "libcst._nodes.expression.Param": {
     "line number": [
      2052
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      2067
     ]
    },
    "super": {
     "line number": [
      2044
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Lambda._visit_and_replace_children": {
  "data": {
   "lineno": 2074,
   "symbols_in_volume": {
    "libcst._nodes.expression.Lambda": {
     "line number": [
      2075
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      2080,
      2081,
      2082
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      2077
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      2076,
      2083
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      2074
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.LeftCurlyBrace": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      98
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      97
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      99
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      106
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      106
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.LeftCurlyBrace._codegen_impl": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      115
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.LeftCurlyBrace._visit_and_replace_children": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": {
    "libcst._nodes.expression.LeftCurlyBrace": {
     "line number": [
      109
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      110
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      108
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.LeftParen": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      144
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      143
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      145
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      152
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      152
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.LeftParen._codegen_impl": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      161
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.LeftParen._visit_and_replace_children": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": {
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      155
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      156
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      154
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.LeftSquareBracket": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      52
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      51
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      53
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      60
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      60
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.LeftSquareBracket._codegen_impl": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      69
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.LeftSquareBracket._visit_and_replace_children": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "libcst._nodes.expression.LeftSquareBracket": {
     "line number": [
      63
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      64
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      62
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.List": {
  "data": {
   "lineno": 2977,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      2978
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      2977
     ]
    },
    "libcst._nodes.expression.BaseAssignTargetExpression": {
     "line number": [
      2979
     ]
    },
    "libcst._nodes.expression.BaseDelTargetExpression": {
     "line number": [
      2979
     ]
    },
    "libcst._nodes.expression.BaseElement": {
     "line number": [
      3000
     ]
    },
    "libcst._nodes.expression.BaseList": {
     "line number": [
      2979
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      3006
     ]
    },
    "libcst._nodes.expression.LeftSquareBracket": {
     "line number": [
      3002,
      3002
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      3008
     ]
    },
    "libcst._nodes.expression.RightSquareBracket": {
     "line number": [
      3004,
      3004
     ]
    },
    "typing.Sequence": {
     "line number": [
      3000,
      3006,
      3008
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.List._codegen_impl": {
  "data": {
   "lineno": 3019,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      3022
     ]
    },
    "len": {
     "line number": [
      3025
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      3019
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.List._visit_and_replace_children": {
  "data": {
   "lineno": 3010,
   "symbols_in_volume": {
    "libcst._nodes.expression.List": {
     "line number": [
      3011
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      3013,
      3015
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      3012,
      3014,
      3016
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      3010
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.ListComp": {
  "data": {
   "lineno": 3494,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      3495
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      3494
     ]
    },
    "libcst._nodes.expression.BaseAssignTargetExpression": {
     "line number": [
      3506
     ]
    },
    "libcst._nodes.expression.BaseList": {
     "line number": [
      3496
     ]
    },
    "libcst._nodes.expression.BaseSimpleComp": {
     "line number": [
      3496
     ]
    },
    "libcst._nodes.expression.CompFor": {
     "line number": [
      3510
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      3516
     ]
    },
    "libcst._nodes.expression.LeftSquareBracket": {
     "line number": [
      3512,
      3512
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      3518
     ]
    },
    "libcst._nodes.expression.RightSquareBracket": {
     "line number": [
      3514,
      3514
     ]
    },
    "typing.Sequence": {
     "line number": [
      3516,
      3518
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.ListComp._codegen_impl": {
  "data": {
   "lineno": 3530,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      3530
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.ListComp._visit_and_replace_children": {
  "data": {
   "lineno": 3520,
   "symbols_in_volume": {
    "libcst._nodes.expression.ListComp": {
     "line number": [
      3521
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      3523,
      3524,
      3525,
      3526
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      3522,
      3527
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      3520
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Literal": {
  "data": {
   "shadows": "typing_extensions.Literal"
  },
  "type": "import"
 },
 "libcst._nodes.expression.MaybeSentinel": {
  "data": {
   "shadows": "libcst._maybe_sentinel.MaybeSentinel"
  },
  "type": "import"
 },
 "libcst._nodes.expression.Name": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      323
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      322
     ]
    },
    "libcst._nodes.expression.BaseAssignTargetExpression": {
     "line number": [
      324
     ]
    },
    "libcst._nodes.expression.BaseDelTargetExpression": {
     "line number": [
      324
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      337
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      339
     ]
    },
    "str": {
     "line number": [
      335
     ]
    },
    "typing.Sequence": {
     "line number": [
      337,
      339
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.Name._codegen_impl": {
  "data": {
   "lineno": 355,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      355
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Name._validate": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": {
    "len": {
     "line number": [
      350
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      351,
      353
     ]
    },
    "libcst._nodes.expression.Name": {
     "line number": [
      349
     ]
    },
    "super": {
     "line number": [
      349
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Name._visit_and_replace_children": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": {
    "libcst._nodes.expression.Name": {
     "line number": [
      342
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      343,
      345
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      341
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.NamedExpr": {
  "data": {
   "lineno": 3653,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      3654
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      3653
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      3655,
      3666,
      3669
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      3672
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      3674
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      3677,
      3681
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      3677,
      3681
     ]
    },
    "typing.Sequence": {
     "line number": [
      3672,
      3674
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.NamedExpr._codegen_impl": {
  "data": {
   "lineno": 3697,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      3697
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.NamedExpr._visit_and_replace_children": {
  "data": {
   "lineno": 3683,
   "symbols_in_volume": {
    "libcst._nodes.expression.NamedExpr": {
     "line number": [
      3684
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      3686,
      3687,
      3690,
      3693
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      3685,
      3694
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      3683
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Not": {
  "data": {
   "shadows": "libcst._nodes.op.Not"
  },
  "type": "import"
 },
 "libcst._nodes.expression.NotIn": {
  "data": {
   "shadows": "libcst._nodes.op.NotIn"
  },
  "type": "import"
 },
 "libcst._nodes.expression.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._nodes.expression.Param": {
  "data": {
   "lineno": 1715,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1716
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1715
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      1731,
      1738,
      1742
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      1731,
      1738,
      1742
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      1717
     ]
    },
    "libcst._nodes.expression.Annotation": {
     "line number": [
      1728
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      1734
     ]
    },
    "libcst._nodes.expression.Name": {
     "line number": [
      1724
     ]
    },
    "libcst._nodes.op.AssignEqual": {
     "line number": [
      1731
     ]
    },
    "libcst._nodes.op.Comma": {
     "line number": [
      1738
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      1746,
      1749
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      1746,
      1749
     ]
    },
    "str": {
     "line number": [
      1742
     ]
    },
    "typing.Optional": {
     "line number": [
      1728,
      1734
     ]
    },
    "typing.Union": {
     "line number": [
      1731,
      1738,
      1742
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.Param._codegen_impl": {
  "data": {
   "lineno": 1775,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1779
     ]
    },
    "isinstance": {
     "line number": [
      1783,
      1789,
      1800,
      1808
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      1783
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      1798,
      1806
     ]
    },
    "libcst._nodes.base.CSTCodegenError": {
     "line number": [
      1785
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      1777
     ]
    },
    "libcst._nodes.op.AssignEqual": {
     "line number": [
      1800
     ]
    },
    "libcst._nodes.op.Comma": {
     "line number": [
      1808
     ]
    },
    "str": {
     "line number": [
      1778,
      1789
     ]
    },
    "typing.Optional": {
     "line number": [
      1778
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Param._validate": {
  "data": {
   "lineno": 1751,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1752,
      1756
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      1753,
      1757
     ]
    },
    "libcst._nodes.op.AssignEqual": {
     "line number": [
      1752
     ]
    },
    "str": {
     "line number": [
      1756
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Param._visit_and_replace_children": {
  "data": {
   "lineno": 1759,
   "symbols_in_volume": {
    "libcst._nodes.expression.Param": {
     "line number": [
      1760
     ]
    },
    "libcst._nodes.internal.visit_optional": {
     "line number": [
      1766,
      1768
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      1762,
      1765,
      1770
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      1767,
      1769
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1759
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.ParamSlash": {
  "data": {
   "lineno": 1687,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1688
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1687
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      1700
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      1700
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      1689
     ]
    },
    "libcst._nodes.op.Comma": {
     "line number": [
      1700
     ]
    },
    "typing.Union": {
     "line number": [
      1700
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.ParamSlash._codegen_impl": {
  "data": {
   "lineno": 1705,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1705
     ]
    },
    "isinstance": {
     "line number": [
      1711
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      1709
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      1705
     ]
    },
    "libcst._nodes.op.Comma": {
     "line number": [
      1711
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.ParamSlash._visit_and_replace_children": {
  "data": {
   "lineno": 1702,
   "symbols_in_volume": {
    "libcst._nodes.expression.ParamSlash": {
     "line number": [
      1703
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      1703
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1702
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.ParamStar": {
  "data": {
   "lineno": 1664,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1665
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1664
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      1666
     ]
    },
    "libcst._nodes.op.Comma": {
     "line number": [
      1677
     ]
    },
    "libcst._nodes.op.Comma.field": {
     "line number": [
      1677
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      1677
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.ParamStar._codegen_impl": {
  "data": {
   "lineno": 1682,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      1682
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.ParamStar._visit_and_replace_children": {
  "data": {
   "lineno": 1679,
   "symbols_in_volume": {
    "libcst._nodes.expression.ParamStar": {
     "line number": [
      1680
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      1680
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1679
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Parameters": {
  "data": {
   "lineno": 1814,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1815
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1814
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      1827,
      1841
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      1827,
      1841
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      1816
     ]
    },
    "libcst._nodes.expression.Param": {
     "line number": [
      1823,
      1827,
      1830,
      1833,
      1837
     ]
    },
    "libcst._nodes.expression.ParamSlash": {
     "line number": [
      1841
     ]
    },
    "libcst._nodes.expression.ParamStar": {
     "line number": [
      1827
     ]
    },
    "typing.Optional": {
     "line number": [
      1833
     ]
    },
    "typing.Sequence": {
     "line number": [
      1823,
      1830,
      1837
     ]
    },
    "typing.Union": {
     "line number": [
      1827,
      1841
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.Parameters._codegen_impl": {
  "data": {
   "lineno": 1937,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      1950,
      1974,
      1992
     ]
    },
    "isinstance": {
     "line number": [
      1941,
      1943,
      1960,
      1981,
      1984,
      1987
     ]
    },
    "len": {
     "line number": [
      1942,
      1955,
      1956,
      1964,
      1970,
      1972,
      1985,
      1990
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      1941,
      1981
     ]
    },
    "libcst._nodes.expression.Param": {
     "line number": [
      1943,
      1984
     ]
    },
    "libcst._nodes.expression.ParamSlash": {
     "line number": [
      1960
     ]
    },
    "libcst._nodes.expression.ParamStar": {
     "line number": [
      1943,
      1987
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      1937
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Parameters._validate": {
  "data": {
   "lineno": 1913
  },
  "type": "function"
 },
 "libcst._nodes.expression.Parameters._validate_defaults": {
  "data": {
   "lineno": 1865,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1879
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      1875,
      1880,
      1883
     ]
    },
    "libcst._nodes.expression.Param": {
     "line number": [
      1879
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Parameters._validate_kwonly_star": {
  "data": {
   "lineno": 1859,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1860
     ]
    },
    "len": {
     "line number": [
      1860
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      1861
     ]
    },
    "libcst._nodes.expression.ParamStar": {
     "line number": [
      1860
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Parameters._validate_posonly_ind": {
  "data": {
   "lineno": 1853,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1854
     ]
    },
    "len": {
     "line number": [
      1854
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      1855
     ]
    },
    "libcst._nodes.expression.ParamSlash": {
     "line number": [
      1854
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Parameters._validate_stars": {
  "data": {
   "lineno": 1885,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1892,
      1893,
      1905
     ]
    },
    "len": {
     "line number": [
      1886,
      1888,
      1900
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      1897,
      1909
     ]
    },
    "libcst._nodes.expression.Param": {
     "line number": [
      1892
     ]
    },
    "str": {
     "line number": [
      1893,
      1905
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Parameters._validate_stars_sequence": {
  "data": {
   "lineno": 1843,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1848
     ]
    },
    "len": {
     "line number": [
      1844
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      1849
     ]
    },
    "libcst._nodes.expression.Param": {
     "line number": [
      1843
     ]
    },
    "str": {
     "line number": [
      1843,
      1848
     ]
    },
    "typing.Sequence": {
     "line number": [
      1843
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Parameters._visit_and_replace_children": {
  "data": {
   "lineno": 1923,
   "symbols_in_volume": {
    "libcst._nodes.expression.Parameters": {
     "line number": [
      1924
     ]
    },
    "libcst._nodes.internal.visit_optional": {
     "line number": [
      1934
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      1928,
      1930
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      1925,
      1929,
      1931
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1923
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.RightCurlyBrace": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      121
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      120
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      122
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      129
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      129
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.RightCurlyBrace._codegen_impl": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      138
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.RightCurlyBrace._visit_and_replace_children": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": {
    "libcst._nodes.expression.RightCurlyBrace": {
     "line number": [
      132
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      133
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      131
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.RightParen": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      167
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      166
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      168
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      175
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      175
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.RightParen._codegen_impl": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      184
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.RightParen._visit_and_replace_children": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": {
    "libcst._nodes.expression.RightParen": {
     "line number": [
      178
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      179
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      177
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.RightSquareBracket": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      75
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      74
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      76
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      83
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      83
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.RightSquareBracket._codegen_impl": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.RightSquareBracket._visit_and_replace_children": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": {
    "libcst._nodes.expression.RightSquareBracket": {
     "line number": [
      86
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      87
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      85
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst._nodes.expression.Set": {
  "data": {
   "lineno": 3065,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      3066
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      3065
     ]
    },
    "libcst._nodes.expression.BaseElement": {
     "line number": [
      3088
     ]
    },
    "libcst._nodes.expression.BaseSet": {
     "line number": [
      3067
     ]
    },
    "libcst._nodes.expression.LeftCurlyBrace": {
     "line number": [
      3090,
      3090
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      3094
     ]
    },
    "libcst._nodes.expression.RightCurlyBrace": {
     "line number": [
      3092,
      3092
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      3096
     ]
    },
    "typing.Sequence": {
     "line number": [
      3088,
      3094,
      3096
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.Set._codegen_impl": {
  "data": {
   "lineno": 3116,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      3119
     ]
    },
    "len": {
     "line number": [
      3122
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      3116
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Set._validate": {
  "data": {
   "lineno": 3098,
   "symbols_in_volume": {
    "len": {
     "line number": [
      3101
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      3102
     ]
    },
    "libcst._nodes.expression.Set": {
     "line number": [
      3099
     ]
    },
    "super": {
     "line number": [
      3099
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Set._visit_and_replace_children": {
  "data": {
   "lineno": 3107,
   "symbols_in_volume": {
    "libcst._nodes.expression.Set": {
     "line number": [
      3108
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      3110,
      3112
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      3109,
      3111,
      3113
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      3107
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.SetComp": {
  "data": {
   "lineno": 3536,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      3537
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      3536
     ]
    },
    "libcst._nodes.expression.BaseAssignTargetExpression": {
     "line number": [
      3548
     ]
    },
    "libcst._nodes.expression.BaseSet": {
     "line number": [
      3538
     ]
    },
    "libcst._nodes.expression.BaseSimpleComp": {
     "line number": [
      3538
     ]
    },
    "libcst._nodes.expression.CompFor": {
     "line number": [
      3552
     ]
    },
    "libcst._nodes.expression.LeftCurlyBrace": {
     "line number": [
      3554,
      3554
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      3558
     ]
    },
    "libcst._nodes.expression.RightCurlyBrace": {
     "line number": [
      3556,
      3556
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      3560
     ]
    },
    "typing.Sequence": {
     "line number": [
      3558,
      3560
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.SetComp._codegen_impl": {
  "data": {
   "lineno": 3572,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      3572
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.SetComp._visit_and_replace_children": {
  "data": {
   "lineno": 3562,
   "symbols_in_volume": {
    "libcst._nodes.expression.SetComp": {
     "line number": [
      3563
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      3565,
      3566,
      3567,
      3568
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      3564,
      3569
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      3562
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.SimpleString": {
  "data": {
   "lineno": 567,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      568
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      567
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      581
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      583
     ]
    },
    "libcst._nodes.expression._BasePrefixedString": {
     "line number": [
      569
     ]
    },
    "str": {
     "line number": [
      579
     ]
    },
    "typing.Sequence": {
     "line number": [
      581,
      583
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.SimpleString._codegen_impl": {
  "data": {
   "lineno": 683,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      683
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.SimpleString._validate": {
  "data": {
   "lineno": 585,
   "symbols_in_volume": {
    "len": {
     "line number": [
      592,
      594,
      602
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      591,
      595,
      600,
      611
     ]
    },
    "libcst._nodes.expression.SimpleString": {
     "line number": [
      586
     ]
    },
    "super": {
     "line number": [
      586
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.SimpleString._visit_and_replace_children": {
  "data": {
   "lineno": 676,
   "symbols_in_volume": {
    "libcst._nodes.expression.SimpleString": {
     "line number": [
      677
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      678,
      680
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      676
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.SimpleString.evaluated_value": {
  "data": {
   "lineno": 687,
   "symbols_in_volume": {
    "ast.literal_eval": {
     "line number": [
      692
     ]
    },
    "property": {
     "line number": [
      687
     ]
    },
    "str": {
     "line number": [
      688
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.SimpleString.prefix": {
  "data": {
   "lineno": 617,
   "symbols_in_volume": {
    "property": {
     "line number": [
      617
     ]
    },
    "str": {
     "line number": [
      624,
      618
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.SimpleString.quote": {
  "data": {
   "lineno": 631,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      657
     ]
    },
    "len": {
     "line number": [
      639,
      647,
      650,
      654
     ]
    },
    "libcst._nodes.expression.StringQuoteLiteral": {
     "line number": [
      632
     ]
    },
    "property": {
     "line number": [
      631
     ]
    },
    "str": {
     "line number": [
      638
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.SimpleString.raw_value": {
  "data": {
   "lineno": 663,
   "symbols_in_volume": {
    "len": {
     "line number": [
      672,
      673
     ]
    },
    "property": {
     "line number": [
      663
     ]
    },
    "str": {
     "line number": [
      664
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.SimpleWhitespace": {
  "data": {
   "shadows": "libcst._nodes.whitespace.SimpleWhitespace"
  },
  "type": "import"
 },
 "libcst._nodes.expression.Slice": {
  "data": {
   "lineno": 1437,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1438
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1437
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      1460
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      1460
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      1448,
      1451,
      1454
     ]
    },
    "libcst._nodes.expression.BaseSlice": {
     "line number": [
      1439
     ]
    },
    "libcst._nodes.op.Colon": {
     "line number": [
      1457,
      1460
     ]
    },
    "libcst._nodes.op.Colon.field": {
     "line number": [
      1457
     ]
    },
    "typing.Optional": {
     "line number": [
      1448,
      1451,
      1454
     ]
    },
    "typing.Union": {
     "line number": [
      1460
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.Slice._codegen_impl": {
  "data": {
   "lineno": 1473,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1484
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      1482
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      1473
     ]
    },
    "libcst._nodes.op.Colon": {
     "line number": [
      1484
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Slice._visit_and_replace_children": {
  "data": {
   "lineno": 1462,
   "symbols_in_volume": {
    "libcst._nodes.expression.Slice": {
     "line number": [
      1463
     ]
    },
    "libcst._nodes.internal.visit_optional": {
     "line number": [
      1464,
      1466,
      1470
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      1465
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      1467
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1462
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.StarredDictElement": {
  "data": {
   "lineno": 2822,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      2823
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      2822
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      2840
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      2840
     ]
    },
    "libcst._nodes.expression.BaseDictElement": {
     "line number": [
      2824
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      2837
     ]
    },
    "libcst._nodes.op.Comma": {
     "line number": [
      2840
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      2843
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      2843
     ]
    },
    "typing.Union": {
     "line number": [
      2840
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.StarredDictElement._codegen_impl": {
  "data": {
   "lineno": 2854,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2857,
      2858
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      2856
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.StarredDictElement._visit_and_replace_children": {
  "data": {
   "lineno": 2845,
   "symbols_in_volume": {
    "libcst._nodes.expression.StarredDictElement": {
     "line number": [
      2846
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      2847,
      2850
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      2851
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      2845
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.StarredElement": {
  "data": {
   "lineno": 2761,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      2762
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      2761
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      2788
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      2788
     ]
    },
    "libcst._nodes.expression.BaseElement": {
     "line number": [
      2763
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      2785
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      2791
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      2793
     ]
    },
    "libcst._nodes.expression._BaseParenthesizedNode": {
     "line number": [
      2763
     ]
    },
    "libcst._nodes.op.Comma": {
     "line number": [
      2788
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      2796
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      2796
     ]
    },
    "typing.Sequence": {
     "line number": [
      2791,
      2793
     ]
    },
    "typing.Union": {
     "line number": [
      2788
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.StarredElement._codegen_impl": {
  "data": {
   "lineno": 2809,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2812,
      2813
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      2811
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.StarredElement._visit_and_replace_children": {
  "data": {
   "lineno": 2798,
   "symbols_in_volume": {
    "libcst._nodes.expression.StarredElement": {
     "line number": [
      2799
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      2801,
      2804
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      2806
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      2800,
      2805
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      2798
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.StringQuoteLiteral": {
  "data": {
   "lineno": 528
  },
  "type": "constant"
 },
 "libcst._nodes.expression.Subscript": {
  "data": {
   "lineno": 1525,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1526
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1525
     ]
    },
    "libcst._nodes.expression.BaseAssignTargetExpression": {
     "line number": [
      1527
     ]
    },
    "libcst._nodes.expression.BaseDelTargetExpression": {
     "line number": [
      1527
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      1535
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      1544
     ]
    },
    "libcst._nodes.expression.LeftSquareBracket": {
     "line number": [
      1540,
      1540
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      1546
     ]
    },
    "libcst._nodes.expression.RightSquareBracket": {
     "line number": [
      1542,
      1542
     ]
    },
    "libcst._nodes.expression.SubscriptElement": {
     "line number": [
      1538
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      1549
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      1549
     ]
    },
    "slice": {
     "line number": [
      1538
     ]
    },
    "typing.Sequence": {
     "line number": [
      1538,
      1544,
      1546
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.Subscript._codegen_impl": {
  "data": {
   "lineno": 1579,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      1585
     ]
    },
    "len": {
     "line number": [
      1584
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      1579
     ]
    },
    "slice": {
     "line number": [
      1585
     ]
    },
    "slice._codegen": {
     "line number": [
      1586
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Subscript._safe_to_use_with_word_operator": {
  "data": {
   "lineno": 1570,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1570
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      1570,
      1571,
      1575,
      1576
     ]
    },
    "libcst._nodes.expression.Subscript": {
     "line number": [
      1573
     ]
    },
    "super": {
     "line number": [
      1573
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Subscript._validate": {
  "data": {
   "lineno": 1551,
   "symbols_in_volume": {
    "len": {
     "line number": [
      1554
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      1555
     ]
    },
    "libcst._nodes.expression.Subscript": {
     "line number": [
      1552
     ]
    },
    "super": {
     "line number": [
      1552
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Subscript._visit_and_replace_children": {
  "data": {
   "lineno": 1557,
   "symbols_in_volume": {
    "libcst._nodes.expression.Subscript": {
     "line number": [
      1558
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      1560,
      1561,
      1564,
      1566
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      1559,
      1565,
      1567
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1557
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.SubscriptElement": {
  "data": {
   "lineno": 1491,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1492
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1491
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      1506
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      1506
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      1493
     ]
    },
    "libcst._nodes.expression.BaseSlice": {
     "line number": [
      1503
     ]
    },
    "libcst._nodes.op.Comma": {
     "line number": [
      1506
     ]
    },
    "slice": {
     "line number": [
      1503
     ]
    },
    "typing.Union": {
     "line number": [
      1506
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.SubscriptElement._codegen_impl": {
  "data": {
   "lineno": 1514,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1514
     ]
    },
    "isinstance": {
     "line number": [
      1521
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      1519
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      1514
     ]
    },
    "libcst._nodes.op.Comma": {
     "line number": [
      1521
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.SubscriptElement._visit_and_replace_children": {
  "data": {
   "lineno": 1508,
   "symbols_in_volume": {
    "libcst._nodes.expression.SubscriptElement": {
     "line number": [
      1509
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      1510
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      1511
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1508
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Tuple": {
  "data": {
   "lineno": 2867,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      2868
     ]
    },
    "dataclasses.field": {
     "line number": [
      2890,
      2892
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      2867
     ]
    },
    "libcst._nodes.expression.BaseAssignTargetExpression": {
     "line number": [
      2869
     ]
    },
    "libcst._nodes.expression.BaseDelTargetExpression": {
     "line number": [
      2869
     ]
    },
    "libcst._nodes.expression.BaseElement": {
     "line number": [
      2888
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      2890,
      2890
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      2892,
      2892
     ]
    },
    "typing.Sequence": {
     "line number": [
      2888,
      2890,
      2892
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.Tuple._codegen_impl": {
  "data": {
   "lineno": 2937,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      2945
     ]
    },
    "len": {
     "line number": [
      2940,
      2948
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      2937
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Tuple._safe_to_use_with_word_operator": {
  "data": {
   "lineno": 2894,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2894
     ]
    },
    "isinstance": {
     "line number": [
      2904,
      2906,
      2914
     ]
    },
    "len": {
     "line number": [
      2907
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      2894,
      2901
     ]
    },
    "libcst._nodes.expression.StarredElement": {
     "line number": [
      2906,
      2915
     ]
    },
    "libcst._nodes.expression.Tuple": {
     "line number": [
      2895
     ]
    },
    "libcst._nodes.op.Comma": {
     "line number": [
      2904
     ]
    },
    "super": {
     "line number": [
      2895
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Tuple._validate": {
  "data": {
   "lineno": 2918,
   "symbols_in_volume": {
    "len": {
     "line number": [
      2922,
      2923
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      2924
     ]
    },
    "libcst._nodes.expression.Tuple": {
     "line number": [
      2920
     ]
    },
    "super": {
     "line number": [
      2920
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Tuple._visit_and_replace_children": {
  "data": {
   "lineno": 2930,
   "symbols_in_volume": {
    "libcst._nodes.expression.Tuple": {
     "line number": [
      2931
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      2932,
      2933,
      2934
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      2930
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.UnaryOperation": {
  "data": {
   "lineno": 1168,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1169
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1168
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      1170,
      1182
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      1184
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      1186
     ]
    },
    "libcst._nodes.op.BaseUnaryOp": {
     "line number": [
      1178
     ]
    },
    "typing.Sequence": {
     "line number": [
      1184,
      1186
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.UnaryOperation._codegen_impl": {
  "data": {
   "lineno": 1224,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      1224
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.UnaryOperation._safe_to_use_with_word_operator": {
  "data": {
   "lineno": 1209,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1209
     ]
    },
    "isinstance": {
     "line number": [
      1217
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      1209,
      1216,
      1218,
      1220
     ]
    },
    "libcst._nodes.expression.UnaryOperation": {
     "line number": [
      1214
     ]
    },
    "libcst._nodes.op.Not": {
     "line number": [
      1217
     ]
    },
    "super": {
     "line number": [
      1214
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.UnaryOperation._validate": {
  "data": {
   "lineno": 1188,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1193
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      1199
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      1196
     ]
    },
    "libcst._nodes.expression.UnaryOperation": {
     "line number": [
      1190
     ]
    },
    "libcst._nodes.op.Not": {
     "line number": [
      1193
     ]
    },
    "super": {
     "line number": [
      1190
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.UnaryOperation._visit_and_replace_children": {
  "data": {
   "lineno": 1201,
   "symbols_in_volume": {
    "libcst._nodes.expression.UnaryOperation": {
     "line number": [
      1202
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      1204,
      1205
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      1203,
      1206
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1201
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst._nodes.expression.Yield": {
  "data": {
   "lineno": 2556,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      2557
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      2556
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      2577
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      2578
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      2558,
      2569
     ]
    },
    "libcst._nodes.expression.From": {
     "line number": [
      2569
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      2571
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      2573
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      2577
     ]
    },
    "typing.Optional": {
     "line number": [
      2569
     ]
    },
    "typing.Sequence": {
     "line number": [
      2571,
      2573
     ]
    },
    "typing.Union": {
     "line number": [
      2569,
      2576
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression.Yield._codegen_impl": {
  "data": {
   "lineno": 2611,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      2615,
      2622
     ]
    },
    "libcst._nodes.expression.From": {
     "line number": [
      2622
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      2611
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      2615
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Yield._validate": {
  "data": {
   "lineno": 2580,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      2586,
      2590,
      2594
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      2591,
      2597
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      2595
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      2596
     ]
    },
    "libcst._nodes.expression.From": {
     "line number": [
      2590
     ]
    },
    "libcst._nodes.expression.Yield": {
     "line number": [
      2582
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      2586
     ]
    },
    "super": {
     "line number": [
      2582
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.Yield._visit_and_replace_children": {
  "data": {
   "lineno": 2601,
   "symbols_in_volume": {
    "libcst._nodes.expression.Yield": {
     "line number": [
      2602
     ]
    },
    "libcst._nodes.internal.visit_optional": {
     "line number": [
      2607
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      2604
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      2603,
      2608
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      2601
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression._BaseElementImpl": {
  "data": {
   "lineno": 2628,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      2628
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      2634
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      2634
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      2628
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      2633
     ]
    },
    "libcst._nodes.op.Comma": {
     "line number": [
      2634
     ]
    },
    "typing.Union": {
     "line number": [
      2634
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression._BaseElementImpl._codegen_comma": {
  "data": {
   "lineno": 2636,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2639,
      2640
     ]
    },
    "isinstance": {
     "line number": [
      2651
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      2646
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      2638
     ]
    },
    "libcst._nodes.op.Comma": {
     "line number": [
      2651
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression._BaseElementImpl._codegen_impl": {
  "data": {
   "lineno": 2654,
   "symbols_in_volume": {
    "abc.abstractmethod": {
     "line number": [
      2654
     ]
    },
    "bool": {
     "line number": [
      2658,
      2659
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      2657
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression._BaseExpressionWithArgs": {
  "data": {
   "lineno": 2188,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      2188
     ]
    },
    "libcst._nodes.expression.Arg": {
     "line number": [
      2195
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      2188
     ]
    },
    "typing.Sequence": {
     "line number": [
      2195
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression._BaseExpressionWithArgs._check_kwargs_or_keywords": {
  "data": {
   "lineno": 2197,
   "symbols_in_volume": {
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      2212,
      2217
     ]
    },
    "libcst._nodes.expression.Arg": {
     "line number": [
      2198,
      2199
     ]
    },
    "typing.Callable": {
     "line number": [
      2199,
      2199
     ]
    },
    "typing.Optional": {
     "line number": [
      2199
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression._BaseExpressionWithArgs._check_positional": {
  "data": {
   "lineno": 2246,
   "symbols_in_volume": {
    "libcst._nodes.expression.Arg": {
     "line number": [
      2246,
      2246
     ]
    },
    "typing.Callable": {
     "line number": [
      2246,
      2246
     ]
    },
    "typing.Optional": {
     "line number": [
      2246
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression._BaseExpressionWithArgs._check_starred_or_keywords": {
  "data": {
   "lineno": 2221,
   "symbols_in_volume": {
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      2242
     ]
    },
    "libcst._nodes.expression.Arg": {
     "line number": [
      2222,
      2223
     ]
    },
    "typing.Callable": {
     "line number": [
      2223,
      2223
     ]
    },
    "typing.Optional": {
     "line number": [
      2223
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression._BaseExpressionWithArgs._validate": {
  "data": {
   "lineno": 2270,
   "symbols_in_volume": {
    "super": {
     "line number": [
      2272
     ]
    },
    "validator": {
     "line number": [
      2284,
      2284
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression._BaseParenthesizedNode": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      217
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      217
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      225
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      227
     ]
    },
    "typing.Sequence": {
     "line number": [
      225,
      227
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression._BaseParenthesizedNode._parenthesize": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": {
    "contextlib.contextmanager": {
     "line number": [
      237
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      238
     ]
    },
    "typing.Generator": {
     "line number": [
      238
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression._BaseParenthesizedNode._validate": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": {
    "len": {
     "line number": [
      234,
      234
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      231,
      233,
      235
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression._BasePrefixedString": {
  "data": {
   "lineno": 531,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      531
     ]
    },
    "libcst._nodes.expression.BaseString": {
     "line number": [
      531
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression._BasePrefixedString._safe_to_use_with_word_operator": {
  "data": {
   "lineno": 551,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      551
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      551,
      557
     ]
    },
    "libcst._nodes.expression._BasePrefixedString": {
     "line number": [
      562
     ]
    },
    "super": {
     "line number": [
      562
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression._BasePrefixedString.prefix": {
  "data": {
   "lineno": 532,
   "symbols_in_volume": {
    "property": {
     "line number": [
      532
     ]
    },
    "str": {
     "line number": [
      533
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression._BasePrefixedString.quote": {
  "data": {
   "lineno": 543,
   "symbols_in_volume": {
    "libcst._nodes.expression.StringQuoteLiteral": {
     "line number": [
      544
     ]
    },
    "property": {
     "line number": [
      543
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression._BaseSetOrDict": {
  "data": {
   "lineno": 3030,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      3030
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      3030
     ]
    },
    "libcst._nodes.expression.LeftCurlyBrace": {
     "line number": [
      3039,
      3039
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      3043
     ]
    },
    "libcst._nodes.expression.RightCurlyBrace": {
     "line number": [
      3041,
      3041
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      3045
     ]
    },
    "typing.Sequence": {
     "line number": [
      3043,
      3045
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.expression._BaseSetOrDict._braceize": {
  "data": {
   "lineno": 3051,
   "symbols_in_volume": {
    "contextlib.contextmanager": {
     "line number": [
      3051
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      3052
     ]
    },
    "typing.Generator": {
     "line number": [
      3052
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression._BaseSetOrDict._safe_to_use_with_word_operator": {
  "data": {
   "lineno": 3047,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3047
     ]
    },
    "libcst._nodes.expression.ExpressionPosition": {
     "line number": [
      3047
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.expression.abstractmethod": {
  "data": {
   "shadows": "abc.abstractmethod"
  },
  "type": "import"
 },
 "libcst._nodes.expression.add_slots": {
  "data": {
   "shadows": "libcst._add_slots.add_slots"
  },
  "type": "import"
 },
 "libcst._nodes.expression.auto": {
  "data": {
   "shadows": "enum.auto"
  },
  "type": "import"
 },
 "libcst._nodes.expression.contextmanager": {
  "data": {
   "shadows": "contextlib.contextmanager"
  },
  "type": "import"
 },
 "libcst._nodes.expression.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst._nodes.expression.field": {
  "data": {
   "shadows": "dataclasses.field"
  },
  "type": "import"
 },
 "libcst._nodes.expression.literal_eval": {
  "data": {
   "shadows": "ast.literal_eval"
  },
  "type": "import"
 },
 "libcst._nodes.expression.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "libcst._nodes.expression.visit_optional": {
  "data": {
   "shadows": "libcst._nodes.internal.visit_optional"
  },
  "type": "import"
 },
 "libcst._nodes.expression.visit_required": {
  "data": {
   "shadows": "libcst._nodes.internal.visit_required"
  },
  "type": "import"
 },
 "libcst._nodes.expression.visit_sentinel": {
  "data": {
   "shadows": "libcst._nodes.internal.visit_sentinel"
  },
  "type": "import"
 },
 "libcst._nodes.expression.visit_sequence": {
  "data": {
   "shadows": "libcst._nodes.internal.visit_sequence"
  },
  "type": "import"
 },
 "libcst._nodes.internal": {
  "data": {
   "symbols_in_volume": {
    "typing.TYPE_CHECKING": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._nodes.internal.CSTNode": {
  "data": {
   "shadows": "libcst._nodes.base.CSTNode"
  },
  "type": "import"
 },
 "libcst._nodes.internal.CSTNodeT": {
  "data": {
   "shadows": "libcst._types.CSTNodeT"
  },
  "type": "import"
 },
 "libcst._nodes.internal.CSTVisitorT": {
  "data": {
   "shadows": "libcst._visitors.CSTVisitorT"
  },
  "type": "import"
 },
 "libcst._nodes.internal.CodegenState": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      24
     ]
    },
    "dataclasses.field": {
     "line number": [
      31,
      32
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      23
     ]
    },
    "list": {
     "line number": [
      31,
      32
     ]
    },
    "object": {
     "line number": [
      29
     ]
    },
    "str": {
     "line number": [
      27,
      28,
      31,
      32
     ]
    },
    "typing.List": {
     "line number": [
      31,
      32
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.internal.CodegenState.add_indent_tokens": {
  "data": {
   "lineno": 40
  },
  "type": "function"
 },
 "libcst._nodes.internal.CodegenState.add_token": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "str": {
     "line number": [
      43
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.internal.CodegenState.after_codegen": {
  "data": {
   "lineno": 49
  },
  "type": "function"
 },
 "libcst._nodes.internal.CodegenState.before_codegen": {
  "data": {
   "lineno": 46
  },
  "type": "function"
 },
 "libcst._nodes.internal.CodegenState.decrease_indent": {
  "data": {
   "lineno": 37
  },
  "type": "function"
 },
 "libcst._nodes.internal.CodegenState.increase_indent": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "str": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.internal.CodegenState.pop_trailing_newline": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "len": {
     "line number": [
      57
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.internal.CodegenState.record_syntactic_position": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "contextlib.contextmanager": {
     "line number": [
      62
     ]
    },
    "typing.Iterator": {
     "line number": [
      69
     ]
    },
    "typing.Optional": {
     "line number": [
      67,
      68
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.internal.Iterable": {
  "data": {
   "shadows": "typing.Iterable"
  },
  "type": "import"
 },
 "libcst._nodes.internal.Iterator": {
  "data": {
   "shadows": "typing.Iterator"
  },
  "type": "import"
 },
 "libcst._nodes.internal.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst._nodes.internal.MaybeSentinel": {
  "data": {
   "shadows": "libcst._maybe_sentinel.MaybeSentinel"
  },
  "type": "import"
 },
 "libcst._nodes.internal.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._nodes.internal.RemovalSentinel": {
  "data": {
   "shadows": "libcst._removal_sentinel.RemovalSentinel"
  },
  "type": "import"
 },
 "libcst._nodes.internal.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst._nodes.internal.TYPE_CHECKING": {
  "data": {
   "shadows": "typing.TYPE_CHECKING"
  },
  "type": "import"
 },
 "libcst._nodes.internal.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst._nodes.internal.add_slots": {
  "data": {
   "shadows": "libcst._add_slots.add_slots"
  },
  "type": "import"
 },
 "libcst._nodes.internal.contextmanager": {
  "data": {
   "shadows": "contextlib.contextmanager"
  },
  "type": "import"
 },
 "libcst._nodes.internal.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst._nodes.internal.field": {
  "data": {
   "shadows": "dataclasses.field"
  },
  "type": "import"
 },
 "libcst._nodes.internal.visit_body_iterable": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      175
     ]
    },
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      175
     ]
    },
    "libcst._types.CSTNodeT": {
     "line number": [
      162,
      164
     ]
    },
    "str": {
     "line number": [
      161
     ]
    },
    "typing.Iterable": {
     "line number": [
      164
     ]
    },
    "typing.Sequence": {
     "line number": [
      162
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.internal.visit_body_sequence": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_body_iterable": {
     "line number": [
      200
     ]
    },
    "libcst._types.CSTNodeT": {
     "line number": [
      193,
      195
     ]
    },
    "str": {
     "line number": [
      192
     ]
    },
    "tuple": {
     "line number": [
      200
     ]
    },
    "typing.Sequence": {
     "line number": [
      193,
      195
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.internal.visit_iterable": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      141
     ]
    },
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      141
     ]
    },
    "libcst._types.CSTNodeT": {
     "line number": [
      131,
      133
     ]
    },
    "str": {
     "line number": [
      130
     ]
    },
    "typing.Iterable": {
     "line number": [
      131,
      133
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.internal.visit_optional": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      105
     ]
    },
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      105
     ]
    },
    "libcst._types.CSTNodeT": {
     "line number": [
      92,
      93
     ]
    },
    "str": {
     "line number": [
      92
     ]
    },
    "typing.Optional": {
     "line number": [
      92,
      93
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.internal.visit_required": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      83
     ]
    },
    "isinstance": {
     "line number": [
      82
     ]
    },
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      82
     ]
    },
    "libcst._types.CSTNodeT": {
     "line number": [
      74,
      75
     ]
    },
    "str": {
     "line number": [
      74
     ]
    },
    "type": {
     "line number": [
      84
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.internal.visit_sentinel": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      118,
      125
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      111,
      118,
      113
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      121,
      125
     ]
    },
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      125
     ]
    },
    "libcst._types.CSTNodeT": {
     "line number": [
      111,
      113
     ]
    },
    "str": {
     "line number": [
      110
     ]
    },
    "typing.Union": {
     "line number": [
      111,
      113
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.internal.visit_sequence": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_iterable": {
     "line number": [
      156
     ]
    },
    "libcst._types.CSTNodeT": {
     "line number": [
      149,
      151
     ]
    },
    "str": {
     "line number": [
      148
     ]
    },
    "tuple": {
     "line number": [
      156
     ]
    },
    "typing.Sequence": {
     "line number": [
      149,
      151
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.module": {
  "data": {
   "symbols_in_volume": {
    "bytes": {
     "line number": [
      30
     ]
    },
    "typing.TYPE_CHECKING": {
     "line number": [
      22
     ]
    },
    "typing.TypeVar": {
     "line number": [
      27
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._nodes.module.BaseCompoundStatement": {
  "data": {
   "shadows": "libcst._nodes.statement.BaseCompoundStatement"
  },
  "type": "import"
 },
 "libcst._nodes.module.CSTNode": {
  "data": {
   "shadows": "libcst._nodes.base.CSTNode"
  },
  "type": "import"
 },
 "libcst._nodes.module.CSTVisitorT": {
  "data": {
   "shadows": "libcst._visitors.CSTVisitorT"
  },
  "type": "import"
 },
 "libcst._nodes.module.CodegenState": {
  "data": {
   "shadows": "libcst._nodes.internal.CodegenState"
  },
  "type": "import"
 },
 "libcst._nodes.module.EmptyLine": {
  "data": {
   "shadows": "libcst._nodes.whitespace.EmptyLine"
  },
  "type": "import"
 },
 "libcst._nodes.module.Module": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      70
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      34
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      33
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      35
     ]
    },
    "libcst._nodes.statement.BaseCompoundStatement": {
     "line number": [
      43
     ]
    },
    "libcst._nodes.statement.SimpleStatementLine": {
     "line number": [
      43
     ]
    },
    "libcst._nodes.whitespace.EmptyLine": {
     "line number": [
      49,
      52
     ]
    },
    "str": {
     "line number": [
      59,
      63,
      67
     ]
    },
    "typing.Sequence": {
     "line number": [
      43,
      49,
      52
     ]
    },
    "typing.Union": {
     "line number": [
      43
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.module.Module._codegen_impl": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "len": {
     "line number": [
      105
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      97
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.module.Module._visit_and_replace_children": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_body_sequence": {
     "line number": [
      75
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      74,
      76
     ]
    },
    "libcst._nodes.module.Module": {
     "line number": [
      73
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      72
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.module.Module.bytes": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": {
    "libcst._nodes.module.builtin_bytes": {
     "line number": [
      121
     ]
    },
    "property": {
     "line number": [
      120
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.module.Module.code": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": {
    "property": {
     "line number": [
      112
     ]
    },
    "str": {
     "line number": [
      113
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.module.Module.code_for_node": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": {
    "libcst._nodes.base.CSTNode": {
     "line number": [
      128
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      135
     ]
    },
    "str": {
     "line number": [
      128
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.module.Module.config_for_parsing": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": {
    "libcst._parser.types.config.PartialParserConfig": {
     "line number": [
      157
     ]
    },
    "property": {
     "line number": [
      141
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.module.Module.get_docstring": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      163
     ]
    },
    "libcst._nodes.statement.get_docstring_impl": {
     "line number": [
      167
     ]
    },
    "str": {
     "line number": [
      163
     ]
    },
    "typing.Optional": {
     "line number": [
      163
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.module.Module.visit": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      92
     ]
    },
    "libcst._nodes.module.Module": {
     "line number": [
      91
     ]
    },
    "libcst._nodes.module._ModuleSelfT": {
     "line number": [
      84,
      95,
      84
     ]
    },
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      92
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      84
     ]
    },
    "super": {
     "line number": [
      91
     ]
    },
    "typing.cast": {
     "line number": [
      95
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.module.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._nodes.module.PartialParserConfig": {
  "data": {
   "shadows": "libcst._parser.types.config.PartialParserConfig"
  },
  "type": "import"
 },
 "libcst._nodes.module.RemovalSentinel": {
  "data": {
   "shadows": "libcst._removal_sentinel.RemovalSentinel"
  },
  "type": "import"
 },
 "libcst._nodes.module.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst._nodes.module.SimpleStatementLine": {
  "data": {
   "shadows": "libcst._nodes.statement.SimpleStatementLine"
  },
  "type": "import"
 },
 "libcst._nodes.module.TYPE_CHECKING": {
  "data": {
   "shadows": "typing.TYPE_CHECKING"
  },
  "type": "import"
 },
 "libcst._nodes.module.TypeVar": {
  "data": {
   "shadows": "typing.TypeVar"
  },
  "type": "import"
 },
 "libcst._nodes.module.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst._nodes.module._ModuleSelfT": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "libcst._nodes.module.add_slots": {
  "data": {
   "shadows": "libcst._add_slots.add_slots"
  },
  "type": "import"
 },
 "libcst._nodes.module.builtin_bytes": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "libcst._nodes.module.cast": {
  "data": {
   "shadows": "typing.cast"
  },
  "type": "import"
 },
 "libcst._nodes.module.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst._nodes.module.get_docstring_impl": {
  "data": {
   "shadows": "libcst._nodes.statement.get_docstring_impl"
  },
  "type": "import"
 },
 "libcst._nodes.module.visit_body_sequence": {
  "data": {
   "shadows": "libcst._nodes.internal.visit_body_sequence"
  },
  "type": "import"
 },
 "libcst._nodes.module.visit_sequence": {
  "data": {
   "shadows": "libcst._nodes.internal.visit_sequence"
  },
  "type": "import"
 },
 "libcst._nodes.op": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.op.ABC": {
  "data": {
   "shadows": "abc.ABC"
  },
  "type": "import"
 },
 "libcst._nodes.op.Add": {
  "data": {
   "lineno": 351,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      352
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      351
     ]
    },
    "libcst._nodes.op.BaseBinaryOp": {
     "line number": [
      353
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      353
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      360,
      363
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      360,
      363
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.Add._get_token": {
  "data": {
   "lineno": 365,
   "symbols_in_volume": {
    "str": {
     "line number": [
      365
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.AddAssign": {
  "data": {
   "lineno": 789,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      790
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      789
     ]
    },
    "libcst._nodes.op.BaseAugOp": {
     "line number": [
      791
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      791
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      798,
      801
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      798,
      801
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.AddAssign._get_token": {
  "data": {
   "lineno": 803,
   "symbols_in_volume": {
    "str": {
     "line number": [
      803
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.And": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      316
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      315
     ]
    },
    "libcst._nodes.op.BaseBooleanOp": {
     "line number": [
      317
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      324,
      327
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      324,
      327
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.And._get_token": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": {
    "str": {
     "line number": [
      329
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.AssignEqual": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      235
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      234
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      236
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      246,
      249
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      246,
      249
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.AssignEqual._get_token": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": {
    "str": {
     "line number": [
      251
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.BaseAugOp": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      137
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      137
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.BaseBinaryOp": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      123
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      123
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.BaseBooleanOp": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      116
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      116
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.BaseCompOp": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      130
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      130
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.BaseLeaf": {
  "data": {
   "shadows": "libcst._nodes.base.BaseLeaf"
  },
  "type": "import"
 },
 "libcst._nodes.op.BaseParenthesizableWhitespace": {
  "data": {
   "shadows": "libcst._nodes.whitespace.BaseParenthesizableWhitespace"
  },
  "type": "import"
 },
 "libcst._nodes.op.BaseUnaryOp": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      91
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      91
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      97
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.BaseUnaryOp._codegen_impl": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      107
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.BaseUnaryOp._get_token": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": {
    "abc.abstractmethod": {
     "line number": [
      111
     ]
    },
    "str": {
     "line number": [
      112
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.BaseUnaryOp._visit_and_replace_children": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_required": {
     "line number": [
      102
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      99
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.BitAnd": {
  "data": {
   "lineno": 531,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      532
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      531
     ]
    },
    "libcst._nodes.op.BaseBinaryOp": {
     "line number": [
      533
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      533
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      540,
      543
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      540,
      543
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.BitAnd._get_token": {
  "data": {
   "lineno": 545,
   "symbols_in_volume": {
    "str": {
     "line number": [
      545
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.BitAndAssign": {
  "data": {
   "lineno": 897,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      898
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      897
     ]
    },
    "libcst._nodes.op.BaseAugOp": {
     "line number": [
      899
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      899
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      906,
      909
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      906,
      909
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.BitAndAssign._get_token": {
  "data": {
   "lineno": 911,
   "symbols_in_volume": {
    "str": {
     "line number": [
      911
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.BitInvert": {
  "data": {
   "lineno": 285,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      286
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      285
     ]
    },
    "libcst._nodes.op.BaseUnaryOp": {
     "line number": [
      287
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      294
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      294
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.BitInvert._get_token": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": {
    "str": {
     "line number": [
      296
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.BitOr": {
  "data": {
   "lineno": 513,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      514
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      513
     ]
    },
    "libcst._nodes.op.BaseBinaryOp": {
     "line number": [
      515
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      515
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      522,
      525
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      522,
      525
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.BitOr._get_token": {
  "data": {
   "lineno": 527,
   "symbols_in_volume": {
    "str": {
     "line number": [
      527
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.BitOrAssign": {
  "data": {
   "lineno": 915,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      916
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      915
     ]
    },
    "libcst._nodes.op.BaseAugOp": {
     "line number": [
      917
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      917
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      924,
      927
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      924,
      927
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.BitOrAssign._get_token": {
  "data": {
   "lineno": 929,
   "symbols_in_volume": {
    "str": {
     "line number": [
      929
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.BitXor": {
  "data": {
   "lineno": 549,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      550
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      549
     ]
    },
    "libcst._nodes.op.BaseBinaryOp": {
     "line number": [
      551
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      551
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      558,
      561
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      558,
      561
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.BitXor._get_token": {
  "data": {
   "lineno": 563,
   "symbols_in_volume": {
    "str": {
     "line number": [
      563
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.BitXorAssign": {
  "data": {
   "lineno": 933,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      934
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      933
     ]
    },
    "libcst._nodes.op.BaseAugOp": {
     "line number": [
      935
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      935
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      942,
      945
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      942,
      945
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.BitXorAssign._get_token": {
  "data": {
   "lineno": 947,
   "symbols_in_volume": {
    "str": {
     "line number": [
      947
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.CSTNode": {
  "data": {
   "shadows": "libcst._nodes.base.CSTNode"
  },
  "type": "import"
 },
 "libcst._nodes.op.CSTValidationError": {
  "data": {
   "shadows": "libcst._nodes.base.CSTValidationError"
  },
  "type": "import"
 },
 "libcst._nodes.op.CSTVisitorT": {
  "data": {
   "shadows": "libcst._visitors.CSTVisitorT"
  },
  "type": "import"
 },
 "libcst._nodes.op.CodegenState": {
  "data": {
   "shadows": "libcst._nodes.internal.CodegenState"
  },
  "type": "import"
 },
 "libcst._nodes.op.Colon": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      164
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      163
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      165
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      172,
      175
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      172,
      175
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.Colon._get_token": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": {
    "str": {
     "line number": [
      177
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.Comma": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      182
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      181
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      183
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      196,
      199
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      196,
      199
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.Comma._get_token": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": {
    "str": {
     "line number": [
      201
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.Divide": {
  "data": {
   "lineno": 405,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      406
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      405
     ]
    },
    "libcst._nodes.op.BaseBinaryOp": {
     "line number": [
      407
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      407
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      414,
      417
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      414,
      417
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.Divide._get_token": {
  "data": {
   "lineno": 419,
   "symbols_in_volume": {
    "str": {
     "line number": [
      419
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.DivideAssign": {
  "data": {
   "lineno": 861,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      862
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      861
     ]
    },
    "libcst._nodes.op.BaseAugOp": {
     "line number": [
      863
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      863
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      870,
      873
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      870,
      873
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.DivideAssign._get_token": {
  "data": {
   "lineno": 875,
   "symbols_in_volume": {
    "str": {
     "line number": [
      875
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.Dot": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      206
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      205
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      207
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      213,
      216
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      213,
      216
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.Dot._get_token": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": {
    "str": {
     "line number": [
      218
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.Equal": {
  "data": {
   "lineno": 619,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      620
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      619
     ]
    },
    "libcst._nodes.op.BaseCompOp": {
     "line number": [
      621
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      621
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      627,
      630
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      627,
      630
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.Equal._get_token": {
  "data": {
   "lineno": 632,
   "symbols_in_volume": {
    "str": {
     "line number": [
      632
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.FloorDivide": {
  "data": {
   "lineno": 423,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      424
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      423
     ]
    },
    "libcst._nodes.op.BaseBinaryOp": {
     "line number": [
      425
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      425
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      432,
      435
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      432,
      435
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.FloorDivide._get_token": {
  "data": {
   "lineno": 437,
   "symbols_in_volume": {
    "str": {
     "line number": [
      437
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.FloorDivideAssign": {
  "data": {
   "lineno": 1005,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1006
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1005
     ]
    },
    "libcst._nodes.op.BaseAugOp": {
     "line number": [
      1007
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      1007
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      1014,
      1017
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      1014,
      1017
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.FloorDivideAssign._get_token": {
  "data": {
   "lineno": 1019,
   "symbols_in_volume": {
    "str": {
     "line number": [
      1019
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.GreaterThan": {
  "data": {
   "lineno": 602,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      603
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      602
     ]
    },
    "libcst._nodes.op.BaseCompOp": {
     "line number": [
      604
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      604
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      610,
      613
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      610,
      613
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.GreaterThan._get_token": {
  "data": {
   "lineno": 615,
   "symbols_in_volume": {
    "str": {
     "line number": [
      615
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.GreaterThanEqual": {
  "data": {
   "lineno": 653,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      654
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      653
     ]
    },
    "libcst._nodes.op.BaseCompOp": {
     "line number": [
      655
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      655
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      661,
      664
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      661,
      664
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.GreaterThanEqual._get_token": {
  "data": {
   "lineno": 666,
   "symbols_in_volume": {
    "str": {
     "line number": [
      666
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.ImportStar": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      223
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      222
     ]
    },
    "libcst._nodes.base.BaseLeaf": {
     "line number": [
      224
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.ImportStar._codegen_impl": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      230
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.In": {
  "data": {
   "lineno": 709,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      710
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      709
     ]
    },
    "libcst._nodes.op.BaseCompOp": {
     "line number": [
      711
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      711
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      717,
      720
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      717,
      720
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.In._get_token": {
  "data": {
   "lineno": 722,
   "symbols_in_volume": {
    "str": {
     "line number": [
      722
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.Is": {
  "data": {
   "lineno": 749,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      750
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      749
     ]
    },
    "libcst._nodes.op.BaseCompOp": {
     "line number": [
      751
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      751
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      757,
      760
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      757,
      760
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.Is._get_token": {
  "data": {
   "lineno": 762,
   "symbols_in_volume": {
    "str": {
     "line number": [
      762
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.IsNot": {
  "data": {
   "lineno": 766,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      767
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      766
     ]
    },
    "libcst._nodes.op.BaseCompOp": {
     "line number": [
      768
     ]
    },
    "libcst._nodes.op._BaseTwoTokenOp": {
     "line number": [
      768
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      777,
      780,
      783
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      777,
      780,
      783
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.IsNot._get_tokens": {
  "data": {
   "lineno": 785,
   "symbols_in_volume": {
    "str": {
     "line number": [
      785,
      785
     ]
    },
    "typing.Tuple": {
     "line number": [
      785
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.LeftShift": {
  "data": {
   "lineno": 477,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      478
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      477
     ]
    },
    "libcst._nodes.op.BaseBinaryOp": {
     "line number": [
      479
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      479
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      486,
      489
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      486,
      489
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.LeftShift._get_token": {
  "data": {
   "lineno": 491,
   "symbols_in_volume": {
    "str": {
     "line number": [
      491
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.LeftShiftAssign": {
  "data": {
   "lineno": 951,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      952
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      951
     ]
    },
    "libcst._nodes.op.BaseAugOp": {
     "line number": [
      953
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      953
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      960,
      963
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      960,
      963
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.LeftShiftAssign._get_token": {
  "data": {
   "lineno": 965,
   "symbols_in_volume": {
    "str": {
     "line number": [
      965
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.LessThan": {
  "data": {
   "lineno": 585,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      586
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      585
     ]
    },
    "libcst._nodes.op.BaseCompOp": {
     "line number": [
      587
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      587
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      593,
      596
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      593,
      596
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.LessThan._get_token": {
  "data": {
   "lineno": 598,
   "symbols_in_volume": {
    "str": {
     "line number": [
      598
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.LessThanEqual": {
  "data": {
   "lineno": 636,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      637
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      636
     ]
    },
    "libcst._nodes.op.BaseCompOp": {
     "line number": [
      638
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      638
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      644,
      647
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      644,
      647
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.LessThanEqual._get_token": {
  "data": {
   "lineno": 649,
   "symbols_in_volume": {
    "str": {
     "line number": [
      649
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.MatrixMultiply": {
  "data": {
   "lineno": 567,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      568
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      567
     ]
    },
    "libcst._nodes.op.BaseBinaryOp": {
     "line number": [
      569
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      569
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      576,
      579
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      576,
      579
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.MatrixMultiply._get_token": {
  "data": {
   "lineno": 581,
   "symbols_in_volume": {
    "str": {
     "line number": [
      581
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.MatrixMultiplyAssign": {
  "data": {
   "lineno": 843,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      844
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      843
     ]
    },
    "libcst._nodes.op.BaseAugOp": {
     "line number": [
      845
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      845
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      852,
      855
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      852,
      855
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.MatrixMultiplyAssign._get_token": {
  "data": {
   "lineno": 857,
   "symbols_in_volume": {
    "str": {
     "line number": [
      857
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.Minus": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      271
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      270
     ]
    },
    "libcst._nodes.op.BaseUnaryOp": {
     "line number": [
      272
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      279
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      279
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.Minus._get_token": {
  "data": {
   "lineno": 281,
   "symbols_in_volume": {
    "str": {
     "line number": [
      281
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.Modulo": {
  "data": {
   "lineno": 441,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      442
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      441
     ]
    },
    "libcst._nodes.op.BaseBinaryOp": {
     "line number": [
      443
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      443
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      450,
      453
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      450,
      453
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.Modulo._get_token": {
  "data": {
   "lineno": 455,
   "symbols_in_volume": {
    "str": {
     "line number": [
      455
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.ModuloAssign": {
  "data": {
   "lineno": 879,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      880
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      879
     ]
    },
    "libcst._nodes.op.BaseAugOp": {
     "line number": [
      881
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      881
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      888,
      891
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      888,
      891
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.ModuloAssign._get_token": {
  "data": {
   "lineno": 893,
   "symbols_in_volume": {
    "str": {
     "line number": [
      893
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.Multiply": {
  "data": {
   "lineno": 387,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      388
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      387
     ]
    },
    "libcst._nodes.op.BaseBinaryOp": {
     "line number": [
      389
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      389
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      396,
      399
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      396,
      399
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.Multiply._get_token": {
  "data": {
   "lineno": 401,
   "symbols_in_volume": {
    "str": {
     "line number": [
      401
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.MultiplyAssign": {
  "data": {
   "lineno": 825,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      826
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      825
     ]
    },
    "libcst._nodes.op.BaseAugOp": {
     "line number": [
      827
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      827
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      834,
      837
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      834,
      837
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.MultiplyAssign._get_token": {
  "data": {
   "lineno": 839,
   "symbols_in_volume": {
    "str": {
     "line number": [
      839
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.Not": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      301
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      300
     ]
    },
    "libcst._nodes.op.BaseUnaryOp": {
     "line number": [
      302
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      309
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      309
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.Not._get_token": {
  "data": {
   "lineno": 311,
   "symbols_in_volume": {
    "str": {
     "line number": [
      311
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.NotEqual": {
  "data": {
   "lineno": 670,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      671
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      670
     ]
    },
    "libcst._nodes.op.BaseCompOp": {
     "line number": [
      672
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      672
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      685,
      688
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      685,
      688
     ]
    },
    "str": {
     "line number": [
      682
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.NotEqual._get_token": {
  "data": {
   "lineno": 705,
   "symbols_in_volume": {
    "str": {
     "line number": [
      705
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.NotEqual._validate": {
  "data": {
   "lineno": 690,
   "symbols_in_volume": {
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      692
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.NotEqual._visit_and_replace_children": {
  "data": {
   "lineno": 694,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_required": {
     "line number": [
      696,
      700
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      694
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.NotIn": {
  "data": {
   "lineno": 726,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      727
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      726
     ]
    },
    "libcst._nodes.op.BaseCompOp": {
     "line number": [
      728
     ]
    },
    "libcst._nodes.op._BaseTwoTokenOp": {
     "line number": [
      728
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      737,
      740,
      743
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      737,
      740,
      743
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.NotIn._get_tokens": {
  "data": {
   "lineno": 745,
   "symbols_in_volume": {
    "str": {
     "line number": [
      745,
      745
     ]
    },
    "typing.Tuple": {
     "line number": [
      745
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.Or": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      334
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      333
     ]
    },
    "libcst._nodes.op.BaseBooleanOp": {
     "line number": [
      335
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      342,
      345
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      342,
      345
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.Or._get_token": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": {
    "str": {
     "line number": [
      347
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.Plus": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      256
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      255
     ]
    },
    "libcst._nodes.op.BaseUnaryOp": {
     "line number": [
      257
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      264
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      264
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.Plus._get_token": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": {
    "str": {
     "line number": [
      266
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.Power": {
  "data": {
   "lineno": 459,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      460
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      459
     ]
    },
    "libcst._nodes.op.BaseBinaryOp": {
     "line number": [
      461
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      461
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      468,
      471
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      468,
      471
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.Power._get_token": {
  "data": {
   "lineno": 473,
   "symbols_in_volume": {
    "str": {
     "line number": [
      473
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.PowerAssign": {
  "data": {
   "lineno": 987,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      988
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      987
     ]
    },
    "libcst._nodes.op.BaseAugOp": {
     "line number": [
      989
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      989
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      996,
      999
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      996,
      999
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.PowerAssign._get_token": {
  "data": {
   "lineno": 1001,
   "symbols_in_volume": {
    "str": {
     "line number": [
      1001
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.RightShift": {
  "data": {
   "lineno": 495,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      496
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      495
     ]
    },
    "libcst._nodes.op.BaseBinaryOp": {
     "line number": [
      497
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      497
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      504,
      507
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      504,
      507
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.RightShift._get_token": {
  "data": {
   "lineno": 509,
   "symbols_in_volume": {
    "str": {
     "line number": [
      509
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.RightShiftAssign": {
  "data": {
   "lineno": 969,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      970
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      969
     ]
    },
    "libcst._nodes.op.BaseAugOp": {
     "line number": [
      971
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      971
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      978,
      981
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      978,
      981
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.RightShiftAssign._get_token": {
  "data": {
   "lineno": 983,
   "symbols_in_volume": {
    "str": {
     "line number": [
      983
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.Semicolon": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      145
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      144
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      146
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      154,
      157
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      154,
      157
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.Semicolon._get_token": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": {
    "str": {
     "line number": [
      159
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.SimpleWhitespace": {
  "data": {
   "shadows": "libcst._nodes.whitespace.SimpleWhitespace"
  },
  "type": "import"
 },
 "libcst._nodes.op.Subtract": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      370
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      369
     ]
    },
    "libcst._nodes.op.BaseBinaryOp": {
     "line number": [
      371
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      371
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      378,
      381
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      378,
      381
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.Subtract._get_token": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": {
    "str": {
     "line number": [
      383
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.SubtractAssign": {
  "data": {
   "lineno": 807,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      808
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      807
     ]
    },
    "libcst._nodes.op.BaseAugOp": {
     "line number": [
      809
     ]
    },
    "libcst._nodes.op._BaseOneTokenOp": {
     "line number": [
      809
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      816,
      819
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      816,
      819
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op.SubtractAssign._get_token": {
  "data": {
   "lineno": 821,
   "symbols_in_volume": {
    "str": {
     "line number": [
      821
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst._nodes.op._BaseOneTokenOp": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      17
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      17
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      22,
      24
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op._BaseOneTokenOp._codegen_impl": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op._BaseOneTokenOp._get_token": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "abc.abstractmethod": {
     "line number": [
      43
     ]
    },
    "str": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op._BaseOneTokenOp._visit_and_replace_children": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_required": {
     "line number": [
      29,
      32
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op._BaseTwoTokenOp": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      48
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      48
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      54,
      56,
      58
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.op._BaseTwoTokenOp._codegen_impl": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      78
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op._BaseTwoTokenOp._get_tokens": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "abc.abstractmethod": {
     "line number": [
      86
     ]
    },
    "str": {
     "line number": [
      87,
      87
     ]
    },
    "typing.Tuple": {
     "line number": [
      87
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op._BaseTwoTokenOp._validate": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      62
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op._BaseTwoTokenOp._visit_and_replace_children": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_required": {
     "line number": [
      67,
      70,
      73
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      64
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.op.abstractmethod": {
  "data": {
   "shadows": "abc.abstractmethod"
  },
  "type": "import"
 },
 "libcst._nodes.op.add_slots": {
  "data": {
   "shadows": "libcst._add_slots.add_slots"
  },
  "type": "import"
 },
 "libcst._nodes.op.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst._nodes.op.visit_required": {
  "data": {
   "shadows": "libcst._nodes.internal.visit_required"
  },
  "type": "import"
 },
 "libcst._nodes.statement": {
  "data": {
   "symbols_in_volume": {
    "libcst._nodes.statement.re": {
     "line number": [
      53,
      53
     ]
    },
    "str": {
     "line number": [
      53
     ]
    },
    "typing.Pattern": {
     "line number": [
      53
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._nodes.statement.ABC": {
  "data": {
   "shadows": "abc.ABC"
  },
  "type": "import"
 },
 "libcst._nodes.statement.AnnAssign": {
  "data": {
   "lineno": 1323,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1324
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1323
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      1344,
      1348
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      1344,
      1348
     ]
    },
    "libcst._nodes.expression.Annotation": {
     "line number": [
      1338
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      1335,
      1341
     ]
    },
    "libcst._nodes.op.AssignEqual": {
     "line number": [
      1344
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      1348
     ]
    },
    "libcst._nodes.statement.BaseSmallStatement": {
     "line number": [
      1325
     ]
    },
    "typing.Optional": {
     "line number": [
      1341
     ]
    },
    "typing.Union": {
     "line number": [
      1344,
      1348
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.AnnAssign._codegen_impl": {
  "data": {
   "lineno": 1365,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1366
     ]
    },
    "isinstance": {
     "line number": [
      1374,
      1381,
      1384
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      1381
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      1372
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      1366
     ]
    },
    "libcst._nodes.op.AssignEqual": {
     "line number": [
      1374
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      1384
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.AnnAssign._validate": {
  "data": {
   "lineno": 1350,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1351
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      1352
     ]
    },
    "libcst._nodes.op.AssignEqual": {
     "line number": [
      1351
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.AnnAssign._visit_and_replace_children": {
  "data": {
   "lineno": 1356,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_optional": {
     "line number": [
      1361
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      1358,
      1359
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      1360,
      1362
     ]
    },
    "libcst._nodes.statement.AnnAssign": {
     "line number": [
      1357
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1356
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Annotation": {
  "data": {
   "shadows": "libcst._nodes.expression.Annotation"
  },
  "type": "import"
 },
 "libcst._nodes.statement.Arg": {
  "data": {
   "shadows": "libcst._nodes.expression.Arg"
  },
  "type": "import"
 },
 "libcst._nodes.statement.AsName": {
  "data": {
   "lineno": 710,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      711
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      710
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      712
     ]
    },
    "libcst._nodes.expression.List": {
     "line number": [
      719
     ]
    },
    "libcst._nodes.expression.Name": {
     "line number": [
      719
     ]
    },
    "libcst._nodes.expression.Tuple": {
     "line number": [
      719
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      722,
      725
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      722,
      725
     ]
    },
    "typing.Union": {
     "line number": [
      719
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.AsName._codegen_impl": {
  "data": {
   "lineno": 746,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      746
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.AsName._validate": {
  "data": {
   "lineno": 727,
   "symbols_in_volume": {
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      729,
      733
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.AsName._visit_and_replace_children": {
  "data": {
   "lineno": 735,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_required": {
     "line number": [
      737,
      740,
      741
     ]
    },
    "libcst._nodes.statement.AsName": {
     "line number": [
      736
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      735
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Assert": {
  "data": {
   "lineno": 2194,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      2195
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      2194
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      2208,
      2215
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      2208,
      2215
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      2202,
      2205
     ]
    },
    "libcst._nodes.op.Comma": {
     "line number": [
      2208
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      2215
     ]
    },
    "libcst._nodes.statement.BaseSmallStatement": {
     "line number": [
      2196
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      2211
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      2211
     ]
    },
    "typing.Optional": {
     "line number": [
      2205
     ]
    },
    "typing.Union": {
     "line number": [
      2208,
      2215
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.Assert._codegen_impl": {
  "data": {
   "lineno": 2240,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2241
     ]
    },
    "isinstance": {
     "line number": [
      2250,
      2259,
      2262
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      2250,
      2259
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      2241
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      2262
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Assert._validate": {
  "data": {
   "lineno": 2217,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      2226
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      2223,
      2227
     ]
    },
    "libcst._nodes.expression.ExpressionPosition.RIGHT": {
     "line number": [
      2221
     ]
    },
    "libcst._nodes.op.Comma": {
     "line number": [
      2226
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Assert._visit_and_replace_children": {
  "data": {
   "lineno": 2229,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_optional": {
     "line number": [
      2236
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      2231,
      2234
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      2235,
      2237
     ]
    },
    "libcst._nodes.statement.Assert": {
     "line number": [
      2230
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      2229
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Assign": {
  "data": {
   "lineno": 1275,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1276
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1275
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      1292
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      1292
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      1288
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      1292
     ]
    },
    "libcst._nodes.statement.AssignTarget": {
     "line number": [
      1285
     ]
    },
    "libcst._nodes.statement.BaseSmallStatement": {
     "line number": [
      1277
     ]
    },
    "typing.Sequence": {
     "line number": [
      1285
     ]
    },
    "typing.Union": {
     "line number": [
      1292
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.Assign._codegen_impl": {
  "data": {
   "lineno": 1307,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1308
     ]
    },
    "isinstance": {
     "line number": [
      1316,
      1319
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      1316
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      1308
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      1319
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Assign._validate": {
  "data": {
   "lineno": 1294,
   "symbols_in_volume": {
    "len": {
     "line number": [
      1295
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      1296
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Assign._visit_and_replace_children": {
  "data": {
   "lineno": 1300,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_required": {
     "line number": [
      1303
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      1304
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      1302
     ]
    },
    "libcst._nodes.statement.Assign": {
     "line number": [
      1301
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1300
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.AssignEqual": {
  "data": {
   "shadows": "libcst._nodes.op.AssignEqual"
  },
  "type": "import"
 },
 "libcst._nodes.statement.AssignTarget": {
  "data": {
   "lineno": 1239,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1240
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1239
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      1241
     ]
    },
    "libcst._nodes.expression.BaseAssignTargetExpression": {
     "line number": [
      1247
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      1250,
      1253
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      1250,
      1253
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.AssignTarget._codegen_impl": {
  "data": {
   "lineno": 1266,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      1266
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.AssignTarget._visit_and_replace_children": {
  "data": {
   "lineno": 1255,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_required": {
     "line number": [
      1257,
      1258,
      1261
     ]
    },
    "libcst._nodes.statement.AssignTarget": {
     "line number": [
      1256
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1255
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Asynchronous": {
  "data": {
   "shadows": "libcst._nodes.expression.Asynchronous"
  },
  "type": "import"
 },
 "libcst._nodes.statement.Attribute": {
  "data": {
   "shadows": "libcst._nodes.expression.Attribute"
  },
  "type": "import"
 },
 "libcst._nodes.statement.AugAssign": {
  "data": {
   "lineno": 1388,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1389
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1388
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      1406
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      1406
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      1396,
      1402
     ]
    },
    "libcst._nodes.op.BaseAugOp": {
     "line number": [
      1399
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      1406
     ]
    },
    "libcst._nodes.statement.BaseSmallStatement": {
     "line number": [
      1390
     ]
    },
    "typing.Union": {
     "line number": [
      1406
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.AugAssign._codegen_impl": {
  "data": {
   "lineno": 1416,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1417
     ]
    },
    "isinstance": {
     "line number": [
      1425,
      1428
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      1425
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      1417
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      1428
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.AugAssign._visit_and_replace_children": {
  "data": {
   "lineno": 1408,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_required": {
     "line number": [
      1410,
      1411,
      1412
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      1413
     ]
    },
    "libcst._nodes.statement.AugAssign": {
     "line number": [
      1409
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1408
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.BaseAssignTargetExpression": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseAssignTargetExpression"
  },
  "type": "import"
 },
 "libcst._nodes.statement.BaseAugOp": {
  "data": {
   "shadows": "libcst._nodes.op.BaseAugOp"
  },
  "type": "import"
 },
 "libcst._nodes.statement.BaseCompoundStatement": {
  "data": {
   "lineno": 531,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      531
     ]
    },
    "libcst._nodes.statement.BaseStatement": {
     "line number": [
      531
     ]
    },
    "libcst._nodes.statement.BaseSuite": {
     "line number": [
      545
     ]
    },
    "libcst._nodes.whitespace.EmptyLine": {
     "line number": [
      548
     ]
    },
    "typing.Sequence": {
     "line number": [
      548
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.BaseDelTargetExpression": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseDelTargetExpression"
  },
  "type": "import"
 },
 "libcst._nodes.statement.BaseExpression": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseExpression"
  },
  "type": "import"
 },
 "libcst._nodes.statement.BaseParenthesizableWhitespace": {
  "data": {
   "shadows": "libcst._nodes.whitespace.BaseParenthesizableWhitespace"
  },
  "type": "import"
 },
 "libcst._nodes.statement.BaseSmallStatement": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      81
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      94
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      94
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      81
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      94
     ]
    },
    "typing.Union": {
     "line number": [
      94
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.BaseSmallStatement._codegen_impl": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": {
    "abc.abstractmethod": {
     "line number": [
      96
     ]
    },
    "bool": {
     "line number": [
      98
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      98
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.BaseStatement": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      72
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      72
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.BaseSuite": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      56
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      56
     ]
    },
    "typing.Sequence": {
     "line number": [
      69,
      69
     ]
    },
    "typing.Union": {
     "line number": [
      69
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.Break": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      186
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      185
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      195
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      195
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      195
     ]
    },
    "libcst._nodes.statement.BaseSmallStatement": {
     "line number": [
      187
     ]
    },
    "typing.Union": {
     "line number": [
      195
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.Break._codegen_impl": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      203
     ]
    },
    "isinstance": {
     "line number": [
      209,
      212
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      209
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      203
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      212
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Break._visit_and_replace_children": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      199
     ]
    },
    "libcst._nodes.statement.Break": {
     "line number": [
      198
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      197
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.CSTNode": {
  "data": {
   "shadows": "libcst._nodes.base.CSTNode"
  },
  "type": "import"
 },
 "libcst._nodes.statement.CSTValidationError": {
  "data": {
   "shadows": "libcst._nodes.base.CSTValidationError"
  },
  "type": "import"
 },
 "libcst._nodes.statement.CSTVisitorT": {
  "data": {
   "shadows": "libcst._visitors.CSTVisitorT"
  },
  "type": "import"
 },
 "libcst._nodes.statement.Call": {
  "data": {
   "shadows": "libcst._nodes.expression.Call"
  },
  "type": "import"
 },
 "libcst._nodes.statement.ClassDef": {
  "data": {
   "lineno": 1655,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1656
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1655
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      1678,
      1681
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      1678,
      1681
     ]
    },
    "libcst._nodes.expression.Arg": {
     "line number": [
      1669,
      1672
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      1678
     ]
    },
    "libcst._nodes.expression.Name": {
     "line number": [
      1663
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      1681
     ]
    },
    "libcst._nodes.statement.BaseCompoundStatement": {
     "line number": [
      1657
     ]
    },
    "libcst._nodes.statement.BaseSuite": {
     "line number": [
      1666
     ]
    },
    "libcst._nodes.statement.Decorator": {
     "line number": [
      1675
     ]
    },
    "libcst._nodes.whitespace.EmptyLine": {
     "line number": [
      1688,
      1692
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      1695,
      1699,
      1703
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      1695,
      1699,
      1703
     ]
    },
    "typing.Sequence": {
     "line number": [
      1669,
      1672,
      1675,
      1688,
      1692
     ]
    },
    "typing.Union": {
     "line number": [
      1678,
      1681
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.ClassDef._codegen_impl": {
  "data": {
   "lineno": 1762,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      1784
     ]
    },
    "isinstance": {
     "line number": [
      1777,
      1780,
      1787,
      1790
     ]
    },
    "len": {
     "line number": [
      1783
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      1777,
      1787
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      1780
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      1790
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      1762
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.ClassDef._validate": {
  "data": {
   "lineno": 1731
  },
  "type": "function"
 },
 "libcst._nodes.statement.ClassDef._validate_args": {
  "data": {
   "lineno": 1723,
   "symbols_in_volume": {
    "any": {
     "line number": [
      1724,
      1726
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      1725,
      1727
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.ClassDef._validate_parens": {
  "data": {
   "lineno": 1711,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1714,
      1714,
      1718,
      1718
     ]
    },
    "len": {
     "line number": [
      1712,
      1712
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      1714,
      1718
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      1713,
      1715,
      1719
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      1718
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      1714
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.ClassDef._validate_whitespace": {
  "data": {
   "lineno": 1705,
   "symbols_in_volume": {
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      1707
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.ClassDef._visit_and_replace_children": {
  "data": {
   "lineno": 1736,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_required": {
     "line number": [
      1745,
      1748,
      1749,
      1756,
      1759
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      1752,
      1755
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      1738,
      1741,
      1742,
      1753,
      1754
     ]
    },
    "libcst._nodes.statement.ClassDef": {
     "line number": [
      1737
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1736
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.ClassDef.get_docstring": {
  "data": {
   "lineno": 1796,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1796
     ]
    },
    "libcst._nodes.statement.get_docstring_impl": {
     "line number": [
      1800
     ]
    },
    "str": {
     "line number": [
      1796
     ]
    },
    "typing.Optional": {
     "line number": [
      1796
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.CodegenState": {
  "data": {
   "shadows": "libcst._nodes.internal.CodegenState"
  },
  "type": "import"
 },
 "libcst._nodes.statement.Comma": {
  "data": {
   "shadows": "libcst._nodes.op.Comma"
  },
  "type": "import"
 },
 "libcst._nodes.statement.ConcatenatedString": {
  "data": {
   "shadows": "libcst._nodes.expression.ConcatenatedString"
  },
  "type": "import"
 },
 "libcst._nodes.statement.Continue": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      217
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      216
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      226
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      226
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      226
     ]
    },
    "libcst._nodes.statement.BaseSmallStatement": {
     "line number": [
      218
     ]
    },
    "typing.Union": {
     "line number": [
      226
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.Continue._codegen_impl": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      234
     ]
    },
    "isinstance": {
     "line number": [
      240,
      243
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      240
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      234
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      243
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Continue._visit_and_replace_children": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      230
     ]
    },
    "libcst._nodes.statement.Continue": {
     "line number": [
      229
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      228
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Decorator": {
  "data": {
   "lineno": 1432,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1433
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1432
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      1434
     ]
    },
    "libcst._nodes.expression.Attribute": {
     "line number": [
      1441
     ]
    },
    "libcst._nodes.expression.Call": {
     "line number": [
      1441
     ]
    },
    "libcst._nodes.expression.Name": {
     "line number": [
      1441
     ]
    },
    "libcst._nodes.whitespace.EmptyLine": {
     "line number": [
      1446
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      1449
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      1449
     ]
    },
    "libcst._nodes.whitespace.TrailingWhitespace": {
     "line number": [
      1452
     ]
    },
    "libcst._nodes.whitespace.TrailingWhitespace.field": {
     "line number": [
      1452
     ]
    },
    "typing.Sequence": {
     "line number": [
      1446
     ]
    },
    "typing.Union": {
     "line number": [
      1441
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.Decorator._codegen_impl": {
  "data": {
   "lineno": 1481,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      1481
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Decorator._validate": {
  "data": {
   "lineno": 1454,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1460,
      1460
     ]
    },
    "len": {
     "line number": [
      1456,
      1456
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      1457,
      1463
     ]
    },
    "libcst._nodes.expression.Attribute": {
     "line number": [
      1461
     ]
    },
    "libcst._nodes.expression.Call": {
     "line number": [
      1460
     ]
    },
    "libcst._nodes.expression.Name": {
     "line number": [
      1461
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Decorator._visit_and_replace_children": {
  "data": {
   "lineno": 1467,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_required": {
     "line number": [
      1472,
      1475,
      1476
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      1469
     ]
    },
    "libcst._nodes.statement.Decorator": {
     "line number": [
      1468
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1467
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Del": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      104
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      103
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      119
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      119
     ]
    },
    "libcst._nodes.expression.BaseDelTargetExpression": {
     "line number": [
      112
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      119
     ]
    },
    "libcst._nodes.statement.BaseSmallStatement": {
     "line number": [
      105
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      115
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      115
     ]
    },
    "typing.Union": {
     "line number": [
      119
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.Del._codegen_impl": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      140
     ]
    },
    "isinstance": {
     "line number": [
      148,
      151
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      148
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      140
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      151
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Del._validate": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": {
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      128
     ]
    },
    "libcst._nodes.expression.ExpressionPosition.RIGHT": {
     "line number": [
      125
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Del._visit_and_replace_children": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_required": {
     "line number": [
      132,
      133
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      136
     ]
    },
    "libcst._nodes.statement.Del": {
     "line number": [
      131
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      130
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Dot": {
  "data": {
   "shadows": "libcst._nodes.op.Dot"
  },
  "type": "import"
 },
 "libcst._nodes.statement.Else": {
  "data": {
   "lineno": 487,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      488
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      487
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      489
     ]
    },
    "libcst._nodes.statement.BaseSuite": {
     "line number": [
      500
     ]
    },
    "libcst._nodes.whitespace.EmptyLine": {
     "line number": [
      503
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      506
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      506
     ]
    },
    "typing.Sequence": {
     "line number": [
      503
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.Else._codegen_impl": {
  "data": {
   "lineno": 519,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      519
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Else._visit_and_replace_children": {
  "data": {
   "lineno": 508,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_required": {
     "line number": [
      513,
      516
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      510
     ]
    },
    "libcst._nodes.statement.Else": {
     "line number": [
      509
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      508
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.EmptyLine": {
  "data": {
   "shadows": "libcst._nodes.whitespace.EmptyLine"
  },
  "type": "import"
 },
 "libcst._nodes.statement.ExceptHandler": {
  "data": {
   "lineno": 753,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      754
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      753
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      755
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      765
     ]
    },
    "libcst._nodes.statement.AsName": {
     "line number": [
      768
     ]
    },
    "libcst._nodes.statement.BaseSuite": {
     "line number": [
      761
     ]
    },
    "libcst._nodes.whitespace.EmptyLine": {
     "line number": [
      771
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      774,
      778
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      774,
      778
     ]
    },
    "type": {
     "line number": [
      765
     ]
    },
    "typing.Optional": {
     "line number": [
      765,
      768
     ]
    },
    "typing.Sequence": {
     "line number": [
      771
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.ExceptHandler._codegen_impl": {
  "data": {
   "lineno": 814,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      814
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.ExceptHandler._validate": {
  "data": {
   "lineno": 780,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      784,
      793
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      783,
      785,
      794
     ]
    },
    "libcst._nodes.expression.Name": {
     "line number": [
      784,
      793
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.ExceptHandler._visit_and_replace_children": {
  "data": {
   "lineno": 798,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_optional": {
     "line number": [
      806,
      807
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      803,
      808,
      811
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      800
     ]
    },
    "libcst._nodes.statement.ExceptHandler": {
     "line number": [
      799
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      798
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Expr": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      313
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      312
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      327
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      327
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      323
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      327
     ]
    },
    "libcst._nodes.statement.BaseSmallStatement": {
     "line number": [
      314
     ]
    },
    "typing.Union": {
     "line number": [
      327
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.Expr._codegen_impl": {
  "data": {
   "lineno": 335,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      336
     ]
    },
    "isinstance": {
     "line number": [
      342,
      345
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      342
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      336
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      345
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Expr._visit_and_replace_children": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_required": {
     "line number": [
      331
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      332
     ]
    },
    "libcst._nodes.statement.Expr": {
     "line number": [
      330
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      329
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.ExpressionPosition": {
  "data": {
   "shadows": "libcst._nodes.expression.ExpressionPosition"
  },
  "type": "import"
 },
 "libcst._nodes.statement.Finally": {
  "data": {
   "lineno": 833,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      834
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      833
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      835
     ]
    },
    "libcst._nodes.statement.BaseSuite": {
     "line number": [
      841
     ]
    },
    "libcst._nodes.whitespace.EmptyLine": {
     "line number": [
      844
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      848
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      848
     ]
    },
    "typing.Sequence": {
     "line number": [
      844
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.Finally._codegen_impl": {
  "data": {
   "lineno": 861,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      861
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Finally._visit_and_replace_children": {
  "data": {
   "lineno": 850,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_required": {
     "line number": [
      855,
      858
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      852
     ]
    },
    "libcst._nodes.statement.Finally": {
     "line number": [
      851
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      850
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.For": {
  "data": {
   "lineno": 1918,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1919
     ]
    },
    "iter": {
     "line number": [
      1929
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1918
     ]
    },
    "libcst._nodes.expression.Asynchronous": {
     "line number": [
      1939
     ]
    },
    "libcst._nodes.expression.BaseAssignTargetExpression": {
     "line number": [
      1926
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      1929
     ]
    },
    "libcst._nodes.statement.BaseCompoundStatement": {
     "line number": [
      1920
     ]
    },
    "libcst._nodes.statement.BaseSuite": {
     "line number": [
      1932
     ]
    },
    "libcst._nodes.statement.Else": {
     "line number": [
      1936
     ]
    },
    "libcst._nodes.whitespace.EmptyLine": {
     "line number": [
      1942
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      1945,
      1948,
      1951,
      1954
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      1945,
      1948,
      1951,
      1954
     ]
    },
    "typing.Optional": {
     "line number": [
      1936,
      1939
     ]
    },
    "typing.Sequence": {
     "line number": [
      1942
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.For._codegen_impl": {
  "data": {
   "lineno": 2007,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      2007
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.For._validate": {
  "data": {
   "lineno": 1956,
   "symbols_in_volume": {
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      1963,
      1971,
      1979
     ]
    },
    "libcst._nodes.expression.ExpressionPosition.LEFT": {
     "line number": [
      1969
     ]
    },
    "libcst._nodes.expression.ExpressionPosition.RIGHT": {
     "line number": [
      1960,
      1977
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.For._visit_and_replace_children": {
  "data": {
   "lineno": 1981,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_optional": {
     "line number": [
      1986,
      2004
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      1989,
      1992,
      1993,
      1996,
      1999,
      2000,
      2003
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      1983
     ]
    },
    "libcst._nodes.statement.For": {
     "line number": [
      1982
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1981
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.From": {
  "data": {
   "shadows": "libcst._nodes.expression.From"
  },
  "type": "import"
 },
 "libcst._nodes.statement.FunctionDef": {
  "data": {
   "lineno": 1528,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1529
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1528
     ]
    },
    "libcst._nodes.expression.Annotation": {
     "line number": [
      1550
     ]
    },
    "libcst._nodes.expression.Asynchronous": {
     "line number": [
      1553
     ]
    },
    "libcst._nodes.expression.Name": {
     "line number": [
      1536
     ]
    },
    "libcst._nodes.expression.Parameters": {
     "line number": [
      1539
     ]
    },
    "libcst._nodes.statement.BaseCompoundStatement": {
     "line number": [
      1530
     ]
    },
    "libcst._nodes.statement.BaseSuite": {
     "line number": [
      1542
     ]
    },
    "libcst._nodes.statement.Decorator": {
     "line number": [
      1547
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      1575
     ]
    },
    "libcst._nodes.whitespace.EmptyLine": {
     "line number": [
      1560,
      1564
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      1567,
      1571,
      1579
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      1567,
      1571,
      1575,
      1579
     ]
    },
    "typing.Optional": {
     "line number": [
      1550,
      1553
     ]
    },
    "typing.Sequence": {
     "line number": [
      1547,
      1560,
      1564
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.FunctionDef._codegen_impl": {
  "data": {
   "lineno": 1619,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      1619
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.FunctionDef._validate": {
  "data": {
   "lineno": 1581,
   "symbols_in_volume": {
    "len": {
     "line number": [
      1582,
      1582
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      1583,
      1585
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.FunctionDef._visit_and_replace_children": {
  "data": {
   "lineno": 1589,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_optional": {
     "line number": [
      1598,
      1612
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      1601,
      1604,
      1605,
      1608,
      1611,
      1613,
      1616
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      1591,
      1594,
      1595
     ]
    },
    "libcst._nodes.statement.FunctionDef": {
     "line number": [
      1590
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1589
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.FunctionDef.get_docstring": {
  "data": {
   "lineno": 1647,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1647
     ]
    },
    "libcst._nodes.statement.get_docstring_impl": {
     "line number": [
      1652
     ]
    },
    "str": {
     "line number": [
      1647
     ]
    },
    "typing.Optional": {
     "line number": [
      1647
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Global": {
  "data": {
   "lineno": 2306,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      2307
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      2306
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      2321
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      2321
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      2321
     ]
    },
    "libcst._nodes.statement.BaseSmallStatement": {
     "line number": [
      2308
     ]
    },
    "libcst._nodes.statement.NameItem": {
     "line number": [
      2314
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      2317
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      2317
     ]
    },
    "typing.Sequence": {
     "line number": [
      2314
     ]
    },
    "typing.Union": {
     "line number": [
      2321
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.Global._codegen_impl": {
  "data": {
   "lineno": 2346,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2347
     ]
    },
    "enumerate": {
     "line number": [
      2353
     ]
    },
    "isinstance": {
     "line number": [
      2357,
      2360
     ]
    },
    "len": {
     "line number": [
      2352
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      2357
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      2347
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      2360
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Global._validate": {
  "data": {
   "lineno": 2323,
   "symbols_in_volume": {
    "len": {
     "line number": [
      2324
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      2328
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      2325,
      2329,
      2333
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Global._visit_and_replace_children": {
  "data": {
   "lineno": 2337,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_required": {
     "line number": [
      2339
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      2343
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      2342
     ]
    },
    "libcst._nodes.statement.Global": {
     "line number": [
      2338
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      2337
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.If": {
  "data": {
   "lineno": 551,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      552
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      551
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      562
     ]
    },
    "libcst._nodes.statement.BaseCompoundStatement": {
     "line number": [
      553
     ]
    },
    "libcst._nodes.statement.BaseSuite": {
     "line number": [
      565
     ]
    },
    "libcst._nodes.statement.Else": {
     "line number": [
      570
     ]
    },
    "libcst._nodes.whitespace.EmptyLine": {
     "line number": [
      573
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      576,
      579
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      576,
      579
     ]
    },
    "typing.Sequence": {
     "line number": [
      573
     ]
    },
    "typing.Union": {
     "line number": [
      570
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.If._codegen_impl": {
  "data": {
   "lineno": 599,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      599
     ]
    },
    "isinstance": {
     "line number": [
      614
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      599
     ]
    },
    "libcst._nodes.statement.If": {
     "line number": [
      614
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.If._visit_and_replace_children": {
  "data": {
   "lineno": 583,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_optional": {
     "line number": [
      596
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      588,
      591,
      592,
      595
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      585
     ]
    },
    "libcst._nodes.statement.If": {
     "line number": [
      584
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      583
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Import": {
  "data": {
   "lineno": 1035,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1036
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1035
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      1047
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      1047
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      1047
     ]
    },
    "libcst._nodes.statement.BaseSmallStatement": {
     "line number": [
      1037
     ]
    },
    "libcst._nodes.statement.ImportAlias": {
     "line number": [
      1043
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      1051
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      1051
     ]
    },
    "typing.Sequence": {
     "line number": [
      1043
     ]
    },
    "typing.Union": {
     "line number": [
      1047
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.Import._codegen_impl": {
  "data": {
   "lineno": 1074,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1075
     ]
    },
    "enumerate": {
     "line number": [
      1081
     ]
    },
    "isinstance": {
     "line number": [
      1085,
      1088
     ]
    },
    "len": {
     "line number": [
      1080
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      1085
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      1075
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      1088
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Import._validate": {
  "data": {
   "lineno": 1053,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1058
     ]
    },
    "len": {
     "line number": [
      1054
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      1055,
      1059,
      1063
     ]
    },
    "libcst._nodes.op.Comma": {
     "line number": [
      1058
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Import._visit_and_replace_children": {
  "data": {
   "lineno": 1065,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_required": {
     "line number": [
      1067
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      1071
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      1070
     ]
    },
    "libcst._nodes.statement.Import": {
     "line number": [
      1066
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1065
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.ImportAlias": {
  "data": {
   "lineno": 952,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      953
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      952
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      970
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      970
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      954
     ]
    },
    "libcst._nodes.expression.Attribute": {
     "line number": [
      961
     ]
    },
    "libcst._nodes.expression.Name": {
     "line number": [
      961
     ]
    },
    "libcst._nodes.op.Comma": {
     "line number": [
      970
     ]
    },
    "libcst._nodes.statement.AsName": {
     "line number": [
      964
     ]
    },
    "typing.Optional": {
     "line number": [
      964
     ]
    },
    "typing.Union": {
     "line number": [
      961,
      970
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.ImportAlias._codegen_impl": {
  "data": {
   "lineno": 994,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      994
     ]
    },
    "isinstance": {
     "line number": [
      1004
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      1002
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      994
     ]
    },
    "libcst._nodes.op.Comma": {
     "line number": [
      1004
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.ImportAlias._name": {
  "data": {
   "lineno": 1007,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      1014
     ]
    },
    "isinstance": {
     "line number": [
      1009,
      1011
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      1007
     ]
    },
    "libcst._nodes.expression.Attribute": {
     "line number": [
      1011
     ]
    },
    "libcst._nodes.expression.Name": {
     "line number": [
      1009
     ]
    },
    "str": {
     "line number": [
      1007
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.ImportAlias._validate": {
  "data": {
   "lineno": 972,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      980
     ]
    },
    "isinstance": {
     "line number": [
      974
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      975,
      982
     ]
    },
    "libcst._nodes.expression.Name": {
     "line number": [
      974
     ]
    },
    "str": {
     "line number": [
      981
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.ImportAlias._visit_and_replace_children": {
  "data": {
   "lineno": 987,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_optional": {
     "line number": [
      990
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      989
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      991
     ]
    },
    "libcst._nodes.statement.ImportAlias": {
     "line number": [
      988
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      987
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.ImportAlias.evaluated_alias": {
  "data": {
   "lineno": 1023,
   "symbols_in_volume": {
    "property": {
     "line number": [
      1023
     ]
    },
    "str": {
     "line number": [
      1024
     ]
    },
    "typing.Optional": {
     "line number": [
      1024
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.ImportAlias.evaluated_name": {
  "data": {
   "lineno": 1016,
   "symbols_in_volume": {
    "property": {
     "line number": [
      1016
     ]
    },
    "str": {
     "line number": [
      1017
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.ImportFrom": {
  "data": {
   "lineno": 1092,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1093
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1092
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      1118
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      1118
     ]
    },
    "libcst._nodes.expression.Attribute": {
     "line number": [
      1101
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      1111
     ]
    },
    "libcst._nodes.expression.Name": {
     "line number": [
      1101
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      1114
     ]
    },
    "libcst._nodes.op.Dot": {
     "line number": [
      1108
     ]
    },
    "libcst._nodes.op.ImportStar": {
     "line number": [
      1105
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      1118
     ]
    },
    "libcst._nodes.statement.BaseSmallStatement": {
     "line number": [
      1094
     ]
    },
    "libcst._nodes.statement.ImportAlias": {
     "line number": [
      1105
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      1122,
      1126,
      1130
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      1122,
      1126,
      1130
     ]
    },
    "typing.Optional": {
     "line number": [
      1101,
      1111,
      1114
     ]
    },
    "typing.Sequence": {
     "line number": [
      1105,
      1108
     ]
    },
    "typing.Union": {
     "line number": [
      1101,
      1105,
      1118
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.ImportFrom._codegen_impl": {
  "data": {
   "lineno": 1201,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1202
     ]
    },
    "enumerate": {
     "line number": [
      1223
     ]
    },
    "isinstance": {
     "line number": [
      1205,
      1221,
      1225,
      1232,
      1235
     ]
    },
    "len": {
     "line number": [
      1222
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      1232
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      1202
     ]
    },
    "libcst._nodes.op.ImportStar": {
     "line number": [
      1225
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      1235
     ]
    },
    "typing.Sequence": {
     "line number": [
      1205,
      1221
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.ImportFrom._validate": {
  "data": {
   "lineno": 1172
  },
  "type": "function"
 },
 "libcst._nodes.statement.ImportFrom._validate_module": {
  "data": {
   "lineno": 1132,
   "symbols_in_volume": {
    "len": {
     "line number": [
      1133
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      1134
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.ImportFrom._validate_names": {
  "data": {
   "lineno": 1138,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1140,
      1152
     ]
    },
    "len": {
     "line number": [
      1141
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      1142,
      1147,
      1149,
      1151,
      1154
     ]
    },
    "libcst._nodes.op.ImportStar": {
     "line number": [
      1152
     ]
    },
    "typing.Sequence": {
     "line number": [
      1140
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.ImportFrom._validate_whitespace": {
  "data": {
   "lineno": 1158,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1168
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      1160,
      1164,
      1170
     ]
    },
    "libcst._nodes.op.ImportStar": {
     "line number": [
      1168
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.ImportFrom._visit_and_replace_children": {
  "data": {
   "lineno": 1177,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1194
     ]
    },
    "libcst._nodes.internal.visit_optional": {
     "line number": [
      1184,
      1191,
      1197
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      1180,
      1185,
      1188,
      1193
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      1198
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      1183,
      1195
     ]
    },
    "libcst._nodes.op.ImportStar": {
     "line number": [
      1194
     ]
    },
    "libcst._nodes.statement.ImportFrom": {
     "line number": [
      1179
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1177
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.ImportStar": {
  "data": {
   "shadows": "libcst._nodes.op.ImportStar"
  },
  "type": "import"
 },
 "libcst._nodes.statement.IndentedBlock": {
  "data": {
   "lineno": 620,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      621
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      620
     ]
    },
    "libcst._nodes.statement.BaseStatement": {
     "line number": [
      643
     ]
    },
    "libcst._nodes.statement.BaseSuite": {
     "line number": [
      622
     ]
    },
    "libcst._nodes.whitespace.EmptyLine": {
     "line number": [
      659
     ]
    },
    "libcst._nodes.whitespace.TrailingWhitespace": {
     "line number": [
      646
     ]
    },
    "libcst._nodes.whitespace.TrailingWhitespace.field": {
     "line number": [
      646
     ]
    },
    "str": {
     "line number": [
      651
     ]
    },
    "typing.Optional": {
     "line number": [
      651
     ]
    },
    "typing.Sequence": {
     "line number": [
      643,
      659
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.IndentedBlock._codegen_impl": {
  "data": {
   "lineno": 681,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      681
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.IndentedBlock._validate": {
  "data": {
   "lineno": 661,
   "symbols_in_volume": {
    "len": {
     "line number": [
      664
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      665,
      669
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.IndentedBlock._visit_and_replace_children": {
  "data": {
   "lineno": 673,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_body_sequence": {
     "line number": [
      677
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      675
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      678
     ]
    },
    "libcst._nodes.statement.IndentedBlock": {
     "line number": [
      674
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      673
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.LeftParen": {
  "data": {
   "shadows": "libcst._nodes.expression.LeftParen"
  },
  "type": "import"
 },
 "libcst._nodes.statement.List": {
  "data": {
   "shadows": "libcst._nodes.expression.List"
  },
  "type": "import"
 },
 "libcst._nodes.statement.MaybeSentinel": {
  "data": {
   "shadows": "libcst._maybe_sentinel.MaybeSentinel"
  },
  "type": "import"
 },
 "libcst._nodes.statement.Name": {
  "data": {
   "shadows": "libcst._nodes.expression.Name"
  },
  "type": "import"
 },
 "libcst._nodes.statement.NameItem": {
  "data": {
   "lineno": 2266,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      2267
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      2266
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      2282
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      2282
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      2268
     ]
    },
    "libcst._nodes.expression.Name": {
     "line number": [
      2277
     ]
    },
    "libcst._nodes.op.Comma": {
     "line number": [
      2282
     ]
    },
    "typing.Union": {
     "line number": [
      2282
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.NameItem._codegen_impl": {
  "data": {
   "lineno": 2295,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2295
     ]
    },
    "isinstance": {
     "line number": [
      2302
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      2300
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      2295
     ]
    },
    "libcst._nodes.op.Comma": {
     "line number": [
      2302
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.NameItem._validate": {
  "data": {
   "lineno": 2284,
   "symbols_in_volume": {
    "len": {
     "line number": [
      2286,
      2286
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      2287
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.NameItem._visit_and_replace_children": {
  "data": {
   "lineno": 2289,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_required": {
     "line number": [
      2291
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      2292
     ]
    },
    "libcst._nodes.statement.NameItem": {
     "line number": [
      2290
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      2289
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Nonlocal": {
  "data": {
   "lineno": 2364,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      2365
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      2364
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      2379
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      2379
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      2379
     ]
    },
    "libcst._nodes.statement.BaseSmallStatement": {
     "line number": [
      2366
     ]
    },
    "libcst._nodes.statement.NameItem": {
     "line number": [
      2372
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      2375
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      2375
     ]
    },
    "typing.Sequence": {
     "line number": [
      2372
     ]
    },
    "typing.Union": {
     "line number": [
      2379
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.Nonlocal._codegen_impl": {
  "data": {
   "lineno": 2407,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2408
     ]
    },
    "enumerate": {
     "line number": [
      2414
     ]
    },
    "isinstance": {
     "line number": [
      2418,
      2421
     ]
    },
    "len": {
     "line number": [
      2413
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      2418
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      2408
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      2421
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Nonlocal._validate": {
  "data": {
   "lineno": 2381,
   "symbols_in_volume": {
    "len": {
     "line number": [
      2382
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      2386
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      2383,
      2387,
      2391
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Nonlocal._visit_and_replace_children": {
  "data": {
   "lineno": 2395,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_required": {
     "line number": [
      2397
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      2404
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      2403
     ]
    },
    "libcst._nodes.statement.Nonlocal": {
     "line number": [
      2396
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      2395
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._nodes.statement.Parameters": {
  "data": {
   "shadows": "libcst._nodes.expression.Parameters"
  },
  "type": "import"
 },
 "libcst._nodes.statement.Pass": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      156
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      155
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      164
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      164
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      164
     ]
    },
    "libcst._nodes.statement.BaseSmallStatement": {
     "line number": [
      157
     ]
    },
    "typing.Union": {
     "line number": [
      164
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.Pass._codegen_impl": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      172
     ]
    },
    "isinstance": {
     "line number": [
      178,
      181
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      178
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      172
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      181
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Pass._visit_and_replace_children": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      168
     ]
    },
    "libcst._nodes.statement.Pass": {
     "line number": [
      167
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      166
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Pattern": {
  "data": {
   "shadows": "typing.Pattern"
  },
  "type": "import"
 },
 "libcst._nodes.statement.Raise": {
  "data": {
   "lineno": 2101,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      2102
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      2101
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      2117,
      2122
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      2118,
      2122
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      2109
     ]
    },
    "libcst._nodes.expression.From": {
     "line number": [
      2113
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      2122
     ]
    },
    "libcst._nodes.statement.BaseSmallStatement": {
     "line number": [
      2103
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      2117
     ]
    },
    "typing.Optional": {
     "line number": [
      2109,
      2113
     ]
    },
    "typing.Union": {
     "line number": [
      2116,
      2122
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.Raise._codegen_impl": {
  "data": {
   "lineno": 2168,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2169
     ]
    },
    "isinstance": {
     "line number": [
      2176,
      2187,
      2190
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      2176,
      2187
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      2169
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      2190
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Raise._validate": {
  "data": {
   "lineno": 2124,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      2136,
      2149
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      2136,
      2149
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      2127,
      2142,
      2156
     ]
    },
    "libcst._nodes.expression.ExpressionPosition.LEFT": {
     "line number": [
      2154
     ]
    },
    "libcst._nodes.expression.ExpressionPosition.RIGHT": {
     "line number": [
      2140
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Raise._visit_and_replace_children": {
  "data": {
   "lineno": 2158,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_optional": {
     "line number": [
      2163,
      2164
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      2160,
      2165
     ]
    },
    "libcst._nodes.statement.Raise": {
     "line number": [
      2159
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      2158
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Return": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      248
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      247
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      260,
      265
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      261,
      265
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      255
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      265
     ]
    },
    "libcst._nodes.statement.BaseSmallStatement": {
     "line number": [
      249
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      260
     ]
    },
    "typing.Optional": {
     "line number": [
      255
     ]
    },
    "typing.Union": {
     "line number": [
      259,
      265
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.Return._codegen_impl": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      290
     ]
    },
    "isinstance": {
     "line number": [
      296,
      305,
      308
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      296,
      305
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      290
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      308
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Return._validate": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      272
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      272
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      278
     ]
    },
    "libcst._nodes.expression.ExpressionPosition.RIGHT": {
     "line number": [
      276
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Return._visit_and_replace_children": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_optional": {
     "line number": [
      285
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      282,
      286
     ]
    },
    "libcst._nodes.statement.Return": {
     "line number": [
      281
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      280
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.RightParen": {
  "data": {
   "shadows": "libcst._nodes.expression.RightParen"
  },
  "type": "import"
 },
 "libcst._nodes.statement.Semicolon": {
  "data": {
   "shadows": "libcst._nodes.op.Semicolon"
  },
  "type": "import"
 },
 "libcst._nodes.statement.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst._nodes.statement.SimpleStatementLine": {
  "data": {
   "lineno": 395,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      396
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      395
     ]
    },
    "libcst._nodes.statement.BaseSmallStatement": {
     "line number": [
      409
     ]
    },
    "libcst._nodes.statement.BaseStatement": {
     "line number": [
      397
     ]
    },
    "libcst._nodes.statement._BaseSimpleStatement": {
     "line number": [
      397
     ]
    },
    "libcst._nodes.whitespace.EmptyLine": {
     "line number": [
      412
     ]
    },
    "libcst._nodes.whitespace.TrailingWhitespace": {
     "line number": [
      415
     ]
    },
    "libcst._nodes.whitespace.TrailingWhitespace.field": {
     "line number": [
      415
     ]
    },
    "typing.Sequence": {
     "line number": [
      409,
      412
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.SimpleStatementLine._codegen_impl": {
  "data": {
   "lineno": 435,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      435
     ]
    },
    "libcst._nodes.statement._BaseSimpleStatement": {
     "line number": [
      439
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.SimpleStatementLine._is_removable": {
  "data": {
   "lineno": 430,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      430
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.SimpleStatementLine._visit_and_replace_children": {
  "data": {
   "lineno": 417,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_required": {
     "line number": [
      425
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      421,
      424
     ]
    },
    "libcst._nodes.statement.SimpleStatementLine": {
     "line number": [
      420
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      418
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.SimpleStatementSuite": {
  "data": {
   "lineno": 442,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      443
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      442
     ]
    },
    "libcst._nodes.statement.BaseSmallStatement": {
     "line number": [
      461
     ]
    },
    "libcst._nodes.statement.BaseSuite": {
     "line number": [
      444
     ]
    },
    "libcst._nodes.statement._BaseSimpleStatement": {
     "line number": [
      444
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      464
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      464
     ]
    },
    "libcst._nodes.whitespace.TrailingWhitespace": {
     "line number": [
      467
     ]
    },
    "libcst._nodes.whitespace.TrailingWhitespace.field": {
     "line number": [
      467
     ]
    },
    "typing.Sequence": {
     "line number": [
      461
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.SimpleStatementSuite._codegen_impl": {
  "data": {
   "lineno": 482,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      482
     ]
    },
    "libcst._nodes.statement._BaseSimpleStatement": {
     "line number": [
      484
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.SimpleStatementSuite._visit_and_replace_children": {
  "data": {
   "lineno": 469,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_required": {
     "line number": [
      473,
      477
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      476
     ]
    },
    "libcst._nodes.statement.SimpleStatementSuite": {
     "line number": [
      472
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      470
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.SimpleString": {
  "data": {
   "shadows": "libcst._nodes.expression.SimpleString"
  },
  "type": "import"
 },
 "libcst._nodes.statement.SimpleWhitespace": {
  "data": {
   "shadows": "libcst._nodes.whitespace.SimpleWhitespace"
  },
  "type": "import"
 },
 "libcst._nodes.statement.TrailingWhitespace": {
  "data": {
   "shadows": "libcst._nodes.whitespace.TrailingWhitespace"
  },
  "type": "import"
 },
 "libcst._nodes.statement.Try": {
  "data": {
   "lineno": 873,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      874
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      873
     ]
    },
    "libcst._nodes.statement.BaseCompoundStatement": {
     "line number": [
      875
     ]
    },
    "libcst._nodes.statement.BaseSuite": {
     "line number": [
      881
     ]
    },
    "libcst._nodes.statement.Else": {
     "line number": [
      887
     ]
    },
    "libcst._nodes.statement.ExceptHandler": {
     "line number": [
      884
     ]
    },
    "libcst._nodes.statement.Finally": {
     "line number": [
      890
     ]
    },
    "libcst._nodes.whitespace.EmptyLine": {
     "line number": [
      893
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      897
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      897
     ]
    },
    "typing.Optional": {
     "line number": [
      887,
      890
     ]
    },
    "typing.Sequence": {
     "line number": [
      884,
      893
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.Try._codegen_impl": {
  "data": {
   "lineno": 927,
   "symbols_in_volume": {
    "len": {
     "line number": [
      933
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      927
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Try._validate": {
  "data": {
   "lineno": 899,
   "symbols_in_volume": {
    "any": {
     "line number": [
      910
     ]
    },
    "len": {
     "line number": [
      900,
      904
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      901,
      905,
      911
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Try._visit_and_replace_children": {
  "data": {
   "lineno": 913,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_optional": {
     "line number": [
      923,
      924
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      918,
      921
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      915,
      922
     ]
    },
    "libcst._nodes.statement.Try": {
     "line number": [
      914
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      913
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.Tuple": {
  "data": {
   "shadows": "libcst._nodes.expression.Tuple"
  },
  "type": "import"
 },
 "libcst._nodes.statement.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst._nodes.statement.While": {
  "data": {
   "lineno": 2032,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      2033
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      2032
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      2040
     ]
    },
    "libcst._nodes.statement.BaseCompoundStatement": {
     "line number": [
      2034
     ]
    },
    "libcst._nodes.statement.BaseSuite": {
     "line number": [
      2043
     ]
    },
    "libcst._nodes.statement.Else": {
     "line number": [
      2047
     ]
    },
    "libcst._nodes.whitespace.EmptyLine": {
     "line number": [
      2050
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      2053,
      2056
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      2053,
      2056
     ]
    },
    "typing.Optional": {
     "line number": [
      2047
     ]
    },
    "typing.Sequence": {
     "line number": [
      2050
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.While._codegen_impl": {
  "data": {
   "lineno": 2083,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      2083
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.While._validate": {
  "data": {
   "lineno": 2058,
   "symbols_in_volume": {
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      2063
     ]
    },
    "libcst._nodes.expression.ExpressionPosition.RIGHT": {
     "line number": [
      2061
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.While._visit_and_replace_children": {
  "data": {
   "lineno": 2067,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_optional": {
     "line number": [
      2080
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      2072,
      2075,
      2076,
      2079
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      2069
     ]
    },
    "libcst._nodes.statement.While": {
     "line number": [
      2068
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      2067
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.With": {
  "data": {
   "lineno": 1842,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1843
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1842
     ]
    },
    "libcst._nodes.expression.Asynchronous": {
     "line number": [
      1856
     ]
    },
    "libcst._nodes.statement.BaseCompoundStatement": {
     "line number": [
      1844
     ]
    },
    "libcst._nodes.statement.BaseSuite": {
     "line number": [
      1853
     ]
    },
    "libcst._nodes.statement.WithItem": {
     "line number": [
      1850
     ]
    },
    "libcst._nodes.whitespace.EmptyLine": {
     "line number": [
      1859
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      1862,
      1865
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace.field": {
     "line number": [
      1862,
      1865
     ]
    },
    "typing.Optional": {
     "line number": [
      1856
     ]
    },
    "typing.Sequence": {
     "line number": [
      1850,
      1859
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.With._codegen_impl": {
  "data": {
   "lineno": 1899,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      1911
     ]
    },
    "len": {
     "line number": [
      1910
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      1899
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.With._validate": {
  "data": {
   "lineno": 1867,
   "symbols_in_volume": {
    "len": {
     "line number": [
      1868
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      1872
     ]
    },
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      1869,
      1873,
      1879
     ]
    },
    "libcst._nodes.expression.ExpressionPosition.RIGHT": {
     "line number": [
      1878
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.With._visit_and_replace_children": {
  "data": {
   "lineno": 1881,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_optional": {
     "line number": [
      1886
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      1889,
      1893,
      1896
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      1883,
      1892
     ]
    },
    "libcst._nodes.statement.With": {
     "line number": [
      1882
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1881
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.WithItem": {
  "data": {
   "lineno": 1803,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1804
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      1803
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      1819
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      1819
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      1805
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      1811
     ]
    },
    "libcst._nodes.op.Comma": {
     "line number": [
      1819
     ]
    },
    "libcst._nodes.statement.AsName": {
     "line number": [
      1815
     ]
    },
    "typing.Optional": {
     "line number": [
      1815
     ]
    },
    "typing.Union": {
     "line number": [
      1819
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement.WithItem._codegen_impl": {
  "data": {
   "lineno": 1828,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1828
     ]
    },
    "isinstance": {
     "line number": [
      1838
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      1836
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      1828
     ]
    },
    "libcst._nodes.op.Comma": {
     "line number": [
      1838
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.WithItem._visit_and_replace_children": {
  "data": {
   "lineno": 1821,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_optional": {
     "line number": [
      1824
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      1823
     ]
    },
    "libcst._nodes.internal.visit_sentinel": {
     "line number": [
      1825
     ]
    },
    "libcst._nodes.statement.WithItem": {
     "line number": [
      1822
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      1821
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement._BaseSimpleStatement": {
  "data": {
   "lineno": 349,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      349
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      349
     ]
    },
    "libcst._nodes.statement.BaseSmallStatement": {
     "line number": [
      362
     ]
    },
    "libcst._nodes.whitespace.TrailingWhitespace": {
     "line number": [
      366
     ]
    },
    "typing.Sequence": {
     "line number": [
      362
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.statement._BaseSimpleStatement._codegen_impl": {
  "data": {
   "lineno": 379,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      384
     ]
    },
    "len": {
     "line number": [
      382
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      379
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement._BaseSimpleStatement._validate": {
  "data": {
   "lineno": 368,
   "symbols_in_volume": {
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      372
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.abstractmethod": {
  "data": {
   "shadows": "abc.abstractmethod"
  },
  "type": "import"
 },
 "libcst._nodes.statement.add_slots": {
  "data": {
   "shadows": "libcst._add_slots.add_slots"
  },
  "type": "import"
 },
 "libcst._nodes.statement.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst._nodes.statement.get_docstring_impl": {
  "data": {
   "lineno": 1494,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1496
     ]
    },
    "isinstance": {
     "line number": [
      1504,
      1511,
      1515,
      1518
     ]
    },
    "len": {
     "line number": [
      1512
     ]
    },
    "libcst._nodes.expression.ConcatenatedString": {
     "line number": [
      1518
     ]
    },
    "libcst._nodes.expression.SimpleString": {
     "line number": [
      1518
     ]
    },
    "libcst._nodes.statement.BaseCompoundStatement": {
     "line number": [
      1495
     ]
    },
    "libcst._nodes.statement.BaseSuite": {
     "line number": [
      1495,
      1511
     ]
    },
    "libcst._nodes.statement.Expr": {
     "line number": [
      1515
     ]
    },
    "libcst._nodes.statement.SimpleStatementLine": {
     "line number": [
      1495,
      1511
     ]
    },
    "libcst._nodes.statement.inspect": {
     "line number": [
      1524
     ]
    },
    "str": {
     "line number": [
      1497
     ]
    },
    "typing.Optional": {
     "line number": [
      1497
     ]
    },
    "typing.Sequence": {
     "line number": [
      1495,
      1504
     ]
    },
    "typing.Union": {
     "line number": [
      1495,
      1495
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.statement.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "libcst._nodes.statement.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "libcst._nodes.statement.visit_body_sequence": {
  "data": {
   "shadows": "libcst._nodes.internal.visit_body_sequence"
  },
  "type": "import"
 },
 "libcst._nodes.statement.visit_optional": {
  "data": {
   "shadows": "libcst._nodes.internal.visit_optional"
  },
  "type": "import"
 },
 "libcst._nodes.statement.visit_required": {
  "data": {
   "shadows": "libcst._nodes.internal.visit_required"
  },
  "type": "import"
 },
 "libcst._nodes.statement.visit_sentinel": {
  "data": {
   "shadows": "libcst._nodes.internal.visit_sentinel"
  },
  "type": "import"
 },
 "libcst._nodes.statement.visit_sequence": {
  "data": {
   "shadows": "libcst._nodes.internal.visit_sequence"
  },
  "type": "import"
 },
 "libcst._nodes.tests": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.base": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.base.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.base.CSTNodeT": {
  "data": {
   "shadows": "libcst._types.CSTNodeT"
  },
  "type": "import"
 },
 "libcst._nodes.tests.base.CSTNodeTest": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.base.CSTNodeTest.__assert_children_match_codegen": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      126
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.base.CSTNodeTest.__assert_children_match_fields": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      206
     ]
    },
    "id": {
     "line number": [
      202,
      208,
      211
     ]
    },
    "isinstance": {
     "line number": [
      207,
      209,
      211
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      195,
      207,
      211
     ]
    },
    "libcst._nodes.tests.base.dataclasses": {
     "line number": [
      203
     ]
    },
    "set": {
     "line number": [
      204
     ]
    },
    "typing.Iterable": {
     "line number": [
      209
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.base.CSTNodeTest.__assert_codegen": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      100
     ]
    },
    "libcst.Module": {
     "line number": [
      107
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      102
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      117
     ]
    },
    "libcst.metadata.position_provider.PositionProvidingCodegenState": {
     "line number": [
      118
     ]
    },
    "str": {
     "line number": [
      101
     ]
    },
    "typing.Optional": {
     "line number": [
      102
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.base.CSTNodeTest.__assert_visit_returns_identity": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      221
     ]
    },
    "libcst._nodes.tests.base._NOOPVisitor": {
     "line number": [
      229
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.base.CSTNodeTest.__derive_children_from_codegen": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": {
    "_get_codegen_override": {
     "line number": [
      188
     ]
    },
    "contextlib.ExitStack": {
     "line number": [
      185
     ]
    },
    "hasattr": {
     "line number": [
      158
     ]
    },
    "isinstance": {
     "line number": [
      156
     ]
    },
    "issubclass": {
     "line number": [
      157
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      139,
      157,
      161,
      162,
      140
     ]
    },
    "libcst.Module": {
     "line number": [
      191
     ]
    },
    "libcst.__dict__.items": {
     "line number": [
      155
     ]
    },
    "libcst._nodes.tests.base._CSTCodegenPatchTarget": {
     "line number": [
      153,
      154
     ]
    },
    "type": {
     "line number": [
      156
     ]
    },
    "typing.Iterable": {
     "line number": [
      153
     ]
    },
    "typing.List": {
     "line number": [
      161,
      162
     ]
    },
    "typing.Sequence": {
     "line number": [
      140
     ]
    },
    "unittest.mock.patch": {
     "line number": [
      188
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.base.CSTNodeTest.__derive_children_from_codegen._get_codegen_override": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": {
    "libcst._nodes.tests.base._CSTCodegenPatchTarget": {
     "line number": [
      165
     ]
    },
    "typing.Callable": {
     "line number": [
      166
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.base.CSTNodeTest.__derive_children_from_codegen._get_codegen_override._codegen_impl": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": {
    "len": {
     "line number": [
      171,
      174
     ]
    },
    "libcst._types.CSTNodeT": {
     "line number": [
      167
     ]
    },
    "typing.Any": {
     "line number": [
      167,
      167
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.base.CSTNodeTest.assert_invalid": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": {
    "get_node": {
     "line number": [
      96
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      93
     ]
    },
    "libcst.CSTValidationError": {
     "line number": [
      95
     ]
    },
    "str": {
     "line number": [
      93
     ]
    },
    "typing.Callable": {
     "line number": [
      93
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.base.CSTNodeTest.assert_parses": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      235
     ]
    },
    "libcst.BaseExpression": {
     "line number": [
      234
     ]
    },
    "libcst.ParserSyntaxError": {
     "line number": [
      238
     ]
    },
    "parser": {
     "line number": [
      239,
      241
     ]
    },
    "str": {
     "line number": [
      233,
      234
     ]
    },
    "typing.Callable": {
     "line number": [
      234
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.base.CSTNodeTest.setUp": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      65
     ]
    },
    "issubclass": {
     "line number": [
      65
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      65
     ]
    },
    "libcst.__dict__.values": {
     "line number": [
      64
     ]
    },
    "libcst._nodes.tests.base._cst_node_equality_func": {
     "line number": [
      66,
      67
     ]
    },
    "type": {
     "line number": [
      65
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.base.CSTNodeTest.validate_node": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      86
     ]
    },
    "libcst._types.CSTNodeT": {
     "line number": [
      71,
      73
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      74
     ]
    },
    "parser": {
     "line number": [
      80
     ]
    },
    "str": {
     "line number": [
      72,
      73
     ]
    },
    "typing.Callable": {
     "line number": [
      73
     ]
    },
    "typing.Optional": {
     "line number": [
      73,
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.base.CSTTransformer": {
  "data": {
   "shadows": "libcst._visitors.CSTTransformer"
  },
  "type": "import"
 },
 "libcst._nodes.tests.base.CSTVisitorT": {
  "data": {
   "shadows": "libcst._visitors.CSTVisitorT"
  },
  "type": "import"
 },
 "libcst._nodes.tests.base.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst._nodes.tests.base.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.base.CodegenState": {
  "data": {
   "shadows": "libcst._nodes.internal.CodegenState"
  },
  "type": "import"
 },
 "libcst._nodes.tests.base.DummyIndentedBlock": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      244
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      245,
      252
     ]
    },
    "str": {
     "line number": [
      251
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.base.DummyIndentedBlock._codegen_impl": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      254
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.base.DummyIndentedBlock._visit_and_replace_children": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_required": {
     "line number": [
      264
     ]
    },
    "libcst._nodes.tests.base.DummyIndentedBlock": {
     "line number": [
      263
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      262
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.base.ExitStack": {
  "data": {
   "shadows": "contextlib.ExitStack"
  },
  "type": "import"
 },
 "libcst._nodes.tests.base.Iterable": {
  "data": {
   "shadows": "typing.Iterable"
  },
  "type": "import"
 },
 "libcst._nodes.tests.base.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst._nodes.tests.base.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._nodes.tests.base.PositionProvider": {
  "data": {
   "shadows": "libcst.metadata.PositionProvider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.base.PositionProvidingCodegenState": {
  "data": {
   "shadows": "libcst.metadata.position_provider.PositionProvidingCodegenState"
  },
  "type": "import"
 },
 "libcst._nodes.tests.base.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst._nodes.tests.base.Type": {
  "data": {
   "shadows": "typing.Type"
  },
  "type": "import"
 },
 "libcst._nodes.tests.base.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.base._CSTCodegenPatchTarget": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      21
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      23
     ]
    },
    "str": {
     "line number": [
      24
     ]
    },
    "type": {
     "line number": [
      23
     ]
    },
    "typing.Callable": {
     "line number": [
      25
     ]
    },
    "typing.Type": {
     "line number": [
      23
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.base._NOOPVisitor": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "libcst._visitors.CSTTransformer": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.base._cst_node_equality_func": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      40
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      33,
      33
     ]
    },
    "str": {
     "line number": [
      33
     ]
    },
    "typing.Optional": {
     "line number": [
      33
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.base.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.base.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst._nodes.tests.base.dataclasses": {
  "data": {
   "shadows": "dataclasses"
  },
  "type": "import"
 },
 "libcst._nodes.tests.base.parse_expression_as": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "libcst.BaseExpression": {
     "line number": [
      43
     ]
    },
    "str": {
     "line number": [
      43
     ]
    },
    "typing.Any": {
     "line number": [
      43
     ]
    },
    "typing.Callable": {
     "line number": [
      43
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.base.parse_expression_as.inner": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": {
    "libcst.BaseExpression": {
     "line number": [
      44
     ]
    },
    "libcst.PartialParserConfig": {
     "line number": [
      45
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      45
     ]
    },
    "str": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.base.parse_statement_as": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "libcst.BaseStatement": {
     "line number": [
      50
     ]
    },
    "str": {
     "line number": [
      50
     ]
    },
    "typing.Any": {
     "line number": [
      50
     ]
    },
    "typing.Callable": {
     "line number": [
      50
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.base.parse_statement_as.inner": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "libcst.BaseStatement": {
     "line number": [
      51
     ]
    },
    "libcst.PartialParserConfig": {
     "line number": [
      52
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      52
     ]
    },
    "str": {
     "line number": [
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.base.patch": {
  "data": {
   "shadows": "unittest.mock.patch"
  },
  "type": "import"
 },
 "libcst._nodes.tests.base.visit_required": {
  "data": {
   "shadows": "libcst._nodes.internal.visit_required"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_assert": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_assert.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_assert.AssertConstructionTest": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_assert.AssertConstructionTest.test_invalid": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": {
    "libcst.Assert": {
     "line number": [
      71,
      81
     ]
    },
    "libcst.Comma": {
     "line number": [
      81
     ]
    },
    "libcst.Name": {
     "line number": [
      72,
      81
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      73
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      66
     ]
    },
    "typing.Any": {
     "line number": [
      87
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_assert.AssertConstructionTest.test_valid": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "libcst.Assert": {
     "line number": [
      22,
      29,
      38,
      48
     ]
    },
    "libcst.Comma": {
     "line number": [
      51
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      39
     ]
    },
    "libcst.Name": {
     "line number": [
      22,
      30,
      39,
      50
     ]
    },
    "libcst.RightParen": {
     "line number": [
      39
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      30,
      55
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      40,
      49,
      52,
      53
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      44,
      59
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      18
     ]
    },
    "typing.Any": {
     "line number": [
      63
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_assert.AssertParsingTest": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      97
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_assert.AssertParsingTest.test_valid": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": {
    "libcst.Assert": {
     "line number": [
      102,
      109,
      120,
      130
     ]
    },
    "libcst.Comma": {
     "line number": [
      112,
      133
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      121
     ]
    },
    "libcst.Name": {
     "line number": [
      102,
      110,
      121,
      132
     ]
    },
    "libcst.RightParen": {
     "line number": [
      121
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      111,
      137
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      112,
      122,
      131,
      134,
      135
     ]
    },
    "libcst._nodes.tests.test_assert._assert_parser": {
     "line number": [
      104,
      115,
      125,
      140
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      98
     ]
    },
    "typing.Any": {
     "line number": [
      145
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_assert.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_assert.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_assert._assert_parser": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": {
    "libcst.Assert": {
     "line number": [
      93,
      91
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      93
     ]
    },
    "libcst.helpers.ensure_type": {
     "line number": [
      92,
      93
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      93
     ]
    },
    "str": {
     "line number": [
      91
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_assert.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_assert.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_assert.ensure_type": {
  "data": {
   "shadows": "libcst.helpers.ensure_type"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_assert.parse_statement": {
  "data": {
   "shadows": "libcst.parse_statement"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_assign": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_assign.AnnAssignTest": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      123
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_assign.AnnAssignTest.test_invalid": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": {
    "libcst.AnnAssign": {
     "line number": [
      273
     ]
    },
    "libcst.Annotation": {
     "line number": [
      275
     ]
    },
    "libcst.AssignEqual": {
     "line number": [
      276
     ]
    },
    "libcst.Name": {
     "line number": [
      274,
      275
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      269
     ]
    },
    "typing.Any": {
     "line number": [
      284
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_assign.AnnAssignTest.test_valid": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": {
    "libcst.AnnAssign": {
     "line number": [
      128,
      137,
      144,
      162,
      181,
      199,
      219,
      242
     ]
    },
    "libcst.Annotation": {
     "line number": [
      129,
      137,
      146,
      164,
      183,
      201,
      221,
      244
     ]
    },
    "libcst.AssignEqual": {
     "line number": [
      168,
      208,
      229,
      252
     ]
    },
    "libcst.Index": {
     "line number": [
      149,
      204,
      224,
      247
     ]
    },
    "libcst.Integer": {
     "line number": [
      129,
      152,
      169,
      209,
      233,
      256
     ]
    },
    "libcst.Name": {
     "line number": [
      129,
      129,
      137,
      137,
      145,
      148,
      149,
      163,
      165,
      182,
      184,
      200,
      203,
      204,
      220,
      223,
      224,
      243,
      246,
      247
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      160,
      179,
      197,
      240
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      166,
      185,
      206,
      226,
      227,
      230,
      231,
      249,
      250,
      253,
      254
     ]
    },
    "libcst.Subscript": {
     "line number": [
      147,
      202,
      222,
      245
     ]
    },
    "libcst.SubscriptElement": {
     "line number": [
      149,
      204,
      224,
      247
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      133,
      140,
      156,
      237
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      174,
      192,
      214,
      261
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      124
     ]
    },
    "typing.Any": {
     "line number": [
      266
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_assign.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_assign.AssignTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_assign.AssignTest.test_invalid": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": {
    "libcst.Assign": {
     "line number": [
      114
     ]
    },
    "libcst.Integer": {
     "line number": [
      114
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      111
     ]
    },
    "typing.Any": {
     "line number": [
      119
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_assign.AssignTest.test_valid": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.Assign": {
     "line number": [
      20,
      29,
      42,
      60,
      73,
      90
     ]
    },
    "libcst.AssignTarget": {
     "line number": [
      21,
      31,
      32,
      44,
      61,
      75,
      76,
      92
     ]
    },
    "libcst.Integer": {
     "line number": [
      21,
      34,
      50,
      61,
      78,
      98
     ]
    },
    "libcst.Name": {
     "line number": [
      21,
      31,
      32,
      45,
      61,
      75,
      76,
      93
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      58,
      71,
      88
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      46,
      47,
      94,
      95
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      25,
      38,
      54
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      66,
      83,
      103
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "typing.Any": {
     "line number": [
      108
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_assign.AugAssignTest": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      288
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_assign.AugAssignTest.test_valid": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": {
    "libcst.AddAssign": {
     "line number": [
      294,
      325
     ]
    },
    "libcst.AugAssign": {
     "line number": [
      293,
      301,
      310,
      325,
      334,
      347
     ]
    },
    "libcst.Integer": {
     "line number": [
      294,
      316,
      325,
      353
     ]
    },
    "libcst.LeftShiftAssign": {
     "line number": [
      312,
      349
     ]
    },
    "libcst.MultiplyAssign": {
     "line number": [
      302,
      335
     ]
    },
    "libcst.Name": {
     "line number": [
      294,
      302,
      302,
      311,
      325,
      335,
      335,
      348
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      324,
      332,
      345
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      313,
      314,
      350,
      351
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      298,
      320
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      328,
      340,
      358
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      289
     ]
    },
    "typing.Any": {
     "line number": [
      363
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_assign.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_assign.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_assign.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_assign.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_assign.parse_statement": {
  "data": {
   "shadows": "libcst.parse_statement"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_atom": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_atom.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_atom.AtomTest": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_atom.AtomTest.test_invalid": {
  "data": {
   "lineno": 747,
   "symbols_in_volume": {
    "libcst.Comparison": {
     "line number": [
      991,
      1006
     ]
    },
    "libcst.ComparisonTarget": {
     "line number": [
      994,
      1009
     ]
    },
    "libcst.ConcatenatedString": {
     "line number": [
      824,
      834,
      960,
      971,
      982,
      1011
     ]
    },
    "libcst.Ellipsis": {
     "line number": [
      759,
      763
     ]
    },
    "libcst.Float": {
     "line number": [
      775,
      779,
      888,
      891,
      893
     ]
    },
    "libcst.FormattedString": {
     "line number": [
      812,
      818,
      949,
      954
     ]
    },
    "libcst.Imaginary": {
     "line number": [
      783,
      787,
      897,
      901,
      905,
      909
     ]
    },
    "libcst.In": {
     "line number": [
      995,
      1010
     ]
    },
    "libcst.Integer": {
     "line number": [
      767,
      771,
      791,
      795,
      852,
      856,
      860,
      864,
      868,
      872,
      876,
      880,
      884
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      751,
      759,
      767,
      775,
      783,
      791,
      800,
      812,
      827,
      962,
      974
     ]
    },
    "libcst.Name": {
     "line number": [
      751,
      755,
      844,
      848
     ]
    },
    "libcst.RightParen": {
     "line number": [
      755,
      763,
      771,
      779,
      787,
      795,
      806,
      818,
      837,
      962,
      974
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      800,
      806,
      825,
      826,
      835,
      836,
      913,
      917,
      921,
      925,
      929,
      933,
      937,
      941,
      945,
      961,
      964,
      972,
      973,
      983,
      983,
      992,
      996,
      1007,
      1012,
      1012
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      995,
      1010
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      747
     ]
    },
    "typing.Any": {
     "line number": [
      1022
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_atom.AtomTest.test_valid": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "libcst.AssignEqual": {
     "line number": [
      540,
      556,
      573
     ]
    },
    "libcst.Call": {
     "line number": [
      444
     ]
    },
    "libcst.Comparison": {
     "line number": [
      313,
      329,
      348,
      368,
      593,
      613
     ]
    },
    "libcst.ComparisonTarget": {
     "line number": [
      316,
      332,
      351,
      371,
      596,
      616
     ]
    },
    "libcst.ConcatenatedString": {
     "line number": [
      337,
      376,
      661,
      669,
      671,
      681,
      690,
      700,
      712
     ]
    },
    "libcst.Ellipsis": {
     "line number": [
      245,
      252
     ]
    },
    "libcst.Equal": {
     "line number": [
      597
     ]
    },
    "libcst.Float": {
     "line number": [
      116,
      122,
      128,
      134,
      140,
      146,
      153,
      159,
      165,
      171,
      177,
      183,
      189,
      195,
      202
     ]
    },
    "libcst.FormattedString": {
     "line number": [
      390,
      396,
      402,
      408,
      415,
      421,
      429,
      441,
      454,
      464,
      474,
      487,
      502,
      519,
      536,
      552,
      569,
      590,
      610,
      630,
      648,
      682,
      692
     ]
    },
    "libcst.FormattedStringExpression": {
     "line number": [
      422,
      432,
      444,
      456,
      466,
      476,
      489,
      492,
      504,
      507,
      509,
      521,
      525,
      538,
      554,
      571,
      579,
      592,
      612,
      632
     ]
    },
    "libcst.FormattedStringText": {
     "line number": [
      415,
      431,
      433,
      443,
      445,
      478,
      508,
      682,
      692
     ]
    },
    "libcst.Imaginary": {
     "line number": [
      211,
      217,
      223,
      229,
      236
     ]
    },
    "libcst.In": {
     "line number": [
      317,
      333,
      352,
      372
     ]
    },
    "libcst.Integer": {
     "line number": [
      43,
      49,
      55,
      61,
      68,
      74,
      81,
      87,
      94,
      100,
      107,
      635
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      35,
      108,
      203,
      237,
      252,
      297,
      305,
      358,
      379,
      636,
      652,
      701,
      713
     ]
    },
    "libcst.Name": {
     "line number": [
      27,
      34,
      422,
      432,
      444,
      456,
      466,
      477,
      490,
      492,
      505,
      507,
      509,
      522,
      525,
      539,
      555,
      572,
      579,
      594,
      598,
      614,
      618,
      634
     ]
    },
    "libcst.NamedExpr": {
     "line number": [
      633
     ]
    },
    "libcst.NotEqual": {
     "line number": [
      617
     ]
    },
    "libcst.RightParen": {
     "line number": [
      35,
      108,
      203,
      237,
      252,
      297,
      305,
      359,
      380,
      637,
      653,
      704,
      717
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      259,
      265,
      271,
      277,
      283,
      289,
      296,
      304,
      314,
      321,
      330,
      338,
      338,
      349,
      356,
      369,
      377,
      378,
      662,
      662,
      670,
      672,
      672,
      683,
      691,
      702,
      703,
      714,
      716
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      318,
      319,
      334,
      335,
      353,
      354,
      373,
      374,
      541,
      542,
      557,
      558,
      574,
      575,
      713,
      715,
      717
     ]
    },
    "libcst._nodes.tests.test_atom._parse_expression_force_38": {
     "line number": [
      548,
      565,
      585,
      606,
      626,
      643
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      39,
      112,
      207,
      241,
      255,
      309,
      657,
      721
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      29,
      38,
      45,
      51,
      57,
      63,
      70,
      76,
      83,
      89,
      96,
      102,
      111,
      118,
      124,
      130,
      136,
      142,
      148,
      155,
      161,
      167,
      173,
      179,
      185,
      191,
      197,
      206,
      213,
      219,
      225,
      231,
      240,
      247,
      254,
      261,
      267,
      273,
      279,
      285,
      291,
      300,
      308,
      326,
      344,
      365,
      386,
      392,
      398,
      404,
      410,
      417,
      425,
      437,
      449,
      460,
      470,
      483,
      498,
      515,
      531,
      656,
      665,
      676,
      686,
      695,
      707,
      720
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      23
     ]
    },
    "typing.Any": {
     "line number": [
      725
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_atom.AtomTest.test_valid_no_parse": {
  "data": {
   "lineno": 730,
   "symbols_in_volume": {
    "libcst.FormattedStringExpression": {
     "line number": [
      733
     ]
    },
    "libcst.FormattedStringText": {
     "line number": [
      735
     ]
    },
    "libcst.Name": {
     "line number": [
      734
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      739
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      730
     ]
    },
    "typing.Any": {
     "line number": [
      743
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_atom.AtomTest.test_versions": {
  "data": {
   "lineno": 1025,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.parse_expression_as": {
     "line number": [
      1029,
      1034
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      1025
     ]
    },
    "typing.Any": {
     "line number": [
      1039
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_atom.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_atom.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_atom.StringHelperTest": {
  "data": {
   "lineno": 1043,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      1043
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_atom.StringHelperTest.test_string_prefix_and_quotes": {
  "data": {
   "lineno": 1044,
   "symbols_in_volume": {
    "libcst.FormattedString": {
     "line number": [
      1051
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      1048,
      1049,
      1050
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      1048,
      1049,
      1050,
      1051
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      1048,
      1049,
      1050,
      1051
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_atom._parse_expression_force_38": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.BaseExpression": {
     "line number": [
      16
     ]
    },
    "libcst.PartialParserConfig": {
     "line number": [
      18
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      17
     ]
    },
    "str": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_atom.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_atom.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_atom.parse_expression": {
  "data": {
   "shadows": "libcst.parse_expression"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_atom.parse_expression_as": {
  "data": {
   "shadows": "libcst._nodes.tests.base.parse_expression_as"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_attribute": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_attribute.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_attribute.AttributeTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_attribute.AttributeTest.test_invalid": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "libcst.Attribute": {
     "line number": [
      62,
      70
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      63
     ]
    },
    "libcst.Name": {
     "line number": [
      63,
      63,
      71,
      71
     ]
    },
    "libcst.RightParen": {
     "line number": [
      71
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      58
     ]
    },
    "typing.Any": {
     "line number": [
      78
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_attribute.AttributeTest.test_valid": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.Attribute": {
     "line number": [
      20,
      27,
      39
     ]
    },
    "libcst.Dot": {
     "line number": [
      42
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      28,
      40
     ]
    },
    "libcst.Name": {
     "line number": [
      20,
      20,
      29,
      30,
      41,
      46
     ]
    },
    "libcst.RightParen": {
     "line number": [
      31,
      47
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      40,
      43,
      44,
      47
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      23,
      35,
      51
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      22,
      34,
      50
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "typing.Any": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_attribute.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_attribute.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_attribute.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_attribute.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_attribute.parse_expression": {
  "data": {
   "shadows": "libcst.parse_expression"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_await": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_await.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_await.AwaitTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_await.AwaitTest.test_invalid": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": {
    "libcst.Await": {
     "line number": [
      152,
      158,
      164
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      152
     ]
    },
    "libcst.Name": {
     "line number": [
      152,
      158,
      165
     ]
    },
    "libcst.RightParen": {
     "line number": [
      158
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      165
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      147
     ]
    },
    "typing.Any": {
     "line number": [
      172
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_await.AwaitTest.test_valid_py36": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "libcst.Asynchronous": {
     "line number": [
      70,
      89,
      132
     ]
    },
    "libcst.Await": {
     "line number": [
      66,
      85,
      107
     ]
    },
    "libcst.Call": {
     "line number": [
      85
     ]
    },
    "libcst.Expr": {
     "line number": [
      66,
      85,
      106
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      60,
      79,
      99
     ]
    },
    "libcst.IndentedBlock": {
     "line number": [
      63,
      82,
      102
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      113
     ]
    },
    "libcst.Name": {
     "line number": [
      61,
      66,
      80,
      85,
      100,
      108
     ]
    },
    "libcst.Parameters": {
     "line number": [
      62,
      81,
      101
     ]
    },
    "libcst.PartialParserConfig": {
     "line number": [
      74,
      93,
      136
     ]
    },
    "libcst.RightParen": {
     "line number": [
      120
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      65,
      84,
      104
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      109,
      114,
      121
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      73,
      92,
      135
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      56
     ]
    },
    "typing.Any": {
     "line number": [
      142
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_await.AwaitTest.test_valid_py37": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.Await": {
     "line number": [
      20,
      28,
      37
     ]
    },
    "libcst.Call": {
     "line number": [
      28
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      40
     ]
    },
    "libcst.Name": {
     "line number": [
      20,
      28,
      38
     ]
    },
    "libcst.PartialParserConfig": {
     "line number": [
      23,
      31,
      45
     ]
    },
    "libcst.RightParen": {
     "line number": [
      41
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      39,
      40,
      41
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      47
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      22,
      30,
      44
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "typing.Any": {
     "line number": [
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_await.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_await.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_await.PartialParserConfig": {
  "data": {
   "shadows": "libcst.PartialParserConfig"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_await.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_await.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_await.parse_expression": {
  "data": {
   "shadows": "libcst.parse_expression"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_await.parse_statement": {
  "data": {
   "shadows": "libcst.parse_statement"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_binary_op": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_binary_op.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_binary_op.BinaryOperationTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_binary_op.BinaryOperationTest.test_invalid": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": {
    "libcst.Add": {
     "line number": [
      155,
      166
     ]
    },
    "libcst.BinaryOperation": {
     "line number": [
      153,
      164
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      157
     ]
    },
    "libcst.Name": {
     "line number": [
      154,
      156,
      165,
      167
     ]
    },
    "libcst.RightParen": {
     "line number": [
      168
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      149
     ]
    },
    "typing.Any": {
     "line number": [
      175
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_binary_op.BinaryOperationTest.test_valid": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.Add": {
     "line number": [
      21
     ]
    },
    "libcst.BinaryOperation": {
     "line number": [
      20,
      28,
      36,
      44,
      52,
      60,
      68,
      76,
      84,
      92,
      100,
      108,
      117,
      130
     ]
    },
    "libcst.BitAnd": {
     "line number": [
      53
     ]
    },
    "libcst.BitOr": {
     "line number": [
      69
     ]
    },
    "libcst.BitXor": {
     "line number": [
      61
     ]
    },
    "libcst.Divide": {
     "line number": [
      93
     ]
    },
    "libcst.Float": {
     "line number": [
      21,
      29,
      77,
      85,
      93,
      101,
      109
     ]
    },
    "libcst.FloorDivide": {
     "line number": [
      109
     ]
    },
    "libcst.Integer": {
     "line number": [
      37,
      45,
      121
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      118,
      131
     ]
    },
    "libcst.LeftShift": {
     "line number": [
      37,
      120
     ]
    },
    "libcst.MatrixMultiply": {
     "line number": [
      85
     ]
    },
    "libcst.Modulo": {
     "line number": [
      101
     ]
    },
    "libcst.Multiply": {
     "line number": [
      77,
      133
     ]
    },
    "libcst.Name": {
     "line number": [
      21,
      29,
      37,
      45,
      53,
      53,
      61,
      61,
      69,
      69,
      77,
      85,
      93,
      101,
      109,
      119,
      132,
      137
     ]
    },
    "libcst.RightParen": {
     "line number": [
      122,
      138
     ]
    },
    "libcst.RightShift": {
     "line number": [
      45
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      131,
      134,
      135,
      138
     ]
    },
    "libcst.Subtract": {
     "line number": [
      29
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      142
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      24,
      32,
      40,
      48,
      56,
      64,
      72,
      80,
      88,
      96,
      104,
      112,
      125,
      141
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "typing.Any": {
     "line number": [
      146
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_binary_op.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_binary_op.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_binary_op.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_binary_op.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_binary_op.parse_expression": {
  "data": {
   "shadows": "libcst.parse_expression"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_boolean_op": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_boolean_op.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_boolean_op.BooleanOperationTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_boolean_op.BooleanOperationTest.test_invalid": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "libcst.And": {
     "line number": [
      90,
      97
     ]
    },
    "libcst.BooleanOperation": {
     "line number": [
      89,
      95,
      104
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      90
     ]
    },
    "libcst.Name": {
     "line number": [
      90,
      90,
      96,
      98,
      105,
      110
     ]
    },
    "libcst.Or": {
     "line number": [
      106
     ]
    },
    "libcst.RightParen": {
     "line number": [
      99
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      107,
      108
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      86
     ]
    },
    "typing.Any": {
     "line number": [
      116
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_boolean_op.BooleanOperationTest.test_valid": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.And": {
     "line number": [
      21,
      70
     ]
    },
    "libcst.BooleanOperation": {
     "line number": [
      20,
      28,
      37,
      49,
      67
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      38,
      51,
      58,
      68
     ]
    },
    "libcst.Name": {
     "line number": [
      21,
      21,
      29,
      29,
      39,
      41,
      50,
      57,
      69,
      74
     ]
    },
    "libcst.Or": {
     "line number": [
      29,
      40,
      53
     ]
    },
    "libcst.RightParen": {
     "line number": [
      42,
      51,
      58,
      75
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      54,
      55,
      68,
      71,
      72,
      75
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      63
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      24,
      32,
      45,
      62,
      78
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "typing.Any": {
     "line number": [
      83
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_boolean_op.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_boolean_op.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_boolean_op.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_boolean_op.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_boolean_op.parse_expression": {
  "data": {
   "shadows": "libcst.parse_expression"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_call": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_call.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_call.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_call.CallTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_call.CallTest.test_invalid": {
  "data": {
   "lineno": 460,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      480,
      492,
      507,
      516,
      517,
      526,
      527,
      536,
      539
     ]
    },
    "libcst.AssignEqual": {
     "line number": [
      481
     ]
    },
    "libcst.Call": {
     "line number": [
      464,
      470,
      477,
      489,
      503,
      513,
      523,
      533
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      465
     ]
    },
    "libcst.Name": {
     "line number": [
      465,
      471,
      478,
      490,
      494,
      504,
      514,
      516,
      517,
      524,
      526,
      527,
      534,
      537
     ]
    },
    "libcst.RightParen": {
     "line number": [
      471
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      481,
      495,
      507,
      537,
      539
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      460
     ]
    },
    "typing.Any": {
     "line number": [
      546
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_call.CallTest.test_valid": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      42,
      51,
      52,
      53,
      62,
      71,
      87,
      103,
      107,
      111,
      122,
      132,
      133,
      134,
      146,
      161,
      167,
      173,
      187,
      197,
      198,
      199,
      209,
      219,
      224,
      229,
      239,
      249,
      250,
      251,
      261,
      271,
      276,
      281,
      293,
      294,
      295,
      296,
      297,
      298,
      299,
      300,
      301,
      302,
      303,
      304,
      305,
      306,
      307,
      319,
      323,
      328,
      332,
      336,
      341,
      345,
      350,
      356,
      361,
      367,
      372,
      378,
      383,
      389,
      404,
      412,
      419,
      428,
      444
     ]
    },
    "libcst.AssignEqual": {
     "line number": [
      148,
      163,
      169,
      175,
      352,
      363,
      374,
      385,
      421
     ]
    },
    "libcst.Attribute": {
     "line number": [
      35
     ]
    },
    "libcst.Call": {
     "line number": [
      20,
      26,
      35,
      42,
      48,
      62,
      68,
      84,
      100,
      120,
      129,
      143,
      158,
      186,
      194,
      208,
      216,
      238,
      246,
      260,
      268,
      290,
      316,
      398
     ]
    },
    "libcst.Comma": {
     "line number": [
      89,
      105,
      109,
      165,
      171,
      222,
      227,
      274,
      279,
      321,
      326,
      330,
      334,
      339,
      343,
      348,
      354,
      359,
      365,
      370,
      376,
      381,
      387,
      407,
      417,
      426,
      449
     ]
    },
    "libcst.Integer": {
     "line number": [
      42,
      51,
      52,
      53,
      62,
      72,
      88,
      104,
      108,
      111,
      122,
      132,
      133,
      134,
      149,
      164,
      170,
      176,
      300,
      302,
      304,
      306,
      353,
      364,
      375,
      386,
      425
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      399
     ]
    },
    "libcst.Name": {
     "line number": [
      20,
      27,
      35,
      35,
      42,
      49,
      62,
      69,
      85,
      101,
      121,
      122,
      130,
      132,
      133,
      134,
      144,
      147,
      159,
      162,
      168,
      174,
      187,
      187,
      195,
      197,
      198,
      199,
      209,
      209,
      217,
      221,
      226,
      229,
      239,
      239,
      247,
      249,
      250,
      251,
      261,
      261,
      269,
      273,
      278,
      281,
      291,
      293,
      294,
      295,
      296,
      297,
      298,
      299,
      300,
      301,
      302,
      303,
      304,
      305,
      306,
      307,
      317,
      320,
      325,
      329,
      333,
      338,
      342,
      347,
      351,
      358,
      362,
      369,
      373,
      380,
      384,
      389,
      400,
      406,
      416,
      420,
      432,
      448
     ]
    },
    "libcst.RightParen": {
     "line number": [
      436
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      27,
      73,
      76,
      77,
      89,
      92,
      93,
      105,
      109,
      165,
      171,
      222,
      227,
      274,
      279,
      321,
      326,
      330,
      334,
      339,
      343,
      348,
      354,
      359,
      365,
      370,
      376,
      381,
      387,
      399,
      401,
      402,
      408,
      409,
      414,
      417,
      422,
      423,
      426,
      431,
      433,
      436,
      446,
      449
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      440,
      453
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      22,
      30,
      37,
      64,
      80,
      96,
      115,
      154,
      181,
      212,
      233,
      264,
      285,
      393,
      439
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "typing.Any": {
     "line number": [
      457
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_call.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_call.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_call.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_call.parse_expression": {
  "data": {
   "shadows": "libcst.parse_expression"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_classdef": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_classdef.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_classdef.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_classdef.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_classdef.ClassDefCreationTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_classdef.ClassDefCreationTest.test_invalid": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      146
     ]
    },
    "libcst.ClassDef": {
     "line number": [
      119,
      127,
      136
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      122
     ]
    },
    "libcst.Name": {
     "line number": [
      120,
      128,
      137
     ]
    },
    "libcst.Pass": {
     "line number": [
      121,
      129,
      138
     ]
    },
    "libcst.RightParen": {
     "line number": [
      130
     ]
    },
    "libcst.SimpleStatementSuite": {
     "line number": [
      121,
      129,
      138
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      139
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      115
     ]
    },
    "str": {
     "line number": [
      146
     ]
    },
    "typing.Callable": {
     "line number": [
      146
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_classdef.ClassDefCreationTest.test_valid": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      40,
      49,
      50,
      51,
      62,
      73,
      82,
      83,
      84,
      94,
      103,
      104,
      105
     ]
    },
    "libcst.ClassDef": {
     "line number": [
      20,
      27,
      37,
      45,
      58,
      70,
      78,
      91,
      99
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      30
     ]
    },
    "libcst.Name": {
     "line number": [
      21,
      28,
      38,
      40,
      46,
      49,
      50,
      51,
      59,
      62,
      62,
      71,
      73,
      79,
      82,
      83,
      84,
      92,
      94,
      100,
      103,
      104,
      105
     ]
    },
    "libcst.Pass": {
     "line number": [
      21,
      29,
      39,
      47,
      60,
      72,
      80,
      93,
      101
     ]
    },
    "libcst.RightParen": {
     "line number": [
      31
     ]
    },
    "libcst.SimpleStatementSuite": {
     "line number": [
      21,
      29,
      39,
      47,
      60,
      72,
      80,
      93,
      101
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      24,
      66
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "typing.Any": {
     "line number": [
      112
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_classdef.ClassDefParserTest": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      151
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_classdef.ClassDefParserTest.test_valid": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      176,
      187,
      191,
      195,
      208,
      224,
      235,
      240,
      245,
      257,
      268,
      273,
      278
     ]
    },
    "libcst.AssignEqual": {
     "line number": [
      210
     ]
    },
    "libcst.ClassDef": {
     "line number": [
      156,
      162,
      172,
      182,
      203,
      220,
      230,
      253,
      263,
      286,
      297
     ]
    },
    "libcst.Comma": {
     "line number": [
      189,
      193,
      238,
      243,
      271,
      276
     ]
    },
    "libcst.Comment": {
     "line number": [
      300,
      308,
      316,
      322
     ]
    },
    "libcst.Decorator": {
     "line number": [
      289,
      303,
      304,
      312
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      299,
      300,
      307,
      315,
      322
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      165,
      175,
      185,
      206,
      223,
      233,
      256,
      266,
      290,
      326
     ]
    },
    "libcst.Name": {
     "line number": [
      157,
      163,
      173,
      176,
      183,
      188,
      192,
      195,
      204,
      209,
      211,
      221,
      224,
      231,
      237,
      242,
      245,
      254,
      257,
      264,
      270,
      275,
      278,
      287,
      289,
      303,
      305,
      313,
      324
     ]
    },
    "libcst.Pass": {
     "line number": [
      157,
      164,
      174,
      184,
      205,
      222,
      232,
      255,
      265,
      288,
      325
     ]
    },
    "libcst.RightParen": {
     "line number": [
      166,
      177,
      197,
      214,
      225,
      247,
      258,
      280,
      291,
      327
     ]
    },
    "libcst.SimpleStatementSuite": {
     "line number": [
      157,
      164,
      174,
      184,
      205,
      222,
      232,
      255,
      265,
      288,
      325
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      189,
      193,
      238,
      243,
      271,
      276
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      294,
      330
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      335
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      152
     ]
    },
    "typing.Any": {
     "line number": [
      334
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_classdef.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_classdef.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_classdef.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_classdef.parse_statement": {
  "data": {
   "shadows": "libcst.parse_statement"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_comment": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_comment.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_comment.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_comment.CommentTest": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_comment.CommentTest.test_invalid": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      32
     ]
    },
    "libcst.Comment": {
     "line number": [
      26,
      27,
      28
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      24
     ]
    },
    "str": {
     "line number": [
      32
     ]
    },
    "typing.Callable": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_comment.CommentTest.test_valid": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      21
     ]
    },
    "libcst.Comment": {
     "line number": [
      16,
      17,
      18
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      14
     ]
    },
    "str": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_comment.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_comment.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_comparison": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_comparison.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_comparison.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_comparison.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_comparison.ComparisonTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_comparison.ComparisonTest.test_invalid": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      351
     ]
    },
    "libcst.Comparison": {
     "line number": [
      235,
      243,
      251,
      255,
      269,
      284,
      299,
      318,
      335
     ]
    },
    "libcst.ComparisonTarget": {
     "line number": [
      237,
      245,
      258,
      272,
      287,
      290,
      302,
      305,
      321,
      338
     ]
    },
    "libcst.GreaterThan": {
     "line number": [
      322,
      339
     ]
    },
    "libcst.IfExp": {
     "line number": [
      316,
      333
     ]
    },
    "libcst.Integer": {
     "line number": [
      237,
      245
     ]
    },
    "libcst.Is": {
     "line number": [
      288,
      291,
      303,
      306
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      238
     ]
    },
    "libcst.LessThan": {
     "line number": [
      237,
      245
     ]
    },
    "libcst.Name": {
     "line number": [
      236,
      244,
      251,
      256,
      262,
      270,
      276,
      285,
      288,
      292,
      300,
      303,
      307,
      317,
      319,
      322,
      326,
      334,
      336,
      339,
      343
     ]
    },
    "libcst.NotIn": {
     "line number": [
      259,
      273
     ]
    },
    "libcst.RightParen": {
     "line number": [
      246
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      260,
      274,
      291,
      306,
      327,
      344
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      232
     ]
    },
    "str": {
     "line number": [
      351
     ]
    },
    "typing.Callable": {
     "line number": [
      351
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_comparison.ComparisonTest.test_valid": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      228
     ]
    },
    "libcst.Comparison": {
     "line number": [
      20,
      27,
      34,
      40,
      47,
      53,
      61,
      74,
      103,
      118,
      137,
      142,
      159,
      176,
      189,
      209
     ]
    },
    "libcst.ComparisonTarget": {
     "line number": [
      22,
      29,
      35,
      42,
      48,
      55,
      65,
      79,
      88,
      106,
      122,
      140,
      146,
      162,
      165,
      179,
      194,
      212
     ]
    },
    "libcst.Equal": {
     "line number": [
      141
     ]
    },
    "libcst.GreaterThan": {
     "line number": [
      163,
      166,
      180,
      195,
      213
     ]
    },
    "libcst.IfExp": {
     "line number": [
      175,
      207
     ]
    },
    "libcst.In": {
     "line number": [
      48
     ]
    },
    "libcst.Integer": {
     "line number": [
      22,
      29,
      104
     ]
    },
    "libcst.Is": {
     "line number": [
      35,
      80,
      89
     ]
    },
    "libcst.IsNot": {
     "line number": [
      42
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      62,
      76,
      85,
      94,
      119,
      143,
      183,
      191,
      216
     ]
    },
    "libcst.LessThan": {
     "line number": [
      22
     ]
    },
    "libcst.Name": {
     "line number": [
      21,
      28,
      35,
      35,
      41,
      42,
      48,
      48,
      54,
      55,
      63,
      66,
      75,
      84,
      93,
      110,
      120,
      128,
      138,
      144,
      147,
      160,
      163,
      166,
      177,
      181,
      190,
      195,
      199,
      208,
      210,
      213,
      219
     ]
    },
    "libcst.NotEqual": {
     "line number": [
      29
     ]
    },
    "libcst.NotIn": {
     "line number": [
      55,
      66,
      107,
      123,
      147
     ]
    },
    "libcst.RightParen": {
     "line number": [
      69,
      76,
      85,
      94,
      131,
      150,
      184,
      191,
      217
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      81,
      82,
      90,
      91,
      108,
      119,
      124,
      125,
      126,
      131,
      200,
      201,
      220,
      221
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      228,
      156,
      171
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      230
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "str": {
     "line number": [
      228
     ]
    },
    "typing.Optional": {
     "line number": [
      228
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_comparison.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_comparison.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_comparison.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_comparison.parse_expression": {
  "data": {
   "shadows": "libcst.parse_expression"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_cst_node": {
  "data": {
   "symbols_in_volume": {
    "libcst.SimpleWhitespace": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._nodes.tests.test_cst_node.CSTNodeT": {
  "data": {
   "shadows": "libcst._types.CSTNodeT"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_cst_node.CSTNodeTest": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      56
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_cst_node.CSTNodeTest.test_deep_equals_fails": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      120,
      120
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      111,
      112
     ]
    },
    "libcst.Pass": {
     "line number": [
      115,
      116
     ]
    },
    "libcst.Semicolon": {
     "line number": [
      115,
      116
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      115,
      116
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      109,
      109,
      111,
      112
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      107
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_cst_node.CSTNodeTest.test_deep_equals_success": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      104,
      104
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      95,
      96
     ]
    },
    "libcst.Pass": {
     "line number": [
      99,
      100
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      99,
      100
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      92,
      92,
      95,
      96
     ]
    },
    "libcst._nodes.tests.test_cst_node._EMPTY_SIMPLE_WHITESPACE": {
     "line number": [
      93,
      93
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      90
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_cst_node.CSTNodeTest.test_default_eq": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": {
    "libcst.SimpleWhitespace": {
     "line number": [
      75,
      76
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_cst_node.CSTNodeTest.test_hash": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": {
    "hash": {
     "line number": [
      86,
      86,
      87,
      87,
      88,
      88
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      84,
      85
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_cst_node.CSTNodeTest.test_repr": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": {
    "libcst.Comment": {
     "line number": [
      145
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      130,
      136
     ]
    },
    "libcst.Newline": {
     "line number": [
      134,
      140,
      146
     ]
    },
    "libcst.Pass": {
     "line number": [
      127
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      126
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      132,
      138,
      144
     ]
    },
    "libcst.TrailingWhitespace": {
     "line number": [
      143
     ]
    },
    "repr": {
     "line number": [
      125
     ]
    },
    "textwrap.dedent": {
     "line number": [
      150
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_cst_node.CSTNodeTest.test_visit": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      197
     ]
    },
    "libcst.Pass": {
     "line number": [
      197
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      197
     ]
    },
    "libcst._nodes.tests.test_cst_node._TestVisitor": {
     "line number": [
      198
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_cst_node.CSTNodeTest.test_with_changes": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "libcst.Comment": {
     "line number": [
      60,
      63
     ]
    },
    "libcst.Newline": {
     "line number": [
      61
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      59
     ]
    },
    "libcst.TrailingWhitespace": {
     "line number": [
      58
     ]
    },
    "libcst.testing.utils.none_throws": {
     "line number": [
      66,
      72
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_cst_node.CSTTransformer": {
  "data": {
   "shadows": "libcst._visitors.CSTTransformer"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_cst_node.RemovalSentinel": {
  "data": {
   "shadows": "libcst._removal_sentinel.RemovalSentinel"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_cst_node.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_cst_node.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_cst_node._EMPTY_SIMPLE_WHITESPACE": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "libcst._nodes.tests.test_cst_node._TestVisitor": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "libcst._visitors.CSTTransformer": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_cst_node._TestVisitor.__init__": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      20
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_cst_node._TestVisitor.assert_counter": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "int": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_cst_node._TestVisitor.on_leave": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      45,
      47,
      49,
      51
     ]
    },
    "libcst.Module": {
     "line number": [
      51
     ]
    },
    "libcst.Newline": {
     "line number": [
      47
     ]
    },
    "libcst.Pass": {
     "line number": [
      45
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      49
     ]
    },
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      41
     ]
    },
    "libcst._types.CSTNodeT": {
     "line number": [
      40,
      40,
      41
     ]
    },
    "typing.Union": {
     "line number": [
      41
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_cst_node._TestVisitor.on_visit": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      28
     ]
    },
    "isinstance": {
     "line number": [
      29,
      31,
      33,
      35
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      28
     ]
    },
    "libcst.Module": {
     "line number": [
      29
     ]
    },
    "libcst.Newline": {
     "line number": [
      35
     ]
    },
    "libcst.Pass": {
     "line number": [
      33
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      31
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_cst_node.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_cst_node.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_cst_node.dedent": {
  "data": {
   "shadows": "textwrap.dedent"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_cst_node.none_throws": {
  "data": {
   "shadows": "libcst.testing.utils.none_throws"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_del": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_del.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_del.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_del.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_del.DelTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_del.DelTest.test_invalid": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": {
    "libcst.Del": {
     "line number": [
      68
     ]
    },
    "libcst.Name": {
     "line number": [
      69
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      69
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      65
     ]
    },
    "typing.Any": {
     "line number": [
      75
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_del.DelTest.test_valid": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.Del": {
     "line number": [
      19,
      27,
      40,
      54
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      42
     ]
    },
    "libcst.Name": {
     "line number": [
      19,
      28,
      41,
      54
     ]
    },
    "libcst.RightParen": {
     "line number": [
      42
     ]
    },
    "libcst.Semicolon": {
     "line number": [
      54
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      19,
      25,
      38,
      53
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      29,
      44
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      22,
      35,
      50,
      58
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      21,
      34,
      49,
      57
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "typing.Any": {
     "line number": [
      62
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_del.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_del.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_del.parse_statement": {
  "data": {
   "shadows": "libcst.parse_statement"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_dict": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_dict.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_dict.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_dict.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_dict.DictTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_dict.DictTest.test_invalid": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": {
    "libcst.Dict": {
     "line number": [
      167
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      167
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      163
     ]
    },
    "typing.Any": {
     "line number": [
      172
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_dict.DictTest.test_valid": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.Comma": {
     "line number": [
      91,
      100,
      127
     ]
    },
    "libcst.CompFor": {
     "line number": [
      143
     ]
    },
    "libcst.CompIf": {
     "line number": [
      147
     ]
    },
    "libcst.Dict": {
     "line number": [
      20,
      27,
      33,
      40,
      52,
      67,
      78,
      90,
      99,
      108,
      124,
      145
     ]
    },
    "libcst.DictElement": {
     "line number": [
      27,
      42,
      43,
      53,
      68,
      91,
      110,
      126,
      145
     ]
    },
    "libcst.GeneratorExp": {
     "line number": [
      141
     ]
    },
    "libcst.LeftCurlyBrace": {
     "line number": [
      54
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      69
     ]
    },
    "libcst.Name": {
     "line number": [
      27,
      27,
      33,
      42,
      42,
      43,
      43,
      53,
      53,
      68,
      68,
      80,
      81,
      91,
      91,
      100,
      111,
      112,
      127,
      127,
      130,
      142,
      144,
      145,
      145,
      148
     ]
    },
    "libcst.RightCurlyBrace": {
     "line number": [
      57
     ]
    },
    "libcst.RightParen": {
     "line number": [
      70
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      55,
      58,
      113,
      114,
      131,
      149,
      152
     ]
    },
    "libcst.StarredDictElement": {
     "line number": [
      33,
      80,
      81,
      100,
      129
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      23,
      30,
      36,
      48,
      63,
      74,
      86,
      95,
      104,
      120,
      137
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      22,
      29,
      35,
      62,
      73,
      94,
      103,
      119,
      136,
      155
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "typing.Any": {
     "line number": [
      160
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_dict.DictTest.test_versions": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.parse_expression_as": {
     "line number": [
      179,
      184
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      175
     ]
    },
    "typing.Any": {
     "line number": [
      189
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_dict.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_dict.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_dict.parse_expression": {
  "data": {
   "shadows": "libcst.parse_expression"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_dict.parse_expression_as": {
  "data": {
   "shadows": "libcst._nodes.tests.base.parse_expression_as"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_dict_comp": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_dict_comp.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_dict_comp.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_dict_comp.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_dict_comp.DictCompTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_dict_comp.DictCompTest.test_invalid": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": {
    "libcst.Asynchronous": {
     "line number": [
      149
     ]
    },
    "libcst.CompFor": {
     "line number": [
      124,
      134,
      146
     ]
    },
    "libcst.DictComp": {
     "line number": [
      121,
      131,
      143
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      125
     ]
    },
    "libcst.Name": {
     "line number": [
      122,
      123,
      124,
      124,
      132,
      133,
      135,
      136,
      144,
      145,
      147,
      148
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      137,
      150
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      117
     ]
    },
    "typing.Any": {
     "line number": [
      157
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_dict_comp.DictCompTest.test_valid": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.CompFor": {
     "line number": [
      23,
      34,
      47,
      64,
      77,
      82,
      102
     ]
    },
    "libcst.CompIf": {
     "line number": [
      85
     ]
    },
    "libcst.DictComp": {
     "line number": [
      20,
      31,
      44,
      61,
      74,
      79,
      99
     ]
    },
    "libcst.LeftCurlyBrace": {
     "line number": [
      48
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      65,
      101
     ]
    },
    "libcst.Name": {
     "line number": [
      21,
      22,
      23,
      23,
      32,
      33,
      34,
      34,
      45,
      46,
      47,
      47,
      62,
      63,
      64,
      64,
      75,
      76,
      78,
      80,
      81,
      82,
      82,
      86,
      100,
      101,
      103,
      104
     ]
    },
    "libcst.RightCurlyBrace": {
     "line number": [
      51
     ]
    },
    "libcst.RightParen": {
     "line number": [
      66,
      101
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      35,
      36,
      49,
      52,
      87,
      90,
      105
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      27,
      40,
      57,
      70,
      95,
      110
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      26,
      39,
      56,
      69,
      94,
      109
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "typing.Any": {
     "line number": [
      114
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_dict_comp.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_dict_comp.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_dict_comp.parse_expression": {
  "data": {
   "shadows": "libcst.parse_expression"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_docstring": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_docstring.DocstringTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_docstring.DocstringTest.test_class_docstring": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "libcst.ClassDef": {
     "line number": [
      124
     ]
    },
    "libcst.helpers.ensure_type": {
     "line number": [
      123
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      124
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      89
     ]
    },
    "str": {
     "line number": [
      121,
      121
     ]
    },
    "textwrap.dedent": {
     "line number": [
      124
     ]
    },
    "typing.Optional": {
     "line number": [
      121
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_docstring.DocstringTest.test_clean_docstring": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": {
    "libcst.parse_module": {
     "line number": [
      136,
      140
     ]
    },
    "textwrap.dedent": {
     "line number": [
      136,
      140
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_docstring.DocstringTest.test_function_docstring": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      84
     ]
    },
    "libcst.helpers.ensure_type": {
     "line number": [
      83
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      84
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      41
     ]
    },
    "str": {
     "line number": [
      81,
      81
     ]
    },
    "textwrap.dedent": {
     "line number": [
      84
     ]
    },
    "typing.Optional": {
     "line number": [
      81
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_docstring.DocstringTest.test_module_docstring": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.parse_module": {
     "line number": [
      39
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "str": {
     "line number": [
      38,
      38
     ]
    },
    "textwrap.dedent": {
     "line number": [
      39
     ]
    },
    "typing.Optional": {
     "line number": [
      38
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_docstring.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_docstring.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_docstring.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_docstring.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_docstring.dedent": {
  "data": {
   "shadows": "textwrap.dedent"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_docstring.ensure_type": {
  "data": {
   "shadows": "libcst.helpers.ensure_type"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_else": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_else.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_else.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_else.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_else.ElseTest": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_else.ElseTest.test_valid": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst.Else": {
     "line number": [
      18,
      23
     ]
    },
    "libcst.Pass": {
     "line number": [
      18,
      24
     ]
    },
    "libcst.SimpleStatementSuite": {
     "line number": [
      18,
      24
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      25
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      20,
      28
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      15
     ]
    },
    "typing.Any": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_else.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_else.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_empty_line": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_empty_line.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_empty_line.DummyIndentedBlock": {
  "data": {
   "shadows": "libcst._nodes.tests.base.DummyIndentedBlock"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_empty_line.EmptyLineTest": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_empty_line.EmptyLineTest.test_valid": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      33
     ]
    },
    "libcst.Comment": {
     "line number": [
      16,
      25
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      14,
      15,
      16,
      17,
      18,
      19,
      23
     ]
    },
    "libcst.Newline": {
     "line number": [
      17,
      26
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      15,
      24
     ]
    },
    "libcst._nodes.tests.base.DummyIndentedBlock": {
     "line number": [
      18,
      19,
      21
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      12
     ]
    },
    "str": {
     "line number": [
      33
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_empty_line.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_empty_line.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_for": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_for.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_for.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_for.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_for.DummyIndentedBlock": {
  "data": {
   "shadows": "libcst._nodes.tests.base.DummyIndentedBlock"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_for.ForTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_for.ForTest.test_invalid": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": {
    "libcst.Call": {
     "line number": [
      166,
      175,
      184
     ]
    },
    "libcst.For": {
     "line number": [
      164,
      173,
      182
     ]
    },
    "libcst.Name": {
     "line number": [
      165,
      166,
      174,
      175,
      183,
      184
     ]
    },
    "libcst.Pass": {
     "line number": [
      167,
      176,
      185
     ]
    },
    "libcst.SimpleStatementSuite": {
     "line number": [
      167,
      176,
      185
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      168,
      177,
      186
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      161
     ]
    },
    "typing.Any": {
     "line number": [
      192
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_for.ForTest.test_valid": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.Asynchronous": {
     "line number": [
      34,
      52,
      56
     ]
    },
    "libcst.Call": {
     "line number": [
      22,
      32,
      50,
      67,
      80,
      93,
      105,
      127,
      145
     ]
    },
    "libcst.Comment": {
     "line number": [
      110,
      114
     ]
    },
    "libcst.Else": {
     "line number": [
      69,
      107
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      110,
      114
     ]
    },
    "libcst.For": {
     "line number": [
      20,
      30,
      48,
      65,
      78,
      91,
      103,
      123,
      143
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      43
     ]
    },
    "libcst.IndentedBlock": {
     "line number": [
      46,
      94,
      106,
      108
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      125,
      129
     ]
    },
    "libcst.Name": {
     "line number": [
      21,
      22,
      31,
      32,
      44,
      49,
      50,
      66,
      67,
      79,
      80,
      92,
      93,
      104,
      105,
      124,
      128,
      144,
      145
     ]
    },
    "libcst.Parameters": {
     "line number": [
      45
     ]
    },
    "libcst.PartialParserConfig": {
     "line number": [
      38,
      60
     ]
    },
    "libcst.Pass": {
     "line number": [
      23,
      33,
      51,
      68,
      69,
      81,
      94,
      106,
      108,
      132,
      146
     ]
    },
    "libcst.RightParen": {
     "line number": [
      125,
      130
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      94,
      106,
      108
     ]
    },
    "libcst.SimpleStatementSuite": {
     "line number": [
      23,
      33,
      51,
      68,
      69,
      81,
      132,
      146
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      133,
      134,
      135,
      147,
      148,
      149,
      150
     ]
    },
    "libcst._nodes.tests.base.DummyIndentedBlock": {
     "line number": [
      76,
      89
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      99,
      119,
      139,
      154
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      26,
      37,
      59,
      72,
      138,
      153
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "typing.Any": {
     "line number": [
      158
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_for.PartialParserConfig": {
  "data": {
   "shadows": "libcst.PartialParserConfig"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_for.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_for.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_for.parse_statement": {
  "data": {
   "shadows": "libcst.parse_statement"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_funcdef": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_funcdef.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_funcdef.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_funcdef.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_funcdef.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_funcdef.DummyIndentedBlock": {
  "data": {
   "shadows": "libcst._nodes.tests.base.DummyIndentedBlock"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_funcdef.FunctionDefCreationTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_funcdef.FunctionDefCreationTest.test_invalid": {
  "data": {
   "lineno": 689,
   "symbols_in_volume": {
    "libcst.AssignEqual": {
     "line number": [
      723
     ]
    },
    "libcst.Asynchronous": {
     "line number": [
      704
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      852
     ]
    },
    "libcst.Decorator": {
     "line number": [
      840
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      692,
      700,
      711,
      720,
      730,
      738,
      753,
      768,
      776,
      784,
      792,
      808,
      818,
      826,
      835
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      693,
      842
     ]
    },
    "libcst.Name": {
     "line number": [
      693,
      701,
      712,
      721,
      723,
      731,
      732,
      739,
      743,
      745,
      754,
      758,
      761,
      769,
      777,
      785,
      786,
      793,
      797,
      809,
      811,
      819,
      820,
      827,
      828,
      836,
      841
     ]
    },
    "libcst.Param": {
     "line number": [
      723,
      732,
      742,
      745,
      757,
      761,
      786,
      796,
      811,
      820,
      828
     ]
    },
    "libcst.ParamSlash": {
     "line number": [
      778
     ]
    },
    "libcst.ParamStar": {
     "line number": [
      770
     ]
    },
    "libcst.Parameters": {
     "line number": [
      694,
      702,
      713,
      722,
      732,
      740,
      755,
      770,
      778,
      786,
      794,
      810,
      820,
      828,
      837
     ]
    },
    "libcst.Pass": {
     "line number": [
      695,
      703,
      714,
      725,
      733,
      748,
      763,
      771,
      779,
      787,
      803,
      813,
      821,
      829,
      838
     ]
    },
    "libcst.RightParen": {
     "line number": [
      693,
      842
     ]
    },
    "libcst.SimpleStatementSuite": {
     "line number": [
      695,
      703,
      714,
      725,
      733,
      748,
      763,
      771,
      779,
      787,
      803,
      813,
      821,
      829,
      838
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      743,
      758,
      798
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      705,
      715
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      689
     ]
    },
    "str": {
     "line number": [
      852
     ]
    },
    "typing.Callable": {
     "line number": [
      852
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_funcdef.FunctionDefCreationTest.test_valid": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.Annotation": {
     "line number": [
      33,
      55,
      77,
      78,
      109,
      114,
      143,
      144,
      175,
      180,
      195,
      198,
      231,
      234,
      237,
      258,
      261,
      264,
      285,
      288,
      291,
      314,
      317,
      320,
      344,
      349,
      352,
      355,
      376,
      381,
      384,
      387,
      423,
      426,
      601,
      635,
      640,
      643,
      646
     ]
    },
    "libcst.Arg": {
     "line number": [
      501,
      502,
      518,
      523
     ]
    },
    "libcst.Asynchronous": {
     "line number": [
      44,
      54,
      593
     ]
    },
    "libcst.Call": {
     "line number": [
      498,
      517,
      522,
      583,
      616
     ]
    },
    "libcst.Comment": {
     "line number": [
      565,
      577,
      591
     ]
    },
    "libcst.Decorator": {
     "line number": [
      487,
      497,
      516,
      521,
      539,
      552,
      581,
      614
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      565,
      575,
      576,
      591
     ]
    },
    "libcst.Float": {
     "line number": [
      279,
      280,
      308,
      309,
      372,
      373,
      631,
      632,
      655
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      20,
      29,
      40,
      50,
      62,
      73,
      87,
      103,
      125,
      139,
      153,
      169,
      191,
      209,
      225,
      248,
      275,
      302,
      331,
      340,
      366,
      398,
      407,
      419,
      435,
      447,
      459,
      471,
      483,
      492,
      511,
      535,
      548,
      560,
      573,
      669
     ]
    },
    "libcst.IndentedBlock": {
     "line number": [
      551,
      674
     ]
    },
    "libcst.Integer": {
     "line number": [
      94,
      115,
      160,
      181,
      199
     ]
    },
    "libcst.Name": {
     "line number": [
      21,
      30,
      33,
      41,
      51,
      55,
      63,
      65,
      65,
      74,
      77,
      77,
      78,
      78,
      88,
      92,
      94,
      104,
      108,
      109,
      113,
      114,
      126,
      129,
      130,
      140,
      143,
      143,
      144,
      144,
      154,
      158,
      160,
      170,
      174,
      175,
      179,
      180,
      192,
      195,
      195,
      197,
      198,
      210,
      214,
      216,
      226,
      230,
      231,
      234,
      234,
      236,
      237,
      249,
      252,
      253,
      257,
      258,
      261,
      261,
      263,
      264,
      276,
      279,
      280,
      284,
      285,
      288,
      288,
      290,
      291,
      303,
      306,
      307,
      308,
      309,
      313,
      314,
      317,
      317,
      319,
      320,
      332,
      333,
      341,
      344,
      344,
      348,
      349,
      352,
      352,
      354,
      355,
      367,
      370,
      371,
      372,
      373,
      376,
      376,
      380,
      381,
      384,
      384,
      386,
      387,
      399,
      400,
      408,
      410,
      411,
      420,
      423,
      423,
      426,
      426,
      436,
      438,
      439,
      448,
      450,
      451,
      460,
      462,
      463,
      472,
      474,
      475,
      484,
      487,
      493,
      499,
      501,
      512,
      518,
      523,
      536,
      539,
      549,
      552,
      561,
      584,
      597,
      604,
      617,
      629,
      630,
      631,
      632,
      635,
      635,
      639,
      640,
      643,
      643,
      645,
      646,
      655,
      661,
      670,
      672
     ]
    },
    "libcst.Param": {
     "line number": [
      65,
      65,
      77,
      78,
      91,
      94,
      107,
      112,
      129,
      130,
      143,
      144,
      157,
      160,
      173,
      178,
      195,
      196,
      213,
      216,
      229,
      234,
      235,
      252,
      253,
      256,
      261,
      262,
      279,
      280,
      283,
      288,
      289,
      306,
      307,
      308,
      309,
      312,
      317,
      318,
      333,
      343,
      347,
      352,
      353,
      370,
      371,
      372,
      373,
      375,
      379,
      384,
      385,
      400,
      410,
      411,
      422,
      425,
      438,
      439,
      450,
      451,
      462,
      463,
      474,
      475,
      629,
      630,
      631,
      632,
      634,
      638,
      643,
      644,
      655,
      660,
      672
     ]
    },
    "libcst.Parameters": {
     "line number": [
      22,
      31,
      42,
      52,
      64,
      75,
      89,
      105,
      127,
      141,
      155,
      171,
      193,
      211,
      227,
      250,
      277,
      304,
      333,
      342,
      368,
      400,
      409,
      421,
      437,
      449,
      461,
      473,
      485,
      494,
      513,
      537,
      550,
      562,
      600,
      627,
      671
     ]
    },
    "libcst.ParenthesizedWhitespace": {
     "line number": [
      677
     ]
    },
    "libcst.Pass": {
     "line number": [
      23,
      32,
      43,
      53,
      67,
      81,
      97,
      119,
      133,
      147,
      163,
      185,
      203,
      219,
      242,
      269,
      296,
      325,
      334,
      360,
      392,
      401,
      413,
      429,
      441,
      453,
      465,
      477,
      486,
      495,
      514,
      538,
      551,
      563,
      607,
      675
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      551,
      675
     ]
    },
    "libcst.SimpleStatementSuite": {
     "line number": [
      23,
      32,
      43,
      53,
      67,
      81,
      97,
      119,
      133,
      147,
      163,
      185,
      203,
      219,
      242,
      269,
      296,
      325,
      334,
      360,
      392,
      401,
      413,
      429,
      441,
      453,
      465,
      477,
      486,
      495,
      514,
      538,
      563,
      607
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      92,
      110,
      158,
      176,
      214,
      232,
      238,
      259,
      265,
      286,
      292,
      315,
      321,
      350,
      356,
      382,
      388,
      502,
      518,
      523,
      641,
      647
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      582,
      585,
      586,
      594,
      596,
      598,
      599,
      602,
      603,
      606,
      615,
      618,
      619,
      663,
      678
     ]
    },
    "libcst._nodes.tests.base.DummyIndentedBlock": {
     "line number": [
      533,
      546
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      36,
      58,
      529,
      556,
      569,
      610,
      623,
      652,
      657,
      666,
      682
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "typing.Any": {
     "line number": [
      686
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_funcdef.FunctionDefParserTest": {
  "data": {
   "lineno": 866,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      866
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_funcdef.FunctionDefParserTest.test_valid": {
  "data": {
   "lineno": 867,
   "symbols_in_volume": {
    "libcst.Annotation": {
     "line number": [
      884,
      908,
      943,
      956,
      1005,
      1020,
      1044,
      1058,
      1106,
      1121,
      1135,
      1180,
      1195,
      1209,
      1256,
      1271,
      1285,
      1350,
      1365,
      1379,
      1415,
      1426,
      1441,
      1455,
      1518,
      1529,
      1544,
      1558,
      1620,
      1630,
      1741
     ]
    },
    "libcst.Arg": {
     "line number": [
      1662,
      1669,
      1686,
      1692
     ]
    },
    "libcst.AssignEqual": {
     "line number": [
      978,
      987,
      1011,
      1026,
      1064,
      1083,
      1112,
      1141,
      1186,
      1215,
      1234,
      1244,
      1262,
      1291,
      1328,
      1338,
      1356,
      1385,
      1432,
      1461,
      1498,
      1508,
      1535,
      1564
     ]
    },
    "libcst.Asynchronous": {
     "line number": [
      897,
      907,
      1733
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      1753
     ]
    },
    "libcst.Call": {
     "line number": [
      1659,
      1684,
      1690,
      1723
     ]
    },
    "libcst.Comma": {
     "line number": [
      924,
      950,
      981,
      1014,
      1052,
      1086,
      1115,
      1129,
      1162,
      1171,
      1189,
      1203,
      1237,
      1247,
      1265,
      1279,
      1312,
      1321,
      1331,
      1341,
      1359,
      1373,
      1421,
      1435,
      1449,
      1482,
      1491,
      1501,
      1511,
      1524,
      1538,
      1552,
      1600,
      1626,
      1665
     ]
    },
    "libcst.Comment": {
     "line number": [
      1706,
      1717,
      1731
     ]
    },
    "libcst.Decorator": {
     "line number": [
      1648,
      1658,
      1683,
      1689,
      1721
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      1706,
      1715,
      1716,
      1731
     ]
    },
    "libcst.Float": {
     "line number": [
      1235,
      1245,
      1329,
      1339,
      1499,
      1509
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      871,
      880,
      893,
      903,
      917,
      937,
      972,
      999,
      1038,
      1076,
      1099,
      1153,
      1227,
      1303,
      1397,
      1410,
      1473,
      1576,
      1592,
      1615,
      1644,
      1653,
      1678,
      1701,
      1713
     ]
    },
    "libcst.Integer": {
     "line number": [
      988,
      1027,
      1065
     ]
    },
    "libcst.Name": {
     "line number": [
      872,
      881,
      885,
      894,
      904,
      909,
      918,
      922,
      928,
      938,
      942,
      944,
      955,
      957,
      973,
      977,
      986,
      1000,
      1004,
      1006,
      1019,
      1021,
      1039,
      1043,
      1045,
      1057,
      1059,
      1077,
      1082,
      1090,
      1100,
      1105,
      1107,
      1120,
      1122,
      1134,
      1136,
      1154,
      1158,
      1167,
      1179,
      1181,
      1194,
      1196,
      1208,
      1210,
      1228,
      1232,
      1242,
      1255,
      1257,
      1270,
      1272,
      1284,
      1286,
      1304,
      1308,
      1317,
      1326,
      1336,
      1349,
      1351,
      1364,
      1366,
      1378,
      1380,
      1398,
      1401,
      1411,
      1414,
      1416,
      1425,
      1427,
      1440,
      1442,
      1454,
      1456,
      1474,
      1478,
      1487,
      1496,
      1506,
      1517,
      1519,
      1528,
      1530,
      1543,
      1545,
      1557,
      1559,
      1577,
      1580,
      1593,
      1596,
      1603,
      1616,
      1619,
      1621,
      1629,
      1631,
      1645,
      1648,
      1654,
      1660,
      1663,
      1679,
      1685,
      1691,
      1702,
      1724,
      1737,
      1744
     ]
    },
    "libcst.Param": {
     "line number": [
      921,
      928,
      941,
      954,
      976,
      985,
      1003,
      1018,
      1042,
      1056,
      1081,
      1090,
      1104,
      1119,
      1133,
      1157,
      1166,
      1178,
      1193,
      1207,
      1231,
      1241,
      1254,
      1269,
      1283,
      1307,
      1316,
      1325,
      1335,
      1348,
      1363,
      1377,
      1400,
      1413,
      1424,
      1439,
      1453,
      1477,
      1486,
      1495,
      1505,
      1516,
      1527,
      1542,
      1556,
      1579,
      1595,
      1602,
      1618,
      1628
     ]
    },
    "libcst.ParamStar": {
     "line number": [
      1079,
      1102,
      1176,
      1252,
      1346
     ]
    },
    "libcst.Parameters": {
     "line number": [
      873,
      882,
      895,
      905,
      919,
      939,
      974,
      1001,
      1040,
      1078,
      1101,
      1155,
      1229,
      1305,
      1399,
      1412,
      1475,
      1578,
      1594,
      1617,
      1646,
      1655,
      1680,
      1703,
      1740
     ]
    },
    "libcst.Pass": {
     "line number": [
      874,
      883,
      896,
      906,
      931,
      966,
      993,
      1032,
      1070,
      1093,
      1147,
      1221,
      1297,
      1391,
      1404,
      1467,
      1570,
      1586,
      1609,
      1638,
      1647,
      1656,
      1681,
      1704,
      1747
     ]
    },
    "libcst.SimpleStatementSuite": {
     "line number": [
      874,
      883,
      896,
      906,
      931,
      966,
      993,
      1032,
      1070,
      1093,
      1147,
      1221,
      1297,
      1391,
      1404,
      1467,
      1570,
      1586,
      1609,
      1638,
      1647,
      1656,
      1681,
      1704,
      1747
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      979,
      1012,
      1084,
      1113,
      1142,
      1187,
      1216,
      1263,
      1292,
      1357,
      1386,
      1433,
      1462,
      1536,
      1565,
      1669,
      1686,
      1692
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      886,
      910,
      925,
      945,
      951,
      958,
      982,
      1007,
      1015,
      1022,
      1046,
      1053,
      1060,
      1087,
      1108,
      1116,
      1123,
      1130,
      1137,
      1163,
      1172,
      1182,
      1190,
      1197,
      1204,
      1211,
      1238,
      1248,
      1258,
      1266,
      1273,
      1280,
      1287,
      1313,
      1322,
      1332,
      1342,
      1352,
      1360,
      1367,
      1374,
      1381,
      1417,
      1421,
      1428,
      1436,
      1443,
      1450,
      1457,
      1483,
      1492,
      1502,
      1512,
      1520,
      1524,
      1531,
      1539,
      1546,
      1553,
      1560,
      1600,
      1622,
      1626,
      1632,
      1666,
      1722,
      1725,
      1726,
      1734,
      1736,
      1738,
      1739,
      1742,
      1743,
      1746
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      1754
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      867
     ]
    },
    "str": {
     "line number": [
      1753
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_funcdef.FunctionDefParserTest.test_valid_38": {
  "data": {
   "lineno": 1756,
   "symbols_in_volume": {
    "libcst.Annotation": {
     "line number": [
      1793,
      1806,
      1863,
      1878
     ]
    },
    "libcst.AssignEqual": {
     "line number": [
      1833,
      1842,
      1870,
      1885
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      1995
     ]
    },
    "libcst.Comma": {
     "line number": [
      1767,
      1774,
      1800,
      1813,
      1835,
      1844,
      1872,
      1887,
      1907,
      1913,
      1930,
      1936,
      1953,
      1959,
      1962,
      1979,
      1985
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      1760,
      1787,
      1826,
      1857,
      1900,
      1923,
      1946,
      1972
     ]
    },
    "libcst.Integer": {
     "line number": [
      1841,
      1884
     ]
    },
    "libcst.Name": {
     "line number": [
      1761,
      1765,
      1772,
      1788,
      1792,
      1794,
      1805,
      1807,
      1827,
      1831,
      1840,
      1858,
      1862,
      1864,
      1877,
      1879,
      1901,
      1905,
      1915,
      1924,
      1928,
      1938,
      1947,
      1951,
      1964,
      1973,
      1977,
      1987
     ]
    },
    "libcst.Param": {
     "line number": [
      1764,
      1771,
      1791,
      1804,
      1830,
      1839,
      1861,
      1876,
      1904,
      1915,
      1927,
      1938,
      1950,
      1964,
      1976,
      1987
     ]
    },
    "libcst.ParamSlash": {
     "line number": [
      1779,
      1818,
      1849,
      1892,
      1912,
      1935,
      1958,
      1984
     ]
    },
    "libcst.ParamStar": {
     "line number": [
      1961
     ]
    },
    "libcst.Parameters": {
     "line number": [
      1762,
      1789,
      1828,
      1859,
      1902,
      1925,
      1948,
      1974
     ]
    },
    "libcst.Pass": {
     "line number": [
      1781,
      1820,
      1851,
      1894,
      1917,
      1940,
      1966,
      1989
     ]
    },
    "libcst.SimpleStatementSuite": {
     "line number": [
      1781,
      1820,
      1851,
      1894,
      1917,
      1940,
      1966,
      1989
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      1832,
      1869
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      1768,
      1775,
      1795,
      1801,
      1808,
      1814,
      1836,
      1845,
      1865,
      1873,
      1880,
      1888,
      1908,
      1913,
      1931,
      1936,
      1954,
      1959,
      1962,
      1980,
      1985
     ]
    },
    "libcst._nodes.tests.test_funcdef._parse_statement_force_38": {
     "line number": [
      1996
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      1756
     ]
    },
    "str": {
     "line number": [
      1995
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_funcdef.FunctionDefParserTest.test_versions": {
  "data": {
   "lineno": 1998,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.parse_statement_as": {
     "line number": [
      2002,
      2007,
      2012,
      2017
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      1998
     ]
    },
    "typing.Any": {
     "line number": [
      2022
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_funcdef._parse_statement_force_38": {
  "data": {
   "lineno": 857,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      862
     ]
    },
    "isinstance": {
     "line number": [
      861
     ]
    },
    "libcst.BaseCompoundStatement": {
     "line number": [
      861,
      857
     ]
    },
    "libcst.PartialParserConfig": {
     "line number": [
      859
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      858
     ]
    },
    "str": {
     "line number": [
      857
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_funcdef.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_funcdef.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_funcdef.parse_statement": {
  "data": {
   "shadows": "libcst.parse_statement"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_funcdef.parse_statement_as": {
  "data": {
   "shadows": "libcst._nodes.tests.base.parse_statement_as"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_global": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_global.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_global.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_global.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_global.GlobalConstructionTest": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_global.GlobalConstructionTest.test_invalid": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "libcst.Comma": {
     "line number": [
      69
     ]
    },
    "libcst.Global": {
     "line number": [
      55,
      60,
      68,
      75
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      79
     ]
    },
    "libcst.Name": {
     "line number": [
      61,
      69,
      78
     ]
    },
    "libcst.NameItem": {
     "line number": [
      61,
      69,
      77
     ]
    },
    "libcst.RightParen": {
     "line number": [
      79
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      62
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      51
     ]
    },
    "typing.Any": {
     "line number": [
      88
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_global.GlobalConstructionTest.test_valid": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "libcst.Comma": {
     "line number": [
      34
     ]
    },
    "libcst.Global": {
     "line number": [
      20,
      23,
      30
     ]
    },
    "libcst.Name": {
     "line number": [
      20,
      24,
      24,
      33,
      39
     ]
    },
    "libcst.NameItem": {
     "line number": [
      20,
      24,
      24,
      32,
      39
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      35,
      36,
      41
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      44
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      17
     ]
    },
    "typing.Any": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_global.GlobalParsingTest": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      92
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_global.GlobalParsingTest.test_valid": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": {
    "libcst.Comma": {
     "line number": [
      103,
      116
     ]
    },
    "libcst.Global": {
     "line number": [
      96,
      99,
      112
     ]
    },
    "libcst.Name": {
     "line number": [
      96,
      102,
      105,
      115,
      121
     ]
    },
    "libcst.NameItem": {
     "line number": [
      96,
      101,
      105,
      114,
      121
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      132
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      103,
      117,
      118,
      123
     ]
    },
    "libcst.helpers.ensure_type": {
     "line number": [
      131
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      132
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      93
     ]
    },
    "typing.Any": {
     "line number": [
      129
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_global.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_global.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_global.ensure_type": {
  "data": {
   "shadows": "libcst.helpers.ensure_type"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_global.parse_statement": {
  "data": {
   "shadows": "libcst.parse_statement"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_if": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_if.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_if.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_if.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_if.DummyIndentedBlock": {
  "data": {
   "shadows": "libcst._nodes.tests.base.DummyIndentedBlock"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_if.IfTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_if.IfTest.test_valid": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.Comment": {
     "line number": [
      86
     ]
    },
    "libcst.Else": {
     "line number": [
      32,
      46,
      60,
      100,
      118
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      86,
      117,
      120
     ]
    },
    "libcst.If": {
     "line number": [
      20,
      29,
      40,
      43,
      57,
      71,
      82,
      95,
      111,
      114
     ]
    },
    "libcst.IndentedBlock": {
     "line number": [
      73
     ]
    },
    "libcst.Name": {
     "line number": [
      21,
      30,
      41,
      44,
      58,
      72,
      83,
      96,
      112,
      115
     ]
    },
    "libcst.Pass": {
     "line number": [
      21,
      31,
      32,
      42,
      45,
      46,
      59,
      60,
      73,
      84,
      97,
      101,
      113,
      116,
      119
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      73
     ]
    },
    "libcst.SimpleStatementSuite": {
     "line number": [
      21,
      31,
      32,
      42,
      45,
      46,
      59,
      60,
      84,
      97,
      101,
      113,
      116,
      119
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      98,
      99,
      102
     ]
    },
    "libcst._nodes.tests.base.DummyIndentedBlock": {
     "line number": [
      55,
      69
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      25,
      36,
      51,
      65,
      78,
      91,
      107,
      126
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      24,
      35,
      50,
      90,
      106,
      125
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "typing.Any": {
     "line number": [
      130
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_if.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_if.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_if.parse_statement": {
  "data": {
   "shadows": "libcst.parse_statement"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_ifexp": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_ifexp.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_ifexp.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_ifexp.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_ifexp.IfExpTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_ifexp.IfExpTest.test_invalid": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      101
     ]
    },
    "libcst.IfExp": {
     "line number": [
      81,
      90
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      85
     ]
    },
    "libcst.Name": {
     "line number": [
      82,
      83,
      84,
      91,
      92,
      93
     ]
    },
    "libcst.RightParen": {
     "line number": [
      94
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      78
     ]
    },
    "str": {
     "line number": [
      101
     ]
    },
    "typing.Callable": {
     "line number": [
      101
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_ifexp.IfExpTest.test_valid": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      74
     ]
    },
    "libcst.IfExp": {
     "line number": [
      20,
      27,
      37,
      57
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      28,
      39,
      44,
      49,
      58
     ]
    },
    "libcst.Name": {
     "line number": [
      21,
      21,
      21,
      29,
      30,
      31,
      38,
      43,
      48,
      59,
      62,
      65
     ]
    },
    "libcst.RightParen": {
     "line number": [
      32,
      39,
      44,
      49,
      66
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      41,
      42,
      46,
      47,
      58,
      60,
      61,
      63,
      64,
      66
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      74,
      53,
      69
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      76
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "str": {
     "line number": [
      74
     ]
    },
    "typing.Optional": {
     "line number": [
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_ifexp.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_ifexp.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_ifexp.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_ifexp.parse_expression": {
  "data": {
   "shadows": "libcst.parse_expression"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_import": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_import.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_import.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_import.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_import.ImportCreateTest": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_import.ImportCreateTest.test_invalid": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": {
    "libcst.Attribute": {
     "line number": [
      163,
      171,
      180,
      191,
      202
     ]
    },
    "libcst.Comma": {
     "line number": [
      181
     ]
    },
    "libcst.Float": {
     "line number": [
      203
     ]
    },
    "libcst.Import": {
     "line number": [
      153,
      157,
      161,
      169,
      177,
      188,
      199
     ]
    },
    "libcst.ImportAlias": {
     "line number": [
      157,
      163,
      171,
      179,
      190,
      201
     ]
    },
    "libcst.Name": {
     "line number": [
      157,
      163,
      163,
      171,
      171,
      180,
      180,
      191,
      191,
      203
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      194
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      150
     ]
    },
    "typing.Any": {
     "line number": [
      212
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_import.ImportCreateTest.test_valid": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "libcst.AsName": {
     "line number": [
      65,
      77,
      81,
      93,
      102,
      121,
      133
     ]
    },
    "libcst.Attribute": {
     "line number": [
      28,
      38,
      49,
      52,
      64,
      76,
      80,
      92,
      96,
      99,
      113
     ]
    },
    "libcst.Comma": {
     "line number": [
      126
     ]
    },
    "libcst.Dot": {
     "line number": [
      116
     ]
    },
    "libcst.Import": {
     "line number": [
      21,
      25,
      35,
      46,
      61,
      73,
      89,
      110
     ]
    },
    "libcst.ImportAlias": {
     "line number": [
      21,
      27,
      37,
      48,
      51,
      63,
      75,
      79,
      91,
      95,
      98,
      101,
      112,
      131
     ]
    },
    "libcst.Name": {
     "line number": [
      21,
      28,
      28,
      38,
      38,
      49,
      49,
      52,
      52,
      64,
      64,
      65,
      76,
      76,
      77,
      80,
      80,
      81,
      92,
      92,
      93,
      96,
      96,
      99,
      99,
      102,
      102,
      114,
      115,
      122,
      132,
      134
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      117,
      118,
      123,
      124,
      127,
      128,
      135,
      136,
      140
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      57,
      143
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      17
     ]
    },
    "typing.Any": {
     "line number": [
      147
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_import.ImportFromCreateTest": {
  "data": {
   "lineno": 359,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      359
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_import.ImportFromCreateTest.test_invalid": {
  "data": {
   "lineno": 501,
   "symbols_in_volume": {
    "libcst.ImportAlias": {
     "line number": [
      505,
      516,
      524,
      546,
      554,
      562
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      504,
      510,
      514,
      522,
      530,
      536,
      544,
      552,
      560
     ]
    },
    "libcst.ImportStar": {
     "line number": [
      531,
      538
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      517,
      531
     ]
    },
    "libcst.Name": {
     "line number": [
      505,
      510,
      515,
      516,
      523,
      524,
      531,
      537,
      545,
      546,
      553,
      554,
      561,
      562
     ]
    },
    "libcst.RightParen": {
     "line number": [
      525,
      539
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      547,
      555,
      563
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      501
     ]
    },
    "typing.Any": {
     "line number": [
      569
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_import.ImportFromCreateTest.test_valid": {
  "data": {
   "lineno": 360,
   "symbols_in_volume": {
    "libcst.AsName": {
     "line number": [
      375,
      443,
      469,
      481
     ]
    },
    "libcst.Comma": {
     "line number": [
      397,
      398,
      474
     ]
    },
    "libcst.Dot": {
     "line number": [
      413,
      421,
      421,
      430,
      430,
      455,
      459
     ]
    },
    "libcst.ImportAlias": {
     "line number": [
      365,
      374,
      386,
      387,
      397,
      398,
      415,
      423,
      432,
      442,
      467,
      479
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      364,
      371,
      383,
      394,
      406,
      412,
      420,
      429,
      438,
      453
     ]
    },
    "libcst.ImportStar": {
     "line number": [
      406
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      440,
      465
     ]
    },
    "libcst.Name": {
     "line number": [
      365,
      365,
      372,
      375,
      375,
      384,
      386,
      387,
      395,
      397,
      398,
      406,
      414,
      415,
      422,
      423,
      432,
      439,
      443,
      443,
      464,
      468,
      470,
      480,
      482
     ]
    },
    "libcst.RightParen": {
     "line number": [
      446,
      488
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      456,
      457,
      460,
      461,
      465,
      471,
      472,
      475,
      476,
      483,
      484,
      488,
      489,
      490,
      491
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      402,
      408,
      449,
      494
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      360
     ]
    },
    "typing.Any": {
     "line number": [
      498
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_import.ImportFromParseTest": {
  "data": {
   "lineno": 573,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      573
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_import.ImportFromParseTest.test_valid": {
  "data": {
   "lineno": 574,
   "symbols_in_volume": {
    "libcst.AsName": {
     "line number": [
      589,
      661,
      686,
      698
     ]
    },
    "libcst.Comma": {
     "line number": [
      602,
      616,
      618,
      691
     ]
    },
    "libcst.Dot": {
     "line number": [
      631,
      639,
      639,
      648,
      648,
      672,
      676
     ]
    },
    "libcst.ImportAlias": {
     "line number": [
      579,
      588,
      600,
      604,
      614,
      618,
      633,
      641,
      650,
      660,
      684,
      696
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      578,
      585,
      597,
      611,
      625,
      630,
      638,
      647,
      656,
      670
     ]
    },
    "libcst.ImportStar": {
     "line number": [
      625
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      658,
      682
     ]
    },
    "libcst.Name": {
     "line number": [
      579,
      579,
      586,
      589,
      589,
      598,
      601,
      604,
      612,
      615,
      618,
      625,
      632,
      633,
      640,
      641,
      650,
      657,
      661,
      661,
      681,
      685,
      687,
      697,
      699
     ]
    },
    "libcst.RightParen": {
     "line number": [
      664,
      705
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      717
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      602,
      616,
      673,
      674,
      677,
      678,
      682,
      688,
      689,
      692,
      693,
      700,
      701,
      705,
      706,
      707,
      708
     ]
    },
    "libcst.helpers.ensure_type": {
     "line number": [
      716
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      717
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      574
     ]
    },
    "typing.Any": {
     "line number": [
      714
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_import.ImportParseTest": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      216
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_import.ImportParseTest.test_valid": {
  "data": {
   "lineno": 217,
   "symbols_in_volume": {
    "libcst.AsName": {
     "line number": [
      265,
      277,
      282,
      294,
      306,
      325,
      337
     ]
    },
    "libcst.Attribute": {
     "line number": [
      228,
      238,
      249,
      253,
      264,
      276,
      281,
      293,
      298,
      302,
      317
     ]
    },
    "libcst.Comma": {
     "line number": [
      250,
      278,
      295,
      299,
      303,
      330
     ]
    },
    "libcst.Dot": {
     "line number": [
      320
     ]
    },
    "libcst.Import": {
     "line number": [
      221,
      225,
      235,
      246,
      261,
      273,
      290,
      314
     ]
    },
    "libcst.ImportAlias": {
     "line number": [
      221,
      227,
      237,
      248,
      252,
      263,
      275,
      280,
      292,
      297,
      301,
      305,
      316,
      335
     ]
    },
    "libcst.Name": {
     "line number": [
      221,
      228,
      228,
      238,
      238,
      249,
      249,
      253,
      253,
      264,
      264,
      265,
      276,
      276,
      277,
      281,
      281,
      282,
      293,
      293,
      294,
      298,
      298,
      302,
      302,
      306,
      306,
      318,
      319,
      326,
      336,
      338
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      353
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      250,
      278,
      295,
      299,
      303,
      321,
      322,
      327,
      328,
      331,
      332,
      339,
      340,
      344
     ]
    },
    "libcst.helpers.ensure_type": {
     "line number": [
      352
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      353
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      217
     ]
    },
    "typing.Any": {
     "line number": [
      350
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_import.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_import.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_import.ensure_type": {
  "data": {
   "shadows": "libcst.helpers.ensure_type"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_import.parse_statement": {
  "data": {
   "shadows": "libcst.parse_statement"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_indented_block": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_indented_block.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_indented_block.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_indented_block.IndentedBlockTest": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_indented_block.IndentedBlockTest.test_invalid": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      154
     ]
    },
    "libcst.IndentedBlock": {
     "line number": [
      139,
      145
     ]
    },
    "libcst.Pass": {
     "line number": [
      140,
      146
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      140,
      146
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      136
     ]
    },
    "str": {
     "line number": [
      154
     ]
    },
    "typing.Callable": {
     "line number": [
      154
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_indented_block.IndentedBlockTest.test_valid": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      130,
      132
     ]
    },
    "libcst.Comment": {
     "line number": [
      41,
      50,
      61
     ]
    },
    "libcst.Continue": {
     "line number": [
      71
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      50,
      59
     ]
    },
    "libcst.If": {
     "line number": [
      80,
      89,
      94,
      108,
      113
     ]
    },
    "libcst.IndentedBlock": {
     "line number": [
      19,
      24,
      26,
      29,
      37,
      48,
      56,
      69,
      82,
      91,
      96,
      110,
      115
     ]
    },
    "libcst.Name": {
     "line number": [
      81,
      90,
      95,
      109,
      114
     ]
    },
    "libcst.Pass": {
     "line number": [
      19,
      30,
      38,
      49,
      57,
      72,
      82,
      93,
      97,
      112,
      116
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      19,
      26,
      30,
      38,
      49,
      57,
      71,
      72,
      82,
      93,
      97,
      112,
      116
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      40,
      60
     ]
    },
    "libcst.TrailingWhitespace": {
     "line number": [
      39
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      85,
      104,
      124
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      15
     ]
    },
    "str": {
     "line number": [
      131,
      132
     ]
    },
    "typing.Callable": {
     "line number": [
      132
     ]
    },
    "typing.Optional": {
     "line number": [
      132
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_indented_block.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_indented_block.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_indented_block.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_indented_block.parse_statement": {
  "data": {
   "shadows": "libcst.parse_statement"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_lambda": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_lambda.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_lambda.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_lambda.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_lambda.LambdaCreationTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_lambda.LambdaCreationTest.test_invalid": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": {
    "libcst.Annotation": {
     "line number": [
      401,
      416,
      432,
      445,
      459,
      472
     ]
    },
    "libcst.AssignEqual": {
     "line number": [
      317
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      483
     ]
    },
    "libcst.Integer": {
     "line number": [
      251,
      259,
      267,
      275,
      283,
      285,
      293,
      301,
      309,
      319,
      326,
      340,
      346,
      353,
      368,
      377,
      384,
      391,
      405,
      420,
      431,
      436,
      448,
      463,
      475
     ]
    },
    "libcst.Lambda": {
     "line number": [
      249,
      257,
      265,
      273,
      281,
      291,
      299,
      307,
      315,
      324,
      331,
      345,
      351,
      358,
      373,
      382,
      389,
      396,
      411,
      426,
      442,
      454,
      469
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      252
     ]
    },
    "libcst.Name": {
     "line number": [
      250,
      258,
      266,
      274,
      283,
      292,
      300,
      308,
      317,
      325,
      335,
      337,
      352,
      362,
      375,
      383,
      390,
      400,
      401,
      415,
      416,
      430,
      432,
      445,
      445,
      458,
      459,
      472,
      472
     ]
    },
    "libcst.Param": {
     "line number": [
      250,
      258,
      266,
      274,
      283,
      292,
      300,
      308,
      317,
      325,
      334,
      337,
      352,
      361,
      375,
      383,
      390,
      399,
      414,
      429,
      444,
      457,
      471
     ]
    },
    "libcst.ParamStar": {
     "line number": [
      346
     ]
    },
    "libcst.Parameters": {
     "line number": [
      250,
      258,
      266,
      274,
      282,
      292,
      300,
      308,
      316,
      325,
      332,
      346,
      352,
      359,
      374,
      383,
      390,
      397,
      412,
      427,
      443,
      455,
      470
     ]
    },
    "libcst.RightParen": {
     "line number": [
      260
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      335,
      363
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      268,
      276,
      286,
      294,
      302,
      310,
      406,
      421,
      437,
      449,
      464,
      476
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      246
     ]
    },
    "str": {
     "line number": [
      483
     ]
    },
    "typing.Callable": {
     "line number": [
      483
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_lambda.LambdaCreationTest.test_valid": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      242
     ]
    },
    "libcst.Colon": {
     "line number": [
      232
     ]
    },
    "libcst.Float": {
     "line number": [
      113,
      114,
      137,
      138,
      189,
      190
     ]
    },
    "libcst.Integer": {
     "line number": [
      19,
      29,
      39,
      51,
      54,
      64,
      67,
      82,
      104,
      126,
      150,
      159,
      178,
      203,
      211,
      222,
      233
     ]
    },
    "libcst.Lambda": {
     "line number": [
      19,
      22,
      35,
      45,
      60,
      73,
      88,
      110,
      132,
      157,
      165,
      184,
      209,
      217,
      228
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      229
     ]
    },
    "libcst.Name": {
     "line number": [
      25,
      26,
      37,
      37,
      49,
      51,
      63,
      64,
      77,
      79,
      91,
      92,
      96,
      98,
      100,
      113,
      114,
      118,
      120,
      122,
      135,
      136,
      137,
      138,
      142,
      144,
      146,
      158,
      167,
      170,
      172,
      174,
      187,
      188,
      189,
      190,
      192,
      195,
      197,
      199,
      210,
      219,
      220
     ]
    },
    "libcst.Param": {
     "line number": [
      25,
      26,
      37,
      37,
      48,
      51,
      63,
      64,
      76,
      79,
      91,
      92,
      95,
      98,
      99,
      113,
      114,
      117,
      120,
      121,
      135,
      136,
      137,
      138,
      141,
      144,
      145,
      158,
      167,
      169,
      172,
      173,
      187,
      188,
      189,
      190,
      192,
      194,
      197,
      198,
      210,
      219,
      220
     ]
    },
    "libcst.Parameters": {
     "line number": [
      19,
      23,
      36,
      46,
      61,
      74,
      89,
      111,
      133,
      158,
      166,
      185,
      210,
      218,
      231
     ]
    },
    "libcst.RightParen": {
     "line number": [
      234
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      49,
      77,
      96,
      100,
      118,
      122,
      142,
      146,
      170,
      174,
      195,
      199
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      229,
      230,
      232,
      234
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      242,
      153,
      237
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "str": {
     "line number": [
      242
     ]
    },
    "typing.Optional": {
     "line number": [
      242
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_lambda.LambdaParserTest": {
  "data": {
   "lineno": 494,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      494
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_lambda.LambdaParserTest.test_valid": {
  "data": {
   "lineno": 495,
   "symbols_in_volume": {
    "libcst.AssignEqual": {
     "line number": [
      527,
      536,
      561,
      580,
      619,
      635,
      653,
      662,
      674,
      690,
      722,
      731,
      743,
      759,
      791,
      807,
      839,
      848,
      864,
      880
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      934
     ]
    },
    "libcst.Colon": {
     "line number": [
      922
     ]
    },
    "libcst.Comma": {
     "line number": [
      507,
      529,
      554,
      582,
      602,
      609,
      621,
      628,
      655,
      664,
      676,
      683,
      708,
      715,
      724,
      733,
      745,
      752,
      785,
      793,
      800,
      825,
      832,
      841,
      850,
      858,
      866,
      873,
      908
     ]
    },
    "libcst.Float": {
     "line number": [
      652,
      661,
      721,
      730,
      838,
      847
     ]
    },
    "libcst.Integer": {
     "line number": [
      498,
      514,
      535,
      541,
      560,
      566,
      589,
      640,
      695,
      764,
      773,
      812,
      885,
      896,
      912,
      926
     ]
    },
    "libcst.Lambda": {
     "line number": [
      498,
      501,
      521,
      548,
      573,
      596,
      647,
      702,
      771,
      780,
      819,
      892,
      903,
      919
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      920
     ]
    },
    "libcst.Name": {
     "line number": [
      505,
      511,
      525,
      534,
      552,
      559,
      578,
      586,
      600,
      607,
      617,
      626,
      633,
      651,
      660,
      672,
      681,
      688,
      706,
      713,
      720,
      729,
      741,
      750,
      757,
      772,
      783,
      789,
      798,
      805,
      823,
      830,
      837,
      846,
      856,
      862,
      871,
      878,
      894,
      906,
      910
     ]
    },
    "libcst.Param": {
     "line number": [
      504,
      511,
      524,
      533,
      551,
      558,
      577,
      586,
      599,
      606,
      616,
      625,
      632,
      650,
      659,
      671,
      680,
      687,
      705,
      712,
      719,
      728,
      740,
      749,
      756,
      772,
      782,
      788,
      797,
      804,
      822,
      829,
      836,
      845,
      855,
      861,
      870,
      877,
      894,
      905,
      910
     ]
    },
    "libcst.ParamStar": {
     "line number": [
      575,
      614,
      669,
      738
     ]
    },
    "libcst.Parameters": {
     "line number": [
      498,
      502,
      522,
      549,
      574,
      597,
      648,
      703,
      772,
      781,
      820,
      893,
      904,
      921
     ]
    },
    "libcst.RightParen": {
     "line number": [
      927
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      526,
      579,
      618,
      634,
      673,
      689,
      742,
      758,
      790,
      806,
      863,
      879
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      508,
      515,
      530,
      542,
      555,
      567,
      583,
      590,
      603,
      610,
      622,
      629,
      641,
      656,
      665,
      677,
      684,
      696,
      709,
      716,
      725,
      734,
      746,
      753,
      765,
      774,
      785,
      794,
      801,
      813,
      826,
      833,
      842,
      851,
      858,
      867,
      874,
      886,
      897,
      908,
      913,
      920,
      923,
      924,
      927
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      934
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      936
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      495
     ]
    },
    "str": {
     "line number": [
      934
     ]
    },
    "typing.Optional": {
     "line number": [
      934
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_lambda.LambdaParserTest.test_valid_38": {
  "data": {
   "lineno": 938,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      970
     ]
    },
    "libcst.Comma": {
     "line number": [
      948,
      955
     ]
    },
    "libcst.Integer": {
     "line number": [
      962
     ]
    },
    "libcst.Lambda": {
     "line number": [
      942
     ]
    },
    "libcst.Name": {
     "line number": [
      946,
      953
     ]
    },
    "libcst.Param": {
     "line number": [
      945,
      952
     ]
    },
    "libcst.ParamSlash": {
     "line number": [
      960
     ]
    },
    "libcst.Parameters": {
     "line number": [
      943
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      949,
      956,
      963
     ]
    },
    "libcst._nodes.tests.test_lambda._parse_expression_force_38": {
     "line number": [
      972
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      970
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      938
     ]
    },
    "str": {
     "line number": [
      970
     ]
    },
    "typing.Optional": {
     "line number": [
      970
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_lambda.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_lambda._parse_expression_force_38": {
  "data": {
   "lineno": 488,
   "symbols_in_volume": {
    "libcst.BaseExpression": {
     "line number": [
      488
     ]
    },
    "libcst.PartialParserConfig": {
     "line number": [
      490
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      489
     ]
    },
    "str": {
     "line number": [
      488
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_lambda.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_lambda.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_lambda.parse_expression": {
  "data": {
   "shadows": "libcst.parse_expression"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_leaf_small_statements": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_leaf_small_statements.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_leaf_small_statements.LeafSmallStatementsTest": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_leaf_small_statements.LeafSmallStatementsTest.test_valid": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "libcst.Break": {
     "line number": [
      13
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      15
     ]
    },
    "libcst.Continue": {
     "line number": [
      13
     ]
    },
    "libcst.Pass": {
     "line number": [
      13
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      12
     ]
    },
    "str": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_leaf_small_statements.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_leaf_small_statements.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_list": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_list.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_list.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_list.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_list.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_list.ListTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_list.ListTest.test_invalid": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      110
     ]
    },
    "libcst.Element": {
     "line number": [
      101
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      102,
      102
     ]
    },
    "libcst.List": {
     "line number": [
      100
     ]
    },
    "libcst.Name": {
     "line number": [
      101
     ]
    },
    "libcst.RightParen": {
     "line number": [
      103
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      97
     ]
    },
    "str": {
     "line number": [
      110
     ]
    },
    "typing.Callable": {
     "line number": [
      110
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_list.ListTest.test_valid": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "libcst.Comma": {
     "line number": [
      80
     ]
    },
    "libcst.Element": {
     "line number": [
      25,
      32,
      47,
      47,
      55,
      80,
      81
     ]
    },
    "libcst.For": {
     "line number": [
      77
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      56
     ]
    },
    "libcst.LeftSquareBracket": {
     "line number": [
      33
     ]
    },
    "libcst.List": {
     "line number": [
      22,
      25,
      31,
      46,
      54,
      65,
      78
     ]
    },
    "libcst.Name": {
     "line number": [
      25,
      32,
      47,
      47,
      55,
      67,
      68,
      80,
      81,
      84
     ]
    },
    "libcst.Pass": {
     "line number": [
      85
     ]
    },
    "libcst.RightParen": {
     "line number": [
      57
     ]
    },
    "libcst.RightSquareBracket": {
     "line number": [
      36
     ]
    },
    "libcst.SimpleStatementSuite": {
     "line number": [
      85
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      34,
      37,
      86,
      87
     ]
    },
    "libcst.StarredElement": {
     "line number": [
      67,
      68
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      42,
      61,
      73
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      22,
      27,
      41
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      90
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      19
     ]
    },
    "typing.Any": {
     "line number": [
      94
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_list.ListTest.test_versions": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.parse_expression_as": {
     "line number": [
      118,
      123
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      114
     ]
    },
    "typing.Any": {
     "line number": [
      128
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_list.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_list.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_list.parse_expression": {
  "data": {
   "shadows": "libcst.parse_expression"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_list.parse_expression_as": {
  "data": {
   "shadows": "libcst._nodes.tests.base.parse_expression_as"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_list.parse_statement": {
  "data": {
   "shadows": "libcst.parse_statement"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_matrix_multiply": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_matrix_multiply.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_matrix_multiply.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_matrix_multiply.NamedExprTest": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_matrix_multiply.NamedExprTest.test_valid": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "libcst.AugAssign": {
     "line number": [
      32
     ]
    },
    "libcst.BinaryOperation": {
     "line number": [
      21
     ]
    },
    "libcst.MatrixMultiply": {
     "line number": [
      23
     ]
    },
    "libcst.MatrixMultiplyAssign": {
     "line number": [
      34
     ]
    },
    "libcst.Name": {
     "line number": [
      22,
      24,
      33,
      35
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      30
     ]
    },
    "libcst._nodes.tests.base.parse_expression_as": {
     "line number": [
      27
     ]
    },
    "libcst._nodes.tests.base.parse_statement_as": {
     "line number": [
      40
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      18
     ]
    },
    "typing.Any": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_matrix_multiply.NamedExprTest.test_versions": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.parse_expression_as": {
     "line number": [
      51,
      56
     ]
    },
    "libcst._nodes.tests.base.parse_statement_as": {
     "line number": [
      61,
      66
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      47
     ]
    },
    "typing.Any": {
     "line number": [
      71
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_matrix_multiply.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_matrix_multiply.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_matrix_multiply.parse_expression_as": {
  "data": {
   "shadows": "libcst._nodes.tests.base.parse_expression_as"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_matrix_multiply.parse_statement_as": {
  "data": {
   "shadows": "libcst._nodes.tests.base.parse_statement_as"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_module": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_module.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_module.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_module.MetadataWrapper": {
  "data": {
   "shadows": "libcst.metadata.MetadataWrapper"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_module.ModuleTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_module.ModuleTest.cmp_position": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": {
    "int": {
     "line number": [
      140,
      140,
      140,
      140
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      140,
      142
     ]
    },
    "typing.Tuple": {
     "line number": [
      140,
      140
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_module.ModuleTest.test_code_and_bytes_properties": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.Comment": {
     "line number": [
      31,
      32,
      51
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      31,
      32,
      51
     ]
    },
    "libcst.Module": {
     "line number": [
      59,
      19,
      22,
      29,
      38,
      45,
      48
     ]
    },
    "libcst.Pass": {
     "line number": [
      19,
      23,
      30,
      39
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      19,
      23,
      30,
      39
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "str": {
     "line number": [
      59
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_module.ModuleTest.test_code_for_node": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      73
     ]
    },
    "libcst.Module": {
     "line number": [
      73,
      65,
      66,
      68
     ]
    },
    "libcst.Newline": {
     "line number": [
      65,
      66,
      68
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      63
     ]
    },
    "str": {
     "line number": [
      73
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_module.ModuleTest.test_function_position": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      149
     ]
    },
    "libcst.Pass": {
     "line number": [
      151
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      150
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      145
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      147
     ]
    },
    "libcst.parse_module": {
     "line number": [
      145
     ]
    },
    "typing.cast": {
     "line number": [
      149,
      150,
      151
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_module.ModuleTest.test_module_config_for_parsing": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": {
    "libcst.If": {
     "line number": [
      195
     ]
    },
    "libcst.IndentedBlock": {
     "line number": [
      197
     ]
    },
    "libcst.Name": {
     "line number": [
      196
     ]
    },
    "libcst.Newline": {
     "line number": [
      200
     ]
    },
    "libcst.Pass": {
     "line number": [
      198
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      198
     ]
    },
    "libcst.TrailingWhitespace": {
     "line number": [
      199
     ]
    },
    "libcst.parse_module": {
     "line number": [
      189
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      190
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_module.ModuleTest.test_module_position": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": {
    "libcst.metadata.CodeRange": {
     "line number": [
      133,
      120,
      121,
      124,
      126,
      129
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      134
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      135
     ]
    },
    "libcst.parse_module": {
     "line number": [
      134
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      118
     ]
    },
    "str": {
     "line number": [
      133
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_module.ModuleTest.test_multiline_string_position": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": {
    "libcst.Expr": {
     "line number": [
      181
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      180
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      176
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      178
     ]
    },
    "libcst.parse_module": {
     "line number": [
      176
     ]
    },
    "typing.cast": {
     "line number": [
      180,
      181
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_module.ModuleTest.test_nested_indent_position": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": {
    "libcst.Else": {
     "line number": [
      166
     ]
    },
    "libcst.If": {
     "line number": [
      162,
      163
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      164,
      167
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      156
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      160
     ]
    },
    "libcst.parse_module": {
     "line number": [
      157
     ]
    },
    "typing.cast": {
     "line number": [
      162,
      163,
      164,
      166,
      167
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_module.ModuleTest.test_parser": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": {
    "libcst.Comment": {
     "line number": [
      90,
      105,
      109,
      110
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      90,
      109,
      110
     ]
    },
    "libcst.Module": {
     "line number": [
      115,
      81,
      85,
      89,
      95,
      99
     ]
    },
    "libcst.Pass": {
     "line number": [
      95,
      102
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      95,
      101
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      104
     ]
    },
    "libcst.TrailingWhitespace": {
     "line number": [
      103
     ]
    },
    "libcst.parse_module": {
     "line number": [
      116
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      77
     ]
    },
    "str": {
     "line number": [
      115
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_module.PositionProvider": {
  "data": {
   "shadows": "libcst.metadata.PositionProvider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_module.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_module.cast": {
  "data": {
   "shadows": "typing.cast"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_module.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_module.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_module.parse_module": {
  "data": {
   "shadows": "libcst.parse_module"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_module.parse_statement": {
  "data": {
   "shadows": "libcst.parse_statement"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_namedexpr": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_namedexpr.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_namedexpr.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_namedexpr.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_namedexpr.NamedExprTest": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_namedexpr.NamedExprTest.test_invalid": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": {
    "libcst.LeftParen": {
     "line number": [
      114
     ]
    },
    "libcst.Name": {
     "line number": [
      114,
      114,
      122,
      122
     ]
    },
    "libcst.NamedExpr": {
     "line number": [
      113,
      121
     ]
    },
    "libcst.RightParen": {
     "line number": [
      122
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      109
     ]
    },
    "typing.Any": {
     "line number": [
      129
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_namedexpr.NamedExprTest.test_valid": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "libcst.Call": {
     "line number": [
      70,
      82
     ]
    },
    "libcst.Float": {
     "line number": [
      34
     ]
    },
    "libcst.If": {
     "line number": [
      79,
      91
     ]
    },
    "libcst.Integer": {
     "line number": [
      44,
      94
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      42,
      54
     ]
    },
    "libcst.Name": {
     "line number": [
      34,
      43,
      55,
      58,
      69,
      70,
      81,
      82,
      93
     ]
    },
    "libcst.NamedExpr": {
     "line number": [
      34,
      41,
      53,
      68,
      80,
      92
     ]
    },
    "libcst.Pass": {
     "line number": [
      72,
      84,
      98
     ]
    },
    "libcst.RightParen": {
     "line number": [
      45,
      59
     ]
    },
    "libcst.SimpleStatementSuite": {
     "line number": [
      72,
      84,
      98
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      54,
      56,
      57,
      59,
      95,
      96
     ]
    },
    "libcst.While": {
     "line number": [
      67
     ]
    },
    "libcst._nodes.tests.test_namedexpr._parse_expression_force_38": {
     "line number": [
      48,
      62
     ]
    },
    "libcst._nodes.tests.test_namedexpr._parse_statement_force_38": {
     "line number": [
      75,
      87,
      101
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      49,
      63
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      30
     ]
    },
    "typing.Any": {
     "line number": [
      106
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_namedexpr._parse_expression_force_38": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "libcst.BaseExpression": {
     "line number": [
      14
     ]
    },
    "libcst.PartialParserConfig": {
     "line number": [
      16
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      15
     ]
    },
    "str": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_namedexpr._parse_statement_force_38": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      25
     ]
    },
    "isinstance": {
     "line number": [
      24
     ]
    },
    "libcst.BaseCompoundStatement": {
     "line number": [
      24,
      20
     ]
    },
    "libcst.PartialParserConfig": {
     "line number": [
      22
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      21
     ]
    },
    "str": {
     "line number": [
      20
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_namedexpr.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_namedexpr.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_newline": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_newline.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_newline.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_newline.NewlineTest": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_newline.NewlineTest.test_invalid": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      32
     ]
    },
    "libcst.Newline": {
     "line number": [
      26,
      27,
      28
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      24
     ]
    },
    "str": {
     "line number": [
      32
     ]
    },
    "typing.Callable": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_newline.NewlineTest.test_valid": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      21
     ]
    },
    "libcst.Newline": {
     "line number": [
      16,
      17,
      18
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      14
     ]
    },
    "str": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_newline.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_newline.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_nonlocal": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_nonlocal.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_nonlocal.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_nonlocal.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_nonlocal.NonlocalConstructionTest": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_nonlocal.NonlocalConstructionTest.test_invalid": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "libcst.Comma": {
     "line number": [
      73
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      83
     ]
    },
    "libcst.Name": {
     "line number": [
      65,
      73,
      82
     ]
    },
    "libcst.NameItem": {
     "line number": [
      65,
      73,
      81
     ]
    },
    "libcst.Nonlocal": {
     "line number": [
      59,
      64,
      72,
      79
     ]
    },
    "libcst.RightParen": {
     "line number": [
      83
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      66
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      55
     ]
    },
    "typing.Any": {
     "line number": [
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_nonlocal.NonlocalConstructionTest.test_valid": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "libcst.Comma": {
     "line number": [
      38
     ]
    },
    "libcst.Name": {
     "line number": [
      21,
      27,
      27,
      37,
      43
     ]
    },
    "libcst.NameItem": {
     "line number": [
      21,
      27,
      27,
      36,
      43
     ]
    },
    "libcst.Nonlocal": {
     "line number": [
      21,
      26,
      34
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      39,
      40,
      45
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      30,
      48
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      17
     ]
    },
    "typing.Any": {
     "line number": [
      52
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_nonlocal.NonlocalParsingTest": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      96
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_nonlocal.NonlocalParsingTest.test_valid": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "libcst.Comma": {
     "line number": [
      110,
      123
     ]
    },
    "libcst.Name": {
     "line number": [
      101,
      109,
      112,
      122,
      128
     ]
    },
    "libcst.NameItem": {
     "line number": [
      101,
      108,
      112,
      121,
      128
     ]
    },
    "libcst.Nonlocal": {
     "line number": [
      101,
      106,
      119
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      139
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      110,
      124,
      125,
      130
     ]
    },
    "libcst.helpers.ensure_type": {
     "line number": [
      138
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      139
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      97
     ]
    },
    "typing.Any": {
     "line number": [
      136
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_nonlocal.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_nonlocal.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_nonlocal.ensure_type": {
  "data": {
   "shadows": "libcst.helpers.ensure_type"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_nonlocal.parse_statement": {
  "data": {
   "shadows": "libcst.parse_statement"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_number": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_number.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_number.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_number.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_number.NumberTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_number.NumberTest.test_invalid": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      129
     ]
    },
    "libcst.Float": {
     "line number": [
      111,
      115
     ]
    },
    "libcst.Imaginary": {
     "line number": [
      119,
      123
     ]
    },
    "libcst.Integer": {
     "line number": [
      103,
      107
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      103,
      111,
      119
     ]
    },
    "libcst.RightParen": {
     "line number": [
      107,
      115,
      123
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      100
     ]
    },
    "str": {
     "line number": [
      129
     ]
    },
    "typing.Callable": {
     "line number": [
      129
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_number.NumberTest.test_valid": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      93,
      95
     ]
    },
    "libcst.Integer": {
     "line number": [
      19,
      22,
      32,
      43,
      56,
      65,
      78
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      30,
      41,
      44,
      67,
      67,
      76,
      80,
      80
     ]
    },
    "libcst.Minus": {
     "line number": [
      22,
      31,
      42,
      54,
      56
     ]
    },
    "libcst.Plus": {
     "line number": [
      77
     ]
    },
    "libcst.RightParen": {
     "line number": [
      33,
      44,
      46,
      68,
      68,
      81,
      81,
      83
     ]
    },
    "libcst.UnaryOperation": {
     "line number": [
      22,
      29,
      40,
      53,
      55,
      75
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      96,
      25,
      37,
      50,
      61,
      72,
      87
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      19,
      24,
      36,
      49,
      60,
      71,
      86
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "str": {
     "line number": [
      94,
      95
     ]
    },
    "typing.Callable": {
     "line number": [
      95
     ]
    },
    "typing.Optional": {
     "line number": [
      95,
      96
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_number.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_number.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_number.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_number.parse_expression": {
  "data": {
   "shadows": "libcst.parse_expression"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_raise": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_raise.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_raise.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_raise.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_raise.RaiseConstructionTest": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_raise.RaiseConstructionTest.test_invalid": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": {
    "libcst.Call": {
     "line number": [
      94
     ]
    },
    "libcst.From": {
     "line number": [
      88,
      102,
      112
     ]
    },
    "libcst.Name": {
     "line number": [
      88,
      94,
      101,
      103,
      111,
      113
     ]
    },
    "libcst.Raise": {
     "line number": [
      88,
      93,
      100,
      110
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      95,
      104,
      114
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      84
     ]
    },
    "typing.Any": {
     "line number": [
      121
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_raise.RaiseConstructionTest.test_valid": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "libcst.Call": {
     "line number": [
      23,
      30,
      37,
      56,
      68
     ]
    },
    "libcst.From": {
     "line number": [
      30,
      42,
      57,
      69
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      39,
      44
     ]
    },
    "libcst.Name": {
     "line number": [
      23,
      30,
      30,
      38,
      43,
      56,
      58,
      68,
      70
     ]
    },
    "libcst.Raise": {
     "line number": [
      20,
      23,
      29,
      36,
      55,
      67
     ]
    },
    "libcst.RightParen": {
     "line number": [
      40,
      44
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      46,
      47,
      49,
      59,
      71,
      72,
      74
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      25,
      52,
      63,
      77
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      17
     ]
    },
    "typing.Any": {
     "line number": [
      81
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_raise.RaiseParsingTest": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      125
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_raise.RaiseParsingTest.test_valid": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": {
    "libcst.Call": {
     "line number": [
      133,
      141,
      154,
      172,
      185
     ]
    },
    "libcst.From": {
     "line number": [
      142,
      159,
      173,
      186
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      156,
      161
     ]
    },
    "libcst.Name": {
     "line number": [
      133,
      141,
      143,
      155,
      160,
      172,
      174,
      185,
      187
     ]
    },
    "libcst.Raise": {
     "line number": [
      129,
      132,
      140,
      153,
      171,
      184
     ]
    },
    "libcst.RightParen": {
     "line number": [
      157,
      161
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      200
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      134,
      144,
      145,
      147,
      163,
      164,
      166,
      175,
      176,
      178,
      188,
      189,
      191
     ]
    },
    "libcst.helpers.ensure_type": {
     "line number": [
      199
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      200
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      126
     ]
    },
    "typing.Any": {
     "line number": [
      197
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_raise.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_raise.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_raise.ensure_type": {
  "data": {
   "shadows": "libcst.helpers.ensure_type"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_raise.parse_statement": {
  "data": {
   "shadows": "libcst.parse_statement"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_removal_behavior": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_removal_behavior.CSTNodeT": {
  "data": {
   "shadows": "libcst._types.CSTNodeT"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_removal_behavior.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_removal_behavior.CSTTransformer": {
  "data": {
   "shadows": "libcst._visitors.CSTTransformer"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_removal_behavior.ContinueStatementRemovalVisitor": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "libcst._visitors.CSTTransformer": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_removal_behavior.ContinueStatementRemovalVisitor.on_leave": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      30
     ]
    },
    "libcst.Continue": {
     "line number": [
      30
     ]
    },
    "libcst.RemovalSentinel": {
     "line number": [
      29
     ]
    },
    "libcst.RemoveFromParent": {
     "line number": [
      31
     ]
    },
    "libcst._types.CSTNodeT": {
     "line number": [
      28,
      28,
      29
     ]
    },
    "typing.Union": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_removal_behavior.IfStatementRemovalVisitor": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst._visitors.CSTTransformer": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_removal_behavior.IfStatementRemovalVisitor.on_leave": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      20
     ]
    },
    "libcst.If": {
     "line number": [
      20
     ]
    },
    "libcst.RemovalSentinel": {
     "line number": [
      19
     ]
    },
    "libcst.RemoveFromParent": {
     "line number": [
      21
     ]
    },
    "libcst._types.CSTNodeT": {
     "line number": [
      18,
      18,
      19
     ]
    },
    "typing.Union": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_removal_behavior.RemovalBehavior": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      52
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_removal_behavior.RemovalBehavior.test_removal_pass_behavior": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      98
     ]
    },
    "libcst._nodes.tests.test_removal_behavior.ContinueStatementRemovalVisitor": {
     "line number": [
      56,
      62,
      73,
      85,
      90
     ]
    },
    "libcst._nodes.tests.test_removal_behavior.IfStatementRemovalVisitor": {
     "line number": [
      57,
      67
     ]
    },
    "libcst._nodes.tests.test_removal_behavior.SpecificImportRemovalVisitor": {
     "line number": [
      79
     ]
    },
    "libcst._visitors.CSTTransformer": {
     "line number": [
      95
     ]
    },
    "libcst.parse_module": {
     "line number": [
      101,
      106
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      53
     ]
    },
    "str": {
     "line number": [
      95,
      95
     ]
    },
    "typing.Type": {
     "line number": [
      95
     ]
    },
    "visitor": {
     "line number": [
      102,
      107
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_removal_behavior.RemovalSentinel": {
  "data": {
   "shadows": "libcst.RemovalSentinel"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_removal_behavior.SpecificImportRemovalVisitor": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "libcst._visitors.CSTTransformer": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_removal_behavior.SpecificImportRemovalVisitor.on_leave": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      40,
      43,
      45,
      47
     ]
    },
    "libcst.Import": {
     "line number": [
      40,
      39
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      45,
      39
     ]
    },
    "libcst.Name": {
     "line number": [
      43,
      47
     ]
    },
    "libcst.RemovalSentinel": {
     "line number": [
      39
     ]
    },
    "libcst.RemoveFromParent": {
     "line number": [
      44,
      48
     ]
    },
    "libcst._types.CSTNodeT": {
     "line number": [
      38,
      38,
      39
     ]
    },
    "typing.Union": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_removal_behavior.Type": {
  "data": {
   "shadows": "typing.Type"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_removal_behavior.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_removal_behavior.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_removal_behavior.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_removal_behavior.parse_module": {
  "data": {
   "shadows": "libcst.parse_module"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_return": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_return.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_return.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_return.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_return.ReturnCreateTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_return.ReturnCreateTest.test_invalid": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      37
     ]
    },
    "libcst.Return": {
     "line number": [
      36
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      37
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      33
     ]
    },
    "typing.Any": {
     "line number": [
      43
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_return.ReturnCreateTest.test_valid": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      24
     ]
    },
    "libcst.Return": {
     "line number": [
      19,
      24
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      19,
      24
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      21,
      26
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "typing.Any": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_return.ReturnParseTest": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_return.ReturnParseTest.test_valid": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "libcst.LeftParen": {
     "line number": [
      86
     ]
    },
    "libcst.Name": {
     "line number": [
      61,
      73,
      85,
      99
     ]
    },
    "libcst.Return": {
     "line number": [
      52,
      60,
      72,
      84,
      98
     ]
    },
    "libcst.RightParen": {
     "line number": [
      86
     ]
    },
    "libcst.Semicolon": {
     "line number": [
      101
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      51,
      58,
      70,
      82,
      96
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      52,
      62,
      74,
      88,
      100
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      55,
      67,
      79,
      93,
      106
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      48
     ]
    },
    "typing.Any": {
     "line number": [
      110
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_return.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_return.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_return.parse_statement": {
  "data": {
   "shadows": "libcst.parse_statement"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_set": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_set.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_set.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_set.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_set.ListTest": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_set.ListTest.test_invalid": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      117
     ]
    },
    "libcst.Element": {
     "line number": [
      107
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      108,
      108
     ]
    },
    "libcst.Name": {
     "line number": [
      107
     ]
    },
    "libcst.RightParen": {
     "line number": [
      109
     ]
    },
    "libcst.Set": {
     "line number": [
      106,
      113
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      103
     ]
    },
    "str": {
     "line number": [
      117
     ]
    },
    "typing.Callable": {
     "line number": [
      117
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_set.ListTest.test_valid": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "libcst.Comma": {
     "line number": [
      79
     ]
    },
    "libcst.CompFor": {
     "line number": [
      73
     ]
    },
    "libcst.CompIf": {
     "line number": [
      87
     ]
    },
    "libcst.Element": {
     "line number": [
      22,
      29,
      43,
      43,
      51,
      77,
      83
     ]
    },
    "libcst.GeneratorExp": {
     "line number": [
      71
     ]
    },
    "libcst.LeftCurlyBrace": {
     "line number": [
      30
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      52
     ]
    },
    "libcst.Name": {
     "line number": [
      22,
      29,
      43,
      43,
      51,
      62,
      63,
      72,
      74,
      78,
      83,
      88
     ]
    },
    "libcst.RightCurlyBrace": {
     "line number": [
      33
     ]
    },
    "libcst.RightParen": {
     "line number": [
      53
     ]
    },
    "libcst.Set": {
     "line number": [
      22,
      28,
      42,
      50,
      60,
      75
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      31,
      34,
      80,
      89,
      92
     ]
    },
    "libcst.StarredElement": {
     "line number": [
      62,
      63
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      24,
      38,
      96
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      18
     ]
    },
    "typing.Any": {
     "line number": [
      100
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_set.ListTest.test_versions": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.parse_expression_as": {
     "line number": [
      125,
      130
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      121
     ]
    },
    "typing.Any": {
     "line number": [
      135
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_set.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_set.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_set.parse_expression": {
  "data": {
   "shadows": "libcst.parse_expression"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_set.parse_expression_as": {
  "data": {
   "shadows": "libcst._nodes.tests.base.parse_expression_as"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_simple_comp": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_simple_comp.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_simple_comp.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_simple_comp.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_simple_comp.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_simple_comp.PartialParserConfig": {
  "data": {
   "shadows": "libcst.PartialParserConfig"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_simple_comp.SimpleCompTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_simple_comp.SimpleCompTest.test_invalid": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": {
    "libcst.Asynchronous": {
     "line number": [
      387,
      482
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      492
     ]
    },
    "libcst.CompFor": {
     "line number": [
      346,
      355,
      364,
      373,
      384,
      396,
      407,
      418,
      429,
      445,
      461,
      464,
      476,
      479
     ]
    },
    "libcst.CompIf": {
     "line number": [
      433,
      449
     ]
    },
    "libcst.GeneratorExp": {
     "line number": [
      344,
      371,
      382,
      394,
      405,
      416,
      427,
      443,
      459,
      474
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      347,
      347,
      356,
      356,
      365,
      365
     ]
    },
    "libcst.ListComp": {
     "line number": [
      353
     ]
    },
    "libcst.Name": {
     "line number": [
      345,
      346,
      346,
      354,
      355,
      355,
      363,
      364,
      364,
      372,
      374,
      375,
      383,
      385,
      386,
      395,
      397,
      398,
      406,
      408,
      409,
      417,
      419,
      420,
      428,
      430,
      431,
      434,
      444,
      446,
      447,
      450,
      460,
      462,
      463,
      465,
      466,
      475,
      477,
      478,
      480,
      481
     ]
    },
    "libcst.RightParen": {
     "line number": [
      348,
      357,
      366
     ]
    },
    "libcst.SetComp": {
     "line number": [
      362
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      376,
      388,
      399,
      410,
      421,
      435,
      451,
      467,
      483
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      341
     ]
    },
    "str": {
     "line number": [
      492
     ]
    },
    "typing.Callable": {
     "line number": [
      492
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_simple_comp.SimpleCompTest.test_valid": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      94
     ]
    },
    "libcst.Asynchronous": {
     "line number": [
      51,
      74,
      82
     ]
    },
    "libcst.Call": {
     "line number": [
      91
     ]
    },
    "libcst.CompFor": {
     "line number": [
      21,
      30,
      39,
      48,
      71,
      97,
      111,
      129,
      132,
      144,
      148,
      160,
      188,
      208,
      227,
      243,
      272,
      282,
      295,
      305,
      318,
      328
     ]
    },
    "libcst.CompIf": {
     "line number": [
      115,
      116,
      117,
      147,
      164,
      235
     ]
    },
    "libcst.Comparison": {
     "line number": [
      269,
      292,
      315
     ]
    },
    "libcst.ComparisonTarget": {
     "line number": [
      275,
      298,
      321
     ]
    },
    "libcst.Expr": {
     "line number": [
      68
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      61
     ]
    },
    "libcst.GeneratorExp": {
     "line number": [
      20,
      46,
      69,
      95,
      109,
      127,
      142,
      158,
      225,
      270,
      280
     ]
    },
    "libcst.IndentedBlock": {
     "line number": [
      64
     ]
    },
    "libcst.Is": {
     "line number": [
      276,
      299,
      322
     ]
    },
    "libcst.LeftCurlyBrace": {
     "line number": [
      209
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      175,
      195,
      215,
      226,
      229,
      232,
      237,
      245,
      248,
      260
     ]
    },
    "libcst.LeftSquareBracket": {
     "line number": [
      189
     ]
    },
    "libcst.ListComp": {
     "line number": [
      29,
      186,
      293,
      303
     ]
    },
    "libcst.Name": {
     "line number": [
      21,
      21,
      21,
      30,
      30,
      30,
      39,
      39,
      39,
      47,
      49,
      50,
      62,
      70,
      72,
      73,
      92,
      96,
      97,
      97,
      110,
      112,
      113,
      115,
      116,
      117,
      128,
      130,
      131,
      133,
      133,
      143,
      145,
      146,
      147,
      149,
      149,
      159,
      161,
      162,
      165,
      187,
      188,
      188,
      207,
      208,
      208,
      226,
      228,
      231,
      236,
      244,
      247,
      271,
      272,
      272,
      281,
      282,
      282,
      294,
      295,
      295,
      304,
      305,
      305,
      317,
      318,
      318,
      327,
      328,
      328
     ]
    },
    "libcst.Parameters": {
     "line number": [
      63
     ]
    },
    "libcst.PartialParserConfig": {
     "line number": [
      56,
      86
     ]
    },
    "libcst.RightCurlyBrace": {
     "line number": [
      212
     ]
    },
    "libcst.RightParen": {
     "line number": [
      177,
      197,
      217,
      226,
      229,
      232,
      237,
      245,
      248,
      261
     ]
    },
    "libcst.RightSquareBracket": {
     "line number": [
      192
     ]
    },
    "libcst.SetComp": {
     "line number": [
      38,
      206,
      316,
      326
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      66
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      166,
      167,
      170,
      171,
      172,
      173,
      175,
      177,
      190,
      193,
      195,
      197,
      210,
      213,
      215,
      217,
      239,
      240,
      250,
      251,
      252,
      253,
      255,
      256,
      257,
      258,
      277,
      278,
      300,
      301,
      323,
      324
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      25,
      34,
      123,
      182,
      202,
      265
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      24,
      33,
      42,
      55,
      105,
      122,
      138,
      154,
      181,
      201,
      221,
      264,
      288,
      311,
      334
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      85
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "typing.Any": {
     "line number": [
      338
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_simple_comp.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_simple_comp.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_simple_comp.parse_expression": {
  "data": {
   "shadows": "libcst.parse_expression"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_simple_comp.parse_statement": {
  "data": {
   "shadows": "libcst.parse_statement"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_simple_statement": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_simple_statement.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_simple_statement.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_simple_statement.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_simple_statement.DummyIndentedBlock": {
  "data": {
   "shadows": "libcst._nodes.tests.base.DummyIndentedBlock"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_simple_statement.SimpleStatementTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_simple_statement.SimpleStatementTest.test_valid": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.Break": {
     "line number": [
      54,
      64
     ]
    },
    "libcst.Comment": {
     "line number": [
      270,
      304,
      315,
      328
     ]
    },
    "libcst.ConcatenatedString": {
     "line number": [
      157,
      170,
      173
     ]
    },
    "libcst.Continue": {
     "line number": [
      27,
      42,
      53,
      64
     ]
    },
    "libcst.Ellipsis": {
     "line number": [
      86,
      191,
      205,
      227,
      263
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      269,
      315,
      328
     ]
    },
    "libcst.Expr": {
     "line number": [
      71,
      76,
      81,
      86,
      92,
      97,
      102,
      110,
      124,
      137,
      149,
      156,
      169,
      190,
      204,
      226,
      262
     ]
    },
    "libcst.Float": {
     "line number": [
      97,
      125
     ]
    },
    "libcst.Imaginary": {
     "line number": [
      102,
      138
     ]
    },
    "libcst.Integer": {
     "line number": [
      92,
      111
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      112,
      126,
      139,
      192,
      207,
      229,
      232,
      235,
      265
     ]
    },
    "libcst.Name": {
     "line number": [
      71,
      76,
      81
     ]
    },
    "libcst.ParenthesizedWhitespace": {
     "line number": [
      266,
      282
     ]
    },
    "libcst.Pass": {
     "line number": [
      20,
      27,
      36,
      52,
      64,
      301,
      314,
      326,
      337,
      343
     ]
    },
    "libcst.RightParen": {
     "line number": [
      112,
      126,
      139,
      192,
      212,
      240,
      243,
      246,
      281
     ]
    },
    "libcst.Semicolon": {
     "line number": [
      27,
      37,
      52,
      53
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      20,
      26,
      34,
      50,
      63,
      71,
      76,
      81,
      86,
      92,
      97,
      102,
      108,
      122,
      135,
      149,
      154,
      167,
      188,
      202,
      224,
      260,
      300,
      313,
      325
     ]
    },
    "libcst.SimpleStatementSuite": {
     "line number": [
      337,
      342
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      149,
      158,
      158,
      171,
      174,
      176
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      38,
      39,
      172,
      175,
      208,
      213,
      230,
      233,
      236,
      241,
      244,
      247,
      276,
      286,
      303,
      343
     ]
    },
    "libcst.TrailingWhitespace": {
     "line number": [
      267,
      283,
      302
     ]
    },
    "libcst._nodes.tests.base.DummyIndentedBlock": {
     "line number": [
      323
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      59,
      119,
      184,
      256,
      296,
      309,
      319,
      333,
      339,
      346
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      22,
      30,
      46,
      58,
      73,
      78,
      83,
      88,
      94,
      99,
      104,
      118,
      132,
      145,
      151,
      164,
      183,
      198,
      221,
      255,
      295,
      308,
      318
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "typing.Any": {
     "line number": [
      350
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_simple_statement.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_simple_statement.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_simple_statement.parse_statement": {
  "data": {
   "shadows": "libcst.parse_statement"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_simple_whitespace": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_simple_whitespace.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_simple_whitespace.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_simple_whitespace.DummyIndentedBlock": {
  "data": {
   "shadows": "libcst._nodes.tests.base.DummyIndentedBlock"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_simple_whitespace.ParenthesizedWhitespaceTest": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_simple_whitespace.ParenthesizedWhitespaceTest.test_valid": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      102
     ]
    },
    "libcst.Comment": {
     "line number": [
      46,
      54,
      63,
      77,
      92
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      56,
      56,
      56,
      65,
      65,
      65,
      79,
      79,
      79
     ]
    },
    "libcst.ParenthesizedWhitespace": {
     "line number": [
      42,
      44,
      52,
      61,
      74,
      89
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      46,
      54,
      63,
      67,
      76,
      81,
      91,
      95
     ]
    },
    "libcst.TrailingWhitespace": {
     "line number": [
      45,
      53,
      62,
      75,
      90
     ]
    },
    "libcst._nodes.tests.base.DummyIndentedBlock": {
     "line number": [
      72,
      87
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      40
     ]
    },
    "str": {
     "line number": [
      102
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_simple_whitespace.SimpleWhitespaceTest": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_simple_whitespace.SimpleWhitespaceTest.test_invalid": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      34
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      28,
      29,
      30
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      26
     ]
    },
    "str": {
     "line number": [
      34
     ]
    },
    "typing.Callable": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_simple_whitespace.SimpleWhitespaceTest.test_valid": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      23
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      16,
      17,
      18,
      19,
      20
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      14
     ]
    },
    "str": {
     "line number": [
      23
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_simple_whitespace.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_simple_whitespace.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_small_statement": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_small_statement.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_small_statement.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_small_statement.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_small_statement.SmallStatementTest": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_small_statement.SmallStatementTest.test_valid": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst.Add": {
     "line number": [
      55,
      61,
      68
     ]
    },
    "libcst.BinaryOperation": {
     "line number": [
      55,
      61,
      68
     ]
    },
    "libcst.Break": {
     "line number": [
      41,
      42,
      44
     ]
    },
    "libcst.Continue": {
     "line number": [
      29,
      30,
      32
     ]
    },
    "libcst.Expr": {
     "line number": [
      54,
      60,
      67
     ]
    },
    "libcst.Name": {
     "line number": [
      55,
      55,
      61,
      61,
      68,
      68
     ]
    },
    "libcst.Pass": {
     "line number": [
      17,
      18,
      20
     ]
    },
    "libcst.Semicolon": {
     "line number": [
      18,
      21,
      30,
      33,
      42,
      45,
      62,
      69
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      22,
      23,
      34,
      35,
      46,
      47,
      70,
      71
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      27,
      39,
      51,
      75
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      15
     ]
    },
    "typing.Any": {
     "line number": [
      79
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_small_statement.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_small_statement.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_subscript": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_subscript.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_subscript.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_subscript.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_subscript.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_subscript.SubscriptTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_subscript.SubscriptTest.test_invalid": {
  "data": {
   "lineno": 437,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      459
     ]
    },
    "libcst.Index": {
     "line number": [
      442,
      450
     ]
    },
    "libcst.Integer": {
     "line number": [
      442,
      450
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      443
     ]
    },
    "libcst.Name": {
     "line number": [
      441,
      449,
      455
     ]
    },
    "libcst.RightParen": {
     "line number": [
      451
     ]
    },
    "libcst.Subscript": {
     "line number": [
      440,
      448,
      455
     ]
    },
    "libcst.SubscriptElement": {
     "line number": [
      442,
      450
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      437
     ]
    },
    "str": {
     "line number": [
      459
     ]
    },
    "typing.Callable": {
     "line number": [
      459
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_subscript.SubscriptTest.test_valid": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      429
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      427
     ]
    },
    "libcst.Colon": {
     "line number": [
      70,
      72,
      88,
      90,
      212,
      229,
      255,
      281,
      330,
      335,
      363,
      368,
      394,
      403,
      408
     ]
    },
    "libcst.Comma": {
     "line number": [
      93,
      374,
      414
     ]
    },
    "libcst.Index": {
     "line number": [
      22,
      55,
      95,
      295,
      309,
      379,
      392
     ]
    },
    "libcst.Integer": {
     "line number": [
      22,
      34,
      35,
      36,
      50,
      51,
      52,
      55,
      69,
      71,
      73,
      87,
      89,
      91,
      95,
      107,
      107,
      119,
      131,
      144,
      146,
      159,
      173,
      173,
      185,
      197,
      210,
      213,
      230,
      295,
      309,
      329,
      334,
      339,
      362,
      367,
      372,
      379,
      392,
      402,
      407,
      412
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      293,
      304,
      321,
      354
     ]
    },
    "libcst.LeftSquareBracket": {
     "line number": [
      306,
      323,
      356
     ]
    },
    "libcst.Name": {
     "line number": [
      21,
      30,
      46,
      65,
      83,
      104,
      116,
      128,
      140,
      156,
      170,
      182,
      194,
      206,
      223,
      241,
      249,
      267,
      275,
      294,
      305,
      322,
      355
     ]
    },
    "libcst.RightParen": {
     "line number": [
      296,
      313,
      346,
      384
     ]
    },
    "libcst.RightSquareBracket": {
     "line number": [
      310,
      343,
      381
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      304,
      307,
      311,
      313,
      314,
      321,
      324,
      331,
      332,
      336,
      337,
      344,
      346,
      347,
      354,
      357,
      364,
      365,
      369,
      370,
      375,
      376,
      382,
      384,
      385,
      404,
      405,
      409,
      410,
      415,
      416
     ]
    },
    "libcst.Slice": {
     "line number": [
      33,
      49,
      68,
      86,
      107,
      119,
      131,
      143,
      159,
      173,
      185,
      197,
      209,
      226,
      242,
      252,
      268,
      278,
      328,
      361,
      394,
      401
     ]
    },
    "libcst.Subscript": {
     "line number": [
      20,
      29,
      45,
      64,
      82,
      103,
      115,
      127,
      139,
      155,
      169,
      181,
      193,
      205,
      222,
      240,
      248,
      266,
      274,
      292,
      303,
      320,
      353
     ]
    },
    "libcst.SubscriptElement": {
     "line number": [
      22,
      32,
      48,
      55,
      67,
      85,
      95,
      106,
      118,
      130,
      142,
      158,
      172,
      184,
      196,
      208,
      225,
      242,
      251,
      268,
      277,
      295,
      309,
      327,
      360,
      379,
      400
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      430,
      60,
      165,
      389,
      392,
      397,
      421
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      433
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "str": {
     "line number": [
      428
     ]
    },
    "typing.Optional": {
     "line number": [
      430
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_subscript.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_subscript.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_subscript.parse_expression": {
  "data": {
   "shadows": "libcst.parse_expression"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_trailing_whitespace": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_trailing_whitespace.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_trailing_whitespace.TrailingWhitespaceTest": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_trailing_whitespace.TrailingWhitespaceTest.test_valid": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      28
     ]
    },
    "libcst.Comment": {
     "line number": [
      16,
      21
     ]
    },
    "libcst.Newline": {
     "line number": [
      17,
      22
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      15,
      20
     ]
    },
    "libcst.TrailingWhitespace": {
     "line number": [
      14,
      15,
      16,
      17,
      19
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      12
     ]
    },
    "str": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_trailing_whitespace.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_trailing_whitespace.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_try": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_try.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_try.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_try.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_try.DummyIndentedBlock": {
  "data": {
   "shadows": "libcst._nodes.tests.base.DummyIndentedBlock"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_try.TryTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_try.TryTest.test_invalid": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": {
    "libcst.AsName": {
     "line number": [
      335,
      339,
      345,
      353
     ]
    },
    "libcst.Else": {
     "line number": [
      372
     ]
    },
    "libcst.ExceptHandler": {
     "line number": [
      351,
      358,
      381,
      384,
      395,
      398
     ]
    },
    "libcst.Finally": {
     "line number": [
      373
     ]
    },
    "libcst.Name": {
     "line number": [
      335,
      340,
      346,
      353,
      360,
      400
     ]
    },
    "libcst.Pass": {
     "line number": [
      352,
      359,
      366,
      371,
      372,
      373,
      379,
      382,
      385,
      393,
      396,
      399
     ]
    },
    "libcst.SimpleStatementSuite": {
     "line number": [
      352,
      359,
      366,
      371,
      372,
      373,
      379,
      382,
      385,
      393,
      396,
      399
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      340,
      346,
      361
     ]
    },
    "libcst.Try": {
     "line number": [
      366,
      370,
      378,
      392
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      332
     ]
    },
    "typing.Any": {
     "line number": [
      408
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_try.TryTest.test_valid": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.AsName": {
     "line number": [
      55,
      71,
      76,
      159,
      193,
      198,
      227,
      232
     ]
    },
    "libcst.Comma": {
     "line number": [
      314
     ]
    },
    "libcst.Comment": {
     "line number": [
      153,
      157,
      170,
      175
     ]
    },
    "libcst.Element": {
     "line number": [
      312,
      318
     ]
    },
    "libcst.Else": {
     "line number": [
      127,
      143,
      169,
      205,
      239,
      265
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      153,
      157,
      170,
      175
     ]
    },
    "libcst.ExceptHandler": {
     "line number": [
      23,
      38,
      52,
      68,
      73,
      78,
      106,
      122,
      138,
      156,
      190,
      195,
      200,
      224,
      229,
      234,
      258,
      288,
      307
     ]
    },
    "libcst.Finally": {
     "line number": [
      95,
      111,
      144,
      174,
      206,
      240,
      268
     ]
    },
    "libcst.IndentedBlock": {
     "line number": [
      256,
      259,
      266,
      269
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      293
     ]
    },
    "libcst.Name": {
     "line number": [
      40,
      54,
      55,
      70,
      71,
      75,
      76,
      158,
      160,
      192,
      193,
      197,
      198,
      226,
      227,
      231,
      232,
      291,
      313,
      318
     ]
    },
    "libcst.Pass": {
     "line number": [
      21,
      24,
      36,
      39,
      50,
      53,
      66,
      69,
      74,
      79,
      94,
      95,
      104,
      107,
      111,
      120,
      123,
      127,
      136,
      139,
      143,
      144,
      154,
      166,
      171,
      176,
      188,
      191,
      196,
      201,
      205,
      206,
      222,
      225,
      230,
      235,
      239,
      240,
      256,
      260,
      266,
      269,
      286,
      289,
      305,
      308
     ]
    },
    "libcst.RightParen": {
     "line number": [
      294
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      256,
      260,
      266,
      269
     ]
    },
    "libcst.SimpleStatementSuite": {
     "line number": [
      21,
      24,
      36,
      39,
      50,
      53,
      66,
      69,
      74,
      79,
      94,
      95,
      104,
      107,
      111,
      120,
      123,
      127,
      136,
      139,
      143,
      144,
      154,
      166,
      171,
      176,
      188,
      191,
      196,
      201,
      205,
      206,
      222,
      225,
      230,
      235,
      239,
      240,
      286,
      289,
      305,
      308
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      25,
      80,
      108,
      124,
      140,
      161,
      162,
      164,
      165,
      172,
      177,
      179,
      202,
      236,
      262,
      290,
      309,
      315
     ]
    },
    "libcst.Try": {
     "line number": [
      20,
      35,
      49,
      65,
      93,
      103,
      119,
      135,
      152,
      187,
      221,
      255,
      285,
      304
     ]
    },
    "libcst.Tuple": {
     "line number": [
      310
     ]
    },
    "libcst._nodes.tests.base.DummyIndentedBlock": {
     "line number": [
      219,
      253
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      31,
      61,
      89,
      99,
      115,
      131,
      148,
      183,
      215
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      30,
      45,
      60,
      88,
      98,
      114,
      130,
      147,
      182,
      214,
      300,
      325
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "typing.Any": {
     "line number": [
      329
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_try.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_try.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_try.parse_statement": {
  "data": {
   "shadows": "libcst.parse_statement"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_tuple": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_tuple.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_tuple.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_tuple.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_tuple.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_tuple.TupleTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_tuple.TupleTest.test_invalid": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      263
     ]
    },
    "libcst.Element": {
     "line number": [
      224,
      232,
      241
     ]
    },
    "libcst.For": {
     "line number": [
      231,
      240,
      250
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      225,
      225
     ]
    },
    "libcst.Name": {
     "line number": [
      224,
      232,
      233,
      241,
      242,
      252,
      254
     ]
    },
    "libcst.Pass": {
     "line number": [
      234,
      243,
      255
     ]
    },
    "libcst.RightParen": {
     "line number": [
      226
     ]
    },
    "libcst.SimpleStatementSuite": {
     "line number": [
      234,
      243,
      255
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      235,
      244,
      256
     ]
    },
    "libcst.StarredElement": {
     "line number": [
      252
     ]
    },
    "libcst.Tuple": {
     "line number": [
      219,
      223,
      232,
      241,
      251
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      216
     ]
    },
    "str": {
     "line number": [
      263
     ]
    },
    "typing.Callable": {
     "line number": [
      263
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_tuple.TupleTest.test_valid": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.Comma": {
     "line number": [
      74,
      75,
      85,
      86,
      101,
      113,
      133,
      154,
      177,
      195,
      196
     ]
    },
    "libcst.Comment": {
     "line number": [
      205
     ]
    },
    "libcst.Element": {
     "line number": [
      22,
      34,
      34,
      42,
      42,
      52,
      52,
      74,
      75,
      113,
      133,
      134,
      150,
      156,
      195,
      196
     ]
    },
    "libcst.Expr": {
     "line number": [
      192
     ]
    },
    "libcst.For": {
     "line number": [
      130,
      147,
      175
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      53,
      53,
      99,
      117,
      152,
      158
     ]
    },
    "libcst.Name": {
     "line number": [
      22,
      27,
      34,
      34,
      42,
      42,
      52,
      52,
      63,
      64,
      74,
      75,
      85,
      86,
      98,
      113,
      115,
      133,
      134,
      137,
      151,
      157,
      165,
      177,
      181,
      195,
      196
     ]
    },
    "libcst.Pass": {
     "line number": [
      138,
      166,
      182
     ]
    },
    "libcst.RightParen": {
     "line number": [
      54,
      54,
      100,
      118,
      152,
      158
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      190
     ]
    },
    "libcst.SimpleStatementSuite": {
     "line number": [
      138,
      166,
      182
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      116,
      139,
      140,
      167,
      168,
      183,
      204
     ]
    },
    "libcst.StarredElement": {
     "line number": [
      27,
      63,
      64,
      85,
      86,
      97,
      114,
      177
     ]
    },
    "libcst.TrailingWhitespace": {
     "line number": [
      203
     ]
    },
    "libcst.Tuple": {
     "line number": [
      19,
      22,
      27,
      33,
      41,
      51,
      61,
      72,
      83,
      95,
      111,
      131,
      148,
      176,
      193
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      91,
      107,
      126
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      19,
      79,
      90,
      106,
      125
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      143,
      171,
      186,
      209
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "typing.Any": {
     "line number": [
      213
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_tuple.TupleTest.test_versions": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.parse_expression_as": {
     "line number": [
      271,
      276
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      267
     ]
    },
    "typing.Any": {
     "line number": [
      281
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_tuple.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_tuple.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_tuple.parse_expression": {
  "data": {
   "shadows": "libcst.parse_expression"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_tuple.parse_expression_as": {
  "data": {
   "shadows": "libcst._nodes.tests.base.parse_expression_as"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_tuple.parse_statement": {
  "data": {
   "shadows": "libcst.parse_statement"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_unary_op": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_unary_op.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_unary_op.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_unary_op.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_unary_op.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_unary_op.UnaryOperationTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_unary_op.UnaryOperationTest.test_invalid": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      86
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      66
     ]
    },
    "libcst.Name": {
     "line number": [
      66,
      72,
      79
     ]
    },
    "libcst.Not": {
     "line number": [
      78
     ]
    },
    "libcst.Plus": {
     "line number": [
      66,
      72
     ]
    },
    "libcst.RightParen": {
     "line number": [
      72
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      78
     ]
    },
    "libcst.UnaryOperation": {
     "line number": [
      65,
      71,
      77
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      62
     ]
    },
    "str": {
     "line number": [
      86
     ]
    },
    "typing.Callable": {
     "line number": [
      86
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_unary_op.UnaryOperationTest.test_valid": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.BitInvert": {
     "line number": [
      21
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      58
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      26,
      38,
      47
     ]
    },
    "libcst.Minus": {
     "line number": [
      20
     ]
    },
    "libcst.Name": {
     "line number": [
      19,
      20,
      21,
      22,
      28,
      37,
      49
     ]
    },
    "libcst.Not": {
     "line number": [
      22,
      27,
      36,
      48
     ]
    },
    "libcst.Plus": {
     "line number": [
      19
     ]
    },
    "libcst.RightParen": {
     "line number": [
      29,
      38,
      50
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      36,
      47,
      48,
      50
     ]
    },
    "libcst.UnaryOperation": {
     "line number": [
      19,
      20,
      21,
      22,
      25,
      35,
      46
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      58,
      32,
      42,
      53
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      60
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "str": {
     "line number": [
      58
     ]
    },
    "typing.Optional": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_unary_op.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_unary_op.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_unary_op.parse_expression": {
  "data": {
   "shadows": "libcst.parse_expression"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_while": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_while.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_while.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_while.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_while.DummyIndentedBlock": {
  "data": {
   "shadows": "libcst._nodes.tests.base.DummyIndentedBlock"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_while.WhileTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_while.WhileTest.test_invalid": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": {
    "libcst.Call": {
     "line number": [
      129
     ]
    },
    "libcst.Name": {
     "line number": [
      129
     ]
    },
    "libcst.Pass": {
     "line number": [
      130
     ]
    },
    "libcst.SimpleStatementSuite": {
     "line number": [
      130
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      131
     ]
    },
    "libcst.While": {
     "line number": [
      128
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      125
     ]
    },
    "typing.Any": {
     "line number": [
      137
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_while.WhileTest.test_valid": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.Call": {
     "line number": [
      21,
      29,
      41,
      54,
      65,
      77,
      96,
      111
     ]
    },
    "libcst.Comment": {
     "line number": [
      68,
      82,
      86
     ]
    },
    "libcst.Else": {
     "line number": [
      31,
      79
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      68,
      82,
      86
     ]
    },
    "libcst.IndentedBlock": {
     "line number": [
      55,
      66,
      78,
      80
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      98
     ]
    },
    "libcst.Name": {
     "line number": [
      21,
      29,
      41,
      54,
      65,
      77,
      97,
      111
     ]
    },
    "libcst.Pass": {
     "line number": [
      21,
      30,
      31,
      42,
      55,
      66,
      78,
      80,
      101,
      112
     ]
    },
    "libcst.RightParen": {
     "line number": [
      99
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      55,
      66,
      78,
      80
     ]
    },
    "libcst.SimpleStatementSuite": {
     "line number": [
      21,
      30,
      31,
      42,
      101,
      112
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      102,
      113,
      114
     ]
    },
    "libcst.While": {
     "line number": [
      20,
      28,
      40,
      53,
      64,
      76,
      95,
      110
     ]
    },
    "libcst._nodes.tests.base.DummyIndentedBlock": {
     "line number": [
      38,
      51
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      47,
      60,
      73,
      91,
      106,
      118
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      24,
      34,
      72,
      105,
      117
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "typing.Any": {
     "line number": [
      122
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_while.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_while.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_while.parse_statement": {
  "data": {
   "shadows": "libcst.parse_statement"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_with": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_with.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_with.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_with.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_with.DummyIndentedBlock": {
  "data": {
   "shadows": "libcst._nodes.tests.base.DummyIndentedBlock"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_with.PartialParserConfig": {
  "data": {
   "shadows": "libcst.PartialParserConfig"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_with.WithTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_with.WithTest.test_invalid": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": {
    "libcst.Call": {
     "line number": [
      197,
      207
     ]
    },
    "libcst.Comma": {
     "line number": [
      198
     ]
    },
    "libcst.IndentedBlock": {
     "line number": [
      189,
      201
     ]
    },
    "libcst.Name": {
     "line number": [
      197,
      207
     ]
    },
    "libcst.Pass": {
     "line number": [
      189,
      201,
      208
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      189,
      201
     ]
    },
    "libcst.SimpleStatementSuite": {
     "line number": [
      208
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      198,
      209
     ]
    },
    "libcst.With": {
     "line number": [
      188,
      194,
      206
     ]
    },
    "libcst.WithItem": {
     "line number": [
      196,
      207
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      185
     ]
    },
    "typing.Any": {
     "line number": [
      215
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_with.WithTest.test_valid": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.AsName": {
     "line number": [
      93,
      165
     ]
    },
    "libcst.Asynchronous": {
     "line number": [
      33,
      50,
      54
     ]
    },
    "libcst.Call": {
     "line number": [
      21,
      31,
      48,
      65,
      66,
      77,
      80,
      92,
      106,
      119,
      130,
      145,
      164
     ]
    },
    "libcst.Comma": {
     "line number": [
      78
     ]
    },
    "libcst.Comment": {
     "line number": [
      133
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      133
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      42
     ]
    },
    "libcst.IndentedBlock": {
     "line number": [
      45,
      120
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      147
     ]
    },
    "libcst.Name": {
     "line number": [
      21,
      31,
      43,
      48,
      65,
      66,
      77,
      80,
      92,
      93,
      106,
      119,
      130,
      146,
      164,
      166
     ]
    },
    "libcst.Parameters": {
     "line number": [
      44
     ]
    },
    "libcst.PartialParserConfig": {
     "line number": [
      37,
      58
     ]
    },
    "libcst.Pass": {
     "line number": [
      22,
      32,
      49,
      68,
      82,
      96,
      107,
      120,
      131,
      152,
      172
     ]
    },
    "libcst.RightParen": {
     "line number": [
      148
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      120
     ]
    },
    "libcst.SimpleStatementSuite": {
     "line number": [
      22,
      32,
      49,
      68,
      82,
      96,
      107,
      131,
      152,
      172
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      78,
      153,
      167,
      168,
      173,
      174
     ]
    },
    "libcst.With": {
     "line number": [
      20,
      30,
      47,
      63,
      74,
      89,
      105,
      118,
      129,
      142,
      161
     ]
    },
    "libcst.WithItem": {
     "line number": [
      21,
      31,
      48,
      65,
      66,
      76,
      80,
      91,
      106,
      119,
      130,
      144,
      163
     ]
    },
    "libcst._nodes.tests.base.DummyIndentedBlock": {
     "line number": [
      103,
      116
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      26,
      112,
      125,
      138,
      157,
      178
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      25,
      36,
      57,
      85,
      99,
      137,
      156,
      177
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "typing.Any": {
     "line number": [
      182
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_with.WithTest.test_versions": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.parse_statement_as": {
     "line number": [
      222,
      227
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      218
     ]
    },
    "typing.Any": {
     "line number": [
      232
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_with.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_with.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_with.parse_statement": {
  "data": {
   "shadows": "libcst.parse_statement"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_with.parse_statement_as": {
  "data": {
   "shadows": "libcst._nodes.tests.base.parse_statement_as"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_yield": {
  "data": {},
  "type": "module"
 },
 "libcst._nodes.tests.test_yield.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_yield.CSTNodeTest": {
  "data": {
   "shadows": "libcst._nodes.tests.base.CSTNodeTest"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_yield.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_yield.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_yield.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_yield.YieldConstructionTest": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_yield.YieldConstructionTest.test_invalid": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      132
     ]
    },
    "libcst.Call": {
     "line number": [
      114,
      123
     ]
    },
    "libcst.From": {
     "line number": [
      114,
      122
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      98
     ]
    },
    "libcst.Name": {
     "line number": [
      108,
      114,
      123
     ]
    },
    "libcst.RightParen": {
     "line number": [
      102
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      108,
      115,
      124
     ]
    },
    "libcst.Yield": {
     "line number": [
      98,
      102,
      107,
      113,
      121
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      94
     ]
    },
    "str": {
     "line number": [
      132
     ]
    },
    "typing.Callable": {
     "line number": [
      132
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_yield.YieldConstructionTest.test_valid": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      90
     ]
    },
    "libcst.Call": {
     "line number": [
      24,
      46,
      70
     ]
    },
    "libcst.From": {
     "line number": [
      24,
      45,
      69,
      81
     ]
    },
    "libcst.Integer": {
     "line number": [
      29,
      60,
      82
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      28,
      37,
      48,
      59,
      68
     ]
    },
    "libcst.Name": {
     "line number": [
      22,
      24,
      37,
      47,
      70
     ]
    },
    "libcst.RightParen": {
     "line number": [
      30,
      37,
      49,
      62,
      74
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      38,
      51,
      59,
      61,
      62,
      68,
      71,
      73,
      74,
      82
     ]
    },
    "libcst.Yield": {
     "line number": [
      20,
      22,
      24,
      27,
      36,
      44,
      58,
      67
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      90,
      41,
      77,
      85
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      17
     ]
    },
    "str": {
     "line number": [
      90
     ]
    },
    "typing.Optional": {
     "line number": [
      90
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_yield.YieldParsingTest": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.CSTNodeTest": {
     "line number": [
      137
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.tests.test_yield.YieldParsingTest.test_valid": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      217
     ]
    },
    "libcst.Call": {
     "line number": [
      153,
      181,
      206
     ]
    },
    "libcst.Expr": {
     "line number": [
      224
     ]
    },
    "libcst.From": {
     "line number": [
      152,
      180,
      205
     ]
    },
    "libcst.Integer": {
     "line number": [
      165,
      196
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      163,
      173,
      183,
      195,
      204
     ]
    },
    "libcst.Name": {
     "line number": [
      145,
      153,
      173,
      182,
      206
     ]
    },
    "libcst.RightParen": {
     "line number": [
      166,
      173,
      184,
      198,
      210
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      223
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      145,
      154,
      156,
      164,
      174,
      186,
      188,
      195,
      197,
      198,
      204,
      207,
      209,
      210
     ]
    },
    "libcst.Yield": {
     "line number": [
      141,
      144,
      151,
      162,
      172,
      179,
      194,
      203
     ]
    },
    "libcst.helpers.ensure_type": {
     "line number": [
      222,
      223
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      217
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      223
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      138
     ]
    },
    "str": {
     "line number": [
      217
     ]
    },
    "typing.Optional": {
     "line number": [
      217
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_yield.YieldParsingTest.test_versions": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": {
    "libcst._nodes.tests.base.parse_statement_as": {
     "line number": [
      232,
      237
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      228
     ]
    },
    "typing.Any": {
     "line number": [
      242
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.tests.test_yield.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_yield.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_yield.ensure_type": {
  "data": {
   "shadows": "libcst.helpers.ensure_type"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_yield.parse_statement": {
  "data": {
   "shadows": "libcst.parse_statement"
  },
  "type": "import"
 },
 "libcst._nodes.tests.test_yield.parse_statement_as": {
  "data": {
   "shadows": "libcst._nodes.tests.base.parse_statement_as"
  },
  "type": "import"
 },
 "libcst._nodes.whitespace": {
  "data": {
   "symbols_in_volume": {
    "libcst._nodes.whitespace.re": {
     "line number": [
      26,
      26,
      27,
      27,
      28,
      28
     ]
    },
    "str": {
     "line number": [
      26,
      27,
      28
     ]
    },
    "typing.Pattern": {
     "line number": [
      26,
      27,
      28
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._nodes.whitespace.ABC": {
  "data": {
   "shadows": "abc.ABC"
  },
  "type": "import"
 },
 "libcst._nodes.whitespace.BaseLeaf": {
  "data": {
   "shadows": "libcst._nodes.base.BaseLeaf"
  },
  "type": "import"
 },
 "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      31
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      31
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.whitespace.BaseParenthesizableWhitespace.empty": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "abc.abstractmethod": {
     "line number": [
      56
     ]
    },
    "bool": {
     "line number": [
      57
     ]
    },
    "property": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.whitespace.BaseValueToken": {
  "data": {
   "shadows": "libcst._nodes.base.BaseValueToken"
  },
  "type": "import"
 },
 "libcst._nodes.whitespace.CSTNode": {
  "data": {
   "shadows": "libcst._nodes.base.CSTNode"
  },
  "type": "import"
 },
 "libcst._nodes.whitespace.CSTValidationError": {
  "data": {
   "shadows": "libcst._nodes.base.CSTValidationError"
  },
  "type": "import"
 },
 "libcst._nodes.whitespace.CSTVisitorT": {
  "data": {
   "shadows": "libcst._visitors.CSTVisitorT"
  },
  "type": "import"
 },
 "libcst._nodes.whitespace.CodegenState": {
  "data": {
   "shadows": "libcst._nodes.internal.CodegenState"
  },
  "type": "import"
 },
 "libcst._nodes.whitespace.Comment": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      141
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      140
     ]
    },
    "libcst._nodes.base.BaseValueToken": {
     "line number": [
      142
     ]
    },
    "str": {
     "line number": [
      158
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.whitespace.Comment._validate": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": {
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      162
     ]
    },
    "repr": {
     "line number": [
      163
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.whitespace.EmptyLine": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      211
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      200
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      199
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      201
     ]
    },
    "libcst._nodes.whitespace.Comment": {
     "line number": [
      217
     ]
    },
    "libcst._nodes.whitespace.Newline": {
     "line number": [
      220,
      220
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      214,
      214
     ]
    },
    "typing.Optional": {
     "line number": [
      217
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.whitespace.EmptyLine._codegen_impl": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      230
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.whitespace.EmptyLine._visit_and_replace_children": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_optional": {
     "line number": [
      226
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      225,
      227
     ]
    },
    "libcst._nodes.whitespace.EmptyLine": {
     "line number": [
      223
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      222
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.whitespace.Newline": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      107
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      106
     ]
    },
    "libcst._nodes.base.BaseLeaf": {
     "line number": [
      108
     ]
    },
    "str": {
     "line number": [
      126
     ]
    },
    "typing.Optional": {
     "line number": [
      126
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.whitespace.Newline._codegen_impl": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      135
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.whitespace.Newline._validate": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": {
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      131
     ]
    },
    "repr": {
     "line number": [
      132
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.whitespace.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._nodes.whitespace.ParenthesizedWhitespace": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      263
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      241
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      240
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      242
     ]
    },
    "libcst._nodes.whitespace.EmptyLine": {
     "line number": [
      260
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      266,
      266
     ]
    },
    "libcst._nodes.whitespace.TrailingWhitespace": {
     "line number": [
      257,
      257
     ]
    },
    "typing.Sequence": {
     "line number": [
      260
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.whitespace.ParenthesizedWhitespace._codegen_impl": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      278
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.whitespace.ParenthesizedWhitespace._visit_and_replace_children": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_required": {
     "line number": [
      272,
      275
     ]
    },
    "libcst._nodes.internal.visit_sequence": {
     "line number": [
      273
     ]
    },
    "libcst._nodes.whitespace.ParenthesizedWhitespace": {
     "line number": [
      271
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      269
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.whitespace.ParenthesizedWhitespace.empty": {
  "data": {
   "lineno": 286,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      287
     ]
    },
    "property": {
     "line number": [
      286
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.whitespace.Pattern": {
  "data": {
   "shadows": "typing.Pattern"
  },
  "type": "import"
 },
 "libcst._nodes.whitespace.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst._nodes.whitespace.SimpleWhitespace": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      65
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      64
     ]
    },
    "libcst._nodes.base.BaseValueToken": {
     "line number": [
      66
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      66
     ]
    },
    "str": {
     "line number": [
      89
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.whitespace.SimpleWhitespace._validate": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": {
    "libcst._nodes.base.CSTValidationError": {
     "line number": [
      93
     ]
    },
    "repr": {
     "line number": [
      94
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.whitespace.SimpleWhitespace.empty": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      98
     ]
    },
    "len": {
     "line number": [
      103
     ]
    },
    "property": {
     "line number": [
      97
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.whitespace.TrailingWhitespace": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      168
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      167
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      169
     ]
    },
    "libcst._nodes.whitespace.Comment": {
     "line number": [
      179
     ]
    },
    "libcst._nodes.whitespace.Newline": {
     "line number": [
      182,
      182
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      176,
      176
     ]
    },
    "typing.Optional": {
     "line number": [
      179
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._nodes.whitespace.TrailingWhitespace._codegen_impl": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": {
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      191
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.whitespace.TrailingWhitespace._visit_and_replace_children": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": {
    "libcst._nodes.internal.visit_optional": {
     "line number": [
      187
     ]
    },
    "libcst._nodes.internal.visit_required": {
     "line number": [
      186,
      188
     ]
    },
    "libcst._nodes.whitespace.TrailingWhitespace": {
     "line number": [
      185
     ]
    },
    "libcst._visitors.CSTVisitorT": {
     "line number": [
      184
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._nodes.whitespace.abstractmethod": {
  "data": {
   "shadows": "abc.abstractmethod"
  },
  "type": "import"
 },
 "libcst._nodes.whitespace.add_slots": {
  "data": {
   "shadows": "libcst._add_slots.add_slots"
  },
  "type": "import"
 },
 "libcst._nodes.whitespace.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst._nodes.whitespace.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "libcst._nodes.whitespace.visit_optional": {
  "data": {
   "shadows": "libcst._nodes.internal.visit_optional"
  },
  "type": "import"
 },
 "libcst._nodes.whitespace.visit_required": {
  "data": {
   "shadows": "libcst._nodes.internal.visit_required"
  },
  "type": "import"
 },
 "libcst._nodes.whitespace.visit_sequence": {
  "data": {
   "shadows": "libcst._nodes.internal.visit_sequence"
  },
  "type": "import"
 },
 "libcst._parser": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.base_parser": {
  "data": {
   "symbols_in_volume": {
    "libcst._parser.parso.python.token.TokenType": {
     "line number": [
      41
     ]
    },
    "libcst._parser.types.token.Token": {
     "line number": [
      42
     ]
    },
    "typing.TypeVar": {
     "line number": [
      40,
      41,
      42
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._parser.base_parser.BaseParser": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      87
     ]
    },
    "libcst._parser.base_parser.StackNode": {
     "line number": [
      84
     ]
    },
    "libcst._parser.base_parser._NodeT": {
     "line number": [
      71,
      84
     ]
    },
    "libcst._parser.base_parser._TokenT": {
     "line number": [
      71,
      81
     ]
    },
    "libcst._parser.base_parser._TokenTypeT": {
     "line number": [
      71,
      84
     ]
    },
    "str": {
     "line number": [
      82
     ]
    },
    "typing.Generic": {
     "line number": [
      71
     ]
    },
    "typing.Iterable": {
     "line number": [
      81
     ]
    },
    "typing.List": {
     "line number": [
      84
     ]
    },
    "typing.Sequence": {
     "line number": [
      82
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.base_parser.BaseParser.__init__": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "libcst._parser.base_parser.StackNode": {
     "line number": [
      101
     ]
    },
    "libcst._parser.base_parser._TokenT": {
     "line number": [
      92
     ]
    },
    "str": {
     "line number": [
      93,
      95
     ]
    },
    "typing.Iterable": {
     "line number": [
      92
     ]
    },
    "typing.Sequence": {
     "line number": [
      93
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.base_parser.BaseParser._add_token": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      167
     ]
    },
    "IndexError": {
     "line number": [
      193
     ]
    },
    "KeyError": {
     "line number": [
      154
     ]
    },
    "libcst._exceptions.EOFSentinel.EOF": {
     "line number": [
      199
     ]
    },
    "libcst._exceptions.ParserSyntaxError": {
     "line number": [
      161,
      171,
      187,
      200
     ]
    },
    "libcst._exceptions.PartialParserSyntaxError": {
     "line number": [
      158
     ]
    },
    "libcst._exceptions.get_expected_str": {
     "line number": [
      184,
      199
     ]
    },
    "libcst._parser.base_parser.StackNode": {
     "line number": [
      212
     ]
    },
    "libcst._parser.base_parser._TokenT": {
     "line number": [
      139
     ]
    },
    "libcst._parser.base_parser._token_to_transition": {
     "line number": [
      148
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.base_parser.BaseParser._pop": {
  "data": {
   "lineno": 217
  },
  "type": "function"
 },
 "libcst._parser.base_parser.BaseParser.convert_nonterminal": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": {
    "libcst._parser.base_parser._NodeT": {
     "line number": [
      132,
      133
     ]
    },
    "str": {
     "line number": [
      132
     ]
    },
    "typing.Sequence": {
     "line number": [
      132
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.base_parser.BaseParser.convert_terminal": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": {
    "libcst._parser.base_parser._NodeT": {
     "line number": [
      136
     ]
    },
    "libcst._parser.base_parser._TokenT": {
     "line number": [
      136
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.base_parser.BaseParser.parse": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      107
     ]
    },
    "len": {
     "line number": [
      122,
      123,
      126
     ]
    },
    "libcst._exceptions.EOFSentinel.EOF": {
     "line number": [
      117
     ]
    },
    "libcst._exceptions.ParserSyntaxError": {
     "line number": [
      119
     ]
    },
    "libcst._exceptions.get_expected_str": {
     "line number": [
      116
     ]
    },
    "libcst._parser.base_parser._NodeT": {
     "line number": [
      104
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.base_parser.DFAState": {
  "data": {
   "shadows": "libcst._parser.parso.pgen2.generator.DFAState"
  },
  "type": "import"
 },
 "libcst._parser.base_parser.EOFSentinel": {
  "data": {
   "shadows": "libcst._exceptions.EOFSentinel"
  },
  "type": "import"
 },
 "libcst._parser.base_parser.Generic": {
  "data": {
   "shadows": "typing.Generic"
  },
  "type": "import"
 },
 "libcst._parser.base_parser.Grammar": {
  "data": {
   "shadows": "libcst._parser.parso.pgen2.generator.Grammar"
  },
  "type": "import"
 },
 "libcst._parser.base_parser.Iterable": {
  "data": {
   "shadows": "typing.Iterable"
  },
  "type": "import"
 },
 "libcst._parser.base_parser.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst._parser.base_parser.ParserSyntaxError": {
  "data": {
   "shadows": "libcst._exceptions.ParserSyntaxError"
  },
  "type": "import"
 },
 "libcst._parser.base_parser.PartialParserSyntaxError": {
  "data": {
   "shadows": "libcst._exceptions.PartialParserSyntaxError"
  },
  "type": "import"
 },
 "libcst._parser.base_parser.ReservedString": {
  "data": {
   "shadows": "libcst._parser.parso.pgen2.generator.ReservedString"
  },
  "type": "import"
 },
 "libcst._parser.base_parser.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst._parser.base_parser.StackNode": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      45
     ]
    },
    "dataclasses.field": {
     "line number": [
      48
     ]
    },
    "libcst._parser.base_parser._NodeT": {
     "line number": [
      46,
      48
     ]
    },
    "libcst._parser.base_parser._TokenTypeT": {
     "line number": [
      46
     ]
    },
    "list": {
     "line number": [
      48
     ]
    },
    "typing.Generic": {
     "line number": [
      46
     ]
    },
    "typing.List": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.base_parser.StackNode.nonterminal": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "property": {
     "line number": [
      50
     ]
    },
    "str": {
     "line number": [
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.base_parser.Token": {
  "data": {
   "shadows": "libcst._parser.types.token.Token"
  },
  "type": "import"
 },
 "libcst._parser.base_parser.TokenType": {
  "data": {
   "shadows": "libcst._parser.parso.python.token.TokenType"
  },
  "type": "import"
 },
 "libcst._parser.base_parser.TypeVar": {
  "data": {
   "shadows": "typing.TypeVar"
  },
  "type": "import"
 },
 "libcst._parser.base_parser.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst._parser.base_parser._NodeT": {
  "data": {
   "lineno": 40
  },
  "type": "constant"
 },
 "libcst._parser.base_parser._TokenT": {
  "data": {
   "lineno": 42
  },
  "type": "constant"
 },
 "libcst._parser.base_parser._TokenTypeT": {
  "data": {
   "lineno": 41
  },
  "type": "constant"
 },
 "libcst._parser.base_parser._token_to_transition": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      63
     ]
    },
    "libcst._parser.base_parser._TokenTypeT": {
     "line number": [
      56,
      57
     ]
    },
    "libcst._parser.parso.pgen2.generator.ReservedString": {
     "line number": [
      57
     ]
    },
    "str": {
     "line number": [
      56
     ]
    },
    "typing.Union": {
     "line number": [
      57
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.base_parser.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst._parser.base_parser.field": {
  "data": {
   "shadows": "dataclasses.field"
  },
  "type": "import"
 },
 "libcst._parser.base_parser.get_expected_str": {
  "data": {
   "shadows": "libcst._exceptions.get_expected_str"
  },
  "type": "import"
 },
 "libcst._parser.conversions": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.conversions.module": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.conversions.module.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._parser.conversions.module.Module": {
  "data": {
   "shadows": "libcst._nodes.module.Module"
  },
  "type": "import"
 },
 "libcst._parser.conversions.module.NEWLINE_RE": {
  "data": {
   "shadows": "libcst._nodes.whitespace.NEWLINE_RE"
  },
  "type": "import"
 },
 "libcst._parser.conversions.module.ParserConfig": {
  "data": {
   "shadows": "libcst._parser.types.config.ParserConfig"
  },
  "type": "import"
 },
 "libcst._parser.conversions.module.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst._parser.conversions.module.convert_file_input": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "len": {
     "line number": [
      18,
      24
     ]
    },
    "libcst._nodes.module.Module": {
     "line number": [
      38
     ]
    },
    "libcst._nodes.whitespace.NEWLINE_RE.fullmatch": {
     "line number": [
      25
     ]
    },
    "libcst._parser.production_decorator.with_production": {
     "line number": [
      15
     ]
    },
    "libcst._parser.types.config.ParserConfig": {
     "line number": [
      16
     ]
    },
    "typing.Any": {
     "line number": [
      16,
      16
     ]
    },
    "typing.Sequence": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.conversions.module.with_production": {
  "data": {
   "shadows": "libcst._parser.production_decorator.with_production"
  },
  "type": "import"
 },
 "libcst._parser.conversions.params": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.conversions.params.Annotation": {
  "data": {
   "shadows": "libcst._nodes.expression.Annotation"
  },
  "type": "import"
 },
 "libcst._parser.conversions.params.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._parser.conversions.params.AssignEqual": {
  "data": {
   "shadows": "libcst._nodes.op.AssignEqual"
  },
  "type": "import"
 },
 "libcst._parser.conversions.params.Comma": {
  "data": {
   "shadows": "libcst._nodes.op.Comma"
  },
  "type": "import"
 },
 "libcst._parser.conversions.params.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst._parser.conversions.params.MaybeSentinel": {
  "data": {
   "shadows": "libcst._maybe_sentinel.MaybeSentinel"
  },
  "type": "import"
 },
 "libcst._parser.conversions.params.Name": {
  "data": {
   "shadows": "libcst._nodes.expression.Name"
  },
  "type": "import"
 },
 "libcst._parser.conversions.params.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._parser.conversions.params.Param": {
  "data": {
   "shadows": "libcst._nodes.expression.Param"
  },
  "type": "import"
 },
 "libcst._parser.conversions.params.ParamSlash": {
  "data": {
   "shadows": "libcst._nodes.expression.ParamSlash"
  },
  "type": "import"
 },
 "libcst._parser.conversions.params.ParamStar": {
  "data": {
   "shadows": "libcst._nodes.expression.ParamStar"
  },
  "type": "import"
 },
 "libcst._parser.conversions.params.ParamStarPartial": {
  "data": {
   "shadows": "libcst._parser.types.partials.ParamStarPartial"
  },
  "type": "import"
 },
 "libcst._parser.conversions.params.Parameters": {
  "data": {
   "shadows": "libcst._nodes.expression.Parameters"
  },
  "type": "import"
 },
 "libcst._parser.conversions.params.ParserConfig": {
  "data": {
   "shadows": "libcst._parser.types.config.ParserConfig"
  },
  "type": "import"
 },
 "libcst._parser.conversions.params.PartialParserSyntaxError": {
  "data": {
   "shadows": "libcst._exceptions.PartialParserSyntaxError"
  },
  "type": "import"
 },
 "libcst._parser.conversions.params.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst._parser.conversions.params.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst._parser.conversions.params.convert_argslist": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "add_param": {
     "line number": [
      238,
      249,
      251
     ]
    },
    "bool": {
     "line number": [
      100
     ]
    },
    "isinstance": {
     "line number": [
      225,
      248,
      253
     ]
    },
    "len": {
     "line number": [
      253
     ]
    },
    "libcst._exceptions.PartialParserSyntaxError": {
     "line number": [
      234,
      262
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      98,
      101
     ]
    },
    "libcst._maybe_sentinel.MaybeSentinel.DEFAULT": {
     "line number": [
      98,
      101
     ]
    },
    "libcst._nodes.expression.Param": {
     "line number": [
      97,
      99,
      101,
      102,
      103,
      219
     ]
    },
    "libcst._nodes.expression.ParamSlash": {
     "line number": [
      98
     ]
    },
    "libcst._nodes.expression.ParamStar": {
     "line number": [
      101,
      249,
      253
     ]
    },
    "libcst._nodes.expression.Parameters": {
     "line number": [
      266
     ]
    },
    "libcst._nodes.op.Comma": {
     "line number": [
      240
     ]
    },
    "libcst._parser.custom_itertools.grouper": {
     "line number": [
      223
     ]
    },
    "libcst._parser.production_decorator.with_production": {
     "line number": [
      27,
      44,
      53,
      62,
      76,
      85
     ]
    },
    "libcst._parser.types.config.ParserConfig": {
     "line number": [
      95
     ]
    },
    "libcst._parser.types.partials.ParamStarPartial": {
     "line number": [
      225,
      248
     ]
    },
    "libcst._parser.whitespace_parser.parse_parenthesizable_whitespace": {
     "line number": [
      241,
      244
     ]
    },
    "tuple": {
     "line number": [
      267,
      269,
      271
     ]
    },
    "typing.Any": {
     "line number": [
      95,
      96
     ]
    },
    "typing.List": {
     "line number": [
      97,
      99,
      102,
      219
     ]
    },
    "typing.Optional": {
     "line number": [
      103,
      219
     ]
    },
    "typing.Sequence": {
     "line number": [
      95
     ]
    },
    "typing.Union": {
     "line number": [
      98,
      101
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.conversions.params.convert_argslist.add_param": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      124,
      139,
      173,
      189,
      208,
      214
     ]
    },
    "isinstance": {
     "line number": [
      115,
      128,
      144,
      158,
      175,
      194
     ]
    },
    "len": {
     "line number": [
      130
     ]
    },
    "libcst._exceptions.PartialParserSyntaxError": {
     "line number": [
      154
     ]
    },
    "libcst._nodes.expression.Param": {
     "line number": [
      106,
      106,
      107
     ]
    },
    "libcst._nodes.expression.ParamSlash": {
     "line number": [
      128
     ]
    },
    "libcst._nodes.expression.ParamStar": {
     "line number": [
      106,
      115
     ]
    },
    "str": {
     "line number": [
      144,
      158,
      175,
      194
     ]
    },
    "typing.List": {
     "line number": [
      106,
      107
     ]
    },
    "typing.Optional": {
     "line number": [
      106,
      107
     ]
    },
    "typing.Union": {
     "line number": [
      106
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.conversions.params.convert_fpdef": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": {
    "len": {
     "line number": [
      328
     ]
    },
    "libcst._nodes.expression.Annotation": {
     "line number": [
      337
     ]
    },
    "libcst._nodes.expression.Name": {
     "line number": [
      331,
      336
     ]
    },
    "libcst._nodes.expression.Param": {
     "line number": [
      347
     ]
    },
    "libcst._parser.production_decorator.with_production": {
     "line number": [
      325,
      326
     ]
    },
    "libcst._parser.types.config.ParserConfig": {
     "line number": [
      327
     ]
    },
    "libcst._parser.whitespace_parser.parse_parenthesizable_whitespace": {
     "line number": [
      338,
      341
     ]
    },
    "typing.Any": {
     "line number": [
      327,
      327
     ]
    },
    "typing.Sequence": {
     "line number": [
      327
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.conversions.params.convert_fpdef_assign": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": {
    "len": {
     "line number": [
      307
     ]
    },
    "libcst._nodes.op.AssignEqual": {
     "line number": [
      313
     ]
    },
    "libcst._parser.production_decorator.with_production": {
     "line number": [
      304,
      305
     ]
    },
    "libcst._parser.types.config.ParserConfig": {
     "line number": [
      306
     ]
    },
    "libcst._parser.whitespace_parser.parse_parenthesizable_whitespace": {
     "line number": [
      314,
      317
     ]
    },
    "typing.Any": {
     "line number": [
      306,
      306
     ]
    },
    "typing.Sequence": {
     "line number": [
      306
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.conversions.params.convert_fpdef_slash": {
  "data": {
   "lineno": 350,
   "symbols_in_volume": {
    "libcst._nodes.expression.ParamSlash": {
     "line number": [
      353
     ]
    },
    "libcst._parser.production_decorator.with_production": {
     "line number": [
      350,
      351
     ]
    },
    "libcst._parser.types.config.ParserConfig": {
     "line number": [
      352
     ]
    },
    "typing.Any": {
     "line number": [
      352,
      352
     ]
    },
    "typing.Sequence": {
     "line number": [
      352
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.conversions.params.convert_fpdef_star": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": {
    "len": {
     "line number": [
      279
     ]
    },
    "libcst._parser.production_decorator.with_production": {
     "line number": [
      276,
      277
     ]
    },
    "libcst._parser.types.config.ParserConfig": {
     "line number": [
      278
     ]
    },
    "libcst._parser.types.partials.ParamStarPartial": {
     "line number": [
      281
     ]
    },
    "libcst._parser.whitespace_parser.parse_parenthesizable_whitespace": {
     "line number": [
      286
     ]
    },
    "typing.Any": {
     "line number": [
      278,
      278
     ]
    },
    "typing.Sequence": {
     "line number": [
      278
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.conversions.params.convert_fpdef_starstar": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": {
    "libcst._parser.production_decorator.with_production": {
     "line number": [
      292,
      293
     ]
    },
    "libcst._parser.types.config.ParserConfig": {
     "line number": [
      294
     ]
    },
    "libcst._parser.whitespace_parser.parse_parenthesizable_whitespace": {
     "line number": [
      298
     ]
    },
    "typing.Any": {
     "line number": [
      294,
      294
     ]
    },
    "typing.Sequence": {
     "line number": [
      294
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.conversions.params.grouper": {
  "data": {
   "shadows": "libcst._parser.custom_itertools.grouper"
  },
  "type": "import"
 },
 "libcst._parser.conversions.params.parse_parenthesizable_whitespace": {
  "data": {
   "shadows": "libcst._parser.whitespace_parser.parse_parenthesizable_whitespace"
  },
  "type": "import"
 },
 "libcst._parser.conversions.params.with_production": {
  "data": {
   "shadows": "libcst._parser.production_decorator.with_production"
  },
  "type": "import"
 },
 "libcst._parser.conversions.terminals": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.conversions.terminals.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._parser.conversions.terminals.ParserConfig": {
  "data": {
   "shadows": "libcst._parser.types.config.ParserConfig"
  },
  "type": "import"
 },
 "libcst._parser.conversions.terminals.SimpleString": {
  "data": {
   "shadows": "libcst._nodes.expression.SimpleString"
  },
  "type": "import"
 },
 "libcst._parser.conversions.terminals.Token": {
  "data": {
   "shadows": "libcst._parser.types.token.Token"
  },
  "type": "import"
 },
 "libcst._parser.conversions.terminals.WithLeadingWhitespace": {
  "data": {
   "shadows": "libcst._parser.types.partials.WithLeadingWhitespace"
  },
  "type": "import"
 },
 "libcst._parser.conversions.terminals.convert_ASYNC": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": {
    "libcst._parser.types.config.ParserConfig": {
     "line number": [
      78
     ]
    },
    "libcst._parser.types.token.Token": {
     "line number": [
      78
     ]
    },
    "typing.Any": {
     "line number": [
      78
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.conversions.terminals.convert_AWAIT": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": {
    "libcst._parser.types.config.ParserConfig": {
     "line number": [
      82
     ]
    },
    "libcst._parser.types.token.Token": {
     "line number": [
      82
     ]
    },
    "typing.Any": {
     "line number": [
      82
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.conversions.terminals.convert_DEDENT": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "libcst._parser.types.config.ParserConfig": {
     "line number": [
      51
     ]
    },
    "libcst._parser.types.token.Token": {
     "line number": [
      51
     ]
    },
    "typing.Any": {
     "line number": [
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.conversions.terminals.convert_ENDMARKER": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "libcst._parser.types.config.ParserConfig": {
     "line number": [
      55
     ]
    },
    "libcst._parser.types.token.Token": {
     "line number": [
      55
     ]
    },
    "libcst._parser.whitespace_parser.parse_empty_lines": {
     "line number": [
      61
     ]
    },
    "typing.Any": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.conversions.terminals.convert_FSTRING_END": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "libcst._parser.types.config.ParserConfig": {
     "line number": [
      70
     ]
    },
    "libcst._parser.types.token.Token": {
     "line number": [
      70
     ]
    },
    "typing.Any": {
     "line number": [
      70
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.conversions.terminals.convert_FSTRING_START": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": {
    "libcst._parser.types.config.ParserConfig": {
     "line number": [
      66
     ]
    },
    "libcst._parser.types.token.Token": {
     "line number": [
      66
     ]
    },
    "typing.Any": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.conversions.terminals.convert_FSTRING_STRING": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": {
    "libcst._parser.types.config.ParserConfig": {
     "line number": [
      74
     ]
    },
    "libcst._parser.types.token.Token": {
     "line number": [
      74
     ]
    },
    "typing.Any": {
     "line number": [
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.conversions.terminals.convert_INDENT": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "libcst._parser.types.config.ParserConfig": {
     "line number": [
      47
     ]
    },
    "libcst._parser.types.token.Token": {
     "line number": [
      47
     ]
    },
    "typing.Any": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.conversions.terminals.convert_NAME": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "libcst._parser.types.config.ParserConfig": {
     "line number": [
      19
     ]
    },
    "libcst._parser.types.token.Token": {
     "line number": [
      19
     ]
    },
    "typing.Any": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.conversions.terminals.convert_NEWLINE": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "libcst._parser.types.config.ParserConfig": {
     "line number": [
      35
     ]
    },
    "libcst._parser.types.token.Token": {
     "line number": [
      35
     ]
    },
    "libcst._parser.whitespace_parser.parse_trailing_whitespace": {
     "line number": [
      44
     ]
    },
    "typing.Any": {
     "line number": [
      35
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.conversions.terminals.convert_NUMBER": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "libcst._parser.types.config.ParserConfig": {
     "line number": [
      23
     ]
    },
    "libcst._parser.types.token.Token": {
     "line number": [
      23
     ]
    },
    "typing.Any": {
     "line number": [
      23
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.conversions.terminals.convert_OP": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "libcst._parser.types.config.ParserConfig": {
     "line number": [
      31
     ]
    },
    "libcst._parser.types.token.Token": {
     "line number": [
      31
     ]
    },
    "typing.Any": {
     "line number": [
      31
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.conversions.terminals.convert_STRING": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "libcst._nodes.expression.SimpleString": {
     "line number": [
      28
     ]
    },
    "libcst._parser.types.config.ParserConfig": {
     "line number": [
      27
     ]
    },
    "libcst._parser.types.partials.WithLeadingWhitespace": {
     "line number": [
      28
     ]
    },
    "libcst._parser.types.token.Token": {
     "line number": [
      27
     ]
    },
    "typing.Any": {
     "line number": [
      27
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.conversions.terminals.parse_empty_lines": {
  "data": {
   "shadows": "libcst._parser.whitespace_parser.parse_empty_lines"
  },
  "type": "import"
 },
 "libcst._parser.conversions.terminals.parse_trailing_whitespace": {
  "data": {
   "shadows": "libcst._parser.whitespace_parser.parse_trailing_whitespace"
  },
  "type": "import"
 },
 "libcst._parser.custom_itertools": {
  "data": {
   "symbols_in_volume": {
    "typing.TypeVar": {
     "line number": [
      10
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._parser.custom_itertools.Iterable": {
  "data": {
   "shadows": "typing.Iterable"
  },
  "type": "import"
 },
 "libcst._parser.custom_itertools.Iterator": {
  "data": {
   "shadows": "typing.Iterator"
  },
  "type": "import"
 },
 "libcst._parser.custom_itertools.TypeVar": {
  "data": {
   "shadows": "typing.TypeVar"
  },
  "type": "import"
 },
 "libcst._parser.custom_itertools._T": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "libcst._parser.custom_itertools.grouper": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "int": {
     "line number": [
      14
     ]
    },
    "iter": {
     "line number": [
      17
     ]
    },
    "itertools.zip_longest": {
     "line number": [
      18
     ]
    },
    "libcst._parser.custom_itertools._T": {
     "line number": [
      14,
      14,
      14
     ]
    },
    "typing.Iterable": {
     "line number": [
      14
     ]
    },
    "typing.Iterator": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.custom_itertools.zip_longest": {
  "data": {
   "shadows": "itertools.zip_longest"
  },
  "type": "import"
 },
 "libcst._parser.detect_config": {
  "data": {
   "symbols_in_volume": {
    "libcst._parser.detect_config.re": {
     "line number": [
      29,
      29
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.INDENT": {
     "line number": [
      22
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.NAME": {
     "line number": [
      23
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.NEWLINE": {
     "line number": [
      24
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.STRING": {
     "line number": [
      25
     ]
    },
    "libcst._parser.parso.python.token.TokenType": {
     "line number": [
      22,
      23,
      24,
      25
     ]
    },
    "str": {
     "line number": [
      29
     ]
    },
    "typing.Pattern": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._parser.detect_config.AutoConfig": {
  "data": {
   "shadows": "libcst._parser.types.config.AutoConfig"
  },
  "type": "import"
 },
 "libcst._parser.detect_config.BytesIO": {
  "data": {
   "shadows": "io.BytesIO"
  },
  "type": "import"
 },
 "libcst._parser.detect_config.ConfigDetectionResult": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      32
     ]
    },
    "libcst._parser.types.config.ParserConfig": {
     "line number": [
      35
     ]
    },
    "libcst._parser.types.token.Token": {
     "line number": [
      37
     ]
    },
    "typing.Iterator": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.detect_config.FrozenSet": {
  "data": {
   "shadows": "typing.FrozenSet"
  },
  "type": "import"
 },
 "libcst._parser.detect_config.Iterable": {
  "data": {
   "shadows": "typing.Iterable"
  },
  "type": "import"
 },
 "libcst._parser.detect_config.Iterator": {
  "data": {
   "shadows": "typing.Iterator"
  },
  "type": "import"
 },
 "libcst._parser.detect_config.NEWLINE_RE": {
  "data": {
   "shadows": "libcst._nodes.whitespace.NEWLINE_RE"
  },
  "type": "import"
 },
 "libcst._parser.detect_config.ParserConfig": {
  "data": {
   "shadows": "libcst._parser.types.config.ParserConfig"
  },
  "type": "import"
 },
 "libcst._parser.detect_config.PartialParserConfig": {
  "data": {
   "shadows": "libcst._parser.types.config.PartialParserConfig"
  },
  "type": "import"
 },
 "libcst._parser.detect_config.Pattern": {
  "data": {
   "shadows": "typing.Pattern"
  },
  "type": "import"
 },
 "libcst._parser.detect_config.PythonTokenTypes": {
  "data": {
   "shadows": "libcst._parser.parso.python.token.PythonTokenTypes"
  },
  "type": "import"
 },
 "libcst._parser.detect_config.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "libcst._parser.detect_config.Token": {
  "data": {
   "shadows": "libcst._parser.types.token.Token"
  },
  "type": "import"
 },
 "libcst._parser.detect_config.TokenType": {
  "data": {
   "shadows": "libcst._parser.parso.python.token.TokenType"
  },
  "type": "import"
 },
 "libcst._parser.detect_config.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst._parser.detect_config._FALLBACK_DEFAULT_INDENT": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "libcst._parser.detect_config._FALLBACK_DEFAULT_NEWLINE": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "libcst._parser.detect_config._detect_default_newline": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "libcst._nodes.whitespace.NEWLINE_RE.search": {
     "line number": [
      59
     ]
    },
    "libcst._parser.detect_config._FALLBACK_DEFAULT_NEWLINE": {
     "line number": [
      60
     ]
    },
    "str": {
     "line number": [
      53,
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.detect_config._detect_encoding": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "bytes": {
     "line number": [
      40
     ]
    },
    "io.BytesIO": {
     "line number": [
      50
     ]
    },
    "isinstance": {
     "line number": [
      48
     ]
    },
    "str": {
     "line number": [
      40,
      48,
      40
     ]
    },
    "tokenize.detect_encoding": {
     "line number": [
      50
     ]
    },
    "typing.Union": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.detect_config._detect_future_imports": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "frozenset": {
     "line number": [
      115
     ]
    },
    "libcst._parser.types.token.Token": {
     "line number": [
      86
     ]
    },
    "set": {
     "line number": [
      92
     ]
    },
    "str": {
     "line number": [
      92,
      86
     ]
    },
    "typing.FrozenSet": {
     "line number": [
      86
     ]
    },
    "typing.Iterable": {
     "line number": [
      86
     ]
    },
    "typing.Set": {
     "line number": [
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.detect_config._detect_indent": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "StopIteration": {
     "line number": [
      69
     ]
    },
    "libcst._parser.detect_config._FALLBACK_DEFAULT_INDENT": {
     "line number": [
      70
     ]
    },
    "libcst._parser.types.token.Token": {
     "line number": [
      63
     ]
    },
    "next": {
     "line number": [
      68
     ]
    },
    "str": {
     "line number": [
      63
     ]
    },
    "typing.Iterable": {
     "line number": [
      63
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.detect_config._detect_trailing_newline": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      76
     ]
    },
    "len": {
     "line number": [
      77
     ]
    },
    "libcst._nodes.whitespace.NEWLINE_RE.fullmatch": {
     "line number": [
      77
     ]
    },
    "str": {
     "line number": [
      76
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.detect_config.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst._parser.detect_config.detect_config": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      122,
      123
     ]
    },
    "bytes": {
     "line number": [
      119
     ]
    },
    "isinstance": {
     "line number": [
      135,
      139,
      148,
      169,
      183
     ]
    },
    "libcst._parser.detect_config.ConfigDetectionResult": {
     "line number": [
      190,
      124
     ]
    },
    "libcst._parser.detect_config._FALLBACK_DEFAULT_NEWLINE": {
     "line number": [
      146
     ]
    },
    "libcst._parser.detect_config._detect_default_newline": {
     "line number": [
      144
     ]
    },
    "libcst._parser.detect_config._detect_encoding": {
     "line number": [
      134
     ]
    },
    "libcst._parser.detect_config._detect_future_imports": {
     "line number": [
      186
     ]
    },
    "libcst._parser.detect_config._detect_indent": {
     "line number": [
      178
     ]
    },
    "libcst._parser.detect_config._detect_trailing_newline": {
     "line number": [
      158
     ]
    },
    "libcst._parser.detect_config.itertools": {
     "line number": [
      177,
      185
     ]
    },
    "libcst._parser.parso.utils.split_lines": {
     "line number": [
      164
     ]
    },
    "libcst._parser.types.config.AutoConfig": {
     "line number": [
      135,
      148,
      169,
      183
     ]
    },
    "libcst._parser.types.config.ParserConfig": {
     "line number": [
      191
     ]
    },
    "libcst._parser.types.config.PartialParserConfig": {
     "line number": [
      121
     ]
    },
    "libcst._parser.wrapped_tokenize.tokenize_lines": {
     "line number": [
      166
     ]
    },
    "str": {
     "line number": [
      119,
      139
     ]
    },
    "typing.Union": {
     "line number": [
      119
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.detect_config.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "libcst._parser.detect_config.py_tokenize_detect_encoding": {
  "data": {
   "shadows": "tokenize.detect_encoding"
  },
  "type": "import"
 },
 "libcst._parser.detect_config.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "libcst._parser.detect_config.split_lines": {
  "data": {
   "shadows": "libcst._parser.parso.utils.split_lines"
  },
  "type": "import"
 },
 "libcst._parser.detect_config.tokenize_lines": {
  "data": {
   "shadows": "libcst._parser.wrapped_tokenize.tokenize_lines"
  },
  "type": "import"
 },
 "libcst._parser.entrypoints": {
  "data": {
   "symbols_in_volume": {
    "libcst._parser.types.config.PartialParserConfig": {
     "line number": [
      24,
      24
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._parser.entrypoints.BaseCompoundStatement": {
  "data": {
   "shadows": "libcst._nodes.statement.BaseCompoundStatement"
  },
  "type": "import"
 },
 "libcst._parser.entrypoints.BaseExpression": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseExpression"
  },
  "type": "import"
 },
 "libcst._parser.entrypoints.CSTNode": {
  "data": {
   "shadows": "libcst._nodes.base.CSTNode"
  },
  "type": "import"
 },
 "libcst._parser.entrypoints.Module": {
  "data": {
   "shadows": "libcst._nodes.module.Module"
  },
  "type": "import"
 },
 "libcst._parser.entrypoints.PartialParserConfig": {
  "data": {
   "shadows": "libcst._parser.types.config.PartialParserConfig"
  },
  "type": "import"
 },
 "libcst._parser.entrypoints.PythonCSTParser": {
  "data": {
   "shadows": "libcst._parser.python_parser.PythonCSTParser"
  },
  "type": "import"
 },
 "libcst._parser.entrypoints.SimpleStatementLine": {
  "data": {
   "shadows": "libcst._nodes.statement.SimpleStatementLine"
  },
  "type": "import"
 },
 "libcst._parser.entrypoints.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst._parser.entrypoints._parse": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      32,
      33
     ]
    },
    "bytes": {
     "line number": [
      29
     ]
    },
    "isinstance": {
     "line number": [
      52
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      52,
      34
     ]
    },
    "libcst._parser.detect_config.detect_config": {
     "line number": [
      35
     ]
    },
    "libcst._parser.grammar.get_grammar": {
     "line number": [
      42
     ]
    },
    "libcst._parser.grammar.validate_grammar": {
     "line number": [
      41
     ]
    },
    "libcst._parser.python_parser.PythonCSTParser": {
     "line number": [
      44
     ]
    },
    "libcst._parser.types.config.PartialParserConfig": {
     "line number": [
      30
     ]
    },
    "str": {
     "line number": [
      28,
      29
     ]
    },
    "typing.Union": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.entrypoints.detect_config": {
  "data": {
   "shadows": "libcst._parser.detect_config.detect_config"
  },
  "type": "import"
 },
 "libcst._parser.entrypoints.get_grammar": {
  "data": {
   "shadows": "libcst._parser.grammar.get_grammar"
  },
  "type": "import"
 },
 "libcst._parser.entrypoints.parse_expression": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      129
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      129,
      113
     ]
    },
    "libcst._parser.entrypoints._parse": {
     "line number": [
      122
     ]
    },
    "libcst._parser.types.config.PartialParserConfig": {
     "line number": [
      112
     ]
    },
    "str": {
     "line number": [
      112
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.entrypoints.parse_module": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "bytes": {
     "line number": [
      57
     ]
    },
    "isinstance": {
     "line number": [
      78
     ]
    },
    "libcst._nodes.module.Module": {
     "line number": [
      78,
      59
     ]
    },
    "libcst._parser.entrypoints._parse": {
     "line number": [
      71
     ]
    },
    "libcst._parser.types.config.PartialParserConfig": {
     "line number": [
      58
     ]
    },
    "str": {
     "line number": [
      57
     ]
    },
    "typing.Union": {
     "line number": [
      57
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.entrypoints.parse_statement": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      107
     ]
    },
    "libcst._nodes.statement.BaseCompoundStatement": {
     "line number": [
      107,
      84
     ]
    },
    "libcst._nodes.statement.SimpleStatementLine": {
     "line number": [
      107,
      84
     ]
    },
    "libcst._parser.entrypoints._parse": {
     "line number": [
      100
     ]
    },
    "libcst._parser.types.config.PartialParserConfig": {
     "line number": [
      83
     ]
    },
    "str": {
     "line number": [
      83
     ]
    },
    "typing.Union": {
     "line number": [
      84
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.entrypoints.validate_grammar": {
  "data": {
   "shadows": "libcst._parser.grammar.validate_grammar"
  },
  "type": "import"
 },
 "libcst._parser.grammar": {
  "data": {
   "symbols_in_volume": {
    "libcst._parser.conversions.expression.convert_arg_assign_comp_for": {
     "line number": [
      262
     ]
    },
    "libcst._parser.conversions.expression.convert_arglist": {
     "line number": [
      260
     ]
    },
    "libcst._parser.conversions.expression.convert_argument": {
     "line number": [
      261
     ]
    },
    "libcst._parser.conversions.expression.convert_atom": {
     "line number": [
      243
     ]
    },
    "libcst._parser.conversions.expression.convert_atom_basic": {
     "line number": [
      244
     ]
    },
    "libcst._parser.conversions.expression.convert_atom_curlybraces": {
     "line number": [
      247
     ]
    },
    "libcst._parser.conversions.expression.convert_atom_ellipses": {
     "line number": [
      255
     ]
    },
    "libcst._parser.conversions.expression.convert_atom_expr": {
     "line number": [
      233
     ]
    },
    "libcst._parser.conversions.expression.convert_atom_expr_await": {
     "line number": [
      234
     ]
    },
    "libcst._parser.conversions.expression.convert_atom_expr_trailer": {
     "line number": [
      235
     ]
    },
    "libcst._parser.conversions.expression.convert_atom_parens": {
     "line number": [
      245
     ]
    },
    "libcst._parser.conversions.expression.convert_atom_squarebrackets": {
     "line number": [
      246
     ]
    },
    "libcst._parser.conversions.expression.convert_atom_string": {
     "line number": [
      248
     ]
    },
    "libcst._parser.conversions.expression.convert_binop": {
     "line number": [
      230
     ]
    },
    "libcst._parser.conversions.expression.convert_boolop": {
     "line number": [
      225
     ]
    },
    "libcst._parser.conversions.expression.convert_comp_for": {
     "line number": [
      265
     ]
    },
    "libcst._parser.conversions.expression.convert_comp_if": {
     "line number": [
      266
     ]
    },
    "libcst._parser.conversions.expression.convert_comp_op": {
     "line number": [
      228
     ]
    },
    "libcst._parser.conversions.expression.convert_comparison": {
     "line number": [
      227
     ]
    },
    "libcst._parser.conversions.expression.convert_dictorsetmaker": {
     "line number": [
      259
     ]
    },
    "libcst._parser.conversions.expression.convert_expression_input": {
     "line number": [
      166
     ]
    },
    "libcst._parser.conversions.expression.convert_factor": {
     "line number": [
      231
     ]
    },
    "libcst._parser.conversions.expression.convert_fstring": {
     "line number": [
      249
     ]
    },
    "libcst._parser.conversions.expression.convert_fstring_content": {
     "line number": [
      250
     ]
    },
    "libcst._parser.conversions.expression.convert_fstring_conversion": {
     "line number": [
      251
     ]
    },
    "libcst._parser.conversions.expression.convert_fstring_equality": {
     "line number": [
      252
     ]
    },
    "libcst._parser.conversions.expression.convert_fstring_expr": {
     "line number": [
      253
     ]
    },
    "libcst._parser.conversions.expression.convert_fstring_format_spec": {
     "line number": [
      254
     ]
    },
    "libcst._parser.conversions.expression.convert_lambda": {
     "line number": [
      224
     ]
    },
    "libcst._parser.conversions.expression.convert_namedexpr_test": {
     "line number": [
      221
     ]
    },
    "libcst._parser.conversions.expression.convert_not_test": {
     "line number": [
      226
     ]
    },
    "libcst._parser.conversions.expression.convert_power": {
     "line number": [
      232
     ]
    },
    "libcst._parser.conversions.expression.convert_sliceop": {
     "line number": [
      241
     ]
    },
    "libcst._parser.conversions.expression.convert_star_arg": {
     "line number": [
      263
     ]
    },
    "libcst._parser.conversions.expression.convert_star_expr": {
     "line number": [
      229
     ]
    },
    "libcst._parser.conversions.expression.convert_subscript": {
     "line number": [
      240
     ]
    },
    "libcst._parser.conversions.expression.convert_subscriptlist": {
     "line number": [
      239
     ]
    },
    "libcst._parser.conversions.expression.convert_sync_comp_for": {
     "line number": [
      264
     ]
    },
    "libcst._parser.conversions.expression.convert_test": {
     "line number": [
      222
     ]
    },
    "libcst._parser.conversions.expression.convert_test_nocond": {
     "line number": [
      223
     ]
    },
    "libcst._parser.conversions.expression.convert_test_or_expr_list": {
     "line number": [
      258
     ]
    },
    "libcst._parser.conversions.expression.convert_testlist_comp_list": {
     "line number": [
      257
     ]
    },
    "libcst._parser.conversions.expression.convert_testlist_comp_tuple": {
     "line number": [
      256
     ]
    },
    "libcst._parser.conversions.expression.convert_trailer": {
     "line number": [
      236
     ]
    },
    "libcst._parser.conversions.expression.convert_trailer_arglist": {
     "line number": [
      242
     ]
    },
    "libcst._parser.conversions.expression.convert_trailer_attribute": {
     "line number": [
      237
     ]
    },
    "libcst._parser.conversions.expression.convert_trailer_subscriptlist": {
     "line number": [
      238
     ]
    },
    "libcst._parser.conversions.expression.convert_yield_arg": {
     "line number": [
      268
     ]
    },
    "libcst._parser.conversions.expression.convert_yield_expr": {
     "line number": [
      267
     ]
    },
    "libcst._parser.conversions.module.convert_file_input": {
     "line number": [
      164
     ]
    },
    "libcst._parser.conversions.params.convert_argslist": {
     "line number": [
      212
     ]
    },
    "libcst._parser.conversions.params.convert_fpdef": {
     "line number": [
      217
     ]
    },
    "libcst._parser.conversions.params.convert_fpdef_assign": {
     "line number": [
      216
     ]
    },
    "libcst._parser.conversions.params.convert_fpdef_slash": {
     "line number": [
      213
     ]
    },
    "libcst._parser.conversions.params.convert_fpdef_star": {
     "line number": [
      214
     ]
    },
    "libcst._parser.conversions.params.convert_fpdef_starstar": {
     "line number": [
      215
     ]
    },
    "libcst._parser.conversions.statement.convert_annassign": {
     "line number": [
      173
     ]
    },
    "libcst._parser.conversions.statement.convert_assert_stmt": {
     "line number": [
      193
     ]
    },
    "libcst._parser.conversions.statement.convert_assign": {
     "line number": [
      175
     ]
    },
    "libcst._parser.conversions.statement.convert_asyncable_funcdef": {
     "line number": [
      204
     ]
    },
    "libcst._parser.conversions.statement.convert_asyncable_stmt": {
     "line number": [
      210
     ]
    },
    "libcst._parser.conversions.statement.convert_augassign": {
     "line number": [
      174
     ]
    },
    "libcst._parser.conversions.statement.convert_break_stmt": {
     "line number": [
      178
     ]
    },
    "libcst._parser.conversions.statement.convert_classdef": {
     "line number": [
      206
     ]
    },
    "libcst._parser.conversions.statement.convert_compound_stmt": {
     "line number": [
      194
     ]
    },
    "libcst._parser.conversions.statement.convert_continue_stmt": {
     "line number": [
      177
     ]
    },
    "libcst._parser.conversions.statement.convert_decorated": {
     "line number": [
      209
     ]
    },
    "libcst._parser.conversions.statement.convert_decorator": {
     "line number": [
      207
     ]
    },
    "libcst._parser.conversions.statement.convert_decorators": {
     "line number": [
      208
     ]
    },
    "libcst._parser.conversions.statement.convert_del_stmt": {
     "line number": [
      179
     ]
    },
    "libcst._parser.conversions.statement.convert_dotted_as_name": {
     "line number": [
      185
     ]
    },
    "libcst._parser.conversions.statement.convert_dotted_as_names": {
     "line number": [
      187
     ]
    },
    "libcst._parser.conversions.statement.convert_dotted_name": {
     "line number": [
      188
     ]
    },
    "libcst._parser.conversions.statement.convert_except_clause": {
     "line number": [
      201
     ]
    },
    "libcst._parser.conversions.statement.convert_expr_stmt": {
     "line number": [
      172
     ]
    },
    "libcst._parser.conversions.statement.convert_for_stmt": {
     "line number": [
      199
     ]
    },
    "libcst._parser.conversions.statement.convert_funcdef": {
     "line number": [
      205
     ]
    },
    "libcst._parser.conversions.statement.convert_funcdef_annotation": {
     "line number": [
      218
     ]
    },
    "libcst._parser.conversions.statement.convert_global_stmt": {
     "line number": [
      191
     ]
    },
    "libcst._parser.conversions.statement.convert_if_stmt": {
     "line number": [
      195
     ]
    },
    "libcst._parser.conversions.statement.convert_if_stmt_elif": {
     "line number": [
      196
     ]
    },
    "libcst._parser.conversions.statement.convert_if_stmt_else": {
     "line number": [
      197
     ]
    },
    "libcst._parser.conversions.statement.convert_import_as_name": {
     "line number": [
      184
     ]
    },
    "libcst._parser.conversions.statement.convert_import_as_names": {
     "line number": [
      186
     ]
    },
    "libcst._parser.conversions.statement.convert_import_from": {
     "line number": [
      183
     ]
    },
    "libcst._parser.conversions.statement.convert_import_name": {
     "line number": [
      181
     ]
    },
    "libcst._parser.conversions.statement.convert_import_relative": {
     "line number": [
      182
     ]
    },
    "libcst._parser.conversions.statement.convert_import_stmt": {
     "line number": [
      180
     ]
    },
    "libcst._parser.conversions.statement.convert_indented_suite": {
     "line number": [
      220
     ]
    },
    "libcst._parser.conversions.statement.convert_nonlocal_stmt": {
     "line number": [
      192
     ]
    },
    "libcst._parser.conversions.statement.convert_parameters": {
     "line number": [
      211
     ]
    },
    "libcst._parser.conversions.statement.convert_pass_stmt": {
     "line number": [
      176
     ]
    },
    "libcst._parser.conversions.statement.convert_raise_stmt": {
     "line number": [
      190
     ]
    },
    "libcst._parser.conversions.statement.convert_return_stmt": {
     "line number": [
      189
     ]
    },
    "libcst._parser.conversions.statement.convert_simple_stmt_line": {
     "line number": [
      169
     ]
    },
    "libcst._parser.conversions.statement.convert_simple_stmt_partial": {
     "line number": [
      168
     ]
    },
    "libcst._parser.conversions.statement.convert_simple_stmt_suite": {
     "line number": [
      170
     ]
    },
    "libcst._parser.conversions.statement.convert_small_stmt": {
     "line number": [
      171
     ]
    },
    "libcst._parser.conversions.statement.convert_stmt": {
     "line number": [
      167
     ]
    },
    "libcst._parser.conversions.statement.convert_stmt_input": {
     "line number": [
      165
     ]
    },
    "libcst._parser.conversions.statement.convert_suite": {
     "line number": [
      219
     ]
    },
    "libcst._parser.conversions.statement.convert_try_stmt": {
     "line number": [
      200
     ]
    },
    "libcst._parser.conversions.statement.convert_while_stmt": {
     "line number": [
      198
     ]
    },
    "libcst._parser.conversions.statement.convert_with_item": {
     "line number": [
      203
     ]
    },
    "libcst._parser.conversions.statement.convert_with_stmt": {
     "line number": [
      202
     ]
    },
    "libcst._parser.conversions.terminals.convert_ASYNC": {
     "line number": [
      158
     ]
    },
    "libcst._parser.conversions.terminals.convert_AWAIT": {
     "line number": [
      159
     ]
    },
    "libcst._parser.conversions.terminals.convert_DEDENT": {
     "line number": [
      147
     ]
    },
    "libcst._parser.conversions.terminals.convert_ENDMARKER": {
     "line number": [
      148
     ]
    },
    "libcst._parser.conversions.terminals.convert_FSTRING_END": {
     "line number": [
      156
     ]
    },
    "libcst._parser.conversions.terminals.convert_FSTRING_START": {
     "line number": [
      155
     ]
    },
    "libcst._parser.conversions.terminals.convert_FSTRING_STRING": {
     "line number": [
      157
     ]
    },
    "libcst._parser.conversions.terminals.convert_INDENT": {
     "line number": [
      149
     ]
    },
    "libcst._parser.conversions.terminals.convert_NAME": {
     "line number": [
      150
     ]
    },
    "libcst._parser.conversions.terminals.convert_NEWLINE": {
     "line number": [
      151
     ]
    },
    "libcst._parser.conversions.terminals.convert_NUMBER": {
     "line number": [
      152
     ]
    },
    "libcst._parser.conversions.terminals.convert_OP": {
     "line number": [
      153
     ]
    },
    "libcst._parser.conversions.terminals.convert_STRING": {
     "line number": [
      154
     ]
    },
    "libcst._parser.types.conversions.NonterminalConversion": {
     "line number": [
      163
     ]
    },
    "libcst._parser.types.conversions.TerminalConversion": {
     "line number": [
      146
     ]
    },
    "typing.Tuple": {
     "line number": [
      146,
      163
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._parser.grammar.AutoConfig": {
  "data": {
   "shadows": "libcst._parser.types.config.AutoConfig"
  },
  "type": "import"
 },
 "libcst._parser.grammar.FrozenSet": {
  "data": {
   "shadows": "typing.FrozenSet"
  },
  "type": "import"
 },
 "libcst._parser.grammar.Grammar": {
  "data": {
   "shadows": "libcst._parser.parso.pgen2.generator.Grammar"
  },
  "type": "import"
 },
 "libcst._parser.grammar.Iterator": {
  "data": {
   "shadows": "typing.Iterator"
  },
  "type": "import"
 },
 "libcst._parser.grammar.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "libcst._parser.grammar.NonterminalConversion": {
  "data": {
   "shadows": "libcst._parser.types.conversions.NonterminalConversion"
  },
  "type": "import"
 },
 "libcst._parser.grammar.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._parser.grammar.Production": {
  "data": {
   "shadows": "libcst._parser.types.production.Production"
  },
  "type": "import"
 },
 "libcst._parser.grammar.PythonTokenTypes": {
  "data": {
   "shadows": "libcst._parser.parso.python.token.PythonTokenTypes"
  },
  "type": "import"
 },
 "libcst._parser.grammar.PythonVersionInfo": {
  "data": {
   "shadows": "libcst._parser.parso.utils.PythonVersionInfo"
  },
  "type": "import"
 },
 "libcst._parser.grammar.TerminalConversion": {
  "data": {
   "shadows": "libcst._parser.types.conversions.TerminalConversion"
  },
  "type": "import"
 },
 "libcst._parser.grammar.TokenType": {
  "data": {
   "shadows": "libcst._parser.parso.python.token.TokenType"
  },
  "type": "import"
 },
 "libcst._parser.grammar.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst._parser.grammar.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst._parser.grammar._compare_versions": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      353
     ]
    },
    "bool": {
     "line number": [
      340
     ]
    },
    "libcst._parser.parso.utils.PythonVersionInfo": {
     "line number": [
      337,
      338
     ]
    },
    "str": {
     "line number": [
      339
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.grammar._get_version_comparison": {
  "data": {
   "lineno": 328,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      333
     ]
    },
    "libcst._parser.parso.utils.PythonVersionInfo": {
     "line number": [
      328
     ]
    },
    "libcst._parser.parso.utils.parse_version_string": {
     "line number": [
      330,
      332
     ]
    },
    "str": {
     "line number": [
      328,
      328
     ]
    },
    "typing.Tuple": {
     "line number": [
      328
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.grammar._should_include": {
  "data": {
   "lineno": 356,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      358
     ]
    },
    "libcst._parser.grammar._compare_versions": {
     "line number": [
      363
     ]
    },
    "libcst._parser.grammar._get_version_comparison": {
     "line number": [
      362
     ]
    },
    "libcst._parser.parso.utils.PythonVersionInfo": {
     "line number": [
      357
     ]
    },
    "str": {
     "line number": [
      357
     ]
    },
    "typing.Optional": {
     "line number": [
      357
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.grammar._should_include_future": {
  "data": {
   "lineno": 368,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      370
     ]
    },
    "str": {
     "line number": [
      369,
      369
     ]
    },
    "typing.FrozenSet": {
     "line number": [
      369
     ]
    },
    "typing.Optional": {
     "line number": [
      369
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.grammar.convert_ASYNC": {
  "data": {
   "shadows": "libcst._parser.conversions.terminals.convert_ASYNC"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_AWAIT": {
  "data": {
   "shadows": "libcst._parser.conversions.terminals.convert_AWAIT"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_DEDENT": {
  "data": {
   "shadows": "libcst._parser.conversions.terminals.convert_DEDENT"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_ENDMARKER": {
  "data": {
   "shadows": "libcst._parser.conversions.terminals.convert_ENDMARKER"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_FSTRING_END": {
  "data": {
   "shadows": "libcst._parser.conversions.terminals.convert_FSTRING_END"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_FSTRING_START": {
  "data": {
   "shadows": "libcst._parser.conversions.terminals.convert_FSTRING_START"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_FSTRING_STRING": {
  "data": {
   "shadows": "libcst._parser.conversions.terminals.convert_FSTRING_STRING"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_INDENT": {
  "data": {
   "shadows": "libcst._parser.conversions.terminals.convert_INDENT"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_NAME": {
  "data": {
   "shadows": "libcst._parser.conversions.terminals.convert_NAME"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_NEWLINE": {
  "data": {
   "shadows": "libcst._parser.conversions.terminals.convert_NEWLINE"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_NUMBER": {
  "data": {
   "shadows": "libcst._parser.conversions.terminals.convert_NUMBER"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_OP": {
  "data": {
   "shadows": "libcst._parser.conversions.terminals.convert_OP"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_STRING": {
  "data": {
   "shadows": "libcst._parser.conversions.terminals.convert_STRING"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_annassign": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_annassign"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_arg_assign_comp_for": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_arg_assign_comp_for"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_arglist": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_arglist"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_argslist": {
  "data": {
   "shadows": "libcst._parser.conversions.params.convert_argslist"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_argument": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_argument"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_assert_stmt": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_assert_stmt"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_assign": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_assign"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_asyncable_funcdef": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_asyncable_funcdef"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_asyncable_stmt": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_asyncable_stmt"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_atom": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_atom"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_atom_basic": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_atom_basic"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_atom_curlybraces": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_atom_curlybraces"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_atom_ellipses": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_atom_ellipses"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_atom_expr": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_atom_expr"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_atom_expr_await": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_atom_expr_await"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_atom_expr_trailer": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_atom_expr_trailer"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_atom_parens": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_atom_parens"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_atom_squarebrackets": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_atom_squarebrackets"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_atom_string": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_atom_string"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_augassign": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_augassign"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_binop": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_binop"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_boolop": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_boolop"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_break_stmt": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_break_stmt"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_classdef": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_classdef"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_comp_for": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_comp_for"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_comp_if": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_comp_if"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_comp_op": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_comp_op"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_comparison": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_comparison"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_compound_stmt": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_compound_stmt"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_continue_stmt": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_continue_stmt"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_decorated": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_decorated"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_decorator": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_decorator"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_decorators": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_decorators"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_del_stmt": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_del_stmt"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_dictorsetmaker": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_dictorsetmaker"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_dotted_as_name": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_dotted_as_name"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_dotted_as_names": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_dotted_as_names"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_dotted_name": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_dotted_name"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_except_clause": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_except_clause"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_expr_stmt": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_expr_stmt"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_expression_input": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_expression_input"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_factor": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_factor"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_file_input": {
  "data": {
   "shadows": "libcst._parser.conversions.module.convert_file_input"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_for_stmt": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_for_stmt"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_fpdef": {
  "data": {
   "shadows": "libcst._parser.conversions.params.convert_fpdef"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_fpdef_assign": {
  "data": {
   "shadows": "libcst._parser.conversions.params.convert_fpdef_assign"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_fpdef_slash": {
  "data": {
   "shadows": "libcst._parser.conversions.params.convert_fpdef_slash"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_fpdef_star": {
  "data": {
   "shadows": "libcst._parser.conversions.params.convert_fpdef_star"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_fpdef_starstar": {
  "data": {
   "shadows": "libcst._parser.conversions.params.convert_fpdef_starstar"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_fstring": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_fstring"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_fstring_content": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_fstring_content"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_fstring_conversion": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_fstring_conversion"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_fstring_equality": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_fstring_equality"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_fstring_expr": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_fstring_expr"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_fstring_format_spec": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_fstring_format_spec"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_funcdef": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_funcdef"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_funcdef_annotation": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_funcdef_annotation"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_global_stmt": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_global_stmt"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_if_stmt": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_if_stmt"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_if_stmt_elif": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_if_stmt_elif"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_if_stmt_else": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_if_stmt_else"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_import_as_name": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_import_as_name"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_import_as_names": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_import_as_names"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_import_from": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_import_from"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_import_name": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_import_name"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_import_relative": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_import_relative"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_import_stmt": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_import_stmt"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_indented_suite": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_indented_suite"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_lambda": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_lambda"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_namedexpr_test": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_namedexpr_test"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_nonlocal_stmt": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_nonlocal_stmt"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_not_test": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_not_test"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_parameters": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_parameters"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_pass_stmt": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_pass_stmt"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_power": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_power"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_raise_stmt": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_raise_stmt"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_return_stmt": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_return_stmt"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_simple_stmt_line": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_simple_stmt_line"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_simple_stmt_partial": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_simple_stmt_partial"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_simple_stmt_suite": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_simple_stmt_suite"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_sliceop": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_sliceop"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_small_stmt": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_small_stmt"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_star_arg": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_star_arg"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_star_expr": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_star_expr"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_stmt": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_stmt"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_stmt_input": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_stmt_input"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_subscript": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_subscript"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_subscriptlist": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_subscriptlist"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_suite": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_suite"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_sync_comp_for": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_sync_comp_for"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_test": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_test"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_test_nocond": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_test_nocond"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_test_or_expr_list": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_test_or_expr_list"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_testlist_comp_list": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_testlist_comp_list"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_testlist_comp_tuple": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_testlist_comp_tuple"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_trailer": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_trailer"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_trailer_arglist": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_trailer_arglist"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_trailer_attribute": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_trailer_attribute"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_trailer_subscriptlist": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_trailer_subscriptlist"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_try_stmt": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_try_stmt"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_while_stmt": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_while_stmt"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_with_item": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_with_item"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_with_stmt": {
  "data": {
   "shadows": "libcst._parser.conversions.statement.convert_with_stmt"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_yield_arg": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_yield_arg"
  },
  "type": "import"
 },
 "libcst._parser.grammar.convert_yield_expr": {
  "data": {
   "shadows": "libcst._parser.conversions.expression.convert_yield_expr"
  },
  "type": "import"
 },
 "libcst._parser.grammar.generate_grammar": {
  "data": {
   "shadows": "libcst._parser.parso.pgen2.generator.generate_grammar"
  },
  "type": "import"
 },
 "libcst._parser.grammar.get_grammar": {
  "data": {
   "lineno": 289,
   "symbols_in_volume": {
    "frozenset": {
     "line number": [
      295
     ]
    },
    "functools.lru_cache": {
     "line number": [
      289
     ]
    },
    "isinstance": {
     "line number": [
      293
     ]
    },
    "libcst._parser.grammar.get_grammar_str": {
     "line number": [
      296
     ]
    },
    "libcst._parser.parso.pgen2.generator.generate_grammar": {
     "line number": [
      296
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes": {
     "line number": [
      296
     ]
    },
    "libcst._parser.parso.utils.PythonVersionInfo": {
     "line number": [
      291
     ]
    },
    "libcst._parser.types.config.AutoConfig": {
     "line number": [
      291,
      293
     ]
    },
    "str": {
     "line number": [
      291
     ]
    },
    "typing.FrozenSet": {
     "line number": [
      291
     ]
    },
    "typing.Union": {
     "line number": [
      291
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.grammar.get_grammar_str": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": {
    "libcst._parser.grammar.get_nonterminal_productions": {
     "line number": [
      281
     ]
    },
    "libcst._parser.parso.utils.PythonVersionInfo": {
     "line number": [
      272
     ]
    },
    "str": {
     "line number": [
      272,
      282,
      272
     ]
    },
    "typing.FrozenSet": {
     "line number": [
      272
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.grammar.get_nonterminal_conversions": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      406
     ]
    },
    "functools.lru_cache": {
     "line number": [
      390
     ]
    },
    "libcst._parser.grammar._should_include": {
     "line number": [
      401
     ]
    },
    "libcst._parser.grammar._should_include_future": {
     "line number": [
      403
     ]
    },
    "libcst._parser.parso.utils.PythonVersionInfo": {
     "line number": [
      392
     ]
    },
    "libcst._parser.production_decorator.get_productions": {
     "line number": [
      400
     ]
    },
    "libcst._parser.types.conversions.NonterminalConversion": {
     "line number": [
      393
     ]
    },
    "str": {
     "line number": [
      392,
      393
     ]
    },
    "typing.FrozenSet": {
     "line number": [
      392
     ]
    },
    "typing.Mapping": {
     "line number": [
      393
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.grammar.get_nonterminal_productions": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": {
    "libcst._parser.grammar._should_include": {
     "line number": [
      383
     ]
    },
    "libcst._parser.grammar._should_include_future": {
     "line number": [
      385
     ]
    },
    "libcst._parser.parso.utils.PythonVersionInfo": {
     "line number": [
      379
     ]
    },
    "libcst._parser.production_decorator.get_productions": {
     "line number": [
      382
     ]
    },
    "libcst._parser.types.production.Production": {
     "line number": [
      380
     ]
    },
    "str": {
     "line number": [
      379
     ]
    },
    "typing.FrozenSet": {
     "line number": [
      379
     ]
    },
    "typing.Iterator": {
     "line number": [
      380
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.grammar.get_productions": {
  "data": {
   "shadows": "libcst._parser.production_decorator.get_productions"
  },
  "type": "import"
 },
 "libcst._parser.grammar.get_terminal_conversions": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": {
    "functools.lru_cache": {
     "line number": [
      299
     ]
    },
    "libcst._parser.grammar.re": {
     "line number": [
      307
     ]
    },
    "libcst._parser.types.conversions.TerminalConversion": {
     "line number": [
      300
     ]
    },
    "str": {
     "line number": [
      300
     ]
    },
    "typing.Mapping": {
     "line number": [
      300
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.grammar.lru_cache": {
  "data": {
   "shadows": "functools.lru_cache"
  },
  "type": "import"
 },
 "libcst._parser.grammar.parse_version_string": {
  "data": {
   "shadows": "libcst._parser.parso.utils.parse_version_string"
  },
  "type": "import"
 },
 "libcst._parser.grammar.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "libcst._parser.grammar.validate_grammar": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      322
     ]
    },
    "all": {
     "line number": [
      316
     ]
    },
    "functools.lru_cache": {
     "line number": [
      312
     ]
    },
    "libcst._parser.production_decorator.get_productions": {
     "line number": [
      315
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.parso.pgen2": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.parso.pgen2.generator": {
  "data": {
   "symbols_in_volume": {
    "typing.TypeVar": {
     "line number": [
      43
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._parser.parso.pgen2.generator.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._parser.parso.pgen2.generator.DFAPlan": {
  "data": {
   "lineno": 46
  },
  "type": "class"
 },
 "libcst._parser.parso.pgen2.generator.DFAPlan.__init__": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "typing.Sequence": {
     "line number": [
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.generator.DFAPlan.__repr__": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "str": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.generator.DFAState": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "libcst._parser.parso.pgen2.generator._TokenTypeT": {
     "line number": [
      62
     ]
    },
    "typing.Generic": {
     "line number": [
      62
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.parso.pgen2.generator.DFAState.__eq__": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      101
     ]
    },
    "len": {
     "line number": [
      106,
      106
     ]
    },
    "libcst._parser.parso.pgen2.generator.DFAState": {
     "line number": [
      101
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.generator.DFAState.__init__": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": {
    "libcst._parser.parso.pgen2.generator.DFAPlan": {
     "line number": [
      85
     ]
    },
    "libcst._parser.parso.pgen2.generator.DFAState": {
     "line number": [
      77,
      81
     ]
    },
    "libcst._parser.parso.pgen2.generator._TokenTypeT": {
     "line number": [
      85
     ]
    },
    "libcst._parser.parso.pgen2.grammar_parser.NFAState": {
     "line number": [
      73,
      73
     ]
    },
    "str": {
     "line number": [
      73,
      77,
      81
     ]
    },
    "typing.Mapping": {
     "line number": [
      76,
      81,
      85
     ]
    },
    "typing.Set": {
     "line number": [
      73
     ]
    },
    "typing.Union": {
     "line number": [
      85
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.generator.DFAState.__repr__": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": {
    "str": {
     "line number": [
      113
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.generator.DFAState.add_arc": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      89,
      91
     ]
    },
    "libcst._parser.parso.pgen2.generator.DFAState": {
     "line number": [
      91
     ]
    },
    "str": {
     "line number": [
      89
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.generator.DFAState.unifystate": {
  "data": {
   "lineno": 94
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.generator.Generic": {
  "data": {
   "shadows": "typing.Generic"
  },
  "type": "import"
 },
 "libcst._parser.parso.pgen2.generator.Grammar": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": {
    "libcst._parser.parso.pgen2.generator._TokenTypeT": {
     "line number": [
      135
     ]
    },
    "typing.Generic": {
     "line number": [
      135
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.parso.pgen2.generator.Grammar.__init__": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": {
    "libcst._parser.parso.pgen2.generator.DFAState": {
     "line number": [
      148
     ]
    },
    "libcst._parser.parso.pgen2.generator.ReservedString": {
     "line number": [
      149
     ]
    },
    "libcst._parser.parso.pgen2.generator._TokenTypeT": {
     "line number": [
      148
     ]
    },
    "str": {
     "line number": [
      147,
      148,
      149
     ]
    },
    "typing.Mapping": {
     "line number": [
      148,
      149
     ]
    },
    "typing.Sequence": {
     "line number": [
      148
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.generator.GrammarParser": {
  "data": {
   "shadows": "libcst._parser.parso.pgen2.grammar_parser.GrammarParser"
  },
  "type": "import"
 },
 "libcst._parser.parso.pgen2.generator.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "libcst._parser.parso.pgen2.generator.NFAState": {
  "data": {
   "shadows": "libcst._parser.parso.pgen2.grammar_parser.NFAState"
  },
  "type": "import"
 },
 "libcst._parser.parso.pgen2.generator.ReservedString": {
  "data": {
   "lineno": 121
  },
  "type": "class"
 },
 "libcst._parser.parso.pgen2.generator.ReservedString.__init__": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": {
    "str": {
     "line number": [
      128
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.generator.ReservedString.__repr__": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": {
    "str": {
     "line number": [
      131
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.generator.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst._parser.parso.pgen2.generator.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "libcst._parser.parso.pgen2.generator.TypeVar": {
  "data": {
   "shadows": "typing.TypeVar"
  },
  "type": "import"
 },
 "libcst._parser.parso.pgen2.generator.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst._parser.parso.pgen2.generator._TokenTypeT": {
  "data": {
   "lineno": 43
  },
  "type": "constant"
 },
 "libcst._parser.parso.pgen2.generator._calculate_first_plans": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      351
     ]
    },
    "ValueError": {
     "line number": [
      357
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.generator._calculate_tree_traversal": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      323
     ]
    },
    "libcst._parser.parso.pgen2.generator.DFAPlan": {
     "line number": [
      328
     ]
    },
    "libcst._parser.parso.pgen2.generator._calculate_first_plans": {
     "line number": [
      299
     ]
    },
    "list": {
     "line number": [
      295
     ]
    },
    "sorted": {
     "line number": [
      313
     ]
    },
    "tuple": {
     "line number": [
      326
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.generator._make_dfas": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": {
    "addclosure": {
     "line number": [
      203,
      212
     ]
    },
    "isinstance": {
     "line number": [
      190,
      191
     ]
    },
    "libcst._parser.parso.pgen2.generator.DFAState": {
     "line number": [
      204,
      223
     ]
    },
    "libcst._parser.parso.pgen2.grammar_parser.NFAState": {
     "line number": [
      190,
      191
     ]
    },
    "set": {
     "line number": [
      202,
      211
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.generator._make_dfas.addclosure": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": {
    "addclosure": {
     "line number": [
      200
     ]
    },
    "isinstance": {
     "line number": [
      194
     ]
    },
    "libcst._parser.parso.pgen2.grammar_parser.NFAState": {
     "line number": [
      194
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.generator._make_transition": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      282
     ]
    },
    "ast.literal_eval": {
     "line number": [
      279
     ]
    },
    "getattr": {
     "line number": [
      274
     ]
    },
    "libcst._parser.parso.pgen2.generator.ReservedString": {
     "line number": [
      283
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.generator._simplify_dfas": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      168
     ]
    },
    "len": {
     "line number": [
      169
     ]
    },
    "range": {
     "line number": [
      169
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.generator.generate_grammar": {
  "data": {
   "lineno": 230,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      263
     ]
    },
    "libcst._parser.parso.pgen2.generator.DFAPlan": {
     "line number": [
      259
     ]
    },
    "libcst._parser.parso.pgen2.generator.Grammar": {
     "line number": [
      264,
      230
     ]
    },
    "libcst._parser.parso.pgen2.generator._calculate_tree_traversal": {
     "line number": [
      261
     ]
    },
    "libcst._parser.parso.pgen2.generator._make_dfas": {
     "line number": [
      242
     ]
    },
    "libcst._parser.parso.pgen2.generator._make_transition": {
     "line number": [
      256
     ]
    },
    "libcst._parser.parso.pgen2.generator._simplify_dfas": {
     "line number": [
      243
     ]
    },
    "libcst._parser.parso.pgen2.grammar_parser.GrammarParser": {
     "line number": [
      241
     ]
    },
    "str": {
     "line number": [
      230
     ]
    },
    "typing.Any": {
     "line number": [
      230,
      230
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.generator.literal_eval": {
  "data": {
   "shadows": "ast.literal_eval"
  },
  "type": "import"
 },
 "libcst._parser.parso.pgen2.grammar_parser": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.parso.pgen2.grammar_parser.Generator": {
  "data": {
   "shadows": "typing.Generator"
  },
  "type": "import"
 },
 "libcst._parser.parso.pgen2.grammar_parser.GrammarParser": {
  "data": {
   "lineno": 46
  },
  "type": "class"
 },
 "libcst._parser.parso.pgen2.grammar_parser.GrammarParser.__init__": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "libcst._parser.parso.python.tokenize.tokenize": {
     "line number": [
      53
     ]
    },
    "libcst._parser.parso.utils.parse_version_string": {
     "line number": [
      53
     ]
    },
    "str": {
     "line number": [
      51,
      52
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.grammar_parser.GrammarParser._expect": {
  "data": {
   "lineno": 150
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.grammar_parser.GrammarParser._gettoken": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": {
    "next": {
     "line number": [
      160
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.grammar_parser.GrammarParser._parse_atom": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": {
    "libcst._parser.parso.pgen2.grammar_parser.NFAState": {
     "line number": [
      139,
      140
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.NAME": {
     "line number": [
      138
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.OP": {
     "line number": [
      136
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.STRING": {
     "line number": [
      138
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.grammar_parser.GrammarParser._parse_item": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": {
    "libcst._parser.parso.python.token.PythonTokenTypes.OP": {
     "line number": [
      111
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.grammar_parser.GrammarParser._parse_items": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": {
    "libcst._parser.parso.python.token.PythonTokenTypes.NAME": {
     "line number": [
      97
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.STRING": {
     "line number": [
      98
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.grammar_parser.GrammarParser._parse_rhs": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": {
    "libcst._parser.parso.pgen2.grammar_parser.NFAState": {
     "line number": [
      79,
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.grammar_parser.GrammarParser._raise_error": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      167
     ]
    },
    "SyntaxError": {
     "line number": [
      170
     ]
    },
    "list": {
     "line number": [
      168
     ]
    },
    "map": {
     "line number": [
      168
     ]
    },
    "object": {
     "line number": [
      163
     ]
    },
    "str": {
     "line number": [
      163,
      168
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.grammar_parser.GrammarParser.parse": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "libcst._parser.parso.pgen2.grammar_parser.NFAState": {
     "line number": [
      56,
      56
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.ENDMARKER": {
     "line number": [
      58
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.NAME": {
     "line number": [
      65
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.NEWLINE": {
     "line number": [
      59,
      69
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.OP": {
     "line number": [
      66
     ]
    },
    "typing.Generator": {
     "line number": [
      56
     ]
    },
    "typing.Tuple": {
     "line number": [
      56
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.grammar_parser.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst._parser.parso.pgen2.grammar_parser.NFAArc": {
  "data": {
   "lineno": 23
  },
  "type": "class"
 },
 "libcst._parser.parso.pgen2.grammar_parser.NFAArc.__init__": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "str": {
     "line number": [
      24,
      26
     ]
    },
    "typing.Optional": {
     "line number": [
      24,
      26
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.grammar_parser.NFAArc.__repr__": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "str": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.grammar_parser.NFAState": {
  "data": {
   "lineno": 32
  },
  "type": "class"
 },
 "libcst._parser.parso.pgen2.grammar_parser.NFAState.__init__": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "libcst._parser.parso.pgen2.grammar_parser.NFAArc": {
     "line number": [
      35
     ]
    },
    "str": {
     "line number": [
      33
     ]
    },
    "typing.List": {
     "line number": [
      35
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.grammar_parser.NFAState.__repr__": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "str": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.grammar_parser.NFAState.add_arc": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "libcst._parser.parso.pgen2.grammar_parser.NFAArc": {
     "line number": [
      40
     ]
    },
    "str": {
     "line number": [
      38
     ]
    },
    "typing.Optional": {
     "line number": [
      38
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.pgen2.grammar_parser.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._parser.parso.pgen2.grammar_parser.PythonTokenTypes": {
  "data": {
   "shadows": "libcst._parser.parso.python.token.PythonTokenTypes"
  },
  "type": "import"
 },
 "libcst._parser.parso.pgen2.grammar_parser.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst._parser.parso.pgen2.grammar_parser.parse_version_string": {
  "data": {
   "shadows": "libcst._parser.parso.utils.parse_version_string"
  },
  "type": "import"
 },
 "libcst._parser.parso.pgen2.grammar_parser.tokenize": {
  "data": {
   "shadows": "libcst._parser.parso.python.tokenize.tokenize"
  },
  "type": "import"
 },
 "libcst._parser.parso.python": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.parso.python.token": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.parso.python.token.PythonTokenTypes": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": {
    "libcst._parser.parso.python.token.TokenType": {
     "line number": [
      34,
      34,
      35,
      35,
      36,
      36,
      37,
      37,
      38,
      38,
      39,
      39,
      40,
      40,
      41,
      41,
      42,
      42,
      43,
      43,
      44,
      44,
      45,
      45,
      46,
      46,
      47,
      47,
      48,
      48
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.parso.python.token.TokenType": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      23
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      20
     ]
    },
    "str": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.parso.python.token.TokenType.__repr__": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": {
    "str": {
     "line number": [
      25
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.python.token.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst._parser.parso.tests": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.parso.tests.test_fstring": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.parso.tests.test_fstring.ParsoTokenizeTest": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.parso.tests.test_fstring.ParsoTokenizeTest.test_tokenize_start_pos": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "libcst._parser.parso.python.tokenize.tokenize": {
     "line number": [
      48
     ]
    },
    "libcst._parser.parso.utils.parse_version_string": {
     "line number": [
      48
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      22
     ]
    },
    "list": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.tests.test_fstring.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst._parser.parso.tests.test_fstring.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._parser.parso.tests.test_fstring.parse_version_string": {
  "data": {
   "shadows": "libcst._parser.parso.utils.parse_version_string"
  },
  "type": "import"
 },
 "libcst._parser.parso.tests.test_fstring.tokenize": {
  "data": {
   "shadows": "libcst._parser.parso.python.tokenize.tokenize"
  },
  "type": "import"
 },
 "libcst._parser.parso.tests.test_tokenize": {
  "data": {
   "symbols_in_volume": {
    "libcst._parser.parso.python.token.PythonTokenTypes.DEDENT": {
     "line number": [
      32
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.ENDMARKER": {
     "line number": [
      35
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.ERRORTOKEN": {
     "line number": [
      33
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.ERROR_DEDENT": {
     "line number": [
      36
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.FSTRING_END": {
     "line number": [
      39
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.FSTRING_START": {
     "line number": [
      37
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.FSTRING_STRING": {
     "line number": [
      38
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.INDENT": {
     "line number": [
      31
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.NAME": {
     "line number": [
      27
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.NEWLINE": {
     "line number": [
      28
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.NUMBER": {
     "line number": [
      30
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.OP": {
     "line number": [
      34
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.STRING": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._parser.parso.tests.test_tokenize.DEDENT": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "libcst._parser.parso.tests.test_tokenize.ENDMARKER": {
  "data": {
   "lineno": 35
  },
  "type": "constant"
 },
 "libcst._parser.parso.tests.test_tokenize.ERRORTOKEN": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "libcst._parser.parso.tests.test_tokenize.ERROR_DEDENT": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "libcst._parser.parso.tests.test_tokenize.FSTRING_END": {
  "data": {
   "lineno": 39
  },
  "type": "constant"
 },
 "libcst._parser.parso.tests.test_tokenize.FSTRING_START": {
  "data": {
   "lineno": 37
  },
  "type": "constant"
 },
 "libcst._parser.parso.tests.test_tokenize.FSTRING_STRING": {
  "data": {
   "lineno": 38
  },
  "type": "constant"
 },
 "libcst._parser.parso.tests.test_tokenize.INDENT": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "libcst._parser.parso.tests.test_tokenize.NAME": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "libcst._parser.parso.tests.test_tokenize.NEWLINE": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "libcst._parser.parso.tests.test_tokenize.NUMBER": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "libcst._parser.parso.tests.test_tokenize.OP": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "libcst._parser.parso.tests.test_tokenize.ParsoTokenizerTest": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.parso.tests.test_tokenize.ParsoTokenizerTest.test_backslash": {
  "data": {
   "lineno": 327,
   "symbols_in_volume": {
    "libcst._parser.parso.tests.test_tokenize._get_token_list": {
     "line number": [
      329
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.tests.test_tokenize.ParsoTokenizerTest.test_brackets_no_indentation": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": {
    "libcst._parser.parso.tests.test_tokenize.ENDMARKER": {
     "line number": [
      310
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.NEWLINE": {
     "line number": [
      310,
      310
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.OP": {
     "line number": [
      310,
      310,
      310
     ]
    },
    "libcst._parser.parso.tests.test_tokenize._get_token_list": {
     "line number": [
      309
     ]
    },
    "textwrap.dedent": {
     "line number": [
      302
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.tests.test_tokenize.ParsoTokenizerTest.test_carriage_return": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": {
    "libcst._parser.parso.tests.test_tokenize.DEDENT": {
     "line number": [
      325
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.ENDMARKER": {
     "line number": [
      325
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.INDENT": {
     "line number": [
      325
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.NAME": {
     "line number": [
      325
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.OP": {
     "line number": [
      325
     ]
    },
    "libcst._parser.parso.tests.test_tokenize._get_token_list": {
     "line number": [
      324
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.tests.test_tokenize.ParsoTokenizerTest.test_endmarker_end_pos": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": {
    "check": {
     "line number": [
      192,
      193,
      194,
      195,
      196,
      197
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.tests.test_tokenize.ParsoTokenizerTest.test_endmarker_end_pos.check": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": {
    "len": {
     "line number": [
      190,
      190
     ]
    },
    "libcst._parser.parso.tests.test_tokenize._get_token_list": {
     "line number": [
      188
     ]
    },
    "libcst._parser.parso.utils.split_lines": {
     "line number": [
      189
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.tests.test_tokenize.ParsoTokenizerTest.test_error_literal": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": {
    "libcst._parser.parso.tests.test_tokenize.ENDMARKER": {
     "line number": [
      176,
      183
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.ERRORTOKEN": {
     "line number": [
      173,
      180
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.NEWLINE": {
     "line number": [
      175
     ]
    },
    "libcst._parser.parso.tests.test_tokenize._get_token_list": {
     "line number": [
      172,
      179
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.tests.test_tokenize.ParsoTokenizerTest.test_error_string": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": {
    "libcst._parser.parso.tests.test_tokenize.ERRORTOKEN": {
     "line number": [
      233
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.NEWLINE": {
     "line number": [
      236
     ]
    },
    "libcst._parser.parso.tests.test_tokenize._get_token_list": {
     "line number": [
      232
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.tests.test_tokenize.ParsoTokenizerTest.test_error_token_after_dedent": {
  "data": {
   "lineno": 271,
   "symbols_in_volume": {
    "libcst._parser.parso.tests.test_tokenize.DEDENT": {
     "line number": [
      288
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.ENDMARKER": {
     "line number": [
      293
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.ERRORTOKEN": {
     "line number": [
      290
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.INDENT": {
     "line number": [
      285
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.NAME": {
     "line number": [
      281,
      282,
      286,
      291
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.NEWLINE": {
     "line number": [
      284,
      287,
      292
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.OP": {
     "line number": [
      283
     ]
    },
    "libcst._parser.parso.tests.test_tokenize._get_token_list": {
     "line number": [
      279
     ]
    },
    "textwrap.dedent": {
     "line number": [
      272
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.tests.test_tokenize.ParsoTokenizerTest.test_form_feed": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": {
    "libcst._parser.parso.tests.test_tokenize._get_token_list": {
     "line number": [
      313
     ]
    },
    "textwrap.dedent": {
     "line number": [
      314
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.tests.test_tokenize.ParsoTokenizerTest.test_fstring": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": {
    "libcst._parser.parso.tests.test_tokenize.ENDMARKER": {
     "line number": [
      429
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.ERRORTOKEN": {
     "line number": [
      400
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.FSTRING_END": {
     "line number": [
      335,
      336,
      337,
      338,
      339,
      354,
      359,
      369,
      374,
      384,
      389,
      393,
      420
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.FSTRING_START": {
     "line number": [
      334,
      335,
      336,
      337,
      338,
      339,
      344,
      359,
      363,
      374,
      378,
      389,
      393,
      400,
      409
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.FSTRING_STRING": {
     "line number": [
      336,
      337,
      338,
      339,
      345,
      349,
      359,
      364,
      368,
      374,
      379,
      383,
      393,
      400,
      410,
      414,
      416
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.NAME": {
     "line number": [
      347,
      352,
      400,
      407,
      412,
      418
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.NEWLINE": {
     "line number": [
      400
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.NUMBER": {
     "line number": [
      366,
      381,
      389,
      393
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.OP": {
     "line number": [
      336,
      336,
      337,
      337,
      346,
      348,
      350,
      351,
      353,
      365,
      367,
      380,
      382,
      389,
      389,
      393,
      393,
      393,
      408,
      411,
      413,
      415,
      417,
      419,
      421
     ]
    },
    "libcst._parser.parso.tests.test_tokenize._get_token_list": {
     "line number": [
      428
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      332
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.tests.test_tokenize.ParsoTokenizerTest.test_function_whitespace": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "libcst._parser.parso.tests.test_tokenize._get_token_list": {
     "line number": [
      80
     ]
    },
    "textwrap.dedent": {
     "line number": [
      72
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.tests.test_tokenize.ParsoTokenizerTest.test_identifier_contains_unicode": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": {
    "libcst._parser.parso.tests.test_tokenize.NAME": {
     "line number": [
      134
     ]
    },
    "libcst._parser.parso.tests.test_tokenize._get_token_list": {
     "line number": [
      132
     ]
    },
    "textwrap.dedent": {
     "line number": [
      126
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.tests.test_tokenize.ParsoTokenizerTest.test_indent_error_recovery": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": {
    "libcst._parser.parso.tests.test_tokenize.DEDENT": {
     "line number": [
      263
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.ENDMARKER": {
     "line number": [
      267
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.INDENT": {
     "line number": [
      251
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.NAME": {
     "line number": [
      252,
      255,
      256,
      258,
      259,
      265
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.NEWLINE": {
     "line number": [
      260,
      266
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.OP": {
     "line number": [
      253
     ]
    },
    "libcst._parser.parso.tests.test_tokenize._get_token_list": {
     "line number": [
      248
     ]
    },
    "textwrap.dedent": {
     "line number": [
      241
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.tests.test_tokenize.ParsoTokenizerTest.test_simple_no_whitespace": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": {
    "libcst._parser.parso.tests.test_tokenize._get_token_list": {
     "line number": [
      52
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.tests.test_tokenize.ParsoTokenizerTest.test_simple_with_whitespace": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "libcst._parser.parso.tests.test_tokenize.INDENT": {
     "line number": [
      61
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.NEWLINE": {
     "line number": [
      68
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.STRING": {
     "line number": [
      65
     ]
    },
    "libcst._parser.parso.tests.test_tokenize._get_token_list": {
     "line number": [
      60
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.tests.test_tokenize.ParsoTokenizerTest.test_token_types": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": {
    "libcst._parser.parso.tests.test_tokenize.DEDENT": {
     "line number": [
      202,
      203,
      215,
      218
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.ENDMARKER": {
     "line number": [
      229
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.ERRORTOKEN": {
     "line number": [
      222,
      223,
      224
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.ERROR_DEDENT": {
     "line number": [
      203,
      210,
      213
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.INDENT": {
     "line number": [
      202,
      203,
      207,
      218
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.NAME": {
     "line number": [
      202,
      203,
      203,
      208,
      211,
      214,
      218,
      218,
      220,
      221,
      223,
      223,
      224,
      224
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.NEWLINE": {
     "line number": [
      203,
      209,
      212,
      218
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.NUMBER": {
     "line number": [
      220
     ]
    },
    "libcst._parser.parso.tests.test_tokenize._get_token_list": {
     "line number": [
      228
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      199
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.tests.test_tokenize.ParsoTokenizerTest.test_tokenize_multiline_I": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": {
    "libcst._parser.parso.python.tokenize.PythonToken": {
     "line number": [
      101,
      102
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.ENDMARKER": {
     "line number": [
      102
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.ERRORTOKEN": {
     "line number": [
      101
     ]
    },
    "libcst._parser.parso.tests.test_tokenize._get_token_list": {
     "line number": [
      99
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.tests.test_tokenize.ParsoTokenizerTest.test_tokenize_multiline_II": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": {
    "libcst._parser.parso.python.tokenize.PythonToken": {
     "line number": [
      111,
      112
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.ENDMARKER": {
     "line number": [
      112
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.ERRORTOKEN": {
     "line number": [
      111
     ]
    },
    "libcst._parser.parso.tests.test_tokenize._get_token_list": {
     "line number": [
      109
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.tests.test_tokenize.ParsoTokenizerTest.test_tokenize_multiline_III": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "libcst._parser.parso.python.tokenize.PythonToken": {
     "line number": [
      121,
      122
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.ENDMARKER": {
     "line number": [
      122
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.ERRORTOKEN": {
     "line number": [
      121
     ]
    },
    "libcst._parser.parso.tests.test_tokenize._get_token_list": {
     "line number": [
      119
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.tests.test_tokenize.ParsoTokenizerTest.test_ur_literals": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": {
    "check": {
     "line number": [
      157,
      158,
      159,
      160,
      161,
      163,
      166,
      167,
      168,
      169
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.tests.test_tokenize.ParsoTokenizerTest.test_ur_literals.check": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": {
    "libcst._parser.parso.tests.test_tokenize.FSTRING_START": {
     "line number": [
      151
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.NAME": {
     "line number": [
      155
     ]
    },
    "libcst._parser.parso.tests.test_tokenize.STRING": {
     "line number": [
      152
     ]
    },
    "libcst._parser.parso.tests.test_tokenize._get_token_list": {
     "line number": [
      148
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.tests.test_tokenize.PythonToken": {
  "data": {
   "shadows": "libcst._parser.parso.python.tokenize.PythonToken"
  },
  "type": "import"
 },
 "libcst._parser.parso.tests.test_tokenize.PythonTokenTypes": {
  "data": {
   "shadows": "libcst._parser.parso.python.token.PythonTokenTypes"
  },
  "type": "import"
 },
 "libcst._parser.parso.tests.test_tokenize.STRING": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "libcst._parser.parso.tests.test_tokenize.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst._parser.parso.tests.test_tokenize._get_token_list": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "libcst._parser.parso.python.tokenize.tokenize": {
     "line number": [
      45
     ]
    },
    "libcst._parser.parso.utils.parse_version_string": {
     "line number": [
      44
     ]
    },
    "list": {
     "line number": [
      45
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.tests.test_tokenize.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._parser.parso.tests.test_tokenize.dedent": {
  "data": {
   "shadows": "textwrap.dedent"
  },
  "type": "import"
 },
 "libcst._parser.parso.tests.test_tokenize.parse_version_string": {
  "data": {
   "shadows": "libcst._parser.parso.utils.parse_version_string"
  },
  "type": "import"
 },
 "libcst._parser.parso.tests.test_tokenize.split_lines": {
  "data": {
   "shadows": "libcst._parser.parso.utils.split_lines"
  },
  "type": "import"
 },
 "libcst._parser.parso.tests.test_tokenize.tokenize": {
  "data": {
   "shadows": "libcst._parser.parso.python.tokenize.tokenize"
  },
  "type": "import"
 },
 "libcst._parser.parso.tests.test_utils": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.parso.tests.test_utils.ParsoUtilsTest": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      20
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.parso.tests.test_utils.ParsoUtilsTest.test_python_bytes_to_unicode_unicode_text": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": {
    "libcst._parser.parso.utils.python_bytes_to_unicode": {
     "line number": [
      54
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.tests.test_utils.ParsoUtilsTest.test_split_lines": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "libcst._parser.parso.utils.split_lines": {
     "line number": [
      47
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.tests.test_utils.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst._parser.parso.tests.test_utils.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._parser.parso.tests.test_utils.python_bytes_to_unicode": {
  "data": {
   "shadows": "libcst._parser.parso.utils.python_bytes_to_unicode"
  },
  "type": "import"
 },
 "libcst._parser.parso.tests.test_utils.split_lines": {
  "data": {
   "shadows": "libcst._parser.parso.utils.split_lines"
  },
  "type": "import"
 },
 "libcst._parser.parso.utils": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.parso.utils.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._parser.parso.utils.PythonVersionInfo": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      141
     ]
    },
    "int": {
     "line number": [
      143,
      144
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.parso.utils.PythonVersionInfo.__eq__": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      171
     ]
    },
    "bool": {
     "line number": [
      168
     ]
    },
    "int": {
     "line number": [
      168,
      168
     ]
    },
    "isinstance": {
     "line number": [
      169
     ]
    },
    "len": {
     "line number": [
      170
     ]
    },
    "tuple": {
     "line number": [
      169
     ]
    },
    "typing.Tuple": {
     "line number": [
      168
     ]
    },
    "typing.Union": {
     "line number": [
      168
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.utils.PythonVersionInfo.__ge__": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      154
     ]
    },
    "int": {
     "line number": [
      154,
      154
     ]
    },
    "typing.Tuple": {
     "line number": [
      154
     ]
    },
    "typing.Union": {
     "line number": [
      154
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.utils.PythonVersionInfo.__gt__": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      149
     ]
    },
    "bool": {
     "line number": [
      146
     ]
    },
    "int": {
     "line number": [
      146,
      146
     ]
    },
    "isinstance": {
     "line number": [
      147
     ]
    },
    "len": {
     "line number": [
      148
     ]
    },
    "tuple": {
     "line number": [
      147
     ]
    },
    "typing.Tuple": {
     "line number": [
      146
     ]
    },
    "typing.Union": {
     "line number": [
      146
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.utils.PythonVersionInfo.__hash__": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": {
    "hash": {
     "line number": [
      180
     ]
    },
    "int": {
     "line number": [
      179
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.utils.PythonVersionInfo.__le__": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      165
     ]
    },
    "int": {
     "line number": [
      165,
      165
     ]
    },
    "typing.Tuple": {
     "line number": [
      165
     ]
    },
    "typing.Union": {
     "line number": [
      165
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.utils.PythonVersionInfo.__lt__": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      160
     ]
    },
    "bool": {
     "line number": [
      157
     ]
    },
    "int": {
     "line number": [
      157,
      157
     ]
    },
    "isinstance": {
     "line number": [
      158
     ]
    },
    "len": {
     "line number": [
      159
     ]
    },
    "tuple": {
     "line number": [
      158
     ]
    },
    "typing.Tuple": {
     "line number": [
      157
     ]
    },
    "typing.Union": {
     "line number": [
      157
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.utils.PythonVersionInfo.__ne__": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      176
     ]
    },
    "int": {
     "line number": [
      176,
      176
     ]
    },
    "typing.Tuple": {
     "line number": [
      176
     ]
    },
    "typing.Union": {
     "line number": [
      176
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.utils.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst._parser.parso.utils.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst._parser.parso.utils.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst._parser.parso.utils.Version": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      43
     ]
    },
    "int": {
     "line number": [
      45,
      46,
      47
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.parso.utils._NON_LINE_BREAKS": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "libcst._parser.parso.utils._parse_version": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      201
     ]
    },
    "ValueError": {
     "line number": [
      186
     ]
    },
    "int": {
     "line number": [
      191,
      204
     ]
    },
    "libcst._parser.parso.utils.PythonVersionInfo": {
     "line number": [
      205,
      183
     ]
    },
    "libcst._parser.parso.utils.re": {
     "line number": [
      184
     ]
    },
    "str": {
     "line number": [
      183
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.utils.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst._parser.parso.utils.literal_eval": {
  "data": {
   "shadows": "ast.literal_eval"
  },
  "type": "import"
 },
 "libcst._parser.parso.utils.parse_version_string": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": {
    "libcst._parser.parso.utils.PythonVersionInfo": {
     "line number": [
      208
     ]
    },
    "libcst._parser.parso.utils._parse_version": {
     "line number": [
      217
     ]
    },
    "libcst._parser.parso.utils.sys": {
     "line number": [
      215
     ]
    },
    "str": {
     "line number": [
      208
     ]
    },
    "typing.Optional": {
     "line number": [
      208
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.utils.python_bytes_to_unicode": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "bytes": {
     "line number": [
      95
     ]
    },
    "detect_encoding": {
     "line number": [
      133
     ]
    },
    "isinstance": {
     "line number": [
      129,
      134
     ]
    },
    "str": {
     "line number": [
      95,
      95,
      95,
      129,
      134,
      96
     ]
    },
    "typing.Union": {
     "line number": [
      95
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.utils.python_bytes_to_unicode.detect_encoding": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": {
    "ast.literal_eval": {
     "line number": [
      112
     ]
    },
    "bytes": {
     "line number": [
      106
     ]
    },
    "libcst._parser.parso.utils.re": {
     "line number": [
      118,
      122
     ]
    },
    "str": {
     "line number": [
      106
     ]
    },
    "typing.Union": {
     "line number": [
      106
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.utils.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "libcst._parser.parso.utils.split_lines": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      69,
      79
     ]
    },
    "bool": {
     "line number": [
      50
     ]
    },
    "enumerate": {
     "line number": [
      66
     ]
    },
    "libcst._parser.parso.utils._NON_LINE_BREAKS": {
     "line number": [
      72
     ]
    },
    "libcst._parser.parso.utils.re": {
     "line number": [
      91
     ]
    },
    "reversed": {
     "line number": [
      75
     ]
    },
    "str": {
     "line number": [
      50,
      50
     ]
    },
    "typing.Sequence": {
     "line number": [
      50
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.parso.utils.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "libcst._parser.production_decorator": {
  "data": {
   "symbols_in_volume": {
    "libcst._parser.types.conversions.NonterminalConversion": {
     "line number": [
      13
     ]
    },
    "typing.TypeVar": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._parser.production_decorator.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst._parser.production_decorator.NonterminalConversion": {
  "data": {
   "shadows": "libcst._parser.types.conversions.NonterminalConversion"
  },
  "type": "import"
 },
 "libcst._parser.production_decorator.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._parser.production_decorator.Production": {
  "data": {
   "shadows": "libcst._parser.types.production.Production"
  },
  "type": "import"
 },
 "libcst._parser.production_decorator.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst._parser.production_decorator.TypeVar": {
  "data": {
   "shadows": "typing.TypeVar"
  },
  "type": "import"
 },
 "libcst._parser.production_decorator._NonterminalConversionT": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "libcst._parser.production_decorator.get_productions": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "libcst._parser.types.conversions.NonterminalConversion": {
     "line number": [
      50
     ]
    },
    "libcst._parser.types.production.Production": {
     "line number": [
      50
     ]
    },
    "typing.Sequence": {
     "line number": [
      50
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.production_decorator.with_production": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "libcst._parser.production_decorator._NonterminalConversionT": {
     "line number": [
      25,
      25
     ]
    },
    "str": {
     "line number": [
      20,
      21,
      23,
      24
     ]
    },
    "typing.Callable": {
     "line number": [
      25
     ]
    },
    "typing.Optional": {
     "line number": [
      23,
      24
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.production_decorator.with_production.inner": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      39
     ]
    },
    "hasattr": {
     "line number": [
      34
     ]
    },
    "libcst._parser.production_decorator._NonterminalConversionT": {
     "line number": [
      33,
      33
     ]
    },
    "libcst._parser.types.production.Production": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.python_parser": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.python_parser.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._parser.python_parser.BaseParser": {
  "data": {
   "shadows": "libcst._parser.base_parser.BaseParser"
  },
  "type": "import"
 },
 "libcst._parser.python_parser.Grammar": {
  "data": {
   "shadows": "libcst._parser.parso.pgen2.generator.Grammar"
  },
  "type": "import"
 },
 "libcst._parser.python_parser.Iterable": {
  "data": {
   "shadows": "typing.Iterable"
  },
  "type": "import"
 },
 "libcst._parser.python_parser.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "libcst._parser.python_parser.NonterminalConversion": {
  "data": {
   "shadows": "libcst._parser.types.conversions.NonterminalConversion"
  },
  "type": "import"
 },
 "libcst._parser.python_parser.ParserConfig": {
  "data": {
   "shadows": "libcst._parser.types.config.ParserConfig"
  },
  "type": "import"
 },
 "libcst._parser.python_parser.PythonCSTParser": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "libcst._parser.base_parser.BaseParser": {
     "line number": [
      18
     ]
    },
    "libcst._parser.parso.python.token.TokenType": {
     "line number": [
      18
     ]
    },
    "libcst._parser.types.config.ParserConfig": {
     "line number": [
      19
     ]
    },
    "libcst._parser.types.conversions.NonterminalConversion": {
     "line number": [
      21
     ]
    },
    "libcst._parser.types.conversions.TerminalConversion": {
     "line number": [
      20
     ]
    },
    "libcst._parser.types.token.Token": {
     "line number": [
      18
     ]
    },
    "str": {
     "line number": [
      20,
      21
     ]
    },
    "typing.Any": {
     "line number": [
      18
     ]
    },
    "typing.Mapping": {
     "line number": [
      20,
      21
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.python_parser.PythonCSTParser.__init__": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "libcst._parser.grammar.get_nonterminal_conversions": {
     "line number": [
      39
     ]
    },
    "libcst._parser.grammar.get_terminal_conversions": {
     "line number": [
      38
     ]
    },
    "libcst._parser.types.config.ParserConfig": {
     "line number": [
      27
     ]
    },
    "libcst._parser.types.token.Token": {
     "line number": [
      26
     ]
    },
    "str": {
     "line number": [
      29
     ]
    },
    "super": {
     "line number": [
      31
     ]
    },
    "typing.Iterable": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.python_parser.PythonCSTParser.convert_nonterminal": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "str": {
     "line number": [
      43
     ]
    },
    "typing.Any": {
     "line number": [
      43,
      43
     ]
    },
    "typing.Sequence": {
     "line number": [
      43
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.python_parser.PythonCSTParser.convert_terminal": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "libcst._parser.types.token.Token": {
     "line number": [
      46
     ]
    },
    "typing.Any": {
     "line number": [
      46
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.python_parser.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst._parser.python_parser.TerminalConversion": {
  "data": {
   "shadows": "libcst._parser.types.conversions.TerminalConversion"
  },
  "type": "import"
 },
 "libcst._parser.python_parser.Token": {
  "data": {
   "shadows": "libcst._parser.types.token.Token"
  },
  "type": "import"
 },
 "libcst._parser.python_parser.TokenType": {
  "data": {
   "shadows": "libcst._parser.parso.python.token.TokenType"
  },
  "type": "import"
 },
 "libcst._parser.python_parser.get_nonterminal_conversions": {
  "data": {
   "shadows": "libcst._parser.grammar.get_nonterminal_conversions"
  },
  "type": "import"
 },
 "libcst._parser.python_parser.get_terminal_conversions": {
  "data": {
   "shadows": "libcst._parser.grammar.get_terminal_conversions"
  },
  "type": "import"
 },
 "libcst._parser.tests": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.tests.test_config": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.tests.test_config.ConfigTest": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.tests.test_config.ConfigTest.test_pick_compatible": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      30
     ]
    },
    "libcst._parser.parso.utils.PythonVersionInfo": {
     "line number": [
      15,
      18,
      21,
      24,
      27
     ]
    },
    "libcst._parser.types.config._pick_compatible_python_version": {
     "line number": [
      15,
      18,
      21,
      24,
      27,
      36
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.tests.test_config.PythonVersionInfo": {
  "data": {
   "shadows": "libcst._parser.parso.utils.PythonVersionInfo"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_config.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_config._pick_compatible_python_version": {
  "data": {
   "shadows": "libcst._parser.types.config._pick_compatible_python_version"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_detect_config": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.tests.test_detect_config.ParserConfig": {
  "data": {
   "shadows": "libcst._parser.types.config.ParserConfig"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_detect_config.PartialParserConfig": {
  "data": {
   "shadows": "libcst._parser.types.config.PartialParserConfig"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_detect_config.PythonVersionInfo": {
  "data": {
   "shadows": "libcst._parser.parso.utils.PythonVersionInfo"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_detect_config.TestDetectConfig": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.tests.test_detect_config.TestDetectConfig.test_detect_module_config": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      314,
      315
     ]
    },
    "bytes": {
     "line number": [
      312
     ]
    },
    "frozenset": {
     "line number": [
      30,
      45,
      60,
      75,
      92,
      107,
      124,
      144,
      166,
      186,
      201,
      216,
      231,
      246,
      261,
      281,
      304
     ]
    },
    "libcst._parser.detect_config.detect_config": {
     "line number": [
      320
     ]
    },
    "libcst._parser.parso.utils.PythonVersionInfo": {
     "line number": [
      29,
      44,
      59,
      74,
      91,
      106,
      123,
      143,
      165,
      185,
      200,
      215,
      230,
      245,
      260,
      280,
      303
     ]
    },
    "libcst._parser.tests.test_detect_config.dataclasses": {
     "line number": [
      319,
      327
     ]
    },
    "libcst._parser.types.config.ParserConfig": {
     "line number": [
      316,
      23,
      38,
      53,
      68,
      85,
      100,
      117,
      132,
      154,
      174,
      194,
      209,
      224,
      239,
      254,
      269,
      292
     ]
    },
    "libcst._parser.types.config.PartialParserConfig": {
     "line number": [
      313,
      20,
      35,
      50,
      65,
      80,
      97,
      112,
      129,
      149,
      171,
      191,
      206,
      221,
      236,
      251,
      266,
      289
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "str": {
     "line number": [
      312
     ]
    },
    "typing.Union": {
     "line number": [
      312
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.tests.test_detect_config.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_detect_config.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_detect_config.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_detect_config.dataclasses": {
  "data": {
   "shadows": "dataclasses"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_detect_config.detect_config": {
  "data": {
   "shadows": "libcst._parser.detect_config.detect_config"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_footer_behavior": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.tests.test_footer_behavior.FooterBehaviorTest": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.tests.test_footer_behavior.FooterBehaviorTest.test_parsers": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst.Assign": {
     "line number": [
      157
     ]
    },
    "libcst.AssignTarget": {
     "line number": [
      159
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      224
     ]
    },
    "libcst.Comment": {
     "line number": [
      25,
      37,
      43,
      55,
      74,
      103,
      113,
      123,
      128,
      165,
      199
     ]
    },
    "libcst.Else": {
     "line number": [
      205
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      24,
      36,
      42,
      54,
      73,
      102,
      112,
      122,
      127,
      165,
      197,
      198,
      213
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      183
     ]
    },
    "libcst.If": {
     "line number": [
      59,
      89,
      93,
      139,
      188
     ]
    },
    "libcst.IndentedBlock": {
     "line number": [
      61,
      91,
      95,
      141,
      186,
      190,
      206
     ]
    },
    "libcst.Integer": {
     "line number": [
      161
     ]
    },
    "libcst.Module": {
     "line number": [
      18,
      22,
      34,
      52,
      87,
      137,
      181
     ]
    },
    "libcst.Name": {
     "line number": [
      60,
      90,
      94,
      140,
      159,
      184,
      189
     ]
    },
    "libcst.Parameters": {
     "line number": [
      185
     ]
    },
    "libcst.Pass": {
     "line number": [
      40,
      65,
      98,
      193,
      209
     ]
    },
    "libcst.Return": {
     "line number": [
      145
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      40,
      64,
      97,
      143,
      155,
      192,
      208
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      146
     ]
    },
    "libcst.TrailingWhitespace": {
     "line number": [
      62,
      66
     ]
    },
    "libcst._nodes.deep_equals.deep_equals": {
     "line number": [
      227
     ]
    },
    "libcst.parse_module": {
     "line number": [
      225
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      15
     ]
    },
    "str": {
     "line number": [
      224
     ]
    },
    "textwrap.dedent": {
     "line number": [
      225
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.tests.test_footer_behavior.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_footer_behavior.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_footer_behavior.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_footer_behavior.dedent": {
  "data": {
   "shadows": "textwrap.dedent"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_footer_behavior.deep_equals": {
  "data": {
   "shadows": "libcst._nodes.deep_equals.deep_equals"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_footer_behavior.parse_module": {
  "data": {
   "shadows": "libcst.parse_module"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_node_identity": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.tests.test_node_identity.Counter": {
  "data": {
   "shadows": "collections.Counter"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_node_identity.DuplicateLeafNodeTest": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.tests.test_node_identity.DuplicateLeafNodeTest.test_tokenize": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "CountVisitor": {
     "line number": [
      46
     ]
    },
    "libcst.parse_module": {
     "line number": [
      45
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      13
     ]
    },
    "str": {
     "line number": [
      28
     ]
    },
    "textwrap.dedent": {
     "line number": [
      45
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.tests.test_node_identity.DuplicateLeafNodeTest.test_tokenize.CountVisitor": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "libcst.CSTVisitor": {
     "line number": [
      31
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.tests.test_node_identity.DuplicateLeafNodeTest.test_tokenize.CountVisitor.__init__": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "collections.Counter": {
     "line number": [
      33
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.tests.test_node_identity.DuplicateLeafNodeTest.test_tokenize.CountVisitor.on_visit": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      36
     ]
    },
    "id": {
     "line number": [
      37,
      39,
      40,
      42
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.tests.test_node_identity.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_node_identity.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_node_identity.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_node_identity.dedent": {
  "data": {
   "shadows": "textwrap.dedent"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_parse_errors": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.tests.test_parse_errors.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_parse_errors.ParseErrorsTest": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.tests.test_parse_errors.ParseErrorsTest.test_parser_syntax_error_str": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst.ParserSyntaxError": {
     "line number": [
      170
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      94
     ]
    },
    "libcst.parse_module": {
     "line number": [
      19,
      31,
      43,
      56,
      68,
      80
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      106,
      118,
      130,
      142,
      154
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      15
     ]
    },
    "object": {
     "line number": [
      168
     ]
    },
    "parse_fn": {
     "line number": [
      171
     ]
    },
    "str": {
     "line number": [
      168,
      172
     ]
    },
    "textwrap.dedent": {
     "line number": [
      20,
      32,
      44,
      57,
      69,
      81,
      95,
      107,
      119,
      131,
      143,
      155
     ]
    },
    "typing.Callable": {
     "line number": [
      168
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.tests.test_parse_errors.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_parse_errors.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_parse_errors.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_parse_errors.dedent": {
  "data": {
   "shadows": "textwrap.dedent"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_version_compare": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.tests.test_version_compare.PythonVersionInfo": {
  "data": {
   "shadows": "libcst._parser.parso.utils.PythonVersionInfo"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_version_compare.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_version_compare.VersionCompareTest": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.tests.test_version_compare.VersionCompareTest.test_tokenize": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      41
     ]
    },
    "libcst._parser.grammar._should_include": {
     "line number": [
      44
     ]
    },
    "libcst._parser.parso.utils.PythonVersionInfo": {
     "line number": [
      40,
      15,
      16,
      18,
      19,
      20,
      21,
      22,
      23,
      25,
      26,
      27,
      28,
      29,
      30,
      32,
      33,
      34
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      12
     ]
    },
    "str": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.tests.test_version_compare._should_include": {
  "data": {
   "shadows": "libcst._parser.grammar._should_include"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_version_compare.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_whitespace_parser": {
  "data": {
   "symbols_in_volume": {
    "typing.TypeVar": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._parser.tests.test_whitespace_parser.BaseWhitespaceParserConfig": {
  "data": {
   "shadows": "libcst._parser.types.config.BaseWhitespaceParserConfig"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_whitespace_parser.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_whitespace_parser.Config": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      24
     ]
    },
    "libcst._parser.types.config.BaseWhitespaceParserConfig": {
     "line number": [
      25
     ]
    },
    "str": {
     "line number": [
      26,
      27
     ]
    },
    "typing.Sequence": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.tests.test_whitespace_parser.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_whitespace_parser.State": {
  "data": {
   "shadows": "libcst._parser.types.whitespace_state.WhitespaceState"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_whitespace_parser.TypeVar": {
  "data": {
   "shadows": "typing.TypeVar"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_whitespace_parser.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_whitespace_parser.WhitespaceParserTest": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.tests.test_whitespace_parser.WhitespaceParserTest.test_parsers": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "libcst.Comment": {
     "line number": [
      114,
      153,
      159,
      165,
      215
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      111,
      138,
      144,
      150,
      156,
      162,
      182,
      188,
      194
     ]
    },
    "libcst.Newline": {
     "line number": [
      115,
      142,
      148,
      154,
      160,
      168,
      186,
      192,
      198,
      216
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      44,
      58,
      69,
      83,
      113,
      140,
      146,
      152,
      158,
      164,
      184,
      190,
      196,
      214
     ]
    },
    "libcst.TrailingWhitespace": {
     "line number": [
      213
     ]
    },
    "libcst._nodes.deep_equals.deep_equals": {
     "line number": [
      233
     ]
    },
    "libcst._parser.tests.test_whitespace_parser.Config": {
     "line number": [
      223,
      224,
      35,
      48,
      62,
      73,
      87,
      100,
      121,
      174,
      204
     ]
    },
    "libcst._parser.tests.test_whitespace_parser._T": {
     "line number": [
      223,
      227
     ]
    },
    "libcst._parser.types.whitespace_state.WhitespaceState": {
     "line number": [
      223,
      225,
      226,
      38,
      41,
      52,
      55,
      63,
      66,
      77,
      80,
      90,
      93,
      104,
      107,
      131,
      134,
      175,
      178,
      207,
      210
     ]
    },
    "libcst._parser.whitespace_parser.parse_empty_lines": {
     "line number": [
      86,
      99,
      120,
      173
     ]
    },
    "libcst._parser.whitespace_parser.parse_simple_whitespace": {
     "line number": [
      34,
      47,
      61,
      72
     ]
    },
    "libcst._parser.whitespace_parser.parse_trailing_whitespace": {
     "line number": [
      203
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      31
     ]
    },
    "parser": {
     "line number": [
      231
     ]
    },
    "typing.Callable": {
     "line number": [
      223
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.tests.test_whitespace_parser._T": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "libcst._parser.tests.test_whitespace_parser.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_whitespace_parser.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_whitespace_parser.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_whitespace_parser.deep_equals": {
  "data": {
   "shadows": "libcst._nodes.deep_equals.deep_equals"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_whitespace_parser.parse_empty_lines": {
  "data": {
   "shadows": "libcst._parser.whitespace_parser.parse_empty_lines"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_whitespace_parser.parse_simple_whitespace": {
  "data": {
   "shadows": "libcst._parser.whitespace_parser.parse_simple_whitespace"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_whitespace_parser.parse_trailing_whitespace": {
  "data": {
   "shadows": "libcst._parser.whitespace_parser.parse_trailing_whitespace"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_wrapped_tokenize": {
  "data": {
   "symbols_in_volume": {
    "libcst._parser.parso.utils.parse_version_string": {
     "line number": [
      17,
      18,
      19,
      20
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._parser.tests.test_wrapped_tokenize.ParserSyntaxError": {
  "data": {
   "shadows": "libcst._exceptions.ParserSyntaxError"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_wrapped_tokenize.PythonTokenTypes": {
  "data": {
   "shadows": "libcst._parser.parso.python.token.PythonTokenTypes"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_wrapped_tokenize.PythonVersionInfo": {
  "data": {
   "shadows": "libcst._parser.parso.utils.PythonVersionInfo"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_wrapped_tokenize.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_wrapped_tokenize.Token": {
  "data": {
   "shadows": "libcst._parser.wrapped_tokenize.Token"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_wrapped_tokenize.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_wrapped_tokenize.WhitespaceState": {
  "data": {
   "shadows": "libcst._parser.types.whitespace_state.WhitespaceState"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_wrapped_tokenize.WrappedTokenizeTest": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      23
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.tests.test_wrapped_tokenize.WrappedTokenizeTest.test_error_dedent": {
  "data": {
   "lineno": 1903,
   "symbols_in_volume": {
    "libcst._exceptions.ParserSyntaxError": {
     "line number": [
      1905
     ]
    },
    "libcst._parser.tests.test_wrapped_tokenize._PY36": {
     "line number": [
      1904
     ]
    },
    "libcst._parser.tests.test_wrapped_tokenize._PY37": {
     "line number": [
      1904
     ]
    },
    "libcst._parser.tests.test_wrapped_tokenize._PY38": {
     "line number": [
      1904
     ]
    },
    "libcst._parser.wrapped_tokenize.tokenize": {
     "line number": [
      1907
     ]
    },
    "tuple": {
     "line number": [
      1907
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.tests.test_wrapped_tokenize.WrappedTokenizeTest.test_errortoken": {
  "data": {
   "lineno": 1896,
   "symbols_in_volume": {
    "libcst._exceptions.ParserSyntaxError": {
     "line number": [
      1898
     ]
    },
    "libcst._parser.tests.test_wrapped_tokenize._PY36": {
     "line number": [
      1897
     ]
    },
    "libcst._parser.tests.test_wrapped_tokenize._PY37": {
     "line number": [
      1897
     ]
    },
    "libcst._parser.tests.test_wrapped_tokenize._PY38": {
     "line number": [
      1897
     ]
    },
    "libcst._parser.wrapped_tokenize.tokenize": {
     "line number": [
      1901
     ]
    },
    "tuple": {
     "line number": [
      1901
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.tests.test_wrapped_tokenize.WrappedTokenizeTest.test_tokenize": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "libcst._parser.parso.python.token.PythonTokenTypes.ASYNC": {
     "line number": [
      232,
      725
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.AWAIT": {
     "line number": [
      382,
      875
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.DEDENT": {
     "line number": [
      200,
      436,
      693,
      929,
      1186,
      1422,
      1621,
      1857
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.ENDMARKER": {
     "line number": [
      72,
      213,
      449,
      507,
      565,
      706,
      942,
      1000,
      1058,
      1199,
      1435,
      1493,
      1634,
      1870
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.INDENT": {
     "line number": [
      146,
      344,
      639,
      837,
      1132,
      1330,
      1567,
      1765
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.NAME": {
     "line number": [
      33,
      91,
      104,
      165,
      245,
      258,
      363,
      401,
      468,
      526,
      584,
      597,
      658,
      738,
      751,
      856,
      894,
      961,
      1019,
      1077,
      1090,
      1151,
      1218,
      1231,
      1244,
      1349,
      1368,
      1387,
      1454,
      1512,
      1525,
      1586,
      1653,
      1666,
      1679,
      1784,
      1803,
      1822
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.NEWLINE": {
     "line number": [
      59,
      130,
      184,
      325,
      420,
      494,
      552,
      623,
      677,
      818,
      913,
      987,
      1045,
      1116,
      1170,
      1311,
      1406,
      1480,
      1551,
      1605,
      1746,
      1841
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.OP": {
     "line number": [
      46,
      117,
      274,
      290,
      306,
      481,
      539,
      610,
      767,
      783,
      799,
      974,
      1032,
      1103,
      1260,
      1276,
      1292,
      1467,
      1538,
      1695,
      1711,
      1727
     ]
    },
    "libcst._parser.parso.utils.PythonVersionInfo": {
     "line number": [
      1887
     ]
    },
    "libcst._parser.tests.test_wrapped_tokenize._PY35": {
     "line number": [
      30,
      88,
      229,
      465
     ]
    },
    "libcst._parser.tests.test_wrapped_tokenize._PY36": {
     "line number": [
      523,
      581,
      722,
      958
     ]
    },
    "libcst._parser.tests.test_wrapped_tokenize._PY37": {
     "line number": [
      1016,
      1074,
      1215
     ]
    },
    "libcst._parser.tests.test_wrapped_tokenize._PY38": {
     "line number": [
      1451,
      1509,
      1650
     ]
    },
    "libcst._parser.types.whitespace_state.WhitespaceState": {
     "line number": [
      37,
      40,
      50,
      53,
      63,
      66,
      76,
      79,
      95,
      98,
      108,
      111,
      121,
      124,
      134,
      137,
      150,
      156,
      169,
      175,
      188,
      194,
      204,
      207,
      217,
      220,
      236,
      239,
      249,
      252,
      262,
      265,
      278,
      284,
      294,
      297,
      310,
      316,
      329,
      335,
      348,
      354,
      367,
      373,
      386,
      392,
      405,
      411,
      424,
      430,
      440,
      443,
      453,
      456,
      472,
      475,
      485,
      488,
      498,
      501,
      511,
      514,
      530,
      533,
      543,
      546,
      556,
      559,
      569,
      572,
      588,
      591,
      601,
      604,
      614,
      617,
      627,
      630,
      643,
      649,
      662,
      668,
      681,
      687,
      697,
      700,
      710,
      713,
      729,
      732,
      742,
      745,
      755,
      758,
      771,
      777,
      787,
      790,
      803,
      809,
      822,
      828,
      841,
      847,
      860,
      866,
      879,
      885,
      898,
      904,
      917,
      923,
      933,
      936,
      946,
      949,
      965,
      968,
      978,
      981,
      991,
      994,
      1004,
      1007,
      1023,
      1026,
      1036,
      1039,
      1049,
      1052,
      1062,
      1065,
      1081,
      1084,
      1094,
      1097,
      1107,
      1110,
      1120,
      1123,
      1136,
      1142,
      1155,
      1161,
      1174,
      1180,
      1190,
      1193,
      1203,
      1206,
      1222,
      1225,
      1235,
      1238,
      1248,
      1251,
      1264,
      1270,
      1280,
      1283,
      1296,
      1302,
      1315,
      1321,
      1334,
      1340,
      1353,
      1359,
      1372,
      1378,
      1391,
      1397,
      1410,
      1416,
      1426,
      1429,
      1439,
      1442,
      1458,
      1461,
      1471,
      1474,
      1484,
      1487,
      1497,
      1500,
      1516,
      1519,
      1529,
      1532,
      1542,
      1545,
      1555,
      1558,
      1571,
      1577,
      1590,
      1596,
      1609,
      1615,
      1625,
      1628,
      1638,
      1641,
      1657,
      1660,
      1670,
      1673,
      1683,
      1686,
      1699,
      1705,
      1715,
      1718,
      1731,
      1737,
      1750,
      1756,
      1769,
      1775,
      1788,
      1794,
      1807,
      1813,
      1826,
      1832,
      1845,
      1851,
      1861,
      1864,
      1874,
      1877
     ]
    },
    "libcst._parser.wrapped_tokenize.Token": {
     "line number": [
      1887,
      32,
      45,
      58,
      71,
      90,
      103,
      116,
      129,
      145,
      164,
      183,
      199,
      212,
      231,
      244,
      257,
      273,
      289,
      305,
      324,
      343,
      362,
      381,
      400,
      419,
      435,
      448,
      467,
      480,
      493,
      506,
      525,
      538,
      551,
      564,
      583,
      596,
      609,
      622,
      638,
      657,
      676,
      692,
      705,
      724,
      737,
      750,
      766,
      782,
      798,
      817,
      836,
      855,
      874,
      893,
      912,
      928,
      941,
      960,
      973,
      986,
      999,
      1018,
      1031,
      1044,
      1057,
      1076,
      1089,
      1102,
      1115,
      1131,
      1150,
      1169,
      1185,
      1198,
      1217,
      1230,
      1243,
      1259,
      1275,
      1291,
      1310,
      1329,
      1348,
      1367,
      1386,
      1405,
      1421,
      1434,
      1453,
      1466,
      1479,
      1492,
      1511,
      1524,
      1537,
      1550,
      1566,
      1585,
      1604,
      1620,
      1633,
      1652,
      1665,
      1678,
      1694,
      1710,
      1726,
      1745,
      1764,
      1783,
      1802,
      1821,
      1840,
      1856,
      1869
     ]
    },
    "libcst._parser.wrapped_tokenize.tokenize": {
     "line number": [
      1889
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      26
     ]
    },
    "str": {
     "line number": [
      1887
     ]
    },
    "tuple": {
     "line number": [
      1889
     ]
    },
    "typing.Sequence": {
     "line number": [
      1887
     ]
    },
    "zip": {
     "line number": [
      1891
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.tests.test_wrapped_tokenize._PY35": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "libcst._parser.tests.test_wrapped_tokenize._PY36": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "libcst._parser.tests.test_wrapped_tokenize._PY37": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "libcst._parser.tests.test_wrapped_tokenize._PY38": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "libcst._parser.tests.test_wrapped_tokenize.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_wrapped_tokenize.parse_version_string": {
  "data": {
   "shadows": "libcst._parser.parso.utils.parse_version_string"
  },
  "type": "import"
 },
 "libcst._parser.tests.test_wrapped_tokenize.tokenize": {
  "data": {
   "shadows": "libcst._parser.wrapped_tokenize.tokenize"
  },
  "type": "import"
 },
 "libcst._parser.types": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.types.config": {
  "data": {
   "symbols_in_volume": {
    "libcst._parser.types.config.re": {
     "line number": [
      20
     ]
    },
    "str": {
     "line number": [
      20
     ]
    },
    "typing.Pattern": {
     "line number": [
      20
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._parser.types.config.AutoConfig": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "enum.Enum": {
     "line number": [
      51
     ]
    },
    "int": {
     "line number": [
      56
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.types.config.AutoConfig.__repr__": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "str": {
     "line number": [
      59,
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.types.config.BaseWhitespaceParserConfig": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "libcst._parser.types.config.abc": {
     "line number": [
      23
     ]
    },
    "str": {
     "line number": [
      29,
      30
     ]
    },
    "typing.Sequence": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.types.config.Enum": {
  "data": {
   "shadows": "enum.Enum"
  },
  "type": "import"
 },
 "libcst._parser.types.config.FrozenSet": {
  "data": {
   "shadows": "typing.FrozenSet"
  },
  "type": "import"
 },
 "libcst._parser.types.config.KNOWN_PYTHON_VERSION_STRINGS": {
  "data": {
   "lineno": 63
  },
  "type": "constant"
 },
 "libcst._parser.types.config.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst._parser.types.config.NEWLINE_RE": {
  "data": {
   "shadows": "libcst._nodes.whitespace.NEWLINE_RE"
  },
  "type": "import"
 },
 "libcst._parser.types.config.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._parser.types.config.ParserConfig": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      46
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      34
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      33
     ]
    },
    "libcst._parser.parso.utils.PythonVersionInfo": {
     "line number": [
      47
     ]
    },
    "libcst._parser.types.config.BaseWhitespaceParserConfig": {
     "line number": [
      35
     ]
    },
    "str": {
     "line number": [
      42,
      43,
      44,
      45,
      48
     ]
    },
    "typing.FrozenSet": {
     "line number": [
      48
     ]
    },
    "typing.Sequence": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.types.config.PartialParserConfig": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      67
     ]
    },
    "dataclasses.field": {
     "line number": [
      101
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      66
     ]
    },
    "libcst._parser.parso.utils.PythonVersionInfo": {
     "line number": [
      101
     ]
    },
    "libcst._parser.types.config.AutoConfig": {
     "line number": [
      96,
      96,
      106,
      106,
      109,
      109,
      113,
      113,
      117,
      117
     ]
    },
    "str": {
     "line number": [
      96,
      106,
      109,
      113,
      117
     ]
    },
    "typing.FrozenSet": {
     "line number": [
      109
     ]
    },
    "typing.Union": {
     "line number": [
      96,
      106,
      109,
      113,
      117
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.types.config.PartialParserConfig.__post_init__": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": {
    "LookupError": {
     "line number": [
      155
     ]
    },
    "ValueError": {
     "line number": [
      140,
      156,
      163,
      169
     ]
    },
    "any": {
     "line number": [
      135
     ]
    },
    "isinstance": {
     "line number": [
      122,
      152,
      160,
      168
     ]
    },
    "libcst._nodes.whitespace.NEWLINE_RE.fullmatch": {
     "line number": [
      161
     ]
    },
    "libcst._parser.parso.utils.parse_version_string": {
     "line number": [
      133,
      136
     ]
    },
    "libcst._parser.types.config.AutoConfig": {
     "line number": [
      122,
      152,
      160,
      168
     ]
    },
    "libcst._parser.types.config.KNOWN_PYTHON_VERSION_STRINGS": {
     "line number": [
      137,
      139
     ]
    },
    "libcst._parser.types.config._pick_compatible_python_version": {
     "line number": [
      125
     ]
    },
    "libcst._parser.types.config.codecs": {
     "line number": [
      154
     ]
    },
    "object.__setattr__": {
     "line number": [
      149
     ]
    },
    "repr": {
     "line number": [
      156,
      164,
      169
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.types.config.PartialParserConfig.__repr__": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": {
    "dataclasses.fields": {
     "line number": [
      174
     ]
    },
    "getattr": {
     "line number": [
      179
     ]
    },
    "isinstance": {
     "line number": [
      180
     ]
    },
    "libcst._parser.types.config.AutoConfig": {
     "line number": [
      180
     ]
    },
    "str": {
     "line number": [
      172,
      171
     ]
    },
    "typing.List": {
     "line number": [
      172
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.types.config.Pattern": {
  "data": {
   "shadows": "typing.Pattern"
  },
  "type": "import"
 },
 "libcst._parser.types.config.PythonVersionInfo": {
  "data": {
   "shadows": "libcst._parser.parso.utils.PythonVersionInfo"
  },
  "type": "import"
 },
 "libcst._parser.types.config.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst._parser.types.config.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst._parser.types.config._pick_compatible_python_version": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      193
     ]
    },
    "libcst._parser.parso.utils.PythonVersionInfo": {
     "line number": [
      186
     ]
    },
    "libcst._parser.parso.utils.parse_version_string": {
     "line number": [
      187,
      189
     ]
    },
    "libcst._parser.types.config.KNOWN_PYTHON_VERSION_STRINGS": {
     "line number": [
      188
     ]
    },
    "libcst._parser.types.config.sys": {
     "line number": [
      195
     ]
    },
    "str": {
     "line number": [
      186
     ]
    },
    "typing.Optional": {
     "line number": [
      186
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.types.config.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "libcst._parser.types.config.add_slots": {
  "data": {
   "shadows": "libcst._add_slots.add_slots"
  },
  "type": "import"
 },
 "libcst._parser.types.config.codecs": {
  "data": {
   "shadows": "codecs"
  },
  "type": "import"
 },
 "libcst._parser.types.config.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst._parser.types.config.field": {
  "data": {
   "shadows": "dataclasses.field"
  },
  "type": "import"
 },
 "libcst._parser.types.config.fields": {
  "data": {
   "shadows": "dataclasses.fields"
  },
  "type": "import"
 },
 "libcst._parser.types.config.parse_version_string": {
  "data": {
   "shadows": "libcst._parser.parso.utils.parse_version_string"
  },
  "type": "import"
 },
 "libcst._parser.types.config.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "libcst._parser.types.config.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "libcst._parser.types.conversions": {
  "data": {
   "symbols_in_volume": {
    "libcst._parser.types.config.ParserConfig": {
     "line number": [
      13,
      15
     ]
    },
    "libcst._parser.types.token.Token": {
     "line number": [
      15
     ]
    },
    "typing.Any": {
     "line number": [
      13,
      13,
      15
     ]
    },
    "typing.Callable": {
     "line number": [
      13,
      15
     ]
    },
    "typing.Sequence": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._parser.types.conversions.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._parser.types.conversions.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst._parser.types.conversions.NonterminalConversion": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "libcst._parser.types.conversions.ParserConfig": {
  "data": {
   "shadows": "libcst._parser.types.config.ParserConfig"
  },
  "type": "import"
 },
 "libcst._parser.types.conversions.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst._parser.types.conversions.TerminalConversion": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "libcst._parser.types.conversions.Token": {
  "data": {
   "shadows": "libcst._parser.types.token.Token"
  },
  "type": "import"
 },
 "libcst._parser.types.partials": {
  "data": {
   "symbols_in_volume": {
    "typing.TypeVar": {
     "line number": [
      33
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._parser.types.partials.AnnAssignPartial": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      89
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      88
     ]
    },
    "libcst._nodes.expression.Annotation": {
     "line number": [
      91
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      93
     ]
    },
    "libcst._nodes.op.AssignEqual": {
     "line number": [
      92
     ]
    },
    "typing.Optional": {
     "line number": [
      92,
      93
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.types.partials.Annotation": {
  "data": {
   "shadows": "libcst._nodes.expression.Annotation"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.Arg": {
  "data": {
   "shadows": "libcst._nodes.expression.Arg"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.ArglistPartial": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      66
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      65
     ]
    },
    "libcst._nodes.expression.Arg": {
     "line number": [
      68
     ]
    },
    "typing.Sequence": {
     "line number": [
      68
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.types.partials.AsName": {
  "data": {
   "shadows": "libcst._nodes.statement.AsName"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.AssignEqual": {
  "data": {
   "shadows": "libcst._nodes.op.AssignEqual"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.AssignPartial": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      104
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      103
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      107
     ]
    },
    "libcst._nodes.op.AssignEqual": {
     "line number": [
      106
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.types.partials.Attribute": {
  "data": {
   "shadows": "libcst._nodes.expression.Attribute"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.AttributePartial": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      59
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      58
     ]
    },
    "libcst._nodes.expression.Name": {
     "line number": [
      62
     ]
    },
    "libcst._nodes.op.Dot": {
     "line number": [
      61
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.types.partials.AugAssignPartial": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      97
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      96
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      100
     ]
    },
    "libcst._nodes.op.BaseAugOp": {
     "line number": [
      99
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.types.partials.BaseAugOp": {
  "data": {
   "shadows": "libcst._nodes.op.BaseAugOp"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.BaseExpression": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseExpression"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.BaseFormattedStringContent": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseFormattedStringContent"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.BaseSmallStatement": {
  "data": {
   "shadows": "libcst._nodes.statement.BaseSmallStatement"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.CallPartial": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      72
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      71
     ]
    },
    "libcst._nodes.expression.Arg": {
     "line number": [
      75
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      74
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      76
     ]
    },
    "libcst._parser.types.partials.WithLeadingWhitespace": {
     "line number": [
      74
     ]
    },
    "typing.Sequence": {
     "line number": [
      75
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.types.partials.Colon": {
  "data": {
   "shadows": "libcst._nodes.op.Colon"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.Decorator": {
  "data": {
   "shadows": "libcst._nodes.statement.Decorator"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.DecoratorPartial": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      123
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      122
     ]
    },
    "libcst._nodes.statement.Decorator": {
     "line number": [
      125
     ]
    },
    "typing.Sequence": {
     "line number": [
      125
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.types.partials.Dot": {
  "data": {
   "shadows": "libcst._nodes.op.Dot"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.EmptyLine": {
  "data": {
   "shadows": "libcst._nodes.whitespace.EmptyLine"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.ExceptClausePartial": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      156
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      155
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      160
     ]
    },
    "libcst._nodes.statement.AsName": {
     "line number": [
      161
     ]
    },
    "libcst._nodes.whitespace.EmptyLine": {
     "line number": [
      158
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      159
     ]
    },
    "type": {
     "line number": [
      160
     ]
    },
    "typing.Optional": {
     "line number": [
      160,
      161
     ]
    },
    "typing.Sequence": {
     "line number": [
      158
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.types.partials.FormattedStringConversionPartial": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      142
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      141
     ]
    },
    "libcst._parser.types.whitespace_state.WhitespaceState": {
     "line number": [
      145
     ]
    },
    "str": {
     "line number": [
      144
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.types.partials.FormattedStringFormatSpecPartial": {
  "data": {
   "lineno": 148,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      149
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      148
     ]
    },
    "libcst._nodes.expression.BaseFormattedStringContent": {
     "line number": [
      151
     ]
    },
    "libcst._parser.types.whitespace_state.WhitespaceState": {
     "line number": [
      152
     ]
    },
    "typing.Sequence": {
     "line number": [
      151
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.types.partials.FuncdefPartial": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      115
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      114
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      117
     ]
    },
    "libcst._nodes.expression.Parameters": {
     "line number": [
      118
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      119
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.types.partials.Generic": {
  "data": {
   "shadows": "typing.Generic"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.ImportAlias": {
  "data": {
   "shadows": "libcst._nodes.statement.ImportAlias"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.ImportPartial": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      129
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      128
     ]
    },
    "libcst._nodes.statement.ImportAlias": {
     "line number": [
      131
     ]
    },
    "typing.Sequence": {
     "line number": [
      131
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.types.partials.ImportRelativePartial": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      135
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      134
     ]
    },
    "libcst._nodes.expression.Attribute": {
     "line number": [
      138
     ]
    },
    "libcst._nodes.expression.Name": {
     "line number": [
      138
     ]
    },
    "libcst._nodes.op.Dot": {
     "line number": [
      137
     ]
    },
    "typing.Optional": {
     "line number": [
      138
     ]
    },
    "typing.Sequence": {
     "line number": [
      137
     ]
    },
    "typing.Union": {
     "line number": [
      138
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.types.partials.Index": {
  "data": {
   "shadows": "libcst._nodes.expression.Index"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.LeftParen": {
  "data": {
   "shadows": "libcst._nodes.expression.LeftParen"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.LeftSquareBracket": {
  "data": {
   "shadows": "libcst._nodes.expression.LeftSquareBracket"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.Name": {
  "data": {
   "shadows": "libcst._nodes.expression.Name"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.ParamStarPartial": {
  "data": {
   "lineno": 110
  },
  "type": "class"
 },
 "libcst._parser.types.partials.Parameters": {
  "data": {
   "shadows": "libcst._nodes.expression.Parameters"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.RightParen": {
  "data": {
   "shadows": "libcst._nodes.expression.RightParen"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.RightSquareBracket": {
  "data": {
   "shadows": "libcst._nodes.expression.RightSquareBracket"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.SimpleStatementPartial": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      44
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      43
     ]
    },
    "libcst._nodes.statement.BaseSmallStatement": {
     "line number": [
      46
     ]
    },
    "libcst._nodes.whitespace.TrailingWhitespace": {
     "line number": [
      48
     ]
    },
    "libcst._parser.types.whitespace_state.WhitespaceState": {
     "line number": [
      47
     ]
    },
    "typing.Sequence": {
     "line number": [
      46
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.types.partials.SimpleWhitespace": {
  "data": {
   "shadows": "libcst._nodes.whitespace.SimpleWhitespace"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.Slice": {
  "data": {
   "shadows": "libcst._nodes.expression.Slice"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.SlicePartial": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      52
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      51
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      55
     ]
    },
    "libcst._nodes.op.Colon": {
     "line number": [
      54
     ]
    },
    "typing.Optional": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.types.partials.SubscriptElement": {
  "data": {
   "shadows": "libcst._nodes.expression.SubscriptElement"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.SubscriptPartial": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      80
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      79
     ]
    },
    "libcst._nodes.expression.Index": {
     "line number": [
      82
     ]
    },
    "libcst._nodes.expression.LeftSquareBracket": {
     "line number": [
      83
     ]
    },
    "libcst._nodes.expression.RightSquareBracket": {
     "line number": [
      84
     ]
    },
    "libcst._nodes.expression.Slice": {
     "line number": [
      82
     ]
    },
    "libcst._nodes.expression.SubscriptElement": {
     "line number": [
      82
     ]
    },
    "libcst._parser.types.whitespace_state.WhitespaceState": {
     "line number": [
      85
     ]
    },
    "slice": {
     "line number": [
      82
     ]
    },
    "typing.Sequence": {
     "line number": [
      82
     ]
    },
    "typing.Union": {
     "line number": [
      82
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.types.partials.TrailingWhitespace": {
  "data": {
   "shadows": "libcst._nodes.whitespace.TrailingWhitespace"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.TypeVar": {
  "data": {
   "shadows": "typing.TypeVar"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.WhitespaceState": {
  "data": {
   "shadows": "libcst._parser.types.whitespace_state.WhitespaceState"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.WithLeadingWhitespace": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      37
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      36
     ]
    },
    "libcst._parser.types.partials._T": {
     "line number": [
      38,
      39
     ]
    },
    "libcst._parser.types.whitespace_state.WhitespaceState": {
     "line number": [
      40
     ]
    },
    "typing.Generic": {
     "line number": [
      38
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.types.partials._T": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "libcst._parser.types.partials.add_slots": {
  "data": {
   "shadows": "libcst._add_slots.add_slots"
  },
  "type": "import"
 },
 "libcst._parser.types.partials.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst._parser.types.production": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.types.production.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._parser.types.production.Production": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      11
     ]
    },
    "str": {
     "line number": [
      13,
      14,
      15,
      16
     ]
    },
    "typing.Optional": {
     "line number": [
      15,
      16
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.types.production.Production.__str__": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "str": {
     "line number": [
      18
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.types.production.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst._parser.types.tests": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.types.tests.test_config": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.types.tests.test_config.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst._parser.types.tests.test_config.PartialParserConfig": {
  "data": {
   "shadows": "libcst._parser.types.config.PartialParserConfig"
  },
  "type": "import"
 },
 "libcst._parser.types.tests.test_config.TestConfig": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.types.tests.test_config.TestConfig.test_invalid_partial_parser_config": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      55
     ]
    },
    "factory": {
     "line number": [
      56
     ]
    },
    "libcst._parser.types.config.PartialParserConfig": {
     "line number": [
      53,
      31,
      35,
      39,
      43,
      47
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      28
     ]
    },
    "str": {
     "line number": [
      53
     ]
    },
    "typing.Callable": {
     "line number": [
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.types.tests.test_config.TestConfig.test_valid_partial_parser_config": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "factory": {
     "line number": [
      26
     ]
    },
    "libcst._parser.types.config.PartialParserConfig": {
     "line number": [
      24,
      26,
      15,
      16,
      17,
      18,
      19,
      20
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      13
     ]
    },
    "typing.Callable": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.types.tests.test_config.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst._parser.types.tests.test_config.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst._parser.types.token": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.types.token.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._parser.types.token.Token": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      16
     ]
    },
    "int": {
     "line number": [
      21,
      21,
      23,
      23
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      15
     ]
    },
    "libcst._parser.parso.python.token.TokenType": {
     "line number": [
      18
     ]
    },
    "libcst._parser.types.whitespace_state.WhitespaceState": {
     "line number": [
      24,
      25
     ]
    },
    "str": {
     "line number": [
      19,
      27
     ]
    },
    "type": {
     "line number": [
      18
     ]
    },
    "typing.Optional": {
     "line number": [
      27
     ]
    },
    "typing.Tuple": {
     "line number": [
      21,
      23
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.types.token.TokenType": {
  "data": {
   "shadows": "libcst._parser.parso.python.token.TokenType"
  },
  "type": "import"
 },
 "libcst._parser.types.token.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst._parser.types.token.WhitespaceState": {
  "data": {
   "shadows": "libcst._parser.types.whitespace_state.WhitespaceState"
  },
  "type": "import"
 },
 "libcst._parser.types.token.add_slots": {
  "data": {
   "shadows": "libcst._add_slots.add_slots"
  },
  "type": "import"
 },
 "libcst._parser.types.token.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst._parser.types.whitespace_state": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.types.whitespace_state.WhitespaceState": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      40
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      16
     ]
    },
    "int": {
     "line number": [
      36,
      37
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      15
     ]
    },
    "str": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.types.whitespace_state.add_slots": {
  "data": {
   "shadows": "libcst._add_slots.add_slots"
  },
  "type": "import"
 },
 "libcst._parser.types.whitespace_state.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst._parser.whitespace_parser": {
  "data": {},
  "type": "module"
 },
 "libcst._parser.whitespace_parser.BaseWhitespaceParserConfig": {
  "data": {
   "shadows": "libcst._parser.types.config.BaseWhitespaceParserConfig"
  },
  "type": "import"
 },
 "libcst._parser.whitespace_parser.COMMENT_RE": {
  "data": {
   "shadows": "libcst._nodes.whitespace.COMMENT_RE"
  },
  "type": "import"
 },
 "libcst._parser.whitespace_parser.Comment": {
  "data": {
   "shadows": "libcst._nodes.whitespace.Comment"
  },
  "type": "import"
 },
 "libcst._parser.whitespace_parser.EmptyLine": {
  "data": {
   "shadows": "libcst._nodes.whitespace.EmptyLine"
  },
  "type": "import"
 },
 "libcst._parser.whitespace_parser.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst._parser.whitespace_parser.NEWLINE_RE": {
  "data": {
   "shadows": "libcst._nodes.whitespace.NEWLINE_RE"
  },
  "type": "import"
 },
 "libcst._parser.whitespace_parser.Newline": {
  "data": {
   "shadows": "libcst._nodes.whitespace.Newline"
  },
  "type": "import"
 },
 "libcst._parser.whitespace_parser.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._parser.whitespace_parser.ParenthesizedWhitespace": {
  "data": {
   "shadows": "libcst._nodes.whitespace.ParenthesizedWhitespace"
  },
  "type": "import"
 },
 "libcst._parser.whitespace_parser.SIMPLE_WHITESPACE_RE": {
  "data": {
   "shadows": "libcst._nodes.whitespace.SIMPLE_WHITESPACE_RE"
  },
  "type": "import"
 },
 "libcst._parser.whitespace_parser.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst._parser.whitespace_parser.SimpleWhitespace": {
  "data": {
   "shadows": "libcst._nodes.whitespace.SimpleWhitespace"
  },
  "type": "import"
 },
 "libcst._parser.whitespace_parser.State": {
  "data": {
   "shadows": "libcst._parser.types.whitespace_state.WhitespaceState"
  },
  "type": "import"
 },
 "libcst._parser.whitespace_parser.TrailingWhitespace": {
  "data": {
   "shadows": "libcst._nodes.whitespace.TrailingWhitespace"
  },
  "type": "import"
 },
 "libcst._parser.whitespace_parser.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst._parser.whitespace_parser.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst._parser.whitespace_parser._parse_comment": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": {
    "len": {
     "line number": [
      207
     ]
    },
    "libcst._nodes.whitespace.COMMENT_RE.match": {
     "line number": [
      203
     ]
    },
    "libcst._nodes.whitespace.Comment": {
     "line number": [
      208,
      202
     ]
    },
    "libcst._parser.types.config.BaseWhitespaceParserConfig": {
     "line number": [
      201
     ]
    },
    "libcst._parser.types.whitespace_state.WhitespaceState": {
     "line number": [
      201
     ]
    },
    "typing.Optional": {
     "line number": [
      202
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.whitespace_parser._parse_empty_line": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      158
     ]
    },
    "libcst._nodes.whitespace.EmptyLine": {
     "line number": [
      171,
      149
     ]
    },
    "libcst._parser.types.config.BaseWhitespaceParserConfig": {
     "line number": [
      145
     ]
    },
    "libcst._parser.types.whitespace_state.WhitespaceState": {
     "line number": [
      146,
      151
     ]
    },
    "libcst._parser.whitespace_parser._parse_comment": {
     "line number": [
      162
     ]
    },
    "libcst._parser.whitespace_parser._parse_indent": {
     "line number": [
      155
     ]
    },
    "libcst._parser.whitespace_parser._parse_newline": {
     "line number": [
      163
     ]
    },
    "libcst._parser.whitespace_parser.parse_simple_whitespace": {
     "line number": [
      161
     ]
    },
    "str": {
     "line number": [
      148
     ]
    },
    "typing.Optional": {
     "line number": [
      148,
      149
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.whitespace_parser._parse_indent": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      193
     ]
    },
    "bool": {
     "line number": [
      179
     ]
    },
    "len": {
     "line number": [
      190,
      190,
      195
     ]
    },
    "libcst._parser.types.config.BaseWhitespaceParserConfig": {
     "line number": [
      175
     ]
    },
    "libcst._parser.types.whitespace_state.WhitespaceState": {
     "line number": [
      176
     ]
    },
    "str": {
     "line number": [
      178
     ]
    },
    "typing.Optional": {
     "line number": [
      178
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.whitespace_parser._parse_newline": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      222
     ]
    },
    "len": {
     "line number": [
      220,
      221,
      223
     ]
    },
    "libcst._nodes.whitespace.NEWLINE_RE.match": {
     "line number": [
      216
     ]
    },
    "libcst._nodes.whitespace.Newline": {
     "line number": [
      230,
      232,
      213
     ]
    },
    "libcst._parser.types.config.BaseWhitespaceParserConfig": {
     "line number": [
      212
     ]
    },
    "libcst._parser.types.whitespace_state.WhitespaceState": {
     "line number": [
      212
     ]
    },
    "typing.Optional": {
     "line number": [
      213
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.whitespace_parser._parse_parenthesized_whitespace": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": {
    "libcst._nodes.whitespace.ParenthesizedWhitespace": {
     "line number": [
      273,
      259
     ]
    },
    "libcst._parser.types.config.BaseWhitespaceParserConfig": {
     "line number": [
      258
     ]
    },
    "libcst._parser.types.whitespace_state.WhitespaceState": {
     "line number": [
      258
     ]
    },
    "libcst._parser.whitespace_parser._parse_empty_line": {
     "line number": [
      266
     ]
    },
    "libcst._parser.whitespace_parser._parse_indent": {
     "line number": [
      271
     ]
    },
    "libcst._parser.whitespace_parser._parse_trailing_whitespace": {
     "line number": [
      260
     ]
    },
    "libcst._parser.whitespace_parser.parse_simple_whitespace": {
     "line number": [
      272
     ]
    },
    "typing.Optional": {
     "line number": [
      259
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.whitespace_parser._parse_trailing_whitespace": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": {
    "libcst._nodes.whitespace.TrailingWhitespace": {
     "line number": [
      254,
      239
     ]
    },
    "libcst._parser.types.config.BaseWhitespaceParserConfig": {
     "line number": [
      238
     ]
    },
    "libcst._parser.types.whitespace_state.WhitespaceState": {
     "line number": [
      238,
      241
     ]
    },
    "libcst._parser.whitespace_parser._parse_comment": {
     "line number": [
      245
     ]
    },
    "libcst._parser.whitespace_parser._parse_newline": {
     "line number": [
      246
     ]
    },
    "libcst._parser.whitespace_parser.parse_simple_whitespace": {
     "line number": [
      244
     ]
    },
    "typing.Optional": {
     "line number": [
      239
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.whitespace_parser.parse_empty_lines": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "len": {
     "line number": [
      98
     ]
    },
    "libcst._nodes.whitespace.EmptyLine": {
     "line number": [
      77,
      68
     ]
    },
    "libcst._parser.types.config.BaseWhitespaceParserConfig": {
     "line number": [
      64
     ]
    },
    "libcst._parser.types.whitespace_state.WhitespaceState": {
     "line number": [
      65,
      74,
      77,
      88,
      108
     ]
    },
    "libcst._parser.whitespace_parser._parse_empty_line": {
     "line number": [
      79
     ]
    },
    "range": {
     "line number": [
      98
     ]
    },
    "str": {
     "line number": [
      67
     ]
    },
    "typing.List": {
     "line number": [
      77
     ]
    },
    "typing.Optional": {
     "line number": [
      67
     ]
    },
    "typing.Sequence": {
     "line number": [
      68
     ]
    },
    "typing.Tuple": {
     "line number": [
      77
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.whitespace_parser.parse_parenthesizable_whitespace": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": {
    "libcst._nodes.whitespace.ParenthesizedWhitespace": {
     "line number": [
      129
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      129
     ]
    },
    "libcst._parser.types.config.BaseWhitespaceParserConfig": {
     "line number": [
      128
     ]
    },
    "libcst._parser.types.whitespace_state.WhitespaceState": {
     "line number": [
      128
     ]
    },
    "libcst._parser.whitespace_parser._parse_parenthesized_whitespace": {
     "line number": [
      133
     ]
    },
    "libcst._parser.whitespace_parser.parse_simple_whitespace": {
     "line number": [
      137
     ]
    },
    "typing.Union": {
     "line number": [
      129
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.whitespace_parser.parse_simple_whitespace": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "len": {
     "line number": [
      59
     ]
    },
    "libcst._nodes.whitespace.SIMPLE_WHITESPACE_RE.match": {
     "line number": [
      44,
      50
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      60,
      40
     ]
    },
    "libcst._parser.types.config.BaseWhitespaceParserConfig": {
     "line number": [
      39
     ]
    },
    "libcst._parser.types.whitespace_state.WhitespaceState": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.whitespace_parser.parse_trailing_whitespace": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      119
     ]
    },
    "libcst._nodes.whitespace.TrailingWhitespace": {
     "line number": [
      116
     ]
    },
    "libcst._parser.types.config.BaseWhitespaceParserConfig": {
     "line number": [
      115
     ]
    },
    "libcst._parser.types.whitespace_state.WhitespaceState": {
     "line number": [
      115
     ]
    },
    "libcst._parser.whitespace_parser._parse_trailing_whitespace": {
     "line number": [
      117
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.wrapped_tokenize": {
  "data": {
   "symbols_in_volume": {
    "libcst._parser.parso.python.token.PythonTokenTypes.DEDENT": {
     "line number": [
      43
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.ENDMARKER": {
     "line number": [
      44
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.ERRORTOKEN": {
     "line number": [
      39
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.ERROR_DEDENT": {
     "line number": [
      40
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.FSTRING_END": {
     "line number": [
      47
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.FSTRING_START": {
     "line number": [
      46
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.INDENT": {
     "line number": [
      42
     ]
    },
    "libcst._parser.parso.python.token.PythonTokenTypes.OP": {
     "line number": [
      49
     ]
    },
    "libcst._parser.parso.python.token.TokenType": {
     "line number": [
      39,
      40,
      42,
      43,
      44,
      46,
      47,
      49
     ]
    },
    "libcst._parser.wrapped_tokenize._ParenthesisOrFStringStackEntry": {
     "line number": [
      57,
      58,
      60,
      61
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._parser.wrapped_tokenize.Enum": {
  "data": {
   "shadows": "enum.Enum"
  },
  "type": "import"
 },
 "libcst._parser.wrapped_tokenize.Generator": {
  "data": {
   "shadows": "typing.Generator"
  },
  "type": "import"
 },
 "libcst._parser.wrapped_tokenize.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst._parser.wrapped_tokenize.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._parser.wrapped_tokenize.OrigToken": {
  "data": {
   "shadows": "libcst._parser.parso.python.tokenize.Token"
  },
  "type": "import"
 },
 "libcst._parser.wrapped_tokenize.ParserSyntaxError": {
  "data": {
   "shadows": "libcst._exceptions.ParserSyntaxError"
  },
  "type": "import"
 },
 "libcst._parser.wrapped_tokenize.PythonTokenTypes": {
  "data": {
   "shadows": "libcst._parser.parso.python.token.PythonTokenTypes"
  },
  "type": "import"
 },
 "libcst._parser.wrapped_tokenize.PythonVersionInfo": {
  "data": {
   "shadows": "libcst._parser.parso.utils.PythonVersionInfo"
  },
  "type": "import"
 },
 "libcst._parser.wrapped_tokenize.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst._parser.wrapped_tokenize.Token": {
  "data": {
   "shadows": "libcst._parser.types.token.Token"
  },
  "type": "import"
 },
 "libcst._parser.wrapped_tokenize.TokenType": {
  "data": {
   "shadows": "libcst._parser.parso.python.token.TokenType"
  },
  "type": "import"
 },
 "libcst._parser.wrapped_tokenize.WhitespaceState": {
  "data": {
   "shadows": "libcst._parser.types.whitespace_state.WhitespaceState"
  },
  "type": "import"
 },
 "libcst._parser.wrapped_tokenize._ParenthesisOrFStringStackEntry": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "enum.Enum": {
     "line number": [
      52
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.wrapped_tokenize._TokenizeState": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      66
     ]
    },
    "dataclasses.field": {
     "line number": [
      69,
      74,
      75
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      65
     ]
    },
    "libcst._parser.types.whitespace_state.WhitespaceState": {
     "line number": [
      69,
      70
     ]
    },
    "libcst._parser.wrapped_tokenize._ParenthesisOrFStringStackEntry": {
     "line number": [
      75
     ]
    },
    "list": {
     "line number": [
      76
     ]
    },
    "str": {
     "line number": [
      68,
      74
     ]
    },
    "typing.List": {
     "line number": [
      74,
      75
     ]
    },
    "typing.Sequence": {
     "line number": [
      68
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._parser.wrapped_tokenize._convert_token": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": {
    "IndexError": {
     "line number": [
      182
     ]
    },
    "len": {
     "line number": [
      130,
      132,
      159,
      160,
      160,
      162,
      192
     ]
    },
    "libcst._exceptions.ParserSyntaxError": {
     "line number": [
      113,
      120,
      185
     ]
    },
    "libcst._parser.parso.python.tokenize.Token": {
     "line number": [
      107,
      107
     ]
    },
    "libcst._parser.parso.utils.split_lines": {
     "line number": [
      158
     ]
    },
    "libcst._parser.types.token.Token": {
     "line number": [
      203,
      108
     ]
    },
    "libcst._parser.types.whitespace_state.WhitespaceState": {
     "line number": [
      195
     ]
    },
    "libcst._parser.wrapped_tokenize._TokenizeState": {
     "line number": [
      107
     ]
    },
    "str": {
     "line number": [
      128
     ]
    },
    "typing.Optional": {
     "line number": [
      107,
      128
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.wrapped_tokenize.add_slots": {
  "data": {
   "shadows": "libcst._add_slots.add_slots"
  },
  "type": "import"
 },
 "libcst._parser.wrapped_tokenize.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst._parser.wrapped_tokenize.field": {
  "data": {
   "shadows": "dataclasses.field"
  },
  "type": "import"
 },
 "libcst._parser.wrapped_tokenize.orig_tokenize_lines": {
  "data": {
   "shadows": "libcst._parser.parso.python.tokenize.tokenize_lines"
  },
  "type": "import"
 },
 "libcst._parser.wrapped_tokenize.split_lines": {
  "data": {
   "shadows": "libcst._parser.parso.utils.split_lines"
  },
  "type": "import"
 },
 "libcst._parser.wrapped_tokenize.tokenize": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": {
    "libcst._parser.parso.python.tokenize.tokenize_lines": {
     "line number": [
      84
     ]
    },
    "libcst._parser.parso.utils.PythonVersionInfo": {
     "line number": [
      81
     ]
    },
    "libcst._parser.parso.utils.split_lines": {
     "line number": [
      83
     ]
    },
    "libcst._parser.types.token.Token": {
     "line number": [
      82
     ]
    },
    "str": {
     "line number": [
      81
     ]
    },
    "typing.Generator": {
     "line number": [
      82
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._parser.wrapped_tokenize.tokenize_lines": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": {
    "StopIteration": {
     "line number": [
      97
     ]
    },
    "iter": {
     "line number": [
      91
     ]
    },
    "libcst._parser.parso.python.tokenize.tokenize_lines": {
     "line number": [
      91
     ]
    },
    "libcst._parser.parso.utils.PythonVersionInfo": {
     "line number": [
      88
     ]
    },
    "libcst._parser.types.token.Token": {
     "line number": [
      89
     ]
    },
    "libcst._parser.wrapped_tokenize._TokenizeState": {
     "line number": [
      90
     ]
    },
    "libcst._parser.wrapped_tokenize._convert_token": {
     "line number": [
      101,
      103
     ]
    },
    "next": {
     "line number": [
      96
     ]
    },
    "str": {
     "line number": [
      88
     ]
    },
    "typing.Generator": {
     "line number": [
      89
     ]
    },
    "typing.Sequence": {
     "line number": [
      88
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._position": {
  "data": {
   "symbols_in_volume": {
    "int": {
     "line number": [
      21,
      21
     ]
    },
    "typing.Tuple": {
     "line number": [
      21
     ]
    },
    "typing.Union": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._position.CodePosition": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      25
     ]
    },
    "int": {
     "line number": [
      28,
      30
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._position.CodeRange": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      34
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      33
     ]
    },
    "libcst._position.CodePosition": {
     "line number": [
      37,
      39
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._position.CodeRange.__init__": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      52,
      52
     ]
    },
    "libcst._position.CodePosition": {
     "line number": [
      53,
      54,
      56,
      57
     ]
    },
    "libcst._position._CodePositionT": {
     "line number": [
      51,
      51
     ]
    },
    "object.__setattr__": {
     "line number": [
      53,
      54,
      58,
      59
     ]
    },
    "tuple": {
     "line number": [
      52,
      52
     ]
    },
    "typing.cast": {
     "line number": [
      56,
      57
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._position.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst._position.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst._position._CodePositionT": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "libcst._position.add_slots": {
  "data": {
   "shadows": "libcst._add_slots.add_slots"
  },
  "type": "import"
 },
 "libcst._position.cast": {
  "data": {
   "shadows": "typing.cast"
  },
  "type": "import"
 },
 "libcst._position.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst._position.overload": {
  "data": {
   "shadows": "typing.overload"
  },
  "type": "import"
 },
 "libcst._removal_sentinel": {
  "data": {},
  "type": "module"
 },
 "libcst._removal_sentinel.Enum": {
  "data": {
   "shadows": "enum.Enum"
  },
  "type": "import"
 },
 "libcst._removal_sentinel.RemovalSentinel": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "enum.Enum": {
     "line number": [
      14
     ]
    },
    "enum.auto": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._removal_sentinel.RemoveFromParent": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      50,
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._removal_sentinel.auto": {
  "data": {
   "shadows": "enum.auto"
  },
  "type": "import"
 },
 "libcst._tabs": {
  "data": {},
  "type": "module"
 },
 "libcst._tabs.expand_tabs": {
  "data": {
   "lineno": 7,
   "symbols_in_volume": {
    "str": {
     "line number": [
      7,
      7
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._type_enforce": {
  "data": {
   "symbols_in_volume": {
    "ImportError": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._type_enforce.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._type_enforce.ForwardRef": {
  "data": {
   "shadows": "typing._ForwardRef"
  },
  "type": "import"
 },
 "libcst._type_enforce.Iterable": {
  "data": {
   "shadows": "typing.Iterable"
  },
  "type": "import"
 },
 "libcst._type_enforce.Literal": {
  "data": {
   "shadows": "typing_extensions.Literal"
  },
  "type": "import"
 },
 "libcst._type_enforce.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "libcst._type_enforce.MutableMapping": {
  "data": {
   "shadows": "typing.MutableMapping"
  },
  "type": "import"
 },
 "libcst._type_enforce.MutableSequence": {
  "data": {
   "shadows": "typing.MutableSequence"
  },
  "type": "import"
 },
 "libcst._type_enforce.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst._type_enforce.get_args": {
  "data": {
   "shadows": "typing_inspect.get_args"
  },
  "type": "import"
 },
 "libcst._type_enforce.get_origin": {
  "data": {
   "shadows": "typing_inspect.get_origin"
  },
  "type": "import"
 },
 "libcst._type_enforce.is_classvar": {
  "data": {
   "shadows": "typing_inspect.is_classvar"
  },
  "type": "import"
 },
 "libcst._type_enforce.is_typevar": {
  "data": {
   "shadows": "typing_inspect.is_typevar"
  },
  "type": "import"
 },
 "libcst._type_enforce.is_union_type": {
  "data": {
   "shadows": "typing_inspect.is_union_type"
  },
  "type": "import"
 },
 "libcst._type_enforce.is_value_of_type": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      165
     ]
    },
    "NotImplementedError": {
     "line number": [
      166
     ]
    },
    "all": {
     "line number": [
      153
     ]
    },
    "any": {
     "line number": [
      64,
      73
     ]
    },
    "bool": {
     "line number": [
      19,
      20
     ]
    },
    "bytes": {
     "line number": [
      137
     ]
    },
    "float": {
     "line number": [
      160,
      161
     ]
    },
    "hasattr": {
     "line number": [
      47,
      69
     ]
    },
    "int": {
     "line number": [
      161
     ]
    },
    "isinstance": {
     "line number": [
      68,
      75,
      83,
      161,
      163
     ]
    },
    "issubclass": {
     "line number": [
      102,
      107,
      115,
      136,
      136,
      143,
      152
     ]
    },
    "len": {
     "line number": [
      87,
      94,
      94,
      111,
      147
     ]
    },
    "str": {
     "line number": [
      137
     ]
    },
    "tuple": {
     "line number": [
      82
     ]
    },
    "type": {
     "line number": [
      68,
      107,
      143,
      164
     ]
    },
    "typing.Any": {
     "line number": [
      19,
      19,
      48,
      51,
      51,
      60
     ]
    },
    "typing.Iterable": {
     "line number": [
      136
     ]
    },
    "typing.Mapping": {
     "line number": [
      102
     ]
    },
    "typing.MutableMapping": {
     "line number": [
      115
     ]
    },
    "typing.MutableSequence": {
     "line number": [
      152
     ]
    },
    "typing.Tuple": {
     "line number": [
      82,
      83,
      137
     ]
    },
    "typing._ForwardRef": {
     "line number": [
      75
     ]
    },
    "typing_extensions.Literal": {
     "line number": [
      68
     ]
    },
    "typing_inspect.get_args": {
     "line number": [
      50,
      72,
      86,
      110,
      146
     ]
    },
    "typing_inspect.get_origin": {
     "line number": [
      58
     ]
    },
    "typing_inspect.is_classvar": {
     "line number": [
      45
     ]
    },
    "typing_inspect.is_typevar": {
     "line number": [
      53
     ]
    },
    "typing_inspect.is_union_type": {
     "line number": [
      63
     ]
    },
    "zip": {
     "line number": [
      97
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor": {
  "data": {
   "symbols_in_volume": {
    "typing.TYPE_CHECKING": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._typed_visitor.Add": {
  "data": {
   "shadows": "libcst._nodes.op.Add"
  },
  "type": "import"
 },
 "libcst._typed_visitor.AddAssign": {
  "data": {
   "shadows": "libcst._nodes.op.AddAssign"
  },
  "type": "import"
 },
 "libcst._typed_visitor.And": {
  "data": {
   "shadows": "libcst._nodes.op.And"
  },
  "type": "import"
 },
 "libcst._typed_visitor.AnnAssign": {
  "data": {
   "shadows": "libcst._nodes.statement.AnnAssign"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Annotation": {
  "data": {
   "shadows": "libcst._nodes.expression.Annotation"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Arg": {
  "data": {
   "shadows": "libcst._nodes.expression.Arg"
  },
  "type": "import"
 },
 "libcst._typed_visitor.AsName": {
  "data": {
   "shadows": "libcst._nodes.statement.AsName"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Assert": {
  "data": {
   "shadows": "libcst._nodes.statement.Assert"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Assign": {
  "data": {
   "shadows": "libcst._nodes.statement.Assign"
  },
  "type": "import"
 },
 "libcst._typed_visitor.AssignEqual": {
  "data": {
   "shadows": "libcst._nodes.op.AssignEqual"
  },
  "type": "import"
 },
 "libcst._typed_visitor.AssignTarget": {
  "data": {
   "shadows": "libcst._nodes.statement.AssignTarget"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Asynchronous": {
  "data": {
   "shadows": "libcst._nodes.expression.Asynchronous"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Attribute": {
  "data": {
   "shadows": "libcst._nodes.expression.Attribute"
  },
  "type": "import"
 },
 "libcst._typed_visitor.AugAssign": {
  "data": {
   "shadows": "libcst._nodes.statement.AugAssign"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Await": {
  "data": {
   "shadows": "libcst._nodes.expression.Await"
  },
  "type": "import"
 },
 "libcst._typed_visitor.BaseAugOp": {
  "data": {
   "shadows": "libcst._nodes.op.BaseAugOp"
  },
  "type": "import"
 },
 "libcst._typed_visitor.BaseBinaryOp": {
  "data": {
   "shadows": "libcst._nodes.op.BaseBinaryOp"
  },
  "type": "import"
 },
 "libcst._typed_visitor.BaseBooleanOp": {
  "data": {
   "shadows": "libcst._nodes.op.BaseBooleanOp"
  },
  "type": "import"
 },
 "libcst._typed_visitor.BaseCompOp": {
  "data": {
   "shadows": "libcst._nodes.op.BaseCompOp"
  },
  "type": "import"
 },
 "libcst._typed_visitor.BaseDictElement": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseDictElement"
  },
  "type": "import"
 },
 "libcst._typed_visitor.BaseElement": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseElement"
  },
  "type": "import"
 },
 "libcst._typed_visitor.BaseExpression": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseExpression"
  },
  "type": "import"
 },
 "libcst._typed_visitor.BaseFormattedStringContent": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseFormattedStringContent"
  },
  "type": "import"
 },
 "libcst._typed_visitor.BaseParenthesizableWhitespace": {
  "data": {
   "shadows": "libcst._nodes.whitespace.BaseParenthesizableWhitespace"
  },
  "type": "import"
 },
 "libcst._typed_visitor.BaseSlice": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseSlice"
  },
  "type": "import"
 },
 "libcst._typed_visitor.BaseSmallStatement": {
  "data": {
   "shadows": "libcst._nodes.statement.BaseSmallStatement"
  },
  "type": "import"
 },
 "libcst._typed_visitor.BaseStatement": {
  "data": {
   "shadows": "libcst._nodes.statement.BaseStatement"
  },
  "type": "import"
 },
 "libcst._typed_visitor.BaseSuite": {
  "data": {
   "shadows": "libcst._nodes.statement.BaseSuite"
  },
  "type": "import"
 },
 "libcst._typed_visitor.BaseUnaryOp": {
  "data": {
   "shadows": "libcst._nodes.op.BaseUnaryOp"
  },
  "type": "import"
 },
 "libcst._typed_visitor.BinaryOperation": {
  "data": {
   "shadows": "libcst._nodes.expression.BinaryOperation"
  },
  "type": "import"
 },
 "libcst._typed_visitor.BitAnd": {
  "data": {
   "shadows": "libcst._nodes.op.BitAnd"
  },
  "type": "import"
 },
 "libcst._typed_visitor.BitAndAssign": {
  "data": {
   "shadows": "libcst._nodes.op.BitAndAssign"
  },
  "type": "import"
 },
 "libcst._typed_visitor.BitInvert": {
  "data": {
   "shadows": "libcst._nodes.op.BitInvert"
  },
  "type": "import"
 },
 "libcst._typed_visitor.BitOr": {
  "data": {
   "shadows": "libcst._nodes.op.BitOr"
  },
  "type": "import"
 },
 "libcst._typed_visitor.BitOrAssign": {
  "data": {
   "shadows": "libcst._nodes.op.BitOrAssign"
  },
  "type": "import"
 },
 "libcst._typed_visitor.BitXor": {
  "data": {
   "shadows": "libcst._nodes.op.BitXor"
  },
  "type": "import"
 },
 "libcst._typed_visitor.BitXorAssign": {
  "data": {
   "shadows": "libcst._nodes.op.BitXorAssign"
  },
  "type": "import"
 },
 "libcst._typed_visitor.BooleanOperation": {
  "data": {
   "shadows": "libcst._nodes.expression.BooleanOperation"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Break": {
  "data": {
   "shadows": "libcst._nodes.statement.Break"
  },
  "type": "import"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions": {
  "data": {
   "lineno": 183
  },
  "type": "class"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_AddAssign_whitespace_after": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      220
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_AddAssign_whitespace_before": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      212
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Add_whitespace_after": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      200
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Add_whitespace_before": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      192
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_And_whitespace_after": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      240
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_And_whitespace_before": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      232
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_AnnAssign_annotation": {
  "data": {
   "lineno": 260,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      260
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_AnnAssign_equal": {
  "data": {
   "lineno": 276,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      276
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_AnnAssign_semicolon": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      284
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_AnnAssign_target": {
  "data": {
   "lineno": 252,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      252
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_AnnAssign_value": {
  "data": {
   "lineno": 268,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      268
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Annotation_annotation": {
  "data": {
   "lineno": 296,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      296
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Annotation_whitespace_after_indicator": {
  "data": {
   "lineno": 312,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      312
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Annotation_whitespace_before_indicator": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      304
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Arg_comma": {
  "data": {
   "lineno": 348,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      348
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Arg_equal": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      340
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Arg_keyword": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      332
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Arg_star": {
  "data": {
   "lineno": 356,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      356
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Arg_value": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      324
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Arg_whitespace_after_arg": {
  "data": {
   "lineno": 372,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      372
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Arg_whitespace_after_star": {
  "data": {
   "lineno": 364,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      364
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_AsName_name": {
  "data": {
   "lineno": 384,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      384
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_AsName_whitespace_after_as": {
  "data": {
   "lineno": 400,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      400
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_AsName_whitespace_before_as": {
  "data": {
   "lineno": 392,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      392
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Assert_comma": {
  "data": {
   "lineno": 428,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      428
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Assert_msg": {
  "data": {
   "lineno": 420,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      420
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Assert_semicolon": {
  "data": {
   "lineno": 444,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      444
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Assert_test": {
  "data": {
   "lineno": 412,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      412
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Assert_whitespace_after_assert": {
  "data": {
   "lineno": 436,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      436
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_AssignEqual_whitespace_after": {
  "data": {
   "lineno": 492,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      492
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_AssignEqual_whitespace_before": {
  "data": {
   "lineno": 484,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      484
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_AssignTarget_target": {
  "data": {
   "lineno": 504,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      504
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_AssignTarget_whitespace_after_equal": {
  "data": {
   "lineno": 520,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      520
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_AssignTarget_whitespace_before_equal": {
  "data": {
   "lineno": 512,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      512
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Assign_semicolon": {
  "data": {
   "lineno": 472,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      472
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Assign_targets": {
  "data": {
   "lineno": 456,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      456
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Assign_value": {
  "data": {
   "lineno": 464,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      464
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Asynchronous_whitespace_after": {
  "data": {
   "lineno": 532,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      532
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Attribute_attr": {
  "data": {
   "lineno": 552,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      552
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Attribute_dot": {
  "data": {
   "lineno": 560,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      560
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Attribute_lpar": {
  "data": {
   "lineno": 568,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      568
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Attribute_rpar": {
  "data": {
   "lineno": 576,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      576
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Attribute_value": {
  "data": {
   "lineno": 544,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      544
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_AugAssign_operator": {
  "data": {
   "lineno": 596,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      596
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_AugAssign_semicolon": {
  "data": {
   "lineno": 612,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      612
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_AugAssign_target": {
  "data": {
   "lineno": 588,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      588
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_AugAssign_value": {
  "data": {
   "lineno": 604,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      604
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Await_expression": {
  "data": {
   "lineno": 624,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      624
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Await_lpar": {
  "data": {
   "lineno": 632,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      632
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Await_rpar": {
  "data": {
   "lineno": 640,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      640
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Await_whitespace_after_await": {
  "data": {
   "lineno": 648,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      648
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_BinaryOperation_left": {
  "data": {
   "lineno": 660,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      660
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_BinaryOperation_lpar": {
  "data": {
   "lineno": 684,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      684
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_BinaryOperation_operator": {
  "data": {
   "lineno": 668,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      668
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_BinaryOperation_right": {
  "data": {
   "lineno": 676,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      676
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_BinaryOperation_rpar": {
  "data": {
   "lineno": 692,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      692
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_BitAndAssign_whitespace_after": {
  "data": {
   "lineno": 732,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      732
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_BitAndAssign_whitespace_before": {
  "data": {
   "lineno": 724,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      724
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_BitAnd_whitespace_after": {
  "data": {
   "lineno": 712,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      712
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_BitAnd_whitespace_before": {
  "data": {
   "lineno": 704,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      704
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_BitInvert_whitespace_after": {
  "data": {
   "lineno": 744,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      744
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_BitOrAssign_whitespace_after": {
  "data": {
   "lineno": 784,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      784
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_BitOrAssign_whitespace_before": {
  "data": {
   "lineno": 776,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      776
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_BitOr_whitespace_after": {
  "data": {
   "lineno": 764,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      764
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_BitOr_whitespace_before": {
  "data": {
   "lineno": 756,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      756
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_BitXorAssign_whitespace_after": {
  "data": {
   "lineno": 824,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      824
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_BitXorAssign_whitespace_before": {
  "data": {
   "lineno": 816,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      816
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_BitXor_whitespace_after": {
  "data": {
   "lineno": 804,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      804
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_BitXor_whitespace_before": {
  "data": {
   "lineno": 796,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      796
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_BooleanOperation_left": {
  "data": {
   "lineno": 836,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      836
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_BooleanOperation_lpar": {
  "data": {
   "lineno": 860,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      860
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_BooleanOperation_operator": {
  "data": {
   "lineno": 844,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      844
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_BooleanOperation_right": {
  "data": {
   "lineno": 852,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      852
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_BooleanOperation_rpar": {
  "data": {
   "lineno": 868,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      868
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Break_semicolon": {
  "data": {
   "lineno": 880,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      880
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Call_args": {
  "data": {
   "lineno": 900,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      900
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Call_func": {
  "data": {
   "lineno": 892,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      892
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Call_lpar": {
  "data": {
   "lineno": 908,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      908
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Call_rpar": {
  "data": {
   "lineno": 916,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      916
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Call_whitespace_after_func": {
  "data": {
   "lineno": 924,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      924
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Call_whitespace_before_args": {
  "data": {
   "lineno": 932,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      932
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ClassDef_bases": {
  "data": {
   "lineno": 960,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      960
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ClassDef_body": {
  "data": {
   "lineno": 952,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      952
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ClassDef_decorators": {
  "data": {
   "lineno": 976,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      976
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ClassDef_keywords": {
  "data": {
   "lineno": 968,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      968
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ClassDef_leading_lines": {
  "data": {
   "lineno": 1000,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1000
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ClassDef_lines_after_decorators": {
  "data": {
   "lineno": 1008,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1008
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ClassDef_lpar": {
  "data": {
   "lineno": 984,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      984
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ClassDef_name": {
  "data": {
   "lineno": 944,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      944
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ClassDef_rpar": {
  "data": {
   "lineno": 992,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      992
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ClassDef_whitespace_after_class": {
  "data": {
   "lineno": 1016,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1016
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ClassDef_whitespace_after_name": {
  "data": {
   "lineno": 1024,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1024
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ClassDef_whitespace_before_colon": {
  "data": {
   "lineno": 1032,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1032
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Colon_whitespace_after": {
  "data": {
   "lineno": 1052,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1052
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Colon_whitespace_before": {
  "data": {
   "lineno": 1044,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1044
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Comma_whitespace_after": {
  "data": {
   "lineno": 1072,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1072
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Comma_whitespace_before": {
  "data": {
   "lineno": 1064,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1064
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Comment_value": {
  "data": {
   "lineno": 1084,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1084
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_CompFor_asynchronous": {
  "data": {
   "lineno": 1128,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1128
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_CompFor_ifs": {
  "data": {
   "lineno": 1112,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1112
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_CompFor_inner_for_in": {
  "data": {
   "lineno": 1120,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1120
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_CompFor_iter": {
  "data": {
   "lineno": 1104,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1104
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_CompFor_target": {
  "data": {
   "lineno": 1096,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1096
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_CompFor_whitespace_after_for": {
  "data": {
   "lineno": 1144,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1144
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_CompFor_whitespace_after_in": {
  "data": {
   "lineno": 1160,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1160
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_CompFor_whitespace_before": {
  "data": {
   "lineno": 1136,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1136
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_CompFor_whitespace_before_in": {
  "data": {
   "lineno": 1152,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1152
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_CompIf_test": {
  "data": {
   "lineno": 1172,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1172
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_CompIf_whitespace_before": {
  "data": {
   "lineno": 1180,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1180
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_CompIf_whitespace_before_test": {
  "data": {
   "lineno": 1188,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1188
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ComparisonTarget_comparator": {
  "data": {
   "lineno": 1244,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1244
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ComparisonTarget_operator": {
  "data": {
   "lineno": 1236,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1236
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Comparison_comparisons": {
  "data": {
   "lineno": 1208,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1208
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Comparison_left": {
  "data": {
   "lineno": 1200,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1200
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Comparison_lpar": {
  "data": {
   "lineno": 1216,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1216
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Comparison_rpar": {
  "data": {
   "lineno": 1224,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1224
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ConcatenatedString_left": {
  "data": {
   "lineno": 1256,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1256
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ConcatenatedString_lpar": {
  "data": {
   "lineno": 1272,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1272
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ConcatenatedString_right": {
  "data": {
   "lineno": 1264,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1264
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ConcatenatedString_rpar": {
  "data": {
   "lineno": 1280,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1280
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ConcatenatedString_whitespace_between": {
  "data": {
   "lineno": 1290,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1290
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Continue_semicolon": {
  "data": {
   "lineno": 1304,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1304
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Decorator_decorator": {
  "data": {
   "lineno": 1316,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1316
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Decorator_leading_lines": {
  "data": {
   "lineno": 1324,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1324
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Decorator_trailing_whitespace": {
  "data": {
   "lineno": 1340,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1340
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Decorator_whitespace_after_at": {
  "data": {
   "lineno": 1332,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1332
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Del_semicolon": {
  "data": {
   "lineno": 1368,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1368
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Del_target": {
  "data": {
   "lineno": 1352,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1352
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Del_whitespace_after_del": {
  "data": {
   "lineno": 1360,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1360
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_DictComp_for_in": {
  "data": {
   "lineno": 1440,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1440
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_DictComp_key": {
  "data": {
   "lineno": 1424,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1424
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_DictComp_lbrace": {
  "data": {
   "lineno": 1448,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1448
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_DictComp_lpar": {
  "data": {
   "lineno": 1464,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1464
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_DictComp_rbrace": {
  "data": {
   "lineno": 1456,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1456
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_DictComp_rpar": {
  "data": {
   "lineno": 1472,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1472
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_DictComp_value": {
  "data": {
   "lineno": 1432,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1432
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_DictComp_whitespace_after_colon": {
  "data": {
   "lineno": 1488,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1488
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_DictComp_whitespace_before_colon": {
  "data": {
   "lineno": 1480,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1480
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_DictElement_comma": {
  "data": {
   "lineno": 1516,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1516
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_DictElement_key": {
  "data": {
   "lineno": 1500,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1500
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_DictElement_value": {
  "data": {
   "lineno": 1508,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1508
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_DictElement_whitespace_after_colon": {
  "data": {
   "lineno": 1532,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1532
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_DictElement_whitespace_before_colon": {
  "data": {
   "lineno": 1524,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1524
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Dict_elements": {
  "data": {
   "lineno": 1380,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1380
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Dict_lbrace": {
  "data": {
   "lineno": 1388,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1388
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Dict_lpar": {
  "data": {
   "lineno": 1404,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1404
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Dict_rbrace": {
  "data": {
   "lineno": 1396,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1396
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Dict_rpar": {
  "data": {
   "lineno": 1412,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1412
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_DivideAssign_whitespace_after": {
  "data": {
   "lineno": 1572,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1572
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_DivideAssign_whitespace_before": {
  "data": {
   "lineno": 1564,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1564
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Divide_whitespace_after": {
  "data": {
   "lineno": 1552,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1552
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Divide_whitespace_before": {
  "data": {
   "lineno": 1544,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1544
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Dot_whitespace_after": {
  "data": {
   "lineno": 1592,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1592
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Dot_whitespace_before": {
  "data": {
   "lineno": 1584,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1584
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Element_comma": {
  "data": {
   "lineno": 1612,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1612
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Element_value": {
  "data": {
   "lineno": 1604,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1604
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Ellipsis_lpar": {
  "data": {
   "lineno": 1624,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1624
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Ellipsis_rpar": {
  "data": {
   "lineno": 1632,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1632
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Else_body": {
  "data": {
   "lineno": 1644,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1644
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Else_leading_lines": {
  "data": {
   "lineno": 1652,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1652
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Else_whitespace_before_colon": {
  "data": {
   "lineno": 1660,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1660
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_EmptyLine_comment": {
  "data": {
   "lineno": 1688,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1688
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_EmptyLine_indent": {
  "data": {
   "lineno": 1672,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1672
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_EmptyLine_newline": {
  "data": {
   "lineno": 1696,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1696
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_EmptyLine_whitespace": {
  "data": {
   "lineno": 1680,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1680
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Equal_whitespace_after": {
  "data": {
   "lineno": 1716,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1716
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Equal_whitespace_before": {
  "data": {
   "lineno": 1708,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1708
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ExceptHandler_body": {
  "data": {
   "lineno": 1728,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1728
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ExceptHandler_leading_lines": {
  "data": {
   "lineno": 1752,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1752
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ExceptHandler_name": {
  "data": {
   "lineno": 1744,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1744
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ExceptHandler_type": {
  "data": {
   "lineno": 1736,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1736
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ExceptHandler_whitespace_after_except": {
  "data": {
   "lineno": 1762,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1762
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ExceptHandler_whitespace_before_colon": {
  "data": {
   "lineno": 1774,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1774
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Expr_semicolon": {
  "data": {
   "lineno": 1796,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1796
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Expr_value": {
  "data": {
   "lineno": 1788,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1788
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Finally_body": {
  "data": {
   "lineno": 1808,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1808
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Finally_leading_lines": {
  "data": {
   "lineno": 1816,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1816
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Finally_whitespace_before_colon": {
  "data": {
   "lineno": 1824,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1824
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Float_lpar": {
  "data": {
   "lineno": 1844,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1844
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Float_rpar": {
  "data": {
   "lineno": 1852,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1852
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Float_value": {
  "data": {
   "lineno": 1836,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1836
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FloorDivideAssign_whitespace_after": {
  "data": {
   "lineno": 1898,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1898
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FloorDivideAssign_whitespace_before": {
  "data": {
   "lineno": 1886,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1886
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FloorDivide_whitespace_after": {
  "data": {
   "lineno": 1872,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1872
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FloorDivide_whitespace_before": {
  "data": {
   "lineno": 1864,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1864
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_For_asynchronous": {
  "data": {
   "lineno": 1944,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1944
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_For_body": {
  "data": {
   "lineno": 1928,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1928
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_For_iter": {
  "data": {
   "lineno": 1920,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1920
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_For_leading_lines": {
  "data": {
   "lineno": 1952,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1952
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_For_orelse": {
  "data": {
   "lineno": 1936,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1936
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_For_target": {
  "data": {
   "lineno": 1912,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1912
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_For_whitespace_after_for": {
  "data": {
   "lineno": 1960,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1960
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_For_whitespace_after_in": {
  "data": {
   "lineno": 1976,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1976
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_For_whitespace_before_colon": {
  "data": {
   "lineno": 1984,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1984
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_For_whitespace_before_in": {
  "data": {
   "lineno": 1968,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1968
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FormattedStringExpression_conversion": {
  "data": {
   "lineno": 2056,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2056
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FormattedStringExpression_equal": {
  "data": {
   "lineno": 2104,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2104
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FormattedStringExpression_expression": {
  "data": {
   "lineno": 2044,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2044
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FormattedStringExpression_format_spec": {
  "data": {
   "lineno": 2068,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2068
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FormattedStringExpression_whitespace_after_expression": {
  "data": {
   "lineno": 2092,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2092
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FormattedStringExpression_whitespace_before_expression": {
  "data": {
   "lineno": 2080,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2080
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FormattedStringText_value": {
  "data": {
   "lineno": 2118,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2118
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FormattedString_end": {
  "data": {
   "lineno": 2012,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2012
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FormattedString_lpar": {
  "data": {
   "lineno": 2020,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2020
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FormattedString_parts": {
  "data": {
   "lineno": 1996,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1996
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FormattedString_rpar": {
  "data": {
   "lineno": 2028,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2028
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FormattedString_start": {
  "data": {
   "lineno": 2004,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2004
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_From_item": {
  "data": {
   "lineno": 2130,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2130
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_From_whitespace_after_from": {
  "data": {
   "lineno": 2146,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2146
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_From_whitespace_before_from": {
  "data": {
   "lineno": 2138,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2138
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FunctionDef_asynchronous": {
  "data": {
   "lineno": 2198,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2198
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FunctionDef_body": {
  "data": {
   "lineno": 2174,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2174
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FunctionDef_decorators": {
  "data": {
   "lineno": 2182,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2182
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FunctionDef_leading_lines": {
  "data": {
   "lineno": 2206,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2206
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FunctionDef_lines_after_decorators": {
  "data": {
   "lineno": 2214,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2214
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FunctionDef_name": {
  "data": {
   "lineno": 2158,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2158
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FunctionDef_params": {
  "data": {
   "lineno": 2166,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2166
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FunctionDef_returns": {
  "data": {
   "lineno": 2190,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2190
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FunctionDef_whitespace_after_def": {
  "data": {
   "lineno": 2222,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2222
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FunctionDef_whitespace_after_name": {
  "data": {
   "lineno": 2230,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2230
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FunctionDef_whitespace_before_colon": {
  "data": {
   "lineno": 2246,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2246
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_FunctionDef_whitespace_before_params": {
  "data": {
   "lineno": 2238,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2238
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_GeneratorExp_elt": {
  "data": {
   "lineno": 2258,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2258
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_GeneratorExp_for_in": {
  "data": {
   "lineno": 2266,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2266
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_GeneratorExp_lpar": {
  "data": {
   "lineno": 2274,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2274
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_GeneratorExp_rpar": {
  "data": {
   "lineno": 2282,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2282
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Global_names": {
  "data": {
   "lineno": 2294,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2294
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Global_semicolon": {
  "data": {
   "lineno": 2310,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2310
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Global_whitespace_after_global": {
  "data": {
   "lineno": 2302,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2302
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_GreaterThanEqual_whitespace_after": {
  "data": {
   "lineno": 2354,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2354
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_GreaterThanEqual_whitespace_before": {
  "data": {
   "lineno": 2344,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2344
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_GreaterThan_whitespace_after": {
  "data": {
   "lineno": 2330,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2330
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_GreaterThan_whitespace_before": {
  "data": {
   "lineno": 2322,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2322
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_IfExp_body": {
  "data": {
   "lineno": 2426,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2426
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_IfExp_lpar": {
  "data": {
   "lineno": 2442,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2442
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_IfExp_orelse": {
  "data": {
   "lineno": 2434,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2434
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_IfExp_rpar": {
  "data": {
   "lineno": 2450,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2450
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_IfExp_test": {
  "data": {
   "lineno": 2418,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2418
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_IfExp_whitespace_after_else": {
  "data": {
   "lineno": 2482,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2482
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_IfExp_whitespace_after_if": {
  "data": {
   "lineno": 2466,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2466
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_IfExp_whitespace_before_else": {
  "data": {
   "lineno": 2474,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2474
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_IfExp_whitespace_before_if": {
  "data": {
   "lineno": 2458,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2458
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_If_body": {
  "data": {
   "lineno": 2374,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2374
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_If_leading_lines": {
  "data": {
   "lineno": 2390,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2390
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_If_orelse": {
  "data": {
   "lineno": 2382,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2382
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_If_test": {
  "data": {
   "lineno": 2366,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2366
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_If_whitespace_after_test": {
  "data": {
   "lineno": 2406,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2406
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_If_whitespace_before_test": {
  "data": {
   "lineno": 2398,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2398
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Imaginary_lpar": {
  "data": {
   "lineno": 2502,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2502
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Imaginary_rpar": {
  "data": {
   "lineno": 2510,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2510
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Imaginary_value": {
  "data": {
   "lineno": 2494,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2494
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ImportAlias_asname": {
  "data": {
   "lineno": 2558,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2558
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ImportAlias_comma": {
  "data": {
   "lineno": 2566,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2566
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ImportAlias_name": {
  "data": {
   "lineno": 2550,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2550
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ImportFrom_lpar": {
  "data": {
   "lineno": 2602,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2602
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ImportFrom_module": {
  "data": {
   "lineno": 2578,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2578
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ImportFrom_names": {
  "data": {
   "lineno": 2586,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2586
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ImportFrom_relative": {
  "data": {
   "lineno": 2594,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2594
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ImportFrom_rpar": {
  "data": {
   "lineno": 2610,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2610
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ImportFrom_semicolon": {
  "data": {
   "lineno": 2618,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2618
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ImportFrom_whitespace_after_from": {
  "data": {
   "lineno": 2626,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2626
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ImportFrom_whitespace_after_import": {
  "data": {
   "lineno": 2642,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2642
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ImportFrom_whitespace_before_import": {
  "data": {
   "lineno": 2634,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2634
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Import_names": {
  "data": {
   "lineno": 2522,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2522
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Import_semicolon": {
  "data": {
   "lineno": 2530,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2530
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Import_whitespace_after_import": {
  "data": {
   "lineno": 2538,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2538
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_In_whitespace_after": {
  "data": {
   "lineno": 2666,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2666
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_In_whitespace_before": {
  "data": {
   "lineno": 2658,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2658
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_IndentedBlock_body": {
  "data": {
   "lineno": 2678,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2678
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_IndentedBlock_footer": {
  "data": {
   "lineno": 2702,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2702
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_IndentedBlock_header": {
  "data": {
   "lineno": 2686,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2686
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_IndentedBlock_indent": {
  "data": {
   "lineno": 2694,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2694
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Index_value": {
  "data": {
   "lineno": 2714,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2714
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Integer_lpar": {
  "data": {
   "lineno": 2734,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2734
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Integer_rpar": {
  "data": {
   "lineno": 2742,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2742
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Integer_value": {
  "data": {
   "lineno": 2726,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2726
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_IsNot_whitespace_after": {
  "data": {
   "lineno": 2790,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2790
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_IsNot_whitespace_before": {
  "data": {
   "lineno": 2774,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2774
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_IsNot_whitespace_between": {
  "data": {
   "lineno": 2782,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2782
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Is_whitespace_after": {
  "data": {
   "lineno": 2762,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2762
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Is_whitespace_before": {
  "data": {
   "lineno": 2754,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2754
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Lambda_body": {
  "data": {
   "lineno": 2810,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2810
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Lambda_colon": {
  "data": {
   "lineno": 2818,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2818
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Lambda_lpar": {
  "data": {
   "lineno": 2826,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2826
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Lambda_params": {
  "data": {
   "lineno": 2802,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2802
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Lambda_rpar": {
  "data": {
   "lineno": 2834,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2834
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Lambda_whitespace_after_lambda": {
  "data": {
   "lineno": 2842,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2842
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_LeftCurlyBrace_whitespace_after": {
  "data": {
   "lineno": 2854,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2854
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_LeftParen_whitespace_after": {
  "data": {
   "lineno": 2866,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2866
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_LeftShiftAssign_whitespace_after": {
  "data": {
   "lineno": 2906,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2906
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_LeftShiftAssign_whitespace_before": {
  "data": {
   "lineno": 2898,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2898
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_LeftShift_whitespace_after": {
  "data": {
   "lineno": 2886,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2886
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_LeftShift_whitespace_before": {
  "data": {
   "lineno": 2878,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2878
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_LeftSquareBracket_whitespace_after": {
  "data": {
   "lineno": 2920,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2920
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_LessThanEqual_whitespace_after": {
  "data": {
   "lineno": 2962,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2962
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_LessThanEqual_whitespace_before": {
  "data": {
   "lineno": 2954,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2954
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_LessThan_whitespace_after": {
  "data": {
   "lineno": 2942,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2942
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_LessThan_whitespace_before": {
  "data": {
   "lineno": 2934,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2934
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ListComp_elt": {
  "data": {
   "lineno": 3018,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3018
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ListComp_for_in": {
  "data": {
   "lineno": 3026,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3026
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ListComp_lbracket": {
  "data": {
   "lineno": 3034,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3034
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ListComp_lpar": {
  "data": {
   "lineno": 3050,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3050
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ListComp_rbracket": {
  "data": {
   "lineno": 3042,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3042
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ListComp_rpar": {
  "data": {
   "lineno": 3058,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3058
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_List_elements": {
  "data": {
   "lineno": 2974,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2974
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_List_lbracket": {
  "data": {
   "lineno": 2982,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2982
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_List_lpar": {
  "data": {
   "lineno": 2998,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2998
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_List_rbracket": {
  "data": {
   "lineno": 2990,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2990
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_List_rpar": {
  "data": {
   "lineno": 3006,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3006
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_MatrixMultiplyAssign_whitespace_after": {
  "data": {
   "lineno": 3106,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3106
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_MatrixMultiplyAssign_whitespace_before": {
  "data": {
   "lineno": 3094,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3094
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_MatrixMultiply_whitespace_after": {
  "data": {
   "lineno": 3078,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3078
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_MatrixMultiply_whitespace_before": {
  "data": {
   "lineno": 3070,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3070
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Minus_whitespace_after": {
  "data": {
   "lineno": 3120,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3120
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Module_body": {
  "data": {
   "lineno": 3132,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3132
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Module_default_indent": {
  "data": {
   "lineno": 3164,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3164
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Module_default_newline": {
  "data": {
   "lineno": 3172,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3172
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Module_encoding": {
  "data": {
   "lineno": 3156,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3156
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Module_footer": {
  "data": {
   "lineno": 3148,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3148
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Module_has_trailing_newline": {
  "data": {
   "lineno": 3180,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3180
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Module_header": {
  "data": {
   "lineno": 3140,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3140
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ModuloAssign_whitespace_after": {
  "data": {
   "lineno": 3220,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3220
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ModuloAssign_whitespace_before": {
  "data": {
   "lineno": 3212,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3212
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Modulo_whitespace_after": {
  "data": {
   "lineno": 3200,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3200
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Modulo_whitespace_before": {
  "data": {
   "lineno": 3192,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3192
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_MultiplyAssign_whitespace_after": {
  "data": {
   "lineno": 3260,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3260
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_MultiplyAssign_whitespace_before": {
  "data": {
   "lineno": 3252,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3252
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Multiply_whitespace_after": {
  "data": {
   "lineno": 3240,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3240
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Multiply_whitespace_before": {
  "data": {
   "lineno": 3232,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3232
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_NameItem_comma": {
  "data": {
   "lineno": 3308,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3308
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_NameItem_name": {
  "data": {
   "lineno": 3300,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3300
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Name_lpar": {
  "data": {
   "lineno": 3280,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3280
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Name_rpar": {
  "data": {
   "lineno": 3288,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3288
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Name_value": {
  "data": {
   "lineno": 3272,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3272
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_NamedExpr_lpar": {
  "data": {
   "lineno": 3336,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3336
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_NamedExpr_rpar": {
  "data": {
   "lineno": 3344,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3344
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_NamedExpr_target": {
  "data": {
   "lineno": 3320,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3320
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_NamedExpr_value": {
  "data": {
   "lineno": 3328,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3328
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_NamedExpr_whitespace_after_walrus": {
  "data": {
   "lineno": 3360,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3360
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_NamedExpr_whitespace_before_walrus": {
  "data": {
   "lineno": 3352,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3352
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Newline_value": {
  "data": {
   "lineno": 3372,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3372
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Nonlocal_names": {
  "data": {
   "lineno": 3384,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3384
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Nonlocal_semicolon": {
  "data": {
   "lineno": 3400,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3400
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Nonlocal_whitespace_after_nonlocal": {
  "data": {
   "lineno": 3392,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3392
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_NotEqual_value": {
  "data": {
   "lineno": 3424,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3424
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_NotEqual_whitespace_after": {
  "data": {
   "lineno": 3440,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3440
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_NotEqual_whitespace_before": {
  "data": {
   "lineno": 3432,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3432
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_NotIn_whitespace_after": {
  "data": {
   "lineno": 3468,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3468
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_NotIn_whitespace_before": {
  "data": {
   "lineno": 3452,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3452
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_NotIn_whitespace_between": {
  "data": {
   "lineno": 3460,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3460
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Not_whitespace_after": {
  "data": {
   "lineno": 3412,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3412
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Or_whitespace_after": {
  "data": {
   "lineno": 3488,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3488
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Or_whitespace_before": {
  "data": {
   "lineno": 3480,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3480
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ParamSlash_comma": {
  "data": {
   "lineno": 3568,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3568
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ParamStar_comma": {
  "data": {
   "lineno": 3580,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3580
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Param_annotation": {
  "data": {
   "lineno": 3508,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3508
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Param_comma": {
  "data": {
   "lineno": 3532,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3532
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Param_default": {
  "data": {
   "lineno": 3524,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3524
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Param_equal": {
  "data": {
   "lineno": 3516,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3516
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Param_name": {
  "data": {
   "lineno": 3500,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3500
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Param_star": {
  "data": {
   "lineno": 3540,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3540
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Param_whitespace_after_param": {
  "data": {
   "lineno": 3556,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3556
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Param_whitespace_after_star": {
  "data": {
   "lineno": 3548,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3548
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Parameters_kwonly_params": {
  "data": {
   "lineno": 3608,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3608
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Parameters_params": {
  "data": {
   "lineno": 3592,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3592
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Parameters_posonly_ind": {
  "data": {
   "lineno": 3632,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3632
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Parameters_posonly_params": {
  "data": {
   "lineno": 3624,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3624
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Parameters_star_arg": {
  "data": {
   "lineno": 3600,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3600
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Parameters_star_kwarg": {
  "data": {
   "lineno": 3616,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3616
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ParenthesizedWhitespace_empty_lines": {
  "data": {
   "lineno": 3660,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3660
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ParenthesizedWhitespace_first_line": {
  "data": {
   "lineno": 3648,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3648
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ParenthesizedWhitespace_indent": {
  "data": {
   "lineno": 3672,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3672
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_ParenthesizedWhitespace_last_line": {
  "data": {
   "lineno": 3684,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3684
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Pass_semicolon": {
  "data": {
   "lineno": 3698,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3698
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Plus_whitespace_after": {
  "data": {
   "lineno": 3710,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3710
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_PowerAssign_whitespace_after": {
  "data": {
   "lineno": 3750,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3750
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_PowerAssign_whitespace_before": {
  "data": {
   "lineno": 3742,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3742
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Power_whitespace_after": {
  "data": {
   "lineno": 3730,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3730
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Power_whitespace_before": {
  "data": {
   "lineno": 3722,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3722
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Raise_cause": {
  "data": {
   "lineno": 3770,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3770
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Raise_exc": {
  "data": {
   "lineno": 3762,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3762
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Raise_semicolon": {
  "data": {
   "lineno": 3786,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3786
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Raise_whitespace_after_raise": {
  "data": {
   "lineno": 3778,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3778
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Return_semicolon": {
  "data": {
   "lineno": 3814,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3814
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Return_value": {
  "data": {
   "lineno": 3798,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3798
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Return_whitespace_after_return": {
  "data": {
   "lineno": 3806,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3806
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_RightCurlyBrace_whitespace_before": {
  "data": {
   "lineno": 3826,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3826
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_RightParen_whitespace_before": {
  "data": {
   "lineno": 3838,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3838
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_RightShiftAssign_whitespace_after": {
  "data": {
   "lineno": 3882,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3882
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_RightShiftAssign_whitespace_before": {
  "data": {
   "lineno": 3872,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3872
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_RightShift_whitespace_after": {
  "data": {
   "lineno": 3858,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3858
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_RightShift_whitespace_before": {
  "data": {
   "lineno": 3850,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3850
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_RightSquareBracket_whitespace_before": {
  "data": {
   "lineno": 3896,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3896
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Semicolon_whitespace_after": {
  "data": {
   "lineno": 3918,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3918
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Semicolon_whitespace_before": {
  "data": {
   "lineno": 3910,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3910
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_SetComp_elt": {
  "data": {
   "lineno": 3974,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3974
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_SetComp_for_in": {
  "data": {
   "lineno": 3982,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3982
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_SetComp_lbrace": {
  "data": {
   "lineno": 3990,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3990
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_SetComp_lpar": {
  "data": {
   "lineno": 4006,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4006
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_SetComp_rbrace": {
  "data": {
   "lineno": 3998,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3998
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_SetComp_rpar": {
  "data": {
   "lineno": 4014,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4014
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Set_elements": {
  "data": {
   "lineno": 3930,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3930
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Set_lbrace": {
  "data": {
   "lineno": 3938,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3938
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Set_lpar": {
  "data": {
   "lineno": 3954,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3954
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Set_rbrace": {
  "data": {
   "lineno": 3946,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3946
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Set_rpar": {
  "data": {
   "lineno": 3962,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3962
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_SimpleStatementLine_body": {
  "data": {
   "lineno": 4026,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4026
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_SimpleStatementLine_leading_lines": {
  "data": {
   "lineno": 4036,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4036
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_SimpleStatementLine_trailing_whitespace": {
  "data": {
   "lineno": 4048,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4048
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_SimpleStatementSuite_body": {
  "data": {
   "lineno": 4064,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4064
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_SimpleStatementSuite_leading_whitespace": {
  "data": {
   "lineno": 4074,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4074
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_SimpleStatementSuite_trailing_whitespace": {
  "data": {
   "lineno": 4086,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4086
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_SimpleString_lpar": {
  "data": {
   "lineno": 4108,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4108
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_SimpleString_rpar": {
  "data": {
   "lineno": 4116,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4116
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_SimpleString_value": {
  "data": {
   "lineno": 4100,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4100
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_SimpleWhitespace_value": {
  "data": {
   "lineno": 4128,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4128
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Slice_first_colon": {
  "data": {
   "lineno": 4164,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4164
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Slice_lower": {
  "data": {
   "lineno": 4140,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4140
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Slice_second_colon": {
  "data": {
   "lineno": 4172,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4172
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Slice_step": {
  "data": {
   "lineno": 4156,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4156
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Slice_upper": {
  "data": {
   "lineno": 4148,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4148
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_StarredDictElement_comma": {
  "data": {
   "lineno": 4192,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4192
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_StarredDictElement_value": {
  "data": {
   "lineno": 4184,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4184
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_StarredDictElement_whitespace_before_value": {
  "data": {
   "lineno": 4202,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4202
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_StarredElement_comma": {
  "data": {
   "lineno": 4224,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4224
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_StarredElement_lpar": {
  "data": {
   "lineno": 4232,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4232
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_StarredElement_rpar": {
  "data": {
   "lineno": 4240,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4240
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_StarredElement_value": {
  "data": {
   "lineno": 4216,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4216
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_StarredElement_whitespace_before_value": {
  "data": {
   "lineno": 4250,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4250
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_SubscriptElement_comma": {
  "data": {
   "lineno": 4332,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4332
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_SubscriptElement_slice": {
  "data": {
   "lineno": 4324,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4324
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Subscript_lbracket": {
  "data": {
   "lineno": 4280,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4280
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Subscript_lpar": {
  "data": {
   "lineno": 4296,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4296
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Subscript_rbracket": {
  "data": {
   "lineno": 4288,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4288
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Subscript_rpar": {
  "data": {
   "lineno": 4304,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4304
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Subscript_slice": {
  "data": {
   "lineno": 4272,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4272
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Subscript_value": {
  "data": {
   "lineno": 4264,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4264
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Subscript_whitespace_after_value": {
  "data": {
   "lineno": 4312,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4312
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_SubtractAssign_whitespace_after": {
  "data": {
   "lineno": 4372,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4372
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_SubtractAssign_whitespace_before": {
  "data": {
   "lineno": 4364,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4364
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Subtract_whitespace_after": {
  "data": {
   "lineno": 4352,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4352
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Subtract_whitespace_before": {
  "data": {
   "lineno": 4344,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4344
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_TrailingWhitespace_comment": {
  "data": {
   "lineno": 4392,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4392
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_TrailingWhitespace_newline": {
  "data": {
   "lineno": 4400,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4400
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_TrailingWhitespace_whitespace": {
  "data": {
   "lineno": 4384,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4384
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Try_body": {
  "data": {
   "lineno": 4412,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4412
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Try_finalbody": {
  "data": {
   "lineno": 4436,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4436
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Try_handlers": {
  "data": {
   "lineno": 4420,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4420
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Try_leading_lines": {
  "data": {
   "lineno": 4444,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4444
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Try_orelse": {
  "data": {
   "lineno": 4428,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4428
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Try_whitespace_before_colon": {
  "data": {
   "lineno": 4452,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4452
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Tuple_elements": {
  "data": {
   "lineno": 4464,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4464
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Tuple_lpar": {
  "data": {
   "lineno": 4472,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4472
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Tuple_rpar": {
  "data": {
   "lineno": 4480,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4480
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_UnaryOperation_expression": {
  "data": {
   "lineno": 4500,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4500
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_UnaryOperation_lpar": {
  "data": {
   "lineno": 4508,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4508
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_UnaryOperation_operator": {
  "data": {
   "lineno": 4492,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4492
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_UnaryOperation_rpar": {
  "data": {
   "lineno": 4516,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4516
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_While_body": {
  "data": {
   "lineno": 4536,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4536
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_While_leading_lines": {
  "data": {
   "lineno": 4552,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4552
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_While_orelse": {
  "data": {
   "lineno": 4544,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4544
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_While_test": {
  "data": {
   "lineno": 4528,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4528
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_While_whitespace_after_while": {
  "data": {
   "lineno": 4560,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4560
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_While_whitespace_before_colon": {
  "data": {
   "lineno": 4568,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4568
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_WithItem_asname": {
  "data": {
   "lineno": 4640,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4640
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_WithItem_comma": {
  "data": {
   "lineno": 4648,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4648
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_WithItem_item": {
  "data": {
   "lineno": 4632,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4632
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_With_asynchronous": {
  "data": {
   "lineno": 4596,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4596
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_With_body": {
  "data": {
   "lineno": 4588,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4588
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_With_items": {
  "data": {
   "lineno": 4580,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4580
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_With_leading_lines": {
  "data": {
   "lineno": 4604,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4604
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_With_whitespace_after_with": {
  "data": {
   "lineno": 4612,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4612
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_With_whitespace_before_colon": {
  "data": {
   "lineno": 4620,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4620
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Yield_lpar": {
  "data": {
   "lineno": 4668,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4668
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Yield_rpar": {
  "data": {
   "lineno": 4676,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4676
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Yield_value": {
  "data": {
   "lineno": 4660,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4660
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.leave_Yield_whitespace_after_yield": {
  "data": {
   "lineno": 4684,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4684
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Add": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      185
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      184
     ]
    },
    "typing.Optional": {
     "line number": [
      185
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_AddAssign": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      205
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      204
     ]
    },
    "typing.Optional": {
     "line number": [
      205
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_AddAssign_whitespace_after": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      216
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_AddAssign_whitespace_before": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      208
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Add_whitespace_after": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      196
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Add_whitespace_before": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      188
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_And": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      225
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      224
     ]
    },
    "typing.Optional": {
     "line number": [
      225
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_And_whitespace_after": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      236
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_And_whitespace_before": {
  "data": {
   "lineno": 228,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      228
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_AnnAssign": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      245
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      244
     ]
    },
    "typing.Optional": {
     "line number": [
      245
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_AnnAssign_annotation": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      256
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_AnnAssign_equal": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      272
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_AnnAssign_semicolon": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      280
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_AnnAssign_target": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      248
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_AnnAssign_value": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      264
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Annotation": {
  "data": {
   "lineno": 288,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      289
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      288
     ]
    },
    "typing.Optional": {
     "line number": [
      289
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Annotation_annotation": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      292
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Annotation_whitespace_after_indicator": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      308
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Annotation_whitespace_before_indicator": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      300
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Arg": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      317
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      316
     ]
    },
    "typing.Optional": {
     "line number": [
      317
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Arg_comma": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      344
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Arg_equal": {
  "data": {
   "lineno": 336,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      336
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Arg_keyword": {
  "data": {
   "lineno": 328,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      328
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Arg_star": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      352
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Arg_value": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      320
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Arg_whitespace_after_arg": {
  "data": {
   "lineno": 368,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      368
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Arg_whitespace_after_star": {
  "data": {
   "lineno": 360,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      360
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_AsName": {
  "data": {
   "lineno": 376,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      377
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      376
     ]
    },
    "typing.Optional": {
     "line number": [
      377
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_AsName_name": {
  "data": {
   "lineno": 380,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      380
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_AsName_whitespace_after_as": {
  "data": {
   "lineno": 396,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      396
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_AsName_whitespace_before_as": {
  "data": {
   "lineno": 388,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      388
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Assert": {
  "data": {
   "lineno": 404,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      405
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      404
     ]
    },
    "typing.Optional": {
     "line number": [
      405
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Assert_comma": {
  "data": {
   "lineno": 424,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      424
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Assert_msg": {
  "data": {
   "lineno": 416,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      416
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Assert_semicolon": {
  "data": {
   "lineno": 440,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      440
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Assert_test": {
  "data": {
   "lineno": 408,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      408
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Assert_whitespace_after_assert": {
  "data": {
   "lineno": 432,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      432
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Assign": {
  "data": {
   "lineno": 448,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      449
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      448
     ]
    },
    "typing.Optional": {
     "line number": [
      449
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_AssignEqual": {
  "data": {
   "lineno": 476,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      477
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      476
     ]
    },
    "typing.Optional": {
     "line number": [
      477
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_AssignEqual_whitespace_after": {
  "data": {
   "lineno": 488,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      488
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_AssignEqual_whitespace_before": {
  "data": {
   "lineno": 480,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      480
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_AssignTarget": {
  "data": {
   "lineno": 496,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      497
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      496
     ]
    },
    "typing.Optional": {
     "line number": [
      497
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_AssignTarget_target": {
  "data": {
   "lineno": 500,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      500
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_AssignTarget_whitespace_after_equal": {
  "data": {
   "lineno": 516,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      516
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_AssignTarget_whitespace_before_equal": {
  "data": {
   "lineno": 508,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      508
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Assign_semicolon": {
  "data": {
   "lineno": 468,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      468
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Assign_targets": {
  "data": {
   "lineno": 452,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      452
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Assign_value": {
  "data": {
   "lineno": 460,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      460
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Asynchronous": {
  "data": {
   "lineno": 524,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      525
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      524
     ]
    },
    "typing.Optional": {
     "line number": [
      525
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Asynchronous_whitespace_after": {
  "data": {
   "lineno": 528,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      528
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Attribute": {
  "data": {
   "lineno": 536,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      537
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      536
     ]
    },
    "typing.Optional": {
     "line number": [
      537
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Attribute_attr": {
  "data": {
   "lineno": 548,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      548
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Attribute_dot": {
  "data": {
   "lineno": 556,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      556
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Attribute_lpar": {
  "data": {
   "lineno": 564,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      564
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Attribute_rpar": {
  "data": {
   "lineno": 572,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      572
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Attribute_value": {
  "data": {
   "lineno": 540,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      540
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_AugAssign": {
  "data": {
   "lineno": 580,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      581
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      580
     ]
    },
    "typing.Optional": {
     "line number": [
      581
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_AugAssign_operator": {
  "data": {
   "lineno": 592,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      592
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_AugAssign_semicolon": {
  "data": {
   "lineno": 608,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      608
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_AugAssign_target": {
  "data": {
   "lineno": 584,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      584
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_AugAssign_value": {
  "data": {
   "lineno": 600,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      600
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Await": {
  "data": {
   "lineno": 616,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      617
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      616
     ]
    },
    "typing.Optional": {
     "line number": [
      617
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Await_expression": {
  "data": {
   "lineno": 620,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      620
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Await_lpar": {
  "data": {
   "lineno": 628,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      628
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Await_rpar": {
  "data": {
   "lineno": 636,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      636
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Await_whitespace_after_await": {
  "data": {
   "lineno": 644,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      644
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BinaryOperation": {
  "data": {
   "lineno": 652,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      653
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      652
     ]
    },
    "typing.Optional": {
     "line number": [
      653
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BinaryOperation_left": {
  "data": {
   "lineno": 656,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      656
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BinaryOperation_lpar": {
  "data": {
   "lineno": 680,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      680
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BinaryOperation_operator": {
  "data": {
   "lineno": 664,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      664
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BinaryOperation_right": {
  "data": {
   "lineno": 672,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      672
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BinaryOperation_rpar": {
  "data": {
   "lineno": 688,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      688
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BitAnd": {
  "data": {
   "lineno": 696,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      697
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      696
     ]
    },
    "typing.Optional": {
     "line number": [
      697
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BitAndAssign": {
  "data": {
   "lineno": 716,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      717
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      716
     ]
    },
    "typing.Optional": {
     "line number": [
      717
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BitAndAssign_whitespace_after": {
  "data": {
   "lineno": 728,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      728
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BitAndAssign_whitespace_before": {
  "data": {
   "lineno": 720,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      720
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BitAnd_whitespace_after": {
  "data": {
   "lineno": 708,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      708
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BitAnd_whitespace_before": {
  "data": {
   "lineno": 700,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      700
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BitInvert": {
  "data": {
   "lineno": 736,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      737
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      736
     ]
    },
    "typing.Optional": {
     "line number": [
      737
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BitInvert_whitespace_after": {
  "data": {
   "lineno": 740,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      740
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BitOr": {
  "data": {
   "lineno": 748,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      749
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      748
     ]
    },
    "typing.Optional": {
     "line number": [
      749
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BitOrAssign": {
  "data": {
   "lineno": 768,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      769
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      768
     ]
    },
    "typing.Optional": {
     "line number": [
      769
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BitOrAssign_whitespace_after": {
  "data": {
   "lineno": 780,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      780
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BitOrAssign_whitespace_before": {
  "data": {
   "lineno": 772,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      772
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BitOr_whitespace_after": {
  "data": {
   "lineno": 760,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      760
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BitOr_whitespace_before": {
  "data": {
   "lineno": 752,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      752
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BitXor": {
  "data": {
   "lineno": 788,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      789
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      788
     ]
    },
    "typing.Optional": {
     "line number": [
      789
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BitXorAssign": {
  "data": {
   "lineno": 808,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      809
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      808
     ]
    },
    "typing.Optional": {
     "line number": [
      809
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BitXorAssign_whitespace_after": {
  "data": {
   "lineno": 820,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      820
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BitXorAssign_whitespace_before": {
  "data": {
   "lineno": 812,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      812
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BitXor_whitespace_after": {
  "data": {
   "lineno": 800,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      800
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BitXor_whitespace_before": {
  "data": {
   "lineno": 792,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      792
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BooleanOperation": {
  "data": {
   "lineno": 828,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      829
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      828
     ]
    },
    "typing.Optional": {
     "line number": [
      829
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BooleanOperation_left": {
  "data": {
   "lineno": 832,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      832
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BooleanOperation_lpar": {
  "data": {
   "lineno": 856,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      856
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BooleanOperation_operator": {
  "data": {
   "lineno": 840,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      840
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BooleanOperation_right": {
  "data": {
   "lineno": 848,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      848
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_BooleanOperation_rpar": {
  "data": {
   "lineno": 864,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      864
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Break": {
  "data": {
   "lineno": 872,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      873
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      872
     ]
    },
    "typing.Optional": {
     "line number": [
      873
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Break_semicolon": {
  "data": {
   "lineno": 876,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      876
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Call": {
  "data": {
   "lineno": 884,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      885
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      884
     ]
    },
    "typing.Optional": {
     "line number": [
      885
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Call_args": {
  "data": {
   "lineno": 896,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      896
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Call_func": {
  "data": {
   "lineno": 888,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      888
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Call_lpar": {
  "data": {
   "lineno": 904,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      904
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Call_rpar": {
  "data": {
   "lineno": 912,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      912
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Call_whitespace_after_func": {
  "data": {
   "lineno": 920,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      920
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Call_whitespace_before_args": {
  "data": {
   "lineno": 928,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      928
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ClassDef": {
  "data": {
   "lineno": 936,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      937
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      936
     ]
    },
    "typing.Optional": {
     "line number": [
      937
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ClassDef_bases": {
  "data": {
   "lineno": 956,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      956
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ClassDef_body": {
  "data": {
   "lineno": 948,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      948
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ClassDef_decorators": {
  "data": {
   "lineno": 972,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      972
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ClassDef_keywords": {
  "data": {
   "lineno": 964,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      964
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ClassDef_leading_lines": {
  "data": {
   "lineno": 996,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      996
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ClassDef_lines_after_decorators": {
  "data": {
   "lineno": 1004,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1004
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ClassDef_lpar": {
  "data": {
   "lineno": 980,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      980
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ClassDef_name": {
  "data": {
   "lineno": 940,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      940
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ClassDef_rpar": {
  "data": {
   "lineno": 988,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      988
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ClassDef_whitespace_after_class": {
  "data": {
   "lineno": 1012,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1012
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ClassDef_whitespace_after_name": {
  "data": {
   "lineno": 1020,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1020
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ClassDef_whitespace_before_colon": {
  "data": {
   "lineno": 1028,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1028
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Colon": {
  "data": {
   "lineno": 1036,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1037
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1036
     ]
    },
    "typing.Optional": {
     "line number": [
      1037
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Colon_whitespace_after": {
  "data": {
   "lineno": 1048,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1048
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Colon_whitespace_before": {
  "data": {
   "lineno": 1040,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1040
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Comma": {
  "data": {
   "lineno": 1056,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1057
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1056
     ]
    },
    "typing.Optional": {
     "line number": [
      1057
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Comma_whitespace_after": {
  "data": {
   "lineno": 1068,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1068
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Comma_whitespace_before": {
  "data": {
   "lineno": 1060,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1060
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Comment": {
  "data": {
   "lineno": 1076,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1077
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1076
     ]
    },
    "typing.Optional": {
     "line number": [
      1077
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Comment_value": {
  "data": {
   "lineno": 1080,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1080
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_CompFor": {
  "data": {
   "lineno": 1088,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1089
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1088
     ]
    },
    "typing.Optional": {
     "line number": [
      1089
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_CompFor_asynchronous": {
  "data": {
   "lineno": 1124,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1124
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_CompFor_ifs": {
  "data": {
   "lineno": 1108,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1108
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_CompFor_inner_for_in": {
  "data": {
   "lineno": 1116,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1116
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_CompFor_iter": {
  "data": {
   "lineno": 1100,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1100
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_CompFor_target": {
  "data": {
   "lineno": 1092,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1092
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_CompFor_whitespace_after_for": {
  "data": {
   "lineno": 1140,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1140
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_CompFor_whitespace_after_in": {
  "data": {
   "lineno": 1156,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1156
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_CompFor_whitespace_before": {
  "data": {
   "lineno": 1132,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1132
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_CompFor_whitespace_before_in": {
  "data": {
   "lineno": 1148,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1148
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_CompIf": {
  "data": {
   "lineno": 1164,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1165
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1164
     ]
    },
    "typing.Optional": {
     "line number": [
      1165
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_CompIf_test": {
  "data": {
   "lineno": 1168,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1168
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_CompIf_whitespace_before": {
  "data": {
   "lineno": 1176,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1176
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_CompIf_whitespace_before_test": {
  "data": {
   "lineno": 1184,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1184
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Comparison": {
  "data": {
   "lineno": 1192,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1193
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1192
     ]
    },
    "typing.Optional": {
     "line number": [
      1193
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ComparisonTarget": {
  "data": {
   "lineno": 1228,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1229
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1228
     ]
    },
    "typing.Optional": {
     "line number": [
      1229
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ComparisonTarget_comparator": {
  "data": {
   "lineno": 1240,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1240
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ComparisonTarget_operator": {
  "data": {
   "lineno": 1232,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1232
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Comparison_comparisons": {
  "data": {
   "lineno": 1204,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1204
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Comparison_left": {
  "data": {
   "lineno": 1196,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1196
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Comparison_lpar": {
  "data": {
   "lineno": 1212,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1212
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Comparison_rpar": {
  "data": {
   "lineno": 1220,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1220
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ConcatenatedString": {
  "data": {
   "lineno": 1248,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1249
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1248
     ]
    },
    "typing.Optional": {
     "line number": [
      1249
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ConcatenatedString_left": {
  "data": {
   "lineno": 1252,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1252
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ConcatenatedString_lpar": {
  "data": {
   "lineno": 1268,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1268
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ConcatenatedString_right": {
  "data": {
   "lineno": 1260,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1260
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ConcatenatedString_rpar": {
  "data": {
   "lineno": 1276,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1276
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ConcatenatedString_whitespace_between": {
  "data": {
   "lineno": 1284,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1284
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Continue": {
  "data": {
   "lineno": 1296,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1297
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1296
     ]
    },
    "typing.Optional": {
     "line number": [
      1297
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Continue_semicolon": {
  "data": {
   "lineno": 1300,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1300
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Decorator": {
  "data": {
   "lineno": 1308,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1309
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1308
     ]
    },
    "typing.Optional": {
     "line number": [
      1309
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Decorator_decorator": {
  "data": {
   "lineno": 1312,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1312
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Decorator_leading_lines": {
  "data": {
   "lineno": 1320,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1320
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Decorator_trailing_whitespace": {
  "data": {
   "lineno": 1336,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1336
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Decorator_whitespace_after_at": {
  "data": {
   "lineno": 1328,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1328
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Del": {
  "data": {
   "lineno": 1344,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1345
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1344
     ]
    },
    "typing.Optional": {
     "line number": [
      1345
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Del_semicolon": {
  "data": {
   "lineno": 1364,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1364
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Del_target": {
  "data": {
   "lineno": 1348,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1348
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Del_whitespace_after_del": {
  "data": {
   "lineno": 1356,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1356
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Dict": {
  "data": {
   "lineno": 1372,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1373
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1372
     ]
    },
    "typing.Optional": {
     "line number": [
      1373
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_DictComp": {
  "data": {
   "lineno": 1416,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1417
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1416
     ]
    },
    "typing.Optional": {
     "line number": [
      1417
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_DictComp_for_in": {
  "data": {
   "lineno": 1436,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1436
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_DictComp_key": {
  "data": {
   "lineno": 1420,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1420
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_DictComp_lbrace": {
  "data": {
   "lineno": 1444,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1444
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_DictComp_lpar": {
  "data": {
   "lineno": 1460,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1460
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_DictComp_rbrace": {
  "data": {
   "lineno": 1452,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1452
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_DictComp_rpar": {
  "data": {
   "lineno": 1468,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1468
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_DictComp_value": {
  "data": {
   "lineno": 1428,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1428
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_DictComp_whitespace_after_colon": {
  "data": {
   "lineno": 1484,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1484
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_DictComp_whitespace_before_colon": {
  "data": {
   "lineno": 1476,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1476
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_DictElement": {
  "data": {
   "lineno": 1492,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1493
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1492
     ]
    },
    "typing.Optional": {
     "line number": [
      1493
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_DictElement_comma": {
  "data": {
   "lineno": 1512,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1512
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_DictElement_key": {
  "data": {
   "lineno": 1496,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1496
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_DictElement_value": {
  "data": {
   "lineno": 1504,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1504
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_DictElement_whitespace_after_colon": {
  "data": {
   "lineno": 1528,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1528
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_DictElement_whitespace_before_colon": {
  "data": {
   "lineno": 1520,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1520
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Dict_elements": {
  "data": {
   "lineno": 1376,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1376
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Dict_lbrace": {
  "data": {
   "lineno": 1384,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1384
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Dict_lpar": {
  "data": {
   "lineno": 1400,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1400
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Dict_rbrace": {
  "data": {
   "lineno": 1392,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1392
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Dict_rpar": {
  "data": {
   "lineno": 1408,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1408
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Divide": {
  "data": {
   "lineno": 1536,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1537
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1536
     ]
    },
    "typing.Optional": {
     "line number": [
      1537
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_DivideAssign": {
  "data": {
   "lineno": 1556,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1557
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1556
     ]
    },
    "typing.Optional": {
     "line number": [
      1557
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_DivideAssign_whitespace_after": {
  "data": {
   "lineno": 1568,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1568
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_DivideAssign_whitespace_before": {
  "data": {
   "lineno": 1560,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1560
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Divide_whitespace_after": {
  "data": {
   "lineno": 1548,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1548
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Divide_whitespace_before": {
  "data": {
   "lineno": 1540,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1540
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Dot": {
  "data": {
   "lineno": 1576,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1577
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1576
     ]
    },
    "typing.Optional": {
     "line number": [
      1577
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Dot_whitespace_after": {
  "data": {
   "lineno": 1588,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1588
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Dot_whitespace_before": {
  "data": {
   "lineno": 1580,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1580
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Element": {
  "data": {
   "lineno": 1596,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1597
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1596
     ]
    },
    "typing.Optional": {
     "line number": [
      1597
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Element_comma": {
  "data": {
   "lineno": 1608,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1608
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Element_value": {
  "data": {
   "lineno": 1600,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1600
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Ellipsis": {
  "data": {
   "lineno": 1616,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1617
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1616
     ]
    },
    "typing.Optional": {
     "line number": [
      1617
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Ellipsis_lpar": {
  "data": {
   "lineno": 1620,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1620
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Ellipsis_rpar": {
  "data": {
   "lineno": 1628,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1628
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Else": {
  "data": {
   "lineno": 1636,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1637
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1636
     ]
    },
    "typing.Optional": {
     "line number": [
      1637
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Else_body": {
  "data": {
   "lineno": 1640,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1640
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Else_leading_lines": {
  "data": {
   "lineno": 1648,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1648
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Else_whitespace_before_colon": {
  "data": {
   "lineno": 1656,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1656
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_EmptyLine": {
  "data": {
   "lineno": 1664,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1665
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1664
     ]
    },
    "typing.Optional": {
     "line number": [
      1665
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_EmptyLine_comment": {
  "data": {
   "lineno": 1684,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1684
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_EmptyLine_indent": {
  "data": {
   "lineno": 1668,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1668
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_EmptyLine_newline": {
  "data": {
   "lineno": 1692,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1692
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_EmptyLine_whitespace": {
  "data": {
   "lineno": 1676,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1676
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Equal": {
  "data": {
   "lineno": 1700,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1701
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1700
     ]
    },
    "typing.Optional": {
     "line number": [
      1701
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Equal_whitespace_after": {
  "data": {
   "lineno": 1712,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1712
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Equal_whitespace_before": {
  "data": {
   "lineno": 1704,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1704
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ExceptHandler": {
  "data": {
   "lineno": 1720,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1721
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1720
     ]
    },
    "typing.Optional": {
     "line number": [
      1721
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ExceptHandler_body": {
  "data": {
   "lineno": 1724,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1724
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ExceptHandler_leading_lines": {
  "data": {
   "lineno": 1748,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1748
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ExceptHandler_name": {
  "data": {
   "lineno": 1740,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1740
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ExceptHandler_type": {
  "data": {
   "lineno": 1732,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1732
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ExceptHandler_whitespace_after_except": {
  "data": {
   "lineno": 1756,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1756
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ExceptHandler_whitespace_before_colon": {
  "data": {
   "lineno": 1768,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1768
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Expr": {
  "data": {
   "lineno": 1780,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1781
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1780
     ]
    },
    "typing.Optional": {
     "line number": [
      1781
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Expr_semicolon": {
  "data": {
   "lineno": 1792,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1792
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Expr_value": {
  "data": {
   "lineno": 1784,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1784
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Finally": {
  "data": {
   "lineno": 1800,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1801
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1800
     ]
    },
    "typing.Optional": {
     "line number": [
      1801
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Finally_body": {
  "data": {
   "lineno": 1804,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1804
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Finally_leading_lines": {
  "data": {
   "lineno": 1812,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1812
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Finally_whitespace_before_colon": {
  "data": {
   "lineno": 1820,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1820
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Float": {
  "data": {
   "lineno": 1828,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1829
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1828
     ]
    },
    "typing.Optional": {
     "line number": [
      1829
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Float_lpar": {
  "data": {
   "lineno": 1840,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1840
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Float_rpar": {
  "data": {
   "lineno": 1848,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1848
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Float_value": {
  "data": {
   "lineno": 1832,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1832
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FloorDivide": {
  "data": {
   "lineno": 1856,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1857
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1856
     ]
    },
    "typing.Optional": {
     "line number": [
      1857
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FloorDivideAssign": {
  "data": {
   "lineno": 1876,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1877
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1876
     ]
    },
    "typing.Optional": {
     "line number": [
      1877
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FloorDivideAssign_whitespace_after": {
  "data": {
   "lineno": 1892,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1892
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FloorDivideAssign_whitespace_before": {
  "data": {
   "lineno": 1880,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1880
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FloorDivide_whitespace_after": {
  "data": {
   "lineno": 1868,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1868
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FloorDivide_whitespace_before": {
  "data": {
   "lineno": 1860,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1860
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_For": {
  "data": {
   "lineno": 1904,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1905
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1904
     ]
    },
    "typing.Optional": {
     "line number": [
      1905
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_For_asynchronous": {
  "data": {
   "lineno": 1940,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1940
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_For_body": {
  "data": {
   "lineno": 1924,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1924
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_For_iter": {
  "data": {
   "lineno": 1916,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1916
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_For_leading_lines": {
  "data": {
   "lineno": 1948,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1948
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_For_orelse": {
  "data": {
   "lineno": 1932,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1932
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_For_target": {
  "data": {
   "lineno": 1908,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1908
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_For_whitespace_after_for": {
  "data": {
   "lineno": 1956,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1956
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_For_whitespace_after_in": {
  "data": {
   "lineno": 1972,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1972
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_For_whitespace_before_colon": {
  "data": {
   "lineno": 1980,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1980
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_For_whitespace_before_in": {
  "data": {
   "lineno": 1964,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1964
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FormattedString": {
  "data": {
   "lineno": 1988,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1989
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1988
     ]
    },
    "typing.Optional": {
     "line number": [
      1989
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FormattedStringExpression": {
  "data": {
   "lineno": 2032,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2035
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2032
     ]
    },
    "typing.Optional": {
     "line number": [
      2035
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FormattedStringExpression_conversion": {
  "data": {
   "lineno": 2050,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2050
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FormattedStringExpression_equal": {
  "data": {
   "lineno": 2098,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2098
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FormattedStringExpression_expression": {
  "data": {
   "lineno": 2038,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2038
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FormattedStringExpression_format_spec": {
  "data": {
   "lineno": 2062,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2062
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FormattedStringExpression_whitespace_after_expression": {
  "data": {
   "lineno": 2086,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2086
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FormattedStringExpression_whitespace_before_expression": {
  "data": {
   "lineno": 2074,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2074
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FormattedStringText": {
  "data": {
   "lineno": 2110,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2111
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2110
     ]
    },
    "typing.Optional": {
     "line number": [
      2111
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FormattedStringText_value": {
  "data": {
   "lineno": 2114,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2114
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FormattedString_end": {
  "data": {
   "lineno": 2008,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2008
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FormattedString_lpar": {
  "data": {
   "lineno": 2016,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2016
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FormattedString_parts": {
  "data": {
   "lineno": 1992,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      1992
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FormattedString_rpar": {
  "data": {
   "lineno": 2024,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2024
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FormattedString_start": {
  "data": {
   "lineno": 2000,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2000
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_From": {
  "data": {
   "lineno": 2122,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2123
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2122
     ]
    },
    "typing.Optional": {
     "line number": [
      2123
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_From_item": {
  "data": {
   "lineno": 2126,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2126
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_From_whitespace_after_from": {
  "data": {
   "lineno": 2142,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2142
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_From_whitespace_before_from": {
  "data": {
   "lineno": 2134,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2134
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FunctionDef": {
  "data": {
   "lineno": 2150,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2151
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2150
     ]
    },
    "typing.Optional": {
     "line number": [
      2151
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FunctionDef_asynchronous": {
  "data": {
   "lineno": 2194,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2194
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FunctionDef_body": {
  "data": {
   "lineno": 2170,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2170
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FunctionDef_decorators": {
  "data": {
   "lineno": 2178,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2178
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FunctionDef_leading_lines": {
  "data": {
   "lineno": 2202,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2202
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FunctionDef_lines_after_decorators": {
  "data": {
   "lineno": 2210,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2210
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FunctionDef_name": {
  "data": {
   "lineno": 2154,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2154
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FunctionDef_params": {
  "data": {
   "lineno": 2162,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2162
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FunctionDef_returns": {
  "data": {
   "lineno": 2186,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2186
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FunctionDef_whitespace_after_def": {
  "data": {
   "lineno": 2218,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2218
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FunctionDef_whitespace_after_name": {
  "data": {
   "lineno": 2226,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2226
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FunctionDef_whitespace_before_colon": {
  "data": {
   "lineno": 2242,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2242
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_FunctionDef_whitespace_before_params": {
  "data": {
   "lineno": 2234,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2234
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_GeneratorExp": {
  "data": {
   "lineno": 2250,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2251
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2250
     ]
    },
    "typing.Optional": {
     "line number": [
      2251
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_GeneratorExp_elt": {
  "data": {
   "lineno": 2254,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2254
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_GeneratorExp_for_in": {
  "data": {
   "lineno": 2262,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2262
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_GeneratorExp_lpar": {
  "data": {
   "lineno": 2270,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2270
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_GeneratorExp_rpar": {
  "data": {
   "lineno": 2278,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2278
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Global": {
  "data": {
   "lineno": 2286,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2287
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2286
     ]
    },
    "typing.Optional": {
     "line number": [
      2287
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Global_names": {
  "data": {
   "lineno": 2290,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2290
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Global_semicolon": {
  "data": {
   "lineno": 2306,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2306
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Global_whitespace_after_global": {
  "data": {
   "lineno": 2298,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2298
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_GreaterThan": {
  "data": {
   "lineno": 2314,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2315
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2314
     ]
    },
    "typing.Optional": {
     "line number": [
      2315
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_GreaterThanEqual": {
  "data": {
   "lineno": 2334,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2335
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2334
     ]
    },
    "typing.Optional": {
     "line number": [
      2335
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_GreaterThanEqual_whitespace_after": {
  "data": {
   "lineno": 2350,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2350
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_GreaterThanEqual_whitespace_before": {
  "data": {
   "lineno": 2338,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2338
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_GreaterThan_whitespace_after": {
  "data": {
   "lineno": 2326,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2326
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_GreaterThan_whitespace_before": {
  "data": {
   "lineno": 2318,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2318
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_If": {
  "data": {
   "lineno": 2358,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2359
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2358
     ]
    },
    "typing.Optional": {
     "line number": [
      2359
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_IfExp": {
  "data": {
   "lineno": 2410,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2411
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2410
     ]
    },
    "typing.Optional": {
     "line number": [
      2411
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_IfExp_body": {
  "data": {
   "lineno": 2422,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2422
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_IfExp_lpar": {
  "data": {
   "lineno": 2438,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2438
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_IfExp_orelse": {
  "data": {
   "lineno": 2430,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2430
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_IfExp_rpar": {
  "data": {
   "lineno": 2446,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2446
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_IfExp_test": {
  "data": {
   "lineno": 2414,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2414
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_IfExp_whitespace_after_else": {
  "data": {
   "lineno": 2478,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2478
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_IfExp_whitespace_after_if": {
  "data": {
   "lineno": 2462,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2462
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_IfExp_whitespace_before_else": {
  "data": {
   "lineno": 2470,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2470
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_IfExp_whitespace_before_if": {
  "data": {
   "lineno": 2454,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2454
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_If_body": {
  "data": {
   "lineno": 2370,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2370
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_If_leading_lines": {
  "data": {
   "lineno": 2386,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2386
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_If_orelse": {
  "data": {
   "lineno": 2378,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2378
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_If_test": {
  "data": {
   "lineno": 2362,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2362
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_If_whitespace_after_test": {
  "data": {
   "lineno": 2402,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2402
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_If_whitespace_before_test": {
  "data": {
   "lineno": 2394,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2394
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Imaginary": {
  "data": {
   "lineno": 2486,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2487
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2486
     ]
    },
    "typing.Optional": {
     "line number": [
      2487
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Imaginary_lpar": {
  "data": {
   "lineno": 2498,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2498
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Imaginary_rpar": {
  "data": {
   "lineno": 2506,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2506
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Imaginary_value": {
  "data": {
   "lineno": 2490,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2490
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Import": {
  "data": {
   "lineno": 2514,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2515
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2514
     ]
    },
    "typing.Optional": {
     "line number": [
      2515
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ImportAlias": {
  "data": {
   "lineno": 2542,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2543
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2542
     ]
    },
    "typing.Optional": {
     "line number": [
      2543
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ImportAlias_asname": {
  "data": {
   "lineno": 2554,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2554
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ImportAlias_comma": {
  "data": {
   "lineno": 2562,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2562
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ImportAlias_name": {
  "data": {
   "lineno": 2546,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2546
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ImportFrom": {
  "data": {
   "lineno": 2570,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2571
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2570
     ]
    },
    "typing.Optional": {
     "line number": [
      2571
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ImportFrom_lpar": {
  "data": {
   "lineno": 2598,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2598
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ImportFrom_module": {
  "data": {
   "lineno": 2574,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2574
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ImportFrom_names": {
  "data": {
   "lineno": 2582,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2582
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ImportFrom_relative": {
  "data": {
   "lineno": 2590,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2590
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ImportFrom_rpar": {
  "data": {
   "lineno": 2606,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2606
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ImportFrom_semicolon": {
  "data": {
   "lineno": 2614,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2614
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ImportFrom_whitespace_after_from": {
  "data": {
   "lineno": 2622,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2622
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ImportFrom_whitespace_after_import": {
  "data": {
   "lineno": 2638,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2638
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ImportFrom_whitespace_before_import": {
  "data": {
   "lineno": 2630,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2630
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ImportStar": {
  "data": {
   "lineno": 2646,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2647
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2646
     ]
    },
    "typing.Optional": {
     "line number": [
      2647
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Import_names": {
  "data": {
   "lineno": 2518,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2518
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Import_semicolon": {
  "data": {
   "lineno": 2526,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2526
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Import_whitespace_after_import": {
  "data": {
   "lineno": 2534,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2534
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_In": {
  "data": {
   "lineno": 2650,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2651
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2650
     ]
    },
    "typing.Optional": {
     "line number": [
      2651
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_In_whitespace_after": {
  "data": {
   "lineno": 2662,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2662
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_In_whitespace_before": {
  "data": {
   "lineno": 2654,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2654
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_IndentedBlock": {
  "data": {
   "lineno": 2670,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2671
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2670
     ]
    },
    "typing.Optional": {
     "line number": [
      2671
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_IndentedBlock_body": {
  "data": {
   "lineno": 2674,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2674
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_IndentedBlock_footer": {
  "data": {
   "lineno": 2698,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2698
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_IndentedBlock_header": {
  "data": {
   "lineno": 2682,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2682
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_IndentedBlock_indent": {
  "data": {
   "lineno": 2690,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2690
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Index": {
  "data": {
   "lineno": 2706,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2707
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2706
     ]
    },
    "typing.Optional": {
     "line number": [
      2707
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Index_value": {
  "data": {
   "lineno": 2710,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2710
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Integer": {
  "data": {
   "lineno": 2718,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2719
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2718
     ]
    },
    "typing.Optional": {
     "line number": [
      2719
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Integer_lpar": {
  "data": {
   "lineno": 2730,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2730
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Integer_rpar": {
  "data": {
   "lineno": 2738,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2738
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Integer_value": {
  "data": {
   "lineno": 2722,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2722
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Is": {
  "data": {
   "lineno": 2746,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2747
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2746
     ]
    },
    "typing.Optional": {
     "line number": [
      2747
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_IsNot": {
  "data": {
   "lineno": 2766,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2767
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2766
     ]
    },
    "typing.Optional": {
     "line number": [
      2767
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_IsNot_whitespace_after": {
  "data": {
   "lineno": 2786,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2786
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_IsNot_whitespace_before": {
  "data": {
   "lineno": 2770,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2770
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_IsNot_whitespace_between": {
  "data": {
   "lineno": 2778,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2778
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Is_whitespace_after": {
  "data": {
   "lineno": 2758,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2758
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Is_whitespace_before": {
  "data": {
   "lineno": 2750,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2750
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Lambda": {
  "data": {
   "lineno": 2794,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2795
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2794
     ]
    },
    "typing.Optional": {
     "line number": [
      2795
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Lambda_body": {
  "data": {
   "lineno": 2806,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2806
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Lambda_colon": {
  "data": {
   "lineno": 2814,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2814
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Lambda_lpar": {
  "data": {
   "lineno": 2822,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2822
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Lambda_params": {
  "data": {
   "lineno": 2798,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2798
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Lambda_rpar": {
  "data": {
   "lineno": 2830,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2830
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Lambda_whitespace_after_lambda": {
  "data": {
   "lineno": 2838,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2838
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_LeftCurlyBrace": {
  "data": {
   "lineno": 2846,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2847
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2846
     ]
    },
    "typing.Optional": {
     "line number": [
      2847
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_LeftCurlyBrace_whitespace_after": {
  "data": {
   "lineno": 2850,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2850
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_LeftParen": {
  "data": {
   "lineno": 2858,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2859
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2858
     ]
    },
    "typing.Optional": {
     "line number": [
      2859
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_LeftParen_whitespace_after": {
  "data": {
   "lineno": 2862,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2862
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_LeftShift": {
  "data": {
   "lineno": 2870,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2871
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2870
     ]
    },
    "typing.Optional": {
     "line number": [
      2871
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_LeftShiftAssign": {
  "data": {
   "lineno": 2890,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2891
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2890
     ]
    },
    "typing.Optional": {
     "line number": [
      2891
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_LeftShiftAssign_whitespace_after": {
  "data": {
   "lineno": 2902,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2902
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_LeftShiftAssign_whitespace_before": {
  "data": {
   "lineno": 2894,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2894
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_LeftShift_whitespace_after": {
  "data": {
   "lineno": 2882,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2882
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_LeftShift_whitespace_before": {
  "data": {
   "lineno": 2874,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2874
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_LeftSquareBracket": {
  "data": {
   "lineno": 2910,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2911
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2910
     ]
    },
    "typing.Optional": {
     "line number": [
      2911
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_LeftSquareBracket_whitespace_after": {
  "data": {
   "lineno": 2914,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2914
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_LessThan": {
  "data": {
   "lineno": 2926,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2927
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2926
     ]
    },
    "typing.Optional": {
     "line number": [
      2927
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_LessThanEqual": {
  "data": {
   "lineno": 2946,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2947
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2946
     ]
    },
    "typing.Optional": {
     "line number": [
      2947
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_LessThanEqual_whitespace_after": {
  "data": {
   "lineno": 2958,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2958
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_LessThanEqual_whitespace_before": {
  "data": {
   "lineno": 2950,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2950
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_LessThan_whitespace_after": {
  "data": {
   "lineno": 2938,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2938
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_LessThan_whitespace_before": {
  "data": {
   "lineno": 2930,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2930
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_List": {
  "data": {
   "lineno": 2966,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2967
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2966
     ]
    },
    "typing.Optional": {
     "line number": [
      2967
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ListComp": {
  "data": {
   "lineno": 3010,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3011
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3010
     ]
    },
    "typing.Optional": {
     "line number": [
      3011
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ListComp_elt": {
  "data": {
   "lineno": 3014,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3014
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ListComp_for_in": {
  "data": {
   "lineno": 3022,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3022
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ListComp_lbracket": {
  "data": {
   "lineno": 3030,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3030
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ListComp_lpar": {
  "data": {
   "lineno": 3046,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3046
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ListComp_rbracket": {
  "data": {
   "lineno": 3038,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3038
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ListComp_rpar": {
  "data": {
   "lineno": 3054,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3054
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_List_elements": {
  "data": {
   "lineno": 2970,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2970
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_List_lbracket": {
  "data": {
   "lineno": 2978,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2978
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_List_lpar": {
  "data": {
   "lineno": 2994,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2994
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_List_rbracket": {
  "data": {
   "lineno": 2986,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      2986
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_List_rpar": {
  "data": {
   "lineno": 3002,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3002
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_MatrixMultiply": {
  "data": {
   "lineno": 3062,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3063
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3062
     ]
    },
    "typing.Optional": {
     "line number": [
      3063
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_MatrixMultiplyAssign": {
  "data": {
   "lineno": 3082,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3085
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3082
     ]
    },
    "typing.Optional": {
     "line number": [
      3085
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_MatrixMultiplyAssign_whitespace_after": {
  "data": {
   "lineno": 3100,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3100
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_MatrixMultiplyAssign_whitespace_before": {
  "data": {
   "lineno": 3088,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3088
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_MatrixMultiply_whitespace_after": {
  "data": {
   "lineno": 3074,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3074
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_MatrixMultiply_whitespace_before": {
  "data": {
   "lineno": 3066,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3066
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Minus": {
  "data": {
   "lineno": 3112,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3113
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3112
     ]
    },
    "typing.Optional": {
     "line number": [
      3113
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Minus_whitespace_after": {
  "data": {
   "lineno": 3116,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3116
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Module": {
  "data": {
   "lineno": 3124,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3125
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3124
     ]
    },
    "typing.Optional": {
     "line number": [
      3125
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Module_body": {
  "data": {
   "lineno": 3128,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3128
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Module_default_indent": {
  "data": {
   "lineno": 3160,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3160
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Module_default_newline": {
  "data": {
   "lineno": 3168,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3168
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Module_encoding": {
  "data": {
   "lineno": 3152,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3152
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Module_footer": {
  "data": {
   "lineno": 3144,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3144
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Module_has_trailing_newline": {
  "data": {
   "lineno": 3176,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3176
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Module_header": {
  "data": {
   "lineno": 3136,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3136
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Modulo": {
  "data": {
   "lineno": 3184,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3185
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3184
     ]
    },
    "typing.Optional": {
     "line number": [
      3185
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ModuloAssign": {
  "data": {
   "lineno": 3204,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3205
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3204
     ]
    },
    "typing.Optional": {
     "line number": [
      3205
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ModuloAssign_whitespace_after": {
  "data": {
   "lineno": 3216,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3216
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ModuloAssign_whitespace_before": {
  "data": {
   "lineno": 3208,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3208
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Modulo_whitespace_after": {
  "data": {
   "lineno": 3196,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3196
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Modulo_whitespace_before": {
  "data": {
   "lineno": 3188,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3188
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Multiply": {
  "data": {
   "lineno": 3224,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3225
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3224
     ]
    },
    "typing.Optional": {
     "line number": [
      3225
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_MultiplyAssign": {
  "data": {
   "lineno": 3244,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3245
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3244
     ]
    },
    "typing.Optional": {
     "line number": [
      3245
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_MultiplyAssign_whitespace_after": {
  "data": {
   "lineno": 3256,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3256
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_MultiplyAssign_whitespace_before": {
  "data": {
   "lineno": 3248,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3248
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Multiply_whitespace_after": {
  "data": {
   "lineno": 3236,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3236
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Multiply_whitespace_before": {
  "data": {
   "lineno": 3228,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3228
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Name": {
  "data": {
   "lineno": 3264,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3265
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3264
     ]
    },
    "typing.Optional": {
     "line number": [
      3265
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_NameItem": {
  "data": {
   "lineno": 3292,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3293
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3292
     ]
    },
    "typing.Optional": {
     "line number": [
      3293
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_NameItem_comma": {
  "data": {
   "lineno": 3304,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3304
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_NameItem_name": {
  "data": {
   "lineno": 3296,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3296
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Name_lpar": {
  "data": {
   "lineno": 3276,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3276
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Name_rpar": {
  "data": {
   "lineno": 3284,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3284
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Name_value": {
  "data": {
   "lineno": 3268,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3268
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_NamedExpr": {
  "data": {
   "lineno": 3312,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3313
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3312
     ]
    },
    "typing.Optional": {
     "line number": [
      3313
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_NamedExpr_lpar": {
  "data": {
   "lineno": 3332,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3332
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_NamedExpr_rpar": {
  "data": {
   "lineno": 3340,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3340
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_NamedExpr_target": {
  "data": {
   "lineno": 3316,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3316
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_NamedExpr_value": {
  "data": {
   "lineno": 3324,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3324
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_NamedExpr_whitespace_after_walrus": {
  "data": {
   "lineno": 3356,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3356
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_NamedExpr_whitespace_before_walrus": {
  "data": {
   "lineno": 3348,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3348
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Newline": {
  "data": {
   "lineno": 3364,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3365
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3364
     ]
    },
    "typing.Optional": {
     "line number": [
      3365
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Newline_value": {
  "data": {
   "lineno": 3368,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3368
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Nonlocal": {
  "data": {
   "lineno": 3376,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3377
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3376
     ]
    },
    "typing.Optional": {
     "line number": [
      3377
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Nonlocal_names": {
  "data": {
   "lineno": 3380,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3380
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Nonlocal_semicolon": {
  "data": {
   "lineno": 3396,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3396
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Nonlocal_whitespace_after_nonlocal": {
  "data": {
   "lineno": 3388,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3388
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Not": {
  "data": {
   "lineno": 3404,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3405
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3404
     ]
    },
    "typing.Optional": {
     "line number": [
      3405
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_NotEqual": {
  "data": {
   "lineno": 3416,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3417
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3416
     ]
    },
    "typing.Optional": {
     "line number": [
      3417
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_NotEqual_value": {
  "data": {
   "lineno": 3420,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3420
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_NotEqual_whitespace_after": {
  "data": {
   "lineno": 3436,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3436
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_NotEqual_whitespace_before": {
  "data": {
   "lineno": 3428,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3428
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_NotIn": {
  "data": {
   "lineno": 3444,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3445
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3444
     ]
    },
    "typing.Optional": {
     "line number": [
      3445
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_NotIn_whitespace_after": {
  "data": {
   "lineno": 3464,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3464
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_NotIn_whitespace_before": {
  "data": {
   "lineno": 3448,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3448
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_NotIn_whitespace_between": {
  "data": {
   "lineno": 3456,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3456
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Not_whitespace_after": {
  "data": {
   "lineno": 3408,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3408
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Or": {
  "data": {
   "lineno": 3472,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3473
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3472
     ]
    },
    "typing.Optional": {
     "line number": [
      3473
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Or_whitespace_after": {
  "data": {
   "lineno": 3484,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3484
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Or_whitespace_before": {
  "data": {
   "lineno": 3476,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3476
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Param": {
  "data": {
   "lineno": 3492,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3493
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3492
     ]
    },
    "typing.Optional": {
     "line number": [
      3493
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ParamSlash": {
  "data": {
   "lineno": 3560,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3561
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3560
     ]
    },
    "typing.Optional": {
     "line number": [
      3561
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ParamSlash_comma": {
  "data": {
   "lineno": 3564,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3564
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ParamStar": {
  "data": {
   "lineno": 3572,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3573
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3572
     ]
    },
    "typing.Optional": {
     "line number": [
      3573
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ParamStar_comma": {
  "data": {
   "lineno": 3576,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3576
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Param_annotation": {
  "data": {
   "lineno": 3504,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3504
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Param_comma": {
  "data": {
   "lineno": 3528,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3528
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Param_default": {
  "data": {
   "lineno": 3520,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3520
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Param_equal": {
  "data": {
   "lineno": 3512,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3512
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Param_name": {
  "data": {
   "lineno": 3496,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3496
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Param_star": {
  "data": {
   "lineno": 3536,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3536
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Param_whitespace_after_param": {
  "data": {
   "lineno": 3552,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3552
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Param_whitespace_after_star": {
  "data": {
   "lineno": 3544,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3544
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Parameters": {
  "data": {
   "lineno": 3584,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3585
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3584
     ]
    },
    "typing.Optional": {
     "line number": [
      3585
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Parameters_kwonly_params": {
  "data": {
   "lineno": 3604,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3604
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Parameters_params": {
  "data": {
   "lineno": 3588,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3588
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Parameters_posonly_ind": {
  "data": {
   "lineno": 3628,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3628
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Parameters_posonly_params": {
  "data": {
   "lineno": 3620,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3620
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Parameters_star_arg": {
  "data": {
   "lineno": 3596,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3596
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Parameters_star_kwarg": {
  "data": {
   "lineno": 3612,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3612
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ParenthesizedWhitespace": {
  "data": {
   "lineno": 3636,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3639
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3636
     ]
    },
    "typing.Optional": {
     "line number": [
      3639
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ParenthesizedWhitespace_empty_lines": {
  "data": {
   "lineno": 3654,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3654
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ParenthesizedWhitespace_first_line": {
  "data": {
   "lineno": 3642,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3642
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ParenthesizedWhitespace_indent": {
  "data": {
   "lineno": 3666,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3666
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_ParenthesizedWhitespace_last_line": {
  "data": {
   "lineno": 3678,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3678
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Pass": {
  "data": {
   "lineno": 3690,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3691
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3690
     ]
    },
    "typing.Optional": {
     "line number": [
      3691
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Pass_semicolon": {
  "data": {
   "lineno": 3694,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3694
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Plus": {
  "data": {
   "lineno": 3702,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3703
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3702
     ]
    },
    "typing.Optional": {
     "line number": [
      3703
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Plus_whitespace_after": {
  "data": {
   "lineno": 3706,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3706
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Power": {
  "data": {
   "lineno": 3714,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3715
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3714
     ]
    },
    "typing.Optional": {
     "line number": [
      3715
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_PowerAssign": {
  "data": {
   "lineno": 3734,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3735
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3734
     ]
    },
    "typing.Optional": {
     "line number": [
      3735
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_PowerAssign_whitespace_after": {
  "data": {
   "lineno": 3746,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3746
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_PowerAssign_whitespace_before": {
  "data": {
   "lineno": 3738,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3738
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Power_whitespace_after": {
  "data": {
   "lineno": 3726,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3726
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Power_whitespace_before": {
  "data": {
   "lineno": 3718,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3718
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Raise": {
  "data": {
   "lineno": 3754,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3755
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3754
     ]
    },
    "typing.Optional": {
     "line number": [
      3755
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Raise_cause": {
  "data": {
   "lineno": 3766,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3766
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Raise_exc": {
  "data": {
   "lineno": 3758,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3758
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Raise_semicolon": {
  "data": {
   "lineno": 3782,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3782
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Raise_whitespace_after_raise": {
  "data": {
   "lineno": 3774,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3774
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Return": {
  "data": {
   "lineno": 3790,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3791
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3790
     ]
    },
    "typing.Optional": {
     "line number": [
      3791
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Return_semicolon": {
  "data": {
   "lineno": 3810,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3810
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Return_value": {
  "data": {
   "lineno": 3794,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3794
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Return_whitespace_after_return": {
  "data": {
   "lineno": 3802,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3802
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_RightCurlyBrace": {
  "data": {
   "lineno": 3818,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3819
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3818
     ]
    },
    "typing.Optional": {
     "line number": [
      3819
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_RightCurlyBrace_whitespace_before": {
  "data": {
   "lineno": 3822,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3822
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_RightParen": {
  "data": {
   "lineno": 3830,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3831
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3830
     ]
    },
    "typing.Optional": {
     "line number": [
      3831
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_RightParen_whitespace_before": {
  "data": {
   "lineno": 3834,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3834
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_RightShift": {
  "data": {
   "lineno": 3842,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3843
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3842
     ]
    },
    "typing.Optional": {
     "line number": [
      3843
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_RightShiftAssign": {
  "data": {
   "lineno": 3862,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3863
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3862
     ]
    },
    "typing.Optional": {
     "line number": [
      3863
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_RightShiftAssign_whitespace_after": {
  "data": {
   "lineno": 3878,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3878
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_RightShiftAssign_whitespace_before": {
  "data": {
   "lineno": 3866,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3866
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_RightShift_whitespace_after": {
  "data": {
   "lineno": 3854,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3854
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_RightShift_whitespace_before": {
  "data": {
   "lineno": 3846,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3846
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_RightSquareBracket": {
  "data": {
   "lineno": 3886,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3887
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3886
     ]
    },
    "typing.Optional": {
     "line number": [
      3887
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_RightSquareBracket_whitespace_before": {
  "data": {
   "lineno": 3890,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3890
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Semicolon": {
  "data": {
   "lineno": 3902,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3903
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3902
     ]
    },
    "typing.Optional": {
     "line number": [
      3903
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Semicolon_whitespace_after": {
  "data": {
   "lineno": 3914,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3914
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Semicolon_whitespace_before": {
  "data": {
   "lineno": 3906,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3906
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Set": {
  "data": {
   "lineno": 3922,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3923
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3922
     ]
    },
    "typing.Optional": {
     "line number": [
      3923
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_SetComp": {
  "data": {
   "lineno": 3966,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3967
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3966
     ]
    },
    "typing.Optional": {
     "line number": [
      3967
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_SetComp_elt": {
  "data": {
   "lineno": 3970,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3970
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_SetComp_for_in": {
  "data": {
   "lineno": 3978,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3978
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_SetComp_lbrace": {
  "data": {
   "lineno": 3986,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3986
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_SetComp_lpar": {
  "data": {
   "lineno": 4002,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4002
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_SetComp_rbrace": {
  "data": {
   "lineno": 3994,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3994
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_SetComp_rpar": {
  "data": {
   "lineno": 4010,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4010
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Set_elements": {
  "data": {
   "lineno": 3926,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3926
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Set_lbrace": {
  "data": {
   "lineno": 3934,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3934
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Set_lpar": {
  "data": {
   "lineno": 3950,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3950
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Set_rbrace": {
  "data": {
   "lineno": 3942,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3942
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Set_rpar": {
  "data": {
   "lineno": 3958,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      3958
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_SimpleStatementLine": {
  "data": {
   "lineno": 4018,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      4019
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4018
     ]
    },
    "typing.Optional": {
     "line number": [
      4019
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_SimpleStatementLine_body": {
  "data": {
   "lineno": 4022,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4022
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_SimpleStatementLine_leading_lines": {
  "data": {
   "lineno": 4030,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4030
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_SimpleStatementLine_trailing_whitespace": {
  "data": {
   "lineno": 4042,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4042
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_SimpleStatementSuite": {
  "data": {
   "lineno": 4054,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      4057
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4054
     ]
    },
    "typing.Optional": {
     "line number": [
      4057
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_SimpleStatementSuite_body": {
  "data": {
   "lineno": 4060,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4060
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_SimpleStatementSuite_leading_whitespace": {
  "data": {
   "lineno": 4068,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4068
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_SimpleStatementSuite_trailing_whitespace": {
  "data": {
   "lineno": 4080,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4080
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_SimpleString": {
  "data": {
   "lineno": 4092,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      4093
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4092
     ]
    },
    "typing.Optional": {
     "line number": [
      4093
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_SimpleString_lpar": {
  "data": {
   "lineno": 4104,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4104
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_SimpleString_rpar": {
  "data": {
   "lineno": 4112,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4112
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_SimpleString_value": {
  "data": {
   "lineno": 4096,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4096
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_SimpleWhitespace": {
  "data": {
   "lineno": 4120,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      4121
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4120
     ]
    },
    "typing.Optional": {
     "line number": [
      4121
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_SimpleWhitespace_value": {
  "data": {
   "lineno": 4124,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4124
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Slice": {
  "data": {
   "lineno": 4132,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      4133
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4132
     ]
    },
    "typing.Optional": {
     "line number": [
      4133
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Slice_first_colon": {
  "data": {
   "lineno": 4160,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4160
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Slice_lower": {
  "data": {
   "lineno": 4136,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4136
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Slice_second_colon": {
  "data": {
   "lineno": 4168,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4168
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Slice_step": {
  "data": {
   "lineno": 4152,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4152
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Slice_upper": {
  "data": {
   "lineno": 4144,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4144
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_StarredDictElement": {
  "data": {
   "lineno": 4176,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      4177
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4176
     ]
    },
    "typing.Optional": {
     "line number": [
      4177
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_StarredDictElement_comma": {
  "data": {
   "lineno": 4188,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4188
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_StarredDictElement_value": {
  "data": {
   "lineno": 4180,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4180
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_StarredDictElement_whitespace_before_value": {
  "data": {
   "lineno": 4196,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4196
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_StarredElement": {
  "data": {
   "lineno": 4208,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      4209
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4208
     ]
    },
    "typing.Optional": {
     "line number": [
      4209
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_StarredElement_comma": {
  "data": {
   "lineno": 4220,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4220
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_StarredElement_lpar": {
  "data": {
   "lineno": 4228,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4228
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_StarredElement_rpar": {
  "data": {
   "lineno": 4236,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4236
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_StarredElement_value": {
  "data": {
   "lineno": 4212,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4212
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_StarredElement_whitespace_before_value": {
  "data": {
   "lineno": 4244,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4244
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Subscript": {
  "data": {
   "lineno": 4256,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      4257
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4256
     ]
    },
    "typing.Optional": {
     "line number": [
      4257
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_SubscriptElement": {
  "data": {
   "lineno": 4316,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      4317
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4316
     ]
    },
    "typing.Optional": {
     "line number": [
      4317
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_SubscriptElement_comma": {
  "data": {
   "lineno": 4328,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4328
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_SubscriptElement_slice": {
  "data": {
   "lineno": 4320,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4320
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Subscript_lbracket": {
  "data": {
   "lineno": 4276,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4276
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Subscript_lpar": {
  "data": {
   "lineno": 4292,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4292
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Subscript_rbracket": {
  "data": {
   "lineno": 4284,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4284
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Subscript_rpar": {
  "data": {
   "lineno": 4300,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4300
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Subscript_slice": {
  "data": {
   "lineno": 4268,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4268
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Subscript_value": {
  "data": {
   "lineno": 4260,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4260
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Subscript_whitespace_after_value": {
  "data": {
   "lineno": 4308,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4308
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Subtract": {
  "data": {
   "lineno": 4336,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      4337
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4336
     ]
    },
    "typing.Optional": {
     "line number": [
      4337
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_SubtractAssign": {
  "data": {
   "lineno": 4356,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      4357
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4356
     ]
    },
    "typing.Optional": {
     "line number": [
      4357
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_SubtractAssign_whitespace_after": {
  "data": {
   "lineno": 4368,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4368
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_SubtractAssign_whitespace_before": {
  "data": {
   "lineno": 4360,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4360
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Subtract_whitespace_after": {
  "data": {
   "lineno": 4348,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4348
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Subtract_whitespace_before": {
  "data": {
   "lineno": 4340,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4340
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_TrailingWhitespace": {
  "data": {
   "lineno": 4376,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      4377
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4376
     ]
    },
    "typing.Optional": {
     "line number": [
      4377
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_TrailingWhitespace_comment": {
  "data": {
   "lineno": 4388,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4388
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_TrailingWhitespace_newline": {
  "data": {
   "lineno": 4396,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4396
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_TrailingWhitespace_whitespace": {
  "data": {
   "lineno": 4380,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4380
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Try": {
  "data": {
   "lineno": 4404,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      4405
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4404
     ]
    },
    "typing.Optional": {
     "line number": [
      4405
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Try_body": {
  "data": {
   "lineno": 4408,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4408
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Try_finalbody": {
  "data": {
   "lineno": 4432,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4432
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Try_handlers": {
  "data": {
   "lineno": 4416,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4416
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Try_leading_lines": {
  "data": {
   "lineno": 4440,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4440
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Try_orelse": {
  "data": {
   "lineno": 4424,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4424
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Try_whitespace_before_colon": {
  "data": {
   "lineno": 4448,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4448
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Tuple": {
  "data": {
   "lineno": 4456,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      4457
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4456
     ]
    },
    "typing.Optional": {
     "line number": [
      4457
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Tuple_elements": {
  "data": {
   "lineno": 4460,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4460
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Tuple_lpar": {
  "data": {
   "lineno": 4468,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4468
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Tuple_rpar": {
  "data": {
   "lineno": 4476,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4476
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_UnaryOperation": {
  "data": {
   "lineno": 4484,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      4485
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4484
     ]
    },
    "typing.Optional": {
     "line number": [
      4485
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_UnaryOperation_expression": {
  "data": {
   "lineno": 4496,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4496
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_UnaryOperation_lpar": {
  "data": {
   "lineno": 4504,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4504
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_UnaryOperation_operator": {
  "data": {
   "lineno": 4488,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4488
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_UnaryOperation_rpar": {
  "data": {
   "lineno": 4512,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4512
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_While": {
  "data": {
   "lineno": 4520,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      4521
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4520
     ]
    },
    "typing.Optional": {
     "line number": [
      4521
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_While_body": {
  "data": {
   "lineno": 4532,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4532
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_While_leading_lines": {
  "data": {
   "lineno": 4548,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4548
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_While_orelse": {
  "data": {
   "lineno": 4540,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4540
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_While_test": {
  "data": {
   "lineno": 4524,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4524
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_While_whitespace_after_while": {
  "data": {
   "lineno": 4556,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4556
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_While_whitespace_before_colon": {
  "data": {
   "lineno": 4564,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4564
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_With": {
  "data": {
   "lineno": 4572,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      4573
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4572
     ]
    },
    "typing.Optional": {
     "line number": [
      4573
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_WithItem": {
  "data": {
   "lineno": 4624,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      4625
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4624
     ]
    },
    "typing.Optional": {
     "line number": [
      4625
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_WithItem_asname": {
  "data": {
   "lineno": 4636,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4636
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_WithItem_comma": {
  "data": {
   "lineno": 4644,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4644
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_WithItem_item": {
  "data": {
   "lineno": 4628,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4628
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_With_asynchronous": {
  "data": {
   "lineno": 4592,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4592
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_With_body": {
  "data": {
   "lineno": 4584,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4584
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_With_items": {
  "data": {
   "lineno": 4576,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4576
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_With_leading_lines": {
  "data": {
   "lineno": 4600,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4600
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_With_whitespace_after_with": {
  "data": {
   "lineno": 4608,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4608
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_With_whitespace_before_colon": {
  "data": {
   "lineno": 4616,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4616
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Yield": {
  "data": {
   "lineno": 4652,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      4653
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4652
     ]
    },
    "typing.Optional": {
     "line number": [
      4653
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Yield_lpar": {
  "data": {
   "lineno": 4664,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4664
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Yield_rpar": {
  "data": {
   "lineno": 4672,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4672
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Yield_value": {
  "data": {
   "lineno": 4656,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4656
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedBaseFunctions.visit_Yield_whitespace_after_yield": {
  "data": {
   "lineno": 4680,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4680
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions": {
  "data": {
   "lineno": 5267,
   "symbols_in_volume": {
    "libcst._typed_visitor.CSTTypedBaseFunctions": {
     "line number": [
      5267
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Add": {
  "data": {
   "lineno": 5270,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5270
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_AddAssign": {
  "data": {
   "lineno": 5274,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5274
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_And": {
  "data": {
   "lineno": 5280,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5280
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_AnnAssign": {
  "data": {
   "lineno": 5284,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5287
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5284
     ]
    },
    "typing.Union": {
     "line number": [
      5287
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Annotation": {
  "data": {
   "lineno": 5290,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5290
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Arg": {
  "data": {
   "lineno": 5296,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5299
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5296
     ]
    },
    "typing.Union": {
     "line number": [
      5299
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_AsName": {
  "data": {
   "lineno": 5302,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5302
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Assert": {
  "data": {
   "lineno": 5306,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5309
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5306
     ]
    },
    "typing.Union": {
     "line number": [
      5309
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Assign": {
  "data": {
   "lineno": 5312,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5315
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5312
     ]
    },
    "typing.Union": {
     "line number": [
      5315
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_AssignEqual": {
  "data": {
   "lineno": 5318,
   "symbols_in_volume": {
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      5321
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5318
     ]
    },
    "typing.Union": {
     "line number": [
      5321
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_AssignTarget": {
  "data": {
   "lineno": 5324,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5327
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5324
     ]
    },
    "typing.Union": {
     "line number": [
      5327
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Asynchronous": {
  "data": {
   "lineno": 5330,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5330
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Attribute": {
  "data": {
   "lineno": 5336,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5336
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_AugAssign": {
  "data": {
   "lineno": 5342,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5345
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5342
     ]
    },
    "typing.Union": {
     "line number": [
      5345
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Await": {
  "data": {
   "lineno": 5348,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5348
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_BinaryOperation": {
  "data": {
   "lineno": 5354,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5354
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_BitAnd": {
  "data": {
   "lineno": 5360,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5360
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_BitAndAssign": {
  "data": {
   "lineno": 5366,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5366
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_BitInvert": {
  "data": {
   "lineno": 5372,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5372
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_BitOr": {
  "data": {
   "lineno": 5378,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5378
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_BitOrAssign": {
  "data": {
   "lineno": 5384,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5384
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_BitXor": {
  "data": {
   "lineno": 5390,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5390
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_BitXorAssign": {
  "data": {
   "lineno": 5396,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5396
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_BooleanOperation": {
  "data": {
   "lineno": 5402,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5402
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Break": {
  "data": {
   "lineno": 5408,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5411
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5408
     ]
    },
    "typing.Union": {
     "line number": [
      5411
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Call": {
  "data": {
   "lineno": 5414,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5414
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_ClassDef": {
  "data": {
   "lineno": 5420,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5423
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5420
     ]
    },
    "typing.Union": {
     "line number": [
      5423
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Colon": {
  "data": {
   "lineno": 5426,
   "symbols_in_volume": {
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      5429
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5426
     ]
    },
    "typing.Union": {
     "line number": [
      5429
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Comma": {
  "data": {
   "lineno": 5432,
   "symbols_in_volume": {
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      5435
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5432
     ]
    },
    "typing.Union": {
     "line number": [
      5435
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Comment": {
  "data": {
   "lineno": 5438,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5438
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_CompFor": {
  "data": {
   "lineno": 5444,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5444
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_CompIf": {
  "data": {
   "lineno": 5450,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5450
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Comparison": {
  "data": {
   "lineno": 5454,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5454
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_ComparisonTarget": {
  "data": {
   "lineno": 5460,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5463
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5460
     ]
    },
    "typing.Union": {
     "line number": [
      5463
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_ConcatenatedString": {
  "data": {
   "lineno": 5466,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5466
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Continue": {
  "data": {
   "lineno": 5472,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5475
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5472
     ]
    },
    "typing.Union": {
     "line number": [
      5475
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Decorator": {
  "data": {
   "lineno": 5478,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5481
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5478
     ]
    },
    "typing.Union": {
     "line number": [
      5481
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Del": {
  "data": {
   "lineno": 5484,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5487
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5484
     ]
    },
    "typing.Union": {
     "line number": [
      5487
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Dict": {
  "data": {
   "lineno": 5490,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5490
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_DictComp": {
  "data": {
   "lineno": 5496,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5496
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_DictElement": {
  "data": {
   "lineno": 5502,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5505
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5502
     ]
    },
    "typing.Union": {
     "line number": [
      5505
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Divide": {
  "data": {
   "lineno": 5508,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5508
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_DivideAssign": {
  "data": {
   "lineno": 5514,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5514
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Dot": {
  "data": {
   "lineno": 5520,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5523
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5520
     ]
    },
    "typing.Union": {
     "line number": [
      5523
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Element": {
  "data": {
   "lineno": 5526,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5529
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5526
     ]
    },
    "typing.Union": {
     "line number": [
      5529
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Ellipsis": {
  "data": {
   "lineno": 5532,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5532
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Else": {
  "data": {
   "lineno": 5538,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5538
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_EmptyLine": {
  "data": {
   "lineno": 5542,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5545
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5542
     ]
    },
    "typing.Union": {
     "line number": [
      5545
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Equal": {
  "data": {
   "lineno": 5548,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5548
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_ExceptHandler": {
  "data": {
   "lineno": 5554,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5557
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5554
     ]
    },
    "typing.Union": {
     "line number": [
      5557
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Expr": {
  "data": {
   "lineno": 5560,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5563
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5560
     ]
    },
    "typing.Union": {
     "line number": [
      5563
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Finally": {
  "data": {
   "lineno": 5566,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5566
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Float": {
  "data": {
   "lineno": 5572,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5572
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_FloorDivide": {
  "data": {
   "lineno": 5578,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5578
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_FloorDivideAssign": {
  "data": {
   "lineno": 5584,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5584
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_For": {
  "data": {
   "lineno": 5590,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5593
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5590
     ]
    },
    "typing.Union": {
     "line number": [
      5593
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_FormattedString": {
  "data": {
   "lineno": 5596,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5596
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_FormattedStringExpression": {
  "data": {
   "lineno": 5602,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5607
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5602
     ]
    },
    "typing.Union": {
     "line number": [
      5607
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_FormattedStringText": {
  "data": {
   "lineno": 5610,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5613
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5610
     ]
    },
    "typing.Union": {
     "line number": [
      5613
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_From": {
  "data": {
   "lineno": 5616,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5616
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_FunctionDef": {
  "data": {
   "lineno": 5620,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5623
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5620
     ]
    },
    "typing.Union": {
     "line number": [
      5623
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_GeneratorExp": {
  "data": {
   "lineno": 5626,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5626
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Global": {
  "data": {
   "lineno": 5632,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5635
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5632
     ]
    },
    "typing.Union": {
     "line number": [
      5635
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_GreaterThan": {
  "data": {
   "lineno": 5638,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5638
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_GreaterThanEqual": {
  "data": {
   "lineno": 5644,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5644
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_If": {
  "data": {
   "lineno": 5650,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5653
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5650
     ]
    },
    "typing.Union": {
     "line number": [
      5653
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_IfExp": {
  "data": {
   "lineno": 5656,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5656
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Imaginary": {
  "data": {
   "lineno": 5662,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5662
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Import": {
  "data": {
   "lineno": 5668,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5671
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5668
     ]
    },
    "typing.Union": {
     "line number": [
      5671
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_ImportAlias": {
  "data": {
   "lineno": 5674,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5677
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5674
     ]
    },
    "typing.Union": {
     "line number": [
      5677
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_ImportFrom": {
  "data": {
   "lineno": 5680,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5683
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5680
     ]
    },
    "typing.Union": {
     "line number": [
      5683
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_ImportStar": {
  "data": {
   "lineno": 5686,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5686
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_In": {
  "data": {
   "lineno": 5692,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5692
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_IndentedBlock": {
  "data": {
   "lineno": 5696,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5696
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Index": {
  "data": {
   "lineno": 5702,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5702
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Integer": {
  "data": {
   "lineno": 5706,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5706
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Is": {
  "data": {
   "lineno": 5712,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5712
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_IsNot": {
  "data": {
   "lineno": 5716,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5716
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Lambda": {
  "data": {
   "lineno": 5722,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5722
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_LeftCurlyBrace": {
  "data": {
   "lineno": 5728,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5728
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_LeftParen": {
  "data": {
   "lineno": 5734,
   "symbols_in_volume": {
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      5737
     ]
    },
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5737
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5734
     ]
    },
    "typing.Union": {
     "line number": [
      5737
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_LeftShift": {
  "data": {
   "lineno": 5740,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5740
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_LeftShiftAssign": {
  "data": {
   "lineno": 5746,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5746
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_LeftSquareBracket": {
  "data": {
   "lineno": 5752,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5752
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_LessThan": {
  "data": {
   "lineno": 5758,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5758
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_LessThanEqual": {
  "data": {
   "lineno": 5764,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5764
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_List": {
  "data": {
   "lineno": 5770,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5770
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_ListComp": {
  "data": {
   "lineno": 5776,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5776
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_MatrixMultiply": {
  "data": {
   "lineno": 5782,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5782
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_MatrixMultiplyAssign": {
  "data": {
   "lineno": 5788,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5788
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Minus": {
  "data": {
   "lineno": 5796,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5796
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Module": {
  "data": {
   "lineno": 5802,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5802
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Modulo": {
  "data": {
   "lineno": 5806,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5806
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_ModuloAssign": {
  "data": {
   "lineno": 5812,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5812
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Multiply": {
  "data": {
   "lineno": 5818,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5818
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_MultiplyAssign": {
  "data": {
   "lineno": 5824,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5824
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Name": {
  "data": {
   "lineno": 5830,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5830
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_NameItem": {
  "data": {
   "lineno": 5836,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5839
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5836
     ]
    },
    "typing.Union": {
     "line number": [
      5839
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_NamedExpr": {
  "data": {
   "lineno": 5842,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5842
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Newline": {
  "data": {
   "lineno": 5848,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5848
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Nonlocal": {
  "data": {
   "lineno": 5854,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5857
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5854
     ]
    },
    "typing.Union": {
     "line number": [
      5857
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Not": {
  "data": {
   "lineno": 5860,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5860
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_NotEqual": {
  "data": {
   "lineno": 5864,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5864
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_NotIn": {
  "data": {
   "lineno": 5870,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5870
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Or": {
  "data": {
   "lineno": 5876,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5876
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Param": {
  "data": {
   "lineno": 5880,
   "symbols_in_volume": {
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      5883
     ]
    },
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5883
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5880
     ]
    },
    "typing.Union": {
     "line number": [
      5883
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_ParamSlash": {
  "data": {
   "lineno": 5886,
   "symbols_in_volume": {
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      5889
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5886
     ]
    },
    "typing.Union": {
     "line number": [
      5889
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_ParamStar": {
  "data": {
   "lineno": 5892,
   "symbols_in_volume": {
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      5895
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5892
     ]
    },
    "typing.Union": {
     "line number": [
      5895
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Parameters": {
  "data": {
   "lineno": 5898,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5898
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_ParenthesizedWhitespace": {
  "data": {
   "lineno": 5904,
   "symbols_in_volume": {
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      5909
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5904
     ]
    },
    "typing.Union": {
     "line number": [
      5909
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Pass": {
  "data": {
   "lineno": 5912,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5915
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5912
     ]
    },
    "typing.Union": {
     "line number": [
      5915
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Plus": {
  "data": {
   "lineno": 5918,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5918
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Power": {
  "data": {
   "lineno": 5922,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5922
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_PowerAssign": {
  "data": {
   "lineno": 5928,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5928
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Raise": {
  "data": {
   "lineno": 5934,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5937
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5934
     ]
    },
    "typing.Union": {
     "line number": [
      5937
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Return": {
  "data": {
   "lineno": 5940,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5943
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5940
     ]
    },
    "typing.Union": {
     "line number": [
      5943
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_RightCurlyBrace": {
  "data": {
   "lineno": 5946,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5946
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_RightParen": {
  "data": {
   "lineno": 5952,
   "symbols_in_volume": {
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      5955
     ]
    },
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5955
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5952
     ]
    },
    "typing.Union": {
     "line number": [
      5955
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_RightShift": {
  "data": {
   "lineno": 5958,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5958
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_RightShiftAssign": {
  "data": {
   "lineno": 5964,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5964
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_RightSquareBracket": {
  "data": {
   "lineno": 5970,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5970
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Semicolon": {
  "data": {
   "lineno": 5976,
   "symbols_in_volume": {
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      5979
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5976
     ]
    },
    "typing.Union": {
     "line number": [
      5979
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Set": {
  "data": {
   "lineno": 5982,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5982
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_SetComp": {
  "data": {
   "lineno": 5986,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5986
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_SimpleStatementLine": {
  "data": {
   "lineno": 5992,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      5995
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5992
     ]
    },
    "typing.Union": {
     "line number": [
      5995
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_SimpleStatementSuite": {
  "data": {
   "lineno": 5998,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5998
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_SimpleString": {
  "data": {
   "lineno": 6006,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      6006
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_SimpleWhitespace": {
  "data": {
   "lineno": 6012,
   "symbols_in_volume": {
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      6015
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      6012
     ]
    },
    "typing.Union": {
     "line number": [
      6015
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Slice": {
  "data": {
   "lineno": 6018,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      6018
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_StarredDictElement": {
  "data": {
   "lineno": 6022,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      6025
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      6022
     ]
    },
    "typing.Union": {
     "line number": [
      6025
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_StarredElement": {
  "data": {
   "lineno": 6028,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      6031
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      6028
     ]
    },
    "typing.Union": {
     "line number": [
      6031
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Subscript": {
  "data": {
   "lineno": 6034,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      6034
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_SubscriptElement": {
  "data": {
   "lineno": 6040,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      6043
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      6040
     ]
    },
    "typing.Union": {
     "line number": [
      6043
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Subtract": {
  "data": {
   "lineno": 6046,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      6046
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_SubtractAssign": {
  "data": {
   "lineno": 6052,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      6052
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_TrailingWhitespace": {
  "data": {
   "lineno": 6058,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      6058
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Try": {
  "data": {
   "lineno": 6064,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      6067
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      6064
     ]
    },
    "typing.Union": {
     "line number": [
      6067
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Tuple": {
  "data": {
   "lineno": 6070,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      6070
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_UnaryOperation": {
  "data": {
   "lineno": 6076,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      6076
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_While": {
  "data": {
   "lineno": 6082,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      6085
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      6082
     ]
    },
    "typing.Union": {
     "line number": [
      6085
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_With": {
  "data": {
   "lineno": 6088,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      6091
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      6088
     ]
    },
    "typing.Union": {
     "line number": [
      6091
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_WithItem": {
  "data": {
   "lineno": 6094,
   "symbols_in_volume": {
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      6097
     ]
    },
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      6094
     ]
    },
    "typing.Union": {
     "line number": [
      6097
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedTransformerFunctions.leave_Yield": {
  "data": {
   "lineno": 6100,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      6100
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions": {
  "data": {
   "lineno": 4689,
   "symbols_in_volume": {
    "libcst._typed_visitor.CSTTypedBaseFunctions": {
     "line number": [
      4689
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Add": {
  "data": {
   "lineno": 4690,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4690
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_AddAssign": {
  "data": {
   "lineno": 4694,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4694
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_And": {
  "data": {
   "lineno": 4698,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4698
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_AnnAssign": {
  "data": {
   "lineno": 4702,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4702
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Annotation": {
  "data": {
   "lineno": 4706,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4706
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Arg": {
  "data": {
   "lineno": 4710,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4710
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_AsName": {
  "data": {
   "lineno": 4714,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4714
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Assert": {
  "data": {
   "lineno": 4718,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4718
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Assign": {
  "data": {
   "lineno": 4722,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4722
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_AssignEqual": {
  "data": {
   "lineno": 4726,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4726
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_AssignTarget": {
  "data": {
   "lineno": 4730,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4730
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Asynchronous": {
  "data": {
   "lineno": 4734,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4734
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Attribute": {
  "data": {
   "lineno": 4738,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4738
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_AugAssign": {
  "data": {
   "lineno": 4742,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4742
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Await": {
  "data": {
   "lineno": 4746,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4746
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_BinaryOperation": {
  "data": {
   "lineno": 4750,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4750
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_BitAnd": {
  "data": {
   "lineno": 4754,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4754
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_BitAndAssign": {
  "data": {
   "lineno": 4758,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4758
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_BitInvert": {
  "data": {
   "lineno": 4762,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4762
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_BitOr": {
  "data": {
   "lineno": 4766,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4766
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_BitOrAssign": {
  "data": {
   "lineno": 4770,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4770
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_BitXor": {
  "data": {
   "lineno": 4774,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4774
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_BitXorAssign": {
  "data": {
   "lineno": 4778,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4778
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_BooleanOperation": {
  "data": {
   "lineno": 4782,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4782
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Break": {
  "data": {
   "lineno": 4786,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4786
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Call": {
  "data": {
   "lineno": 4790,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4790
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_ClassDef": {
  "data": {
   "lineno": 4794,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4794
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Colon": {
  "data": {
   "lineno": 4798,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4798
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Comma": {
  "data": {
   "lineno": 4802,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4802
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Comment": {
  "data": {
   "lineno": 4806,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4806
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_CompFor": {
  "data": {
   "lineno": 4810,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4810
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_CompIf": {
  "data": {
   "lineno": 4814,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4814
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Comparison": {
  "data": {
   "lineno": 4818,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4818
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_ComparisonTarget": {
  "data": {
   "lineno": 4822,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4822
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_ConcatenatedString": {
  "data": {
   "lineno": 4826,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4826
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Continue": {
  "data": {
   "lineno": 4830,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4830
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Decorator": {
  "data": {
   "lineno": 4834,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4834
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Del": {
  "data": {
   "lineno": 4838,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4838
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Dict": {
  "data": {
   "lineno": 4842,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4842
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_DictComp": {
  "data": {
   "lineno": 4846,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4846
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_DictElement": {
  "data": {
   "lineno": 4850,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4850
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Divide": {
  "data": {
   "lineno": 4854,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4854
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_DivideAssign": {
  "data": {
   "lineno": 4858,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4858
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Dot": {
  "data": {
   "lineno": 4862,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4862
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Element": {
  "data": {
   "lineno": 4866,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4866
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Ellipsis": {
  "data": {
   "lineno": 4870,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4870
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Else": {
  "data": {
   "lineno": 4874,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4874
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_EmptyLine": {
  "data": {
   "lineno": 4878,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4878
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Equal": {
  "data": {
   "lineno": 4882,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4882
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_ExceptHandler": {
  "data": {
   "lineno": 4886,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4886
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Expr": {
  "data": {
   "lineno": 4890,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4890
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Finally": {
  "data": {
   "lineno": 4894,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4894
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Float": {
  "data": {
   "lineno": 4898,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4898
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_FloorDivide": {
  "data": {
   "lineno": 4902,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4902
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_FloorDivideAssign": {
  "data": {
   "lineno": 4906,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4906
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_For": {
  "data": {
   "lineno": 4910,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4910
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_FormattedString": {
  "data": {
   "lineno": 4914,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4914
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_FormattedStringExpression": {
  "data": {
   "lineno": 4918,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4918
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_FormattedStringText": {
  "data": {
   "lineno": 4924,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4924
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_From": {
  "data": {
   "lineno": 4928,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4928
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_FunctionDef": {
  "data": {
   "lineno": 4932,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4932
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_GeneratorExp": {
  "data": {
   "lineno": 4936,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4936
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Global": {
  "data": {
   "lineno": 4940,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4940
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_GreaterThan": {
  "data": {
   "lineno": 4944,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4944
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_GreaterThanEqual": {
  "data": {
   "lineno": 4948,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4948
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_If": {
  "data": {
   "lineno": 4952,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4952
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_IfExp": {
  "data": {
   "lineno": 4956,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4956
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Imaginary": {
  "data": {
   "lineno": 4960,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4960
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Import": {
  "data": {
   "lineno": 4964,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4964
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_ImportAlias": {
  "data": {
   "lineno": 4968,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4968
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_ImportFrom": {
  "data": {
   "lineno": 4972,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4972
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_ImportStar": {
  "data": {
   "lineno": 4976,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4976
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_In": {
  "data": {
   "lineno": 4980,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4980
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_IndentedBlock": {
  "data": {
   "lineno": 4984,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4984
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Index": {
  "data": {
   "lineno": 4988,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4988
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Integer": {
  "data": {
   "lineno": 4992,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4992
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Is": {
  "data": {
   "lineno": 4996,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      4996
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_IsNot": {
  "data": {
   "lineno": 5000,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5000
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Lambda": {
  "data": {
   "lineno": 5004,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5004
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_LeftCurlyBrace": {
  "data": {
   "lineno": 5008,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5008
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_LeftParen": {
  "data": {
   "lineno": 5012,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5012
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_LeftShift": {
  "data": {
   "lineno": 5016,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5016
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_LeftShiftAssign": {
  "data": {
   "lineno": 5020,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5020
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_LeftSquareBracket": {
  "data": {
   "lineno": 5024,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5024
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_LessThan": {
  "data": {
   "lineno": 5028,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5028
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_LessThanEqual": {
  "data": {
   "lineno": 5032,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5032
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_List": {
  "data": {
   "lineno": 5036,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5036
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_ListComp": {
  "data": {
   "lineno": 5040,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5040
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_MatrixMultiply": {
  "data": {
   "lineno": 5044,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5044
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_MatrixMultiplyAssign": {
  "data": {
   "lineno": 5048,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5048
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Minus": {
  "data": {
   "lineno": 5052,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5052
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Module": {
  "data": {
   "lineno": 5056,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5056
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Modulo": {
  "data": {
   "lineno": 5060,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5060
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_ModuloAssign": {
  "data": {
   "lineno": 5064,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5064
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Multiply": {
  "data": {
   "lineno": 5068,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5068
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_MultiplyAssign": {
  "data": {
   "lineno": 5072,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5072
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Name": {
  "data": {
   "lineno": 5076,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5076
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_NameItem": {
  "data": {
   "lineno": 5080,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5080
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_NamedExpr": {
  "data": {
   "lineno": 5084,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5084
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Newline": {
  "data": {
   "lineno": 5088,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5088
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Nonlocal": {
  "data": {
   "lineno": 5092,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5092
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Not": {
  "data": {
   "lineno": 5096,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5096
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_NotEqual": {
  "data": {
   "lineno": 5100,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5100
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_NotIn": {
  "data": {
   "lineno": 5104,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5104
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Or": {
  "data": {
   "lineno": 5108,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5108
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Param": {
  "data": {
   "lineno": 5112,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5112
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_ParamSlash": {
  "data": {
   "lineno": 5116,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5116
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_ParamStar": {
  "data": {
   "lineno": 5120,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5120
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Parameters": {
  "data": {
   "lineno": 5124,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5124
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_ParenthesizedWhitespace": {
  "data": {
   "lineno": 5128,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5128
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Pass": {
  "data": {
   "lineno": 5134,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5134
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Plus": {
  "data": {
   "lineno": 5138,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5138
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Power": {
  "data": {
   "lineno": 5142,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5142
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_PowerAssign": {
  "data": {
   "lineno": 5146,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5146
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Raise": {
  "data": {
   "lineno": 5150,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5150
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Return": {
  "data": {
   "lineno": 5154,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5154
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_RightCurlyBrace": {
  "data": {
   "lineno": 5158,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5158
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_RightParen": {
  "data": {
   "lineno": 5162,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5162
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_RightShift": {
  "data": {
   "lineno": 5166,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5166
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_RightShiftAssign": {
  "data": {
   "lineno": 5170,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5170
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_RightSquareBracket": {
  "data": {
   "lineno": 5174,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5174
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Semicolon": {
  "data": {
   "lineno": 5178,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5178
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Set": {
  "data": {
   "lineno": 5182,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5182
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_SetComp": {
  "data": {
   "lineno": 5186,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5186
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_SimpleStatementLine": {
  "data": {
   "lineno": 5190,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5190
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_SimpleStatementSuite": {
  "data": {
   "lineno": 5194,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5194
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_SimpleString": {
  "data": {
   "lineno": 5198,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5198
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_SimpleWhitespace": {
  "data": {
   "lineno": 5202,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5202
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Slice": {
  "data": {
   "lineno": 5206,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5206
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_StarredDictElement": {
  "data": {
   "lineno": 5210,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5210
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_StarredElement": {
  "data": {
   "lineno": 5214,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5214
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Subscript": {
  "data": {
   "lineno": 5218,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5218
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_SubscriptElement": {
  "data": {
   "lineno": 5222,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5222
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Subtract": {
  "data": {
   "lineno": 5226,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5226
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_SubtractAssign": {
  "data": {
   "lineno": 5230,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5230
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_TrailingWhitespace": {
  "data": {
   "lineno": 5234,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5234
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Try": {
  "data": {
   "lineno": 5238,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5238
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Tuple": {
  "data": {
   "lineno": 5242,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5242
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_UnaryOperation": {
  "data": {
   "lineno": 5246,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5246
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_While": {
  "data": {
   "lineno": 5250,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5250
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_With": {
  "data": {
   "lineno": 5254,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5254
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_WithItem": {
  "data": {
   "lineno": 5258,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5258
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.CSTTypedVisitorFunctions.leave_Yield": {
  "data": {
   "lineno": 5262,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.mark_no_op": {
     "line number": [
      5262
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._typed_visitor.Call": {
  "data": {
   "shadows": "libcst._nodes.expression.Call"
  },
  "type": "import"
 },
 "libcst._typed_visitor.ClassDef": {
  "data": {
   "shadows": "libcst._nodes.statement.ClassDef"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Colon": {
  "data": {
   "shadows": "libcst._nodes.op.Colon"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Comma": {
  "data": {
   "shadows": "libcst._nodes.op.Comma"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Comment": {
  "data": {
   "shadows": "libcst._nodes.whitespace.Comment"
  },
  "type": "import"
 },
 "libcst._typed_visitor.CompFor": {
  "data": {
   "shadows": "libcst._nodes.expression.CompFor"
  },
  "type": "import"
 },
 "libcst._typed_visitor.CompIf": {
  "data": {
   "shadows": "libcst._nodes.expression.CompIf"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Comparison": {
  "data": {
   "shadows": "libcst._nodes.expression.Comparison"
  },
  "type": "import"
 },
 "libcst._typed_visitor.ComparisonTarget": {
  "data": {
   "shadows": "libcst._nodes.expression.ComparisonTarget"
  },
  "type": "import"
 },
 "libcst._typed_visitor.ConcatenatedString": {
  "data": {
   "shadows": "libcst._nodes.expression.ConcatenatedString"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Continue": {
  "data": {
   "shadows": "libcst._nodes.statement.Continue"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Decorator": {
  "data": {
   "shadows": "libcst._nodes.statement.Decorator"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Del": {
  "data": {
   "shadows": "libcst._nodes.statement.Del"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Dict": {
  "data": {
   "shadows": "libcst._nodes.expression.Dict"
  },
  "type": "import"
 },
 "libcst._typed_visitor.DictComp": {
  "data": {
   "shadows": "libcst._nodes.expression.DictComp"
  },
  "type": "import"
 },
 "libcst._typed_visitor.DictElement": {
  "data": {
   "shadows": "libcst._nodes.expression.DictElement"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Divide": {
  "data": {
   "shadows": "libcst._nodes.op.Divide"
  },
  "type": "import"
 },
 "libcst._typed_visitor.DivideAssign": {
  "data": {
   "shadows": "libcst._nodes.op.DivideAssign"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Dot": {
  "data": {
   "shadows": "libcst._nodes.op.Dot"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Element": {
  "data": {
   "shadows": "libcst._nodes.expression.Element"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Ellipsis": {
  "data": {
   "shadows": "libcst._nodes.expression.Ellipsis"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Else": {
  "data": {
   "shadows": "libcst._nodes.statement.Else"
  },
  "type": "import"
 },
 "libcst._typed_visitor.EmptyLine": {
  "data": {
   "shadows": "libcst._nodes.whitespace.EmptyLine"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Equal": {
  "data": {
   "shadows": "libcst._nodes.op.Equal"
  },
  "type": "import"
 },
 "libcst._typed_visitor.ExceptHandler": {
  "data": {
   "shadows": "libcst._nodes.statement.ExceptHandler"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Expr": {
  "data": {
   "shadows": "libcst._nodes.statement.Expr"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Finally": {
  "data": {
   "shadows": "libcst._nodes.statement.Finally"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Float": {
  "data": {
   "shadows": "libcst._nodes.expression.Float"
  },
  "type": "import"
 },
 "libcst._typed_visitor.FloorDivide": {
  "data": {
   "shadows": "libcst._nodes.op.FloorDivide"
  },
  "type": "import"
 },
 "libcst._typed_visitor.FloorDivideAssign": {
  "data": {
   "shadows": "libcst._nodes.op.FloorDivideAssign"
  },
  "type": "import"
 },
 "libcst._typed_visitor.For": {
  "data": {
   "shadows": "libcst._nodes.statement.For"
  },
  "type": "import"
 },
 "libcst._typed_visitor.FormattedString": {
  "data": {
   "shadows": "libcst._nodes.expression.FormattedString"
  },
  "type": "import"
 },
 "libcst._typed_visitor.FormattedStringExpression": {
  "data": {
   "shadows": "libcst._nodes.expression.FormattedStringExpression"
  },
  "type": "import"
 },
 "libcst._typed_visitor.FormattedStringText": {
  "data": {
   "shadows": "libcst._nodes.expression.FormattedStringText"
  },
  "type": "import"
 },
 "libcst._typed_visitor.From": {
  "data": {
   "shadows": "libcst._nodes.expression.From"
  },
  "type": "import"
 },
 "libcst._typed_visitor.FunctionDef": {
  "data": {
   "shadows": "libcst._nodes.statement.FunctionDef"
  },
  "type": "import"
 },
 "libcst._typed_visitor.GeneratorExp": {
  "data": {
   "shadows": "libcst._nodes.expression.GeneratorExp"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Global": {
  "data": {
   "shadows": "libcst._nodes.statement.Global"
  },
  "type": "import"
 },
 "libcst._typed_visitor.GreaterThan": {
  "data": {
   "shadows": "libcst._nodes.op.GreaterThan"
  },
  "type": "import"
 },
 "libcst._typed_visitor.GreaterThanEqual": {
  "data": {
   "shadows": "libcst._nodes.op.GreaterThanEqual"
  },
  "type": "import"
 },
 "libcst._typed_visitor.If": {
  "data": {
   "shadows": "libcst._nodes.statement.If"
  },
  "type": "import"
 },
 "libcst._typed_visitor.IfExp": {
  "data": {
   "shadows": "libcst._nodes.expression.IfExp"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Imaginary": {
  "data": {
   "shadows": "libcst._nodes.expression.Imaginary"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Import": {
  "data": {
   "shadows": "libcst._nodes.statement.Import"
  },
  "type": "import"
 },
 "libcst._typed_visitor.ImportAlias": {
  "data": {
   "shadows": "libcst._nodes.statement.ImportAlias"
  },
  "type": "import"
 },
 "libcst._typed_visitor.ImportFrom": {
  "data": {
   "shadows": "libcst._nodes.statement.ImportFrom"
  },
  "type": "import"
 },
 "libcst._typed_visitor.ImportStar": {
  "data": {
   "shadows": "libcst._nodes.op.ImportStar"
  },
  "type": "import"
 },
 "libcst._typed_visitor.In": {
  "data": {
   "shadows": "libcst._nodes.op.In"
  },
  "type": "import"
 },
 "libcst._typed_visitor.IndentedBlock": {
  "data": {
   "shadows": "libcst._nodes.statement.IndentedBlock"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Index": {
  "data": {
   "shadows": "libcst._nodes.expression.Index"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Integer": {
  "data": {
   "shadows": "libcst._nodes.expression.Integer"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Is": {
  "data": {
   "shadows": "libcst._nodes.op.Is"
  },
  "type": "import"
 },
 "libcst._typed_visitor.IsNot": {
  "data": {
   "shadows": "libcst._nodes.op.IsNot"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Lambda": {
  "data": {
   "shadows": "libcst._nodes.expression.Lambda"
  },
  "type": "import"
 },
 "libcst._typed_visitor.LeftCurlyBrace": {
  "data": {
   "shadows": "libcst._nodes.expression.LeftCurlyBrace"
  },
  "type": "import"
 },
 "libcst._typed_visitor.LeftParen": {
  "data": {
   "shadows": "libcst._nodes.expression.LeftParen"
  },
  "type": "import"
 },
 "libcst._typed_visitor.LeftShift": {
  "data": {
   "shadows": "libcst._nodes.op.LeftShift"
  },
  "type": "import"
 },
 "libcst._typed_visitor.LeftShiftAssign": {
  "data": {
   "shadows": "libcst._nodes.op.LeftShiftAssign"
  },
  "type": "import"
 },
 "libcst._typed_visitor.LeftSquareBracket": {
  "data": {
   "shadows": "libcst._nodes.expression.LeftSquareBracket"
  },
  "type": "import"
 },
 "libcst._typed_visitor.LessThan": {
  "data": {
   "shadows": "libcst._nodes.op.LessThan"
  },
  "type": "import"
 },
 "libcst._typed_visitor.LessThanEqual": {
  "data": {
   "shadows": "libcst._nodes.op.LessThanEqual"
  },
  "type": "import"
 },
 "libcst._typed_visitor.List": {
  "data": {
   "shadows": "libcst._nodes.expression.List"
  },
  "type": "import"
 },
 "libcst._typed_visitor.ListComp": {
  "data": {
   "shadows": "libcst._nodes.expression.ListComp"
  },
  "type": "import"
 },
 "libcst._typed_visitor.MatrixMultiply": {
  "data": {
   "shadows": "libcst._nodes.op.MatrixMultiply"
  },
  "type": "import"
 },
 "libcst._typed_visitor.MatrixMultiplyAssign": {
  "data": {
   "shadows": "libcst._nodes.op.MatrixMultiplyAssign"
  },
  "type": "import"
 },
 "libcst._typed_visitor.MaybeSentinel": {
  "data": {
   "shadows": "libcst._maybe_sentinel.MaybeSentinel"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Minus": {
  "data": {
   "shadows": "libcst._nodes.op.Minus"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Module": {
  "data": {
   "shadows": "libcst._nodes.module.Module"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Modulo": {
  "data": {
   "shadows": "libcst._nodes.op.Modulo"
  },
  "type": "import"
 },
 "libcst._typed_visitor.ModuloAssign": {
  "data": {
   "shadows": "libcst._nodes.op.ModuloAssign"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Multiply": {
  "data": {
   "shadows": "libcst._nodes.op.Multiply"
  },
  "type": "import"
 },
 "libcst._typed_visitor.MultiplyAssign": {
  "data": {
   "shadows": "libcst._nodes.op.MultiplyAssign"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Name": {
  "data": {
   "shadows": "libcst._nodes.expression.Name"
  },
  "type": "import"
 },
 "libcst._typed_visitor.NameItem": {
  "data": {
   "shadows": "libcst._nodes.statement.NameItem"
  },
  "type": "import"
 },
 "libcst._typed_visitor.NamedExpr": {
  "data": {
   "shadows": "libcst._nodes.expression.NamedExpr"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Newline": {
  "data": {
   "shadows": "libcst._nodes.whitespace.Newline"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Nonlocal": {
  "data": {
   "shadows": "libcst._nodes.statement.Nonlocal"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Not": {
  "data": {
   "shadows": "libcst._nodes.op.Not"
  },
  "type": "import"
 },
 "libcst._typed_visitor.NotEqual": {
  "data": {
   "shadows": "libcst._nodes.op.NotEqual"
  },
  "type": "import"
 },
 "libcst._typed_visitor.NotIn": {
  "data": {
   "shadows": "libcst._nodes.op.NotIn"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Or": {
  "data": {
   "shadows": "libcst._nodes.op.Or"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Param": {
  "data": {
   "shadows": "libcst._nodes.expression.Param"
  },
  "type": "import"
 },
 "libcst._typed_visitor.ParamSlash": {
  "data": {
   "shadows": "libcst._nodes.expression.ParamSlash"
  },
  "type": "import"
 },
 "libcst._typed_visitor.ParamStar": {
  "data": {
   "shadows": "libcst._nodes.expression.ParamStar"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Parameters": {
  "data": {
   "shadows": "libcst._nodes.expression.Parameters"
  },
  "type": "import"
 },
 "libcst._typed_visitor.ParenthesizedWhitespace": {
  "data": {
   "shadows": "libcst._nodes.whitespace.ParenthesizedWhitespace"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Pass": {
  "data": {
   "shadows": "libcst._nodes.statement.Pass"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Plus": {
  "data": {
   "shadows": "libcst._nodes.op.Plus"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Power": {
  "data": {
   "shadows": "libcst._nodes.op.Power"
  },
  "type": "import"
 },
 "libcst._typed_visitor.PowerAssign": {
  "data": {
   "shadows": "libcst._nodes.op.PowerAssign"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Raise": {
  "data": {
   "shadows": "libcst._nodes.statement.Raise"
  },
  "type": "import"
 },
 "libcst._typed_visitor.RemovalSentinel": {
  "data": {
   "shadows": "libcst._removal_sentinel.RemovalSentinel"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Return": {
  "data": {
   "shadows": "libcst._nodes.statement.Return"
  },
  "type": "import"
 },
 "libcst._typed_visitor.RightCurlyBrace": {
  "data": {
   "shadows": "libcst._nodes.expression.RightCurlyBrace"
  },
  "type": "import"
 },
 "libcst._typed_visitor.RightParen": {
  "data": {
   "shadows": "libcst._nodes.expression.RightParen"
  },
  "type": "import"
 },
 "libcst._typed_visitor.RightShift": {
  "data": {
   "shadows": "libcst._nodes.op.RightShift"
  },
  "type": "import"
 },
 "libcst._typed_visitor.RightShiftAssign": {
  "data": {
   "shadows": "libcst._nodes.op.RightShiftAssign"
  },
  "type": "import"
 },
 "libcst._typed_visitor.RightSquareBracket": {
  "data": {
   "shadows": "libcst._nodes.expression.RightSquareBracket"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Semicolon": {
  "data": {
   "shadows": "libcst._nodes.op.Semicolon"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Set": {
  "data": {
   "shadows": "libcst._nodes.expression.Set"
  },
  "type": "import"
 },
 "libcst._typed_visitor.SetComp": {
  "data": {
   "shadows": "libcst._nodes.expression.SetComp"
  },
  "type": "import"
 },
 "libcst._typed_visitor.SimpleStatementLine": {
  "data": {
   "shadows": "libcst._nodes.statement.SimpleStatementLine"
  },
  "type": "import"
 },
 "libcst._typed_visitor.SimpleStatementSuite": {
  "data": {
   "shadows": "libcst._nodes.statement.SimpleStatementSuite"
  },
  "type": "import"
 },
 "libcst._typed_visitor.SimpleString": {
  "data": {
   "shadows": "libcst._nodes.expression.SimpleString"
  },
  "type": "import"
 },
 "libcst._typed_visitor.SimpleWhitespace": {
  "data": {
   "shadows": "libcst._nodes.whitespace.SimpleWhitespace"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Slice": {
  "data": {
   "shadows": "libcst._nodes.expression.Slice"
  },
  "type": "import"
 },
 "libcst._typed_visitor.StarredDictElement": {
  "data": {
   "shadows": "libcst._nodes.expression.StarredDictElement"
  },
  "type": "import"
 },
 "libcst._typed_visitor.StarredElement": {
  "data": {
   "shadows": "libcst._nodes.expression.StarredElement"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Subscript": {
  "data": {
   "shadows": "libcst._nodes.expression.Subscript"
  },
  "type": "import"
 },
 "libcst._typed_visitor.SubscriptElement": {
  "data": {
   "shadows": "libcst._nodes.expression.SubscriptElement"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Subtract": {
  "data": {
   "shadows": "libcst._nodes.op.Subtract"
  },
  "type": "import"
 },
 "libcst._typed_visitor.SubtractAssign": {
  "data": {
   "shadows": "libcst._nodes.op.SubtractAssign"
  },
  "type": "import"
 },
 "libcst._typed_visitor.TYPE_CHECKING": {
  "data": {
   "shadows": "typing.TYPE_CHECKING"
  },
  "type": "import"
 },
 "libcst._typed_visitor.TrailingWhitespace": {
  "data": {
   "shadows": "libcst._nodes.whitespace.TrailingWhitespace"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Try": {
  "data": {
   "shadows": "libcst._nodes.statement.Try"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Tuple": {
  "data": {
   "shadows": "libcst._nodes.expression.Tuple"
  },
  "type": "import"
 },
 "libcst._typed_visitor.UnaryOperation": {
  "data": {
   "shadows": "libcst._nodes.expression.UnaryOperation"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst._typed_visitor.While": {
  "data": {
   "shadows": "libcst._nodes.statement.While"
  },
  "type": "import"
 },
 "libcst._typed_visitor.With": {
  "data": {
   "shadows": "libcst._nodes.statement.With"
  },
  "type": "import"
 },
 "libcst._typed_visitor.WithItem": {
  "data": {
   "shadows": "libcst._nodes.statement.WithItem"
  },
  "type": "import"
 },
 "libcst._typed_visitor.Yield": {
  "data": {
   "shadows": "libcst._nodes.expression.Yield"
  },
  "type": "import"
 },
 "libcst._typed_visitor.mark_no_op": {
  "data": {
   "shadows": "libcst._typed_visitor_base.mark_no_op"
  },
  "type": "import"
 },
 "libcst._typed_visitor_base": {
  "data": {
   "symbols_in_volume": {
    "typing.Callable": {
     "line number": [
      12
     ]
    },
    "typing.TYPE_CHECKING": {
     "line number": [
      9
     ]
    },
    "typing.TypeVar": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._typed_visitor_base.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst._typed_visitor_base.CSTTypedBaseFunctions": {
  "data": {
   "shadows": "libcst._typed_visitor.CSTTypedBaseFunctions"
  },
  "type": "import"
 },
 "libcst._typed_visitor_base.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst._typed_visitor_base.F": {
  "data": {
   "lineno": 12
  },
  "type": "constant"
 },
 "libcst._typed_visitor_base.TYPE_CHECKING": {
  "data": {
   "shadows": "typing.TYPE_CHECKING"
  },
  "type": "import"
 },
 "libcst._typed_visitor_base.TypeVar": {
  "data": {
   "shadows": "typing.TypeVar"
  },
  "type": "import"
 },
 "libcst._typed_visitor_base.cast": {
  "data": {
   "shadows": "typing.cast"
  },
  "type": "import"
 },
 "libcst._typed_visitor_base.mark_no_op": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst._typed_visitor_base.F": {
     "line number": [
      15,
      15
     ]
    },
    "typing.Any": {
     "line number": [
      22
     ]
    },
    "typing.cast": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._types": {
  "data": {
   "symbols_in_volume": {
    "typing.TYPE_CHECKING": {
     "line number": [
      10
     ]
    },
    "typing.TypeVar": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._types.CSTNode": {
  "data": {
   "shadows": "libcst._nodes.base.CSTNode"
  },
  "type": "import"
 },
 "libcst._types.CSTNodeT": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "libcst._types.TYPE_CHECKING": {
  "data": {
   "shadows": "typing.TYPE_CHECKING"
  },
  "type": "import"
 },
 "libcst._types.TypeVar": {
  "data": {
   "shadows": "typing.TypeVar"
  },
  "type": "import"
 },
 "libcst._version": {
  "data": {
   "symbols_in_volume": {
    "str": {
     "line number": [
      7
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._visitors": {
  "data": {
   "symbols_in_volume": {
    "typing.TYPE_CHECKING": {
     "line number": [
      14
     ]
    },
    "typing.Union": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst._visitors.CSTNode": {
  "data": {
   "shadows": "libcst._nodes.base.CSTNode"
  },
  "type": "import"
 },
 "libcst._visitors.CSTNodeT": {
  "data": {
   "shadows": "libcst._types.CSTNodeT"
  },
  "type": "import"
 },
 "libcst._visitors.CSTTransformer": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "libcst._metadata_dependent.MetadataDependent": {
     "line number": [
      22
     ]
    },
    "libcst._typed_visitor.CSTTypedTransformerFunctions": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._visitors.CSTTransformer.on_leave": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      69
     ]
    },
    "leave_func": {
     "line number": [
      71
     ]
    },
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      52
     ]
    },
    "libcst._types.CSTNodeT": {
     "line number": [
      51,
      51,
      52
     ]
    },
    "type": {
     "line number": [
      69
     ]
    },
    "typing.Union": {
     "line number": [
      52
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._visitors.CSTTransformer.on_leave_attribute": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      95
     ]
    },
    "leave_func": {
     "line number": [
      95,
      98,
      99
     ]
    },
    "str": {
     "line number": [
      86
     ]
    },
    "type": {
     "line number": [
      96
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._visitors.CSTTransformer.on_visit": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      35
     ]
    },
    "getattr": {
     "line number": [
      42
     ]
    },
    "type": {
     "line number": [
      42
     ]
    },
    "visit_func": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._visitors.CSTTransformer.on_visit_attribute": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      82
     ]
    },
    "str": {
     "line number": [
      75
     ]
    },
    "type": {
     "line number": [
      82
     ]
    },
    "visit_func": {
     "line number": [
      82,
      83,
      84
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._visitors.CSTTypedTransformerFunctions": {
  "data": {
   "shadows": "libcst._typed_visitor.CSTTypedTransformerFunctions"
  },
  "type": "import"
 },
 "libcst._visitors.CSTTypedVisitorFunctions": {
  "data": {
   "shadows": "libcst._typed_visitor.CSTTypedVisitorFunctions"
  },
  "type": "import"
 },
 "libcst._visitors.CSTVisitor": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": {
    "libcst._metadata_dependent.MetadataDependent": {
     "line number": [
      102
     ]
    },
    "libcst._typed_visitor.CSTTypedVisitorFunctions": {
     "line number": [
      102
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst._visitors.CSTVisitor.on_leave": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      135
     ]
    },
    "leave_func": {
     "line number": [
      135,
      136,
      137
     ]
    },
    "type": {
     "line number": [
      135
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._visitors.CSTVisitor.on_leave_attribute": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      155
     ]
    },
    "leave_func": {
     "line number": [
      155,
      158,
      159
     ]
    },
    "str": {
     "line number": [
      150
     ]
    },
    "type": {
     "line number": [
      156
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._visitors.CSTVisitor.on_visit": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      114
     ]
    },
    "getattr": {
     "line number": [
      121
     ]
    },
    "type": {
     "line number": [
      121
     ]
    },
    "visit_func": {
     "line number": [
      121,
      122,
      123
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._visitors.CSTVisitor.on_visit_attribute": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      146
     ]
    },
    "str": {
     "line number": [
      139
     ]
    },
    "type": {
     "line number": [
      146
     ]
    },
    "visit_func": {
     "line number": [
      146,
      147,
      148
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst._visitors.CSTVisitorT": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "libcst._visitors.MetadataDependent": {
  "data": {
   "shadows": "libcst._metadata_dependent.MetadataDependent"
  },
  "type": "import"
 },
 "libcst._visitors.RemovalSentinel": {
  "data": {
   "shadows": "libcst._removal_sentinel.RemovalSentinel"
  },
  "type": "import"
 },
 "libcst._visitors.TYPE_CHECKING": {
  "data": {
   "shadows": "typing.TYPE_CHECKING"
  },
  "type": "import"
 },
 "libcst._visitors.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.codegen": {
  "data": {},
  "type": "module"
 },
 "libcst.codegen.gather": {
  "data": {
   "symbols_in_volume": {
    "collections.defaultdict": {
     "line number": [
      155
     ]
    },
    "dataclasses.fields": {
     "line number": [
      148
     ]
    },
    "issubclass": {
     "line number": [
      62
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      29,
      55,
      58,
      58,
      62,
      73,
      73,
      86
     ]
    },
    "libcst.codegen.gather.Usage": {
     "line number": [
      86,
      86
     ]
    },
    "libcst.codegen.gather._calc_node_usage": {
     "line number": [
      152
     ]
    },
    "libcst.codegen.gather._get_bases": {
     "line number": [
      30
     ]
    },
    "libcst.codegen.gather._get_most_generic_base_for_node": {
     "line number": [
      76
     ]
    },
    "libcst.codegen.gather._get_nodes": {
     "line number": [
      56
     ]
    },
    "libcst.codegen.gather.inspect": {
     "line number": [
      62
     ]
    },
    "list": {
     "line number": [
      30,
      56,
      61
     ]
    },
    "reversed": {
     "line number": [
      62
     ]
    },
    "set": {
     "line number": [
      155
     ]
    },
    "sorted": {
     "line number": [
      29,
      55
     ]
    },
    "str": {
     "line number": [
      155,
      155
     ]
    },
    "typing.Dict": {
     "line number": [
      58,
      73,
      86
     ]
    },
    "typing.List": {
     "line number": [
      58
     ]
    },
    "typing.Mapping": {
     "line number": [
      155
     ]
    },
    "typing.Sequence": {
     "line number": [
      29,
      55
     ]
    },
    "typing.Set": {
     "line number": [
      155
     ]
    },
    "typing.Type": {
     "line number": [
      29,
      55,
      58,
      58,
      73,
      73,
      86
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst.codegen.gather.ABCSequence": {
  "data": {
   "shadows": "collections.abc.Sequence"
  },
  "type": "import"
 },
 "libcst.codegen.gather.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "libcst.codegen.gather.Generator": {
  "data": {
   "shadows": "typing.Generator"
  },
  "type": "import"
 },
 "libcst.codegen.gather.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.codegen.gather.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "libcst.codegen.gather.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst.codegen.gather.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "libcst.codegen.gather.Type": {
  "data": {
   "shadows": "typing.Type"
  },
  "type": "import"
 },
 "libcst.codegen.gather.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.codegen.gather.Usage": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      81,
      82,
      83
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      79
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codegen.gather._calc_node_usage": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": {
    "any": {
     "line number": [
      126,
      127
     ]
    },
    "dataclasses.replace": {
     "line number": [
      131,
      142
     ]
    },
    "isinstance": {
     "line number": [
      127
     ]
    },
    "libcst.codegen.gather._get_args": {
     "line number": [
      126,
      127,
      129,
      140
     ]
    },
    "libcst.codegen.gather._is_maybe": {
     "line number": [
      126
     ]
    },
    "libcst.codegen.gather._is_sequence": {
     "line number": [
      139
     ]
    },
    "libcst.codegen.gather._is_union": {
     "line number": [
      125
     ]
    },
    "object": {
     "line number": [
      124
     ]
    },
    "type": {
     "line number": [
      127
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gather._get_args": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      110
     ]
    },
    "object": {
     "line number": [
      106,
      106
     ]
    },
    "typing.List": {
     "line number": [
      106
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gather._get_bases": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "dir": {
     "line number": [
      22
     ]
    },
    "getattr": {
     "line number": [
      26
     ]
    },
    "libcst": {
     "line number": [
      22,
      26
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      15
     ]
    },
    "typing.Generator": {
     "line number": [
      15
     ]
    },
    "typing.Type": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gather._get_most_generic_base_for_node": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      66,
      66
     ]
    },
    "typing.Type": {
     "line number": [
      66,
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gather._get_nodes": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      50
     ]
    },
    "dir": {
     "line number": [
      40
     ]
    },
    "getattr": {
     "line number": [
      46
     ]
    },
    "issubclass": {
     "line number": [
      48
     ]
    },
    "libcst": {
     "line number": [
      40,
      46
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      48,
      34
     ]
    },
    "typing.Generator": {
     "line number": [
      34
     ]
    },
    "typing.Type": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gather._get_origin": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      101
     ]
    },
    "object": {
     "line number": [
      97,
      97
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gather._is_maybe": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "TypeError": {
     "line number": [
      93
     ]
    },
    "bool": {
     "line number": [
      89
     ]
    },
    "issubclass": {
     "line number": [
      92
     ]
    },
    "libcst.MaybeSentinel": {
     "line number": [
      92
     ]
    },
    "object": {
     "line number": [
      89
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gather._is_sequence": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      115
     ]
    },
    "collections.abc.Sequence": {
     "line number": [
      117
     ]
    },
    "libcst.codegen.gather._get_origin": {
     "line number": [
      116
     ]
    },
    "object": {
     "line number": [
      115
     ]
    },
    "typing.Sequence": {
     "line number": [
      117
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gather._is_union": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      120
     ]
    },
    "libcst.codegen.gather._get_origin": {
     "line number": [
      121
     ]
    },
    "object": {
     "line number": [
      120
     ]
    },
    "typing.Union": {
     "line number": [
      121
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gather.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.codegen.gather.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst.codegen.gather.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "libcst.codegen.gather.fields": {
  "data": {
   "shadows": "dataclasses.fields"
  },
  "type": "import"
 },
 "libcst.codegen.gather.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "libcst.codegen.gather.replace": {
  "data": {
   "shadows": "dataclasses.replace"
  },
  "type": "import"
 },
 "libcst.codegen.gen_matcher_classes": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      564
     ]
    },
    "dir": {
     "line number": [
      14
     ]
    },
    "issubclass": {
     "line number": [
      526
     ]
    },
    "libcst": {
     "line number": [
      14
     ]
    },
    "libcst.codegen.gather.all_libcst_nodes": {
     "line number": [
      521
     ]
    },
    "libcst.codegen.gather.typeclasses": {
     "line number": [
      507,
      525
     ]
    },
    "libcst.codegen.gen_matcher_classes._get_fields": {
     "line number": [
      531
     ]
    },
    "libcst.codegen.gen_matcher_classes.has_aliases": {
     "line number": [
      535
     ]
    },
    "libcst.codegen.gen_matcher_classes.node_fields": {
     "line number": [
      532,
      550
     ]
    },
    "list": {
     "line number": [
      531,
      561
     ]
    },
    "print": {
     "line number": [
      566
     ]
    },
    "repr": {
     "line number": [
      561
     ]
    },
    "set": {
     "line number": [
      14,
      264,
      448
     ]
    },
    "sorted": {
     "line number": [
      561
     ]
    },
    "str": {
     "line number": [
      14,
      264,
      448,
      449,
      524
     ]
    },
    "typing.List": {
     "line number": [
      449,
      524
     ]
    },
    "typing.Set": {
     "line number": [
      14,
      264,
      448
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst.codegen.gen_matcher_classes.AddLogicMatchersToUnions": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": {
    "libcst.CSTTransformer": {
     "line number": [
      159
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codegen.gen_matcher_classes.AddLogicMatchersToUnions.leave_Subscript": {
  "data": {
   "lineno": 160,
   "symbols_in_volume": {
    "libcst.Index": {
     "line number": [
      172,
      175
     ]
    },
    "libcst.Name": {
     "line number": [
      163
     ]
    },
    "libcst.Subscript": {
     "line number": [
      161,
      161,
      162
     ]
    },
    "libcst.SubscriptElement": {
     "line number": [
      171,
      174
     ]
    },
    "libcst.codegen.gen_matcher_classes._add_generic": {
     "line number": [
      172,
      175
     ]
    },
    "libcst.codegen.gen_matcher_classes._remove_types": {
     "line number": [
      167
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gen_matcher_classes.AddWildcardsToSequenceUnions": {
  "data": {
   "lineno": 182,
   "symbols_in_volume": {
    "libcst.CSTTransformer": {
     "line number": [
      182
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codegen.gen_matcher_classes.AddWildcardsToSequenceUnions.__init__": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      185
     ]
    },
    "libcst.Subscript": {
     "line number": [
      186
     ]
    },
    "set": {
     "line number": [
      185,
      186
     ]
    },
    "super": {
     "line number": [
      184
     ]
    },
    "typing.Set": {
     "line number": [
      185,
      186
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gen_matcher_classes.AddWildcardsToSequenceUnions.leave_Subscript": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": {
    "libcst.Index": {
     "line number": [
      221,
      224
     ]
    },
    "libcst.Subscript": {
     "line number": [
      211,
      211,
      212
     ]
    },
    "libcst.SubscriptElement": {
     "line number": [
      220,
      223
     ]
    },
    "libcst.codegen.gen_matcher_classes._add_generic": {
     "line number": [
      221,
      224
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gen_matcher_classes.AddWildcardsToSequenceUnions.visit_Subscript": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      199
     ]
    },
    "isinstance": {
     "line number": [
      204,
      206
     ]
    },
    "len": {
     "line number": [
      198
     ]
    },
    "libcst.Index": {
     "line number": [
      204
     ]
    },
    "libcst.Name": {
     "line number": [
      190,
      193,
      207
     ]
    },
    "libcst.Subscript": {
     "line number": [
      188,
      206
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gen_matcher_classes.Alias": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      267
     ]
    },
    "str": {
     "line number": [
      269,
      270
     ]
    },
    "type": {
     "line number": [
      270
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codegen.gen_matcher_classes.CleanseFullTypeNames": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "libcst.CSTTransformer": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codegen.gen_matcher_classes.CleanseFullTypeNames.leave_Attribute": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": {
    "libcst.Attribute": {
     "line number": [
      30,
      30,
      31
     ]
    },
    "libcst.Name": {
     "line number": [
      31
     ]
    },
    "typing.Union": {
     "line number": [
      31
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gen_matcher_classes.CleanseFullTypeNames.leave_Call": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      22
     ]
    },
    "libcst.BaseExpression": {
     "line number": [
      20
     ]
    },
    "libcst.Call": {
     "line number": [
      19,
      19
     ]
    },
    "libcst.Name": {
     "line number": [
      22,
      23,
      24
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gen_matcher_classes.CleanseFullTypeNames.leave_Name": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      36,
      36,
      37
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      45,
      37
     ]
    },
    "repr": {
     "line number": [
      45
     ]
    },
    "typing.Union": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gen_matcher_classes.CleanseFullTypeNames.leave_SubscriptElement": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      52,
      54
     ]
    },
    "libcst.Index": {
     "line number": [
      52
     ]
    },
    "libcst.MaybeSentinel.DEFAULT": {
     "line number": [
      59
     ]
    },
    "libcst.Name": {
     "line number": [
      54
     ]
    },
    "libcst.RemovalSentinel": {
     "line number": [
      50
     ]
    },
    "libcst.RemoveFromParent": {
     "line number": [
      57
     ]
    },
    "libcst.SubscriptElement": {
     "line number": [
      49,
      49,
      50
     ]
    },
    "typing.Union": {
     "line number": [
      50
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gen_matcher_classes.Field": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": {
    "aliases": {
     "line number": [
      277
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      273
     ]
    },
    "libcst.codegen.gen_matcher_classes.Alias": {
     "line number": [
      277
     ]
    },
    "str": {
     "line number": [
      275,
      276
     ]
    },
    "type": {
     "line number": [
      276
     ]
    },
    "typing.List": {
     "line number": [
      277
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codegen.gen_matcher_classes.Generator": {
  "data": {
   "shadows": "typing.Generator"
  },
  "type": "import"
 },
 "libcst.codegen.gen_matcher_classes.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.codegen.gen_matcher_classes.MatcherClassToLibCSTClass": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": {
    "libcst.CSTTransformer": {
     "line number": [
      91
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codegen.gen_matcher_classes.MatcherClassToLibCSTClass.leave_SimpleString": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": {
    "libcst.Attribute": {
     "line number": [
      97,
      94
     ]
    },
    "libcst.Name": {
     "line number": [
      97,
      97
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      93,
      93,
      94
     ]
    },
    "typing.Union": {
     "line number": [
      94
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gen_matcher_classes.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.codegen.gen_matcher_classes.RemoveTypesFromGeneric": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "libcst.CSTTransformer": {
     "line number": [
      62
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codegen.gen_matcher_classes.RemoveTypesFromGeneric.__init__": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "set": {
     "line number": [
      64
     ]
    },
    "str": {
     "line number": [
      63,
      64
     ]
    },
    "typing.Sequence": {
     "line number": [
      63
     ]
    },
    "typing.Set": {
     "line number": [
      64
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gen_matcher_classes.RemoveTypesFromGeneric.leave_SubscriptElement": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      70,
      72
     ]
    },
    "libcst.Index": {
     "line number": [
      70
     ]
    },
    "libcst.Name": {
     "line number": [
      72
     ]
    },
    "libcst.RemovalSentinel": {
     "line number": [
      68
     ]
    },
    "libcst.RemoveFromParent": {
     "line number": [
      75
     ]
    },
    "libcst.SubscriptElement": {
     "line number": [
      67,
      67,
      68
     ]
    },
    "typing.Union": {
     "line number": [
      68
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gen_matcher_classes.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst.codegen.gen_matcher_classes.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "libcst.codegen.gen_matcher_classes.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst.codegen.gen_matcher_classes.Type": {
  "data": {
   "shadows": "typing.Type"
  },
  "type": "import"
 },
 "libcst.codegen.gen_matcher_classes.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.codegen.gen_matcher_classes._add_generic": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": {
    "libcst.BaseExpression": {
     "line number": [
      155,
      155
     ]
    },
    "libcst.Index": {
     "line number": [
      156
     ]
    },
    "libcst.Name": {
     "line number": [
      156
     ]
    },
    "libcst.Subscript": {
     "line number": [
      156
     ]
    },
    "libcst.SubscriptElement": {
     "line number": [
      156
     ]
    },
    "str": {
     "line number": [
      155
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gen_matcher_classes._convert_match_nodes_to_cst_nodes": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": {
    "libcst.BaseExpression": {
     "line number": [
      102,
      108,
      103
     ]
    },
    "libcst.codegen.gen_matcher_classes.MatcherClassToLibCSTClass": {
     "line number": [
      108
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      108
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gen_matcher_classes._get_alias_name": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": {
    "any": {
     "line number": [
      299
     ]
    },
    "isinstance": {
     "line number": [
      294,
      296
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      293
     ]
    },
    "libcst.Name": {
     "line number": [
      294,
      297
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      294
     ]
    },
    "libcst.Subscript": {
     "line number": [
      296
     ]
    },
    "libcst.codegen.gen_matcher_classes._get_raw_name": {
     "line number": [
      295,
      298
     ]
    },
    "str": {
     "line number": [
      293
     ]
    },
    "typing.Optional": {
     "line number": [
      293
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gen_matcher_classes._get_clean_type_and_aliases": {
  "data": {
   "lineno": 389,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      414
     ]
    },
    "aliases": {
     "line number": [
      406,
      410,
      412,
      427
     ]
    },
    "isinstance": {
     "line number": [
      409,
      411
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      419,
      424
     ]
    },
    "libcst.Module": {
     "line number": [
      427
     ]
    },
    "libcst.Name": {
     "line number": [
      411
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      411
     ]
    },
    "libcst.Subscript": {
     "line number": [
      409
     ]
    },
    "libcst.codegen.gen_matcher_classes.AddLogicMatchersToUnions": {
     "line number": [
      419
     ]
    },
    "libcst.codegen.gen_matcher_classes.AddWildcardsToSequenceUnions": {
     "line number": [
      424
     ]
    },
    "libcst.codegen.gen_matcher_classes.Alias": {
     "line number": [
      406,
      391
     ]
    },
    "libcst.codegen.gen_matcher_classes.CleanseFullTypeNames": {
     "line number": [
      403
     ]
    },
    "libcst.codegen.gen_matcher_classes._get_clean_type_from_expression": {
     "line number": [
      412
     ]
    },
    "libcst.codegen.gen_matcher_classes._get_clean_type_from_subscript": {
     "line number": [
      410
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      419,
      423
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      404
     ]
    },
    "object": {
     "line number": [
      390
     ]
    },
    "repr": {
     "line number": [
      398
     ]
    },
    "str": {
     "line number": [
      391
     ]
    },
    "typing.List": {
     "line number": [
      406,
      391
     ]
    },
    "typing.Tuple": {
     "line number": [
      391
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gen_matcher_classes._get_clean_type_from_expression": {
  "data": {
   "lineno": 319,
   "symbols_in_volume": {
    "aliases": {
     "line number": [
      326
     ]
    },
    "libcst.BaseExpression": {
     "line number": [
      320,
      321
     ]
    },
    "libcst.codegen.gen_matcher_classes.Alias": {
     "line number": [
      320
     ]
    },
    "libcst.codegen.gen_matcher_classes._get_alias_name": {
     "line number": [
      322
     ]
    },
    "libcst.codegen.gen_matcher_classes._get_match_if_true": {
     "line number": [
      324
     ]
    },
    "libcst.codegen.gen_matcher_classes._get_match_metadata": {
     "line number": [
      324
     ]
    },
    "libcst.codegen.gen_matcher_classes._get_wrapped_union_type": {
     "line number": [
      323
     ]
    },
    "libcst.codegen.gen_matcher_classes._wrap_clean_type": {
     "line number": [
      326
     ]
    },
    "typing.List": {
     "line number": [
      320
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gen_matcher_classes._get_clean_type_from_subscript": {
  "data": {
   "lineno": 357,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      363,
      366,
      374
     ]
    },
    "aliases": {
     "line number": [
      370,
      372,
      383,
      386
     ]
    },
    "isinstance": {
     "line number": [
      365,
      369,
      371
     ]
    },
    "len": {
     "line number": [
      362
     ]
    },
    "libcst.BaseExpression": {
     "line number": [
      359
     ]
    },
    "libcst.Index": {
     "line number": [
      365
     ]
    },
    "libcst.Name": {
     "line number": [
      360,
      371,
      382
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      371
     ]
    },
    "libcst.Subscript": {
     "line number": [
      358,
      369
     ]
    },
    "libcst.codegen.gen_matcher_classes.Alias": {
     "line number": [
      358
     ]
    },
    "libcst.codegen.gen_matcher_classes._get_clean_type_from_expression": {
     "line number": [
      372,
      386
     ]
    },
    "libcst.codegen.gen_matcher_classes._get_clean_type_from_union": {
     "line number": [
      383
     ]
    },
    "libcst.codegen.gen_matcher_classes._get_do_not_care": {
     "line number": [
      378
     ]
    },
    "libcst.codegen.gen_matcher_classes._get_match_if_true": {
     "line number": [
      379
     ]
    },
    "libcst.codegen.gen_matcher_classes._get_wrapped_union_type": {
     "line number": [
      376
     ]
    },
    "typing.List": {
     "line number": [
      358
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gen_matcher_classes._get_clean_type_from_union": {
  "data": {
   "lineno": 343,
   "symbols_in_volume": {
    "aliases": {
     "line number": [
      349,
      354
     ]
    },
    "libcst.BaseExpression": {
     "line number": [
      345
     ]
    },
    "libcst.Subscript": {
     "line number": [
      344
     ]
    },
    "libcst.codegen.gen_matcher_classes.Alias": {
     "line number": [
      344
     ]
    },
    "libcst.codegen.gen_matcher_classes._get_alias_name": {
     "line number": [
      346
     ]
    },
    "libcst.codegen.gen_matcher_classes._get_match_if_true": {
     "line number": [
      351
     ]
    },
    "libcst.codegen.gen_matcher_classes._get_match_metadata": {
     "line number": [
      350
     ]
    },
    "libcst.codegen.gen_matcher_classes._maybe_fix_sequence_in_union": {
     "line number": [
      349
     ]
    },
    "libcst.codegen.gen_matcher_classes._wrap_clean_type": {
     "line number": [
      354
     ]
    },
    "typing.List": {
     "line number": [
      344
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gen_matcher_classes._get_do_not_care": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": {
    "libcst.Index": {
     "line number": [
      236
     ]
    },
    "libcst.Name": {
     "line number": [
      236
     ]
    },
    "libcst.SubscriptElement": {
     "line number": [
      236,
      231
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gen_matcher_classes._get_fields": {
  "data": {
   "lineno": 430,
   "symbols_in_volume": {
    "aliases": {
     "line number": [
      439,
      443,
      445
     ]
    },
    "dataclasses.fields": {
     "line number": [
      435
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      430
     ]
    },
    "libcst.codegen.gen_matcher_classes.Field": {
     "line number": [
      440,
      430
     ]
    },
    "libcst.codegen.gen_matcher_classes._get_clean_type_and_aliases": {
     "line number": [
      439
     ]
    },
    "typing.Generator": {
     "line number": [
      430
     ]
    },
    "typing.Type": {
     "line number": [
      430
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gen_matcher_classes._get_match_if_true": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": {
    "libcst.BaseExpression": {
     "line number": [
      111
     ]
    },
    "libcst.Element": {
     "line number": [
      129
     ]
    },
    "libcst.Index": {
     "line number": [
      116,
      121,
      126,
      144
     ]
    },
    "libcst.List": {
     "line number": [
      127
     ]
    },
    "libcst.Name": {
     "line number": [
      118,
      123,
      144
     ]
    },
    "libcst.Subscript": {
     "line number": [
      117,
      122
     ]
    },
    "libcst.SubscriptElement": {
     "line number": [
      115,
      120,
      125,
      144,
      111
     ]
    },
    "libcst.codegen.gen_matcher_classes._convert_match_nodes_to_cst_nodes": {
     "line number": [
      136
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gen_matcher_classes._get_match_metadata": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": {
    "libcst.Index": {
     "line number": [
      244
     ]
    },
    "libcst.Name": {
     "line number": [
      244
     ]
    },
    "libcst.SubscriptElement": {
     "line number": [
      244,
      239
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gen_matcher_classes._get_raw_name": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      281,
      283,
      285,
      287
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      280
     ]
    },
    "libcst.Index": {
     "line number": [
      287
     ]
    },
    "libcst.Name": {
     "line number": [
      281
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      283
     ]
    },
    "libcst.SubscriptElement": {
     "line number": [
      285
     ]
    },
    "str": {
     "line number": [
      280
     ]
    },
    "typing.Optional": {
     "line number": [
      280
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gen_matcher_classes._get_wrapped_union_type": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": {
    "libcst.BaseExpression": {
     "line number": [
      248
     ]
    },
    "libcst.Index": {
     "line number": [
      259
     ]
    },
    "libcst.Name": {
     "line number": [
      259
     ]
    },
    "libcst.Subscript": {
     "line number": [
      258,
      251
     ]
    },
    "libcst.SubscriptElement": {
     "line number": [
      249,
      250,
      259
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gen_matcher_classes._maybe_fix_sequence_in_union": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": {
    "aliases": {
     "line number": [
      337
     ]
    },
    "isinstance": {
     "line number": [
      333,
      335
     ]
    },
    "libcst.Index": {
     "line number": [
      333
     ]
    },
    "libcst.Subscript": {
     "line number": [
      335
     ]
    },
    "libcst.SubscriptElement": {
     "line number": [
      330,
      338,
      331
     ]
    },
    "libcst.codegen.gen_matcher_classes.Alias": {
     "line number": [
      330
     ]
    },
    "libcst.codegen.gen_matcher_classes._get_clean_type_from_subscript": {
     "line number": [
      337
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      336
     ]
    },
    "typing.List": {
     "line number": [
      330
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gen_matcher_classes._remove_types": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "libcst.BaseExpression": {
     "line number": [
      80,
      87,
      81
     ]
    },
    "libcst.codegen.gen_matcher_classes.RemoveTypesFromGeneric": {
     "line number": [
      87
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      86
     ]
    },
    "str": {
     "line number": [
      80
     ]
    },
    "typing.Sequence": {
     "line number": [
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gen_matcher_classes._wrap_clean_type": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": {
    "aliases.append": {
     "line number": [
      311
     ]
    },
    "libcst.BaseExpression": {
     "line number": [
      308
     ]
    },
    "libcst.Module": {
     "line number": [
      311
     ]
    },
    "libcst.Name": {
     "line number": [
      312
     ]
    },
    "libcst.Subscript": {
     "line number": [
      307
     ]
    },
    "libcst.codegen.gen_matcher_classes.Alias": {
     "line number": [
      307,
      311
     ]
    },
    "libcst.codegen.gen_matcher_classes._get_do_not_care": {
     "line number": [
      312,
      316
     ]
    },
    "libcst.codegen.gen_matcher_classes._get_wrapped_union_type": {
     "line number": [
      312
     ]
    },
    "str": {
     "line number": [
      307
     ]
    },
    "typing.List": {
     "line number": [
      307
     ]
    },
    "typing.Optional": {
     "line number": [
      307
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.gen_matcher_classes.all_libcst_nodes": {
  "data": {
   "shadows": "libcst.codegen.gather.all_libcst_nodes"
  },
  "type": "import"
 },
 "libcst.codegen.gen_matcher_classes.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.codegen.gen_matcher_classes.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst.codegen.gen_matcher_classes.ensure_type": {
  "data": {
   "shadows": "libcst.ensure_type"
  },
  "type": "import"
 },
 "libcst.codegen.gen_matcher_classes.fields": {
  "data": {
   "shadows": "dataclasses.fields"
  },
  "type": "import"
 },
 "libcst.codegen.gen_matcher_classes.fields_printed": {
  "data": {
   "lineno": 551
  },
  "type": "constant"
 },
 "libcst.codegen.gen_matcher_classes.has_aliases": {
  "data": {
   "lineno": 538
  },
  "type": "constant"
 },
 "libcst.codegen.gen_matcher_classes.node_fields": {
  "data": {
   "lineno": 531
  },
  "type": "constant"
 },
 "libcst.codegen.gen_matcher_classes.parse_expression": {
  "data": {
   "shadows": "libcst.parse_expression"
  },
  "type": "import"
 },
 "libcst.codegen.gen_matcher_classes.typeclasses": {
  "data": {
   "shadows": "libcst.codegen.gather.typeclasses"
  },
  "type": "import"
 },
 "libcst.codegen.gen_type_mapping": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      61
     ]
    },
    "libcst.codegen.gather.imports.items": {
     "line number": [
      31
     ]
    },
    "libcst.codegen.gather.nodebases": {
     "line number": [
      48
     ]
    },
    "libcst.codegen.gather.nodebases.__name__": {
     "line number": [
      46
     ]
    },
    "libcst.codegen.gather.nodebases.keys": {
     "line number": [
      42
     ]
    },
    "libcst.codegen.gather.nodeuses": {
     "line number": [
      47,
      48
     ]
    },
    "libcst.codegen.gen_type_mapping.base_uses": {
     "line number": [
      49,
      54,
      55
     ]
    },
    "libcst.codegen.gen_type_mapping.name": {
     "line number": [
      44,
      58
     ]
    },
    "libcst.codegen.gen_type_mapping.node_uses": {
     "line number": [
      49,
      52,
      53
     ]
    },
    "list": {
     "line number": [
      33
     ]
    },
    "print": {
     "line number": [
      63
     ]
    },
    "sorted": {
     "line number": [
      33,
      42
     ]
    },
    "str": {
     "line number": [
      11,
      46
     ]
    },
    "typing.List": {
     "line number": [
      11,
      46
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst.codegen.gen_type_mapping.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.codegen.gen_type_mapping.base_uses": {
  "data": {
   "lineno": 48
  },
  "type": "constant"
 },
 "libcst.codegen.gen_type_mapping.imports": {
  "data": {
   "shadows": "libcst.codegen.gather.imports"
  },
  "type": "import"
 },
 "libcst.codegen.gen_type_mapping.name": {
  "data": {
   "lineno": 43
  },
  "type": "constant"
 },
 "libcst.codegen.gen_type_mapping.node_uses": {
  "data": {
   "lineno": 47
  },
  "type": "constant"
 },
 "libcst.codegen.gen_type_mapping.nodebases": {
  "data": {
   "shadows": "libcst.codegen.gather.nodebases"
  },
  "type": "import"
 },
 "libcst.codegen.gen_type_mapping.nodeuses": {
  "data": {
   "shadows": "libcst.codegen.gather.nodeuses"
  },
  "type": "import"
 },
 "libcst.codegen.gen_visitor_functions": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      115
     ]
    },
    "dataclasses.fields": {
     "line number": [
      54
     ]
    },
    "libcst.codegen.gather.imports.items": {
     "line number": [
      33
     ]
    },
    "libcst.codegen.gather.nodebases": {
     "line number": [
      99
     ]
    },
    "libcst.codegen.gather.nodebases.__name__": {
     "line number": [
      97
     ]
    },
    "libcst.codegen.gather.nodebases.keys": {
     "line number": [
      43,
      74,
      91
     ]
    },
    "libcst.codegen.gather.nodeuses": {
     "line number": [
      98,
      99
     ]
    },
    "libcst.codegen.gen_visitor_functions.base_uses": {
     "line number": [
      100,
      105,
      106
     ]
    },
    "libcst.codegen.gen_visitor_functions.name": {
     "line number": [
      45,
      51,
      51,
      60,
      60,
      66,
      66,
      76,
      82,
      82,
      93,
      111,
      111,
      111
     ]
    },
    "libcst.codegen.gen_visitor_functions.node_uses": {
     "line number": [
      100,
      103,
      104
     ]
    },
    "list": {
     "line number": [
      35
     ]
    },
    "print": {
     "line number": [
      117
     ]
    },
    "sorted": {
     "line number": [
      35,
      43,
      74,
      91
     ]
    },
    "str": {
     "line number": [
      12,
      97
     ]
    },
    "typing.List": {
     "line number": [
      12,
      97
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst.codegen.gen_visitor_functions.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.codegen.gen_visitor_functions.base_uses": {
  "data": {
   "lineno": 99
  },
  "type": "constant"
 },
 "libcst.codegen.gen_visitor_functions.fields": {
  "data": {
   "shadows": "dataclasses.fields"
  },
  "type": "import"
 },
 "libcst.codegen.gen_visitor_functions.imports": {
  "data": {
   "shadows": "libcst.codegen.gather.imports"
  },
  "type": "import"
 },
 "libcst.codegen.gen_visitor_functions.name": {
  "data": {
   "lineno": 92
  },
  "type": "constant"
 },
 "libcst.codegen.gen_visitor_functions.node_uses": {
  "data": {
   "lineno": 98
  },
  "type": "constant"
 },
 "libcst.codegen.gen_visitor_functions.nodebases": {
  "data": {
   "shadows": "libcst.codegen.gather.nodebases"
  },
  "type": "import"
 },
 "libcst.codegen.gen_visitor_functions.nodeuses": {
  "data": {
   "shadows": "libcst.codegen.gather.nodeuses"
  },
  "type": "import"
 },
 "libcst.codegen.generate": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      169
     ]
    },
    "libcst.codegen.generate.main": {
     "line number": [
      170
     ]
    },
    "libcst.codegen.generate.sys": {
     "line number": [
      170,
      170
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst.codegen.generate.DoubleQuoteForwardRefsTransformer": {
  "data": {
   "shadows": "libcst.codegen.transforms.DoubleQuoteForwardRefsTransformer"
  },
  "type": "import"
 },
 "libcst.codegen.generate.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.codegen.generate.SimplifyUnionsTransformer": {
  "data": {
   "shadows": "libcst.codegen.transforms.SimplifyUnionsTransformer"
  },
  "type": "import"
 },
 "libcst.codegen.generate.argparse": {
  "data": {
   "shadows": "argparse"
  },
  "type": "import"
 },
 "libcst.codegen.generate.clean_generated_code": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      42,
      43
     ]
    },
    "libcst.codegen.transforms.DoubleQuoteForwardRefsTransformer": {
     "line number": [
      43
     ]
    },
    "libcst.codegen.transforms.SimplifyUnionsTransformer": {
     "line number": [
      42
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      42,
      43
     ]
    },
    "libcst.parse_module": {
     "line number": [
      41
     ]
    },
    "str": {
     "line number": [
      35,
      35
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.generate.codegen_matchers": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": {
    "libcst.codegen.gen_matcher_classes.generated_code": {
     "line number": [
      111
     ]
    },
    "libcst.codegen.generate.clean_generated_code": {
     "line number": [
      111
     ]
    },
    "libcst.codegen.generate.format_file": {
     "line number": [
      117
     ]
    },
    "libcst.codegen.generate.os": {
     "line number": [
      107,
      108,
      108,
      108,
      110
     ]
    },
    "open": {
     "line number": [
      112
     ]
    },
    "print": {
     "line number": [
      120
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.generate.codegen_return_types": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": {
    "libcst.codegen.gen_type_mapping.generated_code": {
     "line number": [
      133
     ]
    },
    "libcst.codegen.generate.clean_generated_code": {
     "line number": [
      133
     ]
    },
    "libcst.codegen.generate.format_file": {
     "line number": [
      139
     ]
    },
    "libcst.codegen.generate.os": {
     "line number": [
      129,
      130,
      130,
      130,
      132
     ]
    },
    "open": {
     "line number": [
      134
     ]
    },
    "print": {
     "line number": [
      142
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.generate.codegen_visitors": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      86
     ]
    },
    "libcst.codegen.gen_visitor_functions.generated_code": {
     "line number": [
      64
     ]
    },
    "libcst.codegen.generate.clean_generated_code": {
     "line number": [
      64
     ]
    },
    "libcst.codegen.generate.format_file": {
     "line number": [
      79
     ]
    },
    "libcst.codegen.generate.os": {
     "line number": [
      53,
      54,
      54,
      54,
      56,
      71,
      82,
      94,
      95
     ]
    },
    "libcst.codegen.generate.shutil": {
     "line number": [
      57
     ]
    },
    "libcst.codegen.generate.subprocess": {
     "line number": [
      72
     ]
    },
    "libcst.codegen.generate.sys": {
     "line number": [
      92
     ]
    },
    "open": {
     "line number": [
      65,
      71
     ]
    },
    "print": {
     "line number": [
      85,
      89
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.generate.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.codegen.generate.ensure_type": {
  "data": {
   "shadows": "libcst.ensure_type"
  },
  "type": "import"
 },
 "libcst.codegen.generate.format_file": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "libcst.codegen.generate.os": {
     "line number": [
      28
     ]
    },
    "libcst.codegen.generate.subprocess": {
     "line number": [
      29,
      32
     ]
    },
    "open": {
     "line number": [
      28
     ]
    },
    "str": {
     "line number": [
      27
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.generate.main": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": {
    "int": {
     "line number": [
      145
     ]
    },
    "libcst.codegen.generate.argparse": {
     "line number": [
      147
     ]
    },
    "libcst.codegen.generate.codegen_matchers": {
     "line number": [
      159
     ]
    },
    "libcst.codegen.generate.codegen_return_types": {
     "line number": [
      162
     ]
    },
    "libcst.codegen.generate.codegen_visitors": {
     "line number": [
      156
     ]
    },
    "print": {
     "line number": [
      165
     ]
    },
    "str": {
     "line number": [
      145,
      152
     ]
    },
    "typing.List": {
     "line number": [
      145
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.generate.matcher_codegen": {
  "data": {
   "shadows": "libcst.codegen.gen_matcher_classes"
  },
  "type": "import"
 },
 "libcst.codegen.generate.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "libcst.codegen.generate.os.path": {
  "data": {
   "shadows": "os.path"
  },
  "type": "import"
 },
 "libcst.codegen.generate.parse_module": {
  "data": {
   "shadows": "libcst.parse_module"
  },
  "type": "import"
 },
 "libcst.codegen.generate.shutil": {
  "data": {
   "shadows": "shutil"
  },
  "type": "import"
 },
 "libcst.codegen.generate.subprocess": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "libcst.codegen.generate.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "libcst.codegen.generate.type_codegen": {
  "data": {
   "shadows": "libcst.codegen.gen_type_mapping"
  },
  "type": "import"
 },
 "libcst.codegen.generate.visitor_codegen": {
  "data": {
   "shadows": "libcst.codegen.gen_visitor_functions"
  },
  "type": "import"
 },
 "libcst.codegen.tests": {
  "data": {},
  "type": "module"
 },
 "libcst.codegen.tests.test_codegen_clean": {
  "data": {},
  "type": "module"
 },
 "libcst.codegen.tests.test_codegen_clean.TestCodegenClean": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codegen.tests.test_codegen_clean.TestCodegenClean.test_codegen_clean_matcher_classes": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      65
     ]
    },
    "libcst.codegen.gen_matcher_classes.generated_code": {
     "line number": [
      57
     ]
    },
    "libcst.codegen.generate.clean_generated_code": {
     "line number": [
      57
     ]
    },
    "libcst.codegen.generate.format_file": {
     "line number": [
      64
     ]
    },
    "libcst.codegen.tests.test_codegen_clean.os": {
     "line number": [
      58,
      59,
      59,
      71,
      73,
      74,
      74
     ]
    },
    "open": {
     "line number": [
      61,
      69,
      72
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.tests.test_codegen_clean.TestCodegenClean.test_codegen_clean_return_types": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      99
     ]
    },
    "libcst.codegen.gen_type_mapping.generated_code": {
     "line number": [
      91
     ]
    },
    "libcst.codegen.generate.clean_generated_code": {
     "line number": [
      91
     ]
    },
    "libcst.codegen.generate.format_file": {
     "line number": [
      98
     ]
    },
    "libcst.codegen.tests.test_codegen_clean.os": {
     "line number": [
      92,
      93,
      93,
      105,
      107,
      108,
      108
     ]
    },
    "open": {
     "line number": [
      95,
      103,
      106
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.tests.test_codegen_clean.TestCodegenClean.test_codegen_clean_visitor_functions": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      31
     ]
    },
    "libcst.codegen.gen_visitor_functions.generated_code": {
     "line number": [
      23
     ]
    },
    "libcst.codegen.generate.clean_generated_code": {
     "line number": [
      23
     ]
    },
    "libcst.codegen.generate.format_file": {
     "line number": [
      30
     ]
    },
    "libcst.codegen.tests.test_codegen_clean.os": {
     "line number": [
      24,
      25,
      25,
      37,
      39,
      40,
      40
     ]
    },
    "open": {
     "line number": [
      27,
      35,
      38
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.tests.test_codegen_clean.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.codegen.tests.test_codegen_clean.clean_generated_code": {
  "data": {
   "shadows": "libcst.codegen.generate.clean_generated_code"
  },
  "type": "import"
 },
 "libcst.codegen.tests.test_codegen_clean.format_file": {
  "data": {
   "shadows": "libcst.codegen.generate.format_file"
  },
  "type": "import"
 },
 "libcst.codegen.tests.test_codegen_clean.matcher_codegen": {
  "data": {
   "shadows": "libcst.codegen.gen_matcher_classes"
  },
  "type": "import"
 },
 "libcst.codegen.tests.test_codegen_clean.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "libcst.codegen.tests.test_codegen_clean.os.path": {
  "data": {
   "shadows": "os.path"
  },
  "type": "import"
 },
 "libcst.codegen.tests.test_codegen_clean.type_codegen": {
  "data": {
   "shadows": "libcst.codegen.gen_type_mapping"
  },
  "type": "import"
 },
 "libcst.codegen.tests.test_codegen_clean.visitor_codegen": {
  "data": {
   "shadows": "libcst.codegen.gen_visitor_functions"
  },
  "type": "import"
 },
 "libcst.codegen.transforms": {
  "data": {},
  "type": "module"
 },
 "libcst.codegen.transforms.DoubleQuoteForwardRefsTransformer": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codegen.transforms.DoubleQuoteForwardRefsTransformer.leave_SimpleString": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "SyntaxError": {
     "line number": [
      43
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      35,
      35,
      36
     ]
    },
    "libcst.codegen.transforms.ast": {
     "line number": [
      41
     ]
    },
    "libcst.matchers.Annotation": {
     "line number": [
      33
     ]
    },
    "libcst.matchers.call_if_inside": {
     "line number": [
      33
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.transforms.SimplifyUnionsTransformer": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codegen.transforms.SimplifyUnionsTransformer._leave_union": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "len": {
     "line number": [
      26
     ]
    },
    "libcst.BaseExpression": {
     "line number": [
      25
     ]
    },
    "libcst.Index": {
     "line number": [
      28
     ]
    },
    "libcst.Subscript": {
     "line number": [
      24,
      24
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      28
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      22
     ]
    },
    "libcst.matchers.Subscript": {
     "line number": [
      22
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codegen.transforms.ast": {
  "data": {
   "shadows": "ast"
  },
  "type": "import"
 },
 "libcst.codegen.transforms.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.codegen.transforms.m": {
  "data": {
   "shadows": "libcst.matchers"
  },
  "type": "import"
 },
 "libcst.codemod": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.Codemod": {
  "data": {
   "shadows": "libcst.codemod._codemod.Codemod"
  },
  "type": "import"
 },
 "libcst.codemod.CodemodCommand": {
  "data": {
   "shadows": "libcst.codemod._command.CodemodCommand"
  },
  "type": "import"
 },
 "libcst.codemod.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod._context.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod.CodemodTest": {
  "data": {
   "shadows": "libcst.codemod._testing.CodemodTest"
  },
  "type": "import"
 },
 "libcst.codemod.ContextAwareTransformer": {
  "data": {
   "shadows": "libcst.codemod._visitor.ContextAwareTransformer"
  },
  "type": "import"
 },
 "libcst.codemod.ContextAwareVisitor": {
  "data": {
   "shadows": "libcst.codemod._visitor.ContextAwareVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.MagicArgsCodemodCommand": {
  "data": {
   "shadows": "libcst.codemod._command.MagicArgsCodemodCommand"
  },
  "type": "import"
 },
 "libcst.codemod.ParallelTransformResult": {
  "data": {
   "shadows": "libcst.codemod._cli.ParallelTransformResult"
  },
  "type": "import"
 },
 "libcst.codemod.SkipFile": {
  "data": {
   "shadows": "libcst.codemod._runner.SkipFile"
  },
  "type": "import"
 },
 "libcst.codemod.SkipReason": {
  "data": {
   "shadows": "libcst.codemod._runner.SkipReason"
  },
  "type": "import"
 },
 "libcst.codemod.TransformExit": {
  "data": {
   "shadows": "libcst.codemod._runner.TransformExit"
  },
  "type": "import"
 },
 "libcst.codemod.TransformFailure": {
  "data": {
   "shadows": "libcst.codemod._runner.TransformFailure"
  },
  "type": "import"
 },
 "libcst.codemod.TransformResult": {
  "data": {
   "shadows": "libcst.codemod._runner.TransformResult"
  },
  "type": "import"
 },
 "libcst.codemod.TransformSkip": {
  "data": {
   "shadows": "libcst.codemod._runner.TransformSkip"
  },
  "type": "import"
 },
 "libcst.codemod.TransformSuccess": {
  "data": {
   "shadows": "libcst.codemod._runner.TransformSuccess"
  },
  "type": "import"
 },
 "libcst.codemod.VisitorBasedCodemodCommand": {
  "data": {
   "shadows": "libcst.codemod._command.VisitorBasedCodemodCommand"
  },
  "type": "import"
 },
 "libcst.codemod.__all__": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "libcst.codemod._cli": {
  "data": {
   "symbols_in_volume": {
    "str": {
     "line number": [
      38
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst.codemod._cli.AnyStr": {
  "data": {
   "shadows": "typing.AnyStr"
  },
  "type": "import"
 },
 "libcst.codemod._cli.Codemod": {
  "data": {
   "shadows": "libcst.codemod._codemod.Codemod"
  },
  "type": "import"
 },
 "libcst.codemod._cli.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "libcst.codemod._cli.Empty": {
  "data": {
   "shadows": "queue.Empty"
  },
  "type": "import"
 },
 "libcst.codemod._cli.FullRepoManager": {
  "data": {
   "shadows": "libcst.metadata.FullRepoManager"
  },
  "type": "import"
 },
 "libcst.codemod._cli.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.codemod._cli.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.codemod._cli.ParallelExecResult": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      221
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      216
     ]
    },
    "libcst.codemod._runner.TransformResult": {
     "line number": [
      223
     ]
    },
    "str": {
     "line number": [
      219
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod._cli.ParallelTransformResult": {
  "data": {
   "lineno": 513,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      513
     ]
    },
    "int": {
     "line number": [
      525,
      527,
      529,
      532
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod._cli.PartialParserConfig": {
  "data": {
   "shadows": "libcst.PartialParserConfig"
  },
  "type": "import"
 },
 "libcst.codemod._cli.Path": {
  "data": {
   "shadows": "pathlib.Path"
  },
  "type": "import"
 },
 "libcst.codemod._cli.Process": {
  "data": {
   "shadows": "multiprocessing.Process"
  },
  "type": "import"
 },
 "libcst.codemod._cli.Progress": {
  "data": {
   "lineno": 403,
   "symbols_in_volume": {
    "str": {
     "line number": [
      404
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod._cli.Progress.__init__": {
  "data": {
   "lineno": 406,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      406
     ]
    },
    "float": {
     "line number": [
      413
     ]
    },
    "int": {
     "line number": [
      406,
      410
     ]
    },
    "len": {
     "line number": [
      410
     ]
    },
    "libcst.codemod._cli.time": {
     "line number": [
      413
     ]
    },
    "str": {
     "line number": [
      410
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._cli.Progress._human_seconds": {
  "data": {
   "lineno": 428,
   "symbols_in_volume": {
    "divmod": {
     "line number": [
      434,
      435
     ]
    },
    "float": {
     "line number": [
      428
     ]
    },
    "int": {
     "line number": [
      428
     ]
    },
    "str": {
     "line number": [
      428
     ]
    },
    "typing.Union": {
     "line number": [
      428
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._cli.Progress.clear": {
  "data": {
   "lineno": 459,
   "symbols_in_volume": {
    "libcst.codemod._cli.sys": {
     "line number": [
      462
     ]
    },
    "print": {
     "line number": [
      462
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._cli.Progress.estimate_completion": {
  "data": {
   "lineno": 443,
   "symbols_in_volume": {
    "float": {
     "line number": [
      444
     ]
    },
    "int": {
     "line number": [
      444,
      444
     ]
    },
    "str": {
     "line number": [
      445
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._cli.Progress.print": {
  "data": {
   "lineno": 415,
   "symbols_in_volume": {
    "float": {
     "line number": [
      419,
      419
     ]
    },
    "int": {
     "line number": [
      415
     ]
    },
    "libcst.codemod._cli.sys": {
     "line number": [
      425
     ]
    },
    "libcst.codemod._cli.time": {
     "line number": [
      420
     ]
    },
    "max": {
     "line number": [
      420
     ]
    },
    "print": {
     "line number": [
      422
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._cli.Queue": {
  "data": {
   "shadows": "multiprocessing.Queue"
  },
  "type": "import"
 },
 "libcst.codemod._cli.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst.codemod._cli.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "libcst.codemod._cli.SkipFile": {
  "data": {
   "shadows": "libcst.codemod._runner.SkipFile"
  },
  "type": "import"
 },
 "libcst.codemod._cli.SkipReason": {
  "data": {
   "shadows": "libcst.codemod._runner.SkipReason"
  },
  "type": "import"
 },
 "libcst.codemod._cli.TransformExit": {
  "data": {
   "shadows": "libcst.codemod._runner.TransformExit"
  },
  "type": "import"
 },
 "libcst.codemod._cli.TransformFailure": {
  "data": {
   "shadows": "libcst.codemod._runner.TransformFailure"
  },
  "type": "import"
 },
 "libcst.codemod._cli.TransformResult": {
  "data": {
   "shadows": "libcst.codemod._runner.TransformResult"
  },
  "type": "import"
 },
 "libcst.codemod._cli.TransformSkip": {
  "data": {
   "shadows": "libcst.codemod._runner.TransformSkip"
  },
  "type": "import"
 },
 "libcst.codemod._cli.TransformSuccess": {
  "data": {
   "shadows": "libcst.codemod._runner.TransformSuccess"
  },
  "type": "import"
 },
 "libcst.codemod._cli.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.codemod._cli._calculate_module": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": {
    "len": {
     "line number": [
      203,
      210
     ]
    },
    "str": {
     "line number": [
      187,
      187,
      187
     ]
    },
    "typing.Optional": {
     "line number": [
      187,
      187
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._cli._parallel_exec_process_stub": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      314,
      342,
      389
     ]
    },
    "KeyboardInterrupt": {
     "line number": [
      294,
      333,
      383
     ]
    },
    "bool": {
     "line number": [
      232,
      234
     ]
    },
    "dataclasses.replace": {
     "line number": [
      275
     ]
    },
    "int": {
     "line number": [
      231
     ]
    },
    "libcst.PartialParserConfig": {
     "line number": [
      286,
      288
     ]
    },
    "libcst.codemod._cli.ParallelExecResult": {
     "line number": [
      242,
      260,
      296,
      303,
      316,
      335,
      344,
      375,
      385,
      391
     ]
    },
    "libcst.codemod._cli._calculate_module": {
     "line number": [
      278
     ]
    },
    "libcst.codemod._cli.diff_code": {
     "line number": [
      359
     ]
    },
    "libcst.codemod._cli.invoke_formatter": {
     "line number": [
      332
     ]
    },
    "libcst.codemod._cli.re": {
     "line number": [
      240
     ]
    },
    "libcst.codemod._cli.traceback": {
     "line number": [
      321,
      349,
      396
     ]
    },
    "libcst.codemod._codemod.Codemod": {
     "line number": [
      228
     ]
    },
    "libcst.codemod._runner.SkipFile": {
     "line number": [
      301
     ]
    },
    "libcst.codemod._runner.SkipReason.BLACKLISTED": {
     "line number": [
      246
     ]
    },
    "libcst.codemod._runner.SkipReason.GENERATED": {
     "line number": [
      264
     ]
    },
    "libcst.codemod._runner.SkipReason.OTHER": {
     "line number": [
      307
     ]
    },
    "libcst.codemod._runner.TransformExit": {
     "line number": [
      297,
      338,
      386
     ]
    },
    "libcst.codemod._runner.TransformFailure": {
     "line number": [
      319,
      347,
      394
     ]
    },
    "libcst.codemod._runner.TransformSkip": {
     "line number": [
      245,
      263,
      306
     ]
    },
    "libcst.codemod._runner.TransformSuccess": {
     "line number": [
      378
     ]
    },
    "libcst.parse_module": {
     "line number": [
      283
     ]
    },
    "open": {
     "line number": [
      254,
      368
     ]
    },
    "str": {
     "line number": [
      229,
      230,
      233,
      235,
      236,
      237,
      308
     ]
    },
    "typing.Optional": {
     "line number": [
      230,
      231,
      237
     ]
    },
    "typing.Sequence": {
     "line number": [
      235,
      236
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._cli._print_parallel_result": {
  "data": {
   "lineno": 465,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      469,
      470,
      471,
      472
     ]
    },
    "isinstance": {
     "line number": [
      477,
      490,
      496
     ]
    },
    "libcst.codemod._cli.ParallelExecResult": {
     "line number": [
      466
     ]
    },
    "libcst.codemod._cli.Progress": {
     "line number": [
      467
     ]
    },
    "libcst.codemod._cli.print_execution_result": {
     "line number": [
      485,
      494,
      501
     ]
    },
    "libcst.codemod._cli.sys": {
     "line number": [
      484,
      488,
      493,
      495,
      500,
      505
     ]
    },
    "libcst.codemod._runner.SkipReason.BLACKLISTED": {
     "line number": [
      480
     ]
    },
    "libcst.codemod._runner.SkipReason.GENERATED": {
     "line number": [
      481
     ]
    },
    "libcst.codemod._runner.TransformFailure": {
     "line number": [
      490
     ]
    },
    "libcst.codemod._runner.TransformSkip": {
     "line number": [
      477
     ]
    },
    "libcst.codemod._runner.TransformSuccess": {
     "line number": [
      496
     ]
    },
    "print": {
     "line number": [
      484,
      486,
      493,
      495,
      500,
      502,
      510
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._cli.cast": {
  "data": {
   "shadows": "typing.cast"
  },
  "type": "import"
 },
 "libcst.codemod._cli.cpu_count": {
  "data": {
   "shadows": "multiprocessing.cpu_count"
  },
  "type": "import"
 },
 "libcst.codemod._cli.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst.codemod._cli.diff_code": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": {
    "int": {
     "line number": [
      100
     ]
    },
    "libcst.codemod._cli.difflib": {
     "line number": [
      116,
      125
     ]
    },
    "str": {
     "line number": [
      100,
      100,
      100,
      101
     ]
    },
    "typing.Optional": {
     "line number": [
      100
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._cli.difflib": {
  "data": {
   "shadows": "difflib"
  },
  "type": "import"
 },
 "libcst.codemod._cli.exec_transform_with_prettyprint": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      172
     ]
    },
    "bool": {
     "line number": [
      135,
      137
     ]
    },
    "isinstance": {
     "line number": [
      165
     ]
    },
    "libcst.codemod._cli.invoke_formatter": {
     "line number": [
      171
     ]
    },
    "libcst.codemod._cli.print_execution_result": {
     "line number": [
      183
     ]
    },
    "libcst.codemod._cli.sys": {
     "line number": [
      160
     ]
    },
    "libcst.codemod._cli.traceback": {
     "line number": [
      178
     ]
    },
    "libcst.codemod._codemod.Codemod": {
     "line number": [
      132
     ]
    },
    "libcst.codemod._runner.TransformExit": {
     "line number": [
      166
     ]
    },
    "libcst.codemod._runner.TransformFailure": {
     "line number": [
      166,
      176
     ]
    },
    "libcst.codemod._runner.TransformSkip": {
     "line number": [
      166
     ]
    },
    "libcst.codemod._runner.transform_module": {
     "line number": [
      164
     ]
    },
    "print": {
     "line number": [
      157
     ]
    },
    "str": {
     "line number": [
      133,
      136,
      138,
      139,
      165,
      140
     ]
    },
    "typing.Optional": {
     "line number": [
      139,
      165,
      140
     ]
    },
    "typing.Sequence": {
     "line number": [
      138
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._cli.gather_files": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      78
     ]
    },
    "pathlib.Path": {
     "line number": [
      93
     ]
    },
    "sorted": {
     "line number": [
      96
     ]
    },
    "str": {
     "line number": [
      78,
      86,
      92,
      94,
      94,
      79
     ]
    },
    "typing.List": {
     "line number": [
      86,
      79
     ]
    },
    "typing.Sequence": {
     "line number": [
      78
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._cli.invoke_formatter": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      49
     ]
    },
    "bytes": {
     "line number": [
      53
     ]
    },
    "isinstance": {
     "line number": [
      53
     ]
    },
    "len": {
     "line number": [
      48
     ]
    },
    "libcst.codemod._cli.subprocess": {
     "line number": [
      56
     ]
    },
    "str": {
     "line number": [
      41
     ]
    },
    "typing.AnyStr": {
     "line number": [
      41,
      55,
      41
     ]
    },
    "typing.Sequence": {
     "line number": [
      41
     ]
    },
    "typing.cast": {
     "line number": [
      54
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._cli.os.path": {
  "data": {
   "shadows": "os.path"
  },
  "type": "import"
 },
 "libcst.codemod._cli.parallel_exec_transform_with_prettyprint": {
  "data": {
   "lineno": 535,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      594,
      666
     ]
    },
    "KeyboardInterrupt": {
     "line number": [
      724,
      730,
      778
     ]
    },
    "bool": {
     "line number": [
      541,
      543,
      545,
      546,
      547,
      548,
      639,
      745
     ]
    },
    "dataclasses.replace": {
     "line number": [
      609
     ]
    },
    "int": {
     "line number": [
      539,
      540,
      591,
      679,
      680,
      681,
      682
     ]
    },
    "isinstance": {
     "line number": [
      644,
      651,
      658,
      752,
      754,
      756
     ]
    },
    "len": {
     "line number": [
      587,
      649,
      656,
      663,
      709,
      759
     ]
    },
    "libcst.PartialParserConfig": {
     "line number": [
      672,
      674
     ]
    },
    "libcst.codemod._cli.ParallelTransformResult": {
     "line number": [
      597,
      645,
      652,
      659,
      779,
      552
     ]
    },
    "libcst.codemod._cli.Progress": {
     "line number": [
      588
     ]
    },
    "libcst.codemod._cli._parallel_exec_process_stub": {
     "line number": [
      622,
      689
     ]
    },
    "libcst.codemod._cli._print_parallel_result": {
     "line number": [
      636,
      742
     ]
    },
    "libcst.codemod._cli.sys": {
     "line number": [
      604,
      612
     ]
    },
    "libcst.codemod._codemod.Codemod": {
     "line number": [
      536
     ]
    },
    "libcst.codemod._runner.TransformExit": {
     "line number": [
      651,
      756
     ]
    },
    "libcst.codemod._runner.TransformFailure": {
     "line number": [
      644,
      752
     ]
    },
    "libcst.codemod._runner.TransformSkip": {
     "line number": [
      651,
      756
     ]
    },
    "libcst.codemod._runner.TransformSuccess": {
     "line number": [
      658,
      754
     ]
    },
    "libcst.metadata.FullRepoManager": {
     "line number": [
      605
     ]
    },
    "libcst.parse_module": {
     "line number": [
      669
     ]
    },
    "list": {
     "line number": [
      586
     ]
    },
    "multiprocessing.Process": {
     "line number": [
      683,
      686,
      688,
      710
     ]
    },
    "multiprocessing.Queue": {
     "line number": [
      616
     ]
    },
    "multiprocessing.cpu_count": {
     "line number": [
      591
     ]
    },
    "print": {
     "line number": [
      604,
      612
     ]
    },
    "queue.Empty": {
     "line number": [
      733
     ]
    },
    "set": {
     "line number": [
      586,
      710
     ]
    },
    "sorted": {
     "line number": [
      586
     ]
    },
    "str": {
     "line number": [
      537,
      542,
      544,
      549,
      550,
      551,
      686
     ]
    },
    "typing.Dict": {
     "line number": [
      686
     ]
    },
    "typing.List": {
     "line number": [
      683
     ]
    },
    "typing.Optional": {
     "line number": [
      539,
      540,
      550,
      551
     ]
    },
    "typing.Sequence": {
     "line number": [
      537,
      544,
      549
     ]
    },
    "typing.Set": {
     "line number": [
      710
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._cli.parse_module": {
  "data": {
   "shadows": "libcst.parse_module"
  },
  "type": "import"
 },
 "libcst.codemod._cli.print_execution_result": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      70,
      72
     ]
    },
    "libcst.codemod._cli.subprocess": {
     "line number": [
      72
     ]
    },
    "libcst.codemod._cli.sys": {
     "line number": [
      68,
      73,
      74
     ]
    },
    "libcst.codemod._runner.TransformFailure": {
     "line number": [
      70
     ]
    },
    "libcst.codemod._runner.TransformResult": {
     "line number": [
      66
     ]
    },
    "print": {
     "line number": [
      68,
      73,
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._cli.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "libcst.codemod._cli.replace": {
  "data": {
   "shadows": "dataclasses.replace"
  },
  "type": "import"
 },
 "libcst.codemod._cli.subprocess": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "libcst.codemod._cli.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "libcst.codemod._cli.time": {
  "data": {
   "shadows": "time"
  },
  "type": "import"
 },
 "libcst.codemod._cli.traceback": {
  "data": {
   "shadows": "traceback"
  },
  "type": "import"
 },
 "libcst.codemod._cli.transform_module": {
  "data": {
   "shadows": "libcst.codemod._runner.transform_module"
  },
  "type": "import"
 },
 "libcst.codemod._codemod": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod._codemod.ABC": {
  "data": {
   "shadows": "abc.ABC"
  },
  "type": "import"
 },
 "libcst.codemod._codemod.Codemod": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      15
     ]
    },
    "libcst.MetadataDependent": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod._codemod.Codemod.__init__": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "libcst.MetadataDependent.__init__": {
     "line number": [
      31
     ]
    },
    "libcst.codemod._context.CodemodContext": {
     "line number": [
      30,
      32
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._codemod.Codemod._handle_metadata_reference": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": {
    "contextlib.contextmanager": {
     "line number": [
      74
     ]
    },
    "dataclasses.replace": {
     "line number": [
      92,
      96
     ]
    },
    "libcst.MetadataWrapper": {
     "line number": [
      84,
      89
     ]
    },
    "libcst.Module": {
     "line number": [
      76,
      77
     ]
    },
    "typing.Generator": {
     "line number": [
      77
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._codemod.Codemod.module": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      59
     ]
    },
    "libcst.Module": {
     "line number": [
      49
     ]
    },
    "property": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._codemod.Codemod.should_allow_multiple_passes": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._codemod.Codemod.transform_module": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      98,
      112,
      98
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._codemod.Codemod.transform_module_impl": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": {
    "abc.abstractmethod": {
     "line number": [
      65
     ]
    },
    "libcst.Module": {
     "line number": [
      66,
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._codemod.Codemod.warn": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "str": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._codemod.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod._context.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod._codemod.Generator": {
  "data": {
   "shadows": "typing.Generator"
  },
  "type": "import"
 },
 "libcst.codemod._codemod.MetadataDependent": {
  "data": {
   "shadows": "libcst.MetadataDependent"
  },
  "type": "import"
 },
 "libcst.codemod._codemod.MetadataWrapper": {
  "data": {
   "shadows": "libcst.MetadataWrapper"
  },
  "type": "import"
 },
 "libcst.codemod._codemod.Module": {
  "data": {
   "shadows": "libcst.Module"
  },
  "type": "import"
 },
 "libcst.codemod._codemod.abstractmethod": {
  "data": {
   "shadows": "abc.abstractmethod"
  },
  "type": "import"
 },
 "libcst.codemod._codemod.contextmanager": {
  "data": {
   "shadows": "contextlib.contextmanager"
  },
  "type": "import"
 },
 "libcst.codemod._codemod.replace": {
  "data": {
   "shadows": "dataclasses.replace"
  },
  "type": "import"
 },
 "libcst.codemod._command": {
  "data": {
   "symbols_in_volume": {
    "libcst.codemod._codemod.Codemod": {
     "line number": [
      19
     ]
    },
    "typing.TypeVar": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst.codemod._command.ABC": {
  "data": {
   "shadows": "abc.ABC"
  },
  "type": "import"
 },
 "libcst.codemod._command.AddImportsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors._add_imports.AddImportsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod._command.Codemod": {
  "data": {
   "shadows": "libcst.codemod._codemod.Codemod"
  },
  "type": "import"
 },
 "libcst.codemod._command.CodemodCommand": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      22
     ]
    },
    "libcst.codemod._codemod.Codemod": {
     "line number": [
      22
     ]
    },
    "str": {
     "line number": [
      41
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod._command.CodemodCommand._instantiate_and_run": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      56,
      56
     ]
    },
    "libcst.codemod._command._Codemod": {
     "line number": [
      56
     ]
    },
    "transform": {
     "line number": [
      57
     ]
    },
    "typing.Type": {
     "line number": [
      56
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._command.CodemodCommand.add_args": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "libcst.codemod._command.argparse": {
     "line number": [
      44
     ]
    },
    "staticmethod": {
     "line number": [
      43
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._command.CodemodCommand.transform_module": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      69,
      69
     ]
    },
    "libcst.codemod._codemod.Codemod": {
     "line number": [
      79
     ]
    },
    "libcst.codemod.visitors._add_imports.AddImportsVisitor": {
     "line number": [
      80
     ]
    },
    "libcst.codemod.visitors._add_imports.AddImportsVisitor.CONTEXT_KEY": {
     "line number": [
      80
     ]
    },
    "libcst.codemod.visitors._remove_imports.RemoveImportsVisitor": {
     "line number": [
      81
     ]
    },
    "libcst.codemod.visitors._remove_imports.RemoveImportsVisitor.CONTEXT_KEY": {
     "line number": [
      81
     ]
    },
    "str": {
     "line number": [
      79
     ]
    },
    "super": {
     "line number": [
      72
     ]
    },
    "transform": {
     "line number": [
      85,
      88
     ]
    },
    "typing.Dict": {
     "line number": [
      79
     ]
    },
    "typing.Type": {
     "line number": [
      79
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._command.CodemodCommand.transform_module_impl": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "abc.abstractmethod": {
     "line number": [
      60
     ]
    },
    "libcst.Module": {
     "line number": [
      61,
      61
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._command.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod._context.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod._command.ContextAwareTransformer": {
  "data": {
   "shadows": "libcst.codemod._visitor.ContextAwareTransformer"
  },
  "type": "import"
 },
 "libcst.codemod._command.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "libcst.codemod._command.Generator": {
  "data": {
   "shadows": "typing.Generator"
  },
  "type": "import"
 },
 "libcst.codemod._command.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.codemod._command.MagicArgsCodemodCommand": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      106
     ]
    },
    "libcst.codemod._command.CodemodCommand": {
     "line number": [
      106
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod._command.MagicArgsCodemodCommand.__init__": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": {
    "libcst.codemod._context.CodemodContext": {
     "line number": [
      121
     ]
    },
    "object": {
     "line number": [
      121
     ]
    },
    "str": {
     "line number": [
      121
     ]
    },
    "super": {
     "line number": [
      122
     ]
    },
    "typing.Dict": {
     "line number": [
      121
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._command.MagicArgsCodemodCommand._instantiate": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      157,
      168
     ]
    },
    "enumerate": {
     "line number": [
      149
     ]
    },
    "len": {
     "line number": [
      148,
      148
     ]
    },
    "libcst.codemod._codemod.Codemod": {
     "line number": [
      141,
      141
     ]
    },
    "libcst.codemod._command.inspect": {
     "line number": [
      143
     ]
    },
    "object": {
     "line number": [
      144,
      145
     ]
    },
    "str": {
     "line number": [
      145
     ]
    },
    "transform": {
     "line number": [
      177
     ]
    },
    "transform.__init__": {
     "line number": [
      143
     ]
    },
    "transform.__name__": {
     "line number": [
      158,
      169
     ]
    },
    "typing.Dict": {
     "line number": [
      145
     ]
    },
    "typing.List": {
     "line number": [
      144
     ]
    },
    "typing.Type": {
     "line number": [
      141
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._command.MagicArgsCodemodCommand.get_transforms": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": {
    "abc.abstractmethod": {
     "line number": [
      125
     ]
    },
    "libcst.codemod._codemod.Codemod": {
     "line number": [
      126
     ]
    },
    "typing.Generator": {
     "line number": [
      126
     ]
    },
    "typing.Type": {
     "line number": [
      126
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._command.MagicArgsCodemodCommand.transform_module_impl": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      179,
      179
     ]
    },
    "transform": {
     "line number": [
      180,
      181
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._command.Module": {
  "data": {
   "shadows": "libcst.Module"
  },
  "type": "import"
 },
 "libcst.codemod._command.RemoveImportsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors._remove_imports.RemoveImportsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod._command.Type": {
  "data": {
   "shadows": "typing.Type"
  },
  "type": "import"
 },
 "libcst.codemod._command.TypeVar": {
  "data": {
   "shadows": "typing.TypeVar"
  },
  "type": "import"
 },
 "libcst.codemod._command.VisitorBasedCodemodCommand": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      94
     ]
    },
    "libcst.codemod._command.CodemodCommand": {
     "line number": [
      94
     ]
    },
    "libcst.codemod._visitor.ContextAwareTransformer": {
     "line number": [
      94
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod._command._Codemod": {
  "data": {
   "lineno": 19
  },
  "type": "constant"
 },
 "libcst.codemod._command.abstractmethod": {
  "data": {
   "shadows": "abc.abstractmethod"
  },
  "type": "import"
 },
 "libcst.codemod._command.argparse": {
  "data": {
   "shadows": "argparse"
  },
  "type": "import"
 },
 "libcst.codemod._command.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "libcst.codemod._context": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod._context.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst.codemod._context.CodemodContext": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      13
     ]
    },
    "dataclasses.field": {
     "line number": [
      29,
      33
     ]
    },
    "dict": {
     "line number": [
      33
     ]
    },
    "libcst.MetadataWrapper": {
     "line number": [
      51
     ]
    },
    "libcst.metadata.FullRepoManager": {
     "line number": [
      54
     ]
    },
    "list": {
     "line number": [
      29
     ]
    },
    "str": {
     "line number": [
      29,
      33,
      39,
      45
     ]
    },
    "typing.Any": {
     "line number": [
      33
     ]
    },
    "typing.Dict": {
     "line number": [
      33
     ]
    },
    "typing.List": {
     "line number": [
      29
     ]
    },
    "typing.Optional": {
     "line number": [
      39,
      45,
      51,
      54
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod._context.CodemodContext.module": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      57
     ]
    },
    "property": {
     "line number": [
      56
     ]
    },
    "typing.Optional": {
     "line number": [
      57
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._context.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "libcst.codemod._context.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.codemod._context.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.codemod._context.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.codemod._context.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst.codemod._context.field": {
  "data": {
   "shadows": "dataclasses.field"
  },
  "type": "import"
 },
 "libcst.codemod._context.meta": {
  "data": {
   "shadows": "libcst.metadata"
  },
  "type": "import"
 },
 "libcst.codemod._runner": {
  "data": {
   "symbols_in_volume": {
    "libcst.codemod._runner.TransformExit": {
     "line number": [
      113
     ]
    },
    "libcst.codemod._runner.TransformFailure": {
     "line number": [
      113
     ]
    },
    "libcst.codemod._runner.TransformSkip": {
     "line number": [
      113
     ]
    },
    "libcst.codemod._runner.TransformSuccess": {
     "line number": [
      113
     ]
    },
    "typing.Union": {
     "line number": [
      112
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst.codemod._runner.Codemod": {
  "data": {
   "shadows": "libcst.codemod._codemod.Codemod"
  },
  "type": "import"
 },
 "libcst.codemod._runner.Enum": {
  "data": {
   "shadows": "enum.Enum"
  },
  "type": "import"
 },
 "libcst.codemod._runner.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.codemod._runner.PartialParserConfig": {
  "data": {
   "shadows": "libcst.PartialParserConfig"
  },
  "type": "import"
 },
 "libcst.codemod._runner.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst.codemod._runner.SkipFile": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      104
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod._runner.SkipReason": {
  "data": {
   "lineno": 68,
   "symbols_in_volume": {
    "enum.Enum": {
     "line number": [
      68
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod._runner.TransformExit": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      56
     ]
    },
    "str": {
     "line number": [
      65
     ]
    },
    "typing.Sequence": {
     "line number": [
      65
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod._runner.TransformFailure": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      50
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      39
     ]
    },
    "str": {
     "line number": [
      47,
      53
     ]
    },
    "typing.Sequence": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod._runner.TransformResult": {
  "data": {
   "lineno": 112
  },
  "type": "constant"
 },
 "libcst.codemod._runner.TransformSkip": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      86
     ]
    },
    "libcst.codemod._runner.SkipReason": {
     "line number": [
      95
     ]
    },
    "str": {
     "line number": [
      98,
      101
     ]
    },
    "typing.Sequence": {
     "line number": [
      101
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod._runner.TransformSuccess": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      24
     ]
    },
    "str": {
     "line number": [
      33,
      36
     ]
    },
    "typing.Sequence": {
     "line number": [
      33
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod._runner.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.codemod._runner.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst.codemod._runner.parse_module": {
  "data": {
   "shadows": "libcst.parse_module"
  },
  "type": "import"
 },
 "libcst.codemod._runner.traceback": {
  "data": {
   "shadows": "traceback"
  },
  "type": "import"
 },
 "libcst.codemod._runner.transform_module": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      156
     ]
    },
    "KeyboardInterrupt": {
     "line number": [
      148
     ]
    },
    "libcst.PartialParserConfig": {
     "line number": [
      139,
      141
     ]
    },
    "libcst.codemod._codemod.Codemod": {
     "line number": [
      118
     ]
    },
    "libcst.codemod._runner.SkipFile": {
     "line number": [
      150
     ]
    },
    "libcst.codemod._runner.SkipReason": {
     "line number": [
      153
     ]
    },
    "libcst.codemod._runner.TransformExit": {
     "line number": [
      149
     ]
    },
    "libcst.codemod._runner.TransformFailure": {
     "line number": [
      157
     ]
    },
    "libcst.codemod._runner.TransformResult": {
     "line number": [
      119
     ]
    },
    "libcst.codemod._runner.TransformSkip": {
     "line number": [
      151
     ]
    },
    "libcst.codemod._runner.TransformSuccess": {
     "line number": [
      145
     ]
    },
    "libcst.codemod._runner.traceback": {
     "line number": [
      159
     ]
    },
    "libcst.parse_module": {
     "line number": [
      136
     ]
    },
    "str": {
     "line number": [
      118,
      118,
      152
     ]
    },
    "typing.Optional": {
     "line number": [
      118
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._testing": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod._testing.Codemod": {
  "data": {
   "shadows": "libcst.codemod._codemod.Codemod"
  },
  "type": "import"
 },
 "libcst.codemod._testing.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod._context.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod._testing.CodemodTest": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": {
    "libcst.codemod._testing._CodemodTest": {
     "line number": [
      130
     ]
    },
    "libcst.testing.utils.UnitTest": {
     "line number": [
      130
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod._testing.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.codemod._testing.PartialParserConfig": {
  "data": {
   "shadows": "libcst.PartialParserConfig"
  },
  "type": "import"
 },
 "libcst.codemod._testing.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst.codemod._testing.SkipFile": {
  "data": {
   "shadows": "libcst.codemod._runner.SkipFile"
  },
  "type": "import"
 },
 "libcst.codemod._testing.Type": {
  "data": {
   "shadows": "typing.Type"
  },
  "type": "import"
 },
 "libcst.codemod._testing.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.codemod._testing._CodemodTest": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "libcst.codemod._codemod.Codemod": {
     "line number": [
      27
     ]
    },
    "typing.Type": {
     "line number": [
      27
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod._testing._CodemodTest.assertCodeEqual": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "str": {
     "line number": [
      59,
      59
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._testing._CodemodTest.assertCodemod": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      81
     ]
    },
    "libcst.PartialParserConfig": {
     "line number": [
      105,
      107
     ]
    },
    "libcst.codemod._context.CodemodContext": {
     "line number": [
      78,
      100
     ]
    },
    "libcst.codemod._runner.SkipFile": {
     "line number": [
      112
     ]
    },
    "libcst.parse_module": {
     "line number": [
      102
     ]
    },
    "object": {
     "line number": [
      77,
      82
     ]
    },
    "str": {
     "line number": [
      75,
      76,
      79,
      80
     ]
    },
    "typing.Optional": {
     "line number": [
      78,
      79,
      80
     ]
    },
    "typing.Sequence": {
     "line number": [
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._testing._CodemodTest.make_fixture_data": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": {
    "filter_line": {
     "line number": [
      45
     ]
    },
    "staticmethod": {
     "line number": [
      29
     ]
    },
    "str": {
     "line number": [
      30,
      30
     ]
    },
    "textwrap.dedent": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._testing._CodemodTest.make_fixture_data.filter_line": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "len": {
     "line number": [
      40
     ]
    },
    "str": {
     "line number": [
      39,
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._testing.dedent": {
  "data": {
   "shadows": "textwrap.dedent"
  },
  "type": "import"
 },
 "libcst.codemod._testing.parse_module": {
  "data": {
   "shadows": "libcst.parse_module"
  },
  "type": "import"
 },
 "libcst.codemod._visitor": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod._visitor.Codemod": {
  "data": {
   "shadows": "libcst.codemod._codemod.Codemod"
  },
  "type": "import"
 },
 "libcst.codemod._visitor.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod._context.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod._visitor.ContextAwareTransformer": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.codemod._codemod.Codemod": {
     "line number": [
      16
     ]
    },
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod._visitor.ContextAwareTransformer.__init__": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "libcst.codemod._codemod.Codemod.__init__": {
     "line number": [
      28
     ]
    },
    "libcst.codemod._context.CodemodContext": {
     "line number": [
      27
     ]
    },
    "libcst.matchers.MatcherDecoratableTransformer.__init__": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._visitor.ContextAwareTransformer.transform_module_impl": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      31,
      31
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._visitor.ContextAwareVisitor": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "libcst.MetadataDependent": {
     "line number": [
      35
     ]
    },
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      35
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod._visitor.ContextAwareVisitor.__init__": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      72,
      79
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      86
     ]
    },
    "libcst.MetadataDependent.__init__": {
     "line number": [
      64
     ]
    },
    "libcst.codemod._context.CodemodContext": {
     "line number": [
      63
     ]
    },
    "libcst.matchers.MatcherDecoratableVisitor.__init__": {
     "line number": [
      65
     ]
    },
    "libcst.metadata.ProviderT": {
     "line number": [
      86
     ]
    },
    "object": {
     "line number": [
      86
     ]
    },
    "typing.Mapping": {
     "line number": [
      86,
      86
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._visitor.ContextAwareVisitor.module": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      104
     ]
    },
    "libcst.Module": {
     "line number": [
      97
     ]
    },
    "property": {
     "line number": [
      96
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._visitor.ContextAwareVisitor.warn": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": {
    "str": {
     "line number": [
      90
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod._visitor.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "libcst.codemod._visitor.MatcherDecoratableTransformer": {
  "data": {
   "shadows": "libcst.matchers.MatcherDecoratableTransformer"
  },
  "type": "import"
 },
 "libcst.codemod._visitor.MatcherDecoratableVisitor": {
  "data": {
   "shadows": "libcst.matchers.MatcherDecoratableVisitor"
  },
  "type": "import"
 },
 "libcst.codemod._visitor.MetadataDependent": {
  "data": {
   "shadows": "libcst.MetadataDependent"
  },
  "type": "import"
 },
 "libcst.codemod._visitor.ProviderT": {
  "data": {
   "shadows": "libcst.metadata.ProviderT"
  },
  "type": "import"
 },
 "libcst.codemod._visitor.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.codemod.commands": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.commands.add_pyre_directive": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.commands.add_pyre_directive.ABC": {
  "data": {
   "shadows": "abc.ABC"
  },
  "type": "import"
 },
 "libcst.codemod.commands.add_pyre_directive.AddPyreDirectiveCommand": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      15
     ]
    },
    "libcst.codemod.VisitorBasedCodemodCommand": {
     "line number": [
      15
     ]
    },
    "str": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.add_pyre_directive.AddPyreDirectiveCommand.__init__": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "libcst.codemod.CodemodContext": {
     "line number": [
      18
     ]
    },
    "libcst.codemod.commands.add_pyre_directive.re": {
     "line number": [
      20
     ]
    },
    "str": {
     "line number": [
      20
     ]
    },
    "super": {
     "line number": [
      19
     ]
    },
    "typing.Pattern": {
     "line number": [
      20
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.add_pyre_directive.AddPyreDirectiveCommand.leave_Module": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": {
    "libcst.codemod.commands.add_pyre_directive.libcst": {
     "line number": [
      30,
      30,
      31
     ]
    },
    "libcst.helpers.insert_header_comments": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.add_pyre_directive.AddPyreDirectiveCommand.visit_Comment": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": {
    "libcst.codemod.commands.add_pyre_directive.libcst": {
     "line number": [
      25
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.add_pyre_directive.AddPyreStrictCommand": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "libcst.codemod.commands.add_pyre_directive.AddPyreDirectiveCommand": {
     "line number": [
      39
     ]
    },
    "str": {
     "line number": [
      45,
      47
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.add_pyre_directive.AddPyreUnsafeCommand": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "libcst.codemod.commands.add_pyre_directive.AddPyreDirectiveCommand": {
     "line number": [
      50
     ]
    },
    "str": {
     "line number": [
      56,
      58
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.add_pyre_directive.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod.commands.add_pyre_directive.Pattern": {
  "data": {
   "shadows": "typing.Pattern"
  },
  "type": "import"
 },
 "libcst.codemod.commands.add_pyre_directive.VisitorBasedCodemodCommand": {
  "data": {
   "shadows": "libcst.codemod.VisitorBasedCodemodCommand"
  },
  "type": "import"
 },
 "libcst.codemod.commands.add_pyre_directive.insert_header_comments": {
  "data": {
   "shadows": "libcst.helpers.insert_header_comments"
  },
  "type": "import"
 },
 "libcst.codemod.commands.add_pyre_directive.libcst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.codemod.commands.add_pyre_directive.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_format_to_fstring": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.commands.convert_format_to_fstring.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_format_to_fstring.ContextAwareTransformer": {
  "data": {
   "shadows": "libcst.codemod.ContextAwareTransformer"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_format_to_fstring.ContextAwareVisitor": {
  "data": {
   "shadows": "libcst.codemod.ContextAwareVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_format_to_fstring.ConvertFormatStringCommand": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": {
    "libcst.codemod.VisitorBasedCodemodCommand": {
     "line number": [
      221
     ]
    },
    "str": {
     "line number": [
      223
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.convert_format_to_fstring.ConvertFormatStringCommand.__init__": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      249,
      250
     ]
    },
    "libcst.codemod.CodemodContext": {
     "line number": [
      248
     ]
    },
    "super": {
     "line number": [
      252
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.convert_format_to_fstring.ConvertFormatStringCommand._convert_token_to_fstring_expression": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      351
     ]
    },
    "libcst.BaseExpression": {
     "line number": [
      380,
      388
     ]
    },
    "libcst.FormattedStringExpression": {
     "line number": [
      414,
      353
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      404
     ]
    },
    "libcst.RightParen": {
     "line number": [
      404
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      352
     ]
    },
    "libcst.codemod.commands.convert_format_to_fstring.StringQuoteGatherer": {
     "line number": [
      407
     ]
    },
    "libcst.codemod.commands.convert_format_to_fstring.StripNewlinesTransformer": {
     "line number": [
      380
     ]
    },
    "libcst.codemod.commands.convert_format_to_fstring.SwitchStringQuotesTransformer": {
     "line number": [
      386
     ]
    },
    "libcst.codemod.commands.convert_format_to_fstring._find_expr_from_field_name": {
     "line number": [
      354
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      379,
      384
     ]
    },
    "libcst.matchers.Await": {
     "line number": [
      372
     ]
    },
    "libcst.matchers.Comment": {
     "line number": [
      364
     ]
    },
    "libcst.matchers.FormattedString": {
     "line number": [
      369
     ]
    },
    "str": {
     "line number": [
      349,
      350
     ]
    },
    "typing.Optional": {
     "line number": [
      350,
      353
     ]
    },
    "typing.Sequence": {
     "line number": [
      351
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.convert_format_to_fstring.ConvertFormatStringCommand.add_args": {
  "data": {
   "lineno": 225,
   "symbols_in_volume": {
    "libcst.codemod.commands.convert_format_to_fstring.argparse": {
     "line number": [
      226
     ]
    },
    "staticmethod": {
     "line number": [
      225
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.convert_format_to_fstring.ConvertFormatStringCommand.leave_Call": {
  "data": {
   "lineno": 256,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      300
     ]
    },
    "int": {
     "line number": [
      271
     ]
    },
    "len": {
     "line number": [
      289
     ]
    },
    "libcst.BaseExpression": {
     "line number": [
      258
     ]
    },
    "libcst.BaseFormattedStringContent": {
     "line number": [
      270,
      288
     ]
    },
    "libcst.Call": {
     "line number": [
      257,
      257
     ]
    },
    "libcst.FormattedString": {
     "line number": [
      339
     ]
    },
    "libcst.FormattedStringText": {
     "line number": [
      276,
      303
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      272
     ]
    },
    "libcst.codemod.commands.convert_format_to_fstring._get_tokens": {
     "line number": [
      273,
      291
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      272
     ]
    },
    "libcst.matchers.Attribute": {
     "line number": [
      263
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      262
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      265
     ]
    },
    "libcst.matchers.SaveMatchedNode": {
     "line number": [
      264
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      264
     ]
    },
    "str": {
     "line number": [
      282,
      310
     ]
    },
    "typing.List": {
     "line number": [
      270,
      288
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.convert_format_to_fstring.Generator": {
  "data": {
   "shadows": "typing.Generator"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_format_to_fstring.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_format_to_fstring.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_format_to_fstring.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_format_to_fstring.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_format_to_fstring.StringQuoteGatherer": {
  "data": {
   "lineno": 169,
   "symbols_in_volume": {
    "libcst.codemod.ContextAwareVisitor": {
     "line number": [
      169
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.convert_format_to_fstring.StringQuoteGatherer.__init__": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": {
    "libcst.codemod.CodemodContext": {
     "line number": [
      170
     ]
    },
    "set": {
     "line number": [
      172
     ]
    },
    "str": {
     "line number": [
      172
     ]
    },
    "super": {
     "line number": [
      171
     ]
    },
    "typing.Set": {
     "line number": [
      172
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.convert_format_to_fstring.StringQuoteGatherer.visit_SimpleString": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      174
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.convert_format_to_fstring.StripNewlinesTransformer": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": {
    "libcst.codemod.ContextAwareTransformer": {
     "line number": [
      178
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.convert_format_to_fstring.StripNewlinesTransformer.leave_ParenthesizedWhitespace": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": {
    "libcst.ParenthesizedWhitespace": {
     "line number": [
      181,
      182
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      184,
      183
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.convert_format_to_fstring.SwitchStringQuotesTransformer": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": {
    "libcst.codemod.ContextAwareTransformer": {
     "line number": [
      187
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.convert_format_to_fstring.SwitchStringQuotesTransformer.__init__": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      191
     ]
    },
    "libcst.codemod.CodemodContext": {
     "line number": [
      188
     ]
    },
    "str": {
     "line number": [
      188,
      192,
      193
     ]
    },
    "super": {
     "line number": [
      189
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.convert_format_to_fstring.SwitchStringQuotesTransformer.leave_SimpleString": {
  "data": {
   "lineno": 195,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      213
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      196,
      196,
      197
     ]
    },
    "libcst.codemod.commands.convert_format_to_fstring.ast": {
     "line number": [
      207
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.convert_format_to_fstring.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_format_to_fstring.VisitorBasedCodemodCommand": {
  "data": {
   "shadows": "libcst.codemod.VisitorBasedCodemodCommand"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_format_to_fstring._find_expr_from_field_name": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      51,
      61,
      64
     ]
    },
    "any": {
     "line number": [
      43
     ]
    },
    "enumerate": {
     "line number": [
      53
     ]
    },
    "int": {
     "line number": [
      47,
      49
     ]
    },
    "isinstance": {
     "line number": [
      48,
      52
     ]
    },
    "len": {
     "line number": [
      50
     ]
    },
    "libcst.Arg": {
     "line number": [
      30
     ]
    },
    "libcst.BaseExpression": {
     "line number": [
      31
     ]
    },
    "libcst.Integer": {
     "line number": [
      48
     ]
    },
    "libcst.Name": {
     "line number": [
      52
     ]
    },
    "libcst.codemod.commands.convert_format_to_fstring._get_lhs": {
     "line number": [
      40
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      39
     ]
    },
    "str": {
     "line number": [
      30
     ]
    },
    "typing.Optional": {
     "line number": [
      47,
      31
     ]
    },
    "typing.Sequence": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.convert_format_to_fstring._get_field": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      76
     ]
    },
    "int": {
     "line number": [
      71
     ]
    },
    "str": {
     "line number": [
      70,
      72,
      73,
      70,
      70,
      70
     ]
    },
    "typing.Optional": {
     "line number": [
      72,
      73,
      70,
      70
     ]
    },
    "typing.Tuple": {
     "line number": [
      70
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.convert_format_to_fstring._get_lhs": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      26
     ]
    },
    "isinstance": {
     "line number": [
      21,
      23
     ]
    },
    "libcst.Attribute": {
     "line number": [
      23
     ]
    },
    "libcst.BaseExpression": {
     "line number": [
      20,
      20
     ]
    },
    "libcst.Integer": {
     "line number": [
      21
     ]
    },
    "libcst.Name": {
     "line number": [
      21
     ]
    },
    "libcst.Subscript": {
     "line number": [
      23
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.convert_format_to_fstring._get_tokens": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      144,
      161,
      163
     ]
    },
    "bool": {
     "line number": [
      101
     ]
    },
    "enumerate": {
     "line number": [
      103
     ]
    },
    "int": {
     "line number": [
      100
     ]
    },
    "len": {
     "line number": [
      97
     ]
    },
    "libcst.codemod.commands.convert_format_to_fstring._get_field": {
     "line number": [
      147
     ]
    },
    "str": {
     "line number": [
      95,
      98,
      99,
      117,
      96,
      96,
      96,
      96
     ]
    },
    "typing.Generator": {
     "line number": [
      96
     ]
    },
    "typing.Optional": {
     "line number": [
      117,
      96,
      96,
      96
     ]
    },
    "typing.Tuple": {
     "line number": [
      96
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.convert_format_to_fstring.argparse": {
  "data": {
   "shadows": "argparse"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_format_to_fstring.ast": {
  "data": {
   "shadows": "ast"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_format_to_fstring.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_format_to_fstring.m": {
  "data": {
   "shadows": "libcst.matchers"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_namedtuple_to_dataclass": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.commands.convert_namedtuple_to_dataclass.AddImportsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors.AddImportsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_namedtuple_to_dataclass.ConvertNamedTupleToDataclassCommand": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "libcst.codemod.VisitorBasedCodemodCommand": {
     "line number": [
      19
     ]
    },
    "libcst.metadata.ProviderT": {
     "line number": [
      29
     ]
    },
    "libcst.metadata.QualifiedName": {
     "line number": [
      32,
      32
     ]
    },
    "libcst.metadata.QualifiedNameProvider": {
     "line number": [
      29
     ]
    },
    "libcst.metadata.QualifiedNameSource.IMPORT": {
     "line number": [
      33
     ]
    },
    "str": {
     "line number": [
      28
     ]
    },
    "typing.Sequence": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.convert_namedtuple_to_dataclass.ConvertNamedTupleToDataclassCommand.leave_ClassDef": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      39,
      40
     ]
    },
    "libcst.Call": {
     "line number": [
      66
     ]
    },
    "libcst.ClassDef": {
     "line number": [
      37,
      37,
      38
     ]
    },
    "libcst.Decorator": {
     "line number": [
      72
     ]
    },
    "libcst.MaybeSentinel.DEFAULT": {
     "line number": [
      69,
      70
     ]
    },
    "libcst.codemod.visitors.AddImportsVisitor.add_needed_import": {
     "line number": [
      57
     ]
    },
    "libcst.codemod.visitors.RemoveImportsVisitor.remove_unused_import_by_node": {
     "line number": [
      58
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      62
     ]
    },
    "libcst.metadata.QualifiedNameProvider.has_name": {
     "line number": [
      45
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      63
     ]
    },
    "typing.List": {
     "line number": [
      39
     ]
    },
    "typing.Optional": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.convert_namedtuple_to_dataclass.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_namedtuple_to_dataclass.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_namedtuple_to_dataclass.ProviderT": {
  "data": {
   "shadows": "libcst.metadata.ProviderT"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_namedtuple_to_dataclass.QualifiedName": {
  "data": {
   "shadows": "libcst.metadata.QualifiedName"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_namedtuple_to_dataclass.QualifiedNameProvider": {
  "data": {
   "shadows": "libcst.metadata.QualifiedNameProvider"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_namedtuple_to_dataclass.QualifiedNameSource": {
  "data": {
   "shadows": "libcst.metadata.QualifiedNameSource"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_namedtuple_to_dataclass.RemoveImportsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors.RemoveImportsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_namedtuple_to_dataclass.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_namedtuple_to_dataclass.VisitorBasedCodemodCommand": {
  "data": {
   "shadows": "libcst.codemod.VisitorBasedCodemodCommand"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_namedtuple_to_dataclass.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_percent_format_to_fstring": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.commands.convert_percent_format_to_fstring.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_percent_format_to_fstring.ConvertPercentFormatStringCommand": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "libcst.codemod.VisitorBasedCodemodCommand": {
     "line number": [
      67
     ]
    },
    "str": {
     "line number": [
      68
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.convert_percent_format_to_fstring.ConvertPercentFormatStringCommand.leave_BinaryOperation": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      114
     ]
    },
    "isinstance": {
     "line number": [
      96
     ]
    },
    "len": {
     "line number": [
      92,
      101,
      102,
      117
     ]
    },
    "libcst.BaseExpression": {
     "line number": [
      109,
      72
     ]
    },
    "libcst.BinaryOperation": {
     "line number": [
      71,
      71
     ]
    },
    "libcst.FormattedString": {
     "line number": [
      121
     ]
    },
    "libcst.FormattedStringExpression": {
     "line number": [
      107
     ]
    },
    "libcst.FormattedStringText": {
     "line number": [
      93,
      118
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      88
     ]
    },
    "libcst.Tuple": {
     "line number": [
      96
     ]
    },
    "libcst.codemod.commands.convert_percent_format_to_fstring.EscapeStringQuote": {
     "line number": [
      99
     ]
    },
    "libcst.codemod.commands.convert_percent_format_to_fstring._gen_match_simple_expression": {
     "line number": [
      80
     ]
    },
    "libcst.codemod.commands.convert_percent_format_to_fstring._match_simple_string": {
     "line number": [
      77
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      88
     ]
    },
    "libcst.matchers.BinaryOperation": {
     "line number": [
      76
     ]
    },
    "libcst.matchers.MatchIfTrue": {
     "line number": [
      77,
      80
     ]
    },
    "libcst.matchers.Modulo": {
     "line number": [
      78
     ]
    },
    "libcst.matchers.SaveMatchedNode": {
     "line number": [
      79
     ]
    },
    "libcst.matchers.extract": {
     "line number": [
      74
     ]
    },
    "typing.cast": {
     "line number": [
      108
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.convert_percent_format_to_fstring.EscapeStringQuote": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "libcst.CSTTransformer": {
     "line number": [
      41
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.convert_percent_format_to_fstring.EscapeStringQuote.__init__": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "str": {
     "line number": [
      42
     ]
    },
    "super": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.convert_percent_format_to_fstring.EscapeStringQuote.leave_SimpleString": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      56,
      61
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      47,
      47,
      52,
      48
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.convert_percent_format_to_fstring.USE_FSTRING_SIMPLE_EXPRESSION_MAX_LENGTH": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "libcst.codemod.commands.convert_percent_format_to_fstring.VisitorBasedCodemodCommand": {
  "data": {
   "shadows": "libcst.codemod.VisitorBasedCodemodCommand"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_percent_format_to_fstring._gen_match_simple_expression": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      24
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      24
     ]
    },
    "libcst.Module": {
     "line number": [
      24
     ]
    },
    "typing.Callable": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.convert_percent_format_to_fstring._gen_match_simple_expression._match_simple_expression": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": {
    "all": {
     "line number": [
      29
     ]
    },
    "bool": {
     "line number": [
      25
     ]
    },
    "isinstance": {
     "line number": [
      28
     ]
    },
    "len": {
     "line number": [
      30,
      34
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      25
     ]
    },
    "libcst.Tuple": {
     "line number": [
      28
     ]
    },
    "libcst.codemod.commands.convert_percent_format_to_fstring.USE_FSTRING_SIMPLE_EXPRESSION_MAX_LENGTH": {
     "line number": [
      31,
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.convert_percent_format_to_fstring._match_simple_string": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      17
     ]
    },
    "isinstance": {
     "line number": [
      18
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      17
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      18
     ]
    },
    "libcst.codemod.commands.convert_percent_format_to_fstring.re": {
     "line number": [
      20
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.convert_percent_format_to_fstring.cast": {
  "data": {
   "shadows": "typing.cast"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_percent_format_to_fstring.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_percent_format_to_fstring.m": {
  "data": {
   "shadows": "libcst.matchers"
  },
  "type": "import"
 },
 "libcst.codemod.commands.convert_percent_format_to_fstring.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "libcst.codemod.commands.ensure_import_present": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.commands.ensure_import_present.AddImportsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors.AddImportsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.commands.ensure_import_present.Codemod": {
  "data": {
   "shadows": "libcst.codemod.Codemod"
  },
  "type": "import"
 },
 "libcst.codemod.commands.ensure_import_present.EnsureImportPresentCommand": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "libcst.codemod.MagicArgsCodemodCommand": {
     "line number": [
      13
     ]
    },
    "str": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.ensure_import_present.EnsureImportPresentCommand.add_args": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "libcst.codemod.commands.ensure_import_present.argparse": {
     "line number": [
      21
     ]
    },
    "staticmethod": {
     "line number": [
      20
     ]
    },
    "str": {
     "line number": [
      27,
      38,
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.ensure_import_present.EnsureImportPresentCommand.get_transforms": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "libcst.codemod.Codemod": {
     "line number": [
      53
     ]
    },
    "libcst.codemod.visitors.AddImportsVisitor": {
     "line number": [
      60
     ]
    },
    "libcst.codemod.visitors.AddImportsVisitor.add_needed_import": {
     "line number": [
      54
     ]
    },
    "typing.Generator": {
     "line number": [
      53
     ]
    },
    "typing.Type": {
     "line number": [
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.ensure_import_present.Generator": {
  "data": {
   "shadows": "typing.Generator"
  },
  "type": "import"
 },
 "libcst.codemod.commands.ensure_import_present.MagicArgsCodemodCommand": {
  "data": {
   "shadows": "libcst.codemod.MagicArgsCodemodCommand"
  },
  "type": "import"
 },
 "libcst.codemod.commands.ensure_import_present.Type": {
  "data": {
   "shadows": "typing.Type"
  },
  "type": "import"
 },
 "libcst.codemod.commands.ensure_import_present.argparse": {
  "data": {
   "shadows": "argparse"
  },
  "type": "import"
 },
 "libcst.codemod.commands.fix_pyre_directives": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.commands.fix_pyre_directives.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod.commands.fix_pyre_directives.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "libcst.codemod.commands.fix_pyre_directives.FixPyreDirectivesCommand": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "libcst.codemod.VisitorBasedCodemodCommand": {
     "line number": [
      14
     ]
    },
    "str": {
     "line number": [
      20,
      22
     ]
    },
    "typing.Sequence": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.fix_pyre_directives.FixPyreDirectivesCommand.__init__": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      26,
      28
     ]
    },
    "int": {
     "line number": [
      27
     ]
    },
    "libcst.codemod.CodemodContext": {
     "line number": [
      24
     ]
    },
    "str": {
     "line number": [
      26,
      27
     ]
    },
    "super": {
     "line number": [
      25
     ]
    },
    "typing.Dict": {
     "line number": [
      26,
      27
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.fix_pyre_directives.FixPyreDirectivesCommand.leave_EmptyLine": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "libcst.codemod.commands.fix_pyre_directives.libcst": {
     "line number": [
      41,
      41,
      53,
      60,
      70,
      73,
      80,
      42,
      42
     ]
    },
    "libcst.matchers.Comment": {
     "line number": [
      45,
      62
     ]
    },
    "libcst.matchers.EmptyLine": {
     "line number": [
      45,
      62
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      45,
      62
     ]
    },
    "typing.Union": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.fix_pyre_directives.FixPyreDirectivesCommand.leave_Module": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": {
    "libcst.codemod.commands.fix_pyre_directives.libcst": {
     "line number": [
      85,
      85,
      86
     ]
    },
    "libcst.helpers.insert_header_comments": {
     "line number": [
      88
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.fix_pyre_directives.FixPyreDirectivesCommand.leave_Module_header": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      37
     ]
    },
    "libcst.codemod.commands.fix_pyre_directives.libcst": {
     "line number": [
      35
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.fix_pyre_directives.FixPyreDirectivesCommand.visit_Module_header": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      32
     ]
    },
    "libcst.codemod.commands.fix_pyre_directives.libcst": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.fix_pyre_directives.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst.codemod.commands.fix_pyre_directives.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.codemod.commands.fix_pyre_directives.VisitorBasedCodemodCommand": {
  "data": {
   "shadows": "libcst.codemod.VisitorBasedCodemodCommand"
  },
  "type": "import"
 },
 "libcst.codemod.commands.fix_pyre_directives.insert_header_comments": {
  "data": {
   "shadows": "libcst.helpers.insert_header_comments"
  },
  "type": "import"
 },
 "libcst.codemod.commands.fix_pyre_directives.libcst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.codemod.commands.fix_pyre_directives.m": {
  "data": {
   "shadows": "libcst.matchers"
  },
  "type": "import"
 },
 "libcst.codemod.commands.noop": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.commands.noop.CodemodCommand": {
  "data": {
   "shadows": "libcst.codemod.CodemodCommand"
  },
  "type": "import"
 },
 "libcst.codemod.commands.noop.Module": {
  "data": {
   "shadows": "libcst.Module"
  },
  "type": "import"
 },
 "libcst.codemod.commands.noop.NOOPCommand": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "libcst.codemod.CodemodCommand": {
     "line number": [
      10
     ]
    },
    "str": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.noop.NOOPCommand.transform_module_impl": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      13,
      13
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.remove_pyre_directive": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.commands.remove_pyre_directive.ABC": {
  "data": {
   "shadows": "abc.ABC"
  },
  "type": "import"
 },
 "libcst.codemod.commands.remove_pyre_directive.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod.commands.remove_pyre_directive.Pattern": {
  "data": {
   "shadows": "typing.Pattern"
  },
  "type": "import"
 },
 "libcst.codemod.commands.remove_pyre_directive.RemovePyreDirectiveCommand": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      14
     ]
    },
    "libcst.codemod.VisitorBasedCodemodCommand": {
     "line number": [
      14
     ]
    },
    "str": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.remove_pyre_directive.RemovePyreDirectiveCommand.__init__": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "libcst.codemod.CodemodContext": {
     "line number": [
      17
     ]
    },
    "libcst.codemod.commands.remove_pyre_directive.re": {
     "line number": [
      19
     ]
    },
    "str": {
     "line number": [
      19
     ]
    },
    "super": {
     "line number": [
      18
     ]
    },
    "typing.Pattern": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.remove_pyre_directive.RemovePyreDirectiveCommand.leave_EmptyLine": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      26
     ]
    },
    "libcst.codemod.commands.remove_pyre_directive.libcst": {
     "line number": [
      24,
      24,
      28,
      28,
      34,
      25,
      25
     ]
    },
    "typing.Union": {
     "line number": [
      25
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.remove_pyre_directive.RemovePyreStrictCommand": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "libcst.codemod.commands.remove_pyre_directive.RemovePyreDirectiveCommand": {
     "line number": [
      37
     ]
    },
    "str": {
     "line number": [
      43,
      45
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.remove_pyre_directive.RemovePyreUnsafeCommand": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "libcst.codemod.commands.remove_pyre_directive.RemovePyreDirectiveCommand": {
     "line number": [
      48
     ]
    },
    "str": {
     "line number": [
      54,
      56
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.remove_pyre_directive.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.codemod.commands.remove_pyre_directive.VisitorBasedCodemodCommand": {
  "data": {
   "shadows": "libcst.codemod.VisitorBasedCodemodCommand"
  },
  "type": "import"
 },
 "libcst.codemod.commands.remove_pyre_directive.libcst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.codemod.commands.remove_pyre_directive.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "libcst.codemod.commands.remove_unused_imports": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.commands.remove_unused_imports.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod.commands.remove_unused_imports.DEFAULT_SUPPRESS_COMMENT_REGEX": {
  "data": {
   "lineno": 16
  },
  "type": "constant"
 },
 "libcst.codemod.commands.remove_unused_imports.GatherCommentsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors.GatherCommentsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.commands.remove_unused_imports.Import": {
  "data": {
   "shadows": "libcst.Import"
  },
  "type": "import"
 },
 "libcst.codemod.commands.remove_unused_imports.ImportFrom": {
  "data": {
   "shadows": "libcst.ImportFrom"
  },
  "type": "import"
 },
 "libcst.codemod.commands.remove_unused_imports.ImportStar": {
  "data": {
   "shadows": "libcst.ImportStar"
  },
  "type": "import"
 },
 "libcst.codemod.commands.remove_unused_imports.Module": {
  "data": {
   "shadows": "libcst.Module"
  },
  "type": "import"
 },
 "libcst.codemod.commands.remove_unused_imports.PositionProvider": {
  "data": {
   "shadows": "libcst.metadata.PositionProvider"
  },
  "type": "import"
 },
 "libcst.codemod.commands.remove_unused_imports.ProviderT": {
  "data": {
   "shadows": "libcst.metadata.ProviderT"
  },
  "type": "import"
 },
 "libcst.codemod.commands.remove_unused_imports.RemoveImportsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors.RemoveImportsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.commands.remove_unused_imports.RemoveUnusedImportsCommand": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "libcst.codemod.VisitorBasedCodemodCommand": {
     "line number": [
      21
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      36
     ]
    },
    "libcst.metadata.ProviderT": {
     "line number": [
      36
     ]
    },
    "str": {
     "line number": [
      31
     ]
    },
    "typing.Tuple": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.remove_unused_imports.RemoveUnusedImportsCommand.__init__": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "int": {
     "line number": [
      40
     ]
    },
    "libcst.codemod.CodemodContext": {
     "line number": [
      38
     ]
    },
    "set": {
     "line number": [
      40
     ]
    },
    "super": {
     "line number": [
      39
     ]
    },
    "typing.Set": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.remove_unused_imports.RemoveUnusedImportsCommand._handle_import": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      82
     ]
    },
    "isinstance": {
     "line number": [
      64,
      71
     ]
    },
    "libcst.Import": {
     "line number": [
      58,
      71
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      58
     ]
    },
    "libcst.ImportStar": {
     "line number": [
      64
     ]
    },
    "libcst.codemod.visitors.RemoveImportsVisitor.remove_unused_import": {
     "line number": [
      72,
      85
     ]
    },
    "libcst.helpers.get_absolute_module_for_import": {
     "line number": [
      78
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      59,
      68
     ]
    },
    "range": {
     "line number": [
      69
     ]
    },
    "set": {
     "line number": [
      69
     ]
    },
    "typing.Union": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.remove_unused_imports.RemoveUnusedImportsCommand.visit_Import": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      50
     ]
    },
    "libcst.Import": {
     "line number": [
      50
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.remove_unused_imports.RemoveUnusedImportsCommand.visit_ImportFrom": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      54
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      54
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.remove_unused_imports.RemoveUnusedImportsCommand.visit_Module": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      42
     ]
    },
    "libcst.Module": {
     "line number": [
      42
     ]
    },
    "libcst.codemod.commands.remove_unused_imports.DEFAULT_SUPPRESS_COMMENT_REGEX": {
     "line number": [
      44
     ]
    },
    "libcst.codemod.visitors.GatherCommentsVisitor": {
     "line number": [
      43
     ]
    },
    "set": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.remove_unused_imports.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "libcst.codemod.commands.remove_unused_imports.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst.codemod.commands.remove_unused_imports.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.codemod.commands.remove_unused_imports.VisitorBasedCodemodCommand": {
  "data": {
   "shadows": "libcst.codemod.VisitorBasedCodemodCommand"
  },
  "type": "import"
 },
 "libcst.codemod.commands.remove_unused_imports.get_absolute_module_for_import": {
  "data": {
   "shadows": "libcst.helpers.get_absolute_module_for_import"
  },
  "type": "import"
 },
 "libcst.codemod.commands.rename": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.commands.rename.AddImportsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors.AddImportsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.commands.rename.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst.codemod.commands.rename.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod.commands.rename.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.codemod.commands.rename.QualifiedNameProvider": {
  "data": {
   "shadows": "libcst.metadata.QualifiedNameProvider"
  },
  "type": "import"
 },
 "libcst.codemod.commands.rename.RemoveImportsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors.RemoveImportsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.commands.rename.RenameCommand": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "libcst.codemod.VisitorBasedCodemodCommand": {
     "line number": [
      35
     ]
    },
    "libcst.metadata.QualifiedNameProvider": {
     "line number": [
      42
     ]
    },
    "str": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.rename.RenameCommand.__init__": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      71,
      73
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      99
     ]
    },
    "libcst.codemod.CodemodContext": {
     "line number": [
      65
     ]
    },
    "set": {
     "line number": [
      99
     ]
    },
    "str": {
     "line number": [
      65,
      65,
      78,
      79,
      80,
      91,
      92,
      93,
      95,
      95
     ]
    },
    "super": {
     "line number": [
      66
     ]
    },
    "typing.Optional": {
     "line number": [
      95
     ]
    },
    "typing.Set": {
     "line number": [
      99
     ]
    },
    "typing.Tuple": {
     "line number": [
      95
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.rename.RenameCommand.add_args": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": {
    "libcst.codemod.commands.rename.argparse": {
     "line number": [
      45
     ]
    },
    "staticmethod": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.rename.RenameCommand.gen_name_or_attr_node": {
  "data": {
   "lineno": 319,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      324
     ]
    },
    "isinstance": {
     "line number": [
      323
     ]
    },
    "libcst.Attribute": {
     "line number": [
      323,
      321
     ]
    },
    "libcst.BaseExpression": {
     "line number": [
      322
     ]
    },
    "libcst.Name": {
     "line number": [
      323,
      321
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      322
     ]
    },
    "str": {
     "line number": [
      320
     ]
    },
    "typing.Union": {
     "line number": [
      321
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.rename.RenameCommand.gen_replacement": {
  "data": {
   "lineno": 297,
   "symbols_in_volume": {
    "str": {
     "line number": [
      297,
      297
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.rename.RenameCommand.gen_replacement_module": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": {
    "str": {
     "line number": [
      316,
      316
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.rename.RenameCommand.leave_Attribute": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      255
     ]
    },
    "bool": {
     "line number": [
      259
     ]
    },
    "libcst.Attribute": {
     "line number": [
      251,
      251,
      252
     ]
    },
    "libcst.Name": {
     "line number": [
      271,
      252
     ]
    },
    "libcst.helpers.get_full_name_for_node": {
     "line number": [
      253
     ]
    },
    "libcst.metadata.QualifiedNameProvider": {
     "line number": [
      260
     ]
    },
    "libcst.metadata.QualifiedNameProvider.has_name": {
     "line number": [
      262
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      270
     ]
    },
    "set": {
     "line number": [
      260
     ]
    },
    "typing.Union": {
     "line number": [
      252
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.rename.RenameCommand.leave_Import": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      124
     ]
    },
    "isinstance": {
     "line number": [
      126,
      140
     ]
    },
    "libcst.Attribute": {
     "line number": [
      141,
      147
     ]
    },
    "libcst.Import": {
     "line number": [
      117,
      117,
      118
     ]
    },
    "libcst.ImportAlias": {
     "line number": [
      133,
      151
     ]
    },
    "libcst.Name": {
     "line number": [
      126,
      134,
      147
     ]
    },
    "libcst.codemod.commands.rename.leave_import_decorator": {
     "line number": [
      115
     ]
    },
    "libcst.helpers.get_full_name_for_node": {
     "line number": [
      122
     ]
    },
    "typing.Union": {
     "line number": [
      146
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.rename.RenameCommand.leave_ImportFrom": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      182
     ]
    },
    "len": {
     "line number": [
      208
     ]
    },
    "libcst.Attribute": {
     "line number": [
      205
     ]
    },
    "libcst.ImportAlias": {
     "line number": [
      212,
      218
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      174,
      174,
      175
     ]
    },
    "libcst.Name": {
     "line number": [
      205
     ]
    },
    "libcst.codemod.commands.rename.leave_import_decorator": {
     "line number": [
      172
     ]
    },
    "libcst.helpers.get_full_name_for_node": {
     "line number": [
      179,
      188
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      211
     ]
    },
    "typing.Sequence": {
     "line number": [
      182
     ]
    },
    "typing.Union": {
     "line number": [
      204
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.rename.RenameCommand.leave_Module": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      279,
      279,
      280
     ]
    },
    "libcst.codemod.visitors.AddImportsVisitor.add_needed_import": {
     "line number": [
      292
     ]
    },
    "libcst.codemod.visitors.RemoveImportsVisitor.remove_unused_import_by_node": {
     "line number": [
      282
     ]
    },
    "str": {
     "line number": [
      289
     ]
    },
    "typing.Optional": {
     "line number": [
      289
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.rename.RenameCommand.leave_Name": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      236
     ]
    },
    "libcst.Attribute": {
     "line number": [
      231
     ]
    },
    "libcst.Name": {
     "line number": [
      230,
      230,
      231
     ]
    },
    "libcst.metadata.QualifiedNameProvider": {
     "line number": [
      237
     ]
    },
    "libcst.metadata.QualifiedNameProvider.has_name": {
     "line number": [
      239
     ]
    },
    "set": {
     "line number": [
      237
     ]
    },
    "str": {
     "line number": [
      232
     ]
    },
    "typing.Union": {
     "line number": [
      231
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.rename.RenameCommand.record_asname": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      332,
      336,
      354
     ]
    },
    "libcst.Attribute": {
     "line number": [
      355
     ]
    },
    "libcst.Import": {
     "line number": [
      329
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      329,
      336
     ]
    },
    "libcst.Name": {
     "line number": [
      355
     ]
    },
    "libcst.helpers.get_full_name_for_node": {
     "line number": [
      335,
      340,
      357
     ]
    },
    "typing.Sequence": {
     "line number": [
      332
     ]
    },
    "typing.Union": {
     "line number": [
      329
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.rename.RenameCommand.visit_Import": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "libcst.Import": {
     "line number": [
      104
     ]
    },
    "libcst.helpers.get_full_name_for_node": {
     "line number": [
      106
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.rename.RenameCommand.visit_ImportFrom": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": {
    "libcst.ImportFrom": {
     "line number": [
      158
     ]
    },
    "libcst.helpers.get_full_name_for_node": {
     "line number": [
      162
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.rename.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst.codemod.commands.rename.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "libcst.codemod.commands.rename.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst.codemod.commands.rename.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.codemod.commands.rename.VisitorBasedCodemodCommand": {
  "data": {
   "shadows": "libcst.codemod.VisitorBasedCodemodCommand"
  },
  "type": "import"
 },
 "libcst.codemod.commands.rename.argparse": {
  "data": {
   "shadows": "argparse"
  },
  "type": "import"
 },
 "libcst.codemod.commands.rename.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.codemod.commands.rename.get_full_name_for_node": {
  "data": {
   "shadows": "libcst.helpers.get_full_name_for_node"
  },
  "type": "import"
 },
 "libcst.codemod.commands.rename.leave_import_decorator": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "libcst.Import": {
     "line number": [
      18,
      19
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      18,
      19
     ]
    },
    "typing.Callable": {
     "line number": [
      18,
      19
     ]
    },
    "typing.Union": {
     "line number": [
      18,
      19
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.rename.leave_import_decorator.wrapper": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "libcst.Import": {
     "line number": [
      24,
      25,
      26
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      24,
      25,
      26
     ]
    },
    "method": {
     "line number": [
      27
     ]
    },
    "typing.Union": {
     "line number": [
      24,
      25,
      26
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.strip_strings_from_types": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.commands.strip_strings_from_types.AddImportsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors.AddImportsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.commands.strip_strings_from_types.QualifiedNameProvider": {
  "data": {
   "shadows": "libcst.metadata.QualifiedNameProvider"
  },
  "type": "import"
 },
 "libcst.codemod.commands.strip_strings_from_types.StripStringsCommand": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.codemod.VisitorBasedCodemodCommand": {
     "line number": [
      16
     ]
    },
    "libcst.metadata.QualifiedNameProvider": {
     "line number": [
      20
     ]
    },
    "str": {
     "line number": [
      18
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.strip_strings_from_types.StripStringsCommand.leave_SimpleString": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "any": {
     "line number": [
      34
     ]
    },
    "libcst.codemod.commands.strip_strings_from_types.libcst": {
     "line number": [
      42,
      42,
      43,
      43
     ]
    },
    "libcst.codemod.visitors.AddImportsVisitor.add_needed_import": {
     "line number": [
      44
     ]
    },
    "libcst.matchers.Annotation": {
     "line number": [
      24
     ]
    },
    "libcst.matchers.MatchMetadataIfTrue": {
     "line number": [
      32
     ]
    },
    "libcst.matchers.Subscript": {
     "line number": [
      28
     ]
    },
    "libcst.matchers.call_if_inside": {
     "line number": [
      24
     ]
    },
    "libcst.matchers.call_if_not_inside": {
     "line number": [
      27
     ]
    },
    "libcst.metadata.QualifiedNameProvider": {
     "line number": [
      33
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      47
     ]
    },
    "typing.Union": {
     "line number": [
      43
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.strip_strings_from_types.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.codemod.commands.strip_strings_from_types.VisitorBasedCodemodCommand": {
  "data": {
   "shadows": "libcst.codemod.VisitorBasedCodemodCommand"
  },
  "type": "import"
 },
 "libcst.codemod.commands.strip_strings_from_types.libcst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.codemod.commands.strip_strings_from_types.m": {
  "data": {
   "shadows": "libcst.matchers"
  },
  "type": "import"
 },
 "libcst.codemod.commands.strip_strings_from_types.parse_expression": {
  "data": {
   "shadows": "libcst.parse_expression"
  },
  "type": "import"
 },
 "libcst.codemod.commands.tests": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.commands.tests.test_add_pyre_directive": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.commands.tests.test_add_pyre_directive.AddPyreUnsafeCommand": {
  "data": {
   "shadows": "libcst.codemod.commands.add_pyre_directive.AddPyreUnsafeCommand"
  },
  "type": "import"
 },
 "libcst.codemod.commands.tests.test_add_pyre_directive.CodemodTest": {
  "data": {
   "shadows": "libcst.codemod.CodemodTest"
  },
  "type": "import"
 },
 "libcst.codemod.commands.tests.test_add_pyre_directive.TestAddPyreUnsafeCommand": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "libcst.codemod.CodemodTest": {
     "line number": [
      10
     ]
    },
    "libcst.codemod.commands.add_pyre_directive.AddPyreUnsafeCommand": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.tests.test_add_pyre_directive.TestAddPyreUnsafeCommand.test_add_to_file": {
  "data": {
   "lineno": 14
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_add_pyre_directive.TestAddPyreUnsafeCommand.test_add_to_file_with_comment": {
  "data": {
   "lineno": 86
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_add_pyre_directive.TestAddPyreUnsafeCommand.test_add_to_file_with_import": {
  "data": {
   "lineno": 107
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_add_pyre_directive.TestAddPyreUnsafeCommand.test_add_to_file_with_pyre_unsafe": {
  "data": {
   "lineno": 26
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_add_pyre_directive.TestAddPyreUnsafeCommand.test_add_to_file_with_pyre_unsafe_after": {
  "data": {
   "lineno": 42
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_add_pyre_directive.TestAddPyreUnsafeCommand.test_add_to_file_with_pyre_unsafe_before": {
  "data": {
   "lineno": 60
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_add_pyre_directive.TestAddPyreUnsafeCommand.test_empty_file": {
  "data": {
   "lineno": 78
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_convert_format_to_fstring": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.commands.tests.test_convert_format_to_fstring.CodemodTest": {
  "data": {
   "shadows": "libcst.codemod.CodemodTest"
  },
  "type": "import"
 },
 "libcst.codemod.commands.tests.test_convert_format_to_fstring.ConvertFormatStringCommand": {
  "data": {
   "shadows": "libcst.codemod.commands.convert_format_to_fstring.ConvertFormatStringCommand"
  },
  "type": "import"
 },
 "libcst.codemod.commands.tests.test_convert_format_to_fstring.ConvertFormatStringCommandTest": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "libcst.codemod.CodemodTest": {
     "line number": [
      10
     ]
    },
    "libcst.codemod.commands.convert_format_to_fstring.ConvertFormatStringCommand": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.tests.test_convert_format_to_fstring.ConvertFormatStringCommandTest.test_enable_unsupported_await": {
  "data": {
   "lineno": 156
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_convert_format_to_fstring.ConvertFormatStringCommandTest.test_enable_unsupported_comments": {
  "data": {
   "lineno": 134
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_convert_format_to_fstring.ConvertFormatStringCommandTest.test_formatspec_conversion": {
  "data": {
   "lineno": 174
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_convert_format_to_fstring.ConvertFormatStringCommandTest.test_name_replacement": {
  "data": {
   "lineno": 243
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_convert_format_to_fstring.ConvertFormatStringCommandTest.test_noop": {
  "data": {
   "lineno": 14
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_convert_format_to_fstring.ConvertFormatStringCommandTest.test_position_replacement": {
  "data": {
   "lineno": 209
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_convert_format_to_fstring.ConvertFormatStringCommandTest.test_replacement_with_conversion": {
  "data": {
   "lineno": 339
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_convert_format_to_fstring.ConvertFormatStringCommandTest.test_replacement_with_dict": {
  "data": {
   "lineno": 402
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_convert_format_to_fstring.ConvertFormatStringCommandTest.test_replacement_with_escapes": {
  "data": {
   "lineno": 265
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_convert_format_to_fstring.ConvertFormatStringCommandTest.test_replacement_with_expression": {
  "data": {
   "lineno": 305
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_convert_format_to_fstring.ConvertFormatStringCommandTest.test_replacement_with_newline": {
  "data": {
   "lineno": 355
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_convert_format_to_fstring.ConvertFormatStringCommandTest.test_replacement_with_string": {
  "data": {
   "lineno": 374
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_convert_format_to_fstring.ConvertFormatStringCommandTest.test_unsupported_expansion": {
  "data": {
   "lineno": 36
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_convert_format_to_fstring.ConvertFormatStringCommandTest.test_unsupported_expression": {
  "data": {
   "lineno": 65
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_convert_namedtuple_to_dataclass": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.commands.tests.test_convert_namedtuple_to_dataclass.CodemodTest": {
  "data": {
   "shadows": "libcst.codemod.CodemodTest"
  },
  "type": "import"
 },
 "libcst.codemod.commands.tests.test_convert_namedtuple_to_dataclass.ConvertNamedTupleToDataclassCommand": {
  "data": {
   "shadows": "libcst.codemod.commands.convert_namedtuple_to_dataclass.ConvertNamedTupleToDataclassCommand"
  },
  "type": "import"
 },
 "libcst.codemod.commands.tests.test_convert_namedtuple_to_dataclass.ConvertNamedTupleToDataclassCommandTest": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "libcst.codemod.CodemodTest": {
     "line number": [
      12
     ]
    },
    "libcst.codemod.commands.convert_namedtuple_to_dataclass.ConvertNamedTupleToDataclassCommand": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.tests.test_convert_namedtuple_to_dataclass.ConvertNamedTupleToDataclassCommandTest.test_aliased_module_import": {
  "data": {
   "lineno": 138
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_convert_namedtuple_to_dataclass.ConvertNamedTupleToDataclassCommandTest.test_aliased_object_import": {
  "data": {
   "lineno": 118
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_convert_namedtuple_to_dataclass.ConvertNamedTupleToDataclassCommandTest.test_change": {
  "data": {
   "lineno": 33
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_convert_namedtuple_to_dataclass.ConvertNamedTupleToDataclassCommandTest.test_multiple_bases": {
  "data": {
   "lineno": 76
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_convert_namedtuple_to_dataclass.ConvertNamedTupleToDataclassCommandTest.test_nested_classes": {
  "data": {
   "lineno": 96
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_convert_namedtuple_to_dataclass.ConvertNamedTupleToDataclassCommandTest.test_no_change": {
  "data": {
   "lineno": 16
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_convert_namedtuple_to_dataclass.ConvertNamedTupleToDataclassCommandTest.test_other_unused_imports_not_removed": {
  "data": {
   "lineno": 158
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_convert_namedtuple_to_dataclass.ConvertNamedTupleToDataclassCommandTest.test_with_decorator_already": {
  "data": {
   "lineno": 54
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_convert_percent_format_to_fstring": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.commands.tests.test_convert_percent_format_to_fstring.CodemodTest": {
  "data": {
   "shadows": "libcst.codemod.CodemodTest"
  },
  "type": "import"
 },
 "libcst.codemod.commands.tests.test_convert_percent_format_to_fstring.ConvertPercentFormatStringCommand": {
  "data": {
   "shadows": "libcst.codemod.commands.convert_percent_format_to_fstring.ConvertPercentFormatStringCommand"
  },
  "type": "import"
 },
 "libcst.codemod.commands.tests.test_convert_percent_format_to_fstring.ConvertPercentFormatStringCommandTest": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "libcst.codemod.CodemodTest": {
     "line number": [
      12
     ]
    },
    "libcst.codemod.commands.convert_percent_format_to_fstring.ConvertPercentFormatStringCommand": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.tests.test_convert_percent_format_to_fstring.ConvertPercentFormatStringCommandTest.test_escaping": {
  "data": {
   "lineno": 33
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_convert_percent_format_to_fstring.ConvertPercentFormatStringCommandTest.test_not_supported_case": {
  "data": {
   "lineno": 44
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_convert_percent_format_to_fstring.ConvertPercentFormatStringCommandTest.test_simple_cases": {
  "data": {
   "lineno": 15
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_ensure_import_present": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.commands.tests.test_ensure_import_present.CodemodTest": {
  "data": {
   "shadows": "libcst.codemod.CodemodTest"
  },
  "type": "import"
 },
 "libcst.codemod.commands.tests.test_ensure_import_present.EnsureImportPresentCommand": {
  "data": {
   "shadows": "libcst.codemod.commands.ensure_import_present.EnsureImportPresentCommand"
  },
  "type": "import"
 },
 "libcst.codemod.commands.tests.test_ensure_import_present.EnsureImportPresentCommandTest": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "libcst.codemod.CodemodTest": {
     "line number": [
      10
     ]
    },
    "libcst.codemod.commands.ensure_import_present.EnsureImportPresentCommand": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.tests.test_ensure_import_present.EnsureImportPresentCommandTest.test_import_entity": {
  "data": {
   "lineno": 18
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_ensure_import_present.EnsureImportPresentCommandTest.test_import_entity_aliased": {
  "data": {
   "lineno": 33
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_ensure_import_present.EnsureImportPresentCommandTest.test_import_module": {
  "data": {
   "lineno": 13
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_ensure_import_present.EnsureImportPresentCommandTest.test_import_module_aliased": {
  "data": {
   "lineno": 28
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_ensure_import_present.EnsureImportPresentCommandTest.test_import_wildcard": {
  "data": {
   "lineno": 23
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_fix_pyre_directives": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.commands.tests.test_fix_pyre_directives.CodemodTest": {
  "data": {
   "shadows": "libcst.codemod.CodemodTest"
  },
  "type": "import"
 },
 "libcst.codemod.commands.tests.test_fix_pyre_directives.FixPyreDirectivesCommand": {
  "data": {
   "shadows": "libcst.codemod.commands.fix_pyre_directives.FixPyreDirectivesCommand"
  },
  "type": "import"
 },
 "libcst.codemod.commands.tests.test_fix_pyre_directives.TestFixPyreDirectivesCommand": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "libcst.codemod.CodemodTest": {
     "line number": [
      10
     ]
    },
    "libcst.codemod.commands.fix_pyre_directives.FixPyreDirectivesCommand": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.tests.test_fix_pyre_directives.TestFixPyreDirectivesCommand.test_fix_body_duplicate": {
  "data": {
   "lineno": 145
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_fix_pyre_directives.TestFixPyreDirectivesCommand.test_fix_header_duplicate": {
  "data": {
   "lineno": 124
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_fix_pyre_directives.TestFixPyreDirectivesCommand.test_fix_misspelled_body": {
  "data": {
   "lineno": 104
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_fix_pyre_directives.TestFixPyreDirectivesCommand.test_fix_misspelled_header": {
  "data": {
   "lineno": 84
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_fix_pyre_directives.TestFixPyreDirectivesCommand.test_fix_misspelled_header_duplicate": {
  "data": {
   "lineno": 170
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_fix_pyre_directives.TestFixPyreDirectivesCommand.test_fix_misspelled_header_duplicate_body": {
  "data": {
   "lineno": 191
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_fix_pyre_directives.TestFixPyreDirectivesCommand.test_fix_wrong_location": {
  "data": {
   "lineno": 212
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_fix_pyre_directives.TestFixPyreDirectivesCommand.test_no_need_to_fix_complex_bottom": {
  "data": {
   "lineno": 34
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_fix_pyre_directives.TestFixPyreDirectivesCommand.test_no_need_to_fix_complex_top": {
  "data": {
   "lineno": 58
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_fix_pyre_directives.TestFixPyreDirectivesCommand.test_no_need_to_fix_simple": {
  "data": {
   "lineno": 14
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_noop": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.commands.tests.test_noop.CodemodTest": {
  "data": {
   "shadows": "libcst.codemod.CodemodTest"
  },
  "type": "import"
 },
 "libcst.codemod.commands.tests.test_noop.NOOPCommand": {
  "data": {
   "shadows": "libcst.codemod.commands.noop.NOOPCommand"
  },
  "type": "import"
 },
 "libcst.codemod.commands.tests.test_noop.TestNOOPCodemod": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "libcst.codemod.CodemodTest": {
     "line number": [
      10
     ]
    },
    "libcst.codemod.commands.noop.NOOPCommand": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.tests.test_noop.TestNOOPCodemod.test_noop": {
  "data": {
   "lineno": 14
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_remove_pyre_directive": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.commands.tests.test_remove_pyre_directive.CodemodTest": {
  "data": {
   "shadows": "libcst.codemod.CodemodTest"
  },
  "type": "import"
 },
 "libcst.codemod.commands.tests.test_remove_pyre_directive.RemovePyreStrictCommand": {
  "data": {
   "shadows": "libcst.codemod.commands.remove_pyre_directive.RemovePyreStrictCommand"
  },
  "type": "import"
 },
 "libcst.codemod.commands.tests.test_remove_pyre_directive.RemovePyreUnsafeCommand": {
  "data": {
   "shadows": "libcst.codemod.commands.remove_pyre_directive.RemovePyreUnsafeCommand"
  },
  "type": "import"
 },
 "libcst.codemod.commands.tests.test_remove_pyre_directive.TestRemovePyreStrictCommand": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "libcst.codemod.CodemodTest": {
     "line number": [
      13
     ]
    },
    "libcst.codemod.commands.remove_pyre_directive.RemovePyreStrictCommand": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.tests.test_remove_pyre_directive.TestRemovePyreStrictCommand.test_remove_from_file": {
  "data": {
   "lineno": 17
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_remove_pyre_directive.TestRemovePyreStrictCommand.test_remove_from_file_with_comment": {
  "data": {
   "lineno": 77
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_remove_pyre_directive.TestRemovePyreStrictCommand.test_remove_from_file_with_pyre_strict_after": {
  "data": {
   "lineno": 43
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_remove_pyre_directive.TestRemovePyreStrictCommand.test_remove_from_file_with_pyre_strict_before": {
  "data": {
   "lineno": 60
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_remove_pyre_directive.TestRemovePyreStrictCommand.test_remove_from_file_without_pyre_strict": {
  "data": {
   "lineno": 29
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_remove_pyre_directive.TestRemovePyreUnsafeCommand": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": {
    "libcst.codemod.CodemodTest": {
     "line number": [
      99
     ]
    },
    "libcst.codemod.commands.remove_pyre_directive.RemovePyreUnsafeCommand": {
     "line number": [
      101
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.tests.test_remove_pyre_directive.TestRemovePyreUnsafeCommand.test_remove_from_file": {
  "data": {
   "lineno": 103
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_remove_pyre_directive.TestRemovePyreUnsafeCommand.test_remove_from_file_with_comment": {
  "data": {
   "lineno": 163
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_remove_pyre_directive.TestRemovePyreUnsafeCommand.test_remove_from_file_with_pyre_unsafe_after": {
  "data": {
   "lineno": 129
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_remove_pyre_directive.TestRemovePyreUnsafeCommand.test_remove_from_file_with_pyre_unsafe_before": {
  "data": {
   "lineno": 146
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_remove_pyre_directive.TestRemovePyreUnsafeCommand.test_remove_from_file_without_pyre_unsafe": {
  "data": {
   "lineno": 115
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_remove_unused_imports": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.commands.tests.test_remove_unused_imports.CodemodTest": {
  "data": {
   "shadows": "libcst.codemod.CodemodTest"
  },
  "type": "import"
 },
 "libcst.codemod.commands.tests.test_remove_unused_imports.RemoveUnusedImportsCommand": {
  "data": {
   "shadows": "libcst.codemod.commands.remove_unused_imports.RemoveUnusedImportsCommand"
  },
  "type": "import"
 },
 "libcst.codemod.commands.tests.test_remove_unused_imports.RemoveUnusedImportsCommandTest": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "libcst.codemod.CodemodTest": {
     "line number": [
      11
     ]
    },
    "libcst.codemod.commands.remove_unused_imports.RemoveUnusedImportsCommand": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.tests.test_remove_unused_imports.RemoveUnusedImportsCommandTest.test_access_in_assignment": {
  "data": {
   "lineno": 90
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_remove_unused_imports.RemoveUnusedImportsCommandTest.test_conditional_import": {
  "data": {
   "lineno": 23
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_remove_unused_imports.RemoveUnusedImportsCommandTest.test_dotted_imports": {
  "data": {
   "lineno": 51
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_remove_unused_imports.RemoveUnusedImportsCommandTest.test_double_import": {
  "data": {
   "lineno": 19
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_remove_unused_imports.RemoveUnusedImportsCommandTest.test_enclosed_attributes": {
  "data": {
   "lineno": 80
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_remove_unused_imports.RemoveUnusedImportsCommandTest.test_no_formatting_if_no_unused_imports": {
  "data": {
   "lineno": 97
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_remove_unused_imports.RemoveUnusedImportsCommandTest.test_simple_case": {
  "data": {
   "lineno": 14
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_remove_unused_imports.RemoveUnusedImportsCommandTest.test_suppression": {
  "data": {
   "lineno": 115
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_remove_unused_imports.RemoveUnusedImportsCommandTest.test_suppression_on_first_line_of_multiline_import_refers_to_whole_block": {
  "data": {
   "lineno": 104
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_remove_unused_imports.RemoveUnusedImportsCommandTest.test_type_annotations": {
  "data": {
   "lineno": 44
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_remove_unused_imports.RemoveUnusedImportsCommandTest.test_unused_in_conditional": {
  "data": {
   "lineno": 33
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.commands.tests.test_rename.CodemodTest": {
  "data": {
   "shadows": "libcst.codemod.CodemodTest"
  },
  "type": "import"
 },
 "libcst.codemod.commands.tests.test_rename.RenameCommand": {
  "data": {
   "shadows": "libcst.codemod.commands.rename.RenameCommand"
  },
  "type": "import"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "libcst.codemod.CodemodTest": {
     "line number": [
      12
     ]
    },
    "libcst.codemod.commands.rename.RenameCommand": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_complex_module_rename": {
  "data": {
   "lineno": 397
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_complex_module_rename_with_asname": {
  "data": {
   "lineno": 412
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_input_with_colon_sep": {
  "data": {
   "lineno": 542
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_input_with_colon_sep_at_the_end": {
  "data": {
   "lineno": 557
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_input_with_colon_sep_at_the_front": {
  "data": {
   "lineno": 572
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_module_does_not_change": {
  "data": {
   "lineno": 264
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_names_with_repeated_substrings": {
  "data": {
   "lineno": 427
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_no_change_because_no_match_was_found": {
  "data": {
   "lineno": 588
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_no_codemod": {
  "data": {
   "lineno": 461
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_no_removal_of_dotted_import_in_use": {
  "data": {
   "lineno": 339
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_no_removal_of_import_from_in_use": {
  "data": {
   "lineno": 360
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_no_removal_of_import_in_use": {
  "data": {
   "lineno": 318
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_other_import_froms_untouched": {
  "data": {
   "lineno": 298
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_other_imports_untouched": {
  "data": {
   "lineno": 279
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_other_unused_imports_untouched": {
  "data": {
   "lineno": 378
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_rename_attr": {
  "data": {
   "lineno": 69
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_rename_attr_asname": {
  "data": {
   "lineno": 88
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_rename_class": {
  "data": {
   "lineno": 191
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_rename_import_from_prefix": {
  "data": {
   "lineno": 483
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_rename_import_prefix": {
  "data": {
   "lineno": 472
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_rename_importfrom_same_module": {
  "data": {
   "lineno": 208
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_rename_importfrom_same_module_2": {
  "data": {
   "lineno": 225
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_rename_local_variable": {
  "data": {
   "lineno": 250
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_rename_module_import": {
  "data": {
   "lineno": 107
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_rename_module_import_2": {
  "data": {
   "lineno": 125
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_rename_module_import_from": {
  "data": {
   "lineno": 155
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_rename_module_import_from_2": {
  "data": {
   "lineno": 173
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_rename_module_import_no_change": {
  "data": {
   "lineno": 143
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_rename_multiple_imports": {
  "data": {
   "lineno": 515
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_rename_multiple_occurrences": {
  "data": {
   "lineno": 494
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_rename_name": {
  "data": {
   "lineno": 16
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_rename_name_asname": {
  "data": {
   "lineno": 33
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_rename_repeated_name_with_asname": {
  "data": {
   "lineno": 52
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_rename.TestRenameCommand.test_repeated_name": {
  "data": {
   "lineno": 444
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_strip_strings_from_types": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.commands.tests.test_strip_strings_from_types.CodemodTest": {
  "data": {
   "shadows": "libcst.codemod.CodemodTest"
  },
  "type": "import"
 },
 "libcst.codemod.commands.tests.test_strip_strings_from_types.StripStringsCommand": {
  "data": {
   "shadows": "libcst.codemod.commands.strip_strings_from_types.StripStringsCommand"
  },
  "type": "import"
 },
 "libcst.codemod.commands.tests.test_strip_strings_from_types.TestStripStringsCodemod": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "libcst.codemod.CodemodTest": {
     "line number": [
      10
     ]
    },
    "libcst.codemod.commands.strip_strings_from_types.StripStringsCommand": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.tests.test_strip_strings_from_types.TestStripStringsCodemod.test_async": {
  "data": {
   "lineno": 62
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_strip_strings_from_types.TestStripStringsCodemod.test_literal": {
  "data": {
   "lineno": 116
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_strip_strings_from_types.TestStripStringsCodemod.test_literal_alias": {
  "data": {
   "lineno": 145
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_strip_strings_from_types.TestStripStringsCodemod.test_literal_object": {
  "data": {
   "lineno": 174
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_strip_strings_from_types.TestStripStringsCodemod.test_literal_object_alias": {
  "data": {
   "lineno": 203
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_strip_strings_from_types.TestStripStringsCodemod.test_non_async": {
  "data": {
   "lineno": 40
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_strip_strings_from_types.TestStripStringsCodemod.test_noop": {
  "data": {
   "lineno": 14
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_strip_strings_from_types.TestStripStringsCodemod.test_recursive": {
  "data": {
   "lineno": 84
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_unnecessary_format_string": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.commands.tests.test_unnecessary_format_string.Codemod": {
  "data": {
   "shadows": "libcst.codemod.Codemod"
  },
  "type": "import"
 },
 "libcst.codemod.commands.tests.test_unnecessary_format_string.CodemodTest": {
  "data": {
   "shadows": "libcst.codemod.CodemodTest"
  },
  "type": "import"
 },
 "libcst.codemod.commands.tests.test_unnecessary_format_string.TestUnnecessaryFormatString": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "libcst.codemod.Codemod": {
     "line number": [
      13
     ]
    },
    "libcst.codemod.CodemodTest": {
     "line number": [
      12
     ]
    },
    "libcst.codemod.commands.unnecessary_format_string.UnnecessaryFormatString": {
     "line number": [
      13
     ]
    },
    "typing.Type": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.tests.test_unnecessary_format_string.TestUnnecessaryFormatString.test_replace": {
  "data": {
   "lineno": 15
  },
  "type": "function"
 },
 "libcst.codemod.commands.tests.test_unnecessary_format_string.Type": {
  "data": {
   "shadows": "typing.Type"
  },
  "type": "import"
 },
 "libcst.codemod.commands.tests.test_unnecessary_format_string.UnnecessaryFormatString": {
  "data": {
   "shadows": "libcst.codemod.commands.unnecessary_format_string.UnnecessaryFormatString"
  },
  "type": "import"
 },
 "libcst.codemod.commands.unnecessary_format_string": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.commands.unnecessary_format_string.UnnecessaryFormatString": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "libcst.codemod.VisitorBasedCodemodCommand": {
     "line number": [
      11
     ]
    },
    "str": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.commands.unnecessary_format_string.UnnecessaryFormatString._check_formatted_string": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "eval": {
     "line number": [
      35,
      36
     ]
    },
    "libcst.codemod.commands.unnecessary_format_string.libcst": {
     "line number": [
      18,
      19,
      21,
      22,
      46,
      20
     ]
    },
    "libcst.matchers.FormattedString": {
     "line number": [
      15
     ]
    },
    "libcst.matchers.FormattedStringText": {
     "line number": [
      15
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.commands.unnecessary_format_string.VisitorBasedCodemodCommand": {
  "data": {
   "shadows": "libcst.codemod.VisitorBasedCodemodCommand"
  },
  "type": "import"
 },
 "libcst.codemod.commands.unnecessary_format_string.libcst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.codemod.commands.unnecessary_format_string.m": {
  "data": {
   "shadows": "libcst.matchers"
  },
  "type": "import"
 },
 "libcst.codemod.diff_code": {
  "data": {
   "shadows": "libcst.codemod._cli.diff_code"
  },
  "type": "import"
 },
 "libcst.codemod.exec_transform_with_prettyprint": {
  "data": {
   "shadows": "libcst.codemod._cli.exec_transform_with_prettyprint"
  },
  "type": "import"
 },
 "libcst.codemod.gather_files": {
  "data": {
   "shadows": "libcst.codemod._cli.gather_files"
  },
  "type": "import"
 },
 "libcst.codemod.parallel_exec_transform_with_prettyprint": {
  "data": {
   "shadows": "libcst.codemod._cli.parallel_exec_transform_with_prettyprint"
  },
  "type": "import"
 },
 "libcst.codemod.tests": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.tests.test_cli": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.tests.test_cli.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_cli.TestPackageCalculation": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.tests.test_cli.TestPackageCalculation.test_calculate_module": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "libcst.codemod._cli._calculate_module": {
     "line number": [
      45
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      13
     ]
    },
    "str": {
     "line number": [
      43,
      43,
      43
     ]
    },
    "typing.Optional": {
     "line number": [
      43
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.tests.test_cli.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_cli._calculate_module": {
  "data": {
   "shadows": "libcst.codemod._cli._calculate_module"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_cli.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_codemod": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.tests.test_codemod.Codemod": {
  "data": {
   "shadows": "libcst.codemod.Codemod"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_codemod.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_codemod.CodemodTest": {
  "data": {
   "shadows": "libcst.codemod.CodemodTest"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_codemod.IncrementCodemod": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": {
    "libcst.codemod.Codemod": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.tests.test_codemod.IncrementCodemod.__init__": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "int": {
     "line number": [
      67
     ]
    },
    "libcst.codemod.CodemodContext": {
     "line number": [
      67
     ]
    },
    "super": {
     "line number": [
      68
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.tests.test_codemod.IncrementCodemod.should_allow_multiple_passes": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      71
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.tests.test_codemod.IncrementCodemod.transform_module_impl": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": {
    "int": {
     "line number": [
      83
     ]
    },
    "libcst.Module": {
     "line number": [
      74,
      85,
      74
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      79
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      82
     ]
    },
    "libcst.matchers.replace": {
     "line number": [
      80
     ]
    },
    "str": {
     "line number": [
      83
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.tests.test_codemod.SimpleCodemod": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "libcst.codemod.Codemod": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.tests.test_codemod.SimpleCodemod.__init__": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      14
     ]
    },
    "libcst.codemod.CodemodContext": {
     "line number": [
      14
     ]
    },
    "super": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.tests.test_codemod.SimpleCodemod.transform_module_impl": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      18,
      18
     ]
    },
    "libcst.codemod.SkipFile": {
     "line number": [
      20
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.tests.test_codemod.SkipFile": {
  "data": {
   "shadows": "libcst.codemod.SkipFile"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_codemod.TestMultipass": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "libcst.codemod.CodemodTest": {
     "line number": [
      89
     ]
    },
    "libcst.codemod.tests.test_codemod.IncrementCodemod": {
     "line number": [
      91
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.tests.test_codemod.TestMultipass.test_multi_iterations": {
  "data": {
   "lineno": 93
  },
  "type": "function"
 },
 "libcst.codemod.tests.test_codemod.TestSkipDetection": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": {
    "libcst.codemod.CodemodTest": {
     "line number": [
      25
     ]
    },
    "libcst.codemod.tests.test_codemod.SimpleCodemod": {
     "line number": [
      27
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.tests.test_codemod.TestSkipDetection.test_detect_skip": {
  "data": {
   "lineno": 29
  },
  "type": "function"
 },
 "libcst.codemod.tests.test_codemod.TestSkipDetection.test_did_not_skip_but_should": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "unittest.expectedFailure": {
     "line number": [
      41
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.tests.test_codemod.TestSkipDetection.test_skipped_but_should_not": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "unittest.expectedFailure": {
     "line number": [
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.tests.test_codemod.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_codemod.expectedFailure": {
  "data": {
   "shadows": "unittest.expectedFailure"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_codemod.m": {
  "data": {
   "shadows": "libcst.matchers"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_codemod_cli": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.tests.test_codemod_cli.TestCodemodCLI": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.tests.test_codemod_cli.TestCodemodCLI.test_codemod_formatter_error_input": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst.codemod.tests.test_codemod_cli.subprocess": {
     "line number": [
      16,
      25,
      26
     ]
    },
    "libcst.codemod.tests.test_codemod_cli.sys": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.tests.test_codemod_cli.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_codemod_cli.subprocess": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_codemod_cli.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_metadata": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.tests.test_metadata.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_metadata.ContextAwareTransformer": {
  "data": {
   "shadows": "libcst.codemod.ContextAwareTransformer"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_metadata.ContextAwareVisitor": {
  "data": {
   "shadows": "libcst.codemod.ContextAwareVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_metadata.PositionProvider": {
  "data": {
   "shadows": "libcst.metadata.PositionProvider"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_metadata.TestMetadata": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.tests.test_metadata.TestMetadata.test_metadata_works": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "libcst.codemod.CodemodContext": {
     "line number": [
      47
     ]
    },
    "libcst.codemod.tests.test_metadata.TestingTransform": {
     "line number": [
      48
     ]
    },
    "libcst.parse_module": {
     "line number": [
      46
     ]
    },
    "textwrap.dedent": {
     "line number": [
      46
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.tests.test_metadata.TestingCollector": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst.codemod.ContextAwareVisitor": {
     "line number": [
      15
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.tests.test_metadata.TestingCollector.visit_Pass": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      19
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      20
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.tests.test_metadata.TestingTransform": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "libcst.codemod.ContextAwareTransformer": {
     "line number": [
      24
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.tests.test_metadata.TestingTransform.visit_FunctionDef": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      28
     ]
    },
    "libcst.codemod.tests.test_metadata.TestingCollector": {
     "line number": [
      34
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.tests.test_metadata.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_metadata.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_metadata.dedent": {
  "data": {
   "shadows": "textwrap.dedent"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_metadata.parse_module": {
  "data": {
   "shadows": "libcst.parse_module"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_runner": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.tests.test_runner.Codemod": {
  "data": {
   "shadows": "libcst.codemod.Codemod"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_runner.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_runner.CodemodTest": {
  "data": {
   "shadows": "libcst.codemod.CodemodTest"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_runner.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_runner.SkipFile": {
  "data": {
   "shadows": "libcst.codemod.SkipFile"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_runner.TestRunner": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "libcst.codemod.CodemodTest": {
     "line number": [
      23
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.tests.test_runner.TestRunner.test_runner_default": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "SimpleCodemod": {
     "line number": [
      48
     ]
    },
    "isinstance": {
     "line number": [
      51
     ]
    },
    "libcst.codemod.CodemodContext": {
     "line number": [
      48
     ]
    },
    "libcst.codemod.TransformSuccess": {
     "line number": [
      50,
      51
     ]
    },
    "libcst.codemod.transform_module": {
     "line number": [
      49
     ]
    },
    "textwrap.dedent": {
     "line number": [
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.tests.test_runner.TestRunner.test_runner_default.SimpleCodemod": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "libcst.codemod.Codemod": {
     "line number": [
      41
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.tests.test_runner.TestRunner.test_runner_default.SimpleCodemod.transform_module_impl": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "libcst.Comment": {
     "line number": [
      45
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      45
     ]
    },
    "libcst.Module": {
     "line number": [
      42,
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.tests.test_runner.TestRunner.test_runner_failure": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      112
     ]
    },
    "SimpleCodemod": {
     "line number": [
      107
     ]
    },
    "isinstance": {
     "line number": [
      110
     ]
    },
    "libcst.codemod.CodemodContext": {
     "line number": [
      107
     ]
    },
    "libcst.codemod.TransformFailure": {
     "line number": [
      109,
      110
     ]
    },
    "libcst.codemod.transform_module": {
     "line number": [
      108
     ]
    },
    "textwrap.dedent": {
     "line number": [
      108
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.tests.test_runner.TestRunner.test_runner_failure.SimpleCodemod": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": {
    "libcst.codemod.Codemod": {
     "line number": [
      100
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.tests.test_runner.TestRunner.test_runner_failure.SimpleCodemod.transform_module_impl": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      101,
      101
     ]
    },
    "str": {
     "line number": [
      103,
      103
     ]
    },
    "typing.Dict": {
     "line number": [
      103
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.tests.test_runner.TestRunner.test_runner_interrupted": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "SimpleCodemod": {
     "line number": [
      68
     ]
    },
    "libcst.codemod.CodemodContext": {
     "line number": [
      68
     ]
    },
    "libcst.codemod.TransformExit": {
     "line number": [
      70
     ]
    },
    "libcst.codemod.transform_module": {
     "line number": [
      69
     ]
    },
    "textwrap.dedent": {
     "line number": [
      69
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.tests.test_runner.TestRunner.test_runner_interrupted.SimpleCodemod": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": {
    "libcst.codemod.Codemod": {
     "line number": [
      64
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.tests.test_runner.TestRunner.test_runner_interrupted.SimpleCodemod.transform_module_impl": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": {
    "KeyboardInterrupt": {
     "line number": [
      66
     ]
    },
    "libcst.Module": {
     "line number": [
      65,
      65
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.tests.test_runner.TestRunner.test_runner_skip": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": {
    "SimpleCodemod": {
     "line number": [
      86
     ]
    },
    "libcst.codemod.CodemodContext": {
     "line number": [
      86
     ]
    },
    "libcst.codemod.TransformSkip": {
     "line number": [
      88
     ]
    },
    "libcst.codemod.transform_module": {
     "line number": [
      87
     ]
    },
    "textwrap.dedent": {
     "line number": [
      87
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.tests.test_runner.TestRunner.test_runner_skip.SimpleCodemod": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": {
    "libcst.codemod.Codemod": {
     "line number": [
      81
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.tests.test_runner.TestRunner.test_runner_skip.SimpleCodemod.transform_module_impl": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      82,
      82
     ]
    },
    "libcst.codemod.SkipFile": {
     "line number": [
      84
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.tests.test_runner.TransformExit": {
  "data": {
   "shadows": "libcst.codemod.TransformExit"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_runner.TransformFailure": {
  "data": {
   "shadows": "libcst.codemod.TransformFailure"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_runner.TransformSkip": {
  "data": {
   "shadows": "libcst.codemod.TransformSkip"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_runner.TransformSuccess": {
  "data": {
   "shadows": "libcst.codemod.TransformSuccess"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_runner.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_runner.dedent": {
  "data": {
   "shadows": "textwrap.dedent"
  },
  "type": "import"
 },
 "libcst.codemod.tests.test_runner.transform_module": {
  "data": {
   "shadows": "libcst.codemod.transform_module"
  },
  "type": "import"
 },
 "libcst.codemod.transform_module": {
  "data": {
   "shadows": "libcst.codemod._runner.transform_module"
  },
  "type": "import"
 },
 "libcst.codemod.visitors": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.visitors.AddImportsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors._add_imports.AddImportsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.ApplyTypeAnnotationsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors._apply_type_annotations.ApplyTypeAnnotationsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.GatherCommentsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors._gather_comments.GatherCommentsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.GatherExportsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors._gather_exports.GatherExportsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.GatherImportsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors._gather_imports.GatherImportsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.GatherNamesFromStringAnnotationsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors._gather_string_annotation_names.GatherNamesFromStringAnnotationsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.GatherUnusedImportsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors._gather_unused_imports.GatherUnusedImportsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.RemoveImportsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors._remove_imports.RemoveImportsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.__all__": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "libcst.codemod.visitors._add_imports": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.visitors._add_imports.AddImportsVisitor": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "libcst.codemod._visitor.ContextAwareTransformer": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.visitors._add_imports.AddImportsVisitor.__init__": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      118,
      120
     ]
    },
    "libcst.codemod._context.CodemodContext": {
     "line number": [
      104
     ]
    },
    "libcst.codemod.visitors._add_imports.AddImportsVisitor": {
     "line number": [
      111
     ]
    },
    "libcst.codemod.visitors._add_imports.libcst": {
     "line number": [
      166,
      166
     ]
    },
    "libcst.matchers": {
     "line number": [
      137,
      138,
      159,
      160
     ]
    },
    "sorted": {
     "line number": [
      140,
      162
     ]
    },
    "str": {
     "line number": [
      105,
      105,
      105,
      110,
      110,
      110,
      123,
      128,
      134,
      134,
      144,
      144,
      150,
      156,
      156,
      156
     ]
    },
    "super": {
     "line number": [
      109
     ]
    },
    "typing.Dict": {
     "line number": [
      134,
      144,
      156
     ]
    },
    "typing.List": {
     "line number": [
      110,
      156,
      166
     ]
    },
    "typing.Optional": {
     "line number": [
      105,
      105,
      110,
      110
     ]
    },
    "typing.Sequence": {
     "line number": [
      105
     ]
    },
    "typing.Set": {
     "line number": [
      123,
      128,
      134,
      150
     ]
    },
    "typing.Tuple": {
     "line number": [
      105,
      110,
      156
     ]
    },
    "typing.Union": {
     "line number": [
      166
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._add_imports.AddImportsVisitor._get_imports_from_context": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      69
     ]
    },
    "isinstance": {
     "line number": [
      68
     ]
    },
    "libcst.codemod._context.CodemodContext": {
     "line number": [
      65
     ]
    },
    "libcst.codemod.visitors._add_imports.AddImportsVisitor": {
     "line number": [
      67
     ]
    },
    "list": {
     "line number": [
      68
     ]
    },
    "staticmethod": {
     "line number": [
      63
     ]
    },
    "str": {
     "line number": [
      66,
      66,
      66
     ]
    },
    "typing.List": {
     "line number": [
      66
     ]
    },
    "typing.Optional": {
     "line number": [
      66,
      66
     ]
    },
    "typing.Tuple": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._add_imports.AddImportsVisitor._insert_empty_line": {
  "data": {
   "lineno": 300,
   "symbols_in_volume": {
    "len": {
     "line number": [
      306,
      309
     ]
    },
    "libcst.codemod.visitors._add_imports.libcst": {
     "line number": [
      303,
      303,
      312,
      321,
      305,
      305
     ]
    },
    "typing.List": {
     "line number": [
      302,
      305
     ]
    },
    "typing.Union": {
     "line number": [
      303,
      305
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._add_imports.AddImportsVisitor._split_module": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      278
     ]
    },
    "isinstance": {
     "line number": [
      283
     ]
    },
    "libcst.codemod.visitors._add_imports.libcst": {
     "line number": [
      247,
      247,
      283,
      249,
      249,
      250,
      250,
      251,
      251
     ]
    },
    "libcst.matchers.Assign": {
     "line number": [
      263
     ]
    },
    "libcst.matchers.AssignTarget": {
     "line number": [
      264
     ]
    },
    "libcst.matchers.Expr": {
     "line number": [
      280
     ]
    },
    "libcst.matchers.Module": {
     "line number": [
      259
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      264
     ]
    },
    "libcst.matchers.SimpleStatementLine": {
     "line number": [
      261,
      280
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      280
     ]
    },
    "libcst.matchers.ZeroOrMore": {
     "line number": [
      268
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      257,
      279
     ]
    },
    "list": {
     "line number": [
      291,
      292,
      297
     ]
    },
    "typing.List": {
     "line number": [
      249,
      250,
      251
     ]
    },
    "typing.Tuple": {
     "line number": [
      248
     ]
    },
    "typing.Union": {
     "line number": [
      249,
      250,
      251
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._add_imports.AddImportsVisitor.add_needed_import": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      97
     ]
    },
    "libcst.codemod._context.CodemodContext": {
     "line number": [
      74
     ]
    },
    "libcst.codemod.visitors._add_imports.AddImportsVisitor": {
     "line number": [
      98,
      100
     ]
    },
    "staticmethod": {
     "line number": [
      72
     ]
    },
    "str": {
     "line number": [
      75,
      76,
      77
     ]
    },
    "typing.Optional": {
     "line number": [
      76,
      77
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._add_imports.AddImportsVisitor.leave_ImportFrom": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      205
     ]
    },
    "libcst.codemod.visitors._add_imports.libcst": {
     "line number": [
      203,
      203,
      205,
      232,
      232,
      236,
      237,
      238,
      238,
      204
     ]
    },
    "libcst.helpers.get_absolute_module_for_import": {
     "line number": [
      210
     ]
    },
    "sorted": {
     "line number": [
      233,
      240
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._add_imports.AddImportsVisitor.leave_Module": {
  "data": {
   "lineno": 326,
   "symbols_in_volume": {
    "aliases": {
     "line number": [
      350,
      351,
      357,
      358,
      371,
      376,
      399,
      404
     ]
    },
    "collections.defaultdict": {
     "line number": [
      349
     ]
    },
    "libcst.codemod.visitors._add_imports.libcst": {
     "line number": [
      327,
      327,
      328
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      366,
      381,
      387,
      394
     ]
    },
    "list": {
     "line number": [
      349
     ]
    },
    "object": {
     "line number": [
      354,
      354
     ]
    },
    "sorted": {
     "line number": [
      357,
      384
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._add_imports.AddImportsVisitor.visit_Module": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": {
    "aliases": {
     "line number": [
      178,
      179
     ]
    },
    "len": {
     "line number": [
      185
     ]
    },
    "libcst.codemod.visitors._add_imports.libcst": {
     "line number": [
      168
     ]
    },
    "libcst.codemod.visitors._gather_imports.GatherImportsVisitor": {
     "line number": [
      170
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._add_imports.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod._context.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._add_imports.ContextAwareTransformer": {
  "data": {
   "shadows": "libcst.codemod._visitor.ContextAwareTransformer"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._add_imports.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._add_imports.GatherImportsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors._gather_imports.GatherImportsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._add_imports.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._add_imports.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._add_imports.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._add_imports.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._add_imports.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._add_imports.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._add_imports.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._add_imports.get_absolute_module_for_import": {
  "data": {
   "shadows": "libcst.helpers.get_absolute_module_for_import"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._add_imports.libcst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._add_imports.m": {
  "data": {
   "shadows": "libcst.matchers"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._add_imports.parse_statement": {
  "data": {
   "shadows": "libcst.parse_statement"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._apply_type_annotations": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.visitors._apply_type_annotations.AddImportsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors._add_imports.AddImportsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._apply_type_annotations.Annotations": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      192
     ]
    },
    "dataclasses.field": {
     "line number": [
      194,
      195,
      196
     ]
    },
    "dict": {
     "line number": [
      194,
      195,
      196
     ]
    },
    "libcst.Annotation": {
     "line number": [
      195
     ]
    },
    "libcst.ClassDef": {
     "line number": [
      196
     ]
    },
    "libcst.codemod.visitors._apply_type_annotations.FunctionAnnotation": {
     "line number": [
      194
     ]
    },
    "str": {
     "line number": [
      194,
      195,
      196
     ]
    },
    "typing.Dict": {
     "line number": [
      194,
      195,
      196
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.visitors._apply_type_annotations.ApplyTypeAnnotationsVisitor": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": {
    "libcst.codemod._visitor.ContextAwareTransformer": {
     "line number": [
      199
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.visitors._apply_type_annotations.ApplyTypeAnnotationsVisitor.__init__": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      240
     ]
    },
    "libcst.Annotation": {
     "line number": [
      246
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      252
     ]
    },
    "libcst.codemod._context.CodemodContext": {
     "line number": [
      238
     ]
    },
    "libcst.codemod.visitors._apply_type_annotations.Annotations": {
     "line number": [
      239,
      245,
      245
     ]
    },
    "set": {
     "line number": [
      247
     ]
    },
    "str": {
     "line number": [
      244,
      246,
      247
     ]
    },
    "super": {
     "line number": [
      242
     ]
    },
    "typing.Dict": {
     "line number": [
      246
     ]
    },
    "typing.List": {
     "line number": [
      244,
      252
     ]
    },
    "typing.Optional": {
     "line number": [
      239
     ]
    },
    "typing.Set": {
     "line number": [
      247
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.ApplyTypeAnnotationsVisitor._add_to_toplevel_annotations": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": {
    "str": {
     "line number": [
      369
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.ApplyTypeAnnotationsVisitor._annotate_single_target": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      321,
      327,
      333
     ]
    },
    "libcst.AnnAssign": {
     "line number": [
      340,
      319
     ]
    },
    "libcst.Assign": {
     "line number": [
      318,
      318,
      319
     ]
    },
    "libcst.List": {
     "line number": [
      321
     ]
    },
    "libcst.Name": {
     "line number": [
      340
     ]
    },
    "libcst.Subscript": {
     "line number": [
      327,
      334
     ]
    },
    "libcst.Tuple": {
     "line number": [
      321
     ]
    },
    "libcst.helpers.get_full_name_for_node": {
     "line number": [
      324,
      330
     ]
    },
    "typing.Union": {
     "line number": [
      319
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.ApplyTypeAnnotationsVisitor._insert_empty_line": {
  "data": {
   "lineno": 414,
   "symbols_in_volume": {
    "len": {
     "line number": [
      418,
      421
     ]
    },
    "libcst.BaseCompoundStatement": {
     "line number": [
      416,
      417
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      424,
      433
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      416,
      417
     ]
    },
    "typing.List": {
     "line number": [
      416,
      417
     ]
    },
    "typing.Union": {
     "line number": [
      416,
      417
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.ApplyTypeAnnotationsVisitor._qualifier_name": {
  "data": {
   "lineno": 314,
   "symbols_in_volume": {
    "str": {
     "line number": [
      314
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.ApplyTypeAnnotationsVisitor._split_module": {
  "data": {
   "lineno": 345,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      356
     ]
    },
    "isinstance": {
     "line number": [
      357
     ]
    },
    "libcst.BaseCompoundStatement": {
     "line number": [
      348,
      349
     ]
    },
    "libcst.Module": {
     "line number": [
      346,
      346
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      357,
      348,
      349
     ]
    },
    "list": {
     "line number": [
      365,
      366
     ]
    },
    "typing.List": {
     "line number": [
      348,
      349
     ]
    },
    "typing.Tuple": {
     "line number": [
      347
     ]
    },
    "typing.Union": {
     "line number": [
      348,
      349
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.ApplyTypeAnnotationsVisitor._update_parameters": {
  "data": {
   "lineno": 376,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      377
     ]
    },
    "libcst.Parameters": {
     "line number": [
      378
     ]
    },
    "libcst.codemod.visitors._apply_type_annotations.FunctionAnnotation": {
     "line number": [
      377
     ]
    },
    "update_annotation": {
     "line number": [
      402,
      405,
      408
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.ApplyTypeAnnotationsVisitor._update_parameters.update_annotation": {
  "data": {
   "lineno": 382,
   "symbols_in_volume": {
    "libcst.Param": {
     "line number": [
      383,
      383,
      384
     ]
    },
    "typing.List": {
     "line number": [
      384
     ]
    },
    "typing.Sequence": {
     "line number": [
      383,
      383
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.ApplyTypeAnnotationsVisitor.leave_Assign": {
  "data": {
   "lineno": 471,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      478
     ]
    },
    "len": {
     "line number": [
      475
     ]
    },
    "libcst.AnnAssign": {
     "line number": [
      473
     ]
    },
    "libcst.Assign": {
     "line number": [
      472,
      472,
      473
     ]
    },
    "libcst.Attribute": {
     "line number": [
      478
     ]
    },
    "libcst.Name": {
     "line number": [
      478
     ]
    },
    "libcst.helpers.get_full_name_for_node": {
     "line number": [
      479
     ]
    },
    "typing.Union": {
     "line number": [
      473
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.ApplyTypeAnnotationsVisitor.leave_ClassDef": {
  "data": {
   "lineno": 442,
   "symbols_in_volume": {
    "libcst.ClassDef": {
     "line number": [
      443,
      443,
      444
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.ApplyTypeAnnotationsVisitor.leave_FunctionDef": {
  "data": {
   "lineno": 453,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      454,
      454,
      455
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.ApplyTypeAnnotationsVisitor.leave_ImportFrom": {
  "data": {
   "lineno": 488,
   "symbols_in_volume": {
    "libcst.ImportFrom": {
     "line number": [
      489,
      489,
      490
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.ApplyTypeAnnotationsVisitor.leave_Module": {
  "data": {
   "lineno": 494,
   "symbols_in_volume": {
    "libcst.AnnAssign": {
     "line number": [
      514
     ]
    },
    "libcst.Module": {
     "line number": [
      495,
      495,
      496
     ]
    },
    "libcst.Name": {
     "line number": [
      514
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      515
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.ApplyTypeAnnotationsVisitor.store_stub_in_context": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      269
     ]
    },
    "libcst.Module": {
     "line number": [
      268
     ]
    },
    "libcst.codemod._context.CodemodContext": {
     "line number": [
      267
     ]
    },
    "libcst.codemod.visitors._apply_type_annotations.ApplyTypeAnnotationsVisitor": {
     "line number": [
      282
     ]
    },
    "staticmethod": {
     "line number": [
      265
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.ApplyTypeAnnotationsVisitor.transform_module_impl": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      287,
      287
     ]
    },
    "libcst.codemod._context.CodemodContext": {
     "line number": [
      293
     ]
    },
    "libcst.codemod.visitors._add_imports.AddImportsVisitor": {
     "line number": [
      311
     ]
    },
    "libcst.codemod.visitors._apply_type_annotations.ApplyTypeAnnotationsVisitor": {
     "line number": [
      298
     ]
    },
    "libcst.codemod.visitors._apply_type_annotations.TypeCollector": {
     "line number": [
      305
     ]
    },
    "libcst.codemod.visitors._apply_type_annotations._get_import_names": {
     "line number": [
      295
     ]
    },
    "libcst.codemod.visitors._gather_imports.GatherImportsVisitor": {
     "line number": [
      293
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.ApplyTypeAnnotationsVisitor.visit_ClassDef": {
  "data": {
   "lineno": 438,
   "symbols_in_volume": {
    "libcst.ClassDef": {
     "line number": [
      438
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.ApplyTypeAnnotationsVisitor.visit_FunctionDef": {
  "data": {
   "lineno": 448,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      448
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      448
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod._context.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._apply_type_annotations.ContextAwareTransformer": {
  "data": {
   "shadows": "libcst.codemod._visitor.ContextAwareTransformer"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._apply_type_annotations.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._apply_type_annotations.FunctionAnnotation": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      42
     ]
    },
    "libcst.Annotation": {
     "line number": [
      45
     ]
    },
    "libcst.Parameters": {
     "line number": [
      44
     ]
    },
    "typing.Optional": {
     "line number": [
      45
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.visitors._apply_type_annotations.GatherImportsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors._gather_imports.GatherImportsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._apply_type_annotations.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._apply_type_annotations.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._apply_type_annotations.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._apply_type_annotations.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._apply_type_annotations.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._apply_type_annotations.TypeCollector": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "libcst.CSTVisitor": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.visitors._apply_type_annotations.TypeCollector.__init__": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "libcst.Annotation": {
     "line number": [
      58
     ]
    },
    "libcst.ClassDef": {
     "line number": [
      60
     ]
    },
    "libcst.codemod._context.CodemodContext": {
     "line number": [
      53
     ]
    },
    "libcst.codemod.visitors._apply_type_annotations.FunctionAnnotation": {
     "line number": [
      57
     ]
    },
    "str": {
     "line number": [
      53,
      55,
      57,
      58,
      59,
      60
     ]
    },
    "typing.Dict": {
     "line number": [
      57,
      58,
      60
     ]
    },
    "typing.List": {
     "line number": [
      55
     ]
    },
    "typing.Set": {
     "line number": [
      53,
      59
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.TypeCollector._add_annotation_to_imports": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": {
    "libcst.Attribute": {
     "line number": [
      112,
      113
     ]
    },
    "libcst.Name": {
     "line number": [
      113
     ]
    },
    "libcst.codemod.visitors._add_imports.AddImportsVisitor.add_needed_import": {
     "line number": [
      121
     ]
    },
    "libcst.helpers.get_full_name_for_node": {
     "line number": [
      114,
      119
     ]
    },
    "typing.Union": {
     "line number": [
      113
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.TypeCollector._create_import_from_annotation": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      164,
      167
     ]
    },
    "libcst.Annotation": {
     "line number": [
      162,
      166,
      171,
      162
     ]
    },
    "libcst.Attribute": {
     "line number": [
      164
     ]
    },
    "libcst.Subscript": {
     "line number": [
      167
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      169
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      169
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.TypeCollector._handle_Index": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      126,
      129
     ]
    },
    "libcst.Attribute": {
     "line number": [
      129
     ]
    },
    "libcst.Index": {
     "line number": [
      124
     ]
    },
    "libcst.Subscript": {
     "line number": [
      124,
      126,
      124
     ]
    },
    "slice.value": {
     "line number": [
      125
     ]
    },
    "slice.with_changes": {
     "line number": [
      127,
      130
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.TypeCollector._handle_Subscript": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      139,
      143,
      148,
      148,
      157
     ]
    },
    "libcst.Attribute": {
     "line number": [
      143
     ]
    },
    "libcst.Index": {
     "line number": [
      148,
      157
     ]
    },
    "libcst.Name": {
     "line number": [
      149
     ]
    },
    "libcst.Subscript": {
     "line number": [
      135,
      135
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      137
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      137
     ]
    },
    "list": {
     "line number": [
      139
     ]
    },
    "slice": {
     "line number": [
      136,
      139,
      141,
      157,
      158
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.TypeCollector._import_parameter_annotations": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": {
    "libcst.Parameters": {
     "line number": [
      176,
      177
     ]
    },
    "update_annotations": {
     "line number": [
      189
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.TypeCollector._import_parameter_annotations.update_annotations": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": {
    "libcst.Param": {
     "line number": [
      178,
      178
     ]
    },
    "list": {
     "line number": [
      180
     ]
    },
    "typing.List": {
     "line number": [
      178
     ]
    },
    "typing.Sequence": {
     "line number": [
      178
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.TypeCollector.leave_AnnAssign": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": {
    "libcst.AnnAssign": {
     "line number": [
      93
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.TypeCollector.leave_ClassDef": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "libcst.ClassDef": {
     "line number": [
      67
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.TypeCollector.leave_FunctionDef": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      82
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.TypeCollector.visit_AnnAssign": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      85
     ]
    },
    "libcst.AnnAssign": {
     "line number": [
      85
     ]
    },
    "libcst.helpers.get_full_name_for_node": {
     "line number": [
      86
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.TypeCollector.visit_ClassDef": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "libcst.ClassDef": {
     "line number": [
      63
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.TypeCollector.visit_FunctionDef": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      70
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      70
     ]
    },
    "libcst.codemod.visitors._apply_type_annotations.FunctionAnnotation": {
     "line number": [
      76
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.TypeCollector.visit_ImportFrom": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      102
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      96
     ]
    },
    "libcst.ImportStar": {
     "line number": [
      102
     ]
    },
    "libcst.codemod.visitors._add_imports.AddImportsVisitor.add_needed_import": {
     "line number": [
      107
     ]
    },
    "libcst.codemod.visitors._apply_type_annotations._get_import_alias_names": {
     "line number": [
      106
     ]
    },
    "libcst.helpers.get_full_name_for_node": {
     "line number": [
      104
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._apply_type_annotations._get_import_alias_names": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "libcst.ImportAlias": {
     "line number": [
      19
     ]
    },
    "libcst.helpers.get_full_name_for_node": {
     "line number": [
      24,
      26
     ]
    },
    "set": {
     "line number": [
      20
     ]
    },
    "str": {
     "line number": [
      19
     ]
    },
    "typing.Sequence": {
     "line number": [
      19
     ]
    },
    "typing.Set": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations._get_import_names": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      33,
      37
     ]
    },
    "libcst.Import": {
     "line number": [
      30,
      33
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      30
     ]
    },
    "libcst.ImportStar": {
     "line number": [
      37
     ]
    },
    "libcst.codemod.visitors._apply_type_annotations._get_import_alias_names": {
     "line number": [
      34,
      38
     ]
    },
    "set": {
     "line number": [
      31
     ]
    },
    "str": {
     "line number": [
      30
     ]
    },
    "typing.Sequence": {
     "line number": [
      30
     ]
    },
    "typing.Set": {
     "line number": [
      30
     ]
    },
    "typing.Union": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._apply_type_annotations.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._apply_type_annotations.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._apply_type_annotations.field": {
  "data": {
   "shadows": "dataclasses.field"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._apply_type_annotations.get_full_name_for_node": {
  "data": {
   "shadows": "libcst.helpers.get_full_name_for_node"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._apply_type_annotations.m": {
  "data": {
   "shadows": "libcst.matchers"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_comments": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.visitors._gather_comments.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod._context.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_comments.ContextAwareVisitor": {
  "data": {
   "shadows": "libcst.codemod._visitor.ContextAwareVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_comments.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_comments.GatherCommentsVisitor": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst.codemod._visitor.ContextAwareVisitor": {
     "line number": [
      15
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.visitors._gather_comments.GatherCommentsVisitor.__init__": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "int": {
     "line number": [
      35
     ]
    },
    "libcst.Comment": {
     "line number": [
      35
     ]
    },
    "libcst.codemod._context.CodemodContext": {
     "line number": [
      30
     ]
    },
    "libcst.codemod.visitors._gather_comments.re": {
     "line number": [
      37
     ]
    },
    "str": {
     "line number": [
      30,
      37
     ]
    },
    "super": {
     "line number": [
      31
     ]
    },
    "typing.Dict": {
     "line number": [
      35
     ]
    },
    "typing.Pattern": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_comments.GatherCommentsVisitor.handle_comment": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      57
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      50,
      57
     ]
    },
    "libcst.TrailingWhitespace": {
     "line number": [
      50
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      56
     ]
    },
    "typing.Union": {
     "line number": [
      50
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_comments.GatherCommentsVisitor.visit_EmptyLine": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      39
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_comments.GatherCommentsVisitor.visit_TrailingWhitespace": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      44
     ]
    },
    "libcst.TrailingWhitespace": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_comments.Pattern": {
  "data": {
   "shadows": "typing.Pattern"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_comments.PositionProvider": {
  "data": {
   "shadows": "libcst.metadata.PositionProvider"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_comments.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_comments.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_comments.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_exports": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.visitors._gather_exports.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod._context.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_exports.ContextAwareVisitor": {
  "data": {
   "shadows": "libcst.codemod._visitor.ContextAwareVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_exports.GatherExportsVisitor": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "libcst.codemod._visitor.ContextAwareVisitor": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.visitors._gather_exports.GatherExportsVisitor.__init__": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "libcst.List": {
     "line number": [
      46,
      47
     ]
    },
    "libcst.Set": {
     "line number": [
      46,
      47
     ]
    },
    "libcst.Tuple": {
     "line number": [
      46,
      47
     ]
    },
    "libcst.codemod._context.CodemodContext": {
     "line number": [
      32
     ]
    },
    "set": {
     "line number": [
      36,
      46,
      47
     ]
    },
    "str": {
     "line number": [
      36
     ]
    },
    "super": {
     "line number": [
      33
     ]
    },
    "typing.Set": {
     "line number": [
      36,
      46,
      47
     ]
    },
    "typing.Union": {
     "line number": [
      46,
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_exports.GatherExportsVisitor._handle_assign_target": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      64
     ]
    },
    "enumerate": {
     "line number": [
      74
     ]
    },
    "isinstance": {
     "line number": [
      69,
      72,
      72,
      78
     ]
    },
    "libcst.BaseExpression": {
     "line number": [
      63,
      63
     ]
    },
    "libcst.List": {
     "line number": [
      69,
      78
     ]
    },
    "libcst.Set": {
     "line number": [
      69,
      78
     ]
    },
    "libcst.Tuple": {
     "line number": [
      69,
      72,
      72,
      78
     ]
    },
    "libcst.helpers.get_full_name_for_node": {
     "line number": [
      65,
      75
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_exports.GatherExportsVisitor._handle_string_export": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": {
    "libcst.ConcatenatedString": {
     "line number": [
      123
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      123
     ]
    },
    "typing.Union": {
     "line number": [
      123
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_exports.GatherExportsVisitor.leave_List": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": {
    "libcst.List": {
     "line number": [
      90
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_exports.GatherExportsVisitor.leave_Set": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": {
    "libcst.Set": {
     "line number": [
      110
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_exports.GatherExportsVisitor.leave_Tuple": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": {
    "libcst.Tuple": {
     "line number": [
      100
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_exports.GatherExportsVisitor.visit_AnnAssign": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      49
     ]
    },
    "libcst.AnnAssign": {
     "line number": [
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_exports.GatherExportsVisitor.visit_Assign": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      56
     ]
    },
    "libcst.Assign": {
     "line number": [
      56
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_exports.GatherExportsVisitor.visit_ConcatenatedString": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      118
     ]
    },
    "libcst.ConcatenatedString": {
     "line number": [
      118
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_exports.GatherExportsVisitor.visit_List": {
  "data": {
   "lineno": 84,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      84
     ]
    },
    "libcst.List": {
     "line number": [
      84
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_exports.GatherExportsVisitor.visit_Set": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      104
     ]
    },
    "libcst.Set": {
     "line number": [
      104
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_exports.GatherExportsVisitor.visit_SimpleString": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      114
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      114
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_exports.GatherExportsVisitor.visit_Tuple": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      94
     ]
    },
    "libcst.Tuple": {
     "line number": [
      94
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_exports.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_exports.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_exports.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_exports.get_full_name_for_node": {
  "data": {
   "shadows": "libcst.helpers.get_full_name_for_node"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_imports": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.visitors._gather_imports.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod._context.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_imports.ContextAwareVisitor": {
  "data": {
   "shadows": "libcst.codemod._visitor.ContextAwareVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_imports.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_imports.GatherImportsVisitor": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "libcst.codemod._visitor.ContextAwareVisitor": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.visitors._gather_imports.GatherImportsVisitor.__init__": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "libcst.codemod._context.CodemodContext": {
     "line number": [
      53
     ]
    },
    "libcst.codemod.visitors._gather_imports.libcst": {
     "line number": [
      62,
      62
     ]
    },
    "set": {
     "line number": [
      56
     ]
    },
    "str": {
     "line number": [
      56,
      57,
      57,
      59,
      59,
      60,
      60,
      60
     ]
    },
    "super": {
     "line number": [
      54
     ]
    },
    "typing.Dict": {
     "line number": [
      57,
      59,
      60
     ]
    },
    "typing.List": {
     "line number": [
      60,
      62
     ]
    },
    "typing.Set": {
     "line number": [
      56,
      57
     ]
    },
    "typing.Tuple": {
     "line number": [
      60
     ]
    },
    "typing.Union": {
     "line number": [
      62
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_imports.GatherImportsVisitor.visit_Import": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": {
    "libcst.codemod.visitors._gather_imports.libcst": {
     "line number": [
      64
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_imports.GatherImportsVisitor.visit_ImportFrom": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      88,
      92
     ]
    },
    "libcst.codemod.visitors._gather_imports.libcst": {
     "line number": [
      77,
      88
     ]
    },
    "libcst.helpers.get_absolute_module_for_import": {
     "line number": [
      82
     ]
    },
    "set": {
     "line number": [
      90,
      109,
      113
     ]
    },
    "typing.Sequence": {
     "line number": [
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_imports.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_imports.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_imports.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_imports.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_imports.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_imports.get_absolute_module_for_import": {
  "data": {
   "shadows": "libcst.helpers.get_absolute_module_for_import"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_imports.libcst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_string_annotation_names": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.visitors._gather_string_annotation_names.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod._context.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_string_annotation_names.Collection": {
  "data": {
   "shadows": "typing.Collection"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_string_annotation_names.ContextAwareVisitor": {
  "data": {
   "shadows": "libcst.codemod._visitor.ContextAwareVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_string_annotation_names.FUNCS_CONSIDERED_AS_STRING_ANNOTATIONS": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "libcst.codemod.visitors._gather_string_annotation_names.GatherNamesFromStringAnnotationsVisitor": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "libcst.codemod._visitor.ContextAwareVisitor": {
     "line number": [
      18
     ]
    },
    "libcst.metadata.QualifiedNameProvider": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.visitors._gather_string_annotation_names.GatherNamesFromStringAnnotationsVisitor.__init__": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      37
     ]
    },
    "libcst.codemod._context.CodemodContext": {
     "line number": [
      32
     ]
    },
    "libcst.codemod.visitors._gather_string_annotation_names.FUNCS_CONSIDERED_AS_STRING_ANNOTATIONS": {
     "line number": [
      33
     ]
    },
    "set": {
     "line number": [
      39
     ]
    },
    "str": {
     "line number": [
      33,
      36,
      39
     ]
    },
    "super": {
     "line number": [
      35
     ]
    },
    "typing.Collection": {
     "line number": [
      33,
      36
     ]
    },
    "typing.List": {
     "line number": [
      37
     ]
    },
    "typing.Set": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_string_annotation_names.GatherNamesFromStringAnnotationsVisitor.handle_any_string": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      82
     ]
    },
    "libcst.Attribute": {
     "line number": [
      82,
      95
     ]
    },
    "libcst.ConcatenatedString": {
     "line number": [
      70
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      70
     ]
    },
    "libcst.matchers.Attribute": {
     "line number": [
      85
     ]
    },
    "libcst.matchers.DoNotCare": {
     "line number": [
      79
     ]
    },
    "libcst.matchers.MatchMetadataIfTrue": {
     "line number": [
      80
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      78
     ]
    },
    "libcst.matchers.SaveMatchedNode": {
     "line number": [
      79,
      85
     ]
    },
    "libcst.matchers.extractall": {
     "line number": [
      76
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      86
     ]
    },
    "libcst.metadata.ParentNodeProvider": {
     "line number": [
      81
     ]
    },
    "libcst.metadata.scope_provider._gen_dotted_names": {
     "line number": [
      94
     ]
    },
    "libcst.parse_module": {
     "line number": [
      75
     ]
    },
    "str": {
     "line number": [
      89
     ]
    },
    "typing.Union": {
     "line number": [
      70
     ]
    },
    "typing.cast": {
     "line number": [
      89,
      95
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_string_annotation_names.GatherNamesFromStringAnnotationsVisitor.leave_Annotation": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "libcst.Annotation": {
     "line number": [
      45
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_string_annotation_names.GatherNamesFromStringAnnotationsVisitor.leave_Call": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "libcst.Call": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_string_annotation_names.GatherNamesFromStringAnnotationsVisitor.visit_Annotation": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      41
     ]
    },
    "libcst.Annotation": {
     "line number": [
      41
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_string_annotation_names.GatherNamesFromStringAnnotationsVisitor.visit_Call": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "any": {
     "line number": [
      50
     ]
    },
    "bool": {
     "line number": [
      48
     ]
    },
    "libcst.Call": {
     "line number": [
      48
     ]
    },
    "libcst.metadata.QualifiedNameProvider": {
     "line number": [
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_string_annotation_names.GatherNamesFromStringAnnotationsVisitor.visit_ConcatenatedString": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      59
     ]
    },
    "libcst.ConcatenatedString": {
     "line number": [
      59
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_string_annotation_names.GatherNamesFromStringAnnotationsVisitor.visit_SimpleString": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      64
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      64
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_string_annotation_names.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_string_annotation_names.MetadataWrapper": {
  "data": {
   "shadows": "libcst.metadata.MetadataWrapper"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_string_annotation_names.QualifiedNameProvider": {
  "data": {
   "shadows": "libcst.metadata.QualifiedNameProvider"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_string_annotation_names.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_string_annotation_names.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_string_annotation_names.cast": {
  "data": {
   "shadows": "typing.cast"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_string_annotation_names.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_string_annotation_names.m": {
  "data": {
   "shadows": "libcst.matchers"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_unused_imports": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.visitors._gather_unused_imports.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod._context.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_unused_imports.Collection": {
  "data": {
   "shadows": "typing.Collection"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_unused_imports.ContextAwareVisitor": {
  "data": {
   "shadows": "libcst.codemod._visitor.ContextAwareVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_unused_imports.FUNCS_CONSIDERED_AS_STRING_ANNOTATIONS": {
  "data": {
   "shadows": "libcst.codemod.visitors._gather_string_annotation_names.FUNCS_CONSIDERED_AS_STRING_ANNOTATIONS"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_unused_imports.GatherExportsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors._gather_exports.GatherExportsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_unused_imports.GatherNamesFromStringAnnotationsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors._gather_string_annotation_names.GatherNamesFromStringAnnotationsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_unused_imports.GatherUnusedImportsVisitor": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "libcst.codemod._visitor.ContextAwareVisitor": {
     "line number": [
      24
     ]
    },
    "libcst.codemod.visitors._gather_string_annotation_names.GatherNamesFromStringAnnotationsVisitor.METADATA_DEPENDENCIES": {
     "line number": [
      39
     ]
    },
    "libcst.metadata.ProviderT": {
     "line number": [
      38
     ]
    },
    "libcst.metadata.ScopeProvider": {
     "line number": [
      40
     ]
    },
    "typing.Tuple": {
     "line number": [
      38
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.visitors._gather_unused_imports.GatherUnusedImportsVisitor.__init__": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "libcst.Import": {
     "line number": [
      58
     ]
    },
    "libcst.ImportAlias": {
     "line number": [
      58
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      58
     ]
    },
    "libcst.codemod._context.CodemodContext": {
     "line number": [
      45
     ]
    },
    "libcst.codemod.visitors._gather_string_annotation_names.FUNCS_CONSIDERED_AS_STRING_ANNOTATIONS": {
     "line number": [
      47
     ]
    },
    "libcst.codemod.visitors._gather_unused_imports.MODULES_IGNORED_BY_DEFAULT": {
     "line number": [
      46
     ]
    },
    "set": {
     "line number": [
      53,
      54,
      59
     ]
    },
    "str": {
     "line number": [
      46,
      47,
      51,
      53,
      54
     ]
    },
    "super": {
     "line number": [
      49
     ]
    },
    "typing.Collection": {
     "line number": [
      46,
      47,
      51
     ]
    },
    "typing.Set": {
     "line number": [
      53,
      54,
      57
     ]
    },
    "typing.Tuple": {
     "line number": [
      58
     ]
    },
    "typing.Union": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_unused_imports.GatherUnusedImportsVisitor.filter_unused_imports": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": {
    "libcst.Import": {
     "line number": [
      98,
      99
     ]
    },
    "libcst.ImportAlias": {
     "line number": [
      98,
      99
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      98,
      99
     ]
    },
    "libcst.metadata.ScopeProvider": {
     "line number": [
      109
     ]
    },
    "set": {
     "line number": [
      107
     ]
    },
    "typing.Iterable": {
     "line number": [
      98
     ]
    },
    "typing.Set": {
     "line number": [
      99
     ]
    },
    "typing.Tuple": {
     "line number": [
      98,
      99
     ]
    },
    "typing.Union": {
     "line number": [
      98,
      99
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_unused_imports.GatherUnusedImportsVisitor.handle_import": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      88
     ]
    },
    "libcst.Import": {
     "line number": [
      86
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      86
     ]
    },
    "libcst.ImportStar": {
     "line number": [
      88
     ]
    },
    "typing.Union": {
     "line number": [
      86
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_unused_imports.GatherUnusedImportsVisitor.is_in_use": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      116
     ]
    },
    "isinstance": {
     "line number": [
      138,
      139
     ]
    },
    "len": {
     "line number": [
      140
     ]
    },
    "libcst.Import": {
     "line number": [
      139
     ]
    },
    "libcst.ImportAlias": {
     "line number": [
      116
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      139
     ]
    },
    "libcst.Name": {
     "line number": [
      126
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      126
     ]
    },
    "libcst.metadata.Assignment": {
     "line number": [
      138
     ]
    },
    "libcst.metadata.Scope": {
     "line number": [
      116
     ]
    },
    "libcst.metadata.scope_provider._gen_dotted_names": {
     "line number": [
      125
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_unused_imports.GatherUnusedImportsVisitor.leave_Module": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      93
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_unused_imports.GatherUnusedImportsVisitor.visit_Import": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      72
     ]
    },
    "libcst.Import": {
     "line number": [
      72
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_unused_imports.GatherUnusedImportsVisitor.visit_ImportFrom": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      76
     ]
    },
    "isinstance": {
     "line number": [
      79
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      76
     ]
    },
    "libcst.ImportStar": {
     "line number": [
      79
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_unused_imports.GatherUnusedImportsVisitor.visit_Module": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      61
     ]
    },
    "libcst.Module": {
     "line number": [
      61
     ]
    },
    "libcst.codemod.visitors._gather_exports.GatherExportsVisitor": {
     "line number": [
      62
     ]
    },
    "libcst.codemod.visitors._gather_string_annotation_names.GatherNamesFromStringAnnotationsVisitor": {
     "line number": [
      65
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._gather_unused_imports.Iterable": {
  "data": {
   "shadows": "typing.Iterable"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_unused_imports.MODULES_IGNORED_BY_DEFAULT": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "libcst.codemod.visitors._gather_unused_imports.ProviderT": {
  "data": {
   "shadows": "libcst.metadata.ProviderT"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_unused_imports.ScopeProvider": {
  "data": {
   "shadows": "libcst.metadata.ScopeProvider"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_unused_imports.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_unused_imports.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_unused_imports.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_unused_imports._gen_dotted_names": {
  "data": {
   "shadows": "libcst.metadata.scope_provider._gen_dotted_names"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._gather_unused_imports.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._remove_imports": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.visitors._remove_imports.Assignment": {
  "data": {
   "shadows": "libcst.metadata.Assignment"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._remove_imports.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod._context.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._remove_imports.ContextAwareTransformer": {
  "data": {
   "shadows": "libcst.codemod._visitor.ContextAwareTransformer"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._remove_imports.ContextAwareVisitor": {
  "data": {
   "shadows": "libcst.codemod._visitor.ContextAwareVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._remove_imports.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._remove_imports.GatherUnusedImportsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors._gather_unused_imports.GatherUnusedImportsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._remove_imports.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._remove_imports.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._remove_imports.ProviderT": {
  "data": {
   "shadows": "libcst.metadata.ProviderT"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._remove_imports.RemoveImportsVisitor": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": {
    "libcst.codemod._visitor.ContextAwareTransformer": {
     "line number": [
      106
     ]
    },
    "libcst.codemod.visitors._gather_unused_imports.GatherUnusedImportsVisitor.METADATA_DEPENDENCIES": {
     "line number": [
      176
     ]
    },
    "libcst.metadata.ProviderT": {
     "line number": [
      175
     ]
    },
    "typing.Tuple": {
     "line number": [
      175
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.visitors._remove_imports.RemoveImportsVisitor.__init__": {
  "data": {
   "lineno": 266,
   "symbols_in_volume": {
    "libcst.Import": {
     "line number": [
      290
     ]
    },
    "libcst.ImportAlias": {
     "line number": [
      290
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      290
     ]
    },
    "libcst.codemod._context.CodemodContext": {
     "line number": [
      268
     ]
    },
    "libcst.codemod.visitors._remove_imports.RemoveImportsVisitor": {
     "line number": [
      276
     ]
    },
    "set": {
     "line number": [
      287
     ]
    },
    "str": {
     "line number": [
      269,
      269,
      269,
      275,
      275,
      275,
      279,
      279,
      282,
      282,
      282
     ]
    },
    "super": {
     "line number": [
      273
     ]
    },
    "typing.Dict": {
     "line number": [
      279,
      282,
      289
     ]
    },
    "typing.List": {
     "line number": [
      275
     ]
    },
    "typing.Optional": {
     "line number": [
      269,
      269,
      275,
      275,
      279,
      282
     ]
    },
    "typing.Sequence": {
     "line number": [
      269
     ]
    },
    "typing.Set": {
     "line number": [
      282
     ]
    },
    "typing.Tuple": {
     "line number": [
      269,
      275,
      282
     ]
    },
    "typing.Union": {
     "line number": [
      290
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._remove_imports.RemoveImportsVisitor._get_imports_from_context": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      185
     ]
    },
    "isinstance": {
     "line number": [
      184
     ]
    },
    "libcst.codemod._context.CodemodContext": {
     "line number": [
      181
     ]
    },
    "libcst.codemod.visitors._remove_imports.RemoveImportsVisitor": {
     "line number": [
      183
     ]
    },
    "list": {
     "line number": [
      184
     ]
    },
    "staticmethod": {
     "line number": [
      179
     ]
    },
    "str": {
     "line number": [
      182,
      182,
      182
     ]
    },
    "typing.List": {
     "line number": [
      182
     ]
    },
    "typing.Optional": {
     "line number": [
      182,
      182
     ]
    },
    "typing.Tuple": {
     "line number": [
      182
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._remove_imports.RemoveImportsVisitor.leave_Import": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": {
    "len": {
     "line number": [
      329
     ]
    },
    "libcst.Import": {
     "line number": [
      299,
      299,
      300
     ]
    },
    "libcst.MaybeSentinel.DEFAULT": {
     "line number": [
      336
     ]
    },
    "libcst.RemovalSentinel": {
     "line number": [
      300
     ]
    },
    "libcst.RemoveFromParent": {
     "line number": [
      330
     ]
    },
    "typing.Union": {
     "line number": [
      300
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._remove_imports.RemoveImportsVisitor.leave_ImportFrom": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      344
     ]
    },
    "len": {
     "line number": [
      383
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      341,
      341,
      342
     ]
    },
    "libcst.ImportStar": {
     "line number": [
      344
     ]
    },
    "libcst.MaybeSentinel.DEFAULT": {
     "line number": [
      390
     ]
    },
    "libcst.RemovalSentinel": {
     "line number": [
      342
     ]
    },
    "libcst.RemoveFromParent": {
     "line number": [
      384
     ]
    },
    "libcst.helpers.get_absolute_module_for_import": {
     "line number": [
      349
     ]
    },
    "typing.Union": {
     "line number": [
      342
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._remove_imports.RemoveImportsVisitor.remove_unused_import": {
  "data": {
   "lineno": 188,
   "symbols_in_volume": {
    "libcst.codemod._context.CodemodContext": {
     "line number": [
      190
     ]
    },
    "libcst.codemod.visitors._remove_imports.RemoveImportsVisitor": {
     "line number": [
      212,
      214
     ]
    },
    "staticmethod": {
     "line number": [
      188
     ]
    },
    "str": {
     "line number": [
      191,
      192,
      193
     ]
    },
    "typing.Optional": {
     "line number": [
      192,
      193
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._remove_imports.RemoveImportsVisitor.remove_unused_import_by_node": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      253
     ]
    },
    "isinstance": {
     "line number": [
      239,
      246,
      248
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      218
     ]
    },
    "libcst.Import": {
     "line number": [
      239
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      246
     ]
    },
    "libcst.ImportStar": {
     "line number": [
      248
     ]
    },
    "libcst.codemod._context.CodemodContext": {
     "line number": [
      218
     ]
    },
    "libcst.codemod.visitors._remove_imports.RemoveImportsVisitor": {
     "line number": [
      241,
      255
     ]
    },
    "libcst.codemod.visitors._remove_imports.RemovedNodeVisitor": {
     "line number": [
      264
     ]
    },
    "libcst.helpers.get_absolute_module_for_import": {
     "line number": [
      251
     ]
    },
    "staticmethod": {
     "line number": [
      216
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._remove_imports.RemoveImportsVisitor.visit_Module": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      293
     ]
    },
    "libcst.codemod.visitors._gather_unused_imports.GatherUnusedImportsVisitor": {
     "line number": [
      294
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._remove_imports.RemovedNodeVisitor": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.codemod._visitor.ContextAwareVisitor": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.visitors._remove_imports.RemovedNodeVisitor._remove_imports_from_import_stmt": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "libcst.Import": {
     "line number": [
      18
     ]
    },
    "str": {
     "line number": [
      18
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._remove_imports.RemovedNodeVisitor._remove_imports_from_importfrom_stmt": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      45
     ]
    },
    "isinstance": {
     "line number": [
      37
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      34
     ]
    },
    "libcst.ImportStar": {
     "line number": [
      37
     ]
    },
    "libcst.helpers.get_absolute_module_for_import": {
     "line number": [
      41
     ]
    },
    "str": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._remove_imports.RemovedNodeVisitor._visit_name_attr_alike": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      72
     ]
    },
    "KeyError": {
     "line number": [
      79
     ]
    },
    "isinstance": {
     "line number": [
      86,
      88,
      90
     ]
    },
    "libcst.Attribute": {
     "line number": [
      63
     ]
    },
    "libcst.Import": {
     "line number": [
      88
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      90
     ]
    },
    "libcst.Name": {
     "line number": [
      63
     ]
    },
    "libcst.helpers.get_full_name_for_node": {
     "line number": [
      65
     ]
    },
    "libcst.metadata.Assignment": {
     "line number": [
      86
     ]
    },
    "libcst.metadata.ScopeProvider": {
     "line number": [
      73
     ]
    },
    "set": {
     "line number": [
      84
     ]
    },
    "typing.Union": {
     "line number": [
      63
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._remove_imports.RemovedNodeVisitor.visit_Attribute": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": {
    "libcst.Attribute": {
     "line number": [
      102
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._remove_imports.RemovedNodeVisitor.visit_Name": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      99
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors._remove_imports.ScopeProvider": {
  "data": {
   "shadows": "libcst.metadata.ScopeProvider"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._remove_imports.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._remove_imports.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._remove_imports.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._remove_imports.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._remove_imports.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._remove_imports.get_absolute_module_for_import": {
  "data": {
   "shadows": "libcst.helpers.get_absolute_module_for_import"
  },
  "type": "import"
 },
 "libcst.codemod.visitors._remove_imports.get_full_name_for_node": {
  "data": {
   "shadows": "libcst.helpers.get_full_name_for_node"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.visitors.tests.test_add_imports": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.visitors.tests.test_add_imports.AddImportsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors.AddImportsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_add_imports.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_add_imports.CodemodTest": {
  "data": {
   "shadows": "libcst.codemod.CodemodTest"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_add_imports.TestAddImportsCodemod": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "libcst.codemod.CodemodTest": {
     "line number": [
      10
     ]
    },
    "libcst.codemod.visitors.AddImportsVisitor": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.visitors.tests.test_add_imports.TestAddImportsCodemod.test_add_and_modify_complex": {
  "data": {
   "lineno": 404
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_add_imports.TestAddImportsCodemod.test_add_future": {
  "data": {
   "lineno": 226
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_add_imports.TestAddImportsCodemod.test_add_import_preserve_doctring_multiples": {
  "data": {
   "lineno": 486
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_add_imports.TestAddImportsCodemod.test_add_import_preserve_doctring_simple": {
  "data": {
   "lineno": 458
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_add_imports.TestAddImportsCodemod.test_add_module_alias_simple": {
  "data": {
   "lineno": 86
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_add_imports.TestAddImportsCodemod.test_add_module_complex": {
  "data": {
   "lineno": 136
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_add_imports.TestAddImportsCodemod.test_add_module_simple": {
  "data": {
   "lineno": 36
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_add_imports.TestAddImportsCodemod.test_add_object_alias_modify_simple": {
  "data": {
   "lineno": 333
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_add_imports.TestAddImportsCodemod.test_add_object_alias_simple": {
  "data": {
   "lineno": 202
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_add_imports.TestAddImportsCodemod.test_add_object_modify_complex": {
  "data": {
   "lineno": 359
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_add_imports.TestAddImportsCodemod.test_add_object_modify_simple": {
  "data": {
   "lineno": 307
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_add_imports.TestAddImportsCodemod.test_add_object_relative_modify_simple": {
  "data": {
   "lineno": 592,
   "symbols_in_volume": {
    "libcst.codemod.CodemodContext": {
     "line number": [
      620
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_add_imports.TestAddImportsCodemod.test_add_object_simple": {
  "data": {
   "lineno": 178
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_add_imports.TestAddImportsCodemod.test_dont_add_module_alias_simple": {
  "data": {
   "lineno": 110
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_add_imports.TestAddImportsCodemod.test_dont_add_module_simple": {
  "data": {
   "lineno": 60
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_add_imports.TestAddImportsCodemod.test_dont_add_object_alias_simple": {
  "data": {
   "lineno": 281
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_add_imports.TestAddImportsCodemod.test_dont_add_object_simple": {
  "data": {
   "lineno": 255
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_add_imports.TestAddImportsCodemod.test_dont_add_relative_object_simple": {
  "data": {
   "lineno": 561,
   "symbols_in_volume": {
    "libcst.codemod.CodemodContext": {
     "line number": [
      589
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_add_imports.TestAddImportsCodemod.test_import_in_docstring_module": {
  "data": {
   "lineno": 641,
   "symbols_in_volume": {
    "libcst.codemod.CodemodContext": {
     "line number": [
      659
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_add_imports.TestAddImportsCodemod.test_import_order": {
  "data": {
   "lineno": 623,
   "symbols_in_volume": {
    "libcst.codemod.CodemodContext": {
     "line number": [
      638
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_add_imports.TestAddImportsCodemod.test_noop": {
  "data": {
   "lineno": 14
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_add_imports.TestAddImportsCodemod.test_strict_module_no_imports": {
  "data": {
   "lineno": 517
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_add_imports.TestAddImportsCodemod.test_strict_module_with_imports": {
  "data": {
   "lineno": 537
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_apply_type_annotations": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.visitors.tests.test_apply_type_annotations.ApplyTypeAnnotationsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors._apply_type_annotations.ApplyTypeAnnotationsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_apply_type_annotations.Codemod": {
  "data": {
   "shadows": "libcst.codemod.Codemod"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_apply_type_annotations.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_apply_type_annotations.CodemodTest": {
  "data": {
   "shadows": "libcst.codemod.CodemodTest"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_apply_type_annotations.TestApplyAnnotationsVisitor": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "libcst.codemod.Codemod": {
     "line number": [
      19
     ]
    },
    "libcst.codemod.CodemodTest": {
     "line number": [
      18
     ]
    },
    "libcst.codemod.visitors._apply_type_annotations.ApplyTypeAnnotationsVisitor": {
     "line number": [
      19
     ]
    },
    "typing.Type": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.visitors.tests.test_apply_type_annotations.TestApplyAnnotationsVisitor.test_annotate_functions": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "libcst.codemod.CodemodContext": {
     "line number": [
      657
     ]
    },
    "libcst.codemod.visitors._apply_type_annotations.ApplyTypeAnnotationsVisitor.store_stub_in_context": {
     "line number": [
      658
     ]
    },
    "libcst.codemod.visitors.tests.test_apply_type_annotations.textwrap": {
     "line number": [
      659
     ]
    },
    "libcst.parse_module": {
     "line number": [
      659
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      21
     ]
    },
    "str": {
     "line number": [
      656,
      656,
      656
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_apply_type_annotations.TestApplyAnnotationsVisitor.test_annotate_functions_py38": {
  "data": {
   "lineno": 663,
   "symbols_in_volume": {
    "libcst.codemod.CodemodContext": {
     "line number": [
      707
     ]
    },
    "libcst.codemod.visitors._apply_type_annotations.ApplyTypeAnnotationsVisitor.store_stub_in_context": {
     "line number": [
      708
     ]
    },
    "libcst.codemod.visitors.tests.test_apply_type_annotations.sys": {
     "line number": [
      705
     ]
    },
    "libcst.codemod.visitors.tests.test_apply_type_annotations.textwrap": {
     "line number": [
      709
     ]
    },
    "libcst.codemod.visitors.tests.test_apply_type_annotations.unittest": {
     "line number": [
      705
     ]
    },
    "libcst.parse_module": {
     "line number": [
      709
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      663
     ]
    },
    "str": {
     "line number": [
      706,
      706,
      706
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_apply_type_annotations.TestApplyAnnotationsVisitor.test_annotate_functions_with_existing_annotations": {
  "data": {
   "lineno": 713,
   "symbols_in_volume": {
    "libcst.codemod.CodemodContext": {
     "line number": [
      733,
      743
     ]
    },
    "libcst.codemod.visitors._apply_type_annotations.ApplyTypeAnnotationsVisitor.store_stub_in_context": {
     "line number": [
      734,
      744
     ]
    },
    "libcst.codemod.visitors.tests.test_apply_type_annotations.textwrap": {
     "line number": [
      735,
      746
     ]
    },
    "libcst.parse_module": {
     "line number": [
      735,
      746
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      713
     ]
    },
    "str": {
     "line number": [
      731,
      731,
      731
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_apply_type_annotations.Type": {
  "data": {
   "shadows": "typing.Type"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_apply_type_annotations.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_apply_type_annotations.parse_module": {
  "data": {
   "shadows": "libcst.parse_module"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_apply_type_annotations.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_apply_type_annotations.textwrap": {
  "data": {
   "shadows": "textwrap"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_apply_type_annotations.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_comments": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.visitors.tests.test_gather_comments.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_comments.CodemodTest": {
  "data": {
   "shadows": "libcst.codemod.CodemodTest"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_comments.Comment": {
  "data": {
   "shadows": "libcst.Comment"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_comments.GatherCommentsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors.GatherCommentsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_comments.MetadataWrapper": {
  "data": {
   "shadows": "libcst.MetadataWrapper"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_comments.TestGatherCommentsVisitor": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.visitors.tests.test_gather_comments.TestGatherCommentsVisitor.gather_comments": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "libcst.MetadataWrapper": {
     "line number": [
      14
     ]
    },
    "libcst.codemod.CodemodContext": {
     "line number": [
      17
     ]
    },
    "libcst.codemod.CodemodTest.make_fixture_data": {
     "line number": [
      14
     ]
    },
    "libcst.codemod.visitors.GatherCommentsVisitor": {
     "line number": [
      16,
      13
     ]
    },
    "libcst.codemod.visitors.GatherCommentsVisitor.METADATA_DEPENDENCIES": {
     "line number": [
      15
     ]
    },
    "libcst.parse_module": {
     "line number": [
      14
     ]
    },
    "str": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_comments.TestGatherCommentsVisitor.test_no_comments": {
  "data": {
   "lineno": 22
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_comments.TestGatherCommentsVisitor.test_noqa_comments": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      43,
      45
     ]
    },
    "libcst.Comment": {
     "line number": [
      43,
      45
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_comments.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_comments.parse_module": {
  "data": {
   "shadows": "libcst.parse_module"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_exports": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.visitors.tests.test_gather_exports.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_exports.CodemodTest": {
  "data": {
   "shadows": "libcst.codemod.CodemodTest"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_exports.GatherExportsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors.GatherExportsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_exports.TestGatherExportsVisitor": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.visitors.tests.test_gather_exports.TestGatherExportsVisitor.gather_exports": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "libcst.codemod.CodemodContext": {
     "line number": [
      14
     ]
    },
    "libcst.codemod.CodemodTest.make_fixture_data": {
     "line number": [
      15
     ]
    },
    "libcst.codemod.visitors.GatherExportsVisitor": {
     "line number": [
      14,
      13
     ]
    },
    "libcst.parse_module": {
     "line number": [
      15
     ]
    },
    "str": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_exports.TestGatherExportsVisitor.test_gather_exports_ignore_invalid_1": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": {
    "set": {
     "line number": [
      94
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_exports.TestGatherExportsVisitor.test_gather_exports_ignore_invalid_2": {
  "data": {
   "lineno": 96
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_exports.TestGatherExportsVisitor.test_gather_exports_ignore_valid_1": {
  "data": {
   "lineno": 107
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_exports.TestGatherExportsVisitor.test_gather_exports_ignore_valid_2": {
  "data": {
   "lineno": 118
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_exports.TestGatherExportsVisitor.test_gather_exports_ignore_valid_3": {
  "data": {
   "lineno": 129
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_exports.TestGatherExportsVisitor.test_gather_exports_simple": {
  "data": {
   "lineno": 39
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_exports.TestGatherExportsVisitor.test_gather_exports_simple_annotated": {
  "data": {
   "lineno": 72
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_exports.TestGatherExportsVisitor.test_gather_exports_simple_set": {
  "data": {
   "lineno": 50
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_exports.TestGatherExportsVisitor.test_gather_exports_simple_tuple": {
  "data": {
   "lineno": 61
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_exports.TestGatherExportsVisitor.test_gather_noop": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "set": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_exports.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_exports.parse_module": {
  "data": {
   "shadows": "libcst.parse_module"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_imports": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.visitors.tests.test_gather_imports.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_imports.CodemodTest": {
  "data": {
   "shadows": "libcst.codemod.CodemodTest"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_imports.GatherImportsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors.GatherImportsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_imports.TestGatherImportsVisitor": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.visitors.tests.test_gather_imports.TestGatherImportsVisitor.gather_imports": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "libcst.codemod.CodemodContext": {
     "line number": [
      15
     ]
    },
    "libcst.codemod.CodemodTest.make_fixture_data": {
     "line number": [
      17
     ]
    },
    "libcst.codemod.visitors.GatherImportsVisitor": {
     "line number": [
      14,
      13
     ]
    },
    "libcst.parse_module": {
     "line number": [
      17
     ]
    },
    "str": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_imports.TestGatherImportsVisitor.test_gather_aliased_module": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "len": {
     "line number": [
      70
     ]
    },
    "set": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_imports.TestGatherImportsVisitor.test_gather_aliased_object": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "len": {
     "line number": [
      122
     ]
    },
    "set": {
     "line number": [
      118
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_imports.TestGatherImportsVisitor.test_gather_aliased_object_disjoint": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": {
    "len": {
     "line number": [
      140
     ]
    },
    "set": {
     "line number": [
      136
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_imports.TestGatherImportsVisitor.test_gather_aliased_object_mixed": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": {
    "len": {
     "line number": [
      157
     ]
    },
    "set": {
     "line number": [
      153
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_imports.TestGatherImportsVisitor.test_gather_module": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "len": {
     "line number": [
      52
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_imports.TestGatherImportsVisitor.test_gather_nothing": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "len": {
     "line number": [
      34
     ]
    },
    "set": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_imports.TestGatherImportsVisitor.test_gather_object": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": {
    "len": {
     "line number": [
      87
     ]
    },
    "set": {
     "line number": [
      83
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_imports.TestGatherImportsVisitor.test_gather_object_disjoint": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "len": {
     "line number": [
      105
     ]
    },
    "set": {
     "line number": [
      101
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_imports.TestGatherImportsVisitor.test_gather_relative_object": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": {
    "len": {
     "line number": [
      175
     ]
    },
    "set": {
     "line number": [
      171
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_imports.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_imports.parse_module": {
  "data": {
   "shadows": "libcst.parse_module"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_string_annotation_names": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.visitors.tests.test_gather_string_annotation_names.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_string_annotation_names.CodemodTest": {
  "data": {
   "shadows": "libcst.codemod.CodemodTest"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_string_annotation_names.GatherNamesFromStringAnnotationsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors.GatherNamesFromStringAnnotationsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_string_annotation_names.MetadataWrapper": {
  "data": {
   "shadows": "libcst.MetadataWrapper"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_string_annotation_names.TestGatherNamesFromStringAnnotationsVisitor": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.visitors.tests.test_gather_string_annotation_names.TestGatherNamesFromStringAnnotationsVisitor.gather_names": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "libcst.MetadataWrapper": {
     "line number": [
      14
     ]
    },
    "libcst.codemod.CodemodContext": {
     "line number": [
      16
     ]
    },
    "libcst.codemod.CodemodTest.make_fixture_data": {
     "line number": [
      14
     ]
    },
    "libcst.codemod.visitors.GatherNamesFromStringAnnotationsVisitor": {
     "line number": [
      16,
      13
     ]
    },
    "libcst.codemod.visitors.GatherNamesFromStringAnnotationsVisitor.METADATA_DEPENDENCIES": {
     "line number": [
      15
     ]
    },
    "libcst.parse_module": {
     "line number": [
      14
     ]
    },
    "str": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_string_annotation_names.TestGatherNamesFromStringAnnotationsVisitor.test_complex": {
  "data": {
   "lineno": 56
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_string_annotation_names.TestGatherNamesFromStringAnnotationsVisitor.test_concatenated_string_annotations": {
  "data": {
   "lineno": 38
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_string_annotation_names.TestGatherNamesFromStringAnnotationsVisitor.test_dotted_names": {
  "data": {
   "lineno": 73
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_string_annotation_names.TestGatherNamesFromStringAnnotationsVisitor.test_no_annotations": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "set": {
     "line number": [
      27
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_string_annotation_names.TestGatherNamesFromStringAnnotationsVisitor.test_simple_string_annotations": {
  "data": {
   "lineno": 29
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_string_annotation_names.TestGatherNamesFromStringAnnotationsVisitor.test_typevars": {
  "data": {
   "lineno": 47
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_string_annotation_names.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_string_annotation_names.parse_module": {
  "data": {
   "shadows": "libcst.parse_module"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_unused_imports": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.visitors.tests.test_gather_unused_imports.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_unused_imports.CodemodTest": {
  "data": {
   "shadows": "libcst.codemod.CodemodTest"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_unused_imports.GatherUnusedImportsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors.GatherUnusedImportsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_unused_imports.MetadataWrapper": {
  "data": {
   "shadows": "libcst.MetadataWrapper"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_unused_imports.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_unused_imports.TestGatherUnusedImportsVisitor": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.visitors.tests.test_gather_unused_imports.TestGatherUnusedImportsVisitor.gather_imports": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst.MetadataWrapper": {
     "line number": [
      16
     ]
    },
    "libcst.codemod.CodemodContext": {
     "line number": [
      18
     ]
    },
    "libcst.codemod.CodemodTest.make_fixture_data": {
     "line number": [
      16
     ]
    },
    "libcst.codemod.visitors.GatherUnusedImportsVisitor": {
     "line number": [
      18
     ]
    },
    "libcst.codemod.visitors.GatherUnusedImportsVisitor.METADATA_DEPENDENCIES": {
     "line number": [
      17
     ]
    },
    "libcst.parse_module": {
     "line number": [
      16
     ]
    },
    "set": {
     "line number": [
      20
     ]
    },
    "str": {
     "line number": [
      15,
      15
     ]
    },
    "typing.Set": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_unused_imports.TestGatherUnusedImportsVisitor.test_alias": {
  "data": {
   "lineno": 43
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_unused_imports.TestGatherUnusedImportsVisitor.test_dotted_imports": {
  "data": {
   "lineno": 33
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_unused_imports.TestGatherUnusedImportsVisitor.test_exports": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "set": {
     "line number": [
      96
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_unused_imports.TestGatherUnusedImportsVisitor.test_future": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": {
    "set": {
     "line number": [
      128
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_unused_imports.TestGatherUnusedImportsVisitor.test_import_complex": {
  "data": {
   "lineno": 53
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_unused_imports.TestGatherUnusedImportsVisitor.test_import_from_complex": {
  "data": {
   "lineno": 72
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_unused_imports.TestGatherUnusedImportsVisitor.test_no_imports": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": {
    "set": {
     "line number": [
      31
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_unused_imports.TestGatherUnusedImportsVisitor.test_string_annotation": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": {
    "set": {
     "line number": [
      110
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_unused_imports.TestGatherUnusedImportsVisitor.test_typevars": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": {
    "set": {
     "line number": [
      120
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_gather_unused_imports.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_gather_unused_imports.parse_module": {
  "data": {
   "shadows": "libcst.parse_module"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_remove_imports": {
  "data": {},
  "type": "module"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod.CodemodContext"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.CodemodTest": {
  "data": {
   "shadows": "libcst.codemod.CodemodTest"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.QualifiedName": {
  "data": {
   "shadows": "libcst.metadata.QualifiedName"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.QualifiedNameProvider": {
  "data": {
   "shadows": "libcst.metadata.QualifiedNameProvider"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.QualifiedNameSource": {
  "data": {
   "shadows": "libcst.metadata.QualifiedNameSource"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.RemoveImportsVisitor": {
  "data": {
   "shadows": "libcst.codemod.visitors.RemoveImportsVisitor"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.ScopeProvider": {
  "data": {
   "shadows": "libcst.metadata.ScopeProvider"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "libcst.codemod.CodemodTest": {
     "line number": [
      19
     ]
    },
    "libcst.codemod.visitors.RemoveImportsVisitor": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_dont_remove_import_alias_simple": {
  "data": {
   "lineno": 103
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_dont_remove_import_simple": {
  "data": {
   "lineno": 81
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_dont_remove_import_simple_wrong_alias": {
  "data": {
   "lineno": 125
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_dont_remove_import_wrong_alias_simple": {
  "data": {
   "lineno": 147
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_dont_remove_importfrom_alias_simple": {
  "data": {
   "lineno": 233
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_dont_remove_importfrom_alias_simple_wrong_alias": {
  "data": {
   "lineno": 277
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_dont_remove_importfrom_simple": {
  "data": {
   "lineno": 211
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_dont_remove_importfrom_simple_wrong_alias": {
  "data": {
   "lineno": 255
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_dont_remove_inuse_importfrom_relative": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": {
    "libcst.codemod.CodemodContext": {
     "line number": [
      349
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_dont_remove_wrong_importfrom_relative": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": {
    "libcst.codemod.CodemodContext": {
     "line number": [
      376
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_noop": {
  "data": {
   "lineno": 23
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_remove_comma": {
  "data": {
   "lineno": 801
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_remove_fromimport_complex": {
  "data": {
   "lineno": 424
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_remove_import_alias_simple": {
  "data": {
   "lineno": 60
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_remove_import_by_node_simple": {
  "data": {
   "lineno": 522,
   "symbols_in_volume": {
    "RemoveBarTransformer": {
     "line number": [
      688
     ]
    },
    "libcst.codemod.CodemodContext": {
     "line number": [
      688
     ]
    },
    "libcst.parse_module": {
     "line number": [
      686
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      522
     ]
    },
    "str": {
     "line number": [
      646,
      646
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_remove_import_by_node_simple.RemoveBarTransformer": {
  "data": {
   "lineno": 653,
   "symbols_in_volume": {
    "libcst.codemod.VisitorBasedCodemodCommand": {
     "line number": [
      653
     ]
    },
    "libcst.metadata.QualifiedNameProvider": {
     "line number": [
      655
     ]
    },
    "libcst.metadata.ScopeProvider": {
     "line number": [
      655
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_remove_import_by_node_simple.RemoveBarTransformer._leave_foo_bar": {
  "data": {
   "lineno": 657,
   "symbols_in_volume": {
    "libcst.RemovalSentinel": {
     "line number": [
      680
     ]
    },
    "libcst.RemoveFromParent": {
     "line number": [
      684
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      678,
      679
     ]
    },
    "libcst.codemod.visitors.RemoveImportsVisitor.remove_unused_import_by_node": {
     "line number": [
      681
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      661
     ]
    },
    "libcst.matchers.Expr": {
     "line number": [
      660
     ]
    },
    "libcst.matchers.MatchMetadata": {
     "line number": [
      662
     ]
    },
    "libcst.matchers.SimpleStatementLine": {
     "line number": [
      658
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      657
     ]
    },
    "libcst.metadata.QualifiedName": {
     "line number": [
      665
     ]
    },
    "libcst.metadata.QualifiedNameProvider": {
     "line number": [
      663
     ]
    },
    "libcst.metadata.QualifiedNameSource.IMPORT": {
     "line number": [
      666
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_remove_import_complex": {
  "data": {
   "lineno": 379
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_remove_import_from_node": {
  "data": {
   "lineno": 691,
   "symbols_in_volume": {
    "RemoveImportTransformer": {
     "line number": [
      727
     ]
    },
    "libcst.codemod.CodemodContext": {
     "line number": [
      727
     ]
    },
    "libcst.parse_module": {
     "line number": [
      724
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_remove_import_from_node.RemoveImportTransformer": {
  "data": {
   "lineno": 717,
   "symbols_in_volume": {
    "libcst.codemod.VisitorBasedCodemodCommand": {
     "line number": [
      717
     ]
    },
    "libcst.metadata.QualifiedNameProvider": {
     "line number": [
      719
     ]
    },
    "libcst.metadata.ScopeProvider": {
     "line number": [
      719
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_remove_import_from_node.RemoveImportTransformer.visit_ImportFrom": {
  "data": {
   "lineno": 721,
   "symbols_in_volume": {
    "libcst.ImportFrom": {
     "line number": [
      721
     ]
    },
    "libcst.codemod.visitors.RemoveImportsVisitor.remove_unused_import_by_node": {
     "line number": [
      722
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_remove_import_multiple_assignments": {
  "data": {
   "lineno": 464
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_remove_import_node": {
  "data": {
   "lineno": 730,
   "symbols_in_volume": {
    "RemoveImportTransformer": {
     "line number": [
      766
     ]
    },
    "libcst.codemod.CodemodContext": {
     "line number": [
      766
     ]
    },
    "libcst.parse_module": {
     "line number": [
      763
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_remove_import_node.RemoveImportTransformer": {
  "data": {
   "lineno": 756,
   "symbols_in_volume": {
    "libcst.codemod.VisitorBasedCodemodCommand": {
     "line number": [
      756
     ]
    },
    "libcst.metadata.QualifiedNameProvider": {
     "line number": [
      758
     ]
    },
    "libcst.metadata.ScopeProvider": {
     "line number": [
      758
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_remove_import_node.RemoveImportTransformer.visit_Import": {
  "data": {
   "lineno": 760,
   "symbols_in_volume": {
    "libcst.Import": {
     "line number": [
      760
     ]
    },
    "libcst.codemod.visitors.RemoveImportsVisitor.remove_unused_import_by_node": {
     "line number": [
      761
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_remove_import_simple": {
  "data": {
   "lineno": 39
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_remove_import_with_all": {
  "data": {
   "lineno": 769,
   "symbols_in_volume": {
    "RemoveImportTransformer": {
     "line number": [
      798
     ]
    },
    "libcst.codemod.CodemodContext": {
     "line number": [
      798
     ]
    },
    "libcst.parse_module": {
     "line number": [
      795
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_remove_import_with_all.RemoveImportTransformer": {
  "data": {
   "lineno": 788,
   "symbols_in_volume": {
    "libcst.codemod.VisitorBasedCodemodCommand": {
     "line number": [
      788
     ]
    },
    "libcst.metadata.QualifiedNameProvider": {
     "line number": [
      790
     ]
    },
    "libcst.metadata.ScopeProvider": {
     "line number": [
      790
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_remove_import_with_all.RemoveImportTransformer.visit_ImportFrom": {
  "data": {
   "lineno": 792,
   "symbols_in_volume": {
    "libcst.ImportFrom": {
     "line number": [
      792
     ]
    },
    "libcst.codemod.visitors.RemoveImportsVisitor.remove_unused_import_by_node": {
     "line number": [
      793
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_remove_importfrom_alias_simple": {
  "data": {
   "lineno": 190
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_remove_importfrom_relative": {
  "data": {
   "lineno": 299,
   "symbols_in_volume": {
    "libcst.codemod.CodemodContext": {
     "line number": [
      322
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_remove_importfrom_simple": {
  "data": {
   "lineno": 169
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.TestRemoveImportsCodemod.test_remove_multiple_imports": {
  "data": {
   "lineno": 486
  },
  "type": "function"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.VisitorBasedCodemodCommand": {
  "data": {
   "shadows": "libcst.codemod.VisitorBasedCodemodCommand"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst.codemod.visitors.tests.test_remove_imports.m": {
  "data": {
   "shadows": "libcst.matchers"
  },
  "type": "import"
 },
 "libcst.ensure_type": {
  "data": {
   "shadows": "libcst.helpers.ensure_type"
  },
  "type": "import"
 },
 "libcst.helpers": {
  "data": {},
  "type": "module"
 },
 "libcst.helpers.__all__": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "libcst.helpers._statement": {
  "data": {},
  "type": "module"
 },
 "libcst.helpers._statement.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.helpers._statement.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.helpers._statement.get_absolute_module_for_import": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "len": {
     "line number": [
      19,
      29,
      39,
      43
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      13
     ]
    },
    "libcst.helpers.expression.get_full_name_for_node": {
     "line number": [
      17
     ]
    },
    "str": {
     "line number": [
      13,
      14
     ]
    },
    "typing.Optional": {
     "line number": [
      13,
      14
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers._statement.get_absolute_module_for_import_or_raise": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      51
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      47
     ]
    },
    "libcst.helpers._statement.get_absolute_module_for_import": {
     "line number": [
      49
     ]
    },
    "str": {
     "line number": [
      47,
      48
     ]
    },
    "typing.Optional": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers._statement.get_full_name_for_node": {
  "data": {
   "shadows": "libcst.helpers.expression.get_full_name_for_node"
  },
  "type": "import"
 },
 "libcst.helpers._template": {
  "data": {
   "symbols_in_volume": {
    "libcst.Annotation": {
     "line number": [
      19
     ]
    },
    "libcst.Arg": {
     "line number": [
      23
     ]
    },
    "libcst.AssignTarget": {
     "line number": [
      20
     ]
    },
    "libcst.BaseExpression": {
     "line number": [
      18
     ]
    },
    "libcst.BaseSlice": {
     "line number": [
      27
     ]
    },
    "libcst.BaseSmallStatement": {
     "line number": [
      25
     ]
    },
    "libcst.BaseStatement": {
     "line number": [
      24
     ]
    },
    "libcst.BaseSuite": {
     "line number": [
      26
     ]
    },
    "libcst.Decorator": {
     "line number": [
      29
     ]
    },
    "libcst.Param": {
     "line number": [
      21
     ]
    },
    "libcst.Parameters": {
     "line number": [
      22
     ]
    },
    "libcst.PartialParserConfig": {
     "line number": [
      348,
      348
     ]
    },
    "libcst.SubscriptElement": {
     "line number": [
      28
     ]
    },
    "str": {
     "line number": [
      13,
      14
     ]
    },
    "typing.Union": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst.helpers._template.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "libcst.helpers._template.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "libcst.helpers._template.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.helpers._template.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "libcst.helpers._template.TemplateChecker": {
  "data": {
   "lineno": 331,
   "symbols_in_volume": {
    "libcst.CSTVisitor": {
     "line number": [
      331
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.helpers._template.TemplateChecker.__init__": {
  "data": {
   "lineno": 332,
   "symbols_in_volume": {
    "str": {
     "line number": [
      332
     ]
    },
    "typing.Set": {
     "line number": [
      332
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers._template.TemplateChecker.visit_Name": {
  "data": {
   "lineno": 335,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      338
     ]
    },
    "libcst.Name": {
     "line number": [
      335
     ]
    },
    "libcst.helpers._template.mangled_name": {
     "line number": [
      337
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers._template.TemplateTransformer": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "libcst.CSTTransformer": {
     "line number": [
      61
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.helpers._template.TemplateTransformer.__init__": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      146
     ]
    },
    "isinstance": {
     "line number": [
      68,
      73,
      78,
      83,
      88,
      93,
      98,
      103,
      108,
      113,
      118,
      123
     ]
    },
    "iter": {
     "line number": [
      147
     ]
    },
    "libcst.Annotation": {
     "line number": [
      70,
      73
     ]
    },
    "libcst.Arg": {
     "line number": [
      90,
      93
     ]
    },
    "libcst.AssignTarget": {
     "line number": [
      75,
      78
     ]
    },
    "libcst.BaseExpression": {
     "line number": [
      65,
      68
     ]
    },
    "libcst.BaseSlice": {
     "line number": [
      115,
      118
     ]
    },
    "libcst.BaseSmallStatement": {
     "line number": [
      95,
      98
     ]
    },
    "libcst.BaseStatement": {
     "line number": [
      100,
      103
     ]
    },
    "libcst.BaseSuite": {
     "line number": [
      105,
      108
     ]
    },
    "libcst.Decorator": {
     "line number": [
      120,
      123
     ]
    },
    "libcst.Param": {
     "line number": [
      80,
      83
     ]
    },
    "libcst.Parameters": {
     "line number": [
      85,
      88
     ]
    },
    "libcst.SubscriptElement": {
     "line number": [
      110,
      113
     ]
    },
    "libcst.helpers._template.ValidReplacementType": {
     "line number": [
      63
     ]
    },
    "next": {
     "line number": [
      147
     ]
    },
    "str": {
     "line number": [
      63,
      65,
      70,
      75,
      80,
      85,
      90,
      95,
      100,
      105,
      110,
      115,
      120
     ]
    },
    "typing.Dict": {
     "line number": [
      65,
      70,
      75,
      80,
      85,
      90,
      95,
      100,
      105,
      110,
      115,
      120
     ]
    },
    "typing.Mapping": {
     "line number": [
      63
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers._template.TemplateTransformer.leave_Annotation": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      164
     ]
    },
    "libcst.Annotation": {
     "line number": [
      160,
      160,
      161
     ]
    },
    "libcst.Name": {
     "line number": [
      164
     ]
    },
    "libcst.helpers._template.unmangled_name": {
     "line number": [
      165
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers._template.TemplateTransformer.leave_Arg": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      212
     ]
    },
    "libcst.Arg": {
     "line number": [
      209,
      209,
      209
     ]
    },
    "libcst.Name": {
     "line number": [
      212
     ]
    },
    "libcst.helpers._template.unmangled_name": {
     "line number": [
      213
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers._template.TemplateTransformer.leave_AssignTarget": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      175
     ]
    },
    "libcst.AssignTarget": {
     "line number": [
      171,
      171,
      172
     ]
    },
    "libcst.Name": {
     "line number": [
      175
     ]
    },
    "libcst.helpers._template.unmangled_name": {
     "line number": [
      176
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers._template.TemplateTransformer.leave_Decorator": {
  "data": {
   "lineno": 319,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      324
     ]
    },
    "libcst.Decorator": {
     "line number": [
      320,
      320,
      321
     ]
    },
    "libcst.Name": {
     "line number": [
      324
     ]
    },
    "libcst.helpers._template.unmangled_name": {
     "line number": [
      325
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers._template.TemplateTransformer.leave_Expr": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      244
     ]
    },
    "libcst.BaseSmallStatement": {
     "line number": [
      239
     ]
    },
    "libcst.Expr": {
     "line number": [
      238,
      238
     ]
    },
    "libcst.Name": {
     "line number": [
      244
     ]
    },
    "libcst.helpers._template.unmangled_name": {
     "line number": [
      245
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers._template.TemplateTransformer.leave_IndentedBlock": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      279,
      283,
      285
     ]
    },
    "len": {
     "line number": [
      276,
      280
     ]
    },
    "libcst.BaseSuite": {
     "line number": [
      271
     ]
    },
    "libcst.Expr": {
     "line number": [
      283
     ]
    },
    "libcst.IndentedBlock": {
     "line number": [
      270,
      270
     ]
    },
    "libcst.Name": {
     "line number": [
      285
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      279
     ]
    },
    "libcst.helpers._template.unmangled_name": {
     "line number": [
      286
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers._template.TemplateTransformer.leave_Index": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      296
     ]
    },
    "libcst.BaseSlice": {
     "line number": [
      293
     ]
    },
    "libcst.Index": {
     "line number": [
      292,
      292
     ]
    },
    "libcst.Name": {
     "line number": [
      296
     ]
    },
    "libcst.helpers._template.unmangled_name": {
     "line number": [
      297
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers._template.TemplateTransformer.leave_Name": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": {
    "libcst.BaseExpression": {
     "line number": [
      152
     ]
    },
    "libcst.Name": {
     "line number": [
      151,
      151
     ]
    },
    "libcst.helpers._template.unmangled_name": {
     "line number": [
      153
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers._template.TemplateTransformer.leave_Param": {
  "data": {
   "lineno": 181,
   "symbols_in_volume": {
    "libcst.Param": {
     "line number": [
      182,
      182,
      183
     ]
    },
    "libcst.helpers._template.unmangled_name": {
     "line number": [
      184
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers._template.TemplateTransformer.leave_Parameters": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": {
    "len": {
     "line number": [
      195,
      197,
      199
     ]
    },
    "libcst.MaybeSentinel.DEFAULT": {
     "line number": [
      196,
      200
     ]
    },
    "libcst.Parameters": {
     "line number": [
      190,
      190,
      191
     ]
    },
    "libcst.helpers._template.unmangled_name": {
     "line number": [
      204
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers._template.TemplateTransformer.leave_SimpleStatementLine": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      229,
      231
     ]
    },
    "len": {
     "line number": [
      227
     ]
    },
    "libcst.BaseStatement": {
     "line number": [
      222
     ]
    },
    "libcst.Expr": {
     "line number": [
      229
     ]
    },
    "libcst.Name": {
     "line number": [
      231
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      220,
      221
     ]
    },
    "libcst.helpers._template.unmangled_name": {
     "line number": [
      232
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers._template.TemplateTransformer.leave_SimpleStatementSuite": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      261,
      263
     ]
    },
    "len": {
     "line number": [
      259
     ]
    },
    "libcst.BaseSuite": {
     "line number": [
      254
     ]
    },
    "libcst.Expr": {
     "line number": [
      261
     ]
    },
    "libcst.Name": {
     "line number": [
      263
     ]
    },
    "libcst.SimpleStatementSuite": {
     "line number": [
      252,
      253
     ]
    },
    "libcst.helpers._template.unmangled_name": {
     "line number": [
      264
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers._template.TemplateTransformer.leave_SubscriptElement": {
  "data": {
   "lineno": 302,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      311,
      313
     ]
    },
    "libcst.Index": {
     "line number": [
      311
     ]
    },
    "libcst.Name": {
     "line number": [
      313
     ]
    },
    "libcst.SubscriptElement": {
     "line number": [
      303,
      303,
      304
     ]
    },
    "libcst.helpers._template.unmangled_name": {
     "line number": [
      314
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers._template.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.helpers._template.ValidReplacementType": {
  "data": {
   "lineno": 17
  },
  "type": "constant"
 },
 "libcst.helpers._template.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.helpers._template.ensure_type": {
  "data": {
   "shadows": "libcst.helpers.common.ensure_type"
  },
  "type": "import"
 },
 "libcst.helpers._template.mangle_template": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      49,
      54
     ]
    },
    "libcst.helpers._template.mangled_name": {
     "line number": [
      57
     ]
    },
    "str": {
     "line number": [
      47,
      47,
      47
     ]
    },
    "typing.Set": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers._template.mangled_name": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "str": {
     "line number": [
      33,
      33
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers._template.parse_template_expression": {
  "data": {
   "lineno": 418,
   "symbols_in_volume": {
    "libcst.BaseExpression": {
     "line number": [
      443,
      422
     ]
    },
    "libcst.PartialParserConfig": {
     "line number": [
      420
     ]
    },
    "libcst.helpers._template.TemplateChecker": {
     "line number": [
      445
     ]
    },
    "libcst.helpers._template.ValidReplacementType": {
     "line number": [
      421
     ]
    },
    "libcst.helpers._template.mangle_template": {
     "line number": [
      440
     ]
    },
    "libcst.helpers._template.unmangle_nodes": {
     "line number": [
      443
     ]
    },
    "libcst.helpers.common.ensure_type": {
     "line number": [
      442
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      441
     ]
    },
    "str": {
     "line number": [
      419
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers._template.parse_template_module": {
  "data": {
   "lineno": 351,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      378,
      355
     ]
    },
    "libcst.PartialParserConfig": {
     "line number": [
      353
     ]
    },
    "libcst.helpers._template.TemplateChecker": {
     "line number": [
      379
     ]
    },
    "libcst.helpers._template.ValidReplacementType": {
     "line number": [
      354
     ]
    },
    "libcst.helpers._template.mangle_template": {
     "line number": [
      376
     ]
    },
    "libcst.helpers._template.unmangle_nodes": {
     "line number": [
      378
     ]
    },
    "libcst.helpers.common.ensure_type": {
     "line number": [
      378
     ]
    },
    "libcst.parse_module": {
     "line number": [
      377
     ]
    },
    "str": {
     "line number": [
      352
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers._template.parse_template_statement": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      411
     ]
    },
    "isinstance": {
     "line number": [
      408
     ]
    },
    "libcst.BaseCompoundStatement": {
     "line number": [
      409,
      387
     ]
    },
    "libcst.PartialParserConfig": {
     "line number": [
      385
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      409,
      387
     ]
    },
    "libcst.helpers._template.TemplateChecker": {
     "line number": [
      414
     ]
    },
    "libcst.helpers._template.ValidReplacementType": {
     "line number": [
      386
     ]
    },
    "libcst.helpers._template.mangle_template": {
     "line number": [
      405
     ]
    },
    "libcst.helpers._template.unmangle_nodes": {
     "line number": [
      407
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      406
     ]
    },
    "str": {
     "line number": [
      384
     ]
    },
    "typing.Union": {
     "line number": [
      387
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers._template.unmangle_nodes": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      342,
      345,
      343
     ]
    },
    "libcst.helpers._template.TemplateTransformer": {
     "line number": [
      344
     ]
    },
    "libcst.helpers._template.ValidReplacementType": {
     "line number": [
      342
     ]
    },
    "libcst.helpers.common.ensure_type": {
     "line number": [
      345
     ]
    },
    "str": {
     "line number": [
      342
     ]
    },
    "typing.Mapping": {
     "line number": [
      342
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers._template.unmangled_name": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "str": {
     "line number": [
      37,
      37
     ]
    },
    "typing.Optional": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers.common": {
  "data": {},
  "type": "module"
 },
 "libcst.helpers.common.CSTNodeT": {
  "data": {
   "shadows": "libcst._types.CSTNodeT"
  },
  "type": "import"
 },
 "libcst.helpers.common.Type": {
  "data": {
   "shadows": "typing.Type"
  },
  "type": "import"
 },
 "libcst.helpers.common.ensure_type": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      22
     ]
    },
    "isinstance": {
     "line number": [
      21
     ]
    },
    "libcst._types.CSTNodeT": {
     "line number": [
      11,
      11
     ]
    },
    "object": {
     "line number": [
      11
     ]
    },
    "typing.Type": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers.ensure_type": {
  "data": {
   "shadows": "libcst.helpers.common.ensure_type"
  },
  "type": "import"
 },
 "libcst.helpers.expression": {
  "data": {},
  "type": "module"
 },
 "libcst.helpers.expression.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.helpers.expression.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.helpers.expression.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.helpers.expression.get_full_name_for_node": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      17,
      19,
      21,
      23,
      25,
      27,
      29
     ]
    },
    "libcst.Attribute": {
     "line number": [
      21
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      11
     ]
    },
    "libcst.Call": {
     "line number": [
      23
     ]
    },
    "libcst.ClassDef": {
     "line number": [
      27
     ]
    },
    "libcst.Decorator": {
     "line number": [
      29
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      27
     ]
    },
    "libcst.Name": {
     "line number": [
      17
     ]
    },
    "libcst.Subscript": {
     "line number": [
      25
     ]
    },
    "str": {
     "line number": [
      11,
      19,
      11
     ]
    },
    "typing.Optional": {
     "line number": [
      11
     ]
    },
    "typing.Union": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers.expression.get_full_name_for_node_or_raise": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      41
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      34
     ]
    },
    "libcst.helpers.expression.get_full_name_for_node": {
     "line number": [
      39
     ]
    },
    "str": {
     "line number": [
      34,
      34
     ]
    },
    "typing.Union": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers.get_absolute_module_for_import": {
  "data": {
   "shadows": "libcst.helpers._statement.get_absolute_module_for_import"
  },
  "type": "import"
 },
 "libcst.helpers.get_absolute_module_for_import_or_raise": {
  "data": {
   "shadows": "libcst.helpers._statement.get_absolute_module_for_import_or_raise"
  },
  "type": "import"
 },
 "libcst.helpers.get_full_name_for_node": {
  "data": {
   "shadows": "libcst.helpers.expression.get_full_name_for_node"
  },
  "type": "import"
 },
 "libcst.helpers.get_full_name_for_node_or_raise": {
  "data": {
   "shadows": "libcst.helpers.expression.get_full_name_for_node_or_raise"
  },
  "type": "import"
 },
 "libcst.helpers.insert_header_comments": {
  "data": {
   "shadows": "libcst.helpers.module.insert_header_comments"
  },
  "type": "import"
 },
 "libcst.helpers.module": {
  "data": {},
  "type": "module"
 },
 "libcst.helpers.module.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.helpers.module.insert_header_comments": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      22
     ]
    },
    "itertools.islice": {
     "line number": [
      26,
      27
     ]
    },
    "libcst.helpers.module.libcst": {
     "line number": [
      12,
      29,
      29,
      12
     ]
    },
    "str": {
     "line number": [
      12
     ]
    },
    "typing.List": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers.module.islice": {
  "data": {
   "shadows": "itertools.islice"
  },
  "type": "import"
 },
 "libcst.helpers.module.libcst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.helpers.parse_template_expression": {
  "data": {
   "shadows": "libcst.helpers._template.parse_template_expression"
  },
  "type": "import"
 },
 "libcst.helpers.parse_template_module": {
  "data": {
   "shadows": "libcst.helpers._template.parse_template_module"
  },
  "type": "import"
 },
 "libcst.helpers.parse_template_statement": {
  "data": {
   "shadows": "libcst.helpers._template.parse_template_statement"
  },
  "type": "import"
 },
 "libcst.helpers.tests": {
  "data": {},
  "type": "module"
 },
 "libcst.helpers.tests.test_expression": {
  "data": {},
  "type": "module"
 },
 "libcst.helpers.tests.test_expression.ExpressionTest": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      18
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.helpers.tests.test_expression.ExpressionTest.test_complex_evaluated_value": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": {
    "ast.literal_eval": {
     "line number": [
      69
     ]
    },
    "libcst.Imaginary": {
     "line number": [
      67
     ]
    },
    "libcst.helpers.ensure_type": {
     "line number": [
      67
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      67
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers.tests.test_expression.ExpressionTest.test_concatenated_string_evaluated_value": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": {
    "libcst.ConcatenatedString": {
     "line number": [
      73,
      76,
      79,
      82
     ]
    },
    "libcst.helpers.ensure_type": {
     "line number": [
      73,
      76,
      79,
      82
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      73,
      76,
      79,
      82
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers.tests.test_expression.ExpressionTest.test_float_evaluated_value": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "ast.literal_eval": {
     "line number": [
      63
     ]
    },
    "libcst.Float": {
     "line number": [
      61
     ]
    },
    "libcst.helpers.ensure_type": {
     "line number": [
      61
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      61
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers.tests.test_expression.ExpressionTest.test_get_full_name_for_expression": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      42
     ]
    },
    "input": {
     "line number": [
      40,
      43,
      45
     ]
    },
    "libcst.Attribute": {
     "line number": [
      30
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      38
     ]
    },
    "libcst.Decorator": {
     "line number": [
      29
     ]
    },
    "libcst.Name": {
     "line number": [
      22
     ]
    },
    "libcst.helpers.ensure_type": {
     "line number": [
      30
     ]
    },
    "libcst.helpers.get_full_name_for_node": {
     "line number": [
      40
     ]
    },
    "libcst.helpers.get_full_name_for_node_or_raise": {
     "line number": [
      43,
      45
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      23,
      24,
      25,
      30
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      26,
      27,
      34
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      19
     ]
    },
    "str": {
     "line number": [
      38,
      38
     ]
    },
    "typing.Optional": {
     "line number": [
      38
     ]
    },
    "typing.Union": {
     "line number": [
      38
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers.tests.test_expression.ExpressionTest.test_integer_evaluated_value": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "ast.literal_eval": {
     "line number": [
      57
     ]
    },
    "libcst.Integer": {
     "line number": [
      55
     ]
    },
    "libcst.helpers.ensure_type": {
     "line number": [
      55
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers.tests.test_expression.ExpressionTest.test_simplestring_evaluated_value": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "ast.literal_eval": {
     "line number": [
      51
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      49
     ]
    },
    "libcst.helpers.ensure_type": {
     "line number": [
      49
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers.tests.test_expression.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.helpers.tests.test_expression.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.helpers.tests.test_expression.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.helpers.tests.test_expression.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.helpers.tests.test_expression.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst.helpers.tests.test_expression.ensure_type": {
  "data": {
   "shadows": "libcst.helpers.ensure_type"
  },
  "type": "import"
 },
 "libcst.helpers.tests.test_expression.get_full_name_for_node": {
  "data": {
   "shadows": "libcst.helpers.get_full_name_for_node"
  },
  "type": "import"
 },
 "libcst.helpers.tests.test_expression.get_full_name_for_node_or_raise": {
  "data": {
   "shadows": "libcst.helpers.get_full_name_for_node_or_raise"
  },
  "type": "import"
 },
 "libcst.helpers.tests.test_expression.literal_eval": {
  "data": {
   "shadows": "ast.literal_eval"
  },
  "type": "import"
 },
 "libcst.helpers.tests.test_module": {
  "data": {},
  "type": "module"
 },
 "libcst.helpers.tests.test_module.ModuleTest": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.helpers.tests.test_module.ModuleTest.test_insert_header_comments": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "libcst.helpers.insert_header_comments": {
     "line number": [
      23,
      31,
      39,
      50,
      58
     ]
    },
    "libcst.helpers.tests.test_module.libcst": {
     "line number": [
      21,
      29,
      37,
      48,
      56
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers.tests.test_module.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.helpers.tests.test_module.insert_header_comments": {
  "data": {
   "shadows": "libcst.helpers.insert_header_comments"
  },
  "type": "import"
 },
 "libcst.helpers.tests.test_module.libcst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.helpers.tests.test_statement": {
  "data": {},
  "type": "module"
 },
 "libcst.helpers.tests.test_statement.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.helpers.tests.test_statement.StatementTest": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.helpers.tests.test_statement.StatementTest.test_get_absolute_module": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      46
     ]
    },
    "len": {
     "line number": [
      41
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      42
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      40
     ]
    },
    "libcst.helpers.ensure_type": {
     "line number": [
      40,
      42
     ]
    },
    "libcst.helpers.get_absolute_module_for_import": {
     "line number": [
      44
     ]
    },
    "libcst.helpers.get_absolute_module_for_import_or_raise": {
     "line number": [
      47,
      50
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      40
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      18
     ]
    },
    "str": {
     "line number": [
      38,
      38,
      38
     ]
    },
    "typing.Optional": {
     "line number": [
      38,
      38
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers.tests.test_statement.StatementTest.test_importalias_helpers": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "libcst.AsName": {
     "line number": [
      65,
      73
     ]
    },
    "libcst.Attribute": {
     "line number": [
      58,
      72
     ]
    },
    "libcst.ImportAlias": {
     "line number": [
      81,
      56,
      58,
      64,
      71
     ]
    },
    "libcst.Name": {
     "line number": [
      56,
      58,
      58,
      65,
      65,
      72,
      72,
      73
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      53
     ]
    },
    "str": {
     "line number": [
      81,
      81
     ]
    },
    "typing.Optional": {
     "line number": [
      81
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers.tests.test_statement.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.helpers.tests.test_statement.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.helpers.tests.test_statement.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst.helpers.tests.test_statement.ensure_type": {
  "data": {
   "shadows": "libcst.helpers.ensure_type"
  },
  "type": "import"
 },
 "libcst.helpers.tests.test_statement.get_absolute_module_for_import": {
  "data": {
   "shadows": "libcst.helpers.get_absolute_module_for_import"
  },
  "type": "import"
 },
 "libcst.helpers.tests.test_statement.get_absolute_module_for_import_or_raise": {
  "data": {
   "shadows": "libcst.helpers.get_absolute_module_for_import_or_raise"
  },
  "type": "import"
 },
 "libcst.helpers.tests.test_template": {
  "data": {},
  "type": "module"
 },
 "libcst.helpers.tests.test_template.TemplateTest": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.helpers.tests.test_template.TemplateTest.code": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      31
     ]
    },
    "libcst.Module": {
     "line number": [
      32
     ]
    },
    "str": {
     "line number": [
      31
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers.tests.test_template.TemplateTest.dedent": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "libcst.helpers.tests.test_template.os": {
     "line number": [
      21,
      27,
      29
     ]
    },
    "str": {
     "line number": [
      20,
      20
     ]
    },
    "textwrap.dedent": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers.tests.test_template.TemplateTest.test_annotation": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "libcst.Annotation": {
     "line number": [
      98
     ]
    },
    "libcst.Integer": {
     "line number": [
      89,
      99
     ]
    },
    "libcst.Name": {
     "line number": [
      89,
      98
     ]
    },
    "libcst.helpers.parse_template_statement": {
     "line number": [
      88,
      96
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers.tests.test_template.TemplateTest.test_args": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      178,
      179
     ]
    },
    "libcst.Name": {
     "line number": [
      169,
      169,
      178,
      179
     ]
    },
    "libcst.helpers.parse_template_expression": {
     "line number": [
      168,
      176
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers.tests.test_template.TemplateTest.test_assign_target": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": {
    "libcst.AssignTarget": {
     "line number": [
      120,
      121
     ]
    },
    "libcst.Integer": {
     "line number": [
      111,
      122
     ]
    },
    "libcst.Name": {
     "line number": [
      109,
      110,
      120,
      121
     ]
    },
    "libcst.helpers.parse_template_statement": {
     "line number": [
      107,
      118
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers.tests.test_template.TemplateTest.test_decorators": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": {
    "libcst.Decorator": {
     "line number": [
      318
     ]
    },
    "libcst.Name": {
     "line number": [
      312,
      318
     ]
    },
    "libcst.helpers.parse_template_statement": {
     "line number": [
      311,
      317
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers.tests.test_template.TemplateTest.test_parameters": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      131,
      139,
      148,
      158,
      158,
      159
     ]
    },
    "libcst.Param": {
     "line number": [
      139,
      148,
      158,
      158,
      159
     ]
    },
    "libcst.Parameters": {
     "line number": [
      148,
      157
     ]
    },
    "libcst.helpers.parse_template_statement": {
     "line number": [
      130,
      138,
      146,
      155
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers.tests.test_template.TemplateTest.test_simple_expression": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": {
    "libcst.BinaryOperation": {
     "line number": [
      74
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      75
     ]
    },
    "libcst.Multiply": {
     "line number": [
      77
     ]
    },
    "libcst.Name": {
     "line number": [
      72,
      73,
      76,
      78
     ]
    },
    "libcst.RightParen": {
     "line number": [
      79
     ]
    },
    "libcst.helpers.parse_template_expression": {
     "line number": [
      70
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers.tests.test_template.TemplateTest.test_simple_module": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      44,
      45
     ]
    },
    "libcst.helpers.parse_template_module": {
     "line number": [
      35
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers.tests.test_template.TemplateTest.test_simple_statement": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      62
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      63
     ]
    },
    "libcst.helpers.parse_template_statement": {
     "line number": [
      60
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers.tests.test_template.TemplateTest.test_statement": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": {
    "libcst.Call": {
     "line number": [
      193
     ]
    },
    "libcst.Expr": {
     "line number": [
      193
     ]
    },
    "libcst.If": {
     "line number": [
      190
     ]
    },
    "libcst.Name": {
     "line number": [
      191,
      193
     ]
    },
    "libcst.Pass": {
     "line number": [
      191,
      194
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      193
     ]
    },
    "libcst.SimpleStatementSuite": {
     "line number": [
      191
     ]
    },
    "libcst.helpers.parse_template_module": {
     "line number": [
      188
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers.tests.test_template.TemplateTest.test_subscript": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": {
    "libcst.Index": {
     "line number": [
      252,
      258,
      295,
      303
     ]
    },
    "libcst.Integer": {
     "line number": [
      265,
      265,
      272,
      272,
      279,
      279,
      286,
      286,
      294,
      294,
      295,
      302,
      302,
      303
     ]
    },
    "libcst.Name": {
     "line number": [
      239,
      245,
      245,
      252,
      258
     ]
    },
    "libcst.Slice": {
     "line number": [
      265,
      272,
      279,
      286,
      294,
      302
     ]
    },
    "libcst.SubscriptElement": {
     "line number": [
      258,
      272,
      286,
      302,
      303
     ]
    },
    "libcst.helpers.parse_template_expression": {
     "line number": [
      238,
      244,
      251,
      257,
      264,
      270,
      278,
      284,
      292,
      300
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers.tests.test_template.TemplateTest.test_suite": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": {
    "libcst.IndentedBlock": {
     "line number": [
      213,
      229
     ]
    },
    "libcst.Pass": {
     "line number": [
      205,
      213,
      221,
      229
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      213,
      229
     ]
    },
    "libcst.SimpleStatementSuite": {
     "line number": [
      205,
      221
     ]
    },
    "libcst.helpers.parse_template_module": {
     "line number": [
      203,
      211,
      219,
      227
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.helpers.tests.test_template.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.helpers.tests.test_template.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.helpers.tests.test_template.dedent": {
  "data": {
   "shadows": "textwrap.dedent"
  },
  "type": "import"
 },
 "libcst.helpers.tests.test_template.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "libcst.helpers.tests.test_template.parse_template_expression": {
  "data": {
   "shadows": "libcst.helpers.parse_template_expression"
  },
  "type": "import"
 },
 "libcst.helpers.tests.test_template.parse_template_module": {
  "data": {
   "shadows": "libcst.helpers.parse_template_module"
  },
  "type": "import"
 },
 "libcst.helpers.tests.test_template.parse_template_statement": {
  "data": {
   "shadows": "libcst.helpers.parse_template_statement"
  },
  "type": "import"
 },
 "libcst.matchers": {
  "data": {
   "symbols_in_volume": {
    "bool": {
     "line number": [
      151,
      224,
      227,
      233,
      236,
      239,
      315,
      318,
      390,
      425,
      467,
      598,
      647,
      649,
      651,
      654,
      843,
      1064,
      1405,
      1613,
      1877,
      1880,
      1883,
      2364,
      2381,
      2387,
      2393,
      2566,
      2827,
      2857,
      2866,
      3081,
      3086,
      3201,
      3236,
      3241,
      3246,
      3513,
      4123,
      4123,
      4123,
      4128,
      4131,
      4192,
      4661,
      4812,
      5090,
      5096,
      5510,
      5516,
      6004,
      6159,
      6669,
      6779,
      6813,
      6819,
      6825,
      7274,
      7700,
      8032,
      8037,
      8042,
      8573,
      9684,
      9690,
      9696,
      9699,
      10156,
      10795,
      11510,
      11791,
      11887,
      11893,
      12344,
      12651,
      12879
     ]
    },
    "libcst.Annotation": {
     "line number": [
      227,
      5516
     ]
    },
    "libcst.Arg": {
     "line number": [
      1613
     ]
    },
    "libcst.AsName": {
     "line number": [
      4192
     ]
    },
    "libcst.AssignEqual": {
     "line number": [
      236,
      5096
     ]
    },
    "libcst.AssignTarget": {
     "line number": [
      467
     ]
    },
    "libcst.Asynchronous": {
     "line number": [
      2393
     ]
    },
    "libcst.Attribute": {
     "line number": [
      3081,
      6779,
      6813
     ]
    },
    "libcst.BaseAssignTargetExpression": {
     "line number": [
      598
     ]
    },
    "libcst.BaseAugOp": {
     "line number": [
      843
     ]
    },
    "libcst.BaseBinaryOp": {
     "line number": [
      1064
     ]
    },
    "libcst.BaseBooleanOp": {
     "line number": [
      1405
     ]
    },
    "libcst.BaseCompOp": {
     "line number": [
      2827
     ]
    },
    "libcst.BaseCompoundStatement": {
     "line number": [
      8573
     ]
    },
    "libcst.BaseDelTargetExpression": {
     "line number": [
      3201
     ]
    },
    "libcst.BaseDictElement": {
     "line number": [
      3236
     ]
    },
    "libcst.BaseElement": {
     "line number": [
      8032
     ]
    },
    "libcst.BaseExpression": {
     "line number": [
      224,
      233,
      12879
     ]
    },
    "libcst.BaseFormattedStringContent": {
     "line number": [
      4812
     ]
    },
    "libcst.BaseParenthesizableWhitespace": {
     "line number": [
      151
     ]
    },
    "libcst.BaseSlice": {
     "line number": [
      11791
     ]
    },
    "libcst.BaseSmallStatement": {
     "line number": [
      10795
     ]
    },
    "libcst.BaseStatement": {
     "line number": [
      7274
     ]
    },
    "libcst.BaseSuite": {
     "line number": [
      1877
     ]
    },
    "libcst.BaseUnaryOp": {
     "line number": [
      12344
     ]
    },
    "libcst.Call": {
     "line number": [
      3081
     ]
    },
    "libcst.Colon": {
     "line number": [
      7700
     ]
    },
    "libcst.Comma": {
     "line number": [
      318
     ]
    },
    "libcst.Comment": {
     "line number": [
      4128
     ]
    },
    "libcst.CompFor": {
     "line number": [
      2387,
      3513
     ]
    },
    "libcst.CompIf": {
     "line number": [
      2381
     ]
    },
    "libcst.ComparisonTarget": {
     "line number": [
      2566
     ]
    },
    "libcst.ConcatenatedString": {
     "line number": [
      2866
     ]
    },
    "libcst.Decorator": {
     "line number": [
      1880
     ]
    },
    "libcst.Dot": {
     "line number": [
      649
     ]
    },
    "libcst.Else": {
     "line number": [
      4661,
      6159
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      1883
     ]
    },
    "libcst.ExceptHandler": {
     "line number": [
      11887
     ]
    },
    "libcst.Finally": {
     "line number": [
      11893
     ]
    },
    "libcst.FormattedString": {
     "line number": [
      2857,
      2866
     ]
    },
    "libcst.From": {
     "line number": [
      10156,
      12879
     ]
    },
    "libcst.If": {
     "line number": [
      6159
     ]
    },
    "libcst.ImportAlias": {
     "line number": [
      6669
     ]
    },
    "libcst.LeftCurlyBrace": {
     "line number": [
      3241
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      651,
      6819
     ]
    },
    "libcst.LeftSquareBracket": {
     "line number": [
      8037
     ]
    },
    "libcst.List": {
     "line number": [
      390
     ]
    },
    "libcst.Name": {
     "line number": [
      315,
      390,
      647,
      3081,
      6779,
      6813
     ]
    },
    "libcst.NameItem": {
     "line number": [
      6004
     ]
    },
    "libcst.Newline": {
     "line number": [
      4131
     ]
    },
    "libcst.Param": {
     "line number": [
      9684,
      9690,
      9696
     ]
    },
    "libcst.ParamSlash": {
     "line number": [
      9699
     ]
    },
    "libcst.ParamStar": {
     "line number": [
      9690
     ]
    },
    "libcst.Parameters": {
     "line number": [
      5510
     ]
    },
    "libcst.RightCurlyBrace": {
     "line number": [
      3246
     ]
    },
    "libcst.RightParen": {
     "line number": [
      654,
      6825
     ]
    },
    "libcst.RightSquareBracket": {
     "line number": [
      8042
     ]
    },
    "libcst.Semicolon": {
     "line number": [
      239
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      8573
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      2857,
      2866
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      425
     ]
    },
    "libcst.SubscriptElement": {
     "line number": [
      11510
     ]
    },
    "libcst.TrailingWhitespace": {
     "line number": [
      3086
     ]
    },
    "libcst.Tuple": {
     "line number": [
      390
     ]
    },
    "libcst.WithItem": {
     "line number": [
      12651
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      150,
      223,
      227,
      232,
      236,
      239,
      314,
      318,
      389,
      424,
      467,
      597,
      647,
      649,
      651,
      654,
      843,
      1064,
      1405,
      1613,
      1877,
      1880,
      1883,
      2364,
      2381,
      2386,
      2392,
      2565,
      2827,
      2856,
      2863,
      3080,
      3085,
      3200,
      3235,
      3240,
      3245,
      3513,
      4123,
      4127,
      4131,
      4191,
      4660,
      4811,
      5090,
      5095,
      5510,
      5515,
      6004,
      6158,
      6669,
      6778,
      6812,
      6818,
      6824,
      7274,
      7700,
      8032,
      8036,
      8041,
      8571,
      9684,
      9689,
      9695,
      9699,
      10155,
      10794,
      11509,
      11791,
      11887,
      11892,
      12344,
      12651,
      12878
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      151,
      224,
      227,
      233,
      236,
      239,
      315,
      318,
      390,
      425,
      467,
      598,
      647,
      649,
      651,
      654,
      843,
      1064,
      1405,
      1613,
      1877,
      1880,
      1883,
      2364,
      2381,
      2387,
      2393,
      2566,
      2827,
      2857,
      2864,
      3081,
      3086,
      3201,
      3236,
      3241,
      3246,
      3513,
      4123,
      4128,
      4131,
      4192,
      4661,
      4812,
      5090,
      5096,
      5510,
      5516,
      6004,
      6159,
      6669,
      6779,
      6813,
      6819,
      6825,
      7274,
      7700,
      8032,
      8037,
      8042,
      8572,
      9684,
      9690,
      9696,
      9699,
      10156,
      10795,
      11510,
      11791,
      11887,
      11893,
      12344,
      12651,
      12879
     ]
    },
    "libcst.matchers._matcher_base.MatchMetadata": {
     "line number": [
      145
     ]
    },
    "libcst.matchers._matcher_base.MatchMetadataIfTrue": {
     "line number": [
      145
     ]
    },
    "str": {
     "line number": [
      2364,
      2364,
      5090,
      5090
     ]
    },
    "typing.Callable": {
     "line number": [
      151,
      224,
      227,
      233,
      236,
      239,
      315,
      318,
      390,
      425,
      467,
      598,
      647,
      649,
      651,
      654,
      843,
      1064,
      1405,
      1613,
      1877,
      1880,
      1883,
      2364,
      2381,
      2387,
      2393,
      2566,
      2827,
      2857,
      2865,
      3081,
      3086,
      3201,
      3236,
      3241,
      3246,
      3513,
      4123,
      4128,
      4131,
      4192,
      4661,
      4812,
      5090,
      5096,
      5510,
      5516,
      6004,
      6159,
      6669,
      6779,
      6813,
      6819,
      6825,
      7274,
      7700,
      8032,
      8037,
      8042,
      8573,
      9684,
      9690,
      9696,
      9699,
      10156,
      10795,
      11510,
      11791,
      11887,
      11893,
      12344,
      12651,
      12879
     ]
    },
    "typing.Union": {
     "line number": [
      145,
      148,
      221,
      226,
      229,
      233,
      235,
      238,
      311,
      315,
      317,
      385,
      390,
      422,
      466,
      595,
      646,
      649,
      650,
      653,
      842,
      1063,
      1404,
      1613,
      1876,
      1879,
      1882,
      2364,
      2380,
      2383,
      2387,
      2389,
      2393,
      2563,
      2826,
      2853,
      2857,
      2859,
      2866,
      3076,
      3081,
      3083,
      3198,
      3233,
      3238,
      3243,
      3512,
      4123,
      4124,
      4128,
      4130,
      4188,
      4192,
      4657,
      4661,
      4809,
      5089,
      5090,
      5092,
      5096,
      5509,
      5512,
      5516,
      6003,
      6154,
      6159,
      6668,
      6775,
      6779,
      6808,
      6813,
      6815,
      6819,
      6821,
      6825,
      7273,
      7699,
      8031,
      8034,
      8039,
      8568,
      8573,
      9683,
      9686,
      9690,
      9692,
      9696,
      9698,
      10152,
      10156,
      10792,
      11507,
      11790,
      11886,
      11889,
      11893,
      12343,
      12650,
      12874,
      12879
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst.matchers.ABC": {
  "data": {
   "shadows": "abc.ABC"
  },
  "type": "import"
 },
 "libcst.matchers.Add": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      155
     ]
    },
    "libcst.matchers.BaseBinaryOp": {
     "line number": [
      156
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      158,
      160,
      161,
      164,
      166,
      167
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      170,
      172,
      173
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      161,
      167,
      173
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      156
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      162,
      168,
      174
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      159,
      165,
      171
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      160,
      166,
      172
     ]
    },
    "typing.Union": {
     "line number": [
      157,
      163,
      169
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.AddAssign": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      177
     ]
    },
    "libcst.matchers.BaseAugOp": {
     "line number": [
      178
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      180,
      182,
      183,
      186,
      188,
      189
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      192,
      194,
      195
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      183,
      189,
      195
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      178
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      184,
      190,
      196
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      181,
      187,
      193
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      182,
      188,
      194
     ]
    },
    "typing.Union": {
     "line number": [
      179,
      185,
      191
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.AllOf": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.AllOf"
  },
  "type": "import"
 },
 "libcst.matchers.And": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      199
     ]
    },
    "libcst.matchers.BaseBooleanOp": {
     "line number": [
      200
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      202,
      204,
      205,
      208,
      210,
      211
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      214,
      216,
      217
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      205,
      211,
      217
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      200
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      206,
      212,
      218
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      203,
      209,
      215
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      204,
      210,
      216
     ]
    },
    "typing.Union": {
     "line number": [
      201,
      207,
      213
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.AnnAssign": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      243
     ]
    },
    "libcst.matchers.AnnotationMatchType": {
     "line number": [
      252,
      254,
      255
     ]
    },
    "libcst.matchers.AssignEqualMatchType": {
     "line number": [
      264,
      266,
      267
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      246,
      248,
      249
     ]
    },
    "libcst.matchers.BaseExpressionOrNoneMatchType": {
     "line number": [
      258,
      260,
      261
     ]
    },
    "libcst.matchers.BaseSmallStatement": {
     "line number": [
      244
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      276,
      278,
      279
     ]
    },
    "libcst.matchers.SemicolonMatchType": {
     "line number": [
      270,
      272,
      273
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      249,
      255,
      261,
      267,
      273,
      279
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      244
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      250,
      256,
      262,
      268,
      274,
      280
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      247,
      253,
      259,
      265,
      271,
      277
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      248,
      254,
      260,
      266,
      272,
      278
     ]
    },
    "typing.Union": {
     "line number": [
      245,
      251,
      257,
      263,
      269,
      275
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Annotation": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      283
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      286,
      288,
      289
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      292,
      294,
      295,
      298,
      300,
      301
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      304,
      306,
      307
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      289,
      295,
      301,
      307
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      284
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      290,
      296,
      302,
      308
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      287,
      293,
      299,
      305
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      288,
      294,
      300,
      306
     ]
    },
    "typing.Union": {
     "line number": [
      285,
      291,
      297,
      303
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.AnnotationMatchType": {
  "data": {
   "lineno": 226
  },
  "type": "constant"
 },
 "libcst.matchers.AnnotationOrNoneMatchType": {
  "data": {
   "lineno": 5512
  },
  "type": "constant"
 },
 "libcst.matchers.Arg": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      348,
      354,
      361
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      322
     ]
    },
    "libcst.matchers.AssignEqualMatchType": {
     "line number": [
      337,
      339,
      340
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      325,
      327,
      328
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      366,
      368,
      369,
      372,
      374,
      375
     ]
    },
    "libcst.matchers.CommaMatchType": {
     "line number": [
      343,
      343,
      343
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      347,
      353,
      360,
      378,
      380,
      381
     ]
    },
    "libcst.matchers.NameOrNoneMatchType": {
     "line number": [
      331,
      333,
      334
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      328,
      334,
      340,
      343,
      357,
      369,
      375,
      381
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      323
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      329,
      335,
      341,
      344,
      364,
      370,
      376,
      382
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      326,
      332,
      338,
      343,
      349,
      367,
      373,
      379
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      348,
      354,
      361
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      327,
      333,
      339,
      343,
      350,
      368,
      374,
      380
     ]
    },
    "typing.Callable": {
     "line number": [
      348,
      354,
      361
     ]
    },
    "typing.Union": {
     "line number": [
      324,
      330,
      336,
      342,
      345,
      351,
      358,
      365,
      371,
      377
     ]
    },
    "typing_extensions.Literal": {
     "line number": [
      346,
      348,
      352,
      354,
      359,
      361
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.ArgMatchType": {
  "data": {
   "lineno": 1613
  },
  "type": "constant"
 },
 "libcst.matchers.AsName": {
  "data": {
   "lineno": 394,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      394
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      403,
      405,
      406,
      409,
      411,
      412
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      415,
      417,
      418
     ]
    },
    "libcst.matchers.NameOrTupleOrListMatchType": {
     "line number": [
      397,
      399,
      400
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      400,
      406,
      412,
      418
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      395
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      401,
      407,
      413,
      419
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      398,
      404,
      410,
      416
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      399,
      405,
      411,
      417
     ]
    },
    "typing.Union": {
     "line number": [
      396,
      402,
      408,
      414
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.AsNameOrNoneMatchType": {
  "data": {
   "lineno": 4188
  },
  "type": "constant"
 },
 "libcst.matchers.Assert": {
  "data": {
   "lineno": 429,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      429
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      432,
      434,
      435
     ]
    },
    "libcst.matchers.BaseExpressionOrNoneMatchType": {
     "line number": [
      438,
      440,
      441
     ]
    },
    "libcst.matchers.BaseSmallStatement": {
     "line number": [
      430
     ]
    },
    "libcst.matchers.CommaMatchType": {
     "line number": [
      444,
      444,
      444
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      459,
      461,
      462
     ]
    },
    "libcst.matchers.SemicolonMatchType": {
     "line number": [
      453,
      455,
      456
     ]
    },
    "libcst.matchers.SimpleWhitespaceMatchType": {
     "line number": [
      447,
      449,
      450
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      435,
      441,
      444,
      450,
      456,
      462
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      430
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      436,
      442,
      445,
      451,
      457,
      463
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      433,
      439,
      444,
      448,
      454,
      460
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      434,
      440,
      444,
      449,
      455,
      461
     ]
    },
    "typing.Union": {
     "line number": [
      431,
      437,
      443,
      446,
      452,
      458
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Assign": {
  "data": {
   "lineno": 471,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      499,
      523,
      549
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      471
     ]
    },
    "libcst.AssignTarget": {
     "line number": [
      499,
      523,
      549
     ]
    },
    "libcst.matchers.AssignTargetMatchType": {
     "line number": [
      476,
      478,
      479,
      482,
      484,
      485,
      490,
      492,
      493,
      504,
      505,
      506,
      509,
      510,
      511,
      516,
      517,
      518,
      530,
      531,
      532,
      535,
      536,
      537,
      542,
      543,
      544
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      554,
      556,
      557
     ]
    },
    "libcst.matchers.BaseSmallStatement": {
     "line number": [
      472
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      566,
      568,
      569
     ]
    },
    "libcst.matchers.SemicolonMatchType": {
     "line number": [
      560,
      562,
      563
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      479,
      485,
      493,
      506,
      511,
      518,
      526,
      532,
      537,
      544,
      557,
      563,
      569
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      480,
      507,
      533
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      488,
      514,
      540
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      472
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      552,
      558,
      564,
      570
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      477,
      483,
      491,
      498,
      555,
      561,
      567
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      499,
      523,
      549
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      478,
      484,
      492,
      500,
      505,
      510,
      517,
      531,
      536,
      543,
      556,
      562,
      568
     ]
    },
    "typing.Callable": {
     "line number": [
      499,
      523,
      549
     ]
    },
    "typing.Sequence": {
     "line number": [
      474,
      499,
      502,
      523,
      528,
      549
     ]
    },
    "typing.Union": {
     "line number": [
      473,
      475,
      481,
      489,
      501,
      503,
      508,
      515,
      527,
      529,
      534,
      541,
      553,
      559,
      565
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.AssignEqual": {
  "data": {
   "lineno": 573,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      573
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      576,
      578,
      579,
      582,
      584,
      585
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      588,
      590,
      591
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      579,
      585,
      591
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      574
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      580,
      586,
      592
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      577,
      583,
      589
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      578,
      584,
      590
     ]
    },
    "typing.Union": {
     "line number": [
      575,
      581,
      587
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.AssignEqualMatchType": {
  "data": {
   "lineno": 235
  },
  "type": "constant"
 },
 "libcst.matchers.AssignEqualOrNoneMatchType": {
  "data": {
   "lineno": 5092
  },
  "type": "constant"
 },
 "libcst.matchers.AssignTarget": {
  "data": {
   "lineno": 602,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      602
     ]
    },
    "libcst.matchers.BaseAssignTargetExpressionMatchType": {
     "line number": [
      605,
      607,
      608
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      623,
      625,
      626
     ]
    },
    "libcst.matchers.SimpleWhitespaceMatchType": {
     "line number": [
      611,
      613,
      614,
      617,
      619,
      620
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      608,
      614,
      620,
      626
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      603
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      609,
      615,
      621,
      627
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      606,
      612,
      618,
      624
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      607,
      613,
      619,
      625
     ]
    },
    "typing.Union": {
     "line number": [
      604,
      610,
      616,
      622
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.AssignTargetMatchType": {
  "data": {
   "lineno": 466
  },
  "type": "constant"
 },
 "libcst.matchers.Asynchronous": {
  "data": {
   "lineno": 630,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      630
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      639,
      641,
      642
     ]
    },
    "libcst.matchers.SimpleWhitespaceMatchType": {
     "line number": [
      633,
      635,
      636
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      636,
      642
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      631
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      637,
      643
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      634,
      640
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      635,
      641
     ]
    },
    "typing.Union": {
     "line number": [
      632,
      638
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.AsynchronousOrNoneMatchType": {
  "data": {
   "lineno": 2389
  },
  "type": "constant"
 },
 "libcst.matchers.AtLeastN": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.AtLeastN"
  },
  "type": "import"
 },
 "libcst.matchers.AtMostN": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.AtMostN"
  },
  "type": "import"
 },
 "libcst.matchers.Attribute": {
  "data": {
   "lineno": 658,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      700,
      724,
      750,
      780,
      804,
      830
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      658
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      700,
      724,
      750
     ]
    },
    "libcst.RightParen": {
     "line number": [
      780,
      804,
      830
     ]
    },
    "libcst.matchers.BaseAssignTargetExpression": {
     "line number": [
      660
     ]
    },
    "libcst.matchers.BaseDelTargetExpression": {
     "line number": [
      660
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      660
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      663,
      665,
      666
     ]
    },
    "libcst.matchers.DotMatchType": {
     "line number": [
      672,
      672,
      672
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      677,
      679,
      680,
      683,
      685,
      686,
      691,
      693,
      694,
      705,
      706,
      707,
      710,
      711,
      712,
      717,
      718,
      719,
      731,
      732,
      733,
      736,
      737,
      738,
      743,
      744,
      745
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      835,
      837,
      838
     ]
    },
    "libcst.matchers.NameMatchType": {
     "line number": [
      669,
      669,
      669
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      757,
      759,
      760,
      763,
      765,
      766,
      771,
      773,
      774,
      785,
      786,
      787,
      790,
      791,
      792,
      797,
      798,
      799,
      811,
      812,
      813,
      816,
      817,
      818,
      823,
      824,
      825
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      666,
      669,
      672,
      680,
      686,
      694,
      707,
      712,
      719,
      727,
      733,
      738,
      745,
      760,
      766,
      774,
      787,
      792,
      799,
      807,
      813,
      818,
      825,
      838
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      681,
      708,
      734,
      761,
      788,
      814
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      689,
      715,
      741,
      769,
      795,
      821
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      660
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      667,
      670,
      673,
      753,
      833,
      839
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      664,
      669,
      672,
      678,
      684,
      692,
      699,
      758,
      764,
      772,
      779,
      836
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      700,
      724,
      750,
      780,
      804,
      830
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      665,
      669,
      672,
      679,
      685,
      693,
      701,
      706,
      711,
      718,
      732,
      737,
      744,
      759,
      765,
      773,
      781,
      786,
      791,
      798,
      812,
      817,
      824,
      837
     ]
    },
    "typing.Callable": {
     "line number": [
      700,
      724,
      750,
      780,
      804,
      830
     ]
    },
    "typing.Sequence": {
     "line number": [
      675,
      700,
      703,
      724,
      729,
      750,
      755,
      780,
      783,
      804,
      809,
      830
     ]
    },
    "typing.Union": {
     "line number": [
      662,
      668,
      671,
      674,
      676,
      682,
      690,
      702,
      704,
      709,
      716,
      728,
      730,
      735,
      742,
      754,
      756,
      762,
      770,
      782,
      784,
      789,
      796,
      808,
      810,
      815,
      822,
      834
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.AttributeOrNameMatchType": {
  "data": {
   "lineno": 6775
  },
  "type": "constant"
 },
 "libcst.matchers.AttributeOrNameOrNoneMatchType": {
  "data": {
   "lineno": 6808
  },
  "type": "constant"
 },
 "libcst.matchers.AugAssign": {
  "data": {
   "lineno": 847,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      847
     ]
    },
    "libcst.matchers.BaseAugOpMatchType": {
     "line number": [
      856,
      858,
      859
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      850,
      852,
      853,
      862,
      864,
      865
     ]
    },
    "libcst.matchers.BaseSmallStatement": {
     "line number": [
      848
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      874,
      876,
      877
     ]
    },
    "libcst.matchers.SemicolonMatchType": {
     "line number": [
      868,
      870,
      871
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      853,
      859,
      865,
      871,
      877
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      848
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      854,
      860,
      866,
      872,
      878
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      851,
      857,
      863,
      869,
      875
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      852,
      858,
      864,
      870,
      876
     ]
    },
    "typing.Union": {
     "line number": [
      849,
      855,
      861,
      867,
      873
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Await": {
  "data": {
   "lineno": 881,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      915,
      939,
      965,
      995,
      1019,
      1045
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      881
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      915,
      939,
      965
     ]
    },
    "libcst.RightParen": {
     "line number": [
      995,
      1019,
      1045
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      882
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      884,
      886,
      887
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      1050,
      1052,
      1053
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      892,
      894,
      895,
      898,
      900,
      901,
      906,
      908,
      909,
      920,
      921,
      922,
      925,
      926,
      927,
      932,
      933,
      934,
      946,
      947,
      948,
      951,
      952,
      953,
      958,
      959,
      960
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      1056,
      1058,
      1059
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      972,
      974,
      975,
      978,
      980,
      981,
      986,
      988,
      989,
      1000,
      1001,
      1002,
      1005,
      1006,
      1007,
      1012,
      1013,
      1014,
      1026,
      1027,
      1028,
      1031,
      1032,
      1033,
      1038,
      1039,
      1040
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      887,
      895,
      901,
      909,
      922,
      927,
      934,
      942,
      948,
      953,
      960,
      975,
      981,
      989,
      1002,
      1007,
      1014,
      1022,
      1028,
      1033,
      1040,
      1053,
      1059
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      896,
      923,
      949,
      976,
      1003,
      1029
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      904,
      930,
      956,
      984,
      1010,
      1036
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      882
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      888,
      968,
      1048,
      1054,
      1060
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      885,
      893,
      899,
      907,
      914,
      973,
      979,
      987,
      994,
      1051,
      1057
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      915,
      939,
      965,
      995,
      1019,
      1045
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      886,
      894,
      900,
      908,
      916,
      921,
      926,
      933,
      947,
      952,
      959,
      974,
      980,
      988,
      996,
      1001,
      1006,
      1013,
      1027,
      1032,
      1039,
      1052,
      1058
     ]
    },
    "typing.Callable": {
     "line number": [
      915,
      939,
      965,
      995,
      1019,
      1045
     ]
    },
    "typing.Sequence": {
     "line number": [
      890,
      915,
      918,
      939,
      944,
      965,
      970,
      995,
      998,
      1019,
      1024,
      1045
     ]
    },
    "typing.Union": {
     "line number": [
      883,
      889,
      891,
      897,
      905,
      917,
      919,
      924,
      931,
      943,
      945,
      950,
      957,
      969,
      971,
      977,
      985,
      997,
      999,
      1004,
      1011,
      1023,
      1025,
      1030,
      1037,
      1049,
      1055
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BaseAssignTargetExpression": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      45
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BaseAssignTargetExpressionMatchType": {
  "data": {
   "lineno": 595
  },
  "type": "constant"
 },
 "libcst.matchers.BaseAugOp": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      49
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BaseAugOpMatchType": {
  "data": {
   "lineno": 842
  },
  "type": "constant"
 },
 "libcst.matchers.BaseBinaryOp": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      53
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BaseBinaryOpMatchType": {
  "data": {
   "lineno": 1063
  },
  "type": "constant"
 },
 "libcst.matchers.BaseBooleanOp": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      57
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BaseBooleanOpMatchType": {
  "data": {
   "lineno": 1404
  },
  "type": "constant"
 },
 "libcst.matchers.BaseComp": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      61
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BaseCompOp": {
  "data": {
   "lineno": 65,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      65
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BaseCompOpMatchType": {
  "data": {
   "lineno": 2826
  },
  "type": "constant"
 },
 "libcst.matchers.BaseCompoundStatement": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      69
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BaseDelTargetExpression": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      73
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BaseDelTargetExpressionMatchType": {
  "data": {
   "lineno": 3198
  },
  "type": "constant"
 },
 "libcst.matchers.BaseDict": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      77
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BaseDictElement": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      81
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BaseDictElementMatchType": {
  "data": {
   "lineno": 3233
  },
  "type": "constant"
 },
 "libcst.matchers.BaseElement": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      85
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BaseElementMatchType": {
  "data": {
   "lineno": 8031
  },
  "type": "constant"
 },
 "libcst.matchers.BaseExpression": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      89
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BaseExpressionMatchType": {
  "data": {
   "lineno": 221
  },
  "type": "constant"
 },
 "libcst.matchers.BaseExpressionOrFromOrNoneMatchType": {
  "data": {
   "lineno": 12874
  },
  "type": "constant"
 },
 "libcst.matchers.BaseExpressionOrNoneMatchType": {
  "data": {
   "lineno": 229
  },
  "type": "constant"
 },
 "libcst.matchers.BaseFormattedStringContent": {
  "data": {
   "lineno": 93,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      93
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BaseFormattedStringContentMatchType": {
  "data": {
   "lineno": 4809
  },
  "type": "constant"
 },
 "libcst.matchers.BaseList": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      97
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BaseMatcherNode": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.BaseMatcherNode"
  },
  "type": "import"
 },
 "libcst.matchers.BaseMetadataProvider": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      101
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BaseNumber": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      105
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BaseParenthesizableWhitespace": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      109
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
  "data": {
   "lineno": 148
  },
  "type": "constant"
 },
 "libcst.matchers.BaseSet": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      113
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BaseSimpleComp": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      117
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BaseSlice": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      121
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BaseSliceMatchType": {
  "data": {
   "lineno": 11790
  },
  "type": "constant"
 },
 "libcst.matchers.BaseSmallStatement": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      125
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BaseSmallStatementMatchType": {
  "data": {
   "lineno": 10792
  },
  "type": "constant"
 },
 "libcst.matchers.BaseStatement": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      129
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BaseStatementMatchType": {
  "data": {
   "lineno": 7273
  },
  "type": "constant"
 },
 "libcst.matchers.BaseString": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      133
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BaseSuite": {
  "data": {
   "lineno": 137,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      137
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BaseSuiteMatchType": {
  "data": {
   "lineno": 1876
  },
  "type": "constant"
 },
 "libcst.matchers.BaseUnaryOp": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      141
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BaseUnaryOpMatchType": {
  "data": {
   "lineno": 12343
  },
  "type": "constant"
 },
 "libcst.matchers.BinaryOperation": {
  "data": {
   "lineno": 1068,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1114,
      1138,
      1164,
      1194,
      1218,
      1244
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      1068
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      1114,
      1138,
      1164
     ]
    },
    "libcst.RightParen": {
     "line number": [
      1194,
      1218,
      1244
     ]
    },
    "libcst.matchers.BaseBinaryOpMatchType": {
     "line number": [
      1077,
      1079,
      1080
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      1069
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      1071,
      1073,
      1074,
      1083,
      1085,
      1086
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      1091,
      1093,
      1094,
      1097,
      1099,
      1100,
      1105,
      1107,
      1108,
      1119,
      1120,
      1121,
      1124,
      1125,
      1126,
      1131,
      1132,
      1133,
      1145,
      1146,
      1147,
      1150,
      1151,
      1152,
      1157,
      1158,
      1159
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      1249,
      1251,
      1252
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      1171,
      1173,
      1174,
      1177,
      1179,
      1180,
      1185,
      1187,
      1188,
      1199,
      1200,
      1201,
      1204,
      1205,
      1206,
      1211,
      1212,
      1213,
      1225,
      1226,
      1227,
      1230,
      1231,
      1232,
      1237,
      1238,
      1239
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      1074,
      1080,
      1086,
      1094,
      1100,
      1108,
      1121,
      1126,
      1133,
      1141,
      1147,
      1152,
      1159,
      1174,
      1180,
      1188,
      1201,
      1206,
      1213,
      1221,
      1227,
      1232,
      1239,
      1252
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      1095,
      1122,
      1148,
      1175,
      1202,
      1228
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      1103,
      1129,
      1155,
      1183,
      1209,
      1235
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      1069
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      1075,
      1081,
      1087,
      1167,
      1247,
      1253
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      1072,
      1078,
      1084,
      1092,
      1098,
      1106,
      1113,
      1172,
      1178,
      1186,
      1193,
      1250
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      1114,
      1138,
      1164,
      1194,
      1218,
      1244
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      1073,
      1079,
      1085,
      1093,
      1099,
      1107,
      1115,
      1120,
      1125,
      1132,
      1146,
      1151,
      1158,
      1173,
      1179,
      1187,
      1195,
      1200,
      1205,
      1212,
      1226,
      1231,
      1238,
      1251
     ]
    },
    "typing.Callable": {
     "line number": [
      1114,
      1138,
      1164,
      1194,
      1218,
      1244
     ]
    },
    "typing.Sequence": {
     "line number": [
      1089,
      1114,
      1117,
      1138,
      1143,
      1164,
      1169,
      1194,
      1197,
      1218,
      1223,
      1244
     ]
    },
    "typing.Union": {
     "line number": [
      1070,
      1076,
      1082,
      1088,
      1090,
      1096,
      1104,
      1116,
      1118,
      1123,
      1130,
      1142,
      1144,
      1149,
      1156,
      1168,
      1170,
      1176,
      1184,
      1196,
      1198,
      1203,
      1210,
      1222,
      1224,
      1229,
      1236,
      1248
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BitAnd": {
  "data": {
   "lineno": 1256,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1256
     ]
    },
    "libcst.matchers.BaseBinaryOp": {
     "line number": [
      1257
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      1259,
      1261,
      1262,
      1265,
      1267,
      1268
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      1271,
      1273,
      1274
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      1262,
      1268,
      1274
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      1257
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      1263,
      1269,
      1275
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      1260,
      1266,
      1272
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      1261,
      1267,
      1273
     ]
    },
    "typing.Union": {
     "line number": [
      1258,
      1264,
      1270
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BitAndAssign": {
  "data": {
   "lineno": 1278,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1278
     ]
    },
    "libcst.matchers.BaseAugOp": {
     "line number": [
      1279
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      1281,
      1283,
      1284,
      1287,
      1289,
      1290
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      1293,
      1295,
      1296
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      1284,
      1290,
      1296
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      1279
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      1285,
      1291,
      1297
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      1282,
      1288,
      1294
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      1283,
      1289,
      1295
     ]
    },
    "typing.Union": {
     "line number": [
      1280,
      1286,
      1292
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BitInvert": {
  "data": {
   "lineno": 1300,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1300
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      1303,
      1305,
      1306
     ]
    },
    "libcst.matchers.BaseUnaryOp": {
     "line number": [
      1301
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      1309,
      1311,
      1312
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      1306,
      1312
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      1301
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      1307,
      1313
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      1304,
      1310
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      1305,
      1311
     ]
    },
    "typing.Union": {
     "line number": [
      1302,
      1308
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BitOr": {
  "data": {
   "lineno": 1316,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1316
     ]
    },
    "libcst.matchers.BaseBinaryOp": {
     "line number": [
      1317
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      1319,
      1321,
      1322,
      1325,
      1327,
      1328
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      1331,
      1333,
      1334
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      1322,
      1328,
      1334
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      1317
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      1323,
      1329,
      1335
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      1320,
      1326,
      1332
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      1321,
      1327,
      1333
     ]
    },
    "typing.Union": {
     "line number": [
      1318,
      1324,
      1330
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BitOrAssign": {
  "data": {
   "lineno": 1338,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1338
     ]
    },
    "libcst.matchers.BaseAugOp": {
     "line number": [
      1339
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      1341,
      1343,
      1344,
      1347,
      1349,
      1350
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      1353,
      1355,
      1356
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      1344,
      1350,
      1356
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      1339
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      1345,
      1351,
      1357
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      1342,
      1348,
      1354
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      1343,
      1349,
      1355
     ]
    },
    "typing.Union": {
     "line number": [
      1340,
      1346,
      1352
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BitXor": {
  "data": {
   "lineno": 1360,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1360
     ]
    },
    "libcst.matchers.BaseBinaryOp": {
     "line number": [
      1361
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      1363,
      1365,
      1366,
      1369,
      1371,
      1372
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      1375,
      1377,
      1378
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      1366,
      1372,
      1378
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      1361
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      1367,
      1373,
      1379
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      1364,
      1370,
      1376
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      1365,
      1371,
      1377
     ]
    },
    "typing.Union": {
     "line number": [
      1362,
      1368,
      1374
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BitXorAssign": {
  "data": {
   "lineno": 1382,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1382
     ]
    },
    "libcst.matchers.BaseAugOp": {
     "line number": [
      1383
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      1385,
      1387,
      1388,
      1391,
      1393,
      1394
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      1397,
      1399,
      1400
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      1388,
      1394,
      1400
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      1383
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      1389,
      1395,
      1401
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      1386,
      1392,
      1398
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      1387,
      1393,
      1399
     ]
    },
    "typing.Union": {
     "line number": [
      1384,
      1390,
      1396
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.BooleanOperation": {
  "data": {
   "lineno": 1409,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1455,
      1479,
      1505,
      1535,
      1559,
      1585
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      1409
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      1455,
      1479,
      1505
     ]
    },
    "libcst.RightParen": {
     "line number": [
      1535,
      1559,
      1585
     ]
    },
    "libcst.matchers.BaseBooleanOpMatchType": {
     "line number": [
      1418,
      1420,
      1421
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      1410
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      1412,
      1414,
      1415,
      1424,
      1426,
      1427
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      1432,
      1434,
      1435,
      1438,
      1440,
      1441,
      1446,
      1448,
      1449,
      1460,
      1461,
      1462,
      1465,
      1466,
      1467,
      1472,
      1473,
      1474,
      1486,
      1487,
      1488,
      1491,
      1492,
      1493,
      1498,
      1499,
      1500
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      1590,
      1592,
      1593
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      1512,
      1514,
      1515,
      1518,
      1520,
      1521,
      1526,
      1528,
      1529,
      1540,
      1541,
      1542,
      1545,
      1546,
      1547,
      1552,
      1553,
      1554,
      1566,
      1567,
      1568,
      1571,
      1572,
      1573,
      1578,
      1579,
      1580
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      1415,
      1421,
      1427,
      1435,
      1441,
      1449,
      1462,
      1467,
      1474,
      1482,
      1488,
      1493,
      1500,
      1515,
      1521,
      1529,
      1542,
      1547,
      1554,
      1562,
      1568,
      1573,
      1580,
      1593
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      1436,
      1463,
      1489,
      1516,
      1543,
      1569
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      1444,
      1470,
      1496,
      1524,
      1550,
      1576
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      1410
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      1416,
      1422,
      1428,
      1508,
      1588,
      1594
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      1413,
      1419,
      1425,
      1433,
      1439,
      1447,
      1454,
      1513,
      1519,
      1527,
      1534,
      1591
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      1455,
      1479,
      1505,
      1535,
      1559,
      1585
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      1414,
      1420,
      1426,
      1434,
      1440,
      1448,
      1456,
      1461,
      1466,
      1473,
      1487,
      1492,
      1499,
      1514,
      1520,
      1528,
      1536,
      1541,
      1546,
      1553,
      1567,
      1572,
      1579,
      1592
     ]
    },
    "typing.Callable": {
     "line number": [
      1455,
      1479,
      1505,
      1535,
      1559,
      1585
     ]
    },
    "typing.Sequence": {
     "line number": [
      1430,
      1455,
      1458,
      1479,
      1484,
      1505,
      1510,
      1535,
      1538,
      1559,
      1564,
      1585
     ]
    },
    "typing.Union": {
     "line number": [
      1411,
      1417,
      1423,
      1429,
      1431,
      1437,
      1445,
      1457,
      1459,
      1464,
      1471,
      1483,
      1485,
      1490,
      1497,
      1509,
      1511,
      1517,
      1525,
      1537,
      1539,
      1544,
      1551,
      1563,
      1565,
      1570,
      1577,
      1589
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Break": {
  "data": {
   "lineno": 1597,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      1597
     ]
    },
    "libcst.matchers.BaseSmallStatement": {
     "line number": [
      1598
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      1606,
      1608,
      1609
     ]
    },
    "libcst.matchers.SemicolonMatchType": {
     "line number": [
      1600,
      1602,
      1603
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      1603,
      1609
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      1598
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      1604,
      1610
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      1601,
      1607
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      1602,
      1608
     ]
    },
    "typing.Union": {
     "line number": [
      1599,
      1605
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Call": {
  "data": {
   "lineno": 1616,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1650,
      1670,
      1692,
      1722,
      1746,
      1772,
      1802,
      1826,
      1852
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      1616
     ]
    },
    "libcst.Arg": {
     "line number": [
      1650,
      1670,
      1692
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      1722,
      1746,
      1772
     ]
    },
    "libcst.RightParen": {
     "line number": [
      1802,
      1826,
      1852
     ]
    },
    "libcst.matchers.ArgMatchType": {
     "line number": [
      1627,
      1629,
      1630,
      1633,
      1635,
      1636,
      1641,
      1643,
      1644,
      1655,
      1656,
      1657,
      1660,
      1660,
      1660,
      1665,
      1665,
      1665,
      1677,
      1678,
      1679,
      1682,
      1682,
      1682,
      1687,
      1687,
      1687
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      1617
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      1619,
      1621,
      1622
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      1857,
      1859,
      1860,
      1863,
      1865,
      1866
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      1699,
      1701,
      1702,
      1705,
      1707,
      1708,
      1713,
      1715,
      1716,
      1727,
      1728,
      1729,
      1732,
      1733,
      1734,
      1739,
      1740,
      1741,
      1753,
      1754,
      1755,
      1758,
      1759,
      1760,
      1765,
      1766,
      1767
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      1869,
      1871,
      1872
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      1779,
      1781,
      1782,
      1785,
      1787,
      1788,
      1793,
      1795,
      1796,
      1807,
      1808,
      1809,
      1812,
      1813,
      1814,
      1819,
      1820,
      1821,
      1833,
      1834,
      1835,
      1838,
      1839,
      1840,
      1845,
      1846,
      1847
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      1622,
      1630,
      1636,
      1644,
      1657,
      1660,
      1665,
      1673,
      1679,
      1682,
      1687,
      1702,
      1708,
      1716,
      1729,
      1734,
      1741,
      1749,
      1755,
      1760,
      1767,
      1782,
      1788,
      1796,
      1809,
      1814,
      1821,
      1829,
      1835,
      1840,
      1847,
      1860,
      1866,
      1872
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      1631,
      1658,
      1680,
      1703,
      1730,
      1756,
      1783,
      1810,
      1836
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      1639,
      1663,
      1685,
      1711,
      1737,
      1763,
      1791,
      1817,
      1843
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      1617
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      1623,
      1695,
      1775,
      1855,
      1861,
      1867,
      1873
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      1620,
      1628,
      1634,
      1642,
      1649,
      1700,
      1706,
      1714,
      1721,
      1780,
      1786,
      1794,
      1801,
      1858,
      1864,
      1870
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      1650,
      1670,
      1692,
      1722,
      1746,
      1772,
      1802,
      1826,
      1852
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      1621,
      1629,
      1635,
      1643,
      1651,
      1656,
      1660,
      1665,
      1678,
      1682,
      1687,
      1701,
      1707,
      1715,
      1723,
      1728,
      1733,
      1740,
      1754,
      1759,
      1766,
      1781,
      1787,
      1795,
      1803,
      1808,
      1813,
      1820,
      1834,
      1839,
      1846,
      1859,
      1865,
      1871
     ]
    },
    "typing.Callable": {
     "line number": [
      1650,
      1670,
      1692,
      1722,
      1746,
      1772,
      1802,
      1826,
      1852
     ]
    },
    "typing.Sequence": {
     "line number": [
      1625,
      1650,
      1653,
      1670,
      1675,
      1692,
      1697,
      1722,
      1725,
      1746,
      1751,
      1772,
      1777,
      1802,
      1805,
      1826,
      1831,
      1852
     ]
    },
    "typing.Union": {
     "line number": [
      1618,
      1624,
      1626,
      1632,
      1640,
      1652,
      1654,
      1659,
      1664,
      1674,
      1676,
      1681,
      1686,
      1696,
      1698,
      1704,
      1712,
      1724,
      1726,
      1731,
      1738,
      1750,
      1752,
      1757,
      1764,
      1776,
      1778,
      1784,
      1792,
      1804,
      1806,
      1811,
      1818,
      1830,
      1832,
      1837,
      1844,
      1856,
      1862,
      1868
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst.matchers.ClassDef": {
  "data": {
   "lineno": 1887,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      1924,
      1944,
      1966,
      1996,
      2016,
      2038,
      2068,
      2092,
      2118,
      2160,
      2184,
      2210,
      2240,
      2264,
      2290
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      1887
     ]
    },
    "libcst.Arg": {
     "line number": [
      1924,
      1944,
      1966,
      1996,
      2016,
      2038
     ]
    },
    "libcst.Decorator": {
     "line number": [
      2068,
      2092,
      2118
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      2160,
      2184,
      2210,
      2240,
      2264,
      2290
     ]
    },
    "libcst.matchers.ArgMatchType": {
     "line number": [
      1901,
      1903,
      1904,
      1907,
      1909,
      1910,
      1915,
      1917,
      1918,
      1929,
      1930,
      1931,
      1934,
      1934,
      1934,
      1939,
      1939,
      1939,
      1951,
      1952,
      1953,
      1956,
      1956,
      1956,
      1961,
      1961,
      1961,
      1973,
      1975,
      1976,
      1979,
      1981,
      1982,
      1987,
      1989,
      1990,
      2001,
      2002,
      2003,
      2006,
      2006,
      2006,
      2011,
      2011,
      2011,
      2023,
      2024,
      2025,
      2028,
      2028,
      2028,
      2033,
      2033,
      2033
     ]
    },
    "libcst.matchers.BaseCompoundStatement": {
     "line number": [
      1888
     ]
    },
    "libcst.matchers.BaseStatement": {
     "line number": [
      1888
     ]
    },
    "libcst.matchers.BaseSuiteMatchType": {
     "line number": [
      1893,
      1895,
      1896
     ]
    },
    "libcst.matchers.DecoratorMatchType": {
     "line number": [
      2045,
      2047,
      2048,
      2051,
      2053,
      2054,
      2059,
      2061,
      2062,
      2073,
      2074,
      2075,
      2078,
      2079,
      2080,
      2085,
      2086,
      2087,
      2099,
      2100,
      2101,
      2104,
      2105,
      2106,
      2111,
      2112,
      2113
     ]
    },
    "libcst.matchers.EmptyLineMatchType": {
     "line number": [
      2137,
      2139,
      2140,
      2143,
      2145,
      2146,
      2151,
      2153,
      2154,
      2165,
      2166,
      2167,
      2170,
      2171,
      2172,
      2177,
      2178,
      2179,
      2191,
      2192,
      2193,
      2196,
      2197,
      2198,
      2203,
      2204,
      2205,
      2217,
      2219,
      2220,
      2223,
      2225,
      2226,
      2231,
      2233,
      2234,
      2245,
      2246,
      2247,
      2250,
      2251,
      2252,
      2257,
      2258,
      2259,
      2271,
      2272,
      2273,
      2276,
      2277,
      2278,
      2283,
      2284,
      2285
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      2123,
      2125,
      2126
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      2313,
      2315,
      2316
     ]
    },
    "libcst.matchers.NameMatchType": {
     "line number": [
      1890,
      1890,
      1890
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      2129,
      2131,
      2132
     ]
    },
    "libcst.matchers.SimpleWhitespaceMatchType": {
     "line number": [
      2295,
      2297,
      2298,
      2301,
      2303,
      2304,
      2307,
      2309,
      2310
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      1890,
      1896,
      1904,
      1910,
      1918,
      1931,
      1934,
      1939,
      1947,
      1953,
      1956,
      1961,
      1976,
      1982,
      1990,
      2003,
      2006,
      2011,
      2019,
      2025,
      2028,
      2033,
      2048,
      2054,
      2062,
      2075,
      2080,
      2087,
      2095,
      2101,
      2106,
      2113,
      2126,
      2132,
      2140,
      2146,
      2154,
      2167,
      2172,
      2179,
      2187,
      2193,
      2198,
      2205,
      2220,
      2226,
      2234,
      2247,
      2252,
      2259,
      2267,
      2273,
      2278,
      2285,
      2298,
      2304,
      2310,
      2316
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      1905,
      1932,
      1954,
      1977,
      2004,
      2026,
      2049,
      2076,
      2102,
      2141,
      2168,
      2194,
      2221,
      2248,
      2274
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      1913,
      1937,
      1959,
      1985,
      2009,
      2031,
      2057,
      2083,
      2109,
      2149,
      2175,
      2201,
      2229,
      2255,
      2281
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      1888
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      1891,
      1897,
      1969,
      2041,
      2121,
      2127,
      2133,
      2213,
      2293,
      2299,
      2305,
      2311,
      2317
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      1890,
      1894,
      1902,
      1908,
      1916,
      1923,
      1974,
      1980,
      1988,
      1995,
      2046,
      2052,
      2060,
      2067,
      2124,
      2130,
      2138,
      2144,
      2152,
      2159,
      2218,
      2224,
      2232,
      2239,
      2296,
      2302,
      2308,
      2314
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      1924,
      1944,
      1966,
      1996,
      2016,
      2038,
      2068,
      2092,
      2118,
      2160,
      2184,
      2210,
      2240,
      2264,
      2290
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      1890,
      1895,
      1903,
      1909,
      1917,
      1925,
      1930,
      1934,
      1939,
      1952,
      1956,
      1961,
      1975,
      1981,
      1989,
      1997,
      2002,
      2006,
      2011,
      2024,
      2028,
      2033,
      2047,
      2053,
      2061,
      2069,
      2074,
      2079,
      2086,
      2100,
      2105,
      2112,
      2125,
      2131,
      2139,
      2145,
      2153,
      2161,
      2166,
      2171,
      2178,
      2192,
      2197,
      2204,
      2219,
      2225,
      2233,
      2241,
      2246,
      2251,
      2258,
      2272,
      2277,
      2284,
      2297,
      2303,
      2309,
      2315
     ]
    },
    "typing.Callable": {
     "line number": [
      1924,
      1944,
      1966,
      1996,
      2016,
      2038,
      2068,
      2092,
      2118,
      2160,
      2184,
      2210,
      2240,
      2264,
      2290
     ]
    },
    "typing.Sequence": {
     "line number": [
      1899,
      1924,
      1927,
      1944,
      1949,
      1966,
      1971,
      1996,
      1999,
      2016,
      2021,
      2038,
      2043,
      2068,
      2071,
      2092,
      2097,
      2118,
      2135,
      2160,
      2163,
      2184,
      2189,
      2210,
      2215,
      2240,
      2243,
      2264,
      2269,
      2290
     ]
    },
    "typing.Union": {
     "line number": [
      1889,
      1892,
      1898,
      1900,
      1906,
      1914,
      1926,
      1928,
      1933,
      1938,
      1948,
      1950,
      1955,
      1960,
      1970,
      1972,
      1978,
      1986,
      1998,
      2000,
      2005,
      2010,
      2020,
      2022,
      2027,
      2032,
      2042,
      2044,
      2050,
      2058,
      2070,
      2072,
      2077,
      2084,
      2096,
      2098,
      2103,
      2110,
      2122,
      2128,
      2134,
      2136,
      2142,
      2150,
      2162,
      2164,
      2169,
      2176,
      2188,
      2190,
      2195,
      2202,
      2214,
      2216,
      2222,
      2230,
      2242,
      2244,
      2249,
      2256,
      2268,
      2270,
      2275,
      2282,
      2294,
      2300,
      2306,
      2312
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Colon": {
  "data": {
   "lineno": 2320,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      2320
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      2323,
      2325,
      2326,
      2329,
      2331,
      2332
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      2335,
      2337,
      2338
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      2326,
      2332,
      2338
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      2321
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      2327,
      2333,
      2339
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      2324,
      2330,
      2336
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      2325,
      2331,
      2337
     ]
    },
    "typing.Union": {
     "line number": [
      2322,
      2328,
      2334
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.ColonMatchType": {
  "data": {
   "lineno": 7699
  },
  "type": "constant"
 },
 "libcst.matchers.Comma": {
  "data": {
   "lineno": 2342,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      2342
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      2345,
      2347,
      2348,
      2351,
      2353,
      2354
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      2357,
      2359,
      2360
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      2348,
      2354,
      2360
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      2343
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      2349,
      2355,
      2361
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      2346,
      2352,
      2358
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      2347,
      2353,
      2359
     ]
    },
    "typing.Union": {
     "line number": [
      2344,
      2350,
      2356
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.CommaMatchType": {
  "data": {
   "lineno": 317
  },
  "type": "constant"
 },
 "libcst.matchers.Comment": {
  "data": {
   "lineno": 2367,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      2367
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      2373,
      2375,
      2376
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      2370,
      2376
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      2368
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      2371,
      2377
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      2370,
      2374
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      2370,
      2375
     ]
    },
    "libcst.matchers.strMatchType": {
     "line number": [
      2370,
      2370,
      2370
     ]
    },
    "typing.Union": {
     "line number": [
      2369,
      2372
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.CommentOrNoneMatchType": {
  "data": {
   "lineno": 4124
  },
  "type": "constant"
 },
 "libcst.matchers.CompFor": {
  "data": {
   "lineno": 2397,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2437,
      2461,
      2487
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      2397
     ]
    },
    "iter": {
     "line number": [
      2405
     ]
    },
    "libcst.CompIf": {
     "line number": [
      2437,
      2461,
      2487
     ]
    },
    "libcst.matchers.AsynchronousOrNoneMatchType": {
     "line number": [
      2498,
      2500,
      2501
     ]
    },
    "libcst.matchers.BaseAssignTargetExpressionMatchType": {
     "line number": [
      2400,
      2402,
      2403
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      2406,
      2408,
      2409
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      2504,
      2506,
      2507,
      2510,
      2512,
      2513,
      2516,
      2518,
      2519,
      2522,
      2524,
      2525
     ]
    },
    "libcst.matchers.CompForOrNoneMatchType": {
     "line number": [
      2492,
      2494,
      2495
     ]
    },
    "libcst.matchers.CompIfMatchType": {
     "line number": [
      2414,
      2416,
      2417,
      2420,
      2422,
      2423,
      2428,
      2430,
      2431,
      2442,
      2443,
      2444,
      2447,
      2448,
      2449,
      2454,
      2455,
      2456,
      2468,
      2469,
      2470,
      2473,
      2474,
      2475,
      2480,
      2481,
      2482
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      2528,
      2530,
      2531
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      2403,
      2409,
      2417,
      2423,
      2431,
      2444,
      2449,
      2456,
      2464,
      2470,
      2475,
      2482,
      2495,
      2501,
      2507,
      2513,
      2519,
      2525,
      2531
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      2418,
      2445,
      2471
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      2426,
      2452,
      2478
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      2398
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      2404,
      2410,
      2490,
      2496,
      2502,
      2508,
      2514,
      2520,
      2526,
      2532
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      2401,
      2407,
      2415,
      2421,
      2429,
      2436,
      2493,
      2499,
      2505,
      2511,
      2517,
      2523,
      2529
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      2437,
      2461,
      2487
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      2402,
      2408,
      2416,
      2422,
      2430,
      2438,
      2443,
      2448,
      2455,
      2469,
      2474,
      2481,
      2494,
      2500,
      2506,
      2512,
      2518,
      2524,
      2530
     ]
    },
    "typing.Callable": {
     "line number": [
      2437,
      2461,
      2487
     ]
    },
    "typing.Sequence": {
     "line number": [
      2412,
      2437,
      2440,
      2461,
      2466,
      2487
     ]
    },
    "typing.Union": {
     "line number": [
      2399,
      2405,
      2411,
      2413,
      2419,
      2427,
      2439,
      2441,
      2446,
      2453,
      2465,
      2467,
      2472,
      2479,
      2491,
      2497,
      2503,
      2509,
      2515,
      2521,
      2527
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.CompForMatchType": {
  "data": {
   "lineno": 3512
  },
  "type": "constant"
 },
 "libcst.matchers.CompForOrNoneMatchType": {
  "data": {
   "lineno": 2383
  },
  "type": "constant"
 },
 "libcst.matchers.CompIf": {
  "data": {
   "lineno": 2535,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      2535
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      2538,
      2540,
      2541
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      2544,
      2546,
      2547,
      2550,
      2552,
      2553
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      2556,
      2558,
      2559
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      2541,
      2547,
      2553,
      2559
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      2536
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      2542,
      2548,
      2554,
      2560
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      2539,
      2545,
      2551,
      2557
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      2540,
      2546,
      2552,
      2558
     ]
    },
    "typing.Union": {
     "line number": [
      2537,
      2543,
      2549,
      2555
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.CompIfMatchType": {
  "data": {
   "lineno": 2380
  },
  "type": "constant"
 },
 "libcst.matchers.Comparison": {
  "data": {
   "lineno": 2570,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2604,
      2628,
      2654,
      2684,
      2708,
      2734,
      2764,
      2788,
      2814
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      2570
     ]
    },
    "libcst.ComparisonTarget": {
     "line number": [
      2604,
      2628,
      2654
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      2684,
      2708,
      2734
     ]
    },
    "libcst.RightParen": {
     "line number": [
      2764,
      2788,
      2814
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      2571
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      2573,
      2575,
      2576
     ]
    },
    "libcst.matchers.ComparisonTargetMatchType": {
     "line number": [
      2581,
      2583,
      2584,
      2587,
      2589,
      2590,
      2595,
      2597,
      2598,
      2609,
      2610,
      2611,
      2614,
      2615,
      2616,
      2621,
      2622,
      2623,
      2635,
      2636,
      2637,
      2640,
      2641,
      2642,
      2647,
      2648,
      2649
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      2661,
      2663,
      2664,
      2667,
      2669,
      2670,
      2675,
      2677,
      2678,
      2689,
      2690,
      2691,
      2694,
      2695,
      2696,
      2701,
      2702,
      2703,
      2715,
      2716,
      2717,
      2720,
      2721,
      2722,
      2727,
      2728,
      2729
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      2819,
      2821,
      2822
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      2741,
      2743,
      2744,
      2747,
      2749,
      2750,
      2755,
      2757,
      2758,
      2769,
      2770,
      2771,
      2774,
      2775,
      2776,
      2781,
      2782,
      2783,
      2795,
      2796,
      2797,
      2800,
      2801,
      2802,
      2807,
      2808,
      2809
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      2576,
      2584,
      2590,
      2598,
      2611,
      2616,
      2623,
      2631,
      2637,
      2642,
      2649,
      2664,
      2670,
      2678,
      2691,
      2696,
      2703,
      2711,
      2717,
      2722,
      2729,
      2744,
      2750,
      2758,
      2771,
      2776,
      2783,
      2791,
      2797,
      2802,
      2809,
      2822
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      2585,
      2612,
      2638,
      2665,
      2692,
      2718,
      2745,
      2772,
      2798
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      2593,
      2619,
      2645,
      2673,
      2699,
      2725,
      2753,
      2779,
      2805
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      2571
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      2577,
      2657,
      2737,
      2817,
      2823
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      2574,
      2582,
      2588,
      2596,
      2603,
      2662,
      2668,
      2676,
      2683,
      2742,
      2748,
      2756,
      2763,
      2820
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      2604,
      2628,
      2654,
      2684,
      2708,
      2734,
      2764,
      2788,
      2814
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      2575,
      2583,
      2589,
      2597,
      2605,
      2610,
      2615,
      2622,
      2636,
      2641,
      2648,
      2663,
      2669,
      2677,
      2685,
      2690,
      2695,
      2702,
      2716,
      2721,
      2728,
      2743,
      2749,
      2757,
      2765,
      2770,
      2775,
      2782,
      2796,
      2801,
      2808,
      2821
     ]
    },
    "typing.Callable": {
     "line number": [
      2604,
      2628,
      2654,
      2684,
      2708,
      2734,
      2764,
      2788,
      2814
     ]
    },
    "typing.Sequence": {
     "line number": [
      2579,
      2604,
      2607,
      2628,
      2633,
      2654,
      2659,
      2684,
      2687,
      2708,
      2713,
      2734,
      2739,
      2764,
      2767,
      2788,
      2793,
      2814
     ]
    },
    "typing.Union": {
     "line number": [
      2572,
      2578,
      2580,
      2586,
      2594,
      2606,
      2608,
      2613,
      2620,
      2632,
      2634,
      2639,
      2646,
      2658,
      2660,
      2666,
      2674,
      2686,
      2688,
      2693,
      2700,
      2712,
      2714,
      2719,
      2726,
      2738,
      2740,
      2746,
      2754,
      2766,
      2768,
      2773,
      2780,
      2792,
      2794,
      2799,
      2806,
      2818
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.ComparisonTarget": {
  "data": {
   "lineno": 2831,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      2831
     ]
    },
    "libcst.matchers.BaseCompOpMatchType": {
     "line number": [
      2834,
      2836,
      2837
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      2840,
      2842,
      2843
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      2846,
      2848,
      2849
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      2837,
      2843,
      2849
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      2832
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      2838,
      2844,
      2850
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      2835,
      2841,
      2847
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      2836,
      2842,
      2848
     ]
    },
    "typing.Union": {
     "line number": [
      2833,
      2839,
      2845
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.ComparisonTargetMatchType": {
  "data": {
   "lineno": 2563
  },
  "type": "constant"
 },
 "libcst.matchers.ConcatenatedString": {
  "data": {
   "lineno": 2872,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      2912,
      2936,
      2962,
      2992,
      3016,
      3042
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      2872
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      2912,
      2936,
      2962
     ]
    },
    "libcst.RightParen": {
     "line number": [
      2992,
      3016,
      3042
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      2873
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      3047,
      3049,
      3050
     ]
    },
    "libcst.matchers.BaseString": {
     "line number": [
      2873
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      2889,
      2891,
      2892,
      2895,
      2897,
      2898,
      2903,
      2905,
      2906,
      2917,
      2918,
      2919,
      2922,
      2923,
      2924,
      2929,
      2930,
      2931,
      2943,
      2944,
      2945,
      2948,
      2949,
      2950,
      2955,
      2956,
      2957
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      3053,
      3055,
      3056
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      2969,
      2971,
      2972,
      2975,
      2977,
      2978,
      2983,
      2985,
      2986,
      2997,
      2998,
      2999,
      3002,
      3003,
      3004,
      3009,
      3010,
      3011,
      3023,
      3024,
      3025,
      3028,
      3029,
      3030,
      3035,
      3036,
      3037
     ]
    },
    "libcst.matchers.SimpleStringOrFormattedStringMatchType": {
     "line number": [
      2875,
      2877,
      2878
     ]
    },
    "libcst.matchers.SimpleStringOrFormattedStringOrConcatenatedStringMatchType": {
     "line number": [
      2881,
      2883,
      2884
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      2878,
      2884,
      2892,
      2898,
      2906,
      2919,
      2924,
      2931,
      2939,
      2945,
      2950,
      2957,
      2972,
      2978,
      2986,
      2999,
      3004,
      3011,
      3019,
      3025,
      3030,
      3037,
      3050,
      3056
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      2893,
      2920,
      2946,
      2973,
      3000,
      3026
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      2901,
      2927,
      2953,
      2981,
      3007,
      3033
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      2873
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      2879,
      2885,
      2965,
      3045,
      3051,
      3057
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      2876,
      2882,
      2890,
      2896,
      2904,
      2911,
      2970,
      2976,
      2984,
      2991,
      3048,
      3054
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      2912,
      2936,
      2962,
      2992,
      3016,
      3042
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      2877,
      2883,
      2891,
      2897,
      2905,
      2913,
      2918,
      2923,
      2930,
      2944,
      2949,
      2956,
      2971,
      2977,
      2985,
      2993,
      2998,
      3003,
      3010,
      3024,
      3029,
      3036,
      3049,
      3055
     ]
    },
    "typing.Callable": {
     "line number": [
      2912,
      2936,
      2962,
      2992,
      3016,
      3042
     ]
    },
    "typing.Sequence": {
     "line number": [
      2887,
      2912,
      2915,
      2936,
      2941,
      2962,
      2967,
      2992,
      2995,
      3016,
      3021,
      3042
     ]
    },
    "typing.Union": {
     "line number": [
      2874,
      2880,
      2886,
      2888,
      2894,
      2902,
      2914,
      2916,
      2921,
      2928,
      2940,
      2942,
      2947,
      2954,
      2966,
      2968,
      2974,
      2982,
      2994,
      2996,
      3001,
      3008,
      3020,
      3022,
      3027,
      3034,
      3046,
      3052
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Continue": {
  "data": {
   "lineno": 3060,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      3060
     ]
    },
    "libcst.matchers.BaseSmallStatement": {
     "line number": [
      3061
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      3069,
      3071,
      3072
     ]
    },
    "libcst.matchers.SemicolonMatchType": {
     "line number": [
      3063,
      3065,
      3066
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      3066,
      3072
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      3061
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      3067,
      3073
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      3064,
      3070
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      3065,
      3071
     ]
    },
    "typing.Union": {
     "line number": [
      3062,
      3068
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Decorator": {
  "data": {
   "lineno": 3090,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3124,
      3148,
      3174
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      3090
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      3124,
      3148,
      3174
     ]
    },
    "libcst.matchers.EmptyLineMatchType": {
     "line number": [
      3101,
      3103,
      3104,
      3107,
      3109,
      3110,
      3115,
      3117,
      3118,
      3129,
      3130,
      3131,
      3134,
      3135,
      3136,
      3141,
      3142,
      3143,
      3155,
      3156,
      3157,
      3160,
      3161,
      3162,
      3167,
      3168,
      3169
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      3191,
      3193,
      3194
     ]
    },
    "libcst.matchers.NameOrAttributeOrCallMatchType": {
     "line number": [
      3093,
      3095,
      3096
     ]
    },
    "libcst.matchers.SimpleWhitespaceMatchType": {
     "line number": [
      3179,
      3181,
      3182
     ]
    },
    "libcst.matchers.TrailingWhitespaceMatchType": {
     "line number": [
      3185,
      3187,
      3188
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      3096,
      3104,
      3110,
      3118,
      3131,
      3136,
      3143,
      3151,
      3157,
      3162,
      3169,
      3182,
      3188,
      3194
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      3105,
      3132,
      3158
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      3113,
      3139,
      3165
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      3091
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      3097,
      3177,
      3183,
      3189,
      3195
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      3094,
      3102,
      3108,
      3116,
      3123,
      3180,
      3186,
      3192
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      3124,
      3148,
      3174
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      3095,
      3103,
      3109,
      3117,
      3125,
      3130,
      3135,
      3142,
      3156,
      3161,
      3168,
      3181,
      3187,
      3193
     ]
    },
    "typing.Callable": {
     "line number": [
      3124,
      3148,
      3174
     ]
    },
    "typing.Sequence": {
     "line number": [
      3099,
      3124,
      3127,
      3148,
      3153,
      3174
     ]
    },
    "typing.Union": {
     "line number": [
      3092,
      3098,
      3100,
      3106,
      3114,
      3126,
      3128,
      3133,
      3140,
      3152,
      3154,
      3159,
      3166,
      3178,
      3184,
      3190
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.DecoratorMatchType": {
  "data": {
   "lineno": 1879
  },
  "type": "constant"
 },
 "libcst.matchers.Del": {
  "data": {
   "lineno": 3205,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      3205
     ]
    },
    "libcst.matchers.BaseDelTargetExpressionMatchType": {
     "line number": [
      3208,
      3210,
      3211
     ]
    },
    "libcst.matchers.BaseSmallStatement": {
     "line number": [
      3206
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      3226,
      3228,
      3229
     ]
    },
    "libcst.matchers.SemicolonMatchType": {
     "line number": [
      3220,
      3222,
      3223
     ]
    },
    "libcst.matchers.SimpleWhitespaceMatchType": {
     "line number": [
      3214,
      3216,
      3217
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      3211,
      3217,
      3223,
      3229
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      3206
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      3212,
      3218,
      3224,
      3230
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      3209,
      3215,
      3221,
      3227
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      3210,
      3216,
      3222,
      3228
     ]
    },
    "typing.Union": {
     "line number": [
      3207,
      3213,
      3219,
      3225
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Dict": {
  "data": {
   "lineno": 3250,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3278,
      3302,
      3328,
      3370,
      3394,
      3420,
      3450,
      3474,
      3500
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      3250
     ]
    },
    "libcst.BaseDictElement": {
     "line number": [
      3278,
      3302,
      3328
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      3370,
      3394,
      3420
     ]
    },
    "libcst.RightParen": {
     "line number": [
      3450,
      3474,
      3500
     ]
    },
    "libcst.matchers.BaseDict": {
     "line number": [
      3251
     ]
    },
    "libcst.matchers.BaseDictElementMatchType": {
     "line number": [
      3255,
      3257,
      3258,
      3261,
      3263,
      3264,
      3269,
      3271,
      3272,
      3283,
      3284,
      3285,
      3288,
      3289,
      3290,
      3295,
      3296,
      3297,
      3309,
      3310,
      3311,
      3314,
      3315,
      3316,
      3321,
      3322,
      3323
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      3251
     ]
    },
    "libcst.matchers.LeftCurlyBraceMatchType": {
     "line number": [
      3333,
      3335,
      3336
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      3347,
      3349,
      3350,
      3353,
      3355,
      3356,
      3361,
      3363,
      3364,
      3375,
      3376,
      3377,
      3380,
      3381,
      3382,
      3387,
      3388,
      3389,
      3401,
      3402,
      3403,
      3406,
      3407,
      3408,
      3413,
      3414,
      3415
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      3505,
      3507,
      3508
     ]
    },
    "libcst.matchers.RightCurlyBraceMatchType": {
     "line number": [
      3339,
      3341,
      3342
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      3427,
      3429,
      3430,
      3433,
      3435,
      3436,
      3441,
      3443,
      3444,
      3455,
      3456,
      3457,
      3460,
      3461,
      3462,
      3467,
      3468,
      3469,
      3481,
      3482,
      3483,
      3486,
      3487,
      3488,
      3493,
      3494,
      3495
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      3258,
      3264,
      3272,
      3285,
      3290,
      3297,
      3305,
      3311,
      3316,
      3323,
      3336,
      3342,
      3350,
      3356,
      3364,
      3377,
      3382,
      3389,
      3397,
      3403,
      3408,
      3415,
      3430,
      3436,
      3444,
      3457,
      3462,
      3469,
      3477,
      3483,
      3488,
      3495,
      3508
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      3259,
      3286,
      3312,
      3351,
      3378,
      3404,
      3431,
      3458,
      3484
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      3267,
      3293,
      3319,
      3359,
      3385,
      3411,
      3439,
      3465,
      3491
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      3251
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      3331,
      3337,
      3343,
      3423,
      3503,
      3509
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      3256,
      3262,
      3270,
      3277,
      3334,
      3340,
      3348,
      3354,
      3362,
      3369,
      3428,
      3434,
      3442,
      3449,
      3506
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      3278,
      3302,
      3328,
      3370,
      3394,
      3420,
      3450,
      3474,
      3500
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      3257,
      3263,
      3271,
      3279,
      3284,
      3289,
      3296,
      3310,
      3315,
      3322,
      3335,
      3341,
      3349,
      3355,
      3363,
      3371,
      3376,
      3381,
      3388,
      3402,
      3407,
      3414,
      3429,
      3435,
      3443,
      3451,
      3456,
      3461,
      3468,
      3482,
      3487,
      3494,
      3507
     ]
    },
    "typing.Callable": {
     "line number": [
      3278,
      3302,
      3328,
      3370,
      3394,
      3420,
      3450,
      3474,
      3500
     ]
    },
    "typing.Sequence": {
     "line number": [
      3253,
      3278,
      3281,
      3302,
      3307,
      3328,
      3345,
      3370,
      3373,
      3394,
      3399,
      3420,
      3425,
      3450,
      3453,
      3474,
      3479,
      3500
     ]
    },
    "typing.Union": {
     "line number": [
      3252,
      3254,
      3260,
      3268,
      3280,
      3282,
      3287,
      3294,
      3306,
      3308,
      3313,
      3320,
      3332,
      3338,
      3344,
      3346,
      3352,
      3360,
      3372,
      3374,
      3379,
      3386,
      3398,
      3400,
      3405,
      3412,
      3424,
      3426,
      3432,
      3440,
      3452,
      3454,
      3459,
      3466,
      3478,
      3480,
      3485,
      3492,
      3504
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.DictComp": {
  "data": {
   "lineno": 3517,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3575,
      3599,
      3625,
      3655,
      3679,
      3705
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      3517
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      3575,
      3599,
      3625
     ]
    },
    "libcst.RightParen": {
     "line number": [
      3655,
      3679,
      3705
     ]
    },
    "libcst.matchers.BaseAssignTargetExpressionMatchType": {
     "line number": [
      3520,
      3522,
      3523,
      3526,
      3528,
      3529
     ]
    },
    "libcst.matchers.BaseComp": {
     "line number": [
      3518
     ]
    },
    "libcst.matchers.BaseDict": {
     "line number": [
      3518
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      3518
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      3710,
      3712,
      3713,
      3716,
      3718,
      3719
     ]
    },
    "libcst.matchers.CompForMatchType": {
     "line number": [
      3532,
      3534,
      3535
     ]
    },
    "libcst.matchers.LeftCurlyBraceMatchType": {
     "line number": [
      3538,
      3540,
      3541
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      3552,
      3554,
      3555,
      3558,
      3560,
      3561,
      3566,
      3568,
      3569,
      3580,
      3581,
      3582,
      3585,
      3586,
      3587,
      3592,
      3593,
      3594,
      3606,
      3607,
      3608,
      3611,
      3612,
      3613,
      3618,
      3619,
      3620
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      3722,
      3724,
      3725
     ]
    },
    "libcst.matchers.RightCurlyBraceMatchType": {
     "line number": [
      3544,
      3546,
      3547
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      3632,
      3634,
      3635,
      3638,
      3640,
      3641,
      3646,
      3648,
      3649,
      3660,
      3661,
      3662,
      3665,
      3666,
      3667,
      3672,
      3673,
      3674,
      3686,
      3687,
      3688,
      3691,
      3692,
      3693,
      3698,
      3699,
      3700
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      3523,
      3529,
      3535,
      3541,
      3547,
      3555,
      3561,
      3569,
      3582,
      3587,
      3594,
      3602,
      3608,
      3613,
      3620,
      3635,
      3641,
      3649,
      3662,
      3667,
      3674,
      3682,
      3688,
      3693,
      3700,
      3713,
      3719,
      3725
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      3556,
      3583,
      3609,
      3636,
      3663,
      3689
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      3564,
      3590,
      3616,
      3644,
      3670,
      3696
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      3518
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      3524,
      3530,
      3536,
      3542,
      3548,
      3628,
      3708,
      3714,
      3720,
      3726
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      3521,
      3527,
      3533,
      3539,
      3545,
      3553,
      3559,
      3567,
      3574,
      3633,
      3639,
      3647,
      3654,
      3711,
      3717,
      3723
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      3575,
      3599,
      3625,
      3655,
      3679,
      3705
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      3522,
      3528,
      3534,
      3540,
      3546,
      3554,
      3560,
      3568,
      3576,
      3581,
      3586,
      3593,
      3607,
      3612,
      3619,
      3634,
      3640,
      3648,
      3656,
      3661,
      3666,
      3673,
      3687,
      3692,
      3699,
      3712,
      3718,
      3724
     ]
    },
    "typing.Callable": {
     "line number": [
      3575,
      3599,
      3625,
      3655,
      3679,
      3705
     ]
    },
    "typing.Sequence": {
     "line number": [
      3550,
      3575,
      3578,
      3599,
      3604,
      3625,
      3630,
      3655,
      3658,
      3679,
      3684,
      3705
     ]
    },
    "typing.Union": {
     "line number": [
      3519,
      3525,
      3531,
      3537,
      3543,
      3549,
      3551,
      3557,
      3565,
      3577,
      3579,
      3584,
      3591,
      3603,
      3605,
      3610,
      3617,
      3629,
      3631,
      3637,
      3645,
      3657,
      3659,
      3664,
      3671,
      3683,
      3685,
      3690,
      3697,
      3709,
      3715,
      3721
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.DictElement": {
  "data": {
   "lineno": 3729,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      3729
     ]
    },
    "libcst.matchers.BaseDictElement": {
     "line number": [
      3730
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      3732,
      3734,
      3735,
      3738,
      3740,
      3741
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      3747,
      3749,
      3750,
      3753,
      3755,
      3756
     ]
    },
    "libcst.matchers.CommaMatchType": {
     "line number": [
      3744,
      3744,
      3744
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      3759,
      3761,
      3762
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      3735,
      3741,
      3744,
      3750,
      3756,
      3762
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      3730
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      3736,
      3742,
      3745,
      3751,
      3757,
      3763
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      3733,
      3739,
      3744,
      3748,
      3754,
      3760
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      3734,
      3740,
      3744,
      3749,
      3755,
      3761
     ]
    },
    "typing.Union": {
     "line number": [
      3731,
      3737,
      3743,
      3746,
      3752,
      3758
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Divide": {
  "data": {
   "lineno": 3766,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      3766
     ]
    },
    "libcst.matchers.BaseBinaryOp": {
     "line number": [
      3767
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      3769,
      3771,
      3772,
      3775,
      3777,
      3778
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      3781,
      3783,
      3784
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      3772,
      3778,
      3784
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      3767
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      3773,
      3779,
      3785
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      3770,
      3776,
      3782
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      3771,
      3777,
      3783
     ]
    },
    "typing.Union": {
     "line number": [
      3768,
      3774,
      3780
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.DivideAssign": {
  "data": {
   "lineno": 3788,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      3788
     ]
    },
    "libcst.matchers.BaseAugOp": {
     "line number": [
      3789
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      3791,
      3793,
      3794,
      3797,
      3799,
      3800
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      3803,
      3805,
      3806
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      3794,
      3800,
      3806
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      3789
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      3795,
      3801,
      3807
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      3792,
      3798,
      3804
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      3793,
      3799,
      3805
     ]
    },
    "typing.Union": {
     "line number": [
      3790,
      3796,
      3802
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.DoNotCare": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.DoNotCare"
  },
  "type": "import"
 },
 "libcst.matchers.DoNotCareSentinel": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.DoNotCareSentinel"
  },
  "type": "import"
 },
 "libcst.matchers.DoesNotMatch": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.DoesNotMatch"
  },
  "type": "import"
 },
 "libcst.matchers.Dot": {
  "data": {
   "lineno": 3810,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      3810
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      3813,
      3815,
      3816,
      3819,
      3821,
      3822
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      3825,
      3827,
      3828
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      3816,
      3822,
      3828
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      3811
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      3817,
      3823,
      3829
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      3814,
      3820,
      3826
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      3815,
      3821,
      3827
     ]
    },
    "typing.Union": {
     "line number": [
      3812,
      3818,
      3824
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.DotMatchType": {
  "data": {
   "lineno": 649
  },
  "type": "constant"
 },
 "libcst.matchers.Element": {
  "data": {
   "lineno": 3832,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      3832
     ]
    },
    "libcst.matchers.BaseElement": {
     "line number": [
      3833
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      3835,
      3837,
      3838
     ]
    },
    "libcst.matchers.CommaMatchType": {
     "line number": [
      3841,
      3841,
      3841
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      3844,
      3846,
      3847
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      3838,
      3841,
      3847
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      3833
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      3839,
      3842,
      3848
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      3836,
      3841,
      3845
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      3837,
      3841,
      3846
     ]
    },
    "typing.Union": {
     "line number": [
      3834,
      3840,
      3843
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Ellipsis": {
  "data": {
   "lineno": 3851,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      3879,
      3903,
      3929,
      3959,
      3983,
      4009
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      3851
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      3879,
      3903,
      3929
     ]
    },
    "libcst.RightParen": {
     "line number": [
      3959,
      3983,
      4009
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      3852
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      3856,
      3858,
      3859,
      3862,
      3864,
      3865,
      3870,
      3872,
      3873,
      3884,
      3885,
      3886,
      3889,
      3890,
      3891,
      3896,
      3897,
      3898,
      3910,
      3911,
      3912,
      3915,
      3916,
      3917,
      3922,
      3923,
      3924
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      4014,
      4016,
      4017
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      3936,
      3938,
      3939,
      3942,
      3944,
      3945,
      3950,
      3952,
      3953,
      3964,
      3965,
      3966,
      3969,
      3970,
      3971,
      3976,
      3977,
      3978,
      3990,
      3991,
      3992,
      3995,
      3996,
      3997,
      4002,
      4003,
      4004
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      3859,
      3865,
      3873,
      3886,
      3891,
      3898,
      3906,
      3912,
      3917,
      3924,
      3939,
      3945,
      3953,
      3966,
      3971,
      3978,
      3986,
      3992,
      3997,
      4004,
      4017
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      3860,
      3887,
      3913,
      3940,
      3967,
      3993
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      3868,
      3894,
      3920,
      3948,
      3974,
      4000
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      3852
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      3932,
      4012,
      4018
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      3857,
      3863,
      3871,
      3878,
      3937,
      3943,
      3951,
      3958,
      4015
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      3879,
      3903,
      3929,
      3959,
      3983,
      4009
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      3858,
      3864,
      3872,
      3880,
      3885,
      3890,
      3897,
      3911,
      3916,
      3923,
      3938,
      3944,
      3952,
      3960,
      3965,
      3970,
      3977,
      3991,
      3996,
      4003,
      4016
     ]
    },
    "typing.Callable": {
     "line number": [
      3879,
      3903,
      3929,
      3959,
      3983,
      4009
     ]
    },
    "typing.Sequence": {
     "line number": [
      3854,
      3879,
      3882,
      3903,
      3908,
      3929,
      3934,
      3959,
      3962,
      3983,
      3988,
      4009
     ]
    },
    "typing.Union": {
     "line number": [
      3853,
      3855,
      3861,
      3869,
      3881,
      3883,
      3888,
      3895,
      3907,
      3909,
      3914,
      3921,
      3933,
      3935,
      3941,
      3949,
      3961,
      3963,
      3968,
      3975,
      3987,
      3989,
      3994,
      4001,
      4013
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Else": {
  "data": {
   "lineno": 4021,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      4055,
      4079,
      4105
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      4021
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      4055,
      4079,
      4105
     ]
    },
    "libcst.matchers.BaseSuiteMatchType": {
     "line number": [
      4024,
      4026,
      4027
     ]
    },
    "libcst.matchers.EmptyLineMatchType": {
     "line number": [
      4032,
      4034,
      4035,
      4038,
      4040,
      4041,
      4046,
      4048,
      4049,
      4060,
      4061,
      4062,
      4065,
      4066,
      4067,
      4072,
      4073,
      4074,
      4086,
      4087,
      4088,
      4091,
      4092,
      4093,
      4098,
      4099,
      4100
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      4116,
      4118,
      4119
     ]
    },
    "libcst.matchers.SimpleWhitespaceMatchType": {
     "line number": [
      4110,
      4112,
      4113
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      4027,
      4035,
      4041,
      4049,
      4062,
      4067,
      4074,
      4082,
      4088,
      4093,
      4100,
      4113,
      4119
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      4036,
      4063,
      4089
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      4044,
      4070,
      4096
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      4022
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      4028,
      4108,
      4114,
      4120
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      4025,
      4033,
      4039,
      4047,
      4054,
      4111,
      4117
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      4055,
      4079,
      4105
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      4026,
      4034,
      4040,
      4048,
      4056,
      4061,
      4066,
      4073,
      4087,
      4092,
      4099,
      4112,
      4118
     ]
    },
    "typing.Callable": {
     "line number": [
      4055,
      4079,
      4105
     ]
    },
    "typing.Sequence": {
     "line number": [
      4030,
      4055,
      4058,
      4079,
      4084,
      4105
     ]
    },
    "typing.Union": {
     "line number": [
      4023,
      4029,
      4031,
      4037,
      4045,
      4057,
      4059,
      4064,
      4071,
      4083,
      4085,
      4090,
      4097,
      4109,
      4115
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.ElseOrNoneMatchType": {
  "data": {
   "lineno": 4657
  },
  "type": "constant"
 },
 "libcst.matchers.EmptyLine": {
  "data": {
   "lineno": 4135,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      4135
     ]
    },
    "libcst.matchers.CommentOrNoneMatchType": {
     "line number": [
      4147,
      4149,
      4150
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      4159,
      4161,
      4162
     ]
    },
    "libcst.matchers.NewlineMatchType": {
     "line number": [
      4153,
      4155,
      4156
     ]
    },
    "libcst.matchers.SimpleWhitespaceMatchType": {
     "line number": [
      4141,
      4143,
      4144
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      4138,
      4144,
      4150,
      4156,
      4162
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      4136
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      4139,
      4145,
      4151,
      4157,
      4163
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      4138,
      4142,
      4148,
      4154,
      4160
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      4138,
      4143,
      4149,
      4155,
      4161
     ]
    },
    "libcst.matchers.boolMatchType": {
     "line number": [
      4138,
      4138,
      4138
     ]
    },
    "typing.Union": {
     "line number": [
      4137,
      4140,
      4146,
      4152,
      4158
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.EmptyLineMatchType": {
  "data": {
   "lineno": 1882
  },
  "type": "constant"
 },
 "libcst.matchers.Equal": {
  "data": {
   "lineno": 4166,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      4166
     ]
    },
    "libcst.matchers.BaseCompOp": {
     "line number": [
      4167
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      4169,
      4171,
      4172,
      4175,
      4177,
      4178
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      4181,
      4183,
      4184
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      4172,
      4178,
      4184
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      4167
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      4173,
      4179,
      4185
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      4170,
      4176,
      4182
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      4171,
      4177,
      4183
     ]
    },
    "typing.Union": {
     "line number": [
      4168,
      4174,
      4180
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.ExceptHandler": {
  "data": {
   "lineno": 4196,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      4242,
      4266,
      4292
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      4196
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      4242,
      4266,
      4292
     ]
    },
    "libcst.matchers.AsNameOrNoneMatchType": {
     "line number": [
      4211,
      4213,
      4214
     ]
    },
    "libcst.matchers.BaseExpressionOrNoneMatchType": {
     "line number": [
      4205,
      4207,
      4208
     ]
    },
    "libcst.matchers.BaseSuiteMatchType": {
     "line number": [
      4199,
      4201,
      4202
     ]
    },
    "libcst.matchers.EmptyLineMatchType": {
     "line number": [
      4219,
      4221,
      4222,
      4225,
      4227,
      4228,
      4233,
      4235,
      4236,
      4247,
      4248,
      4249,
      4252,
      4253,
      4254,
      4259,
      4260,
      4261,
      4273,
      4274,
      4275,
      4278,
      4279,
      4280,
      4285,
      4286,
      4287
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      4309,
      4311,
      4312
     ]
    },
    "libcst.matchers.SimpleWhitespaceMatchType": {
     "line number": [
      4297,
      4299,
      4300,
      4303,
      4305,
      4306
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      4202,
      4208,
      4214,
      4222,
      4228,
      4236,
      4249,
      4254,
      4261,
      4269,
      4275,
      4280,
      4287,
      4300,
      4306,
      4312
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      4223,
      4250,
      4276
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      4231,
      4257,
      4283
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      4197
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      4203,
      4209,
      4215,
      4295,
      4301,
      4307,
      4313
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      4200,
      4206,
      4212,
      4220,
      4226,
      4234,
      4241,
      4298,
      4304,
      4310
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      4242,
      4266,
      4292
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      4201,
      4207,
      4213,
      4221,
      4227,
      4235,
      4243,
      4248,
      4253,
      4260,
      4274,
      4279,
      4286,
      4299,
      4305,
      4311
     ]
    },
    "type": {
     "line number": [
      4204
     ]
    },
    "typing.Callable": {
     "line number": [
      4242,
      4266,
      4292
     ]
    },
    "typing.Sequence": {
     "line number": [
      4217,
      4242,
      4245,
      4266,
      4271,
      4292
     ]
    },
    "typing.Union": {
     "line number": [
      4198,
      4204,
      4210,
      4216,
      4218,
      4224,
      4232,
      4244,
      4246,
      4251,
      4258,
      4270,
      4272,
      4277,
      4284,
      4296,
      4302,
      4308
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.ExceptHandlerMatchType": {
  "data": {
   "lineno": 11886
  },
  "type": "constant"
 },
 "libcst.matchers.Expr": {
  "data": {
   "lineno": 4316,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      4316
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      4319,
      4321,
      4322
     ]
    },
    "libcst.matchers.BaseSmallStatement": {
     "line number": [
      4317
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      4331,
      4333,
      4334
     ]
    },
    "libcst.matchers.SemicolonMatchType": {
     "line number": [
      4325,
      4327,
      4328
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      4322,
      4328,
      4334
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      4317
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      4323,
      4329,
      4335
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      4320,
      4326,
      4332
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      4321,
      4327,
      4333
     ]
    },
    "typing.Union": {
     "line number": [
      4318,
      4324,
      4330
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Finally": {
  "data": {
   "lineno": 4338,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      4372,
      4396,
      4422
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      4338
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      4372,
      4396,
      4422
     ]
    },
    "libcst.matchers.BaseSuiteMatchType": {
     "line number": [
      4341,
      4343,
      4344
     ]
    },
    "libcst.matchers.EmptyLineMatchType": {
     "line number": [
      4349,
      4351,
      4352,
      4355,
      4357,
      4358,
      4363,
      4365,
      4366,
      4377,
      4378,
      4379,
      4382,
      4383,
      4384,
      4389,
      4390,
      4391,
      4403,
      4404,
      4405,
      4408,
      4409,
      4410,
      4415,
      4416,
      4417
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      4433,
      4435,
      4436
     ]
    },
    "libcst.matchers.SimpleWhitespaceMatchType": {
     "line number": [
      4427,
      4429,
      4430
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      4344,
      4352,
      4358,
      4366,
      4379,
      4384,
      4391,
      4399,
      4405,
      4410,
      4417,
      4430,
      4436
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      4353,
      4380,
      4406
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      4361,
      4387,
      4413
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      4339
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      4345,
      4425,
      4431,
      4437
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      4342,
      4350,
      4356,
      4364,
      4371,
      4428,
      4434
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      4372,
      4396,
      4422
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      4343,
      4351,
      4357,
      4365,
      4373,
      4378,
      4383,
      4390,
      4404,
      4409,
      4416,
      4429,
      4435
     ]
    },
    "typing.Callable": {
     "line number": [
      4372,
      4396,
      4422
     ]
    },
    "typing.Sequence": {
     "line number": [
      4347,
      4372,
      4375,
      4396,
      4401,
      4422
     ]
    },
    "typing.Union": {
     "line number": [
      4340,
      4346,
      4348,
      4354,
      4362,
      4374,
      4376,
      4381,
      4388,
      4400,
      4402,
      4407,
      4414,
      4426,
      4432
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.FinallyOrNoneMatchType": {
  "data": {
   "lineno": 11889
  },
  "type": "constant"
 },
 "libcst.matchers.Float": {
  "data": {
   "lineno": 4440,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      4471,
      4495,
      4521,
      4551,
      4575,
      4601
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      4440
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      4471,
      4495,
      4521
     ]
    },
    "libcst.RightParen": {
     "line number": [
      4551,
      4575,
      4601
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      4441
     ]
    },
    "libcst.matchers.BaseNumber": {
     "line number": [
      4441
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      4448,
      4450,
      4451,
      4454,
      4456,
      4457,
      4462,
      4464,
      4465,
      4476,
      4477,
      4478,
      4481,
      4482,
      4483,
      4488,
      4489,
      4490,
      4502,
      4503,
      4504,
      4507,
      4508,
      4509,
      4514,
      4515,
      4516
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      4606,
      4608,
      4609
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      4528,
      4530,
      4531,
      4534,
      4536,
      4537,
      4542,
      4544,
      4545,
      4556,
      4557,
      4558,
      4561,
      4562,
      4563,
      4568,
      4569,
      4570,
      4582,
      4583,
      4584,
      4587,
      4588,
      4589,
      4594,
      4595,
      4596
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      4443,
      4451,
      4457,
      4465,
      4478,
      4483,
      4490,
      4498,
      4504,
      4509,
      4516,
      4531,
      4537,
      4545,
      4558,
      4563,
      4570,
      4578,
      4584,
      4589,
      4596,
      4609
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      4452,
      4479,
      4505,
      4532,
      4559,
      4585
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      4460,
      4486,
      4512,
      4540,
      4566,
      4592
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      4441
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      4444,
      4524,
      4604,
      4610
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      4443,
      4449,
      4455,
      4463,
      4470,
      4529,
      4535,
      4543,
      4550,
      4607
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      4471,
      4495,
      4521,
      4551,
      4575,
      4601
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      4443,
      4450,
      4456,
      4464,
      4472,
      4477,
      4482,
      4489,
      4503,
      4508,
      4515,
      4530,
      4536,
      4544,
      4552,
      4557,
      4562,
      4569,
      4583,
      4588,
      4595,
      4608
     ]
    },
    "libcst.matchers.strMatchType": {
     "line number": [
      4443,
      4443,
      4443
     ]
    },
    "typing.Callable": {
     "line number": [
      4471,
      4495,
      4521,
      4551,
      4575,
      4601
     ]
    },
    "typing.Sequence": {
     "line number": [
      4446,
      4471,
      4474,
      4495,
      4500,
      4521,
      4526,
      4551,
      4554,
      4575,
      4580,
      4601
     ]
    },
    "typing.Union": {
     "line number": [
      4442,
      4445,
      4447,
      4453,
      4461,
      4473,
      4475,
      4480,
      4487,
      4499,
      4501,
      4506,
      4513,
      4525,
      4527,
      4533,
      4541,
      4553,
      4555,
      4560,
      4567,
      4579,
      4581,
      4586,
      4593,
      4605
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.FloorDivide": {
  "data": {
   "lineno": 4613,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      4613
     ]
    },
    "libcst.matchers.BaseBinaryOp": {
     "line number": [
      4614
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      4616,
      4618,
      4619,
      4622,
      4624,
      4625
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      4628,
      4630,
      4631
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      4619,
      4625,
      4631
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      4614
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      4620,
      4626,
      4632
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      4617,
      4623,
      4629
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      4618,
      4624,
      4630
     ]
    },
    "typing.Union": {
     "line number": [
      4615,
      4621,
      4627
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.FloorDivideAssign": {
  "data": {
   "lineno": 4635,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      4635
     ]
    },
    "libcst.matchers.BaseAugOp": {
     "line number": [
      4636
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      4638,
      4640,
      4641,
      4644,
      4646,
      4647
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      4650,
      4652,
      4653
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      4641,
      4647,
      4653
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      4636
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      4642,
      4648,
      4654
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      4639,
      4645,
      4651
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      4640,
      4646,
      4652
     ]
    },
    "typing.Union": {
     "line number": [
      4637,
      4643,
      4649
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.For": {
  "data": {
   "lineno": 4665,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      4723,
      4747,
      4773
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      4665
     ]
    },
    "iter": {
     "line number": [
      4673
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      4723,
      4747,
      4773
     ]
    },
    "libcst.matchers.AsynchronousOrNoneMatchType": {
     "line number": [
      4692,
      4694,
      4695
     ]
    },
    "libcst.matchers.BaseAssignTargetExpressionMatchType": {
     "line number": [
      4668,
      4670,
      4671
     ]
    },
    "libcst.matchers.BaseCompoundStatement": {
     "line number": [
      4666
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      4674,
      4676,
      4677
     ]
    },
    "libcst.matchers.BaseStatement": {
     "line number": [
      4666
     ]
    },
    "libcst.matchers.BaseSuiteMatchType": {
     "line number": [
      4680,
      4682,
      4683
     ]
    },
    "libcst.matchers.ElseOrNoneMatchType": {
     "line number": [
      4686,
      4688,
      4689
     ]
    },
    "libcst.matchers.EmptyLineMatchType": {
     "line number": [
      4700,
      4702,
      4703,
      4706,
      4708,
      4709,
      4714,
      4716,
      4717,
      4728,
      4729,
      4730,
      4733,
      4734,
      4735,
      4740,
      4741,
      4742,
      4754,
      4755,
      4756,
      4759,
      4760,
      4761,
      4766,
      4767,
      4768
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      4802,
      4804,
      4805
     ]
    },
    "libcst.matchers.SimpleWhitespaceMatchType": {
     "line number": [
      4778,
      4780,
      4781,
      4784,
      4786,
      4787,
      4790,
      4792,
      4793,
      4796,
      4798,
      4799
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      4671,
      4677,
      4683,
      4689,
      4695,
      4703,
      4709,
      4717,
      4730,
      4735,
      4742,
      4750,
      4756,
      4761,
      4768,
      4781,
      4787,
      4793,
      4799,
      4805
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      4704,
      4731,
      4757
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      4712,
      4738,
      4764
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      4666
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      4672,
      4678,
      4684,
      4690,
      4696,
      4776,
      4782,
      4788,
      4794,
      4800,
      4806
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      4669,
      4675,
      4681,
      4687,
      4693,
      4701,
      4707,
      4715,
      4722,
      4779,
      4785,
      4791,
      4797,
      4803
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      4723,
      4747,
      4773
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      4670,
      4676,
      4682,
      4688,
      4694,
      4702,
      4708,
      4716,
      4724,
      4729,
      4734,
      4741,
      4755,
      4760,
      4767,
      4780,
      4786,
      4792,
      4798,
      4804
     ]
    },
    "typing.Callable": {
     "line number": [
      4723,
      4747,
      4773
     ]
    },
    "typing.Sequence": {
     "line number": [
      4698,
      4723,
      4726,
      4747,
      4752,
      4773
     ]
    },
    "typing.Union": {
     "line number": [
      4667,
      4673,
      4679,
      4685,
      4691,
      4697,
      4699,
      4705,
      4713,
      4725,
      4727,
      4732,
      4739,
      4751,
      4753,
      4758,
      4765,
      4777,
      4783,
      4789,
      4795,
      4801
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.FormattedString": {
  "data": {
   "lineno": 4816,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      4844,
      4868,
      4894,
      4904,
      4910,
      4917,
      4947,
      4971,
      4997,
      5027,
      5051,
      5077
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      4816
     ]
    },
    "libcst.BaseFormattedStringContent": {
     "line number": [
      4844,
      4868,
      4894
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      4947,
      4971,
      4997
     ]
    },
    "libcst.RightParen": {
     "line number": [
      5027,
      5051,
      5077
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      4817
     ]
    },
    "libcst.matchers.BaseFormattedStringContentMatchType": {
     "line number": [
      4821,
      4823,
      4824,
      4827,
      4829,
      4830,
      4835,
      4837,
      4838,
      4849,
      4850,
      4851,
      4854,
      4855,
      4856,
      4861,
      4862,
      4863,
      4875,
      4876,
      4877,
      4880,
      4881,
      4882,
      4887,
      4888,
      4889
     ]
    },
    "libcst.matchers.BaseString": {
     "line number": [
      4817
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      4924,
      4926,
      4927,
      4930,
      4932,
      4933,
      4938,
      4940,
      4941,
      4952,
      4953,
      4954,
      4957,
      4958,
      4959,
      4964,
      4965,
      4966,
      4978,
      4979,
      4980,
      4983,
      4984,
      4985,
      4990,
      4991,
      4992
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      4903,
      4909,
      4916,
      5082,
      5084,
      5085
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      5004,
      5006,
      5007,
      5010,
      5012,
      5013,
      5018,
      5020,
      5021,
      5032,
      5033,
      5034,
      5037,
      5038,
      5039,
      5044,
      5045,
      5046,
      5058,
      5059,
      5060,
      5063,
      5064,
      5065,
      5070,
      5071,
      5072
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      4824,
      4830,
      4838,
      4851,
      4856,
      4863,
      4871,
      4877,
      4882,
      4889,
      4899,
      4913,
      4927,
      4933,
      4941,
      4954,
      4959,
      4966,
      4974,
      4980,
      4985,
      4992,
      5007,
      5013,
      5021,
      5034,
      5039,
      5046,
      5054,
      5060,
      5065,
      5072,
      5085
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      4825,
      4852,
      4878,
      4928,
      4955,
      4981,
      5008,
      5035,
      5061
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      4833,
      4859,
      4885,
      4936,
      4962,
      4988,
      5016,
      5042,
      5068
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      4817
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      4897,
      4900,
      4920,
      5000,
      5080,
      5086
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      4822,
      4828,
      4836,
      4843,
      4899,
      4905,
      4925,
      4931,
      4939,
      4946,
      5005,
      5011,
      5019,
      5026,
      5083
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      4844,
      4868,
      4894,
      4904,
      4910,
      4917,
      4947,
      4971,
      4997,
      5027,
      5051,
      5077
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      4823,
      4829,
      4837,
      4845,
      4850,
      4855,
      4862,
      4876,
      4881,
      4888,
      4899,
      4906,
      4926,
      4932,
      4940,
      4948,
      4953,
      4958,
      4965,
      4979,
      4984,
      4991,
      5006,
      5012,
      5020,
      5028,
      5033,
      5038,
      5045,
      5059,
      5064,
      5071,
      5084
     ]
    },
    "libcst.matchers.strMatchType": {
     "line number": [
      4899,
      4899,
      4899
     ]
    },
    "typing.Callable": {
     "line number": [
      4844,
      4868,
      4894,
      4904,
      4910,
      4917,
      4947,
      4971,
      4997,
      5027,
      5051,
      5077
     ]
    },
    "typing.Sequence": {
     "line number": [
      4819,
      4844,
      4847,
      4868,
      4873,
      4894,
      4922,
      4947,
      4950,
      4971,
      4976,
      4997,
      5002,
      5027,
      5030,
      5051,
      5056,
      5077
     ]
    },
    "typing.Union": {
     "line number": [
      4818,
      4820,
      4826,
      4834,
      4846,
      4848,
      4853,
      4860,
      4872,
      4874,
      4879,
      4886,
      4898,
      4901,
      4907,
      4914,
      4921,
      4923,
      4929,
      4937,
      4949,
      4951,
      4956,
      4963,
      4975,
      4977,
      4982,
      4989,
      5001,
      5003,
      5009,
      5017,
      5029,
      5031,
      5036,
      5043,
      5055,
      5057,
      5062,
      5069,
      5081
     ]
    },
    "typing_extensions.Literal": {
     "line number": [
      4902,
      4904,
      4908,
      4910,
      4915,
      4917
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.FormattedStringExpression": {
  "data": {
   "lineno": 5100,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      5141,
      5166,
      5194,
      5211,
      5240,
      5267,
      5297,
      5323,
      5353,
      5380,
      5410,
      5436
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      5100
     ]
    },
    "libcst.BaseFormattedStringContent": {
     "line number": [
      5141,
      5166,
      5194,
      5205,
      5207,
      5208,
      5240,
      5267,
      5297,
      5309,
      5313,
      5318,
      5353,
      5380,
      5410,
      5422,
      5426,
      5431
     ]
    },
    "libcst.matchers.AssignEqualOrNoneMatchType": {
     "line number": [
      5455,
      5457,
      5458
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      5103,
      5105,
      5106
     ]
    },
    "libcst.matchers.BaseFormattedStringContent": {
     "line number": [
      5101
     ]
    },
    "libcst.matchers.BaseFormattedStringContentMatchType": {
     "line number": [
      5118,
      5120,
      5121,
      5124,
      5126,
      5127,
      5132,
      5134,
      5135,
      5146,
      5147,
      5148,
      5151,
      5152,
      5153,
      5158,
      5159,
      5160,
      5174,
      5175,
      5176,
      5179,
      5180,
      5181,
      5186,
      5187,
      5188,
      5220,
      5221,
      5222,
      5225,
      5226,
      5227,
      5232,
      5233,
      5234,
      5246,
      5247,
      5248,
      5251,
      5252,
      5253,
      5258,
      5259,
      5260,
      5276,
      5277,
      5278,
      5281,
      5282,
      5283,
      5288,
      5289,
      5290,
      5333,
      5334,
      5335,
      5338,
      5339,
      5340,
      5345,
      5346,
      5347,
      5359,
      5360,
      5361,
      5364,
      5365,
      5366,
      5371,
      5372,
      5373,
      5389,
      5390,
      5391,
      5394,
      5395,
      5396,
      5401,
      5402,
      5403
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      5443,
      5445,
      5446,
      5449,
      5451,
      5452
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      5200,
      5304,
      5417,
      5461,
      5463,
      5464
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      5106,
      5112,
      5121,
      5127,
      5135,
      5148,
      5153,
      5160,
      5170,
      5176,
      5181,
      5188,
      5208,
      5222,
      5227,
      5234,
      5248,
      5253,
      5260,
      5272,
      5278,
      5283,
      5290,
      5316,
      5328,
      5335,
      5340,
      5347,
      5361,
      5366,
      5373,
      5385,
      5391,
      5396,
      5403,
      5429,
      5446,
      5452,
      5458,
      5464
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      5122,
      5149,
      5177,
      5223,
      5249,
      5279,
      5336,
      5362,
      5392
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      5130,
      5156,
      5184,
      5230,
      5256,
      5286,
      5343,
      5369,
      5399
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      5101
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      5107,
      5113,
      5441,
      5447,
      5453,
      5459,
      5465
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      5104,
      5110,
      5119,
      5125,
      5133,
      5140,
      5214,
      5444,
      5450,
      5456,
      5462
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      5141,
      5165,
      5193,
      5201,
      5239,
      5265,
      5295,
      5305,
      5352,
      5378,
      5408,
      5418
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      5105,
      5111,
      5120,
      5126,
      5134,
      5142,
      5147,
      5152,
      5159,
      5175,
      5180,
      5187,
      5207,
      5215,
      5221,
      5226,
      5233,
      5242,
      5247,
      5252,
      5259,
      5277,
      5282,
      5289,
      5311,
      5334,
      5339,
      5346,
      5355,
      5360,
      5365,
      5372,
      5390,
      5395,
      5402,
      5424,
      5445,
      5451,
      5457,
      5463
     ]
    },
    "libcst.matchers.strOrNoneMatchType": {
     "line number": [
      5109,
      5111,
      5112
     ]
    },
    "typing.Callable": {
     "line number": [
      5141,
      5166,
      5194,
      5202,
      5240,
      5266,
      5296,
      5306,
      5353,
      5379,
      5409,
      5419
     ]
    },
    "typing.Sequence": {
     "line number": [
      5116,
      5141,
      5144,
      5166,
      5172,
      5194,
      5205,
      5207,
      5208,
      5218,
      5240,
      5244,
      5267,
      5274,
      5297,
      5309,
      5313,
      5318,
      5331,
      5353,
      5357,
      5380,
      5387,
      5410,
      5422,
      5426,
      5431
     ]
    },
    "typing.Union": {
     "line number": [
      5102,
      5108,
      5114,
      5115,
      5117,
      5123,
      5131,
      5143,
      5145,
      5150,
      5157,
      5171,
      5173,
      5178,
      5185,
      5204,
      5207,
      5208,
      5216,
      5217,
      5219,
      5224,
      5231,
      5243,
      5245,
      5250,
      5257,
      5273,
      5275,
      5280,
      5287,
      5308,
      5312,
      5317,
      5329,
      5330,
      5332,
      5337,
      5344,
      5356,
      5358,
      5363,
      5370,
      5386,
      5388,
      5393,
      5400,
      5421,
      5425,
      5430,
      5442,
      5448,
      5454,
      5460
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.FormattedStringText": {
  "data": {
   "lineno": 5468,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      5468
     ]
    },
    "libcst.matchers.BaseFormattedStringContent": {
     "line number": [
      5469
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      5474,
      5476,
      5477
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      5471,
      5477
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      5469
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      5472,
      5478
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      5471,
      5475
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      5471,
      5476
     ]
    },
    "libcst.matchers.strMatchType": {
     "line number": [
      5471,
      5471,
      5471
     ]
    },
    "typing.Union": {
     "line number": [
      5470,
      5473
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.From": {
  "data": {
   "lineno": 5481,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      5481
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      5484,
      5486,
      5487
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      5490,
      5492,
      5493,
      5496,
      5498,
      5499
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      5502,
      5504,
      5505
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      5487,
      5493,
      5499,
      5505
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      5482
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      5488,
      5494,
      5500,
      5506
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      5485,
      5491,
      5497,
      5503
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      5486,
      5492,
      5498,
      5504
     ]
    },
    "typing.Union": {
     "line number": [
      5483,
      5489,
      5495,
      5501
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.FromOrNoneMatchType": {
  "data": {
   "lineno": 10152
  },
  "type": "constant"
 },
 "libcst.matchers.FunctionDef": {
  "data": {
   "lineno": 5520,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      5563,
      5587,
      5613,
      5655,
      5679,
      5705,
      5735,
      5759,
      5785
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      5520
     ]
    },
    "libcst.Decorator": {
     "line number": [
      5563,
      5587,
      5613
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      5655,
      5679,
      5705,
      5735,
      5759,
      5785
     ]
    },
    "libcst.matchers.AnnotationOrNoneMatchType": {
     "line number": [
      5618,
      5620,
      5621
     ]
    },
    "libcst.matchers.AsynchronousOrNoneMatchType": {
     "line number": [
      5624,
      5626,
      5627
     ]
    },
    "libcst.matchers.BaseCompoundStatement": {
     "line number": [
      5521
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      5802,
      5804,
      5805
     ]
    },
    "libcst.matchers.BaseStatement": {
     "line number": [
      5521
     ]
    },
    "libcst.matchers.BaseSuiteMatchType": {
     "line number": [
      5532,
      5534,
      5535
     ]
    },
    "libcst.matchers.DecoratorMatchType": {
     "line number": [
      5540,
      5542,
      5543,
      5546,
      5548,
      5549,
      5554,
      5556,
      5557,
      5568,
      5569,
      5570,
      5573,
      5574,
      5575,
      5580,
      5581,
      5582,
      5594,
      5595,
      5596,
      5599,
      5600,
      5601,
      5606,
      5607,
      5608
     ]
    },
    "libcst.matchers.EmptyLineMatchType": {
     "line number": [
      5632,
      5634,
      5635,
      5638,
      5640,
      5641,
      5646,
      5648,
      5649,
      5660,
      5661,
      5662,
      5665,
      5666,
      5667,
      5672,
      5673,
      5674,
      5686,
      5687,
      5688,
      5691,
      5692,
      5693,
      5698,
      5699,
      5700,
      5712,
      5714,
      5715,
      5718,
      5720,
      5721,
      5726,
      5728,
      5729,
      5740,
      5741,
      5742,
      5745,
      5746,
      5747,
      5752,
      5753,
      5754,
      5766,
      5767,
      5768,
      5771,
      5772,
      5773,
      5778,
      5779,
      5780
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      5814,
      5816,
      5817
     ]
    },
    "libcst.matchers.NameMatchType": {
     "line number": [
      5523,
      5523,
      5523
     ]
    },
    "libcst.matchers.ParametersMatchType": {
     "line number": [
      5526,
      5528,
      5529
     ]
    },
    "libcst.matchers.SimpleWhitespaceMatchType": {
     "line number": [
      5790,
      5792,
      5793,
      5796,
      5798,
      5799,
      5808,
      5810,
      5811
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      5523,
      5529,
      5535,
      5543,
      5549,
      5557,
      5570,
      5575,
      5582,
      5590,
      5596,
      5601,
      5608,
      5621,
      5627,
      5635,
      5641,
      5649,
      5662,
      5667,
      5674,
      5682,
      5688,
      5693,
      5700,
      5715,
      5721,
      5729,
      5742,
      5747,
      5754,
      5762,
      5768,
      5773,
      5780,
      5793,
      5799,
      5805,
      5811,
      5817
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      5544,
      5571,
      5597,
      5636,
      5663,
      5689,
      5716,
      5743,
      5769
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      5552,
      5578,
      5604,
      5644,
      5670,
      5696,
      5724,
      5750,
      5776
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      5521
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      5524,
      5530,
      5536,
      5616,
      5622,
      5628,
      5708,
      5788,
      5794,
      5800,
      5806,
      5812,
      5818
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      5523,
      5527,
      5533,
      5541,
      5547,
      5555,
      5562,
      5619,
      5625,
      5633,
      5639,
      5647,
      5654,
      5713,
      5719,
      5727,
      5734,
      5791,
      5797,
      5803,
      5809,
      5815
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      5563,
      5587,
      5613,
      5655,
      5679,
      5705,
      5735,
      5759,
      5785
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      5523,
      5528,
      5534,
      5542,
      5548,
      5556,
      5564,
      5569,
      5574,
      5581,
      5595,
      5600,
      5607,
      5620,
      5626,
      5634,
      5640,
      5648,
      5656,
      5661,
      5666,
      5673,
      5687,
      5692,
      5699,
      5714,
      5720,
      5728,
      5736,
      5741,
      5746,
      5753,
      5767,
      5772,
      5779,
      5792,
      5798,
      5804,
      5810,
      5816
     ]
    },
    "typing.Callable": {
     "line number": [
      5563,
      5587,
      5613,
      5655,
      5679,
      5705,
      5735,
      5759,
      5785
     ]
    },
    "typing.Sequence": {
     "line number": [
      5538,
      5563,
      5566,
      5587,
      5592,
      5613,
      5630,
      5655,
      5658,
      5679,
      5684,
      5705,
      5710,
      5735,
      5738,
      5759,
      5764,
      5785
     ]
    },
    "typing.Union": {
     "line number": [
      5522,
      5525,
      5531,
      5537,
      5539,
      5545,
      5553,
      5565,
      5567,
      5572,
      5579,
      5591,
      5593,
      5598,
      5605,
      5617,
      5623,
      5629,
      5631,
      5637,
      5645,
      5657,
      5659,
      5664,
      5671,
      5683,
      5685,
      5690,
      5697,
      5709,
      5711,
      5717,
      5725,
      5737,
      5739,
      5744,
      5751,
      5763,
      5765,
      5770,
      5777,
      5789,
      5795,
      5801,
      5807,
      5813
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.GeneratorExp": {
  "data": {
   "lineno": 5821,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      5861,
      5885,
      5911,
      5941,
      5965,
      5991
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      5821
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      5861,
      5885,
      5911
     ]
    },
    "libcst.RightParen": {
     "line number": [
      5941,
      5965,
      5991
     ]
    },
    "libcst.matchers.BaseAssignTargetExpressionMatchType": {
     "line number": [
      5824,
      5826,
      5827
     ]
    },
    "libcst.matchers.BaseComp": {
     "line number": [
      5822
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      5822
     ]
    },
    "libcst.matchers.BaseSimpleComp": {
     "line number": [
      5822
     ]
    },
    "libcst.matchers.CompForMatchType": {
     "line number": [
      5830,
      5832,
      5833
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      5838,
      5840,
      5841,
      5844,
      5846,
      5847,
      5852,
      5854,
      5855,
      5866,
      5867,
      5868,
      5871,
      5872,
      5873,
      5878,
      5879,
      5880,
      5892,
      5893,
      5894,
      5897,
      5898,
      5899,
      5904,
      5905,
      5906
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      5996,
      5998,
      5999
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      5918,
      5920,
      5921,
      5924,
      5926,
      5927,
      5932,
      5934,
      5935,
      5946,
      5947,
      5948,
      5951,
      5952,
      5953,
      5958,
      5959,
      5960,
      5972,
      5973,
      5974,
      5977,
      5978,
      5979,
      5984,
      5985,
      5986
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      5827,
      5833,
      5841,
      5847,
      5855,
      5868,
      5873,
      5880,
      5888,
      5894,
      5899,
      5906,
      5921,
      5927,
      5935,
      5948,
      5953,
      5960,
      5968,
      5974,
      5979,
      5986,
      5999
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      5842,
      5869,
      5895,
      5922,
      5949,
      5975
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      5850,
      5876,
      5902,
      5930,
      5956,
      5982
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      5822
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      5828,
      5834,
      5914,
      5994,
      6000
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      5825,
      5831,
      5839,
      5845,
      5853,
      5860,
      5919,
      5925,
      5933,
      5940,
      5997
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      5861,
      5885,
      5911,
      5941,
      5965,
      5991
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      5826,
      5832,
      5840,
      5846,
      5854,
      5862,
      5867,
      5872,
      5879,
      5893,
      5898,
      5905,
      5920,
      5926,
      5934,
      5942,
      5947,
      5952,
      5959,
      5973,
      5978,
      5985,
      5998
     ]
    },
    "typing.Callable": {
     "line number": [
      5861,
      5885,
      5911,
      5941,
      5965,
      5991
     ]
    },
    "typing.Sequence": {
     "line number": [
      5836,
      5861,
      5864,
      5885,
      5890,
      5911,
      5916,
      5941,
      5944,
      5965,
      5970,
      5991
     ]
    },
    "typing.Union": {
     "line number": [
      5823,
      5829,
      5835,
      5837,
      5843,
      5851,
      5863,
      5865,
      5870,
      5877,
      5889,
      5891,
      5896,
      5903,
      5915,
      5917,
      5923,
      5931,
      5943,
      5945,
      5950,
      5957,
      5969,
      5971,
      5976,
      5983,
      5995
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Global": {
  "data": {
   "lineno": 6008,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      6036,
      6060,
      6086
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      6008
     ]
    },
    "libcst.NameItem": {
     "line number": [
      6036,
      6060,
      6086
     ]
    },
    "libcst.matchers.BaseSmallStatement": {
     "line number": [
      6009
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      6103,
      6105,
      6106
     ]
    },
    "libcst.matchers.NameItemMatchType": {
     "line number": [
      6013,
      6015,
      6016,
      6019,
      6021,
      6022,
      6027,
      6029,
      6030,
      6041,
      6042,
      6043,
      6046,
      6047,
      6048,
      6053,
      6054,
      6055,
      6067,
      6068,
      6069,
      6072,
      6073,
      6074,
      6079,
      6080,
      6081
     ]
    },
    "libcst.matchers.SemicolonMatchType": {
     "line number": [
      6097,
      6099,
      6100
     ]
    },
    "libcst.matchers.SimpleWhitespaceMatchType": {
     "line number": [
      6091,
      6093,
      6094
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      6016,
      6022,
      6030,
      6043,
      6048,
      6055,
      6063,
      6069,
      6074,
      6081,
      6094,
      6100,
      6106
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      6017,
      6044,
      6070
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      6025,
      6051,
      6077
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      6009
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      6089,
      6095,
      6101,
      6107
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      6014,
      6020,
      6028,
      6035,
      6092,
      6098,
      6104
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      6036,
      6060,
      6086
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      6015,
      6021,
      6029,
      6037,
      6042,
      6047,
      6054,
      6068,
      6073,
      6080,
      6093,
      6099,
      6105
     ]
    },
    "typing.Callable": {
     "line number": [
      6036,
      6060,
      6086
     ]
    },
    "typing.Sequence": {
     "line number": [
      6011,
      6036,
      6039,
      6060,
      6065,
      6086
     ]
    },
    "typing.Union": {
     "line number": [
      6010,
      6012,
      6018,
      6026,
      6038,
      6040,
      6045,
      6052,
      6064,
      6066,
      6071,
      6078,
      6090,
      6096,
      6102
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.GreaterThan": {
  "data": {
   "lineno": 6110,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      6110
     ]
    },
    "libcst.matchers.BaseCompOp": {
     "line number": [
      6111
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      6113,
      6115,
      6116,
      6119,
      6121,
      6122
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      6125,
      6127,
      6128
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      6116,
      6122,
      6128
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      6111
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      6117,
      6123,
      6129
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      6114,
      6120,
      6126
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      6115,
      6121,
      6127
     ]
    },
    "typing.Union": {
     "line number": [
      6112,
      6118,
      6124
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.GreaterThanEqual": {
  "data": {
   "lineno": 6132,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      6132
     ]
    },
    "libcst.matchers.BaseCompOp": {
     "line number": [
      6133
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      6135,
      6137,
      6138,
      6141,
      6143,
      6144
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      6147,
      6149,
      6150
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      6138,
      6144,
      6150
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      6133
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      6139,
      6145,
      6151
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      6136,
      6142,
      6148
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      6137,
      6143,
      6149
     ]
    },
    "typing.Union": {
     "line number": [
      6134,
      6140,
      6146
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.If": {
  "data": {
   "lineno": 6163,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      6209,
      6233,
      6259
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      6163
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      6209,
      6233,
      6259
     ]
    },
    "libcst.matchers.BaseCompoundStatement": {
     "line number": [
      6164
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      6166,
      6168,
      6169
     ]
    },
    "libcst.matchers.BaseStatement": {
     "line number": [
      6164
     ]
    },
    "libcst.matchers.BaseSuiteMatchType": {
     "line number": [
      6172,
      6174,
      6175
     ]
    },
    "libcst.matchers.EmptyLineMatchType": {
     "line number": [
      6186,
      6188,
      6189,
      6192,
      6194,
      6195,
      6200,
      6202,
      6203,
      6214,
      6215,
      6216,
      6219,
      6220,
      6221,
      6226,
      6227,
      6228,
      6240,
      6241,
      6242,
      6245,
      6246,
      6247,
      6252,
      6253,
      6254
     ]
    },
    "libcst.matchers.IfOrElseOrNoneMatchType": {
     "line number": [
      6178,
      6180,
      6181
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      6276,
      6278,
      6279
     ]
    },
    "libcst.matchers.SimpleWhitespaceMatchType": {
     "line number": [
      6264,
      6266,
      6267,
      6270,
      6272,
      6273
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      6169,
      6175,
      6181,
      6189,
      6195,
      6203,
      6216,
      6221,
      6228,
      6236,
      6242,
      6247,
      6254,
      6267,
      6273,
      6279
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      6190,
      6217,
      6243
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      6198,
      6224,
      6250
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      6164
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      6170,
      6176,
      6182,
      6262,
      6268,
      6274,
      6280
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      6167,
      6173,
      6179,
      6187,
      6193,
      6201,
      6208,
      6265,
      6271,
      6277
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      6209,
      6233,
      6259
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      6168,
      6174,
      6180,
      6188,
      6194,
      6202,
      6210,
      6215,
      6220,
      6227,
      6241,
      6246,
      6253,
      6266,
      6272,
      6278
     ]
    },
    "typing.Callable": {
     "line number": [
      6209,
      6233,
      6259
     ]
    },
    "typing.Sequence": {
     "line number": [
      6184,
      6209,
      6212,
      6233,
      6238,
      6259
     ]
    },
    "typing.Union": {
     "line number": [
      6165,
      6171,
      6177,
      6183,
      6185,
      6191,
      6199,
      6211,
      6213,
      6218,
      6225,
      6237,
      6239,
      6244,
      6251,
      6263,
      6269,
      6275
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.IfExp": {
  "data": {
   "lineno": 6283,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      6329,
      6353,
      6379,
      6409,
      6433,
      6459
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      6283
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      6329,
      6353,
      6379
     ]
    },
    "libcst.RightParen": {
     "line number": [
      6409,
      6433,
      6459
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      6284
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      6286,
      6288,
      6289,
      6292,
      6294,
      6295,
      6298,
      6300,
      6301
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      6464,
      6466,
      6467,
      6470,
      6472,
      6473,
      6476,
      6478,
      6479,
      6482,
      6484,
      6485
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      6306,
      6308,
      6309,
      6312,
      6314,
      6315,
      6320,
      6322,
      6323,
      6334,
      6335,
      6336,
      6339,
      6340,
      6341,
      6346,
      6347,
      6348,
      6360,
      6361,
      6362,
      6365,
      6366,
      6367,
      6372,
      6373,
      6374
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      6488,
      6490,
      6491
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      6386,
      6388,
      6389,
      6392,
      6394,
      6395,
      6400,
      6402,
      6403,
      6414,
      6415,
      6416,
      6419,
      6420,
      6421,
      6426,
      6427,
      6428,
      6440,
      6441,
      6442,
      6445,
      6446,
      6447,
      6452,
      6453,
      6454
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      6289,
      6295,
      6301,
      6309,
      6315,
      6323,
      6336,
      6341,
      6348,
      6356,
      6362,
      6367,
      6374,
      6389,
      6395,
      6403,
      6416,
      6421,
      6428,
      6436,
      6442,
      6447,
      6454,
      6467,
      6473,
      6479,
      6485,
      6491
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      6310,
      6337,
      6363,
      6390,
      6417,
      6443
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      6318,
      6344,
      6370,
      6398,
      6424,
      6450
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      6284
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      6290,
      6296,
      6302,
      6382,
      6462,
      6468,
      6474,
      6480,
      6486,
      6492
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      6287,
      6293,
      6299,
      6307,
      6313,
      6321,
      6328,
      6387,
      6393,
      6401,
      6408,
      6465,
      6471,
      6477,
      6483,
      6489
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      6329,
      6353,
      6379,
      6409,
      6433,
      6459
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      6288,
      6294,
      6300,
      6308,
      6314,
      6322,
      6330,
      6335,
      6340,
      6347,
      6361,
      6366,
      6373,
      6388,
      6394,
      6402,
      6410,
      6415,
      6420,
      6427,
      6441,
      6446,
      6453,
      6466,
      6472,
      6478,
      6484,
      6490
     ]
    },
    "typing.Callable": {
     "line number": [
      6329,
      6353,
      6379,
      6409,
      6433,
      6459
     ]
    },
    "typing.Sequence": {
     "line number": [
      6304,
      6329,
      6332,
      6353,
      6358,
      6379,
      6384,
      6409,
      6412,
      6433,
      6438,
      6459
     ]
    },
    "typing.Union": {
     "line number": [
      6285,
      6291,
      6297,
      6303,
      6305,
      6311,
      6319,
      6331,
      6333,
      6338,
      6345,
      6357,
      6359,
      6364,
      6371,
      6383,
      6385,
      6391,
      6399,
      6411,
      6413,
      6418,
      6425,
      6437,
      6439,
      6444,
      6451,
      6463,
      6469,
      6475,
      6481,
      6487
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.IfOrElseOrNoneMatchType": {
  "data": {
   "lineno": 6154
  },
  "type": "constant"
 },
 "libcst.matchers.Imaginary": {
  "data": {
   "lineno": 6495,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      6526,
      6550,
      6576,
      6606,
      6630,
      6656
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      6495
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      6526,
      6550,
      6576
     ]
    },
    "libcst.RightParen": {
     "line number": [
      6606,
      6630,
      6656
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      6496
     ]
    },
    "libcst.matchers.BaseNumber": {
     "line number": [
      6496
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      6503,
      6505,
      6506,
      6509,
      6511,
      6512,
      6517,
      6519,
      6520,
      6531,
      6532,
      6533,
      6536,
      6537,
      6538,
      6543,
      6544,
      6545,
      6557,
      6558,
      6559,
      6562,
      6563,
      6564,
      6569,
      6570,
      6571
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      6661,
      6663,
      6664
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      6583,
      6585,
      6586,
      6589,
      6591,
      6592,
      6597,
      6599,
      6600,
      6611,
      6612,
      6613,
      6616,
      6617,
      6618,
      6623,
      6624,
      6625,
      6637,
      6638,
      6639,
      6642,
      6643,
      6644,
      6649,
      6650,
      6651
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      6498,
      6506,
      6512,
      6520,
      6533,
      6538,
      6545,
      6553,
      6559,
      6564,
      6571,
      6586,
      6592,
      6600,
      6613,
      6618,
      6625,
      6633,
      6639,
      6644,
      6651,
      6664
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      6507,
      6534,
      6560,
      6587,
      6614,
      6640
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      6515,
      6541,
      6567,
      6595,
      6621,
      6647
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      6496
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      6499,
      6579,
      6659,
      6665
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      6498,
      6504,
      6510,
      6518,
      6525,
      6584,
      6590,
      6598,
      6605,
      6662
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      6526,
      6550,
      6576,
      6606,
      6630,
      6656
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      6498,
      6505,
      6511,
      6519,
      6527,
      6532,
      6537,
      6544,
      6558,
      6563,
      6570,
      6585,
      6591,
      6599,
      6607,
      6612,
      6617,
      6624,
      6638,
      6643,
      6650,
      6663
     ]
    },
    "libcst.matchers.strMatchType": {
     "line number": [
      6498,
      6498,
      6498
     ]
    },
    "typing.Callable": {
     "line number": [
      6526,
      6550,
      6576,
      6606,
      6630,
      6656
     ]
    },
    "typing.Sequence": {
     "line number": [
      6501,
      6526,
      6529,
      6550,
      6555,
      6576,
      6581,
      6606,
      6609,
      6630,
      6635,
      6656
     ]
    },
    "typing.Union": {
     "line number": [
      6497,
      6500,
      6502,
      6508,
      6516,
      6528,
      6530,
      6535,
      6542,
      6554,
      6556,
      6561,
      6568,
      6580,
      6582,
      6588,
      6596,
      6608,
      6610,
      6615,
      6622,
      6634,
      6636,
      6641,
      6648,
      6660
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Import": {
  "data": {
   "lineno": 6673,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      6701,
      6725,
      6751
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      6673
     ]
    },
    "libcst.ImportAlias": {
     "line number": [
      6701,
      6725,
      6751
     ]
    },
    "libcst.matchers.BaseSmallStatement": {
     "line number": [
      6674
     ]
    },
    "libcst.matchers.ImportAliasMatchType": {
     "line number": [
      6678,
      6680,
      6681,
      6684,
      6686,
      6687,
      6692,
      6694,
      6695,
      6706,
      6707,
      6708,
      6711,
      6712,
      6713,
      6718,
      6719,
      6720,
      6732,
      6733,
      6734,
      6737,
      6738,
      6739,
      6744,
      6745,
      6746
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      6768,
      6770,
      6771
     ]
    },
    "libcst.matchers.SemicolonMatchType": {
     "line number": [
      6756,
      6758,
      6759
     ]
    },
    "libcst.matchers.SimpleWhitespaceMatchType": {
     "line number": [
      6762,
      6764,
      6765
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      6681,
      6687,
      6695,
      6708,
      6713,
      6720,
      6728,
      6734,
      6739,
      6746,
      6759,
      6765,
      6771
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      6682,
      6709,
      6735
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      6690,
      6716,
      6742
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      6674
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      6754,
      6760,
      6766,
      6772
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      6679,
      6685,
      6693,
      6700,
      6757,
      6763,
      6769
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      6701,
      6725,
      6751
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      6680,
      6686,
      6694,
      6702,
      6707,
      6712,
      6719,
      6733,
      6738,
      6745,
      6758,
      6764,
      6770
     ]
    },
    "typing.Callable": {
     "line number": [
      6701,
      6725,
      6751
     ]
    },
    "typing.Sequence": {
     "line number": [
      6676,
      6701,
      6704,
      6725,
      6730,
      6751
     ]
    },
    "typing.Union": {
     "line number": [
      6675,
      6677,
      6683,
      6691,
      6703,
      6705,
      6710,
      6717,
      6729,
      6731,
      6736,
      6743,
      6755,
      6761,
      6767
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.ImportAlias": {
  "data": {
   "lineno": 6783,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      6783
     ]
    },
    "libcst.matchers.AsNameOrNoneMatchType": {
     "line number": [
      6792,
      6794,
      6795
     ]
    },
    "libcst.matchers.AttributeOrNameMatchType": {
     "line number": [
      6786,
      6788,
      6789
     ]
    },
    "libcst.matchers.CommaMatchType": {
     "line number": [
      6798,
      6798,
      6798
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      6801,
      6803,
      6804
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      6789,
      6795,
      6798,
      6804
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      6784
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      6790,
      6796,
      6799,
      6805
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      6787,
      6793,
      6798,
      6802
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      6788,
      6794,
      6798,
      6803
     ]
    },
    "typing.Union": {
     "line number": [
      6785,
      6791,
      6797,
      6800
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.ImportAliasMatchType": {
  "data": {
   "lineno": 6668
  },
  "type": "constant"
 },
 "libcst.matchers.ImportFrom": {
  "data": {
   "lineno": 6829,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      6864,
      6888,
      6914,
      6930,
      6958,
      6982,
      7008,
      7024,
      7053,
      7077,
      7103,
      7119,
      7151,
      7171,
      7193
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      6829
     ]
    },
    "libcst.Dot": {
     "line number": [
      7151,
      7171,
      7193
     ]
    },
    "libcst.ImportAlias": {
     "line number": [
      6864,
      6888,
      6914,
      6924,
      6926,
      6927,
      6958,
      6982,
      7008,
      7018,
      7020,
      7021,
      7053,
      7077,
      7103,
      7113,
      7115,
      7116
     ]
    },
    "libcst.ImportStar": {
     "line number": [
      6925,
      6926,
      6927,
      7019,
      7020,
      7021,
      7114,
      7115,
      7116
     ]
    },
    "libcst.matchers.AttributeOrNameOrNoneMatchType": {
     "line number": [
      6832,
      6834,
      6835
     ]
    },
    "libcst.matchers.BaseSmallStatement": {
     "line number": [
      6830
     ]
    },
    "libcst.matchers.DotMatchType": {
     "line number": [
      7128,
      7130,
      7131,
      7134,
      7136,
      7137,
      7142,
      7144,
      7145,
      7156,
      7157,
      7158,
      7161,
      7161,
      7161,
      7166,
      7166,
      7166,
      7178,
      7179,
      7180,
      7183,
      7183,
      7183,
      7188,
      7188,
      7188
     ]
    },
    "libcst.matchers.ImportAliasMatchType": {
     "line number": [
      6841,
      6843,
      6844,
      6847,
      6849,
      6850,
      6855,
      6857,
      6858,
      6869,
      6870,
      6871,
      6874,
      6875,
      6876,
      6881,
      6882,
      6883,
      6895,
      6896,
      6897,
      6900,
      6901,
      6902,
      6907,
      6908,
      6909,
      6939,
      6940,
      6941,
      6944,
      6945,
      6946,
      6951,
      6952,
      6953,
      6963,
      6964,
      6965,
      6968,
      6969,
      6970,
      6975,
      6976,
      6977,
      6989,
      6990,
      6991,
      6994,
      6995,
      6996,
      7001,
      7002,
      7003,
      7034,
      7035,
      7036,
      7039,
      7040,
      7041,
      7046,
      7047,
      7048,
      7058,
      7059,
      7060,
      7063,
      7064,
      7065,
      7070,
      7071,
      7072,
      7084,
      7085,
      7086,
      7089,
      7090,
      7091,
      7096,
      7097,
      7098
     ]
    },
    "libcst.matchers.LeftParenOrNoneMatchType": {
     "line number": [
      7198,
      7200,
      7201
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      6919,
      7013,
      7108,
      7234,
      7236,
      7237
     ]
    },
    "libcst.matchers.RightParenOrNoneMatchType": {
     "line number": [
      7204,
      7206,
      7207
     ]
    },
    "libcst.matchers.SemicolonMatchType": {
     "line number": [
      7210,
      7212,
      7213
     ]
    },
    "libcst.matchers.SimpleWhitespaceMatchType": {
     "line number": [
      7216,
      7218,
      7219,
      7222,
      7224,
      7225,
      7228,
      7230,
      7231
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      6835,
      6844,
      6850,
      6858,
      6871,
      6876,
      6883,
      6891,
      6897,
      6902,
      6909,
      6927,
      6941,
      6946,
      6953,
      6965,
      6970,
      6977,
      6985,
      6991,
      6996,
      7003,
      7021,
      7029,
      7036,
      7041,
      7048,
      7060,
      7065,
      7072,
      7080,
      7086,
      7091,
      7098,
      7116,
      7131,
      7137,
      7145,
      7158,
      7161,
      7166,
      7174,
      7180,
      7183,
      7188,
      7201,
      7207,
      7213,
      7219,
      7225,
      7231,
      7237
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      6845,
      6872,
      6898,
      6942,
      6966,
      6992,
      7037,
      7061,
      7087,
      7132,
      7159,
      7181
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      6853,
      6879,
      6905,
      6949,
      6973,
      6999,
      7044,
      7068,
      7094,
      7140,
      7164,
      7186
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      6830
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      6836,
      7124,
      7196,
      7202,
      7208,
      7214,
      7220,
      7226,
      7232,
      7238
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      6833,
      6842,
      6848,
      6856,
      6863,
      6933,
      7129,
      7135,
      7143,
      7150,
      7199,
      7205,
      7211,
      7217,
      7223,
      7229,
      7235
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      6864,
      6888,
      6914,
      6920,
      6958,
      6982,
      7008,
      7014,
      7053,
      7077,
      7103,
      7109,
      7151,
      7171,
      7193
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      6834,
      6843,
      6849,
      6857,
      6865,
      6870,
      6875,
      6882,
      6896,
      6901,
      6908,
      6926,
      6934,
      6940,
      6945,
      6952,
      6959,
      6964,
      6969,
      6976,
      6990,
      6995,
      7002,
      7020,
      7035,
      7040,
      7047,
      7054,
      7059,
      7064,
      7071,
      7085,
      7090,
      7097,
      7115,
      7130,
      7136,
      7144,
      7152,
      7157,
      7161,
      7166,
      7179,
      7183,
      7188,
      7200,
      7206,
      7212,
      7218,
      7224,
      7230,
      7236
     ]
    },
    "typing.Callable": {
     "line number": [
      6864,
      6888,
      6914,
      6921,
      6958,
      6982,
      7008,
      7015,
      7053,
      7077,
      7103,
      7110,
      7151,
      7171,
      7193
     ]
    },
    "typing.Sequence": {
     "line number": [
      6839,
      6864,
      6867,
      6888,
      6893,
      6914,
      6924,
      6926,
      6927,
      6937,
      6958,
      6961,
      6982,
      6987,
      7008,
      7018,
      7020,
      7021,
      7032,
      7053,
      7056,
      7077,
      7082,
      7103,
      7113,
      7115,
      7116,
      7126,
      7151,
      7154,
      7171,
      7176,
      7193
     ]
    },
    "typing.Union": {
     "line number": [
      6831,
      6837,
      6838,
      6840,
      6846,
      6854,
      6866,
      6868,
      6873,
      6880,
      6892,
      6894,
      6899,
      6906,
      6923,
      6926,
      6927,
      6935,
      6936,
      6938,
      6943,
      6950,
      6960,
      6962,
      6967,
      6974,
      6986,
      6988,
      6993,
      7000,
      7017,
      7020,
      7021,
      7030,
      7031,
      7033,
      7038,
      7045,
      7055,
      7057,
      7062,
      7069,
      7081,
      7083,
      7088,
      7095,
      7112,
      7115,
      7116,
      7125,
      7127,
      7133,
      7141,
      7153,
      7155,
      7160,
      7165,
      7175,
      7177,
      7182,
      7187,
      7197,
      7203,
      7209,
      7215,
      7221,
      7227,
      7233
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.ImportStar": {
  "data": {
   "lineno": 7241,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      7241
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      7244,
      7246,
      7247
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      7247
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      7242
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      7248
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      7245
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      7246
     ]
    },
    "typing.Union": {
     "line number": [
      7243
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.In": {
  "data": {
   "lineno": 7251,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      7251
     ]
    },
    "libcst.matchers.BaseCompOp": {
     "line number": [
      7252
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      7254,
      7256,
      7257,
      7260,
      7262,
      7263
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      7266,
      7268,
      7269
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      7257,
      7263,
      7269
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      7252
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      7258,
      7264,
      7270
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      7255,
      7261,
      7267
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      7256,
      7262,
      7268
     ]
    },
    "typing.Union": {
     "line number": [
      7253,
      7259,
      7265
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.IndentedBlock": {
  "data": {
   "lineno": 7278,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      7306,
      7330,
      7356,
      7398,
      7422,
      7448
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      7278
     ]
    },
    "libcst.BaseStatement": {
     "line number": [
      7306,
      7330,
      7356
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      7398,
      7422,
      7448
     ]
    },
    "libcst.matchers.BaseStatementMatchType": {
     "line number": [
      7283,
      7285,
      7286,
      7289,
      7291,
      7292,
      7297,
      7299,
      7300,
      7311,
      7312,
      7313,
      7316,
      7317,
      7318,
      7323,
      7324,
      7325,
      7337,
      7338,
      7339,
      7342,
      7343,
      7344,
      7349,
      7350,
      7351
     ]
    },
    "libcst.matchers.BaseSuite": {
     "line number": [
      7279
     ]
    },
    "libcst.matchers.EmptyLineMatchType": {
     "line number": [
      7375,
      7377,
      7378,
      7381,
      7383,
      7384,
      7389,
      7391,
      7392,
      7403,
      7404,
      7405,
      7408,
      7409,
      7410,
      7415,
      7416,
      7417,
      7429,
      7430,
      7431,
      7434,
      7435,
      7436,
      7441,
      7442,
      7443
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      7453,
      7455,
      7456
     ]
    },
    "libcst.matchers.TrailingWhitespaceMatchType": {
     "line number": [
      7361,
      7363,
      7364
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      7286,
      7292,
      7300,
      7313,
      7318,
      7325,
      7333,
      7339,
      7344,
      7351,
      7364,
      7370,
      7378,
      7384,
      7392,
      7405,
      7410,
      7417,
      7425,
      7431,
      7436,
      7443,
      7456
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      7287,
      7314,
      7340,
      7379,
      7406,
      7432
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      7295,
      7321,
      7347,
      7387,
      7413,
      7439
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      7279
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      7359,
      7365,
      7371,
      7451,
      7457
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      7284,
      7290,
      7298,
      7305,
      7362,
      7368,
      7376,
      7382,
      7390,
      7397,
      7454
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      7306,
      7330,
      7356,
      7398,
      7422,
      7448
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      7285,
      7291,
      7299,
      7307,
      7312,
      7317,
      7324,
      7338,
      7343,
      7350,
      7363,
      7369,
      7377,
      7383,
      7391,
      7399,
      7404,
      7409,
      7416,
      7430,
      7435,
      7442,
      7455
     ]
    },
    "libcst.matchers.strOrNoneMatchType": {
     "line number": [
      7367,
      7369,
      7370
     ]
    },
    "typing.Callable": {
     "line number": [
      7306,
      7330,
      7356,
      7398,
      7422,
      7448
     ]
    },
    "typing.Sequence": {
     "line number": [
      7281,
      7306,
      7309,
      7330,
      7335,
      7356,
      7373,
      7398,
      7401,
      7422,
      7427,
      7448
     ]
    },
    "typing.Union": {
     "line number": [
      7280,
      7282,
      7288,
      7296,
      7308,
      7310,
      7315,
      7322,
      7334,
      7336,
      7341,
      7348,
      7360,
      7366,
      7372,
      7374,
      7380,
      7388,
      7400,
      7402,
      7407,
      7414,
      7426,
      7428,
      7433,
      7440,
      7452
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Index": {
  "data": {
   "lineno": 7460,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      7460
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      7463,
      7465,
      7466
     ]
    },
    "libcst.matchers.BaseSlice": {
     "line number": [
      7461
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      7469,
      7471,
      7472
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      7466,
      7472
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      7461
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      7467,
      7473
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      7464,
      7470
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      7465,
      7471
     ]
    },
    "typing.Union": {
     "line number": [
      7462,
      7468
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Integer": {
  "data": {
   "lineno": 7476,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      7507,
      7531,
      7557,
      7587,
      7611,
      7637
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      7476
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      7507,
      7531,
      7557
     ]
    },
    "libcst.RightParen": {
     "line number": [
      7587,
      7611,
      7637
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      7477
     ]
    },
    "libcst.matchers.BaseNumber": {
     "line number": [
      7477
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      7484,
      7486,
      7487,
      7490,
      7492,
      7493,
      7498,
      7500,
      7501,
      7512,
      7513,
      7514,
      7517,
      7518,
      7519,
      7524,
      7525,
      7526,
      7538,
      7539,
      7540,
      7543,
      7544,
      7545,
      7550,
      7551,
      7552
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      7642,
      7644,
      7645
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      7564,
      7566,
      7567,
      7570,
      7572,
      7573,
      7578,
      7580,
      7581,
      7592,
      7593,
      7594,
      7597,
      7598,
      7599,
      7604,
      7605,
      7606,
      7618,
      7619,
      7620,
      7623,
      7624,
      7625,
      7630,
      7631,
      7632
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      7479,
      7487,
      7493,
      7501,
      7514,
      7519,
      7526,
      7534,
      7540,
      7545,
      7552,
      7567,
      7573,
      7581,
      7594,
      7599,
      7606,
      7614,
      7620,
      7625,
      7632,
      7645
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      7488,
      7515,
      7541,
      7568,
      7595,
      7621
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      7496,
      7522,
      7548,
      7576,
      7602,
      7628
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      7477
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      7480,
      7560,
      7640,
      7646
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      7479,
      7485,
      7491,
      7499,
      7506,
      7565,
      7571,
      7579,
      7586,
      7643
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      7507,
      7531,
      7557,
      7587,
      7611,
      7637
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      7479,
      7486,
      7492,
      7500,
      7508,
      7513,
      7518,
      7525,
      7539,
      7544,
      7551,
      7566,
      7572,
      7580,
      7588,
      7593,
      7598,
      7605,
      7619,
      7624,
      7631,
      7644
     ]
    },
    "libcst.matchers.strMatchType": {
     "line number": [
      7479,
      7479,
      7479
     ]
    },
    "typing.Callable": {
     "line number": [
      7507,
      7531,
      7557,
      7587,
      7611,
      7637
     ]
    },
    "typing.Sequence": {
     "line number": [
      7482,
      7507,
      7510,
      7531,
      7536,
      7557,
      7562,
      7587,
      7590,
      7611,
      7616,
      7637
     ]
    },
    "typing.Union": {
     "line number": [
      7478,
      7481,
      7483,
      7489,
      7497,
      7509,
      7511,
      7516,
      7523,
      7535,
      7537,
      7542,
      7549,
      7561,
      7563,
      7569,
      7577,
      7589,
      7591,
      7596,
      7603,
      7615,
      7617,
      7622,
      7629,
      7641
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Is": {
  "data": {
   "lineno": 7649,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      7649
     ]
    },
    "libcst.matchers.BaseCompOp": {
     "line number": [
      7650
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      7652,
      7654,
      7655,
      7658,
      7660,
      7661
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      7664,
      7666,
      7667
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      7655,
      7661,
      7667
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      7650
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      7656,
      7662,
      7668
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      7653,
      7659,
      7665
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      7654,
      7660,
      7666
     ]
    },
    "typing.Union": {
     "line number": [
      7651,
      7657,
      7663
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.IsNot": {
  "data": {
   "lineno": 7671,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      7671
     ]
    },
    "libcst.matchers.BaseCompOp": {
     "line number": [
      7672
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      7674,
      7676,
      7677,
      7680,
      7682,
      7683,
      7686,
      7688,
      7689
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      7692,
      7694,
      7695
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      7677,
      7683,
      7689,
      7695
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      7672
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      7678,
      7684,
      7690,
      7696
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      7675,
      7681,
      7687,
      7693
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      7676,
      7682,
      7688,
      7694
     ]
    },
    "typing.Union": {
     "line number": [
      7673,
      7679,
      7685,
      7691
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Lambda": {
  "data": {
   "lineno": 7704,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      7747,
      7771,
      7797,
      7827,
      7851,
      7877
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      7704
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      7747,
      7771,
      7797
     ]
    },
    "libcst.RightParen": {
     "line number": [
      7827,
      7851,
      7877
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      7705
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      7713,
      7715,
      7716
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      7882,
      7884,
      7885
     ]
    },
    "libcst.matchers.ColonMatchType": {
     "line number": [
      7719,
      7719,
      7719
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      7724,
      7726,
      7727,
      7730,
      7732,
      7733,
      7738,
      7740,
      7741,
      7752,
      7753,
      7754,
      7757,
      7758,
      7759,
      7764,
      7765,
      7766,
      7778,
      7779,
      7780,
      7783,
      7784,
      7785,
      7790,
      7791,
      7792
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      7888,
      7890,
      7891
     ]
    },
    "libcst.matchers.ParametersMatchType": {
     "line number": [
      7707,
      7709,
      7710
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      7804,
      7806,
      7807,
      7810,
      7812,
      7813,
      7818,
      7820,
      7821,
      7832,
      7833,
      7834,
      7837,
      7838,
      7839,
      7844,
      7845,
      7846,
      7858,
      7859,
      7860,
      7863,
      7864,
      7865,
      7870,
      7871,
      7872
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      7710,
      7716,
      7719,
      7727,
      7733,
      7741,
      7754,
      7759,
      7766,
      7774,
      7780,
      7785,
      7792,
      7807,
      7813,
      7821,
      7834,
      7839,
      7846,
      7854,
      7860,
      7865,
      7872,
      7885,
      7891
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      7728,
      7755,
      7781,
      7808,
      7835,
      7861
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      7736,
      7762,
      7788,
      7816,
      7842,
      7868
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      7705
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      7711,
      7717,
      7720,
      7800,
      7880,
      7886,
      7892
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      7708,
      7714,
      7719,
      7725,
      7731,
      7739,
      7746,
      7805,
      7811,
      7819,
      7826,
      7883,
      7889
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      7747,
      7771,
      7797,
      7827,
      7851,
      7877
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      7709,
      7715,
      7719,
      7726,
      7732,
      7740,
      7748,
      7753,
      7758,
      7765,
      7779,
      7784,
      7791,
      7806,
      7812,
      7820,
      7828,
      7833,
      7838,
      7845,
      7859,
      7864,
      7871,
      7884,
      7890
     ]
    },
    "typing.Callable": {
     "line number": [
      7747,
      7771,
      7797,
      7827,
      7851,
      7877
     ]
    },
    "typing.Sequence": {
     "line number": [
      7722,
      7747,
      7750,
      7771,
      7776,
      7797,
      7802,
      7827,
      7830,
      7851,
      7856,
      7877
     ]
    },
    "typing.Union": {
     "line number": [
      7706,
      7712,
      7718,
      7721,
      7723,
      7729,
      7737,
      7749,
      7751,
      7756,
      7763,
      7775,
      7777,
      7782,
      7789,
      7801,
      7803,
      7809,
      7817,
      7829,
      7831,
      7836,
      7843,
      7855,
      7857,
      7862,
      7869,
      7881,
      7887
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.LeftCurlyBrace": {
  "data": {
   "lineno": 7895,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      7895
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      7898,
      7900,
      7901
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      7904,
      7906,
      7907
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      7901,
      7907
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      7896
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      7902,
      7908
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      7899,
      7905
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      7900,
      7906
     ]
    },
    "typing.Union": {
     "line number": [
      7897,
      7903
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.LeftCurlyBraceMatchType": {
  "data": {
   "lineno": 3238
  },
  "type": "constant"
 },
 "libcst.matchers.LeftParen": {
  "data": {
   "lineno": 7911,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      7911
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      7914,
      7916,
      7917
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      7920,
      7922,
      7923
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      7917,
      7923
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      7912
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      7918,
      7924
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      7915,
      7921
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      7916,
      7922
     ]
    },
    "typing.Union": {
     "line number": [
      7913,
      7919
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.LeftParenMatchType": {
  "data": {
   "lineno": 650
  },
  "type": "constant"
 },
 "libcst.matchers.LeftParenOrNoneMatchType": {
  "data": {
   "lineno": 6815
  },
  "type": "constant"
 },
 "libcst.matchers.LeftShift": {
  "data": {
   "lineno": 7927,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      7927
     ]
    },
    "libcst.matchers.BaseBinaryOp": {
     "line number": [
      7928
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      7930,
      7932,
      7933,
      7936,
      7938,
      7939
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      7942,
      7944,
      7945
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      7933,
      7939,
      7945
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      7928
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      7934,
      7940,
      7946
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      7931,
      7937,
      7943
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      7932,
      7938,
      7944
     ]
    },
    "typing.Union": {
     "line number": [
      7929,
      7935,
      7941
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.LeftShiftAssign": {
  "data": {
   "lineno": 7949,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      7949
     ]
    },
    "libcst.matchers.BaseAugOp": {
     "line number": [
      7950
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      7952,
      7954,
      7955,
      7958,
      7960,
      7961
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      7964,
      7966,
      7967
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      7955,
      7961,
      7967
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      7950
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      7956,
      7962,
      7968
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      7953,
      7959,
      7965
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      7954,
      7960,
      7966
     ]
    },
    "typing.Union": {
     "line number": [
      7951,
      7957,
      7963
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.LeftSquareBracket": {
  "data": {
   "lineno": 7971,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      7971
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      7974,
      7976,
      7977
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      7980,
      7982,
      7983
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      7977,
      7983
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      7972
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      7978,
      7984
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      7975,
      7981
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      7976,
      7982
     ]
    },
    "typing.Union": {
     "line number": [
      7973,
      7979
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.LeftSquareBracketMatchType": {
  "data": {
   "lineno": 8034
  },
  "type": "constant"
 },
 "libcst.matchers.LessThan": {
  "data": {
   "lineno": 7987,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      7987
     ]
    },
    "libcst.matchers.BaseCompOp": {
     "line number": [
      7988
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      7990,
      7992,
      7993,
      7996,
      7998,
      7999
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      8002,
      8004,
      8005
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      7993,
      7999,
      8005
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      7988
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      7994,
      8000,
      8006
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      7991,
      7997,
      8003
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      7992,
      7998,
      8004
     ]
    },
    "typing.Union": {
     "line number": [
      7989,
      7995,
      8001
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.LessThanEqual": {
  "data": {
   "lineno": 8009,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      8009
     ]
    },
    "libcst.matchers.BaseCompOp": {
     "line number": [
      8010
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      8012,
      8014,
      8015,
      8018,
      8020,
      8021
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      8024,
      8026,
      8027
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      8015,
      8021,
      8027
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      8010
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      8016,
      8022,
      8028
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      8013,
      8019,
      8025
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      8014,
      8020,
      8026
     ]
    },
    "typing.Union": {
     "line number": [
      8011,
      8017,
      8023
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.List": {
  "data": {
   "lineno": 8046,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      8080,
      8104,
      8130,
      8172,
      8196,
      8222,
      8252,
      8276,
      8302
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      8046
     ]
    },
    "libcst.BaseElement": {
     "line number": [
      8080,
      8104,
      8130
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      8172,
      8196,
      8222
     ]
    },
    "libcst.RightParen": {
     "line number": [
      8252,
      8276,
      8302
     ]
    },
    "libcst.matchers.BaseAssignTargetExpression": {
     "line number": [
      8048
     ]
    },
    "libcst.matchers.BaseDelTargetExpression": {
     "line number": [
      8049
     ]
    },
    "libcst.matchers.BaseElementMatchType": {
     "line number": [
      8057,
      8059,
      8060,
      8063,
      8065,
      8066,
      8071,
      8073,
      8074,
      8085,
      8086,
      8087,
      8090,
      8091,
      8092,
      8097,
      8098,
      8099,
      8111,
      8112,
      8113,
      8116,
      8117,
      8118,
      8123,
      8124,
      8125
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      8050
     ]
    },
    "libcst.matchers.BaseList": {
     "line number": [
      8051
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      8149,
      8151,
      8152,
      8155,
      8157,
      8158,
      8163,
      8165,
      8166,
      8177,
      8178,
      8179,
      8182,
      8183,
      8184,
      8189,
      8190,
      8191,
      8203,
      8204,
      8205,
      8208,
      8209,
      8210,
      8215,
      8216,
      8217
     ]
    },
    "libcst.matchers.LeftSquareBracketMatchType": {
     "line number": [
      8135,
      8137,
      8138
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      8307,
      8309,
      8310
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      8229,
      8231,
      8232,
      8235,
      8237,
      8238,
      8243,
      8245,
      8246,
      8257,
      8258,
      8259,
      8262,
      8263,
      8264,
      8269,
      8270,
      8271,
      8283,
      8284,
      8285,
      8288,
      8289,
      8290,
      8295,
      8296,
      8297
     ]
    },
    "libcst.matchers.RightSquareBracketMatchType": {
     "line number": [
      8141,
      8143,
      8144
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      8060,
      8066,
      8074,
      8087,
      8092,
      8099,
      8107,
      8113,
      8118,
      8125,
      8138,
      8144,
      8152,
      8158,
      8166,
      8179,
      8184,
      8191,
      8199,
      8205,
      8210,
      8217,
      8232,
      8238,
      8246,
      8259,
      8264,
      8271,
      8279,
      8285,
      8290,
      8297,
      8310
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      8061,
      8088,
      8114,
      8153,
      8180,
      8206,
      8233,
      8260,
      8286
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      8069,
      8095,
      8121,
      8161,
      8187,
      8213,
      8241,
      8267,
      8293
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      8052
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      8133,
      8139,
      8145,
      8225,
      8305,
      8311
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      8058,
      8064,
      8072,
      8079,
      8136,
      8142,
      8150,
      8156,
      8164,
      8171,
      8230,
      8236,
      8244,
      8251,
      8308
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      8080,
      8104,
      8130,
      8172,
      8196,
      8222,
      8252,
      8276,
      8302
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      8059,
      8065,
      8073,
      8081,
      8086,
      8091,
      8098,
      8112,
      8117,
      8124,
      8137,
      8143,
      8151,
      8157,
      8165,
      8173,
      8178,
      8183,
      8190,
      8204,
      8209,
      8216,
      8231,
      8237,
      8245,
      8253,
      8258,
      8263,
      8270,
      8284,
      8289,
      8296,
      8309
     ]
    },
    "typing.Callable": {
     "line number": [
      8080,
      8104,
      8130,
      8172,
      8196,
      8222,
      8252,
      8276,
      8302
     ]
    },
    "typing.Sequence": {
     "line number": [
      8055,
      8080,
      8083,
      8104,
      8109,
      8130,
      8147,
      8172,
      8175,
      8196,
      8201,
      8222,
      8227,
      8252,
      8255,
      8276,
      8281,
      8302
     ]
    },
    "typing.Union": {
     "line number": [
      8054,
      8056,
      8062,
      8070,
      8082,
      8084,
      8089,
      8096,
      8108,
      8110,
      8115,
      8122,
      8134,
      8140,
      8146,
      8148,
      8154,
      8162,
      8174,
      8176,
      8181,
      8188,
      8200,
      8202,
      8207,
      8214,
      8226,
      8228,
      8234,
      8242,
      8254,
      8256,
      8261,
      8268,
      8280,
      8282,
      8287,
      8294,
      8306
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.ListComp": {
  "data": {
   "lineno": 8314,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      8366,
      8390,
      8416,
      8446,
      8470,
      8496
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      8314
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      8366,
      8390,
      8416
     ]
    },
    "libcst.RightParen": {
     "line number": [
      8446,
      8470,
      8496
     ]
    },
    "libcst.matchers.BaseAssignTargetExpressionMatchType": {
     "line number": [
      8317,
      8319,
      8320
     ]
    },
    "libcst.matchers.BaseComp": {
     "line number": [
      8315
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      8315
     ]
    },
    "libcst.matchers.BaseList": {
     "line number": [
      8315
     ]
    },
    "libcst.matchers.BaseSimpleComp": {
     "line number": [
      8315
     ]
    },
    "libcst.matchers.CompForMatchType": {
     "line number": [
      8323,
      8325,
      8326
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      8343,
      8345,
      8346,
      8349,
      8351,
      8352,
      8357,
      8359,
      8360,
      8371,
      8372,
      8373,
      8376,
      8377,
      8378,
      8383,
      8384,
      8385,
      8397,
      8398,
      8399,
      8402,
      8403,
      8404,
      8409,
      8410,
      8411
     ]
    },
    "libcst.matchers.LeftSquareBracketMatchType": {
     "line number": [
      8329,
      8331,
      8332
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      8501,
      8503,
      8504
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      8423,
      8425,
      8426,
      8429,
      8431,
      8432,
      8437,
      8439,
      8440,
      8451,
      8452,
      8453,
      8456,
      8457,
      8458,
      8463,
      8464,
      8465,
      8477,
      8478,
      8479,
      8482,
      8483,
      8484,
      8489,
      8490,
      8491
     ]
    },
    "libcst.matchers.RightSquareBracketMatchType": {
     "line number": [
      8335,
      8337,
      8338
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      8320,
      8326,
      8332,
      8338,
      8346,
      8352,
      8360,
      8373,
      8378,
      8385,
      8393,
      8399,
      8404,
      8411,
      8426,
      8432,
      8440,
      8453,
      8458,
      8465,
      8473,
      8479,
      8484,
      8491,
      8504
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      8347,
      8374,
      8400,
      8427,
      8454,
      8480
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      8355,
      8381,
      8407,
      8435,
      8461,
      8487
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      8315
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      8321,
      8327,
      8333,
      8339,
      8419,
      8499,
      8505
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      8318,
      8324,
      8330,
      8336,
      8344,
      8350,
      8358,
      8365,
      8424,
      8430,
      8438,
      8445,
      8502
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      8366,
      8390,
      8416,
      8446,
      8470,
      8496
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      8319,
      8325,
      8331,
      8337,
      8345,
      8351,
      8359,
      8367,
      8372,
      8377,
      8384,
      8398,
      8403,
      8410,
      8425,
      8431,
      8439,
      8447,
      8452,
      8457,
      8464,
      8478,
      8483,
      8490,
      8503
     ]
    },
    "typing.Callable": {
     "line number": [
      8366,
      8390,
      8416,
      8446,
      8470,
      8496
     ]
    },
    "typing.Sequence": {
     "line number": [
      8341,
      8366,
      8369,
      8390,
      8395,
      8416,
      8421,
      8446,
      8449,
      8470,
      8475,
      8496
     ]
    },
    "typing.Union": {
     "line number": [
      8316,
      8322,
      8328,
      8334,
      8340,
      8342,
      8348,
      8356,
      8368,
      8370,
      8375,
      8382,
      8394,
      8396,
      8401,
      8408,
      8420,
      8422,
      8428,
      8436,
      8448,
      8450,
      8455,
      8462,
      8474,
      8476,
      8481,
      8488,
      8500
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Literal": {
  "data": {
   "shadows": "typing_extensions.Literal"
  },
  "type": "import"
 },
 "libcst.matchers.MatchDecoratorMismatch": {
  "data": {
   "shadows": "libcst.matchers._visitors.MatchDecoratorMismatch"
  },
  "type": "import"
 },
 "libcst.matchers.MatchIfTrue": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.MatchIfTrue"
  },
  "type": "import"
 },
 "libcst.matchers.MatchMetadata": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.MatchMetadata"
  },
  "type": "import"
 },
 "libcst.matchers.MatchMetadataIfTrue": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.MatchMetadataIfTrue"
  },
  "type": "import"
 },
 "libcst.matchers.MatchRegex": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.MatchRegex"
  },
  "type": "import"
 },
 "libcst.matchers.MatcherDecoratableTransformer": {
  "data": {
   "shadows": "libcst.matchers._visitors.MatcherDecoratableTransformer"
  },
  "type": "import"
 },
 "libcst.matchers.MatcherDecoratableVisitor": {
  "data": {
   "shadows": "libcst.matchers._visitors.MatcherDecoratableVisitor"
  },
  "type": "import"
 },
 "libcst.matchers.MatrixMultiply": {
  "data": {
   "lineno": 8508,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      8508
     ]
    },
    "libcst.matchers.BaseBinaryOp": {
     "line number": [
      8509
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      8511,
      8513,
      8514,
      8517,
      8519,
      8520
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      8523,
      8525,
      8526
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      8514,
      8520,
      8526
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      8509
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      8515,
      8521,
      8527
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      8512,
      8518,
      8524
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      8513,
      8519,
      8525
     ]
    },
    "typing.Union": {
     "line number": [
      8510,
      8516,
      8522
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.MatrixMultiplyAssign": {
  "data": {
   "lineno": 8530,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      8530
     ]
    },
    "libcst.matchers.BaseAugOp": {
     "line number": [
      8531
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      8533,
      8535,
      8536,
      8539,
      8541,
      8542
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      8545,
      8547,
      8548
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      8536,
      8542,
      8548
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      8531
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      8537,
      8543,
      8549
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      8534,
      8540,
      8546
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      8535,
      8541,
      8547
     ]
    },
    "typing.Union": {
     "line number": [
      8532,
      8538,
      8544
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.MetadataMatchType": {
  "data": {
   "lineno": 145
  },
  "type": "constant"
 },
 "libcst.matchers.Minus": {
  "data": {
   "lineno": 8552,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      8552
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      8555,
      8557,
      8558
     ]
    },
    "libcst.matchers.BaseUnaryOp": {
     "line number": [
      8553
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      8561,
      8563,
      8564
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      8558,
      8564
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      8553
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      8559,
      8565
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      8556,
      8562
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      8557,
      8563
     ]
    },
    "typing.Union": {
     "line number": [
      8554,
      8560
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Module": {
  "data": {
   "lineno": 8578,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      8626,
      8682,
      8740,
      8772,
      8796,
      8822,
      8852,
      8876,
      8902
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      8578
     ]
    },
    "libcst.BaseCompoundStatement": {
     "line number": [
      8612,
      8615,
      8620,
      8666,
      8670,
      8676,
      8724,
      8728,
      8734
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      8772,
      8796,
      8822,
      8852,
      8876,
      8902
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      8611,
      8615,
      8620,
      8665,
      8669,
      8675,
      8723,
      8727,
      8733
     ]
    },
    "libcst.matchers.EmptyLineMatchType": {
     "line number": [
      8749,
      8751,
      8752,
      8755,
      8757,
      8758,
      8763,
      8765,
      8766,
      8777,
      8778,
      8779,
      8782,
      8783,
      8784,
      8789,
      8790,
      8791,
      8803,
      8804,
      8805,
      8808,
      8809,
      8810,
      8815,
      8816,
      8817,
      8829,
      8831,
      8832,
      8835,
      8837,
      8838,
      8843,
      8845,
      8846,
      8857,
      8858,
      8859,
      8862,
      8863,
      8864,
      8869,
      8870,
      8871,
      8883,
      8884,
      8885,
      8888,
      8889,
      8890,
      8895,
      8896,
      8897
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      8919,
      8921,
      8922
     ]
    },
    "libcst.matchers.SimpleStatementLineOrBaseCompoundStatementMatchType": {
     "line number": [
      8583,
      8585,
      8586,
      8589,
      8591,
      8592,
      8597,
      8599,
      8600,
      8633,
      8634,
      8635,
      8638,
      8640,
      8643,
      8649,
      8651,
      8654,
      8691,
      8692,
      8693,
      8696,
      8698,
      8701,
      8707,
      8709,
      8712
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      8586,
      8592,
      8600,
      8618,
      8635,
      8642,
      8653,
      8673,
      8687,
      8693,
      8700,
      8711,
      8731,
      8752,
      8758,
      8766,
      8779,
      8784,
      8791,
      8799,
      8805,
      8810,
      8817,
      8832,
      8838,
      8846,
      8859,
      8864,
      8871,
      8879,
      8885,
      8890,
      8897,
      8907,
      8910,
      8913,
      8916,
      8922
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      8587,
      8636,
      8694,
      8753,
      8780,
      8806,
      8833,
      8860,
      8886
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      8595,
      8647,
      8705,
      8761,
      8787,
      8813,
      8841,
      8867,
      8893
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      8579
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      8745,
      8825,
      8905,
      8908,
      8911,
      8914,
      8917,
      8923
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      8584,
      8590,
      8598,
      8605,
      8750,
      8756,
      8764,
      8771,
      8830,
      8836,
      8844,
      8851,
      8907,
      8910,
      8913,
      8916,
      8920
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      8606,
      8660,
      8718,
      8772,
      8796,
      8822,
      8852,
      8876,
      8902
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      8585,
      8591,
      8599,
      8613,
      8629,
      8634,
      8639,
      8650,
      8667,
      8692,
      8697,
      8708,
      8725,
      8751,
      8757,
      8765,
      8773,
      8778,
      8783,
      8790,
      8804,
      8809,
      8816,
      8831,
      8837,
      8845,
      8853,
      8858,
      8863,
      8870,
      8884,
      8889,
      8896,
      8907,
      8910,
      8913,
      8916,
      8921
     ]
    },
    "libcst.matchers.boolMatchType": {
     "line number": [
      8916,
      8916,
      8916
     ]
    },
    "libcst.matchers.strMatchType": {
     "line number": [
      8907,
      8907,
      8907,
      8910,
      8910,
      8910,
      8913,
      8913,
      8913
     ]
    },
    "typing.Callable": {
     "line number": [
      8607,
      8661,
      8719,
      8772,
      8796,
      8822,
      8852,
      8876,
      8902
     ]
    },
    "typing.Sequence": {
     "line number": [
      8581,
      8609,
      8631,
      8663,
      8689,
      8721,
      8747,
      8772,
      8775,
      8796,
      8801,
      8822,
      8827,
      8852,
      8855,
      8876,
      8881,
      8902
     ]
    },
    "typing.Union": {
     "line number": [
      8580,
      8582,
      8588,
      8596,
      8610,
      8614,
      8619,
      8630,
      8632,
      8637,
      8648,
      8664,
      8668,
      8674,
      8688,
      8690,
      8695,
      8706,
      8722,
      8726,
      8732,
      8746,
      8748,
      8754,
      8762,
      8774,
      8776,
      8781,
      8788,
      8800,
      8802,
      8807,
      8814,
      8826,
      8828,
      8834,
      8842,
      8854,
      8856,
      8861,
      8868,
      8880,
      8882,
      8887,
      8894,
      8906,
      8909,
      8912,
      8915,
      8918
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Modulo": {
  "data": {
   "lineno": 8926,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      8926
     ]
    },
    "libcst.matchers.BaseBinaryOp": {
     "line number": [
      8927
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      8929,
      8931,
      8932,
      8935,
      8937,
      8938
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      8941,
      8943,
      8944
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      8932,
      8938,
      8944
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      8927
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      8933,
      8939,
      8945
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      8930,
      8936,
      8942
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      8931,
      8937,
      8943
     ]
    },
    "typing.Union": {
     "line number": [
      8928,
      8934,
      8940
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.ModuloAssign": {
  "data": {
   "lineno": 8948,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      8948
     ]
    },
    "libcst.matchers.BaseAugOp": {
     "line number": [
      8949
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      8951,
      8953,
      8954,
      8957,
      8959,
      8960
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      8963,
      8965,
      8966
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      8954,
      8960,
      8966
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      8949
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      8955,
      8961,
      8967
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      8952,
      8958,
      8964
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      8953,
      8959,
      8965
     ]
    },
    "typing.Union": {
     "line number": [
      8950,
      8956,
      8962
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Multiply": {
  "data": {
   "lineno": 8970,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      8970
     ]
    },
    "libcst.matchers.BaseBinaryOp": {
     "line number": [
      8971
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      8973,
      8975,
      8976,
      8979,
      8981,
      8982
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      8985,
      8987,
      8988
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      8976,
      8982,
      8988
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      8971
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      8977,
      8983,
      8989
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      8974,
      8980,
      8986
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      8975,
      8981,
      8987
     ]
    },
    "typing.Union": {
     "line number": [
      8972,
      8978,
      8984
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.MultiplyAssign": {
  "data": {
   "lineno": 8992,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      8992
     ]
    },
    "libcst.matchers.BaseAugOp": {
     "line number": [
      8993
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      8995,
      8997,
      8998,
      9001,
      9003,
      9004
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      9007,
      9009,
      9010
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      8998,
      9004,
      9010
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      8993
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      8999,
      9005,
      9011
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      8996,
      9002,
      9008
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      8997,
      9003,
      9009
     ]
    },
    "typing.Union": {
     "line number": [
      8994,
      9000,
      9006
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Name": {
  "data": {
   "lineno": 9014,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      9047,
      9071,
      9097,
      9127,
      9151,
      9177
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      9014
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      9047,
      9071,
      9097
     ]
    },
    "libcst.RightParen": {
     "line number": [
      9127,
      9151,
      9177
     ]
    },
    "libcst.matchers.BaseAssignTargetExpression": {
     "line number": [
      9016
     ]
    },
    "libcst.matchers.BaseDelTargetExpression": {
     "line number": [
      9016
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      9016
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      9024,
      9026,
      9027,
      9030,
      9032,
      9033,
      9038,
      9040,
      9041,
      9052,
      9053,
      9054,
      9057,
      9058,
      9059,
      9064,
      9065,
      9066,
      9078,
      9079,
      9080,
      9083,
      9084,
      9085,
      9090,
      9091,
      9092
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      9182,
      9184,
      9185
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      9104,
      9106,
      9107,
      9110,
      9112,
      9113,
      9118,
      9120,
      9121,
      9132,
      9133,
      9134,
      9137,
      9138,
      9139,
      9144,
      9145,
      9146,
      9158,
      9159,
      9160,
      9163,
      9164,
      9165,
      9170,
      9171,
      9172
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      9019,
      9027,
      9033,
      9041,
      9054,
      9059,
      9066,
      9074,
      9080,
      9085,
      9092,
      9107,
      9113,
      9121,
      9134,
      9139,
      9146,
      9154,
      9160,
      9165,
      9172,
      9185
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      9028,
      9055,
      9081,
      9108,
      9135,
      9161
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      9036,
      9062,
      9088,
      9116,
      9142,
      9168
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      9016
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      9020,
      9100,
      9180,
      9186
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      9019,
      9025,
      9031,
      9039,
      9046,
      9105,
      9111,
      9119,
      9126,
      9183
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      9047,
      9071,
      9097,
      9127,
      9151,
      9177
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      9019,
      9026,
      9032,
      9040,
      9048,
      9053,
      9058,
      9065,
      9079,
      9084,
      9091,
      9106,
      9112,
      9120,
      9128,
      9133,
      9138,
      9145,
      9159,
      9164,
      9171,
      9184
     ]
    },
    "libcst.matchers.strMatchType": {
     "line number": [
      9019,
      9019,
      9019
     ]
    },
    "typing.Callable": {
     "line number": [
      9047,
      9071,
      9097,
      9127,
      9151,
      9177
     ]
    },
    "typing.Sequence": {
     "line number": [
      9022,
      9047,
      9050,
      9071,
      9076,
      9097,
      9102,
      9127,
      9130,
      9151,
      9156,
      9177
     ]
    },
    "typing.Union": {
     "line number": [
      9018,
      9021,
      9023,
      9029,
      9037,
      9049,
      9051,
      9056,
      9063,
      9075,
      9077,
      9082,
      9089,
      9101,
      9103,
      9109,
      9117,
      9129,
      9131,
      9136,
      9143,
      9155,
      9157,
      9162,
      9169,
      9181
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.NameItem": {
  "data": {
   "lineno": 9189,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      9189
     ]
    },
    "libcst.matchers.CommaMatchType": {
     "line number": [
      9195,
      9195,
      9195
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      9198,
      9200,
      9201
     ]
    },
    "libcst.matchers.NameMatchType": {
     "line number": [
      9192,
      9192,
      9192
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      9192,
      9195,
      9201
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      9190
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      9193,
      9196,
      9202
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      9192,
      9195,
      9199
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      9192,
      9195,
      9200
     ]
    },
    "typing.Union": {
     "line number": [
      9191,
      9194,
      9197
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.NameItemMatchType": {
  "data": {
   "lineno": 6003
  },
  "type": "constant"
 },
 "libcst.matchers.NameMatchType": {
  "data": {
   "lineno": 646
  },
  "type": "constant"
 },
 "libcst.matchers.NameOrAttributeOrCallMatchType": {
  "data": {
   "lineno": 3076
  },
  "type": "constant"
 },
 "libcst.matchers.NameOrNoneMatchType": {
  "data": {
   "lineno": 311
  },
  "type": "constant"
 },
 "libcst.matchers.NameOrTupleOrListMatchType": {
  "data": {
   "lineno": 385
  },
  "type": "constant"
 },
 "libcst.matchers.NamedExpr": {
  "data": {
   "lineno": 9205,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      9245,
      9269,
      9295,
      9325,
      9349,
      9375
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      9205
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      9245,
      9269,
      9295
     ]
    },
    "libcst.RightParen": {
     "line number": [
      9325,
      9349,
      9375
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      9206
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      9208,
      9210,
      9211,
      9214,
      9216,
      9217
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      9380,
      9382,
      9383,
      9386,
      9388,
      9389
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      9222,
      9224,
      9225,
      9228,
      9230,
      9231,
      9236,
      9238,
      9239,
      9250,
      9251,
      9252,
      9255,
      9256,
      9257,
      9262,
      9263,
      9264,
      9276,
      9277,
      9278,
      9281,
      9282,
      9283,
      9288,
      9289,
      9290
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      9392,
      9394,
      9395
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      9302,
      9304,
      9305,
      9308,
      9310,
      9311,
      9316,
      9318,
      9319,
      9330,
      9331,
      9332,
      9335,
      9336,
      9337,
      9342,
      9343,
      9344,
      9356,
      9357,
      9358,
      9361,
      9362,
      9363,
      9368,
      9369,
      9370
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      9211,
      9217,
      9225,
      9231,
      9239,
      9252,
      9257,
      9264,
      9272,
      9278,
      9283,
      9290,
      9305,
      9311,
      9319,
      9332,
      9337,
      9344,
      9352,
      9358,
      9363,
      9370,
      9383,
      9389,
      9395
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      9226,
      9253,
      9279,
      9306,
      9333,
      9359
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      9234,
      9260,
      9286,
      9314,
      9340,
      9366
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      9206
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      9212,
      9218,
      9298,
      9378,
      9384,
      9390,
      9396
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      9209,
      9215,
      9223,
      9229,
      9237,
      9244,
      9303,
      9309,
      9317,
      9324,
      9381,
      9387,
      9393
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      9245,
      9269,
      9295,
      9325,
      9349,
      9375
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      9210,
      9216,
      9224,
      9230,
      9238,
      9246,
      9251,
      9256,
      9263,
      9277,
      9282,
      9289,
      9304,
      9310,
      9318,
      9326,
      9331,
      9336,
      9343,
      9357,
      9362,
      9369,
      9382,
      9388,
      9394
     ]
    },
    "typing.Callable": {
     "line number": [
      9245,
      9269,
      9295,
      9325,
      9349,
      9375
     ]
    },
    "typing.Sequence": {
     "line number": [
      9220,
      9245,
      9248,
      9269,
      9274,
      9295,
      9300,
      9325,
      9328,
      9349,
      9354,
      9375
     ]
    },
    "typing.Union": {
     "line number": [
      9207,
      9213,
      9219,
      9221,
      9227,
      9235,
      9247,
      9249,
      9254,
      9261,
      9273,
      9275,
      9280,
      9287,
      9299,
      9301,
      9307,
      9315,
      9327,
      9329,
      9334,
      9341,
      9353,
      9355,
      9360,
      9367,
      9379,
      9385,
      9391
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Newline": {
  "data": {
   "lineno": 9399,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      9399
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      9408,
      9410,
      9411
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      9405,
      9411
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      9400
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      9406,
      9412
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      9403,
      9409
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      9404,
      9410
     ]
    },
    "libcst.matchers.strOrNoneMatchType": {
     "line number": [
      9402,
      9404,
      9405
     ]
    },
    "typing.Union": {
     "line number": [
      9401,
      9407
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.NewlineMatchType": {
  "data": {
   "lineno": 4130
  },
  "type": "constant"
 },
 "libcst.matchers.Nonlocal": {
  "data": {
   "lineno": 9415,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      9443,
      9467,
      9493
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      9415
     ]
    },
    "libcst.NameItem": {
     "line number": [
      9443,
      9467,
      9493
     ]
    },
    "libcst.matchers.BaseSmallStatement": {
     "line number": [
      9416
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      9510,
      9512,
      9513
     ]
    },
    "libcst.matchers.NameItemMatchType": {
     "line number": [
      9420,
      9422,
      9423,
      9426,
      9428,
      9429,
      9434,
      9436,
      9437,
      9448,
      9449,
      9450,
      9453,
      9454,
      9455,
      9460,
      9461,
      9462,
      9474,
      9475,
      9476,
      9479,
      9480,
      9481,
      9486,
      9487,
      9488
     ]
    },
    "libcst.matchers.SemicolonMatchType": {
     "line number": [
      9504,
      9506,
      9507
     ]
    },
    "libcst.matchers.SimpleWhitespaceMatchType": {
     "line number": [
      9498,
      9500,
      9501
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      9423,
      9429,
      9437,
      9450,
      9455,
      9462,
      9470,
      9476,
      9481,
      9488,
      9501,
      9507,
      9513
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      9424,
      9451,
      9477
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      9432,
      9458,
      9484
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      9416
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      9496,
      9502,
      9508,
      9514
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      9421,
      9427,
      9435,
      9442,
      9499,
      9505,
      9511
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      9443,
      9467,
      9493
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      9422,
      9428,
      9436,
      9444,
      9449,
      9454,
      9461,
      9475,
      9480,
      9487,
      9500,
      9506,
      9512
     ]
    },
    "typing.Callable": {
     "line number": [
      9443,
      9467,
      9493
     ]
    },
    "typing.Sequence": {
     "line number": [
      9418,
      9443,
      9446,
      9467,
      9472,
      9493
     ]
    },
    "typing.Union": {
     "line number": [
      9417,
      9419,
      9425,
      9433,
      9445,
      9447,
      9452,
      9459,
      9471,
      9473,
      9478,
      9485,
      9497,
      9503,
      9509
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Not": {
  "data": {
   "lineno": 9517,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      9517
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      9520,
      9522,
      9523
     ]
    },
    "libcst.matchers.BaseUnaryOp": {
     "line number": [
      9518
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      9526,
      9528,
      9529
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      9523,
      9529
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      9518
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      9524,
      9530
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      9521,
      9527
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      9522,
      9528
     ]
    },
    "typing.Union": {
     "line number": [
      9519,
      9525
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.NotEqual": {
  "data": {
   "lineno": 9533,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      9533
     ]
    },
    "libcst.matchers.BaseCompOp": {
     "line number": [
      9534
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      9539,
      9541,
      9542,
      9545,
      9547,
      9548
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      9551,
      9553,
      9554
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      9536,
      9542,
      9548,
      9554
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      9534
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      9537,
      9543,
      9549,
      9555
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      9536,
      9540,
      9546,
      9552
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      9536,
      9541,
      9547,
      9553
     ]
    },
    "libcst.matchers.strMatchType": {
     "line number": [
      9536,
      9536,
      9536
     ]
    },
    "typing.Union": {
     "line number": [
      9535,
      9538,
      9544,
      9550
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.NotIn": {
  "data": {
   "lineno": 9558,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      9558
     ]
    },
    "libcst.matchers.BaseCompOp": {
     "line number": [
      9559
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      9561,
      9563,
      9564,
      9567,
      9569,
      9570,
      9573,
      9575,
      9576
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      9579,
      9581,
      9582
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      9564,
      9570,
      9576,
      9582
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      9559
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      9565,
      9571,
      9577,
      9583
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      9562,
      9568,
      9574,
      9580
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      9563,
      9569,
      9575,
      9581
     ]
    },
    "typing.Union": {
     "line number": [
      9560,
      9566,
      9572,
      9578
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.OneOf": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.OneOf"
  },
  "type": "import"
 },
 "libcst.matchers.Or": {
  "data": {
   "lineno": 9586,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      9586
     ]
    },
    "libcst.matchers.BaseBooleanOp": {
     "line number": [
      9587
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      9589,
      9591,
      9592,
      9595,
      9597,
      9598
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      9601,
      9603,
      9604
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      9592,
      9598,
      9604
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      9587
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      9593,
      9599,
      9605
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      9590,
      9596,
      9602
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      9591,
      9597,
      9603
     ]
    },
    "typing.Union": {
     "line number": [
      9588,
      9594,
      9600
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Param": {
  "data": {
   "lineno": 9608,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      9608
     ]
    },
    "libcst.matchers.AnnotationOrNoneMatchType": {
     "line number": [
      9614,
      9616,
      9617
     ]
    },
    "libcst.matchers.AssignEqualMatchType": {
     "line number": [
      9620,
      9622,
      9623
     ]
    },
    "libcst.matchers.BaseExpressionOrNoneMatchType": {
     "line number": [
      9626,
      9628,
      9629
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      9638,
      9640,
      9641,
      9644,
      9646,
      9647
     ]
    },
    "libcst.matchers.CommaMatchType": {
     "line number": [
      9632,
      9632,
      9632
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      9650,
      9652,
      9653
     ]
    },
    "libcst.matchers.NameMatchType": {
     "line number": [
      9611,
      9611,
      9611
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      9611,
      9617,
      9623,
      9629,
      9632,
      9635,
      9641,
      9647,
      9653
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      9609
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      9612,
      9618,
      9624,
      9630,
      9633,
      9636,
      9642,
      9648,
      9654
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      9611,
      9615,
      9621,
      9627,
      9632,
      9635,
      9639,
      9645,
      9651
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      9611,
      9616,
      9622,
      9628,
      9632,
      9635,
      9640,
      9646,
      9652
     ]
    },
    "libcst.matchers.strMatchType": {
     "line number": [
      9635,
      9635,
      9635
     ]
    },
    "typing.Union": {
     "line number": [
      9610,
      9613,
      9619,
      9625,
      9631,
      9634,
      9637,
      9643,
      9649
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.ParamMatchType": {
  "data": {
   "lineno": 9683
  },
  "type": "constant"
 },
 "libcst.matchers.ParamOrNoneMatchType": {
  "data": {
   "lineno": 9692
  },
  "type": "constant"
 },
 "libcst.matchers.ParamOrParamStarMatchType": {
  "data": {
   "lineno": 9686
  },
  "type": "constant"
 },
 "libcst.matchers.ParamSlash": {
  "data": {
   "lineno": 9657,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      9657
     ]
    },
    "libcst.matchers.CommaMatchType": {
     "line number": [
      9660,
      9660,
      9660
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      9663,
      9665,
      9666
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      9660,
      9666
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      9658
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      9661,
      9667
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      9660,
      9664
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      9660,
      9665
     ]
    },
    "typing.Union": {
     "line number": [
      9659,
      9662
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.ParamSlashMatchType": {
  "data": {
   "lineno": 9698
  },
  "type": "constant"
 },
 "libcst.matchers.ParamStar": {
  "data": {
   "lineno": 9670,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      9670
     ]
    },
    "libcst.matchers.CommaMatchType": {
     "line number": [
      9673,
      9673,
      9673
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      9676,
      9678,
      9679
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      9673,
      9679
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      9671
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      9674,
      9680
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      9673,
      9677
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      9673,
      9678
     ]
    },
    "typing.Union": {
     "line number": [
      9672,
      9675
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Parameters": {
  "data": {
   "lineno": 9703,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      9731,
      9755,
      9781,
      9817,
      9841,
      9867,
      9903,
      9927,
      9953
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      9703
     ]
    },
    "libcst.Param": {
     "line number": [
      9731,
      9755,
      9781,
      9817,
      9841,
      9867,
      9903,
      9927,
      9953
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      9964,
      9966,
      9967
     ]
    },
    "libcst.matchers.ParamMatchType": {
     "line number": [
      9708,
      9710,
      9711,
      9714,
      9716,
      9717,
      9722,
      9724,
      9725,
      9736,
      9737,
      9738,
      9741,
      9742,
      9743,
      9748,
      9749,
      9750,
      9762,
      9763,
      9764,
      9767,
      9768,
      9769,
      9774,
      9775,
      9776,
      9794,
      9796,
      9797,
      9800,
      9802,
      9803,
      9808,
      9810,
      9811,
      9822,
      9823,
      9824,
      9827,
      9828,
      9829,
      9834,
      9835,
      9836,
      9848,
      9849,
      9850,
      9853,
      9854,
      9855,
      9860,
      9861,
      9862,
      9880,
      9882,
      9883,
      9886,
      9888,
      9889,
      9894,
      9896,
      9897,
      9908,
      9909,
      9910,
      9913,
      9914,
      9915,
      9920,
      9921,
      9922,
      9934,
      9935,
      9936,
      9939,
      9940,
      9941,
      9946,
      9947,
      9948
     ]
    },
    "libcst.matchers.ParamOrNoneMatchType": {
     "line number": [
      9872,
      9874,
      9875
     ]
    },
    "libcst.matchers.ParamOrParamStarMatchType": {
     "line number": [
      9786,
      9788,
      9789
     ]
    },
    "libcst.matchers.ParamSlashMatchType": {
     "line number": [
      9958,
      9960,
      9961
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      9711,
      9717,
      9725,
      9738,
      9743,
      9750,
      9758,
      9764,
      9769,
      9776,
      9789,
      9797,
      9803,
      9811,
      9824,
      9829,
      9836,
      9844,
      9850,
      9855,
      9862,
      9875,
      9883,
      9889,
      9897,
      9910,
      9915,
      9922,
      9930,
      9936,
      9941,
      9948,
      9961,
      9967
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      9712,
      9739,
      9765,
      9798,
      9825,
      9851,
      9884,
      9911,
      9937
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      9720,
      9746,
      9772,
      9806,
      9832,
      9858,
      9892,
      9918,
      9944
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      9704
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      9784,
      9790,
      9870,
      9876,
      9956,
      9962,
      9968
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      9709,
      9715,
      9723,
      9730,
      9787,
      9795,
      9801,
      9809,
      9816,
      9873,
      9881,
      9887,
      9895,
      9902,
      9959,
      9965
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      9731,
      9755,
      9781,
      9817,
      9841,
      9867,
      9903,
      9927,
      9953
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      9710,
      9716,
      9724,
      9732,
      9737,
      9742,
      9749,
      9763,
      9768,
      9775,
      9788,
      9796,
      9802,
      9810,
      9818,
      9823,
      9828,
      9835,
      9849,
      9854,
      9861,
      9874,
      9882,
      9888,
      9896,
      9904,
      9909,
      9914,
      9921,
      9935,
      9940,
      9947,
      9960,
      9966
     ]
    },
    "typing.Callable": {
     "line number": [
      9731,
      9755,
      9781,
      9817,
      9841,
      9867,
      9903,
      9927,
      9953
     ]
    },
    "typing.Sequence": {
     "line number": [
      9706,
      9731,
      9734,
      9755,
      9760,
      9781,
      9792,
      9817,
      9820,
      9841,
      9846,
      9867,
      9878,
      9903,
      9906,
      9927,
      9932,
      9953
     ]
    },
    "typing.Union": {
     "line number": [
      9705,
      9707,
      9713,
      9721,
      9733,
      9735,
      9740,
      9747,
      9759,
      9761,
      9766,
      9773,
      9785,
      9791,
      9793,
      9799,
      9807,
      9819,
      9821,
      9826,
      9833,
      9845,
      9847,
      9852,
      9859,
      9871,
      9877,
      9879,
      9885,
      9893,
      9905,
      9907,
      9912,
      9919,
      9931,
      9933,
      9938,
      9945,
      9957,
      9963
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.ParametersMatchType": {
  "data": {
   "lineno": 5509
  },
  "type": "constant"
 },
 "libcst.matchers.ParenthesizedWhitespace": {
  "data": {
   "lineno": 9971,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      10005,
      10029,
      10055
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      9971
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      10005,
      10029,
      10055
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespace": {
     "line number": [
      9972
     ]
    },
    "libcst.matchers.EmptyLineMatchType": {
     "line number": [
      9982,
      9984,
      9985,
      9988,
      9990,
      9991,
      9996,
      9998,
      9999,
      10010,
      10011,
      10012,
      10015,
      10016,
      10017,
      10022,
      10023,
      10024,
      10036,
      10037,
      10038,
      10041,
      10042,
      10043,
      10048,
      10049,
      10050
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      10069,
      10071,
      10072
     ]
    },
    "libcst.matchers.SimpleWhitespaceMatchType": {
     "line number": [
      10063,
      10065,
      10066
     ]
    },
    "libcst.matchers.TrailingWhitespaceMatchType": {
     "line number": [
      9974,
      9976,
      9977
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      9977,
      9985,
      9991,
      9999,
      10012,
      10017,
      10024,
      10032,
      10038,
      10043,
      10050,
      10060,
      10066,
      10072
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      9986,
      10013,
      10039
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      9994,
      10020,
      10046
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      9972
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      9978,
      10058,
      10061,
      10067,
      10073
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      9975,
      9983,
      9989,
      9997,
      10004,
      10060,
      10064,
      10070
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      10005,
      10029,
      10055
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      9976,
      9984,
      9990,
      9998,
      10006,
      10011,
      10016,
      10023,
      10037,
      10042,
      10049,
      10060,
      10065,
      10071
     ]
    },
    "libcst.matchers.boolMatchType": {
     "line number": [
      10060,
      10060,
      10060
     ]
    },
    "typing.Callable": {
     "line number": [
      10005,
      10029,
      10055
     ]
    },
    "typing.Sequence": {
     "line number": [
      9980,
      10005,
      10008,
      10029,
      10034,
      10055
     ]
    },
    "typing.Union": {
     "line number": [
      9973,
      9979,
      9981,
      9987,
      9995,
      10007,
      10009,
      10014,
      10021,
      10033,
      10035,
      10040,
      10047,
      10059,
      10062,
      10068
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Pass": {
  "data": {
   "lineno": 10076,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      10076
     ]
    },
    "libcst.matchers.BaseSmallStatement": {
     "line number": [
      10077
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      10085,
      10087,
      10088
     ]
    },
    "libcst.matchers.SemicolonMatchType": {
     "line number": [
      10079,
      10081,
      10082
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      10082,
      10088
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      10077
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      10083,
      10089
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      10080,
      10086
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      10081,
      10087
     ]
    },
    "typing.Union": {
     "line number": [
      10078,
      10084
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Plus": {
  "data": {
   "lineno": 10092,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      10092
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      10095,
      10097,
      10098
     ]
    },
    "libcst.matchers.BaseUnaryOp": {
     "line number": [
      10093
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      10101,
      10103,
      10104
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      10098,
      10104
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      10093
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      10099,
      10105
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      10096,
      10102
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      10097,
      10103
     ]
    },
    "typing.Union": {
     "line number": [
      10094,
      10100
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Power": {
  "data": {
   "lineno": 10108,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      10108
     ]
    },
    "libcst.matchers.BaseBinaryOp": {
     "line number": [
      10109
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      10111,
      10113,
      10114,
      10117,
      10119,
      10120
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      10123,
      10125,
      10126
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      10114,
      10120,
      10126
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      10109
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      10115,
      10121,
      10127
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      10112,
      10118,
      10124
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      10113,
      10119,
      10125
     ]
    },
    "typing.Union": {
     "line number": [
      10110,
      10116,
      10122
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.PowerAssign": {
  "data": {
   "lineno": 10130,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      10130
     ]
    },
    "libcst.matchers.BaseAugOp": {
     "line number": [
      10131
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      10133,
      10135,
      10136,
      10139,
      10141,
      10142
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      10145,
      10147,
      10148
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      10136,
      10142,
      10148
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      10131
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      10137,
      10143,
      10149
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      10134,
      10140,
      10146
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      10135,
      10141,
      10147
     ]
    },
    "typing.Union": {
     "line number": [
      10132,
      10138,
      10144
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Raise": {
  "data": {
   "lineno": 10160,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      10160
     ]
    },
    "libcst.matchers.BaseExpressionOrNoneMatchType": {
     "line number": [
      10163,
      10165,
      10166
     ]
    },
    "libcst.matchers.BaseSmallStatement": {
     "line number": [
      10161
     ]
    },
    "libcst.matchers.FromOrNoneMatchType": {
     "line number": [
      10169,
      10171,
      10172
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      10187,
      10189,
      10190
     ]
    },
    "libcst.matchers.SemicolonMatchType": {
     "line number": [
      10181,
      10183,
      10184
     ]
    },
    "libcst.matchers.SimpleWhitespaceMatchType": {
     "line number": [
      10175,
      10177,
      10178
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      10166,
      10172,
      10178,
      10184,
      10190
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      10161
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      10167,
      10173,
      10179,
      10185,
      10191
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      10164,
      10170,
      10176,
      10182,
      10188
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      10165,
      10171,
      10177,
      10183,
      10189
     ]
    },
    "typing.Union": {
     "line number": [
      10162,
      10168,
      10174,
      10180,
      10186
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Return": {
  "data": {
   "lineno": 10194,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      10194
     ]
    },
    "libcst.matchers.BaseExpressionOrNoneMatchType": {
     "line number": [
      10197,
      10199,
      10200
     ]
    },
    "libcst.matchers.BaseSmallStatement": {
     "line number": [
      10195
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      10215,
      10217,
      10218
     ]
    },
    "libcst.matchers.SemicolonMatchType": {
     "line number": [
      10209,
      10211,
      10212
     ]
    },
    "libcst.matchers.SimpleWhitespaceMatchType": {
     "line number": [
      10203,
      10205,
      10206
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      10200,
      10206,
      10212,
      10218
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      10195
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      10201,
      10207,
      10213,
      10219
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      10198,
      10204,
      10210,
      10216
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      10199,
      10205,
      10211,
      10217
     ]
    },
    "typing.Union": {
     "line number": [
      10196,
      10202,
      10208,
      10214
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.RightCurlyBrace": {
  "data": {
   "lineno": 10222,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      10222
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      10225,
      10227,
      10228
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      10231,
      10233,
      10234
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      10228,
      10234
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      10223
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      10229,
      10235
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      10226,
      10232
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      10227,
      10233
     ]
    },
    "typing.Union": {
     "line number": [
      10224,
      10230
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.RightCurlyBraceMatchType": {
  "data": {
   "lineno": 3243
  },
  "type": "constant"
 },
 "libcst.matchers.RightParen": {
  "data": {
   "lineno": 10238,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      10238
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      10241,
      10243,
      10244
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      10247,
      10249,
      10250
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      10244,
      10250
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      10239
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      10245,
      10251
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      10242,
      10248
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      10243,
      10249
     ]
    },
    "typing.Union": {
     "line number": [
      10240,
      10246
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.RightParenMatchType": {
  "data": {
   "lineno": 653
  },
  "type": "constant"
 },
 "libcst.matchers.RightParenOrNoneMatchType": {
  "data": {
   "lineno": 6821
  },
  "type": "constant"
 },
 "libcst.matchers.RightShift": {
  "data": {
   "lineno": 10254,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      10254
     ]
    },
    "libcst.matchers.BaseBinaryOp": {
     "line number": [
      10255
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      10257,
      10259,
      10260,
      10263,
      10265,
      10266
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      10269,
      10271,
      10272
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      10260,
      10266,
      10272
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      10255
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      10261,
      10267,
      10273
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      10258,
      10264,
      10270
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      10259,
      10265,
      10271
     ]
    },
    "typing.Union": {
     "line number": [
      10256,
      10262,
      10268
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.RightShiftAssign": {
  "data": {
   "lineno": 10276,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      10276
     ]
    },
    "libcst.matchers.BaseAugOp": {
     "line number": [
      10277
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      10279,
      10281,
      10282,
      10285,
      10287,
      10288
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      10291,
      10293,
      10294
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      10282,
      10288,
      10294
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      10277
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      10283,
      10289,
      10295
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      10280,
      10286,
      10292
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      10281,
      10287,
      10293
     ]
    },
    "typing.Union": {
     "line number": [
      10278,
      10284,
      10290
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.RightSquareBracket": {
  "data": {
   "lineno": 10298,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      10298
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      10301,
      10303,
      10304
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      10307,
      10309,
      10310
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      10304,
      10310
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      10299
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      10305,
      10311
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      10302,
      10308
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      10303,
      10309
     ]
    },
    "typing.Union": {
     "line number": [
      10300,
      10306
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.RightSquareBracketMatchType": {
  "data": {
   "lineno": 8039
  },
  "type": "constant"
 },
 "libcst.matchers.SaveMatchedNode": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.SaveMatchedNode"
  },
  "type": "import"
 },
 "libcst.matchers.Semicolon": {
  "data": {
   "lineno": 10314,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      10314
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      10317,
      10319,
      10320,
      10323,
      10325,
      10326
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      10329,
      10331,
      10332
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      10320,
      10326,
      10332
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      10315
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      10321,
      10327,
      10333
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      10318,
      10324,
      10330
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      10319,
      10325,
      10331
     ]
    },
    "typing.Union": {
     "line number": [
      10316,
      10322,
      10328
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.SemicolonMatchType": {
  "data": {
   "lineno": 238
  },
  "type": "constant"
 },
 "libcst.matchers.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst.matchers.Set": {
  "data": {
   "lineno": 10336,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      10364,
      10388,
      10414,
      10456,
      10480,
      10506,
      10536,
      10560,
      10586
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      10336
     ]
    },
    "libcst.BaseElement": {
     "line number": [
      10364,
      10388,
      10414
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      10456,
      10480,
      10506
     ]
    },
    "libcst.RightParen": {
     "line number": [
      10536,
      10560,
      10586
     ]
    },
    "libcst.matchers.BaseElementMatchType": {
     "line number": [
      10341,
      10343,
      10344,
      10347,
      10349,
      10350,
      10355,
      10357,
      10358,
      10369,
      10370,
      10371,
      10374,
      10375,
      10376,
      10381,
      10382,
      10383,
      10395,
      10396,
      10397,
      10400,
      10401,
      10402,
      10407,
      10408,
      10409
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      10337
     ]
    },
    "libcst.matchers.BaseSet": {
     "line number": [
      10337
     ]
    },
    "libcst.matchers.LeftCurlyBraceMatchType": {
     "line number": [
      10419,
      10421,
      10422
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      10433,
      10435,
      10436,
      10439,
      10441,
      10442,
      10447,
      10449,
      10450,
      10461,
      10462,
      10463,
      10466,
      10467,
      10468,
      10473,
      10474,
      10475,
      10487,
      10488,
      10489,
      10492,
      10493,
      10494,
      10499,
      10500,
      10501
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      10591,
      10593,
      10594
     ]
    },
    "libcst.matchers.RightCurlyBraceMatchType": {
     "line number": [
      10425,
      10427,
      10428
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      10513,
      10515,
      10516,
      10519,
      10521,
      10522,
      10527,
      10529,
      10530,
      10541,
      10542,
      10543,
      10546,
      10547,
      10548,
      10553,
      10554,
      10555,
      10567,
      10568,
      10569,
      10572,
      10573,
      10574,
      10579,
      10580,
      10581
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      10344,
      10350,
      10358,
      10371,
      10376,
      10383,
      10391,
      10397,
      10402,
      10409,
      10422,
      10428,
      10436,
      10442,
      10450,
      10463,
      10468,
      10475,
      10483,
      10489,
      10494,
      10501,
      10516,
      10522,
      10530,
      10543,
      10548,
      10555,
      10563,
      10569,
      10574,
      10581,
      10594
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      10345,
      10372,
      10398,
      10437,
      10464,
      10490,
      10517,
      10544,
      10570
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      10353,
      10379,
      10405,
      10445,
      10471,
      10497,
      10525,
      10551,
      10577
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      10337
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      10417,
      10423,
      10429,
      10509,
      10589,
      10595
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      10342,
      10348,
      10356,
      10363,
      10420,
      10426,
      10434,
      10440,
      10448,
      10455,
      10514,
      10520,
      10528,
      10535,
      10592
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      10364,
      10388,
      10414,
      10456,
      10480,
      10506,
      10536,
      10560,
      10586
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      10343,
      10349,
      10357,
      10365,
      10370,
      10375,
      10382,
      10396,
      10401,
      10408,
      10421,
      10427,
      10435,
      10441,
      10449,
      10457,
      10462,
      10467,
      10474,
      10488,
      10493,
      10500,
      10515,
      10521,
      10529,
      10537,
      10542,
      10547,
      10554,
      10568,
      10573,
      10580,
      10593
     ]
    },
    "typing.Callable": {
     "line number": [
      10364,
      10388,
      10414,
      10456,
      10480,
      10506,
      10536,
      10560,
      10586
     ]
    },
    "typing.Sequence": {
     "line number": [
      10339,
      10364,
      10367,
      10388,
      10393,
      10414,
      10431,
      10456,
      10459,
      10480,
      10485,
      10506,
      10511,
      10536,
      10539,
      10560,
      10565,
      10586
     ]
    },
    "typing.Union": {
     "line number": [
      10338,
      10340,
      10346,
      10354,
      10366,
      10368,
      10373,
      10380,
      10392,
      10394,
      10399,
      10406,
      10418,
      10424,
      10430,
      10432,
      10438,
      10446,
      10458,
      10460,
      10465,
      10472,
      10484,
      10486,
      10491,
      10498,
      10510,
      10512,
      10518,
      10526,
      10538,
      10540,
      10545,
      10552,
      10564,
      10566,
      10571,
      10578,
      10590
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.SetComp": {
  "data": {
   "lineno": 10598,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      10650,
      10674,
      10700,
      10730,
      10754,
      10780
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      10598
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      10650,
      10674,
      10700
     ]
    },
    "libcst.RightParen": {
     "line number": [
      10730,
      10754,
      10780
     ]
    },
    "libcst.matchers.BaseAssignTargetExpressionMatchType": {
     "line number": [
      10601,
      10603,
      10604
     ]
    },
    "libcst.matchers.BaseComp": {
     "line number": [
      10599
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      10599
     ]
    },
    "libcst.matchers.BaseSet": {
     "line number": [
      10599
     ]
    },
    "libcst.matchers.BaseSimpleComp": {
     "line number": [
      10599
     ]
    },
    "libcst.matchers.CompForMatchType": {
     "line number": [
      10607,
      10609,
      10610
     ]
    },
    "libcst.matchers.LeftCurlyBraceMatchType": {
     "line number": [
      10613,
      10615,
      10616
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      10627,
      10629,
      10630,
      10633,
      10635,
      10636,
      10641,
      10643,
      10644,
      10655,
      10656,
      10657,
      10660,
      10661,
      10662,
      10667,
      10668,
      10669,
      10681,
      10682,
      10683,
      10686,
      10687,
      10688,
      10693,
      10694,
      10695
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      10785,
      10787,
      10788
     ]
    },
    "libcst.matchers.RightCurlyBraceMatchType": {
     "line number": [
      10619,
      10621,
      10622
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      10707,
      10709,
      10710,
      10713,
      10715,
      10716,
      10721,
      10723,
      10724,
      10735,
      10736,
      10737,
      10740,
      10741,
      10742,
      10747,
      10748,
      10749,
      10761,
      10762,
      10763,
      10766,
      10767,
      10768,
      10773,
      10774,
      10775
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      10604,
      10610,
      10616,
      10622,
      10630,
      10636,
      10644,
      10657,
      10662,
      10669,
      10677,
      10683,
      10688,
      10695,
      10710,
      10716,
      10724,
      10737,
      10742,
      10749,
      10757,
      10763,
      10768,
      10775,
      10788
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      10631,
      10658,
      10684,
      10711,
      10738,
      10764
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      10639,
      10665,
      10691,
      10719,
      10745,
      10771
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      10599
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      10605,
      10611,
      10617,
      10623,
      10703,
      10783,
      10789
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      10602,
      10608,
      10614,
      10620,
      10628,
      10634,
      10642,
      10649,
      10708,
      10714,
      10722,
      10729,
      10786
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      10650,
      10674,
      10700,
      10730,
      10754,
      10780
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      10603,
      10609,
      10615,
      10621,
      10629,
      10635,
      10643,
      10651,
      10656,
      10661,
      10668,
      10682,
      10687,
      10694,
      10709,
      10715,
      10723,
      10731,
      10736,
      10741,
      10748,
      10762,
      10767,
      10774,
      10787
     ]
    },
    "typing.Callable": {
     "line number": [
      10650,
      10674,
      10700,
      10730,
      10754,
      10780
     ]
    },
    "typing.Sequence": {
     "line number": [
      10625,
      10650,
      10653,
      10674,
      10679,
      10700,
      10705,
      10730,
      10733,
      10754,
      10759,
      10780
     ]
    },
    "typing.Union": {
     "line number": [
      10600,
      10606,
      10612,
      10618,
      10624,
      10626,
      10632,
      10640,
      10652,
      10654,
      10659,
      10666,
      10678,
      10680,
      10685,
      10692,
      10704,
      10706,
      10712,
      10720,
      10732,
      10734,
      10739,
      10746,
      10758,
      10760,
      10765,
      10772,
      10784
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.SimpleStatementLine": {
  "data": {
   "lineno": 10799,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      10827,
      10851,
      10877,
      10907,
      10931,
      10957
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      10799
     ]
    },
    "libcst.BaseSmallStatement": {
     "line number": [
      10827,
      10851,
      10877
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      10907,
      10931,
      10957
     ]
    },
    "libcst.matchers.BaseSmallStatementMatchType": {
     "line number": [
      10804,
      10806,
      10807,
      10810,
      10812,
      10813,
      10818,
      10820,
      10821,
      10832,
      10833,
      10834,
      10837,
      10838,
      10839,
      10844,
      10845,
      10846,
      10858,
      10859,
      10860,
      10863,
      10864,
      10865,
      10870,
      10871,
      10872
     ]
    },
    "libcst.matchers.BaseStatement": {
     "line number": [
      10800
     ]
    },
    "libcst.matchers.EmptyLineMatchType": {
     "line number": [
      10884,
      10886,
      10887,
      10890,
      10892,
      10893,
      10898,
      10900,
      10901,
      10912,
      10913,
      10914,
      10917,
      10918,
      10919,
      10924,
      10925,
      10926,
      10938,
      10939,
      10940,
      10943,
      10944,
      10945,
      10950,
      10951,
      10952
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      10968,
      10970,
      10971
     ]
    },
    "libcst.matchers.TrailingWhitespaceMatchType": {
     "line number": [
      10962,
      10964,
      10965
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      10807,
      10813,
      10821,
      10834,
      10839,
      10846,
      10854,
      10860,
      10865,
      10872,
      10887,
      10893,
      10901,
      10914,
      10919,
      10926,
      10934,
      10940,
      10945,
      10952,
      10965,
      10971
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      10808,
      10835,
      10861,
      10888,
      10915,
      10941
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      10816,
      10842,
      10868,
      10896,
      10922,
      10948
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      10800
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      10880,
      10960,
      10966,
      10972
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      10805,
      10811,
      10819,
      10826,
      10885,
      10891,
      10899,
      10906,
      10963,
      10969
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      10827,
      10851,
      10877,
      10907,
      10931,
      10957
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      10806,
      10812,
      10820,
      10828,
      10833,
      10838,
      10845,
      10859,
      10864,
      10871,
      10886,
      10892,
      10900,
      10908,
      10913,
      10918,
      10925,
      10939,
      10944,
      10951,
      10964,
      10970
     ]
    },
    "typing.Callable": {
     "line number": [
      10827,
      10851,
      10877,
      10907,
      10931,
      10957
     ]
    },
    "typing.Sequence": {
     "line number": [
      10802,
      10827,
      10830,
      10851,
      10856,
      10877,
      10882,
      10907,
      10910,
      10931,
      10936,
      10957
     ]
    },
    "typing.Union": {
     "line number": [
      10801,
      10803,
      10809,
      10817,
      10829,
      10831,
      10836,
      10843,
      10855,
      10857,
      10862,
      10869,
      10881,
      10883,
      10889,
      10897,
      10909,
      10911,
      10916,
      10923,
      10935,
      10937,
      10942,
      10949,
      10961,
      10967
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.SimpleStatementLineOrBaseCompoundStatementMatchType": {
  "data": {
   "lineno": 8568
  },
  "type": "constant"
 },
 "libcst.matchers.SimpleStatementSuite": {
  "data": {
   "lineno": 10975,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      11003,
      11027,
      11053
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      10975
     ]
    },
    "libcst.BaseSmallStatement": {
     "line number": [
      11003,
      11027,
      11053
     ]
    },
    "libcst.matchers.BaseSmallStatementMatchType": {
     "line number": [
      10980,
      10982,
      10983,
      10986,
      10988,
      10989,
      10994,
      10996,
      10997,
      11008,
      11009,
      11010,
      11013,
      11014,
      11015,
      11020,
      11021,
      11022,
      11034,
      11035,
      11036,
      11039,
      11040,
      11041,
      11046,
      11047,
      11048
     ]
    },
    "libcst.matchers.BaseSuite": {
     "line number": [
      10976
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      11070,
      11072,
      11073
     ]
    },
    "libcst.matchers.SimpleWhitespaceMatchType": {
     "line number": [
      11058,
      11060,
      11061
     ]
    },
    "libcst.matchers.TrailingWhitespaceMatchType": {
     "line number": [
      11064,
      11066,
      11067
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      10983,
      10989,
      10997,
      11010,
      11015,
      11022,
      11030,
      11036,
      11041,
      11048,
      11061,
      11067,
      11073
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      10984,
      11011,
      11037
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      10992,
      11018,
      11044
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      10976
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      11056,
      11062,
      11068,
      11074
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      10981,
      10987,
      10995,
      11002,
      11059,
      11065,
      11071
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      11003,
      11027,
      11053
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      10982,
      10988,
      10996,
      11004,
      11009,
      11014,
      11021,
      11035,
      11040,
      11047,
      11060,
      11066,
      11072
     ]
    },
    "typing.Callable": {
     "line number": [
      11003,
      11027,
      11053
     ]
    },
    "typing.Sequence": {
     "line number": [
      10978,
      11003,
      11006,
      11027,
      11032,
      11053
     ]
    },
    "typing.Union": {
     "line number": [
      10977,
      10979,
      10985,
      10993,
      11005,
      11007,
      11012,
      11019,
      11031,
      11033,
      11038,
      11045,
      11057,
      11063,
      11069
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.SimpleString": {
  "data": {
   "lineno": 11077,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      11108,
      11132,
      11158,
      11188,
      11212,
      11238
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      11077
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      11108,
      11132,
      11158
     ]
    },
    "libcst.RightParen": {
     "line number": [
      11188,
      11212,
      11238
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      11078
     ]
    },
    "libcst.matchers.BaseString": {
     "line number": [
      11078
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      11085,
      11087,
      11088,
      11091,
      11093,
      11094,
      11099,
      11101,
      11102,
      11113,
      11114,
      11115,
      11118,
      11119,
      11120,
      11125,
      11126,
      11127,
      11139,
      11140,
      11141,
      11144,
      11145,
      11146,
      11151,
      11152,
      11153
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      11243,
      11245,
      11246
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      11165,
      11167,
      11168,
      11171,
      11173,
      11174,
      11179,
      11181,
      11182,
      11193,
      11194,
      11195,
      11198,
      11199,
      11200,
      11205,
      11206,
      11207,
      11219,
      11220,
      11221,
      11224,
      11225,
      11226,
      11231,
      11232,
      11233
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      11080,
      11088,
      11094,
      11102,
      11115,
      11120,
      11127,
      11135,
      11141,
      11146,
      11153,
      11168,
      11174,
      11182,
      11195,
      11200,
      11207,
      11215,
      11221,
      11226,
      11233,
      11246
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      11089,
      11116,
      11142,
      11169,
      11196,
      11222
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      11097,
      11123,
      11149,
      11177,
      11203,
      11229
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      11078
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      11081,
      11161,
      11241,
      11247
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      11080,
      11086,
      11092,
      11100,
      11107,
      11166,
      11172,
      11180,
      11187,
      11244
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      11108,
      11132,
      11158,
      11188,
      11212,
      11238
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      11080,
      11087,
      11093,
      11101,
      11109,
      11114,
      11119,
      11126,
      11140,
      11145,
      11152,
      11167,
      11173,
      11181,
      11189,
      11194,
      11199,
      11206,
      11220,
      11225,
      11232,
      11245
     ]
    },
    "libcst.matchers.strMatchType": {
     "line number": [
      11080,
      11080,
      11080
     ]
    },
    "typing.Callable": {
     "line number": [
      11108,
      11132,
      11158,
      11188,
      11212,
      11238
     ]
    },
    "typing.Sequence": {
     "line number": [
      11083,
      11108,
      11111,
      11132,
      11137,
      11158,
      11163,
      11188,
      11191,
      11212,
      11217,
      11238
     ]
    },
    "typing.Union": {
     "line number": [
      11079,
      11082,
      11084,
      11090,
      11098,
      11110,
      11112,
      11117,
      11124,
      11136,
      11138,
      11143,
      11150,
      11162,
      11164,
      11170,
      11178,
      11190,
      11192,
      11197,
      11204,
      11216,
      11218,
      11223,
      11230,
      11242
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.SimpleStringOrFormattedStringMatchType": {
  "data": {
   "lineno": 2853
  },
  "type": "constant"
 },
 "libcst.matchers.SimpleStringOrFormattedStringOrConcatenatedStringMatchType": {
  "data": {
   "lineno": 2859
  },
  "type": "constant"
 },
 "libcst.matchers.SimpleWhitespace": {
  "data": {
   "lineno": 11250,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      11250
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespace": {
     "line number": [
      11251
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      11256,
      11258,
      11259
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      11253,
      11259
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      11251
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      11254,
      11260
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      11253,
      11257
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      11253,
      11258
     ]
    },
    "libcst.matchers.strMatchType": {
     "line number": [
      11253,
      11253,
      11253
     ]
    },
    "typing.Union": {
     "line number": [
      11252,
      11255
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.SimpleWhitespaceMatchType": {
  "data": {
   "lineno": 422
  },
  "type": "constant"
 },
 "libcst.matchers.Slice": {
  "data": {
   "lineno": 11263,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      11263
     ]
    },
    "libcst.matchers.BaseExpressionOrNoneMatchType": {
     "line number": [
      11266,
      11268,
      11269,
      11272,
      11274,
      11275,
      11278,
      11280,
      11281
     ]
    },
    "libcst.matchers.BaseSlice": {
     "line number": [
      11264
     ]
    },
    "libcst.matchers.ColonMatchType": {
     "line number": [
      11284,
      11284,
      11284,
      11287,
      11287,
      11287
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      11290,
      11292,
      11293
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      11269,
      11275,
      11281,
      11284,
      11287,
      11293
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      11264
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      11270,
      11276,
      11282,
      11285,
      11288,
      11294
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      11267,
      11273,
      11279,
      11284,
      11287,
      11291
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      11268,
      11274,
      11280,
      11284,
      11287,
      11292
     ]
    },
    "typing.Union": {
     "line number": [
      11265,
      11271,
      11277,
      11283,
      11286,
      11289
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.StarredDictElement": {
  "data": {
   "lineno": 11297,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      11297
     ]
    },
    "libcst.matchers.BaseDictElement": {
     "line number": [
      11298
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      11300,
      11302,
      11303
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      11309,
      11311,
      11312
     ]
    },
    "libcst.matchers.CommaMatchType": {
     "line number": [
      11306,
      11306,
      11306
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      11315,
      11317,
      11318
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      11303,
      11306,
      11312,
      11318
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      11298
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      11304,
      11307,
      11313,
      11319
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      11301,
      11306,
      11310,
      11316
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      11302,
      11306,
      11311,
      11317
     ]
    },
    "typing.Union": {
     "line number": [
      11299,
      11305,
      11308,
      11314
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.StarredElement": {
  "data": {
   "lineno": 11322,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      11359,
      11383,
      11409,
      11439,
      11463,
      11489
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      11322
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      11359,
      11383,
      11409
     ]
    },
    "libcst.RightParen": {
     "line number": [
      11439,
      11463,
      11489
     ]
    },
    "libcst.matchers.BaseElement": {
     "line number": [
      11323
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      11325,
      11327,
      11328
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      11494,
      11496,
      11497
     ]
    },
    "libcst.matchers.CommaMatchType": {
     "line number": [
      11331,
      11331,
      11331
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      11336,
      11338,
      11339,
      11342,
      11344,
      11345,
      11350,
      11352,
      11353,
      11364,
      11365,
      11366,
      11369,
      11370,
      11371,
      11376,
      11377,
      11378,
      11390,
      11391,
      11392,
      11395,
      11396,
      11397,
      11402,
      11403,
      11404
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      11500,
      11502,
      11503
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      11416,
      11418,
      11419,
      11422,
      11424,
      11425,
      11430,
      11432,
      11433,
      11444,
      11445,
      11446,
      11449,
      11450,
      11451,
      11456,
      11457,
      11458,
      11470,
      11471,
      11472,
      11475,
      11476,
      11477,
      11482,
      11483,
      11484
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      11328,
      11331,
      11339,
      11345,
      11353,
      11366,
      11371,
      11378,
      11386,
      11392,
      11397,
      11404,
      11419,
      11425,
      11433,
      11446,
      11451,
      11458,
      11466,
      11472,
      11477,
      11484,
      11497,
      11503
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      11340,
      11367,
      11393,
      11420,
      11447,
      11473
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      11348,
      11374,
      11400,
      11428,
      11454,
      11480
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      11323
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      11329,
      11332,
      11412,
      11492,
      11498,
      11504
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      11326,
      11331,
      11337,
      11343,
      11351,
      11358,
      11417,
      11423,
      11431,
      11438,
      11495,
      11501
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      11359,
      11383,
      11409,
      11439,
      11463,
      11489
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      11327,
      11331,
      11338,
      11344,
      11352,
      11360,
      11365,
      11370,
      11377,
      11391,
      11396,
      11403,
      11418,
      11424,
      11432,
      11440,
      11445,
      11450,
      11457,
      11471,
      11476,
      11483,
      11496,
      11502
     ]
    },
    "typing.Callable": {
     "line number": [
      11359,
      11383,
      11409,
      11439,
      11463,
      11489
     ]
    },
    "typing.Sequence": {
     "line number": [
      11334,
      11359,
      11362,
      11383,
      11388,
      11409,
      11414,
      11439,
      11442,
      11463,
      11468,
      11489
     ]
    },
    "typing.Union": {
     "line number": [
      11324,
      11330,
      11333,
      11335,
      11341,
      11349,
      11361,
      11363,
      11368,
      11375,
      11387,
      11389,
      11394,
      11401,
      11413,
      11415,
      11421,
      11429,
      11441,
      11443,
      11448,
      11455,
      11467,
      11469,
      11474,
      11481,
      11493,
      11499
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Subscript": {
  "data": {
   "lineno": 11514,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      11550,
      11574,
      11600,
      11642,
      11666,
      11692,
      11722,
      11746,
      11772
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      11514
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      11642,
      11666,
      11692
     ]
    },
    "libcst.RightParen": {
     "line number": [
      11722,
      11746,
      11772
     ]
    },
    "libcst.SubscriptElement": {
     "line number": [
      11550,
      11574,
      11600
     ]
    },
    "libcst.matchers.BaseAssignTargetExpression": {
     "line number": [
      11516
     ]
    },
    "libcst.matchers.BaseDelTargetExpression": {
     "line number": [
      11516
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      11516
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      11519,
      11521,
      11522
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      11777,
      11779,
      11780
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      11619,
      11621,
      11622,
      11625,
      11627,
      11628,
      11633,
      11635,
      11636,
      11647,
      11648,
      11649,
      11652,
      11653,
      11654,
      11659,
      11660,
      11661,
      11673,
      11674,
      11675,
      11678,
      11679,
      11680,
      11685,
      11686,
      11687
     ]
    },
    "libcst.matchers.LeftSquareBracketMatchType": {
     "line number": [
      11605,
      11607,
      11608
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      11783,
      11785,
      11786
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      11699,
      11701,
      11702,
      11705,
      11707,
      11708,
      11713,
      11715,
      11716,
      11727,
      11728,
      11729,
      11732,
      11733,
      11734,
      11739,
      11740,
      11741,
      11753,
      11754,
      11755,
      11758,
      11759,
      11760,
      11765,
      11766,
      11767
     ]
    },
    "libcst.matchers.RightSquareBracketMatchType": {
     "line number": [
      11611,
      11613,
      11614
     ]
    },
    "libcst.matchers.SubscriptElementMatchType": {
     "line number": [
      11527,
      11529,
      11530,
      11533,
      11535,
      11536,
      11541,
      11543,
      11544,
      11555,
      11556,
      11557,
      11560,
      11561,
      11562,
      11567,
      11568,
      11569,
      11581,
      11582,
      11583,
      11586,
      11587,
      11588,
      11593,
      11594,
      11595
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      11522,
      11530,
      11536,
      11544,
      11557,
      11562,
      11569,
      11577,
      11583,
      11588,
      11595,
      11608,
      11614,
      11622,
      11628,
      11636,
      11649,
      11654,
      11661,
      11669,
      11675,
      11680,
      11687,
      11702,
      11708,
      11716,
      11729,
      11734,
      11741,
      11749,
      11755,
      11760,
      11767,
      11780,
      11786
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      11531,
      11558,
      11584,
      11623,
      11650,
      11676,
      11703,
      11730,
      11756
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      11539,
      11565,
      11591,
      11631,
      11657,
      11683,
      11711,
      11737,
      11763
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      11516
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      11523,
      11603,
      11609,
      11615,
      11695,
      11775,
      11781,
      11787
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      11520,
      11528,
      11534,
      11542,
      11549,
      11606,
      11612,
      11620,
      11626,
      11634,
      11641,
      11700,
      11706,
      11714,
      11721,
      11778,
      11784
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      11550,
      11574,
      11600,
      11642,
      11666,
      11692,
      11722,
      11746,
      11772
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      11521,
      11529,
      11535,
      11543,
      11551,
      11556,
      11561,
      11568,
      11582,
      11587,
      11594,
      11607,
      11613,
      11621,
      11627,
      11635,
      11643,
      11648,
      11653,
      11660,
      11674,
      11679,
      11686,
      11701,
      11707,
      11715,
      11723,
      11728,
      11733,
      11740,
      11754,
      11759,
      11766,
      11779,
      11785
     ]
    },
    "slice": {
     "line number": [
      11524
     ]
    },
    "typing.Callable": {
     "line number": [
      11550,
      11574,
      11600,
      11642,
      11666,
      11692,
      11722,
      11746,
      11772
     ]
    },
    "typing.Sequence": {
     "line number": [
      11525,
      11550,
      11553,
      11574,
      11579,
      11600,
      11617,
      11642,
      11645,
      11666,
      11671,
      11692,
      11697,
      11722,
      11725,
      11746,
      11751,
      11772
     ]
    },
    "typing.Union": {
     "line number": [
      11518,
      11524,
      11526,
      11532,
      11540,
      11552,
      11554,
      11559,
      11566,
      11578,
      11580,
      11585,
      11592,
      11604,
      11610,
      11616,
      11618,
      11624,
      11632,
      11644,
      11646,
      11651,
      11658,
      11670,
      11672,
      11677,
      11684,
      11696,
      11698,
      11704,
      11712,
      11724,
      11726,
      11731,
      11738,
      11750,
      11752,
      11757,
      11764,
      11776,
      11782
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.SubscriptElement": {
  "data": {
   "lineno": 11795,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      11795
     ]
    },
    "libcst.matchers.BaseSliceMatchType": {
     "line number": [
      11798,
      11800,
      11801
     ]
    },
    "libcst.matchers.CommaMatchType": {
     "line number": [
      11804,
      11804,
      11804
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      11807,
      11809,
      11810
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      11801,
      11804,
      11810
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      11796
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      11802,
      11805,
      11811
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      11799,
      11804,
      11808
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      11800,
      11804,
      11809
     ]
    },
    "slice": {
     "line number": [
      11797
     ]
    },
    "typing.Union": {
     "line number": [
      11797,
      11803,
      11806
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.SubscriptElementMatchType": {
  "data": {
   "lineno": 11507
  },
  "type": "constant"
 },
 "libcst.matchers.Subtract": {
  "data": {
   "lineno": 11814,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      11814
     ]
    },
    "libcst.matchers.BaseBinaryOp": {
     "line number": [
      11815
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      11817,
      11819,
      11820,
      11823,
      11825,
      11826
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      11829,
      11831,
      11832
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      11820,
      11826,
      11832
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      11815
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      11821,
      11827,
      11833
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      11818,
      11824,
      11830
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      11819,
      11825,
      11831
     ]
    },
    "typing.Union": {
     "line number": [
      11816,
      11822,
      11828
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.SubtractAssign": {
  "data": {
   "lineno": 11836,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      11836
     ]
    },
    "libcst.matchers.BaseAugOp": {
     "line number": [
      11837
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      11839,
      11841,
      11842,
      11845,
      11847,
      11848
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      11851,
      11853,
      11854
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      11842,
      11848,
      11854
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      11837
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      11843,
      11849,
      11855
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      11840,
      11846,
      11852
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      11841,
      11847,
      11853
     ]
    },
    "typing.Union": {
     "line number": [
      11838,
      11844,
      11850
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.TrailingWhitespace": {
  "data": {
   "lineno": 11858,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      11858
     ]
    },
    "libcst.matchers.CommentOrNoneMatchType": {
     "line number": [
      11867,
      11869,
      11870
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      11879,
      11881,
      11882
     ]
    },
    "libcst.matchers.NewlineMatchType": {
     "line number": [
      11873,
      11875,
      11876
     ]
    },
    "libcst.matchers.SimpleWhitespaceMatchType": {
     "line number": [
      11861,
      11863,
      11864
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      11864,
      11870,
      11876,
      11882
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      11859
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      11865,
      11871,
      11877,
      11883
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      11862,
      11868,
      11874,
      11880
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      11863,
      11869,
      11875,
      11881
     ]
    },
    "typing.Union": {
     "line number": [
      11860,
      11866,
      11872,
      11878
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.TrailingWhitespaceMatchType": {
  "data": {
   "lineno": 3083
  },
  "type": "constant"
 },
 "libcst.matchers.Try": {
  "data": {
   "lineno": 11897,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      11931,
      11955,
      11981,
      12023,
      12047,
      12073
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      11897
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      12023,
      12047,
      12073
     ]
    },
    "libcst.ExceptHandler": {
     "line number": [
      11931,
      11955,
      11981
     ]
    },
    "libcst.matchers.BaseCompoundStatement": {
     "line number": [
      11898
     ]
    },
    "libcst.matchers.BaseStatement": {
     "line number": [
      11898
     ]
    },
    "libcst.matchers.BaseSuiteMatchType": {
     "line number": [
      11900,
      11902,
      11903
     ]
    },
    "libcst.matchers.ElseOrNoneMatchType": {
     "line number": [
      11986,
      11988,
      11989
     ]
    },
    "libcst.matchers.EmptyLineMatchType": {
     "line number": [
      12000,
      12002,
      12003,
      12006,
      12008,
      12009,
      12014,
      12016,
      12017,
      12028,
      12029,
      12030,
      12033,
      12034,
      12035,
      12040,
      12041,
      12042,
      12054,
      12055,
      12056,
      12059,
      12060,
      12061,
      12066,
      12067,
      12068
     ]
    },
    "libcst.matchers.ExceptHandlerMatchType": {
     "line number": [
      11908,
      11910,
      11911,
      11914,
      11916,
      11917,
      11922,
      11924,
      11925,
      11936,
      11937,
      11938,
      11941,
      11942,
      11943,
      11948,
      11949,
      11950,
      11962,
      11963,
      11964,
      11967,
      11968,
      11969,
      11974,
      11975,
      11976
     ]
    },
    "libcst.matchers.FinallyOrNoneMatchType": {
     "line number": [
      11992,
      11994,
      11995
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      12084,
      12086,
      12087
     ]
    },
    "libcst.matchers.SimpleWhitespaceMatchType": {
     "line number": [
      12078,
      12080,
      12081
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      11903,
      11911,
      11917,
      11925,
      11938,
      11943,
      11950,
      11958,
      11964,
      11969,
      11976,
      11989,
      11995,
      12003,
      12009,
      12017,
      12030,
      12035,
      12042,
      12050,
      12056,
      12061,
      12068,
      12081,
      12087
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      11912,
      11939,
      11965,
      12004,
      12031,
      12057
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      11920,
      11946,
      11972,
      12012,
      12038,
      12064
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      11898
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      11904,
      11984,
      11990,
      11996,
      12076,
      12082,
      12088
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      11901,
      11909,
      11915,
      11923,
      11930,
      11987,
      11993,
      12001,
      12007,
      12015,
      12022,
      12079,
      12085
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      11931,
      11955,
      11981,
      12023,
      12047,
      12073
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      11902,
      11910,
      11916,
      11924,
      11932,
      11937,
      11942,
      11949,
      11963,
      11968,
      11975,
      11988,
      11994,
      12002,
      12008,
      12016,
      12024,
      12029,
      12034,
      12041,
      12055,
      12060,
      12067,
      12080,
      12086
     ]
    },
    "typing.Callable": {
     "line number": [
      11931,
      11955,
      11981,
      12023,
      12047,
      12073
     ]
    },
    "typing.Sequence": {
     "line number": [
      11906,
      11931,
      11934,
      11955,
      11960,
      11981,
      11998,
      12023,
      12026,
      12047,
      12052,
      12073
     ]
    },
    "typing.Union": {
     "line number": [
      11899,
      11905,
      11907,
      11913,
      11921,
      11933,
      11935,
      11940,
      11947,
      11959,
      11961,
      11966,
      11973,
      11985,
      11991,
      11997,
      11999,
      12005,
      12013,
      12025,
      12027,
      12032,
      12039,
      12051,
      12053,
      12058,
      12065,
      12077,
      12083
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Tuple": {
  "data": {
   "lineno": 12091,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      12121,
      12145,
      12171,
      12201,
      12225,
      12251,
      12281,
      12305,
      12331
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      12091
     ]
    },
    "libcst.BaseElement": {
     "line number": [
      12121,
      12145,
      12171
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      12201,
      12225,
      12251
     ]
    },
    "libcst.RightParen": {
     "line number": [
      12281,
      12305,
      12331
     ]
    },
    "libcst.matchers.BaseAssignTargetExpression": {
     "line number": [
      12093
     ]
    },
    "libcst.matchers.BaseDelTargetExpression": {
     "line number": [
      12093
     ]
    },
    "libcst.matchers.BaseElementMatchType": {
     "line number": [
      12098,
      12100,
      12101,
      12104,
      12106,
      12107,
      12112,
      12114,
      12115,
      12126,
      12127,
      12128,
      12131,
      12132,
      12133,
      12138,
      12139,
      12140,
      12152,
      12153,
      12154,
      12157,
      12158,
      12159,
      12164,
      12165,
      12166
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      12093
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      12178,
      12180,
      12181,
      12184,
      12186,
      12187,
      12192,
      12194,
      12195,
      12206,
      12207,
      12208,
      12211,
      12212,
      12213,
      12218,
      12219,
      12220,
      12232,
      12233,
      12234,
      12237,
      12238,
      12239,
      12244,
      12245,
      12246
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      12336,
      12338,
      12339
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      12258,
      12260,
      12261,
      12264,
      12266,
      12267,
      12272,
      12274,
      12275,
      12286,
      12287,
      12288,
      12291,
      12292,
      12293,
      12298,
      12299,
      12300,
      12312,
      12313,
      12314,
      12317,
      12318,
      12319,
      12324,
      12325,
      12326
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      12101,
      12107,
      12115,
      12128,
      12133,
      12140,
      12148,
      12154,
      12159,
      12166,
      12181,
      12187,
      12195,
      12208,
      12213,
      12220,
      12228,
      12234,
      12239,
      12246,
      12261,
      12267,
      12275,
      12288,
      12293,
      12300,
      12308,
      12314,
      12319,
      12326,
      12339
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      12102,
      12129,
      12155,
      12182,
      12209,
      12235,
      12262,
      12289,
      12315
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      12110,
      12136,
      12162,
      12190,
      12216,
      12242,
      12270,
      12296,
      12322
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      12093
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      12174,
      12254,
      12334,
      12340
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      12099,
      12105,
      12113,
      12120,
      12179,
      12185,
      12193,
      12200,
      12259,
      12265,
      12273,
      12280,
      12337
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      12121,
      12145,
      12171,
      12201,
      12225,
      12251,
      12281,
      12305,
      12331
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      12100,
      12106,
      12114,
      12122,
      12127,
      12132,
      12139,
      12153,
      12158,
      12165,
      12180,
      12186,
      12194,
      12202,
      12207,
      12212,
      12219,
      12233,
      12238,
      12245,
      12260,
      12266,
      12274,
      12282,
      12287,
      12292,
      12299,
      12313,
      12318,
      12325,
      12338
     ]
    },
    "typing.Callable": {
     "line number": [
      12121,
      12145,
      12171,
      12201,
      12225,
      12251,
      12281,
      12305,
      12331
     ]
    },
    "typing.Sequence": {
     "line number": [
      12096,
      12121,
      12124,
      12145,
      12150,
      12171,
      12176,
      12201,
      12204,
      12225,
      12230,
      12251,
      12256,
      12281,
      12284,
      12305,
      12310,
      12331
     ]
    },
    "typing.Union": {
     "line number": [
      12095,
      12097,
      12103,
      12111,
      12123,
      12125,
      12130,
      12137,
      12149,
      12151,
      12156,
      12163,
      12175,
      12177,
      12183,
      12191,
      12203,
      12205,
      12210,
      12217,
      12229,
      12231,
      12236,
      12243,
      12255,
      12257,
      12263,
      12271,
      12283,
      12285,
      12290,
      12297,
      12309,
      12311,
      12316,
      12323,
      12335
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.UnaryOperation": {
  "data": {
   "lineno": 12348,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      12388,
      12412,
      12438,
      12468,
      12492,
      12518
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      12348
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      12388,
      12412,
      12438
     ]
    },
    "libcst.RightParen": {
     "line number": [
      12468,
      12492,
      12518
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      12349
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      12357,
      12359,
      12360
     ]
    },
    "libcst.matchers.BaseUnaryOpMatchType": {
     "line number": [
      12351,
      12353,
      12354
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      12365,
      12367,
      12368,
      12371,
      12373,
      12374,
      12379,
      12381,
      12382,
      12393,
      12394,
      12395,
      12398,
      12399,
      12400,
      12405,
      12406,
      12407,
      12419,
      12420,
      12421,
      12424,
      12425,
      12426,
      12431,
      12432,
      12433
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      12523,
      12525,
      12526
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      12445,
      12447,
      12448,
      12451,
      12453,
      12454,
      12459,
      12461,
      12462,
      12473,
      12474,
      12475,
      12478,
      12479,
      12480,
      12485,
      12486,
      12487,
      12499,
      12500,
      12501,
      12504,
      12505,
      12506,
      12511,
      12512,
      12513
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      12354,
      12360,
      12368,
      12374,
      12382,
      12395,
      12400,
      12407,
      12415,
      12421,
      12426,
      12433,
      12448,
      12454,
      12462,
      12475,
      12480,
      12487,
      12495,
      12501,
      12506,
      12513,
      12526
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      12369,
      12396,
      12422,
      12449,
      12476,
      12502
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      12377,
      12403,
      12429,
      12457,
      12483,
      12509
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      12349
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      12355,
      12361,
      12441,
      12521,
      12527
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      12352,
      12358,
      12366,
      12372,
      12380,
      12387,
      12446,
      12452,
      12460,
      12467,
      12524
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      12388,
      12412,
      12438,
      12468,
      12492,
      12518
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      12353,
      12359,
      12367,
      12373,
      12381,
      12389,
      12394,
      12399,
      12406,
      12420,
      12425,
      12432,
      12447,
      12453,
      12461,
      12469,
      12474,
      12479,
      12486,
      12500,
      12505,
      12512,
      12525
     ]
    },
    "typing.Callable": {
     "line number": [
      12388,
      12412,
      12438,
      12468,
      12492,
      12518
     ]
    },
    "typing.Sequence": {
     "line number": [
      12363,
      12388,
      12391,
      12412,
      12417,
      12438,
      12443,
      12468,
      12471,
      12492,
      12497,
      12518
     ]
    },
    "typing.Union": {
     "line number": [
      12350,
      12356,
      12362,
      12364,
      12370,
      12378,
      12390,
      12392,
      12397,
      12404,
      12416,
      12418,
      12423,
      12430,
      12442,
      12444,
      12450,
      12458,
      12470,
      12472,
      12477,
      12484,
      12496,
      12498,
      12503,
      12510,
      12522
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.matchers.While": {
  "data": {
   "lineno": 12530,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      12576,
      12600,
      12626
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      12530
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      12576,
      12600,
      12626
     ]
    },
    "libcst.matchers.BaseCompoundStatement": {
     "line number": [
      12531
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      12533,
      12535,
      12536
     ]
    },
    "libcst.matchers.BaseStatement": {
     "line number": [
      12531
     ]
    },
    "libcst.matchers.BaseSuiteMatchType": {
     "line number": [
      12539,
      12541,
      12542
     ]
    },
    "libcst.matchers.ElseOrNoneMatchType": {
     "line number": [
      12545,
      12547,
      12548
     ]
    },
    "libcst.matchers.EmptyLineMatchType": {
     "line number": [
      12553,
      12555,
      12556,
      12559,
      12561,
      12562,
      12567,
      12569,
      12570,
      12581,
      12582,
      12583,
      12586,
      12587,
      12588,
      12593,
      12594,
      12595,
      12607,
      12608,
      12609,
      12612,
      12613,
      12614,
      12619,
      12620,
      12621
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      12643,
      12645,
      12646
     ]
    },
    "libcst.matchers.SimpleWhitespaceMatchType": {
     "line number": [
      12631,
      12633,
      12634,
      12637,
      12639,
      12640
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      12536,
      12542,
      12548,
      12556,
      12562,
      12570,
      12583,
      12588,
      12595,
      12603,
      12609,
      12614,
      12621,
      12634,
      12640,
      12646
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      12557,
      12584,
      12610
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      12565,
      12591,
      12617
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      12531
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      12537,
      12543,
      12549,
      12629,
      12635,
      12641,
      12647
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      12534,
      12540,
      12546,
      12554,
      12560,
      12568,
      12575,
      12632,
      12638,
      12644
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      12576,
      12600,
      12626
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      12535,
      12541,
      12547,
      12555,
      12561,
      12569,
      12577,
      12582,
      12587,
      12594,
      12608,
      12613,
      12620,
      12633,
      12639,
      12645
     ]
    },
    "typing.Callable": {
     "line number": [
      12576,
      12600,
      12626
     ]
    },
    "typing.Sequence": {
     "line number": [
      12551,
      12576,
      12579,
      12600,
      12605,
      12626
     ]
    },
    "typing.Union": {
     "line number": [
      12532,
      12538,
      12544,
      12550,
      12552,
      12558,
      12566,
      12578,
      12580,
      12585,
      12592,
      12604,
      12606,
      12611,
      12618,
      12630,
      12636,
      12642
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.With": {
  "data": {
   "lineno": 12655,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      12683,
      12707,
      12733,
      12775,
      12799,
      12825
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      12655
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      12775,
      12799,
      12825
     ]
    },
    "libcst.WithItem": {
     "line number": [
      12683,
      12707,
      12733
     ]
    },
    "libcst.matchers.AsynchronousOrNoneMatchType": {
     "line number": [
      12744,
      12746,
      12747
     ]
    },
    "libcst.matchers.BaseCompoundStatement": {
     "line number": [
      12656
     ]
    },
    "libcst.matchers.BaseStatement": {
     "line number": [
      12656
     ]
    },
    "libcst.matchers.BaseSuiteMatchType": {
     "line number": [
      12738,
      12740,
      12741
     ]
    },
    "libcst.matchers.EmptyLineMatchType": {
     "line number": [
      12752,
      12754,
      12755,
      12758,
      12760,
      12761,
      12766,
      12768,
      12769,
      12780,
      12781,
      12782,
      12785,
      12786,
      12787,
      12792,
      12793,
      12794,
      12806,
      12807,
      12808,
      12811,
      12812,
      12813,
      12818,
      12819,
      12820
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      12842,
      12844,
      12845
     ]
    },
    "libcst.matchers.SimpleWhitespaceMatchType": {
     "line number": [
      12830,
      12832,
      12833,
      12836,
      12838,
      12839
     ]
    },
    "libcst.matchers.WithItemMatchType": {
     "line number": [
      12660,
      12662,
      12663,
      12666,
      12668,
      12669,
      12674,
      12676,
      12677,
      12688,
      12689,
      12690,
      12693,
      12694,
      12695,
      12700,
      12701,
      12702,
      12714,
      12715,
      12716,
      12719,
      12720,
      12721,
      12726,
      12727,
      12728
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      12663,
      12669,
      12677,
      12690,
      12695,
      12702,
      12710,
      12716,
      12721,
      12728,
      12741,
      12747,
      12755,
      12761,
      12769,
      12782,
      12787,
      12794,
      12802,
      12808,
      12813,
      12820,
      12833,
      12839,
      12845
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      12664,
      12691,
      12717,
      12756,
      12783,
      12809
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      12672,
      12698,
      12724,
      12764,
      12790,
      12816
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      12656
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      12736,
      12742,
      12748,
      12828,
      12834,
      12840,
      12846
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      12661,
      12667,
      12675,
      12682,
      12739,
      12745,
      12753,
      12759,
      12767,
      12774,
      12831,
      12837,
      12843
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      12683,
      12707,
      12733,
      12775,
      12799,
      12825
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      12662,
      12668,
      12676,
      12684,
      12689,
      12694,
      12701,
      12715,
      12720,
      12727,
      12740,
      12746,
      12754,
      12760,
      12768,
      12776,
      12781,
      12786,
      12793,
      12807,
      12812,
      12819,
      12832,
      12838,
      12844
     ]
    },
    "typing.Callable": {
     "line number": [
      12683,
      12707,
      12733,
      12775,
      12799,
      12825
     ]
    },
    "typing.Sequence": {
     "line number": [
      12658,
      12683,
      12686,
      12707,
      12712,
      12733,
      12750,
      12775,
      12778,
      12799,
      12804,
      12825
     ]
    },
    "typing.Union": {
     "line number": [
      12657,
      12659,
      12665,
      12673,
      12685,
      12687,
      12692,
      12699,
      12711,
      12713,
      12718,
      12725,
      12737,
      12743,
      12749,
      12751,
      12757,
      12765,
      12777,
      12779,
      12784,
      12791,
      12803,
      12805,
      12810,
      12817,
      12829,
      12835,
      12841
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.WithItem": {
  "data": {
   "lineno": 12849,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      12849
     ]
    },
    "libcst.matchers.AsNameOrNoneMatchType": {
     "line number": [
      12858,
      12860,
      12861
     ]
    },
    "libcst.matchers.BaseExpressionMatchType": {
     "line number": [
      12852,
      12854,
      12855
     ]
    },
    "libcst.matchers.CommaMatchType": {
     "line number": [
      12864,
      12864,
      12864
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      12867,
      12869,
      12870
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      12855,
      12861,
      12864,
      12870
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      12850
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      12856,
      12862,
      12865,
      12871
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      12853,
      12859,
      12864,
      12868
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      12854,
      12860,
      12864,
      12869
     ]
    },
    "typing.Union": {
     "line number": [
      12851,
      12857,
      12863,
      12866
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.WithItemMatchType": {
  "data": {
   "lineno": 12650
  },
  "type": "constant"
 },
 "libcst.matchers.Yield": {
  "data": {
   "lineno": 12883,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      12917,
      12941,
      12967,
      12997,
      13021,
      13047
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      12883
     ]
    },
    "libcst.LeftParen": {
     "line number": [
      12917,
      12941,
      12967
     ]
    },
    "libcst.RightParen": {
     "line number": [
      12997,
      13021,
      13047
     ]
    },
    "libcst.matchers.BaseExpression": {
     "line number": [
      12884
     ]
    },
    "libcst.matchers.BaseExpressionOrFromOrNoneMatchType": {
     "line number": [
      12886,
      12888,
      12889
     ]
    },
    "libcst.matchers.BaseParenthesizableWhitespaceMatchType": {
     "line number": [
      13052,
      13054,
      13055
     ]
    },
    "libcst.matchers.LeftParenMatchType": {
     "line number": [
      12894,
      12896,
      12897,
      12900,
      12902,
      12903,
      12908,
      12910,
      12911,
      12922,
      12923,
      12924,
      12927,
      12928,
      12929,
      12934,
      12935,
      12936,
      12948,
      12949,
      12950,
      12953,
      12954,
      12955,
      12960,
      12961,
      12962
     ]
    },
    "libcst.matchers.MetadataMatchType": {
     "line number": [
      13058,
      13060,
      13061
     ]
    },
    "libcst.matchers.RightParenMatchType": {
     "line number": [
      12974,
      12976,
      12977,
      12980,
      12982,
      12983,
      12988,
      12990,
      12991,
      13002,
      13003,
      13004,
      13007,
      13008,
      13009,
      13014,
      13015,
      13016,
      13028,
      13029,
      13030,
      13033,
      13034,
      13035,
      13040,
      13041,
      13042
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      12889,
      12897,
      12903,
      12911,
      12924,
      12929,
      12936,
      12944,
      12950,
      12955,
      12962,
      12977,
      12983,
      12991,
      13004,
      13009,
      13016,
      13024,
      13030,
      13035,
      13042,
      13055,
      13061
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      12898,
      12925,
      12951,
      12978,
      13005,
      13031
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      12906,
      12932,
      12958,
      12986,
      13012,
      13038
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      12884
     ]
    },
    "libcst.matchers._matcher_base.DoNotCare": {
     "line number": [
      12890,
      12970,
      13050,
      13056,
      13062
     ]
    },
    "libcst.matchers._matcher_base.DoNotCareSentinel": {
     "line number": [
      12887,
      12895,
      12901,
      12909,
      12916,
      12975,
      12981,
      12989,
      12996,
      13053,
      13059
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      12917,
      12941,
      12967,
      12997,
      13021,
      13047
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      12888,
      12896,
      12902,
      12910,
      12918,
      12923,
      12928,
      12935,
      12949,
      12954,
      12961,
      12976,
      12982,
      12990,
      12998,
      13003,
      13008,
      13015,
      13029,
      13034,
      13041,
      13054,
      13060
     ]
    },
    "typing.Callable": {
     "line number": [
      12917,
      12941,
      12967,
      12997,
      13021,
      13047
     ]
    },
    "typing.Sequence": {
     "line number": [
      12892,
      12917,
      12920,
      12941,
      12946,
      12967,
      12972,
      12997,
      13000,
      13021,
      13026,
      13047
     ]
    },
    "typing.Union": {
     "line number": [
      12885,
      12891,
      12893,
      12899,
      12907,
      12919,
      12921,
      12926,
      12933,
      12945,
      12947,
      12952,
      12959,
      12971,
      12973,
      12979,
      12987,
      12999,
      13001,
      13006,
      13013,
      13025,
      13027,
      13032,
      13039,
      13051,
      13057
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.ZeroOrMore": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.ZeroOrMore"
  },
  "type": "import"
 },
 "libcst.matchers.ZeroOrOne": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.ZeroOrOne"
  },
  "type": "import"
 },
 "libcst.matchers.__all__": {
  "data": {
   "lineno": 13065
  },
  "type": "constant"
 },
 "libcst.matchers._decorators": {
  "data": {
   "symbols_in_volume": {
    "str": {
     "line number": [
      14,
      15,
      16,
      17
     ]
    },
    "typing.TypeVar": {
     "line number": [
      11
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst.matchers._decorators.BaseMatcherNode": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.BaseMatcherNode"
  },
  "type": "import"
 },
 "libcst.matchers._decorators.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst.matchers._decorators.TypeVar": {
  "data": {
   "shadows": "typing.TypeVar"
  },
  "type": "import"
 },
 "libcst.matchers._decorators._CSTVisitFuncT": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "libcst.matchers._decorators.call_if_inside": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "libcst.matchers._decorators._CSTVisitFuncT": {
     "line number": [
      22,
      22
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      21
     ]
    },
    "typing.Callable": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._decorators.call_if_inside.inner": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      38
     ]
    },
    "hasattr": {
     "line number": [
      33
     ]
    },
    "libcst.matchers._decorators._CSTVisitFuncT": {
     "line number": [
      32,
      32
     ]
    },
    "setattr": {
     "line number": [
      34,
      35
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._decorators.call_if_not_inside": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "libcst.matchers._decorators._CSTVisitFuncT": {
     "line number": [
      47,
      47
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      46
     ]
    },
    "typing.Callable": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._decorators.call_if_not_inside.inner": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      64
     ]
    },
    "hasattr": {
     "line number": [
      59
     ]
    },
    "libcst.matchers._decorators._CSTVisitFuncT": {
     "line number": [
      58,
      58
     ]
    },
    "setattr": {
     "line number": [
      60,
      61
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._decorators.leave": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": {
    "libcst.matchers._decorators._CSTVisitFuncT": {
     "line number": [
      101,
      101
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      101
     ]
    },
    "typing.Callable": {
     "line number": [
      101
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._decorators.leave.inner": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      121
     ]
    },
    "hasattr": {
     "line number": [
      116
     ]
    },
    "libcst.matchers._decorators._CSTVisitFuncT": {
     "line number": [
      115,
      115
     ]
    },
    "setattr": {
     "line number": [
      117,
      118
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._decorators.visit": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": {
    "libcst.matchers._decorators._CSTVisitFuncT": {
     "line number": [
      71,
      71
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      71
     ]
    },
    "typing.Callable": {
     "line number": [
      71
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._decorators.visit.inner": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      94
     ]
    },
    "hasattr": {
     "line number": [
      89
     ]
    },
    "libcst.matchers._decorators._CSTVisitFuncT": {
     "line number": [
      88,
      88
     ]
    },
    "setattr": {
     "line number": [
      90,
      91
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._return_types": {
  "data": {
   "symbols_in_volume": {
    "libcst._maybe_sentinel.MaybeSentinel": {
     "line number": [
      190,
      208,
      209,
      261,
      286,
      287,
      288,
      290,
      298,
      302,
      308
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      180
     ]
    },
    "libcst._nodes.expression.Annotation": {
     "line number": [
      185,
      185
     ]
    },
    "libcst._nodes.expression.Arg": {
     "line number": [
      186,
      186
     ]
    },
    "libcst._nodes.expression.Asynchronous": {
     "line number": [
      192,
      192
     ]
    },
    "libcst._nodes.expression.Attribute": {
     "line number": [
      193
     ]
    },
    "libcst._nodes.expression.Await": {
     "line number": [
      195
     ]
    },
    "libcst._nodes.expression.BaseDictElement": {
     "line number": [
      221,
      310
     ]
    },
    "libcst._nodes.expression.BaseElement": {
     "line number": [
      225,
      311
     ]
    },
    "libcst._nodes.expression.BaseExpression": {
     "line number": [
      193,
      195,
      196,
      204,
      206,
      213,
      215,
      219,
      220,
      226,
      233,
      237,
      242,
      247,
      248,
      256,
      259,
      267,
      268,
      277,
      279,
      303,
      304,
      307,
      312,
      318,
      319,
      323
     ]
    },
    "libcst._nodes.expression.BaseFormattedStringContent": {
     "line number": [
      238,
      239
     ]
    },
    "libcst._nodes.expression.BaseSlice": {
     "line number": [
      255,
      309
     ]
    },
    "libcst._nodes.expression.BinaryOperation": {
     "line number": [
      196
     ]
    },
    "libcst._nodes.expression.BooleanOperation": {
     "line number": [
      204
     ]
    },
    "libcst._nodes.expression.Call": {
     "line number": [
      206
     ]
    },
    "libcst._nodes.expression.CompFor": {
     "line number": [
      211,
      211
     ]
    },
    "libcst._nodes.expression.CompIf": {
     "line number": [
      212,
      212
     ]
    },
    "libcst._nodes.expression.Comparison": {
     "line number": [
      213
     ]
    },
    "libcst._nodes.expression.ComparisonTarget": {
     "line number": [
      214,
      214
     ]
    },
    "libcst._nodes.expression.ConcatenatedString": {
     "line number": [
      215
     ]
    },
    "libcst._nodes.expression.Dict": {
     "line number": [
      219
     ]
    },
    "libcst._nodes.expression.DictComp": {
     "line number": [
      220
     ]
    },
    "libcst._nodes.expression.DictElement": {
     "line number": [
      221
     ]
    },
    "libcst._nodes.expression.Element": {
     "line number": [
      225
     ]
    },
    "libcst._nodes.expression.Ellipsis": {
     "line number": [
      226
     ]
    },
    "libcst._nodes.expression.Float": {
     "line number": [
      233
     ]
    },
    "libcst._nodes.expression.FormattedString": {
     "line number": [
      237
     ]
    },
    "libcst._nodes.expression.FormattedStringExpression": {
     "line number": [
      238
     ]
    },
    "libcst._nodes.expression.FormattedStringText": {
     "line number": [
      239
     ]
    },
    "libcst._nodes.expression.From": {
     "line number": [
      240,
      240
     ]
    },
    "libcst._nodes.expression.GeneratorExp": {
     "line number": [
      242
     ]
    },
    "libcst._nodes.expression.IfExp": {
     "line number": [
      247
     ]
    },
    "libcst._nodes.expression.Imaginary": {
     "line number": [
      248
     ]
    },
    "libcst._nodes.expression.Index": {
     "line number": [
      255
     ]
    },
    "libcst._nodes.expression.Integer": {
     "line number": [
      256
     ]
    },
    "libcst._nodes.expression.Lambda": {
     "line number": [
      259
     ]
    },
    "libcst._nodes.expression.LeftCurlyBrace": {
     "line number": [
      260,
      260
     ]
    },
    "libcst._nodes.expression.LeftParen": {
     "line number": [
      261,
      261
     ]
    },
    "libcst._nodes.expression.LeftSquareBracket": {
     "line number": [
      264,
      264
     ]
    },
    "libcst._nodes.expression.List": {
     "line number": [
      267
     ]
    },
    "libcst._nodes.expression.ListComp": {
     "line number": [
      268
     ]
    },
    "libcst._nodes.expression.Name": {
     "line number": [
      277
     ]
    },
    "libcst._nodes.expression.NamedExpr": {
     "line number": [
      279
     ]
    },
    "libcst._nodes.expression.Param": {
     "line number": [
      286,
      286
     ]
    },
    "libcst._nodes.expression.ParamSlash": {
     "line number": [
      287,
      287
     ]
    },
    "libcst._nodes.expression.ParamStar": {
     "line number": [
      288,
      288
     ]
    },
    "libcst._nodes.expression.Parameters": {
     "line number": [
      289,
      289
     ]
    },
    "libcst._nodes.expression.RightCurlyBrace": {
     "line number": [
      297,
      297
     ]
    },
    "libcst._nodes.expression.RightParen": {
     "line number": [
      298,
      298
     ]
    },
    "libcst._nodes.expression.RightSquareBracket": {
     "line number": [
      301,
      301
     ]
    },
    "libcst._nodes.expression.Set": {
     "line number": [
      303
     ]
    },
    "libcst._nodes.expression.SetComp": {
     "line number": [
      304
     ]
    },
    "libcst._nodes.expression.SimpleString": {
     "line number": [
      307
     ]
    },
    "libcst._nodes.expression.Slice": {
     "line number": [
      309
     ]
    },
    "libcst._nodes.expression.StarredDictElement": {
     "line number": [
      310
     ]
    },
    "libcst._nodes.expression.StarredElement": {
     "line number": [
      311
     ]
    },
    "libcst._nodes.expression.Subscript": {
     "line number": [
      312
     ]
    },
    "libcst._nodes.expression.SubscriptElement": {
     "line number": [
      313,
      313
     ]
    },
    "libcst._nodes.expression.Tuple": {
     "line number": [
      318
     ]
    },
    "libcst._nodes.expression.UnaryOperation": {
     "line number": [
      319
     ]
    },
    "libcst._nodes.expression.Yield": {
     "line number": [
      323
     ]
    },
    "libcst._nodes.module.Module": {
     "line number": [
      272,
      272
     ]
    },
    "libcst._nodes.op.Add": {
     "line number": [
      181
     ]
    },
    "libcst._nodes.op.AddAssign": {
     "line number": [
      182
     ]
    },
    "libcst._nodes.op.And": {
     "line number": [
      183
     ]
    },
    "libcst._nodes.op.AssignEqual": {
     "line number": [
      190,
      190
     ]
    },
    "libcst._nodes.op.BaseAugOp": {
     "line number": [
      182,
      198,
      201,
      203,
      223,
      235,
      263,
      270,
      274,
      276,
      294,
      300,
      315
     ]
    },
    "libcst._nodes.op.BaseBinaryOp": {
     "line number": [
      181,
      197,
      200,
      202,
      222,
      234,
      262,
      269,
      273,
      275,
      293,
      299,
      314
     ]
    },
    "libcst._nodes.op.BaseBooleanOp": {
     "line number": [
      183,
      285
     ]
    },
    "libcst._nodes.op.BaseCompOp": {
     "line number": [
      229,
      244,
      245,
      253,
      257,
      258,
      265,
      266,
      283,
      284
     ]
    },
    "libcst._nodes.op.BaseUnaryOp": {
     "line number": [
      199,
      271,
      282,
      292
     ]
    },
    "libcst._nodes.op.BitAnd": {
     "line number": [
      197
     ]
    },
    "libcst._nodes.op.BitAndAssign": {
     "line number": [
      198
     ]
    },
    "libcst._nodes.op.BitInvert": {
     "line number": [
      199
     ]
    },
    "libcst._nodes.op.BitOr": {
     "line number": [
      200
     ]
    },
    "libcst._nodes.op.BitOrAssign": {
     "line number": [
      201
     ]
    },
    "libcst._nodes.op.BitXor": {
     "line number": [
      202
     ]
    },
    "libcst._nodes.op.BitXorAssign": {
     "line number": [
      203
     ]
    },
    "libcst._nodes.op.Colon": {
     "line number": [
      208,
      208
     ]
    },
    "libcst._nodes.op.Comma": {
     "line number": [
      209,
      209
     ]
    },
    "libcst._nodes.op.Divide": {
     "line number": [
      222
     ]
    },
    "libcst._nodes.op.DivideAssign": {
     "line number": [
      223
     ]
    },
    "libcst._nodes.op.Dot": {
     "line number": [
      224,
      224
     ]
    },
    "libcst._nodes.op.Equal": {
     "line number": [
      229
     ]
    },
    "libcst._nodes.op.FloorDivide": {
     "line number": [
      234
     ]
    },
    "libcst._nodes.op.FloorDivideAssign": {
     "line number": [
      235
     ]
    },
    "libcst._nodes.op.GreaterThan": {
     "line number": [
      244
     ]
    },
    "libcst._nodes.op.GreaterThanEqual": {
     "line number": [
      245
     ]
    },
    "libcst._nodes.op.ImportStar": {
     "line number": [
      252,
      252
     ]
    },
    "libcst._nodes.op.In": {
     "line number": [
      253
     ]
    },
    "libcst._nodes.op.Is": {
     "line number": [
      257
     ]
    },
    "libcst._nodes.op.IsNot": {
     "line number": [
      258
     ]
    },
    "libcst._nodes.op.LeftShift": {
     "line number": [
      262
     ]
    },
    "libcst._nodes.op.LeftShiftAssign": {
     "line number": [
      263
     ]
    },
    "libcst._nodes.op.LessThan": {
     "line number": [
      265
     ]
    },
    "libcst._nodes.op.LessThanEqual": {
     "line number": [
      266
     ]
    },
    "libcst._nodes.op.MatrixMultiply": {
     "line number": [
      269
     ]
    },
    "libcst._nodes.op.MatrixMultiplyAssign": {
     "line number": [
      270
     ]
    },
    "libcst._nodes.op.Minus": {
     "line number": [
      271
     ]
    },
    "libcst._nodes.op.Modulo": {
     "line number": [
      273
     ]
    },
    "libcst._nodes.op.ModuloAssign": {
     "line number": [
      274
     ]
    },
    "libcst._nodes.op.Multiply": {
     "line number": [
      275
     ]
    },
    "libcst._nodes.op.MultiplyAssign": {
     "line number": [
      276
     ]
    },
    "libcst._nodes.op.Not": {
     "line number": [
      282
     ]
    },
    "libcst._nodes.op.NotEqual": {
     "line number": [
      283
     ]
    },
    "libcst._nodes.op.NotIn": {
     "line number": [
      284
     ]
    },
    "libcst._nodes.op.Or": {
     "line number": [
      285
     ]
    },
    "libcst._nodes.op.Plus": {
     "line number": [
      292
     ]
    },
    "libcst._nodes.op.Power": {
     "line number": [
      293
     ]
    },
    "libcst._nodes.op.PowerAssign": {
     "line number": [
      294
     ]
    },
    "libcst._nodes.op.RightShift": {
     "line number": [
      299
     ]
    },
    "libcst._nodes.op.RightShiftAssign": {
     "line number": [
      300
     ]
    },
    "libcst._nodes.op.Semicolon": {
     "line number": [
      302,
      302
     ]
    },
    "libcst._nodes.op.Subtract": {
     "line number": [
      314
     ]
    },
    "libcst._nodes.op.SubtractAssign": {
     "line number": [
      315
     ]
    },
    "libcst._nodes.statement.AnnAssign": {
     "line number": [
      184
     ]
    },
    "libcst._nodes.statement.AsName": {
     "line number": [
      187,
      187
     ]
    },
    "libcst._nodes.statement.Assert": {
     "line number": [
      188
     ]
    },
    "libcst._nodes.statement.Assign": {
     "line number": [
      189
     ]
    },
    "libcst._nodes.statement.AssignTarget": {
     "line number": [
      191,
      191
     ]
    },
    "libcst._nodes.statement.AugAssign": {
     "line number": [
      194
     ]
    },
    "libcst._nodes.statement.BaseSmallStatement": {
     "line number": [
      184,
      188,
      189,
      194,
      205,
      216,
      218,
      231,
      243,
      249,
      251,
      281,
      291,
      295,
      296
     ]
    },
    "libcst._nodes.statement.BaseStatement": {
     "line number": [
      207,
      236,
      241,
      246,
      305,
      317,
      320,
      321
     ]
    },
    "libcst._nodes.statement.BaseSuite": {
     "line number": [
      254,
      306
     ]
    },
    "libcst._nodes.statement.Break": {
     "line number": [
      205
     ]
    },
    "libcst._nodes.statement.ClassDef": {
     "line number": [
      207
     ]
    },
    "libcst._nodes.statement.Continue": {
     "line number": [
      216
     ]
    },
    "libcst._nodes.statement.Decorator": {
     "line number": [
      217,
      217
     ]
    },
    "libcst._nodes.statement.Del": {
     "line number": [
      218
     ]
    },
    "libcst._nodes.statement.Else": {
     "line number": [
      227,
      227
     ]
    },
    "libcst._nodes.statement.ExceptHandler": {
     "line number": [
      230,
      230
     ]
    },
    "libcst._nodes.statement.Expr": {
     "line number": [
      231
     ]
    },
    "libcst._nodes.statement.Finally": {
     "line number": [
      232,
      232
     ]
    },
    "libcst._nodes.statement.For": {
     "line number": [
      236
     ]
    },
    "libcst._nodes.statement.FunctionDef": {
     "line number": [
      241
     ]
    },
    "libcst._nodes.statement.Global": {
     "line number": [
      243
     ]
    },
    "libcst._nodes.statement.If": {
     "line number": [
      246
     ]
    },
    "libcst._nodes.statement.Import": {
     "line number": [
      249
     ]
    },
    "libcst._nodes.statement.ImportAlias": {
     "line number": [
      250,
      250
     ]
    },
    "libcst._nodes.statement.ImportFrom": {
     "line number": [
      251
     ]
    },
    "libcst._nodes.statement.IndentedBlock": {
     "line number": [
      254
     ]
    },
    "libcst._nodes.statement.NameItem": {
     "line number": [
      278,
      278
     ]
    },
    "libcst._nodes.statement.Nonlocal": {
     "line number": [
      281
     ]
    },
    "libcst._nodes.statement.Pass": {
     "line number": [
      291
     ]
    },
    "libcst._nodes.statement.Raise": {
     "line number": [
      295
     ]
    },
    "libcst._nodes.statement.Return": {
     "line number": [
      296
     ]
    },
    "libcst._nodes.statement.SimpleStatementLine": {
     "line number": [
      305
     ]
    },
    "libcst._nodes.statement.SimpleStatementSuite": {
     "line number": [
      306
     ]
    },
    "libcst._nodes.statement.Try": {
     "line number": [
      317
     ]
    },
    "libcst._nodes.statement.While": {
     "line number": [
      320
     ]
    },
    "libcst._nodes.statement.With": {
     "line number": [
      321
     ]
    },
    "libcst._nodes.statement.WithItem": {
     "line number": [
      322,
      322
     ]
    },
    "libcst._nodes.whitespace.BaseParenthesizableWhitespace": {
     "line number": [
      290,
      308
     ]
    },
    "libcst._nodes.whitespace.Comment": {
     "line number": [
      210,
      210
     ]
    },
    "libcst._nodes.whitespace.EmptyLine": {
     "line number": [
      228,
      228
     ]
    },
    "libcst._nodes.whitespace.Newline": {
     "line number": [
      280,
      280
     ]
    },
    "libcst._nodes.whitespace.ParenthesizedWhitespace": {
     "line number": [
      290
     ]
    },
    "libcst._nodes.whitespace.SimpleWhitespace": {
     "line number": [
      308
     ]
    },
    "libcst._nodes.whitespace.TrailingWhitespace": {
     "line number": [
      316,
      316
     ]
    },
    "libcst._removal_sentinel.RemovalSentinel": {
     "line number": [
      184,
      186,
      188,
      189,
      191,
      194,
      205,
      207,
      214,
      216,
      217,
      218,
      221,
      224,
      225,
      228,
      230,
      231,
      236,
      238,
      239,
      241,
      243,
      246,
      249,
      250,
      251,
      261,
      278,
      281,
      286,
      291,
      295,
      296,
      298,
      305,
      310,
      311,
      313,
      317,
      320,
      321,
      322
     ]
    },
    "object": {
     "line number": [
      180
     ]
    },
    "typing.Dict": {
     "line number": [
      180
     ]
    },
    "typing.Type": {
     "line number": [
      180
     ]
    },
    "typing.Union": {
     "line number": [
      184,
      186,
      188,
      189,
      190,
      191,
      194,
      205,
      207,
      208,
      209,
      214,
      216,
      217,
      218,
      221,
      224,
      225,
      228,
      230,
      231,
      236,
      238,
      239,
      241,
      243,
      246,
      249,
      250,
      251,
      261,
      278,
      281,
      286,
      287,
      288,
      290,
      291,
      295,
      296,
      298,
      302,
      305,
      308,
      310,
      311,
      313,
      317,
      320,
      321,
      322
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst.matchers._return_types.Add": {
  "data": {
   "shadows": "libcst._nodes.op.Add"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.AddAssign": {
  "data": {
   "shadows": "libcst._nodes.op.AddAssign"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.And": {
  "data": {
   "shadows": "libcst._nodes.op.And"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.AnnAssign": {
  "data": {
   "shadows": "libcst._nodes.statement.AnnAssign"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Annotation": {
  "data": {
   "shadows": "libcst._nodes.expression.Annotation"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Arg": {
  "data": {
   "shadows": "libcst._nodes.expression.Arg"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.AsName": {
  "data": {
   "shadows": "libcst._nodes.statement.AsName"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Assert": {
  "data": {
   "shadows": "libcst._nodes.statement.Assert"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Assign": {
  "data": {
   "shadows": "libcst._nodes.statement.Assign"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.AssignEqual": {
  "data": {
   "shadows": "libcst._nodes.op.AssignEqual"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.AssignTarget": {
  "data": {
   "shadows": "libcst._nodes.statement.AssignTarget"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Asynchronous": {
  "data": {
   "shadows": "libcst._nodes.expression.Asynchronous"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Attribute": {
  "data": {
   "shadows": "libcst._nodes.expression.Attribute"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.AugAssign": {
  "data": {
   "shadows": "libcst._nodes.statement.AugAssign"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Await": {
  "data": {
   "shadows": "libcst._nodes.expression.Await"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.BaseAugOp": {
  "data": {
   "shadows": "libcst._nodes.op.BaseAugOp"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.BaseBinaryOp": {
  "data": {
   "shadows": "libcst._nodes.op.BaseBinaryOp"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.BaseBooleanOp": {
  "data": {
   "shadows": "libcst._nodes.op.BaseBooleanOp"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.BaseCompOp": {
  "data": {
   "shadows": "libcst._nodes.op.BaseCompOp"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.BaseDictElement": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseDictElement"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.BaseElement": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseElement"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.BaseExpression": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseExpression"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.BaseFormattedStringContent": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseFormattedStringContent"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.BaseParenthesizableWhitespace": {
  "data": {
   "shadows": "libcst._nodes.whitespace.BaseParenthesizableWhitespace"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.BaseSlice": {
  "data": {
   "shadows": "libcst._nodes.expression.BaseSlice"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.BaseSmallStatement": {
  "data": {
   "shadows": "libcst._nodes.statement.BaseSmallStatement"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.BaseStatement": {
  "data": {
   "shadows": "libcst._nodes.statement.BaseStatement"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.BaseSuite": {
  "data": {
   "shadows": "libcst._nodes.statement.BaseSuite"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.BaseUnaryOp": {
  "data": {
   "shadows": "libcst._nodes.op.BaseUnaryOp"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.BinaryOperation": {
  "data": {
   "shadows": "libcst._nodes.expression.BinaryOperation"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.BitAnd": {
  "data": {
   "shadows": "libcst._nodes.op.BitAnd"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.BitAndAssign": {
  "data": {
   "shadows": "libcst._nodes.op.BitAndAssign"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.BitInvert": {
  "data": {
   "shadows": "libcst._nodes.op.BitInvert"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.BitOr": {
  "data": {
   "shadows": "libcst._nodes.op.BitOr"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.BitOrAssign": {
  "data": {
   "shadows": "libcst._nodes.op.BitOrAssign"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.BitXor": {
  "data": {
   "shadows": "libcst._nodes.op.BitXor"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.BitXorAssign": {
  "data": {
   "shadows": "libcst._nodes.op.BitXorAssign"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.BooleanOperation": {
  "data": {
   "shadows": "libcst._nodes.expression.BooleanOperation"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Break": {
  "data": {
   "shadows": "libcst._nodes.statement.Break"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.CSTNode": {
  "data": {
   "shadows": "libcst._nodes.base.CSTNode"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Call": {
  "data": {
   "shadows": "libcst._nodes.expression.Call"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.ClassDef": {
  "data": {
   "shadows": "libcst._nodes.statement.ClassDef"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Colon": {
  "data": {
   "shadows": "libcst._nodes.op.Colon"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Comma": {
  "data": {
   "shadows": "libcst._nodes.op.Comma"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Comment": {
  "data": {
   "shadows": "libcst._nodes.whitespace.Comment"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.CompFor": {
  "data": {
   "shadows": "libcst._nodes.expression.CompFor"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.CompIf": {
  "data": {
   "shadows": "libcst._nodes.expression.CompIf"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Comparison": {
  "data": {
   "shadows": "libcst._nodes.expression.Comparison"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.ComparisonTarget": {
  "data": {
   "shadows": "libcst._nodes.expression.ComparisonTarget"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.ConcatenatedString": {
  "data": {
   "shadows": "libcst._nodes.expression.ConcatenatedString"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Continue": {
  "data": {
   "shadows": "libcst._nodes.statement.Continue"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Decorator": {
  "data": {
   "shadows": "libcst._nodes.statement.Decorator"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Del": {
  "data": {
   "shadows": "libcst._nodes.statement.Del"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Dict": {
  "data": {
   "shadows": "libcst._nodes.expression.Dict"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.DictComp": {
  "data": {
   "shadows": "libcst._nodes.expression.DictComp"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.DictElement": {
  "data": {
   "shadows": "libcst._nodes.expression.DictElement"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Divide": {
  "data": {
   "shadows": "libcst._nodes.op.Divide"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.DivideAssign": {
  "data": {
   "shadows": "libcst._nodes.op.DivideAssign"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Dot": {
  "data": {
   "shadows": "libcst._nodes.op.Dot"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Element": {
  "data": {
   "shadows": "libcst._nodes.expression.Element"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Ellipsis": {
  "data": {
   "shadows": "libcst._nodes.expression.Ellipsis"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Else": {
  "data": {
   "shadows": "libcst._nodes.statement.Else"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.EmptyLine": {
  "data": {
   "shadows": "libcst._nodes.whitespace.EmptyLine"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Equal": {
  "data": {
   "shadows": "libcst._nodes.op.Equal"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.ExceptHandler": {
  "data": {
   "shadows": "libcst._nodes.statement.ExceptHandler"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Expr": {
  "data": {
   "shadows": "libcst._nodes.statement.Expr"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Finally": {
  "data": {
   "shadows": "libcst._nodes.statement.Finally"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Float": {
  "data": {
   "shadows": "libcst._nodes.expression.Float"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.FloorDivide": {
  "data": {
   "shadows": "libcst._nodes.op.FloorDivide"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.FloorDivideAssign": {
  "data": {
   "shadows": "libcst._nodes.op.FloorDivideAssign"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.For": {
  "data": {
   "shadows": "libcst._nodes.statement.For"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.FormattedString": {
  "data": {
   "shadows": "libcst._nodes.expression.FormattedString"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.FormattedStringExpression": {
  "data": {
   "shadows": "libcst._nodes.expression.FormattedStringExpression"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.FormattedStringText": {
  "data": {
   "shadows": "libcst._nodes.expression.FormattedStringText"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.From": {
  "data": {
   "shadows": "libcst._nodes.expression.From"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.FunctionDef": {
  "data": {
   "shadows": "libcst._nodes.statement.FunctionDef"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.GeneratorExp": {
  "data": {
   "shadows": "libcst._nodes.expression.GeneratorExp"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Global": {
  "data": {
   "shadows": "libcst._nodes.statement.Global"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.GreaterThan": {
  "data": {
   "shadows": "libcst._nodes.op.GreaterThan"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.GreaterThanEqual": {
  "data": {
   "shadows": "libcst._nodes.op.GreaterThanEqual"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.If": {
  "data": {
   "shadows": "libcst._nodes.statement.If"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.IfExp": {
  "data": {
   "shadows": "libcst._nodes.expression.IfExp"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Imaginary": {
  "data": {
   "shadows": "libcst._nodes.expression.Imaginary"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Import": {
  "data": {
   "shadows": "libcst._nodes.statement.Import"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.ImportAlias": {
  "data": {
   "shadows": "libcst._nodes.statement.ImportAlias"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.ImportFrom": {
  "data": {
   "shadows": "libcst._nodes.statement.ImportFrom"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.ImportStar": {
  "data": {
   "shadows": "libcst._nodes.op.ImportStar"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.In": {
  "data": {
   "shadows": "libcst._nodes.op.In"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.IndentedBlock": {
  "data": {
   "shadows": "libcst._nodes.statement.IndentedBlock"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Index": {
  "data": {
   "shadows": "libcst._nodes.expression.Index"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Integer": {
  "data": {
   "shadows": "libcst._nodes.expression.Integer"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Is": {
  "data": {
   "shadows": "libcst._nodes.op.Is"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.IsNot": {
  "data": {
   "shadows": "libcst._nodes.op.IsNot"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Lambda": {
  "data": {
   "shadows": "libcst._nodes.expression.Lambda"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.LeftCurlyBrace": {
  "data": {
   "shadows": "libcst._nodes.expression.LeftCurlyBrace"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.LeftParen": {
  "data": {
   "shadows": "libcst._nodes.expression.LeftParen"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.LeftShift": {
  "data": {
   "shadows": "libcst._nodes.op.LeftShift"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.LeftShiftAssign": {
  "data": {
   "shadows": "libcst._nodes.op.LeftShiftAssign"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.LeftSquareBracket": {
  "data": {
   "shadows": "libcst._nodes.expression.LeftSquareBracket"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.LessThan": {
  "data": {
   "shadows": "libcst._nodes.op.LessThan"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.LessThanEqual": {
  "data": {
   "shadows": "libcst._nodes.op.LessThanEqual"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.List": {
  "data": {
   "shadows": "libcst._nodes.expression.List"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.ListComp": {
  "data": {
   "shadows": "libcst._nodes.expression.ListComp"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.MatrixMultiply": {
  "data": {
   "shadows": "libcst._nodes.op.MatrixMultiply"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.MatrixMultiplyAssign": {
  "data": {
   "shadows": "libcst._nodes.op.MatrixMultiplyAssign"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.MaybeSentinel": {
  "data": {
   "shadows": "libcst._maybe_sentinel.MaybeSentinel"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Minus": {
  "data": {
   "shadows": "libcst._nodes.op.Minus"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Module": {
  "data": {
   "shadows": "libcst._nodes.module.Module"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Modulo": {
  "data": {
   "shadows": "libcst._nodes.op.Modulo"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.ModuloAssign": {
  "data": {
   "shadows": "libcst._nodes.op.ModuloAssign"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Multiply": {
  "data": {
   "shadows": "libcst._nodes.op.Multiply"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.MultiplyAssign": {
  "data": {
   "shadows": "libcst._nodes.op.MultiplyAssign"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Name": {
  "data": {
   "shadows": "libcst._nodes.expression.Name"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.NameItem": {
  "data": {
   "shadows": "libcst._nodes.statement.NameItem"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.NamedExpr": {
  "data": {
   "shadows": "libcst._nodes.expression.NamedExpr"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Newline": {
  "data": {
   "shadows": "libcst._nodes.whitespace.Newline"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Nonlocal": {
  "data": {
   "shadows": "libcst._nodes.statement.Nonlocal"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Not": {
  "data": {
   "shadows": "libcst._nodes.op.Not"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.NotEqual": {
  "data": {
   "shadows": "libcst._nodes.op.NotEqual"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.NotIn": {
  "data": {
   "shadows": "libcst._nodes.op.NotIn"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Or": {
  "data": {
   "shadows": "libcst._nodes.op.Or"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Param": {
  "data": {
   "shadows": "libcst._nodes.expression.Param"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.ParamSlash": {
  "data": {
   "shadows": "libcst._nodes.expression.ParamSlash"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.ParamStar": {
  "data": {
   "shadows": "libcst._nodes.expression.ParamStar"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Parameters": {
  "data": {
   "shadows": "libcst._nodes.expression.Parameters"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.ParenthesizedWhitespace": {
  "data": {
   "shadows": "libcst._nodes.whitespace.ParenthesizedWhitespace"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Pass": {
  "data": {
   "shadows": "libcst._nodes.statement.Pass"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Plus": {
  "data": {
   "shadows": "libcst._nodes.op.Plus"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Power": {
  "data": {
   "shadows": "libcst._nodes.op.Power"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.PowerAssign": {
  "data": {
   "shadows": "libcst._nodes.op.PowerAssign"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Raise": {
  "data": {
   "shadows": "libcst._nodes.statement.Raise"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.RemovalSentinel": {
  "data": {
   "shadows": "libcst._removal_sentinel.RemovalSentinel"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Return": {
  "data": {
   "shadows": "libcst._nodes.statement.Return"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.RightCurlyBrace": {
  "data": {
   "shadows": "libcst._nodes.expression.RightCurlyBrace"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.RightParen": {
  "data": {
   "shadows": "libcst._nodes.expression.RightParen"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.RightShift": {
  "data": {
   "shadows": "libcst._nodes.op.RightShift"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.RightShiftAssign": {
  "data": {
   "shadows": "libcst._nodes.op.RightShiftAssign"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.RightSquareBracket": {
  "data": {
   "shadows": "libcst._nodes.expression.RightSquareBracket"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Semicolon": {
  "data": {
   "shadows": "libcst._nodes.op.Semicolon"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Set": {
  "data": {
   "shadows": "libcst._nodes.expression.Set"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.SetComp": {
  "data": {
   "shadows": "libcst._nodes.expression.SetComp"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.SimpleStatementLine": {
  "data": {
   "shadows": "libcst._nodes.statement.SimpleStatementLine"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.SimpleStatementSuite": {
  "data": {
   "shadows": "libcst._nodes.statement.SimpleStatementSuite"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.SimpleString": {
  "data": {
   "shadows": "libcst._nodes.expression.SimpleString"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.SimpleWhitespace": {
  "data": {
   "shadows": "libcst._nodes.whitespace.SimpleWhitespace"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Slice": {
  "data": {
   "shadows": "libcst._nodes.expression.Slice"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.StarredDictElement": {
  "data": {
   "shadows": "libcst._nodes.expression.StarredDictElement"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.StarredElement": {
  "data": {
   "shadows": "libcst._nodes.expression.StarredElement"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Subscript": {
  "data": {
   "shadows": "libcst._nodes.expression.Subscript"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.SubscriptElement": {
  "data": {
   "shadows": "libcst._nodes.expression.SubscriptElement"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Subtract": {
  "data": {
   "shadows": "libcst._nodes.op.Subtract"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.SubtractAssign": {
  "data": {
   "shadows": "libcst._nodes.op.SubtractAssign"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.TrailingWhitespace": {
  "data": {
   "shadows": "libcst._nodes.whitespace.TrailingWhitespace"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Try": {
  "data": {
   "shadows": "libcst._nodes.statement.Try"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Tuple": {
  "data": {
   "shadows": "libcst._nodes.expression.Tuple"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Type": {
  "data": {
   "shadows": "typing.Type"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.TypingDict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.UnaryOperation": {
  "data": {
   "shadows": "libcst._nodes.expression.UnaryOperation"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.While": {
  "data": {
   "shadows": "libcst._nodes.statement.While"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.With": {
  "data": {
   "shadows": "libcst._nodes.statement.With"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.WithItem": {
  "data": {
   "shadows": "libcst._nodes.statement.WithItem"
  },
  "type": "import"
 },
 "libcst.matchers._return_types.Yield": {
  "data": {
   "shadows": "libcst._nodes.expression.Yield"
  },
  "type": "import"
 },
 "libcst.matchers._visitors": {
  "data": {
   "symbols_in_volume": {
    "libcst.matchers._return_types.TYPED_FUNCTION_RETURN_MAPPING": {
     "line number": [
      50,
      51
     ]
    },
    "str": {
     "line number": [
      49
     ]
    },
    "typing.Set": {
     "line number": [
      49
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst.matchers._visitors.AllOf": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.AllOf"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.AtLeastN": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.AtLeastN"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.AtMostN": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.AtMostN"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.BaseMatcherNode": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.BaseMatcherNode"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.CONSTRUCTED_LEAVE_MATCHER_ATTR": {
  "data": {
   "shadows": "libcst.matchers._decorators.CONSTRUCTED_LEAVE_MATCHER_ATTR"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.CONSTRUCTED_VISIT_MATCHER_ATTR": {
  "data": {
   "shadows": "libcst.matchers._decorators.CONSTRUCTED_VISIT_MATCHER_ATTR"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.CSTNodeT": {
  "data": {
   "shadows": "libcst._types.CSTNodeT"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.CSTTransformer": {
  "data": {
   "shadows": "libcst.CSTTransformer"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.CSTVisitor": {
  "data": {
   "shadows": "libcst.CSTVisitor"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.MatchDecoratorMismatch": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      60
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers._visitors.MatchDecoratorMismatch.__init__": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "str": {
     "line number": [
      61,
      61
     ]
    },
    "super": {
     "line number": [
      62
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors.MatchDecoratorMismatch.__reduce__": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": {
    "libcst.matchers._visitors._match_decorator_unpickler": {
     "line number": [
      70
     ]
    },
    "object": {
     "line number": [
      68
     ]
    },
    "typing.Callable": {
     "line number": [
      68
     ]
    },
    "typing.Tuple": {
     "line number": [
      68,
      68
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors.MatchIfTrue": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.MatchIfTrue"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.MatchMetadata": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.MatchMetadata"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.MatchMetadataIfTrue": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.MatchMetadataIfTrue"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.MatcherDecoratableTransformer": {
  "data": {
   "lineno": 428,
   "symbols_in_volume": {
    "libcst.CSTTransformer": {
     "line number": [
      428
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers._visitors.MatcherDecoratableTransformer.__init__": {
  "data": {
   "lineno": 436,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      441,
      448,
      457,
      457,
      457
     ]
    },
    "libcst.CSTTransformer.__init__": {
     "line number": [
      437
     ]
    },
    "libcst.RemovalSentinel": {
     "line number": [
      457
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      441,
      448,
      454
     ]
    },
    "libcst.matchers._visitors._check_types": {
     "line number": [
      463,
      469
     ]
    },
    "libcst.matchers._visitors._gather_constructed_leave_funcs": {
     "line number": [
      460
     ]
    },
    "libcst.matchers._visitors._gather_constructed_visit_funcs": {
     "line number": [
      449
     ]
    },
    "libcst.matchers._visitors._gather_matchers": {
     "line number": [
      442
     ]
    },
    "typing.Callable": {
     "line number": [
      448,
      456
     ]
    },
    "typing.Dict": {
     "line number": [
      441,
      447,
      453
     ]
    },
    "typing.Optional": {
     "line number": [
      441
     ]
    },
    "typing.Sequence": {
     "line number": [
      448,
      455
     ]
    },
    "typing.Union": {
     "line number": [
      457
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors.MatcherDecoratableTransformer.extract": {
  "data": {
   "lineno": 578,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      580,
      582,
      582
     ]
    },
    "libcst.MaybeSentinel": {
     "line number": [
      580
     ]
    },
    "libcst.RemovalSentinel": {
     "line number": [
      580
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      581
     ]
    },
    "libcst.matchers._matcher_base.extract": {
     "line number": [
      590
     ]
    },
    "str": {
     "line number": [
      582
     ]
    },
    "typing.Dict": {
     "line number": [
      582
     ]
    },
    "typing.Optional": {
     "line number": [
      582
     ]
    },
    "typing.Sequence": {
     "line number": [
      582
     ]
    },
    "typing.Union": {
     "line number": [
      580,
      582
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors.MatcherDecoratableTransformer.extractall": {
  "data": {
   "lineno": 592,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      597
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      594,
      601,
      601
     ]
    },
    "libcst.MaybeSentinel": {
     "line number": [
      594
     ]
    },
    "libcst.RemovalSentinel": {
     "line number": [
      594
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      596
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      597
     ]
    },
    "libcst.matchers._matcher_base.MatchMetadata": {
     "line number": [
      598
     ]
    },
    "libcst.matchers._matcher_base.MatchMetadataIfTrue": {
     "line number": [
      599
     ]
    },
    "libcst.matchers._matcher_base.extractall": {
     "line number": [
      609
     ]
    },
    "str": {
     "line number": [
      601
     ]
    },
    "typing.Callable": {
     "line number": [
      597
     ]
    },
    "typing.Dict": {
     "line number": [
      601
     ]
    },
    "typing.Sequence": {
     "line number": [
      601,
      601
     ]
    },
    "typing.Union": {
     "line number": [
      594,
      595,
      601
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors.MatcherDecoratableTransformer.findall": {
  "data": {
   "lineno": 559,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      564
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      561,
      568
     ]
    },
    "libcst.MaybeSentinel": {
     "line number": [
      561
     ]
    },
    "libcst.RemovalSentinel": {
     "line number": [
      561
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      563
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      564
     ]
    },
    "libcst.matchers._matcher_base.MatchMetadata": {
     "line number": [
      565
     ]
    },
    "libcst.matchers._matcher_base.MatchMetadataIfTrue": {
     "line number": [
      566
     ]
    },
    "libcst.matchers._matcher_base.findall": {
     "line number": [
      576
     ]
    },
    "typing.Callable": {
     "line number": [
      564
     ]
    },
    "typing.Sequence": {
     "line number": [
      568
     ]
    },
    "typing.Union": {
     "line number": [
      561,
      562
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors.MatcherDecoratableTransformer.matches": {
  "data": {
   "lineno": 545,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      549
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      547
     ]
    },
    "libcst.MaybeSentinel": {
     "line number": [
      547
     ]
    },
    "libcst.RemovalSentinel": {
     "line number": [
      547
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      548
     ]
    },
    "libcst.matchers._matcher_base.matches": {
     "line number": [
      557
     ]
    },
    "typing.Union": {
     "line number": [
      547
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors.MatcherDecoratableTransformer.on_leave": {
  "data": {
   "lineno": 495,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      500
     ]
    },
    "isinstance": {
     "line number": [
      511
     ]
    },
    "leave_func": {
     "line number": [
      514
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      512
     ]
    },
    "libcst.CSTTransformer.on_leave": {
     "line number": [
      502
     ]
    },
    "libcst.RemovalSentinel": {
     "line number": [
      497
     ]
    },
    "libcst._types.CSTNodeT": {
     "line number": [
      496,
      496,
      497
     ]
    },
    "libcst.matchers._visitors._leave_matchers": {
     "line number": [
      517
     ]
    },
    "libcst.matchers._visitors._should_allow_visit": {
     "line number": [
      499,
      511
     ]
    },
    "list": {
     "line number": [
      507
     ]
    },
    "reversed": {
     "line number": [
      507
     ]
    },
    "type": {
     "line number": [
      500
     ]
    },
    "typing.Union": {
     "line number": [
      497
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors.MatcherDecoratableTransformer.on_leave_attribute": {
  "data": {
   "lineno": 535,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      539
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      535
     ]
    },
    "libcst.CSTTransformer.on_leave_attribute": {
     "line number": [
      543
     ]
    },
    "libcst.matchers._visitors._should_allow_visit": {
     "line number": [
      537
     ]
    },
    "str": {
     "line number": [
      535
     ]
    },
    "type": {
     "line number": [
      539
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors.MatcherDecoratableTransformer.on_visit": {
  "data": {
   "lineno": 476,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      476
     ]
    },
    "getattr": {
     "line number": [
      485
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      476
     ]
    },
    "libcst.CSTTransformer.on_visit": {
     "line number": [
      493
     ]
    },
    "libcst.matchers._visitors._should_allow_visit": {
     "line number": [
      484
     ]
    },
    "libcst.matchers._visitors._visit_constructed_funcs": {
     "line number": [
      481
     ]
    },
    "libcst.matchers._visitors._visit_matchers": {
     "line number": [
      478
     ]
    },
    "type": {
     "line number": [
      485
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors.MatcherDecoratableTransformer.on_visit_attribute": {
  "data": {
   "lineno": 525,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      529
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      525
     ]
    },
    "libcst.CSTTransformer.on_visit_attribute": {
     "line number": [
      533
     ]
    },
    "libcst.matchers._visitors._should_allow_visit": {
     "line number": [
      527
     ]
    },
    "str": {
     "line number": [
      525
     ]
    },
    "type": {
     "line number": [
      529
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors.MatcherDecoratableTransformer.replace": {
  "data": {
   "lineno": 611,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      616
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      613,
      623,
      625,
      625,
      625,
      626,
      629
     ]
    },
    "libcst.MaybeSentinel": {
     "line number": [
      613,
      621,
      626,
      629
     ]
    },
    "libcst.RemovalSentinel": {
     "line number": [
      613,
      622,
      626,
      629
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      615
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      616
     ]
    },
    "libcst.matchers._matcher_base.MatchMetadata": {
     "line number": [
      617
     ]
    },
    "libcst.matchers._matcher_base.MatchMetadataIfTrue": {
     "line number": [
      618
     ]
    },
    "libcst.matchers._matcher_base.replace": {
     "line number": [
      637
     ]
    },
    "str": {
     "line number": [
      625
     ]
    },
    "typing.Callable": {
     "line number": [
      616,
      624
     ]
    },
    "typing.Dict": {
     "line number": [
      625
     ]
    },
    "typing.Sequence": {
     "line number": [
      625
     ]
    },
    "typing.Union": {
     "line number": [
      613,
      614,
      620,
      625,
      626,
      629
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors.MatcherDecoratableVisitor": {
  "data": {
   "lineno": 640,
   "symbols_in_volume": {
    "libcst.CSTVisitor": {
     "line number": [
      640
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers._visitors.MatcherDecoratableVisitor.__init__": {
  "data": {
   "lineno": 648,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      653,
      660,
      666
     ]
    },
    "libcst.CSTVisitor.__init__": {
     "line number": [
      649
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      653,
      660,
      666
     ]
    },
    "libcst.matchers._visitors._check_types": {
     "line number": [
      670,
      676
     ]
    },
    "libcst.matchers._visitors._gather_constructed_leave_funcs": {
     "line number": [
      667
     ]
    },
    "libcst.matchers._visitors._gather_constructed_visit_funcs": {
     "line number": [
      661
     ]
    },
    "libcst.matchers._visitors._gather_matchers": {
     "line number": [
      654
     ]
    },
    "typing.Callable": {
     "line number": [
      660,
      666
     ]
    },
    "typing.Dict": {
     "line number": [
      653,
      659,
      665
     ]
    },
    "typing.Optional": {
     "line number": [
      653
     ]
    },
    "typing.Sequence": {
     "line number": [
      660,
      666
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors.MatcherDecoratableVisitor.extract": {
  "data": {
   "lineno": 773,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      775,
      777,
      777
     ]
    },
    "libcst.MaybeSentinel": {
     "line number": [
      775
     ]
    },
    "libcst.RemovalSentinel": {
     "line number": [
      775
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      776
     ]
    },
    "libcst.matchers._matcher_base.extract": {
     "line number": [
      785
     ]
    },
    "str": {
     "line number": [
      777
     ]
    },
    "typing.Dict": {
     "line number": [
      777
     ]
    },
    "typing.Optional": {
     "line number": [
      777
     ]
    },
    "typing.Sequence": {
     "line number": [
      777
     ]
    },
    "typing.Union": {
     "line number": [
      775,
      777
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors.MatcherDecoratableVisitor.extractall": {
  "data": {
   "lineno": 787,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      792
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      789,
      796,
      796
     ]
    },
    "libcst.MaybeSentinel": {
     "line number": [
      789
     ]
    },
    "libcst.RemovalSentinel": {
     "line number": [
      789
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      791
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      792
     ]
    },
    "libcst.matchers._matcher_base.MatchMetadata": {
     "line number": [
      793
     ]
    },
    "libcst.matchers._matcher_base.MatchMetadataIfTrue": {
     "line number": [
      794
     ]
    },
    "libcst.matchers._matcher_base.extractall": {
     "line number": [
      804
     ]
    },
    "str": {
     "line number": [
      796
     ]
    },
    "typing.Callable": {
     "line number": [
      792
     ]
    },
    "typing.Dict": {
     "line number": [
      796
     ]
    },
    "typing.Sequence": {
     "line number": [
      796,
      796
     ]
    },
    "typing.Union": {
     "line number": [
      789,
      790,
      796
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors.MatcherDecoratableVisitor.findall": {
  "data": {
   "lineno": 754,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      759
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      756,
      763
     ]
    },
    "libcst.MaybeSentinel": {
     "line number": [
      756
     ]
    },
    "libcst.RemovalSentinel": {
     "line number": [
      756
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      758
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      759
     ]
    },
    "libcst.matchers._matcher_base.MatchMetadata": {
     "line number": [
      760
     ]
    },
    "libcst.matchers._matcher_base.MatchMetadataIfTrue": {
     "line number": [
      761
     ]
    },
    "libcst.matchers._matcher_base.findall": {
     "line number": [
      771
     ]
    },
    "typing.Callable": {
     "line number": [
      759
     ]
    },
    "typing.Sequence": {
     "line number": [
      763
     ]
    },
    "typing.Union": {
     "line number": [
      756,
      757
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors.MatcherDecoratableVisitor.matches": {
  "data": {
   "lineno": 740,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      744
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      742
     ]
    },
    "libcst.MaybeSentinel": {
     "line number": [
      742
     ]
    },
    "libcst.RemovalSentinel": {
     "line number": [
      742
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      743
     ]
    },
    "libcst.matchers._matcher_base.matches": {
     "line number": [
      752
     ]
    },
    "typing.Union": {
     "line number": [
      742
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors.MatcherDecoratableVisitor.on_leave": {
  "data": {
   "lineno": 702,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      705
     ]
    },
    "leave_func": {
     "line number": [
      713,
      714,
      715
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      702
     ]
    },
    "libcst.CSTVisitor.on_leave": {
     "line number": [
      707
     ]
    },
    "libcst.matchers._visitors._leave_matchers": {
     "line number": [
      718
     ]
    },
    "libcst.matchers._visitors._should_allow_visit": {
     "line number": [
      704,
      714
     ]
    },
    "list": {
     "line number": [
      710
     ]
    },
    "reversed": {
     "line number": [
      710
     ]
    },
    "type": {
     "line number": [
      705
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors.MatcherDecoratableVisitor.on_leave_attribute": {
  "data": {
   "lineno": 730,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      734
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      730
     ]
    },
    "libcst.CSTVisitor.on_leave_attribute": {
     "line number": [
      738
     ]
    },
    "libcst.matchers._visitors._should_allow_visit": {
     "line number": [
      732
     ]
    },
    "str": {
     "line number": [
      730
     ]
    },
    "type": {
     "line number": [
      734
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors.MatcherDecoratableVisitor.on_visit": {
  "data": {
   "lineno": 683,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      683
     ]
    },
    "getattr": {
     "line number": [
      692
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      683
     ]
    },
    "libcst.CSTVisitor.on_visit": {
     "line number": [
      700
     ]
    },
    "libcst.matchers._visitors._should_allow_visit": {
     "line number": [
      691
     ]
    },
    "libcst.matchers._visitors._visit_constructed_funcs": {
     "line number": [
      688
     ]
    },
    "libcst.matchers._visitors._visit_matchers": {
     "line number": [
      685
     ]
    },
    "type": {
     "line number": [
      692
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors.MatcherDecoratableVisitor.on_visit_attribute": {
  "data": {
   "lineno": 720,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      724
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      720
     ]
    },
    "libcst.CSTVisitor.on_visit_attribute": {
     "line number": [
      728
     ]
    },
    "libcst.matchers._visitors._should_allow_visit": {
     "line number": [
      722
     ]
    },
    "str": {
     "line number": [
      720
     ]
    },
    "type": {
     "line number": [
      724
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors.MatcherDecoratableVisitor.replace": {
  "data": {
   "lineno": 806,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      811
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      808,
      818,
      820,
      820,
      820,
      821,
      824
     ]
    },
    "libcst.MaybeSentinel": {
     "line number": [
      808,
      816,
      821,
      824
     ]
    },
    "libcst.RemovalSentinel": {
     "line number": [
      808,
      817,
      821,
      824
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      810
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      811
     ]
    },
    "libcst.matchers._matcher_base.MatchMetadata": {
     "line number": [
      812
     ]
    },
    "libcst.matchers._matcher_base.MatchMetadataIfTrue": {
     "line number": [
      813
     ]
    },
    "libcst.matchers._matcher_base.replace": {
     "line number": [
      832
     ]
    },
    "str": {
     "line number": [
      820
     ]
    },
    "typing.Callable": {
     "line number": [
      811,
      819
     ]
    },
    "typing.Dict": {
     "line number": [
      820
     ]
    },
    "typing.Sequence": {
     "line number": [
      820
     ]
    },
    "typing.Union": {
     "line number": [
      808,
      809,
      815,
      820,
      821,
      824
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors.OneOf": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.OneOf"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.TYPED_FUNCTION_RETURN_MAPPING": {
  "data": {
   "shadows": "libcst.matchers._return_types.TYPED_FUNCTION_RETURN_MAPPING"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.Type": {
  "data": {
   "shadows": "typing.Type"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.VISIT_NEGATIVE_MATCHER_ATTR": {
  "data": {
   "shadows": "libcst.matchers._decorators.VISIT_NEGATIVE_MATCHER_ATTR"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.VISIT_POSITIVE_MATCHER_ATTR": {
  "data": {
   "shadows": "libcst.matchers._decorators.VISIT_POSITIVE_MATCHER_ATTR"
  },
  "type": "import"
 },
 "libcst.matchers._visitors._all_negative_matchers_false": {
  "data": {
   "lineno": 396,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      398
     ]
    },
    "getattr": {
     "line number": [
      399
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      397
     ]
    },
    "libcst.matchers._decorators.VISIT_NEGATIVE_MATCHER_ATTR": {
     "line number": [
      399
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      397
     ]
    },
    "object": {
     "line number": [
      397
     ]
    },
    "typing.Dict": {
     "line number": [
      397
     ]
    },
    "typing.Optional": {
     "line number": [
      397
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors._all_positive_matchers_true": {
  "data": {
   "lineno": 384,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      386
     ]
    },
    "getattr": {
     "line number": [
      387
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      385
     ]
    },
    "libcst.matchers._decorators.VISIT_POSITIVE_MATCHER_ATTR": {
     "line number": [
      387
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      385
     ]
    },
    "object": {
     "line number": [
      385
     ]
    },
    "typing.Dict": {
     "line number": [
      385
     ]
    },
    "typing.Optional": {
     "line number": [
      385
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors._assert_not_concrete": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      273
     ]
    },
    "libcst.matchers._visitors.MatchDecoratorMismatch": {
     "line number": [
      276
     ]
    },
    "str": {
     "line number": [
      273
     ]
    },
    "typing.Callable": {
     "line number": [
      273
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors._check_types": {
  "data": {
   "lineno": 201,
   "symbols_in_volume": {
    "any": {
     "line number": [
      213
     ]
    },
    "bool": {
     "line number": [
      207
     ]
    },
    "inspect.ismethod": {
     "line number": [
      222
     ]
    },
    "int": {
     "line number": [
      206
     ]
    },
    "isinstance": {
     "line number": [
      214
     ]
    },
    "libcst.matchers._matcher_base.AtLeastN": {
     "line number": [
      214
     ]
    },
    "libcst.matchers._matcher_base.AtMostN": {
     "line number": [
      214
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      203
     ]
    },
    "libcst.matchers._matcher_base.MatchIfTrue": {
     "line number": [
      214
     ]
    },
    "libcst.matchers._visitors.MatchDecoratorMismatch": {
     "line number": [
      223,
      230
     ]
    },
    "libcst.matchers._visitors._get_possible_match_classes": {
     "line number": [
      212
     ]
    },
    "libcst.matchers._visitors._verify_parameter_annotations": {
     "line number": [
      246
     ]
    },
    "libcst.matchers._visitors._verify_return_annotation": {
     "line number": [
      238
     ]
    },
    "str": {
     "line number": [
      204
     ]
    },
    "typing.Any": {
     "line number": [
      203
     ]
    },
    "typing.Callable": {
     "line number": [
      203
     ]
    },
    "typing.Dict": {
     "line number": [
      203
     ]
    },
    "typing.Sequence": {
     "line number": [
      203
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors._gather_constructed_leave_funcs": {
  "data": {
   "lineno": 319,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      332
     ]
    },
    "dir": {
     "line number": [
      326
     ]
    },
    "getattr": {
     "line number": [
      328,
      337
     ]
    },
    "inspect.ismethod": {
     "line number": [
      329
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      323,
      331
     ]
    },
    "libcst.matchers._decorators.CONSTRUCTED_LEAVE_MATCHER_ATTR": {
     "line number": [
      337
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      323,
      342,
      321
     ]
    },
    "libcst.matchers._visitors._assert_not_concrete": {
     "line number": [
      340
     ]
    },
    "object": {
     "line number": [
      320
     ]
    },
    "typing.Any": {
     "line number": [
      321
     ]
    },
    "typing.Callable": {
     "line number": [
      323,
      331,
      321
     ]
    },
    "typing.Dict": {
     "line number": [
      322,
      321
     ]
    },
    "typing.Sequence": {
     "line number": [
      323,
      321
     ]
    },
    "typing.cast": {
     "line number": [
      331,
      342
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors._gather_constructed_visit_funcs": {
  "data": {
   "lineno": 284,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      297
     ]
    },
    "dir": {
     "line number": [
      291
     ]
    },
    "getattr": {
     "line number": [
      293,
      302
     ]
    },
    "inspect.ismethod": {
     "line number": [
      294
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      288,
      296,
      286
     ]
    },
    "libcst.matchers._decorators.CONSTRUCTED_VISIT_MATCHER_ATTR": {
     "line number": [
      302
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      288,
      307,
      286
     ]
    },
    "libcst.matchers._visitors._assert_not_concrete": {
     "line number": [
      305
     ]
    },
    "object": {
     "line number": [
      285
     ]
    },
    "typing.Callable": {
     "line number": [
      288,
      296,
      286
     ]
    },
    "typing.Dict": {
     "line number": [
      287,
      286
     ]
    },
    "typing.Sequence": {
     "line number": [
      288,
      286
     ]
    },
    "typing.cast": {
     "line number": [
      296,
      307
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors._gather_matchers": {
  "data": {
   "lineno": 254,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      263
     ]
    },
    "dir": {
     "line number": [
      257
     ]
    },
    "getattr": {
     "line number": [
      259,
      259,
      261,
      261
     ]
    },
    "libcst.matchers._decorators.VISIT_NEGATIVE_MATCHER_ATTR": {
     "line number": [
      261
     ]
    },
    "libcst.matchers._decorators.VISIT_POSITIVE_MATCHER_ATTR": {
     "line number": [
      259
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      255,
      260,
      262,
      254
     ]
    },
    "object": {
     "line number": [
      254
     ]
    },
    "set": {
     "line number": [
      255
     ]
    },
    "typing.Set": {
     "line number": [
      255,
      254
     ]
    },
    "typing.cast": {
     "line number": [
      260,
      262
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors._get_possible_annotated_classes": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      83,
      84
     ]
    },
    "object": {
     "line number": [
      82,
      86,
      82
     ]
    },
    "typing.List": {
     "line number": [
      82
     ]
    },
    "typing.Type": {
     "line number": [
      86,
      82
     ]
    },
    "typing.Union": {
     "line number": [
      83
     ]
    },
    "typing.cast": {
     "line number": [
      86
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors._get_possible_match_classes": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      77,
      79
     ]
    },
    "isinstance": {
     "line number": [
      76
     ]
    },
    "libcst": {
     "line number": [
      77,
      79
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      75
     ]
    },
    "libcst.matchers._matcher_base.AllOf": {
     "line number": [
      76
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      75
     ]
    },
    "libcst.matchers._matcher_base.OneOf": {
     "line number": [
      76
     ]
    },
    "typing.List": {
     "line number": [
      75
     ]
    },
    "typing.Type": {
     "line number": [
      75
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors._get_valid_leave_annotations_for_classes": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      90
     ]
    },
    "libcst.matchers._return_types.TYPED_FUNCTION_RETURN_MAPPING": {
     "line number": [
      100
     ]
    },
    "libcst.matchers._visitors._get_possible_annotated_classes": {
     "line number": [
      100
     ]
    },
    "object": {
     "line number": [
      92,
      91
     ]
    },
    "set": {
     "line number": [
      92
     ]
    },
    "typing.Sequence": {
     "line number": [
      90
     ]
    },
    "typing.Set": {
     "line number": [
      92,
      91
     ]
    },
    "typing.Type": {
     "line number": [
      90,
      92,
      91
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors._leave_matchers": {
  "data": {
   "lineno": 370,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      371,
      371,
      373,
      372
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      371,
      373,
      372
     ]
    },
    "typing.Dict": {
     "line number": [
      371,
      373,
      372
     ]
    },
    "typing.Optional": {
     "line number": [
      371,
      373,
      372
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors._match_decorator_unpickler": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "libcst.matchers._visitors.MatchDecoratorMismatch": {
     "line number": [
      57
     ]
    },
    "typing.Any": {
     "line number": [
      56
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors._should_allow_visit": {
  "data": {
   "lineno": 407,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      409
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      408
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      408
     ]
    },
    "libcst.matchers._visitors._all_negative_matchers_false": {
     "line number": [
      412
     ]
    },
    "libcst.matchers._visitors._all_positive_matchers_true": {
     "line number": [
      410
     ]
    },
    "object": {
     "line number": [
      408
     ]
    },
    "typing.Dict": {
     "line number": [
      408
     ]
    },
    "typing.Optional": {
     "line number": [
      408
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors._verify_parameter_annotations": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": {
    "inspect.signature": {
     "line number": [
      165
     ]
    },
    "int": {
     "line number": [
      162
     ]
    },
    "issubclass": {
     "line number": [
      186
     ]
    },
    "len": {
     "line number": [
      166
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      157
     ]
    },
    "libcst.matchers._visitors.MatchDecoratorMismatch": {
     "line number": [
      167,
      193
     ]
    },
    "libcst.matchers._visitors._get_possible_annotated_classes": {
     "line number": [
      183
     ]
    },
    "str": {
     "line number": [
      160
     ]
    },
    "typing.Any": {
     "line number": [
      159
     ]
    },
    "typing.Callable": {
     "line number": [
      159
     ]
    },
    "typing.Sequence": {
     "line number": [
      157
     ]
    },
    "typing.Type": {
     "line number": [
      157
     ]
    },
    "typing.get_type_hints": {
     "line number": [
      179
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors._verify_return_annotation": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      112
     ]
    },
    "issubclass": {
     "line number": [
      142
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      107
     ]
    },
    "libcst.matchers._visitors.MatchDecoratorMismatch": {
     "line number": [
      119,
      149
     ]
    },
    "libcst.matchers._visitors._get_possible_annotated_classes": {
     "line number": [
      129
     ]
    },
    "libcst.matchers._visitors._get_valid_leave_annotations_for_classes": {
     "line number": [
      132
     ]
    },
    "str": {
     "line number": [
      110
     ]
    },
    "type": {
     "line number": [
      118,
      118
     ]
    },
    "typing.Any": {
     "line number": [
      109
     ]
    },
    "typing.Callable": {
     "line number": [
      109
     ]
    },
    "typing.Sequence": {
     "line number": [
      107
     ]
    },
    "typing.Type": {
     "line number": [
      107
     ]
    },
    "typing.get_type_hints": {
     "line number": [
      114
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors._visit_constructed_funcs": {
  "data": {
   "lineno": 415,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      416,
      417,
      418
     ]
    },
    "libcst.MetadataDependent": {
     "line number": [
      419
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      416,
      417
     ]
    },
    "libcst.matchers._matcher_base.matches": {
     "line number": [
      422
     ]
    },
    "libcst.matchers._visitors._should_allow_visit": {
     "line number": [
      424
     ]
    },
    "typing.Callable": {
     "line number": [
      416
     ]
    },
    "typing.Dict": {
     "line number": [
      416,
      417
     ]
    },
    "typing.Optional": {
     "line number": [
      417
     ]
    },
    "typing.Sequence": {
     "line number": [
      416
     ]
    },
    "visit_func": {
     "line number": [
      425
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors._visit_matchers": {
  "data": {
   "lineno": 351,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      352,
      353,
      356,
      355
     ]
    },
    "libcst.MetadataDependent": {
     "line number": [
      354
     ]
    },
    "libcst.matchers._matcher_base.BaseMatcherNode": {
     "line number": [
      352,
      356,
      355
     ]
    },
    "libcst.matchers._matcher_base.matches": {
     "line number": [
      359
     ]
    },
    "typing.Dict": {
     "line number": [
      352,
      356,
      355
     ]
    },
    "typing.Optional": {
     "line number": [
      352,
      356,
      355
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers._visitors.cast": {
  "data": {
   "shadows": "typing.cast"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.extract": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.extract"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.extractall": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.extractall"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.findall": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.findall"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.get_type_hints": {
  "data": {
   "shadows": "typing.get_type_hints"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.ismethod": {
  "data": {
   "shadows": "inspect.ismethod"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.matches": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.matches"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.replace": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.replace"
  },
  "type": "import"
 },
 "libcst.matchers._visitors.signature": {
  "data": {
   "shadows": "inspect.signature"
  },
  "type": "import"
 },
 "libcst.matchers.boolMatchType": {
  "data": {
   "lineno": 4123
  },
  "type": "constant"
 },
 "libcst.matchers.call_if_inside": {
  "data": {
   "shadows": "libcst.matchers._decorators.call_if_inside"
  },
  "type": "import"
 },
 "libcst.matchers.call_if_not_inside": {
  "data": {
   "shadows": "libcst.matchers._decorators.call_if_not_inside"
  },
  "type": "import"
 },
 "libcst.matchers.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.matchers.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst.matchers.extract": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.extract"
  },
  "type": "import"
 },
 "libcst.matchers.extractall": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.extractall"
  },
  "type": "import"
 },
 "libcst.matchers.findall": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.findall"
  },
  "type": "import"
 },
 "libcst.matchers.leave": {
  "data": {
   "shadows": "libcst.matchers._decorators.leave"
  },
  "type": "import"
 },
 "libcst.matchers.matches": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.matches"
  },
  "type": "import"
 },
 "libcst.matchers.replace": {
  "data": {
   "shadows": "libcst.matchers._matcher_base.replace"
  },
  "type": "import"
 },
 "libcst.matchers.strMatchType": {
  "data": {
   "lineno": 2364
  },
  "type": "constant"
 },
 "libcst.matchers.strOrNoneMatchType": {
  "data": {
   "lineno": 5089
  },
  "type": "constant"
 },
 "libcst.matchers.tests": {
  "data": {},
  "type": "module"
 },
 "libcst.matchers.tests.test_decorators": {
  "data": {},
  "type": "module"
 },
 "libcst.matchers.tests.test_decorators.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_decorators.MatcherDecoratableTransformer": {
  "data": {
   "shadows": "libcst.matchers.MatcherDecoratableTransformer"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_decorators.MatcherDecoratableVisitor": {
  "data": {
   "shadows": "libcst.matchers.MatcherDecoratableVisitor"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      27
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_inside_collect_simple": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      131
     ]
    },
    "libcst.matchers.tests.test_decorators.fixture": {
     "line number": [
      119
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_inside_collect_simple.TestVisitor": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      104
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_inside_collect_simple.TestVisitor.__init__": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": {
    "str": {
     "line number": [
      107,
      108
     ]
    },
    "super": {
     "line number": [
      106
     ]
    },
    "typing.List": {
     "line number": [
      107,
      108
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_inside_collect_simple.TestVisitor.leave_SimpleString": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      115
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      114
     ]
    },
    "libcst.matchers.call_if_inside": {
     "line number": [
      114
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_inside_collect_simple.TestVisitor.visit_SimpleString": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      111
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      110
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      110
     ]
    },
    "libcst.matchers.call_if_inside": {
     "line number": [
      110
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_inside_transform_simple": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      60
     ]
    },
    "libcst.matchers.tests.test_decorators.fixture": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_inside_transform_simple.TestVisitor": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_inside_transform_simple.TestVisitor.__init__": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "str": {
     "line number": [
      33,
      34
     ]
    },
    "super": {
     "line number": [
      32
     ]
    },
    "typing.List": {
     "line number": [
      33,
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_inside_transform_simple.TestVisitor.leave_SimpleString": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      42,
      42,
      43
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      40
     ]
    },
    "libcst.matchers.call_if_inside": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_inside_transform_simple.TestVisitor.visit_SimpleString": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      37
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      36
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      36
     ]
    },
    "libcst.matchers.call_if_inside": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_inside_verify_original_collect": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      166
     ]
    },
    "libcst.matchers.tests.test_decorators.fixture": {
     "line number": [
      154
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_inside_verify_original_collect.TestVisitor": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      140
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_inside_verify_original_collect.TestVisitor.__init__": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": {
    "str": {
     "line number": [
      143,
      144
     ]
    },
    "super": {
     "line number": [
      142
     ]
    },
    "typing.List": {
     "line number": [
      143,
      144
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_inside_verify_original_collect.TestVisitor.visit_FunctionDef": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      150
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_inside_verify_original_collect.TestVisitor.visit_SimpleString": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      147
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      146
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      146
     ]
    },
    "libcst.matchers.call_if_inside": {
     "line number": [
      146
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_inside_verify_original_transform": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      95
     ]
    },
    "libcst.matchers.tests.test_decorators.fixture": {
     "line number": [
      83
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_inside_verify_original_transform.TestVisitor": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      69
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_inside_verify_original_transform.TestVisitor.__init__": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "str": {
     "line number": [
      72,
      73
     ]
    },
    "super": {
     "line number": [
      71
     ]
    },
    "typing.List": {
     "line number": [
      72,
      73
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_inside_verify_original_transform.TestVisitor.visit_FunctionDef": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      79
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_inside_verify_original_transform.TestVisitor.visit_SimpleString": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      76
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      75
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      75
     ]
    },
    "libcst.matchers.call_if_inside": {
     "line number": [
      75
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_not_inside_collect_simple": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      334
     ]
    },
    "libcst.matchers.tests.test_decorators.fixture": {
     "line number": [
      322
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_not_inside_collect_simple.TestVisitor": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      307
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_not_inside_collect_simple.TestVisitor.__init__": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": {
    "str": {
     "line number": [
      310,
      311
     ]
    },
    "super": {
     "line number": [
      309
     ]
    },
    "typing.List": {
     "line number": [
      310,
      311
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_not_inside_collect_simple.TestVisitor.leave_SimpleString": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      318
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      317
     ]
    },
    "libcst.matchers.call_if_not_inside": {
     "line number": [
      317
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_not_inside_collect_simple.TestVisitor.visit_SimpleString": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      314
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      313
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      313
     ]
    },
    "libcst.matchers.call_if_not_inside": {
     "line number": [
      313
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_not_inside_transform_simple": {
  "data": {
   "lineno": 231,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      263
     ]
    },
    "libcst.matchers.tests.test_decorators.fixture": {
     "line number": [
      251
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_not_inside_transform_simple.TestVisitor": {
  "data": {
   "lineno": 233,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      233
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_not_inside_transform_simple.TestVisitor.__init__": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": {
    "str": {
     "line number": [
      236,
      237
     ]
    },
    "super": {
     "line number": [
      235
     ]
    },
    "typing.List": {
     "line number": [
      236,
      237
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_not_inside_transform_simple.TestVisitor.leave_SimpleString": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      245,
      245,
      246
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      243
     ]
    },
    "libcst.matchers.call_if_not_inside": {
     "line number": [
      243
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_call_if_not_inside_transform_simple.TestVisitor.visit_SimpleString": {
  "data": {
   "lineno": 239,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      240
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      239
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      239
     ]
    },
    "libcst.matchers.call_if_not_inside": {
     "line number": [
      239
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_multiple_visitors_collect": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      196
     ]
    },
    "libcst.matchers.tests.test_decorators.fixture": {
     "line number": [
      186
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_multiple_visitors_collect.TestVisitor": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      175
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_multiple_visitors_collect.TestVisitor.__init__": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": {
    "str": {
     "line number": [
      178
     ]
    },
    "super": {
     "line number": [
      177
     ]
    },
    "typing.List": {
     "line number": [
      178
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_multiple_visitors_collect.TestVisitor.visit_SimpleString": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      182
     ]
    },
    "libcst.matchers.ClassDef": {
     "line number": [
      180
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      181
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      180,
      181
     ]
    },
    "libcst.matchers.call_if_inside": {
     "line number": [
      180,
      181
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_multiple_visitors_transform": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      225
     ]
    },
    "libcst.matchers.tests.test_decorators.fixture": {
     "line number": [
      215
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_multiple_visitors_transform.TestVisitor": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      204
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_multiple_visitors_transform.TestVisitor.__init__": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": {
    "str": {
     "line number": [
      207
     ]
    },
    "super": {
     "line number": [
      206
     ]
    },
    "typing.List": {
     "line number": [
      207
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_multiple_visitors_transform.TestVisitor.visit_SimpleString": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      211
     ]
    },
    "libcst.matchers.ClassDef": {
     "line number": [
      209
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      210
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      209,
      210
     ]
    },
    "libcst.matchers.call_if_inside": {
     "line number": [
      209,
      210
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_visit_if_inot_inside_verify_original_collect": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      369
     ]
    },
    "libcst.matchers.tests.test_decorators.fixture": {
     "line number": [
      357
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_visit_if_inot_inside_verify_original_collect.TestVisitor": {
  "data": {
   "lineno": 343,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      343
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_visit_if_inot_inside_verify_original_collect.TestVisitor.__init__": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": {
    "str": {
     "line number": [
      346,
      347
     ]
    },
    "super": {
     "line number": [
      345
     ]
    },
    "typing.List": {
     "line number": [
      346,
      347
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_visit_if_inot_inside_verify_original_collect.TestVisitor.visit_FunctionDef": {
  "data": {
   "lineno": 353,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      353
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_visit_if_inot_inside_verify_original_collect.TestVisitor.visit_SimpleString": {
  "data": {
   "lineno": 349,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      350
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      349
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      349
     ]
    },
    "libcst.matchers.call_if_not_inside": {
     "line number": [
      349
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_visit_if_inot_inside_verify_original_transform": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      298
     ]
    },
    "libcst.matchers.tests.test_decorators.fixture": {
     "line number": [
      286
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_visit_if_inot_inside_verify_original_transform.TestVisitor": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      272
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_visit_if_inot_inside_verify_original_transform.TestVisitor.__init__": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": {
    "str": {
     "line number": [
      275,
      276
     ]
    },
    "super": {
     "line number": [
      274
     ]
    },
    "typing.List": {
     "line number": [
      275,
      276
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_visit_if_inot_inside_verify_original_transform.TestVisitor.visit_FunctionDef": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      282
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersGatingDecoratorsTest.test_visit_if_inot_inside_verify_original_transform.TestVisitor.visit_SimpleString": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      279
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      278
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      278
     ]
    },
    "libcst.matchers.call_if_not_inside": {
     "line number": [
      278
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest": {
  "data": {
   "lineno": 377,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      377
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_call_if_inside_transform_attribute": {
  "data": {
   "lineno": 857,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      886
     ]
    },
    "libcst.matchers.tests.test_decorators.fixture": {
     "line number": [
      874
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_call_if_inside_transform_attribute.TestVisitor": {
  "data": {
   "lineno": 859,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      859
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_call_if_inside_transform_attribute.TestVisitor.__init__": {
  "data": {
   "lineno": 860,
   "symbols_in_volume": {
    "str": {
     "line number": [
      862,
      863
     ]
    },
    "super": {
     "line number": [
      861
     ]
    },
    "typing.List": {
     "line number": [
      862,
      863
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_call_if_inside_transform_attribute.TestVisitor.leave_SimpleString_lpar": {
  "data": {
   "lineno": 869,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      870
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      869
     ]
    },
    "libcst.matchers.call_if_inside": {
     "line number": [
      869
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_call_if_inside_transform_attribute.TestVisitor.visit_SimpleString_lpar": {
  "data": {
   "lineno": 865,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      866
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      865
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      865
     ]
    },
    "libcst.matchers.call_if_inside": {
     "line number": [
      865
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_call_if_inside_visitor_attribute": {
  "data": {
   "lineno": 821,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      850
     ]
    },
    "libcst.matchers.tests.test_decorators.fixture": {
     "line number": [
      838
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_call_if_inside_visitor_attribute.TestVisitor": {
  "data": {
   "lineno": 823,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      823
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_call_if_inside_visitor_attribute.TestVisitor.__init__": {
  "data": {
   "lineno": 824,
   "symbols_in_volume": {
    "str": {
     "line number": [
      826,
      827
     ]
    },
    "super": {
     "line number": [
      825
     ]
    },
    "typing.List": {
     "line number": [
      826,
      827
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_call_if_inside_visitor_attribute.TestVisitor.leave_SimpleString_lpar": {
  "data": {
   "lineno": 833,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      834
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      833
     ]
    },
    "libcst.matchers.call_if_inside": {
     "line number": [
      833
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_call_if_inside_visitor_attribute.TestVisitor.visit_SimpleString_lpar": {
  "data": {
   "lineno": 829,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      830
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      829
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      829
     ]
    },
    "libcst.matchers.call_if_inside": {
     "line number": [
      829
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_call_if_not_inside_transform_attribute": {
  "data": {
   "lineno": 929,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      958
     ]
    },
    "libcst.matchers.tests.test_decorators.fixture": {
     "line number": [
      946
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_call_if_not_inside_transform_attribute.TestVisitor": {
  "data": {
   "lineno": 931,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      931
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_call_if_not_inside_transform_attribute.TestVisitor.__init__": {
  "data": {
   "lineno": 932,
   "symbols_in_volume": {
    "str": {
     "line number": [
      934,
      935
     ]
    },
    "super": {
     "line number": [
      933
     ]
    },
    "typing.List": {
     "line number": [
      934,
      935
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_call_if_not_inside_transform_attribute.TestVisitor.leave_SimpleString_lpar": {
  "data": {
   "lineno": 941,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      942
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      941
     ]
    },
    "libcst.matchers.call_if_not_inside": {
     "line number": [
      941
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_call_if_not_inside_transform_attribute.TestVisitor.visit_SimpleString_lpar": {
  "data": {
   "lineno": 937,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      938
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      937
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      937
     ]
    },
    "libcst.matchers.call_if_not_inside": {
     "line number": [
      937
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_call_if_not_inside_visitor_attribute": {
  "data": {
   "lineno": 893,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      922
     ]
    },
    "libcst.matchers.tests.test_decorators.fixture": {
     "line number": [
      910
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_call_if_not_inside_visitor_attribute.TestVisitor": {
  "data": {
   "lineno": 895,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      895
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_call_if_not_inside_visitor_attribute.TestVisitor.__init__": {
  "data": {
   "lineno": 896,
   "symbols_in_volume": {
    "str": {
     "line number": [
      898,
      899
     ]
    },
    "super": {
     "line number": [
      897
     ]
    },
    "typing.List": {
     "line number": [
      898,
      899
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_call_if_not_inside_visitor_attribute.TestVisitor.leave_SimpleString_lpar": {
  "data": {
   "lineno": 905,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      906
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      905
     ]
    },
    "libcst.matchers.call_if_not_inside": {
     "line number": [
      905
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_call_if_not_inside_visitor_attribute.TestVisitor.visit_SimpleString_lpar": {
  "data": {
   "lineno": 901,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      902
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      901
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      901
     ]
    },
    "libcst.matchers.call_if_not_inside": {
     "line number": [
      901
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_duplicate_visit_collector": {
  "data": {
   "lineno": 598,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      638
     ]
    },
    "libcst.matchers.tests.test_decorators.fixture": {
     "line number": [
      623
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_duplicate_visit_collector.TestVisitor": {
  "data": {
   "lineno": 600,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      600
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_duplicate_visit_collector.TestVisitor.__init__": {
  "data": {
   "lineno": 601,
   "symbols_in_volume": {
    "set": {
     "line number": [
      603,
      604
     ]
    },
    "str": {
     "line number": [
      603,
      604
     ]
    },
    "super": {
     "line number": [
      602
     ]
    },
    "typing.Set": {
     "line number": [
      603,
      604
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_duplicate_visit_collector.TestVisitor.leave_function1": {
  "data": {
   "lineno": 614,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      615
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      614
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      614
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      614
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_duplicate_visit_collector.TestVisitor.leave_function2": {
  "data": {
   "lineno": 618,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      619
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      618
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      618
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      618
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_duplicate_visit_collector.TestVisitor.visit_function1": {
  "data": {
   "lineno": 606,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      607
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      606
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      606
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      606
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_duplicate_visit_collector.TestVisitor.visit_function2": {
  "data": {
   "lineno": 610,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      611
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      610
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      610
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      610
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_duplicate_visit_transform": {
  "data": {
   "lineno": 545,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      591
     ]
    },
    "libcst.matchers.tests.test_decorators.fixture": {
     "line number": [
      576
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_duplicate_visit_transform.TestVisitor": {
  "data": {
   "lineno": 547,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      547
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_duplicate_visit_transform.TestVisitor.__init__": {
  "data": {
   "lineno": 548,
   "symbols_in_volume": {
    "set": {
     "line number": [
      550,
      551
     ]
    },
    "str": {
     "line number": [
      550,
      551
     ]
    },
    "super": {
     "line number": [
      549
     ]
    },
    "typing.Set": {
     "line number": [
      550,
      551
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_duplicate_visit_transform.TestVisitor.leave_function1": {
  "data": {
   "lineno": 561,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      563,
      563,
      564
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      561
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      561
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      561
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_duplicate_visit_transform.TestVisitor.leave_function2": {
  "data": {
   "lineno": 568,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      570,
      570,
      571
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      568
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      568
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      568
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_duplicate_visit_transform.TestVisitor.visit_function1": {
  "data": {
   "lineno": 553,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      554
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      553
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      553
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      553
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_duplicate_visit_transform.TestVisitor.visit_function2": {
  "data": {
   "lineno": 557,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      558
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      557
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      557
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      557
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_gated_visit_collect": {
  "data": {
   "lineno": 704,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      748
     ]
    },
    "libcst.matchers.tests.test_decorators.fixture": {
     "line number": [
      733
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_gated_visit_collect.TestVisitor": {
  "data": {
   "lineno": 706,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      706
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_gated_visit_collect.TestVisitor.__init__": {
  "data": {
   "lineno": 707,
   "symbols_in_volume": {
    "set": {
     "line number": [
      709,
      710
     ]
    },
    "str": {
     "line number": [
      709,
      710
     ]
    },
    "super": {
     "line number": [
      708
     ]
    },
    "typing.Set": {
     "line number": [
      709,
      710
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_gated_visit_collect.TestVisitor.leave_string1": {
  "data": {
   "lineno": 722,
   "symbols_in_volume": {
    "ast.literal_eval": {
     "line number": [
      725
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      724
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      722
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      722
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      723
     ]
    },
    "libcst.matchers.call_if_inside": {
     "line number": [
      722
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      723
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_gated_visit_collect.TestVisitor.leave_string2": {
  "data": {
   "lineno": 727,
   "symbols_in_volume": {
    "ast.literal_eval": {
     "line number": [
      730
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      729
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      727
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      727
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      728
     ]
    },
    "libcst.matchers.call_if_not_inside": {
     "line number": [
      727
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      728
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_gated_visit_collect.TestVisitor.visit_string1": {
  "data": {
   "lineno": 712,
   "symbols_in_volume": {
    "ast.literal_eval": {
     "line number": [
      715
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      714
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      712
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      712
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      713
     ]
    },
    "libcst.matchers.call_if_inside": {
     "line number": [
      712
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      713
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_gated_visit_collect.TestVisitor.visit_string2": {
  "data": {
   "lineno": 717,
   "symbols_in_volume": {
    "ast.literal_eval": {
     "line number": [
      720
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      719
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      717
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      717
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      718
     ]
    },
    "libcst.matchers.call_if_not_inside": {
     "line number": [
      717
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      718
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_gated_visit_transform": {
  "data": {
   "lineno": 645,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      695
     ]
    },
    "libcst.matchers.tests.test_decorators.fixture": {
     "line number": [
      680
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_gated_visit_transform.TestVisitor": {
  "data": {
   "lineno": 647,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      647
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_gated_visit_transform.TestVisitor.__init__": {
  "data": {
   "lineno": 648,
   "symbols_in_volume": {
    "set": {
     "line number": [
      650,
      651
     ]
    },
    "str": {
     "line number": [
      650,
      651
     ]
    },
    "super": {
     "line number": [
      649
     ]
    },
    "typing.Set": {
     "line number": [
      650,
      651
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_gated_visit_transform.TestVisitor.leave_string1": {
  "data": {
   "lineno": 663,
   "symbols_in_volume": {
    "ast.literal_eval": {
     "line number": [
      668
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      666,
      666,
      667
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      663
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      663
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      664
     ]
    },
    "libcst.matchers.call_if_inside": {
     "line number": [
      663
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      664
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_gated_visit_transform.TestVisitor.leave_string2": {
  "data": {
   "lineno": 671,
   "symbols_in_volume": {
    "ast.literal_eval": {
     "line number": [
      676
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      674,
      674,
      675
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      671
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      671
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      672
     ]
    },
    "libcst.matchers.call_if_not_inside": {
     "line number": [
      671
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      672
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_gated_visit_transform.TestVisitor.visit_string1": {
  "data": {
   "lineno": 653,
   "symbols_in_volume": {
    "ast.literal_eval": {
     "line number": [
      656
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      655
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      653
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      653
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      654
     ]
    },
    "libcst.matchers.call_if_inside": {
     "line number": [
      653
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      654
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_gated_visit_transform.TestVisitor.visit_string2": {
  "data": {
   "lineno": 658,
   "symbols_in_volume": {
    "ast.literal_eval": {
     "line number": [
      661
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      660
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      658
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      658
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      659
     ]
    },
    "libcst.matchers.call_if_not_inside": {
     "line number": [
      658
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      659
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_init_with_unhashable_types": {
  "data": {
   "lineno": 965,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      991
     ]
    },
    "libcst.matchers.tests.test_decorators.fixture": {
     "line number": [
      979
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_init_with_unhashable_types.TestVisitor": {
  "data": {
   "lineno": 967,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      967
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_init_with_unhashable_types.TestVisitor.__init__": {
  "data": {
   "lineno": 968,
   "symbols_in_volume": {
    "str": {
     "line number": [
      970
     ]
    },
    "super": {
     "line number": [
      969
     ]
    },
    "typing.List": {
     "line number": [
      970
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_init_with_unhashable_types.TestVisitor.visit_SimpleString": {
  "data": {
   "lineno": 972,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      975
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      973
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      973
     ]
    },
    "libcst.matchers.Parameters": {
     "line number": [
      973
     ]
    },
    "libcst.matchers.ZeroOrMore": {
     "line number": [
      973
     ]
    },
    "libcst.matchers.call_if_inside": {
     "line number": [
      972
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_stacked_visit_collector": {
  "data": {
   "lineno": 503,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      537
     ]
    },
    "libcst.matchers.tests.test_decorators.fixture": {
     "line number": [
      522
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_stacked_visit_collector.TestVisitor": {
  "data": {
   "lineno": 505,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      505
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_stacked_visit_collector.TestVisitor.__init__": {
  "data": {
   "lineno": 506,
   "symbols_in_volume": {
    "str": {
     "line number": [
      508,
      509
     ]
    },
    "super": {
     "line number": [
      507
     ]
    },
    "typing.List": {
     "line number": [
      508,
      509
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_stacked_visit_collector.TestVisitor.leave_function": {
  "data": {
   "lineno": 516,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      518
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      516,
      517
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      516,
      517
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      516,
      517
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_stacked_visit_collector.TestVisitor.visit_function": {
  "data": {
   "lineno": 511,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      513
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      511,
      512
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      511,
      512
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      511,
      512
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_stacked_visit_transform": {
  "data": {
   "lineno": 459,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      496
     ]
    },
    "libcst.matchers.tests.test_decorators.fixture": {
     "line number": [
      481
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_stacked_visit_transform.TestVisitor": {
  "data": {
   "lineno": 461,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      461
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_stacked_visit_transform.TestVisitor.__init__": {
  "data": {
   "lineno": 462,
   "symbols_in_volume": {
    "str": {
     "line number": [
      464,
      465
     ]
    },
    "super": {
     "line number": [
      463
     ]
    },
    "typing.List": {
     "line number": [
      464,
      465
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_stacked_visit_transform.TestVisitor.leave_function": {
  "data": {
   "lineno": 472,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      475,
      475,
      476
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      472,
      473
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      472,
      473
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      472,
      473
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_stacked_visit_transform.TestVisitor.visit_function": {
  "data": {
   "lineno": 467,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      469
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      467,
      468
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      467,
      468
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      467,
      468
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_transform_order": {
  "data": {
   "lineno": 757,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      802
     ]
    },
    "libcst.matchers.tests.test_decorators.fixture": {
     "line number": [
      787,
      804
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_transform_order.TestVisitor": {
  "data": {
   "lineno": 759,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      759
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_transform_order.TestVisitor.leave_SimpleString": {
  "data": {
   "lineno": 778,
   "symbols_in_volume": {
    "ast.literal_eval": {
     "line number": [
      783
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      780,
      780,
      781
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      778
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      778
     ]
    },
    "libcst.matchers.call_if_inside": {
     "line number": [
      778
     ]
    },
    "reversed": {
     "line number": [
      783
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_transform_order.TestVisitor.leave_string1": {
  "data": {
   "lineno": 760,
   "symbols_in_volume": {
    "ast.literal_eval": {
     "line number": [
      766
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      763,
      763,
      764
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      760
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      760
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      761
     ]
    },
    "libcst.matchers.call_if_inside": {
     "line number": [
      760
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      761
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_transform_order.TestVisitor.leave_string2": {
  "data": {
   "lineno": 769,
   "symbols_in_volume": {
    "ast.literal_eval": {
     "line number": [
      775
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      772,
      772,
      773
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      769
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      769
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      770
     ]
    },
    "libcst.matchers.call_if_inside": {
     "line number": [
      769
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      770
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_visit_collector": {
  "data": {
   "lineno": 420,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      452
     ]
    },
    "libcst.matchers.tests.test_decorators.fixture": {
     "line number": [
      437
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_visit_collector.TestVisitor": {
  "data": {
   "lineno": 422,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      422
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_visit_collector.TestVisitor.__init__": {
  "data": {
   "lineno": 423,
   "symbols_in_volume": {
    "str": {
     "line number": [
      425,
      426
     ]
    },
    "super": {
     "line number": [
      424
     ]
    },
    "typing.List": {
     "line number": [
      425,
      426
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_visit_collector.TestVisitor.leave_function": {
  "data": {
   "lineno": 432,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      433
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      432
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      432,
      432
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      432
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_visit_collector.TestVisitor.visit_function": {
  "data": {
   "lineno": 428,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      429
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      428
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      428,
      428
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      428
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_visit_transform": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      413
     ]
    },
    "libcst.matchers.tests.test_decorators.fixture": {
     "line number": [
      398
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_visit_transform.TestVisitor": {
  "data": {
   "lineno": 380,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      380
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_visit_transform.TestVisitor.__init__": {
  "data": {
   "lineno": 381,
   "symbols_in_volume": {
    "str": {
     "line number": [
      383,
      384
     ]
    },
    "super": {
     "line number": [
      382
     ]
    },
    "typing.List": {
     "line number": [
      383,
      384
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_visit_transform.TestVisitor.leave_function": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      392,
      392,
      393
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      390
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      390,
      390
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      390
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.MatchersVisitLeaveDecoratorsTest.test_visit_transform.TestVisitor.visit_function": {
  "data": {
   "lineno": 386,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      387
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      386
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      386,
      386
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      386
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_decorators.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_decorators.call_if_inside": {
  "data": {
   "shadows": "libcst.matchers.call_if_inside"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_decorators.call_if_not_inside": {
  "data": {
   "shadows": "libcst.matchers.call_if_not_inside"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_decorators.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_decorators.dedent": {
  "data": {
   "shadows": "textwrap.dedent"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_decorators.fixture": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      23
     ]
    },
    "libcst.parse_module": {
     "line number": [
      24
     ]
    },
    "str": {
     "line number": [
      23
     ]
    },
    "textwrap.dedent": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_decorators.leave": {
  "data": {
   "shadows": "libcst.matchers.leave"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_decorators.literal_eval": {
  "data": {
   "shadows": "ast.literal_eval"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_decorators.m": {
  "data": {
   "shadows": "libcst.matchers"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_decorators.visit": {
  "data": {
   "shadows": "libcst.matchers.visit"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_extract": {
  "data": {},
  "type": "module"
 },
 "libcst.matchers.tests.test_extract.MatchersExtractTest": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_extract.MatchersExtractTest._make_coderange": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "int": {
     "line number": [
      16,
      16,
      16,
      16
     ]
    },
    "libcst.metadata.CodePosition": {
     "line number": [
      19,
      20
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      18,
      17
     ]
    },
    "typing.Tuple": {
     "line number": [
      16,
      16
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_extract.MatchersExtractTest.test_extract_metadata": {
  "data": {
   "lineno": 162,
   "symbols_in_volume": {
    "libcst.BinaryOperation": {
     "line number": [
      195
     ]
    },
    "libcst.Expr": {
     "line number": [
      168
     ]
    },
    "libcst.MetadataWrapper": {
     "line number": [
      165
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      167
     ]
    },
    "libcst.Tuple": {
     "line number": [
      194
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      166,
      167,
      193,
      194
     ]
    },
    "libcst.matchers.BinaryOperation": {
     "line number": [
      176,
      205
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      188,
      217
     ]
    },
    "libcst.matchers.Element": {
     "line number": [
      175,
      188,
      204,
      217
     ]
    },
    "libcst.matchers.MatchMetadata": {
     "line number": [
      179,
      208
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      177,
      206
     ]
    },
    "libcst.matchers.SaveMatchedNode": {
     "line number": [
      178,
      207
     ]
    },
    "libcst.matchers.Tuple": {
     "line number": [
      173,
      202
     ]
    },
    "libcst.matchers.extract": {
     "line number": [
      171,
      200
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      180,
      209
     ]
    },
    "libcst.parse_module": {
     "line number": [
      164
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_extract.MatchersExtractTest.test_extract_multiple": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": {
    "libcst.BinaryOperation": {
     "line number": [
      96
     ]
    },
    "libcst.Call": {
     "line number": [
      99
     ]
    },
    "libcst.Tuple": {
     "line number": [
      95,
      99
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      94,
      95,
      98,
      99
     ]
    },
    "libcst.matchers.BinaryOperation": {
     "line number": [
      88
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      90
     ]
    },
    "libcst.matchers.Element": {
     "line number": [
      87,
      90
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      88,
      90
     ]
    },
    "libcst.matchers.SaveMatchedNode": {
     "line number": [
      88,
      90
     ]
    },
    "libcst.matchers.Tuple": {
     "line number": [
      85
     ]
    },
    "libcst.matchers.extract": {
     "line number": [
      83
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      82
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_extract.MatchersExtractTest.test_extract_optional_wildcard": {
  "data": {
   "lineno": 303,
   "symbols_in_volume": {
    "libcst.matchers.Arg": {
     "line number": [
      315
     ]
    },
    "libcst.matchers.Attribute": {
     "line number": [
      315
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      311
     ]
    },
    "libcst.matchers.DoNotCare": {
     "line number": [
      309
     ]
    },
    "libcst.matchers.Element": {
     "line number": [
      310
     ]
    },
    "libcst.matchers.SaveMatchedNode": {
     "line number": [
      315
     ]
    },
    "libcst.matchers.Tuple": {
     "line number": [
      307
     ]
    },
    "libcst.matchers.ZeroOrMore": {
     "line number": [
      313
     ]
    },
    "libcst.matchers.ZeroOrOne": {
     "line number": [
      314
     ]
    },
    "libcst.matchers.extract": {
     "line number": [
      305
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      304
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_extract.MatchersExtractTest.test_extract_optional_wildcard_head": {
  "data": {
   "lineno": 325,
   "symbols_in_volume": {
    "libcst.matchers.Element": {
     "line number": [
      333
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      333
     ]
    },
    "libcst.matchers.List": {
     "line number": [
      329
     ]
    },
    "libcst.matchers.SaveMatchedNode": {
     "line number": [
      331,
      332
     ]
    },
    "libcst.matchers.ZeroOrMore": {
     "line number": [
      331,
      332
     ]
    },
    "libcst.matchers.extract": {
     "line number": [
      327
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      326
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_extract.MatchersExtractTest.test_extract_optional_wildcard_present": {
  "data": {
   "lineno": 353,
   "symbols_in_volume": {
    "libcst.Call": {
     "line number": [
      376
     ]
    },
    "libcst.Tuple": {
     "line number": [
      376
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      375,
      376
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      366
     ]
    },
    "libcst.matchers.Attribute": {
     "line number": [
      366
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      361
     ]
    },
    "libcst.matchers.DoNotCare": {
     "line number": [
      359,
      363,
      364
     ]
    },
    "libcst.matchers.Element": {
     "line number": [
      360
     ]
    },
    "libcst.matchers.SaveMatchedNode": {
     "line number": [
      366
     ]
    },
    "libcst.matchers.Tuple": {
     "line number": [
      357
     ]
    },
    "libcst.matchers.ZeroOrOne": {
     "line number": [
      365
     ]
    },
    "libcst.matchers.extract": {
     "line number": [
      355
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      354
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_extract.MatchersExtractTest.test_extract_optional_wildcard_tail": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": {
    "libcst.matchers.Element": {
     "line number": [
      345
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      345
     ]
    },
    "libcst.matchers.List": {
     "line number": [
      343
     ]
    },
    "libcst.matchers.SaveMatchedNode": {
     "line number": [
      346,
      347
     ]
    },
    "libcst.matchers.ZeroOrMore": {
     "line number": [
      346,
      347
     ]
    },
    "libcst.matchers.extract": {
     "line number": [
      341
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      340
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_extract.MatchersExtractTest.test_extract_precedence_parent": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": {
    "libcst.Tuple": {
     "line number": [
      245
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      245
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      235
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      233
     ]
    },
    "libcst.matchers.DoNotCare": {
     "line number": [
      230,
      236
     ]
    },
    "libcst.matchers.Element": {
     "line number": [
      231
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      235
     ]
    },
    "libcst.matchers.SaveMatchedNode": {
     "line number": [
      232,
      235
     ]
    },
    "libcst.matchers.Tuple": {
     "line number": [
      228
     ]
    },
    "libcst.matchers.extract": {
     "line number": [
      226
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      225
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_extract.MatchersExtractTest.test_extract_precedence_sequence": {
  "data": {
   "lineno": 248,
   "symbols_in_volume": {
    "libcst.Call": {
     "line number": [
      268
     ]
    },
    "libcst.Tuple": {
     "line number": [
      268
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      267,
      268
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      258,
      259
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      256
     ]
    },
    "libcst.matchers.DoNotCare": {
     "line number": [
      254,
      258,
      259
     ]
    },
    "libcst.matchers.Element": {
     "line number": [
      255
     ]
    },
    "libcst.matchers.SaveMatchedNode": {
     "line number": [
      258,
      259
     ]
    },
    "libcst.matchers.Tuple": {
     "line number": [
      252
     ]
    },
    "libcst.matchers.extract": {
     "line number": [
      250
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      249
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_extract.MatchersExtractTest.test_extract_precedence_sequence_wildcard": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": {
    "libcst.Call": {
     "line number": [
      296
     ]
    },
    "libcst.Tuple": {
     "line number": [
      296
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      295,
      296
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      286
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      283
     ]
    },
    "libcst.matchers.DoNotCare": {
     "line number": [
      281,
      286
     ]
    },
    "libcst.matchers.Element": {
     "line number": [
      282
     ]
    },
    "libcst.matchers.SaveMatchedNode": {
     "line number": [
      286
     ]
    },
    "libcst.matchers.Tuple": {
     "line number": [
      279
     ]
    },
    "libcst.matchers.ZeroOrMore": {
     "line number": [
      285
     ]
    },
    "libcst.matchers.extract": {
     "line number": [
      277
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      276
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_extract.MatchersExtractTest.test_extract_predicates": {
  "data": {
   "lineno": 105,
   "symbols_in_volume": {
    "libcst.BinaryOperation": {
     "line number": [
      125,
      153
     ]
    },
    "libcst.Call": {
     "line number": [
      128,
      156
     ]
    },
    "libcst.Tuple": {
     "line number": [
      124,
      128,
      152,
      156
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      123,
      124,
      127,
      128,
      151,
      152,
      155,
      156
     ]
    },
    "libcst.matchers.Attribute": {
     "line number": [
      117,
      145
     ]
    },
    "libcst.matchers.BinaryOperation": {
     "line number": [
      112,
      140
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      115,
      143
     ]
    },
    "libcst.matchers.Element": {
     "line number": [
      111,
      114,
      139,
      142
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      112,
      116,
      140,
      144
     ]
    },
    "libcst.matchers.SaveMatchedNode": {
     "line number": [
      112,
      116,
      117,
      140,
      144,
      145
     ]
    },
    "libcst.matchers.Tuple": {
     "line number": [
      109,
      137
     ]
    },
    "libcst.matchers.extract": {
     "line number": [
      107,
      135
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      106,
      134
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_extract.MatchersExtractTest.test_extract_sentinel": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "libcst.MaybeSentinel.DEFAULT": {
     "line number": [
      31
     ]
    },
    "libcst.RemovalSentinel.REMOVE": {
     "line number": [
      26
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      27,
      32
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      27,
      32
     ]
    },
    "libcst.matchers.SaveMatchedNode": {
     "line number": [
      27,
      32
     ]
    },
    "libcst.matchers.extract": {
     "line number": [
      25,
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_extract.MatchersExtractTest.test_extract_sequence": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": {
    "libcst.Call": {
     "line number": [
      395
     ]
    },
    "libcst.Tuple": {
     "line number": [
      395
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      394,
      395
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      390
     ]
    },
    "libcst.matchers.DoNotCare": {
     "line number": [
      389
     ]
    },
    "libcst.matchers.Element": {
     "line number": [
      390
     ]
    },
    "libcst.matchers.SaveMatchedNode": {
     "line number": [
      390
     ]
    },
    "libcst.matchers.Tuple": {
     "line number": [
      387
     ]
    },
    "libcst.matchers.ZeroOrMore": {
     "line number": [
      390
     ]
    },
    "libcst.matchers.extract": {
     "line number": [
      385
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      384
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_extract.MatchersExtractTest.test_extract_sequence_element": {
  "data": {
   "lineno": 399,
   "symbols_in_volume": {
    "libcst.Call": {
     "line number": [
      412
     ]
    },
    "libcst.Tuple": {
     "line number": [
      412
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      411,
      412
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      426
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      407,
      423
     ]
    },
    "libcst.matchers.DoNotCare": {
     "line number": [
      406,
      421
     ]
    },
    "libcst.matchers.Element": {
     "line number": [
      407,
      422
     ]
    },
    "libcst.matchers.SaveMatchedNode": {
     "line number": [
      407,
      425
     ]
    },
    "libcst.matchers.Subscript": {
     "line number": [
      426
     ]
    },
    "libcst.matchers.Tuple": {
     "line number": [
      404,
      419
     ]
    },
    "libcst.matchers.ZeroOrMore": {
     "line number": [
      407,
      426
     ]
    },
    "libcst.matchers.extract": {
     "line number": [
      402,
      417
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      401
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_extract.MatchersExtractTest.test_extract_sequence_multiple_wildcards": {
  "data": {
   "lineno": 436,
   "symbols_in_volume": {
    "libcst.Tuple": {
     "line number": [
      448
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      448
     ]
    },
    "libcst.matchers.Element": {
     "line number": [
      443
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      443
     ]
    },
    "libcst.matchers.SaveMatchedNode": {
     "line number": [
      442,
      443,
      444
     ]
    },
    "libcst.matchers.Tuple": {
     "line number": [
      440
     ]
    },
    "libcst.matchers.ZeroOrMore": {
     "line number": [
      442,
      444
     ]
    },
    "libcst.matchers.extract": {
     "line number": [
      438
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      437
     ]
    },
    "tuple": {
     "line number": [
      452,
      454
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_extract.MatchersExtractTest.test_extract_simple": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "libcst.BinaryOperation": {
     "line number": [
      63
     ]
    },
    "libcst.Tuple": {
     "line number": [
      62
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      61,
      62
     ]
    },
    "libcst.matchers.BinaryOperation": {
     "line number": [
      55,
      73
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      57,
      75
     ]
    },
    "libcst.matchers.Element": {
     "line number": [
      54,
      57,
      72,
      75
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      55
     ]
    },
    "libcst.matchers.SaveMatchedNode": {
     "line number": [
      55,
      73
     ]
    },
    "libcst.matchers.Subscript": {
     "line number": [
      73
     ]
    },
    "libcst.matchers.Tuple": {
     "line number": [
      52,
      70
     ]
    },
    "libcst.matchers.extract": {
     "line number": [
      50,
      68
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_extract.MatchersExtractTest.test_extract_tautology": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "libcst.matchers.BinaryOperation": {
     "line number": [
      41
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      41
     ]
    },
    "libcst.matchers.Element": {
     "line number": [
      41,
      41
     ]
    },
    "libcst.matchers.SaveMatchedNode": {
     "line number": [
      40
     ]
    },
    "libcst.matchers.Tuple": {
     "line number": [
      41
     ]
    },
    "libcst.matchers.extract": {
     "line number": [
      38
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_extract.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_extract.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_extract.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_extract.m": {
  "data": {
   "shadows": "libcst.matchers"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_extract.meta": {
  "data": {
   "shadows": "libcst.metadata"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_findall": {
  "data": {},
  "type": "module"
 },
 "libcst.matchers.tests.test_findall.MatchersExtractAllTest": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      166
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_findall.MatchersExtractAllTest.test_extractall_simple": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": {
    "libcst.Call": {
     "line number": [
      171
     ]
    },
    "libcst.Tuple": {
     "line number": [
      171
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      170,
      171
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      169
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      169
     ]
    },
    "libcst.matchers.SaveMatchedNode": {
     "line number": [
      169
     ]
    },
    "libcst.matchers.extractall": {
     "line number": [
      169
     ]
    },
    "libcst.parse_expression": {
     "line number": [
      168
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_findall.MatchersFindAllTest": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_findall.MatchersFindAllTest.assertNodeSequenceEqual": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      26,
      32
     ]
    },
    "len": {
     "line number": [
      25,
      25
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      20,
      21
     ]
    },
    "str": {
     "line number": [
      22
     ]
    },
    "typing.Optional": {
     "line number": [
      22
     ]
    },
    "typing.Sequence": {
     "line number": [
      20,
      21
     ]
    },
    "zip": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_findall.MatchersFindAllTest.test_findall_with_metadata_wrapper": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      78,
      78,
      88,
      88
     ]
    },
    "libcst.matchers.MatchMetadata": {
     "line number": [
      74,
      83,
      93
     ]
    },
    "libcst.matchers.findall": {
     "line number": [
      72,
      81,
      91
     ]
    },
    "libcst.metadata.ExpressionContext.STORE": {
     "line number": [
      75,
      84,
      94
     ]
    },
    "libcst.metadata.ExpressionContextProvider": {
     "line number": [
      75,
      84,
      94
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      68
     ]
    },
    "libcst.parse_module": {
     "line number": [
      67
     ]
    },
    "textwrap.dedent": {
     "line number": [
      67
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_findall.MatchersFindAllTest.test_findall_with_sentinels": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "libcst.MaybeSentinel.DEFAULT": {
     "line number": [
      40
     ]
    },
    "libcst.RemovalSentinel.REMOVE": {
     "line number": [
      38
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      38,
      38,
      40,
      40
     ]
    },
    "libcst.matchers.findall": {
     "line number": [
      38,
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_findall.MatchersFindAllTest.test_findall_with_transformers": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": {
    "TestTransformer": {
     "line number": [
      161
     ]
    },
    "libcst.Name": {
     "line number": [
      163,
      163
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      160
     ]
    },
    "libcst.parse_module": {
     "line number": [
      159
     ]
    },
    "textwrap.dedent": {
     "line number": [
      159
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_findall.MatchersFindAllTest.test_findall_with_transformers.TestTransformer": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      134
     ]
    },
    "libcst.metadata.ExpressionContextProvider": {
     "line number": [
      136
     ]
    },
    "libcst.metadata.ProviderT": {
     "line number": [
      135
     ]
    },
    "typing.Sequence": {
     "line number": [
      135
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_findall.MatchersFindAllTest.test_findall_with_transformers.TestTransformer.__init__": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      141
     ]
    },
    "super": {
     "line number": [
      140
     ]
    },
    "typing.Sequence": {
     "line number": [
      141
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_findall.MatchersFindAllTest.test_findall_with_transformers.TestTransformer.visit_Module": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      143
     ]
    },
    "libcst.matchers.MatchMetadata": {
     "line number": [
      146
     ]
    },
    "libcst.metadata.ExpressionContext.STORE": {
     "line number": [
      147
     ]
    },
    "libcst.metadata.ExpressionContextProvider": {
     "line number": [
      147
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_findall.MatchersFindAllTest.test_findall_with_visitors": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      128
     ]
    },
    "libcst.Name": {
     "line number": [
      130,
      130
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      127
     ]
    },
    "libcst.parse_module": {
     "line number": [
      126
     ]
    },
    "textwrap.dedent": {
     "line number": [
      126
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_findall.MatchersFindAllTest.test_findall_with_visitors.TestVisitor": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      101
     ]
    },
    "libcst.metadata.ExpressionContextProvider": {
     "line number": [
      103
     ]
    },
    "libcst.metadata.ProviderT": {
     "line number": [
      102
     ]
    },
    "typing.Sequence": {
     "line number": [
      102
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_findall.MatchersFindAllTest.test_findall_with_visitors.TestVisitor.__init__": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      108
     ]
    },
    "super": {
     "line number": [
      107
     ]
    },
    "typing.Sequence": {
     "line number": [
      108
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_findall.MatchersFindAllTest.test_findall_with_visitors.TestVisitor.visit_Module": {
  "data": {
   "lineno": 110,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      110
     ]
    },
    "libcst.matchers.MatchMetadata": {
     "line number": [
      113
     ]
    },
    "libcst.metadata.ExpressionContext.STORE": {
     "line number": [
      114
     ]
    },
    "libcst.metadata.ExpressionContextProvider": {
     "line number": [
      114
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_findall.MatchersFindAllTest.test_simple_findall": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      55,
      55
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      54,
      54
     ]
    },
    "libcst.matchers.findall": {
     "line number": [
      54
     ]
    },
    "libcst.parse_module": {
     "line number": [
      53
     ]
    },
    "textwrap.dedent": {
     "line number": [
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_findall.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_findall.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_findall.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_findall.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_findall.dedent": {
  "data": {
   "shadows": "textwrap.dedent"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_findall.extractall": {
  "data": {
   "shadows": "libcst.matchers.extractall"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_findall.findall": {
  "data": {
   "shadows": "libcst.matchers.findall"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_findall.m": {
  "data": {
   "shadows": "libcst.matchers"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_findall.meta": {
  "data": {
   "shadows": "libcst.metadata"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_matchers": {
  "data": {},
  "type": "module"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_and_matcher_false": {
  "data": {
   "lineno": 1134,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      1144,
      1145,
      1146
     ]
    },
    "libcst.Call": {
     "line number": [
      1141
     ]
    },
    "libcst.Integer": {
     "line number": [
      1144,
      1145,
      1146
     ]
    },
    "libcst.Name": {
     "line number": [
      1137,
      1142
     ]
    },
    "libcst.matchers.AllOf": {
     "line number": [
      1137,
      1151
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      1152,
      1152,
      1152,
      1154,
      1155,
      1156
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      1149
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      1154,
      1155,
      1156
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      1137,
      1137,
      1150
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      1137,
      1140
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_and_matcher_true": {
  "data": {
   "lineno": 1103,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      1115,
      1116,
      1117
     ]
    },
    "libcst.Call": {
     "line number": [
      1112
     ]
    },
    "libcst.Integer": {
     "line number": [
      1115,
      1116,
      1117
     ]
    },
    "libcst.Name": {
     "line number": [
      1107,
      1113
     ]
    },
    "libcst.matchers.AllOf": {
     "line number": [
      1107,
      1122
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      1123,
      1123,
      1123,
      1125,
      1126,
      1127
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      1120
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      1125,
      1126,
      1127
     ]
    },
    "libcst.matchers.MatchRegex": {
     "line number": [
      1107
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      1107,
      1107,
      1121
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      1106,
      1111
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_and_operator_matcher_false": {
  "data": {
   "lineno": 1192,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      1194
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      1194,
      1194
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      1194
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_and_operator_matcher_true": {
  "data": {
   "lineno": 1163,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      1180,
      1188
     ]
    },
    "libcst.Name": {
     "line number": [
      1166,
      1172,
      1179,
      1180,
      1186,
      1188
     ]
    },
    "libcst.matchers.MatchIfTrue": {
     "line number": [
      1180,
      1188
     ]
    },
    "libcst.matchers.MatchRegex": {
     "line number": [
      1166,
      1173,
      1181,
      1187
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      1166,
      1166,
      1173,
      1173,
      1173,
      1181,
      1187
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      1166,
      1171,
      1178,
      1185
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_at_least_n_matcher_args_false": {
  "data": {
   "lineno": 824,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      833,
      834,
      835,
      854,
      855,
      856,
      873,
      874,
      875
     ]
    },
    "libcst.Call": {
     "line number": [
      830,
      851,
      870
     ]
    },
    "libcst.Integer": {
     "line number": [
      833,
      834,
      835,
      854,
      855,
      856,
      873,
      874,
      875
     ]
    },
    "libcst.Name": {
     "line number": [
      831,
      852,
      871
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      841,
      842,
      861,
      861,
      881,
      882
     ]
    },
    "libcst.matchers.AtLeastN": {
     "line number": [
      842,
      861,
      882
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      838,
      859,
      878
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      841,
      861,
      881,
      882
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      839,
      860,
      879
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      842
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      829,
      850,
      869
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_at_least_n_matcher_args_true": {
  "data": {
   "lineno": 763,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      771,
      772,
      773,
      790,
      791,
      792,
      809,
      810,
      811
     ]
    },
    "libcst.Call": {
     "line number": [
      768,
      787,
      806
     ]
    },
    "libcst.Integer": {
     "line number": [
      771,
      772,
      773,
      790,
      791,
      792,
      809,
      810,
      811
     ]
    },
    "libcst.Name": {
     "line number": [
      769,
      788,
      807
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      778,
      778,
      797,
      797,
      817,
      818
     ]
    },
    "libcst.matchers.AtLeastN": {
     "line number": [
      778,
      797,
      818
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      776,
      795,
      814
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      778,
      797,
      797,
      817,
      818,
      818
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      777,
      796,
      815
     ]
    },
    "libcst.matchers.OneOf": {
     "line number": [
      818
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      767,
      786,
      805
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_at_least_n_matcher_no_args_false": {
  "data": {
   "lineno": 590,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      597,
      598,
      599,
      612,
      613,
      614,
      629,
      630,
      631
     ]
    },
    "libcst.Call": {
     "line number": [
      594,
      609,
      626
     ]
    },
    "libcst.Integer": {
     "line number": [
      597,
      598,
      599,
      612,
      613,
      614,
      629,
      630,
      631
     ]
    },
    "libcst.Name": {
     "line number": [
      595,
      610,
      627
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      618,
      635
     ]
    },
    "libcst.matchers.AtLeastN": {
     "line number": [
      602,
      618,
      635
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      602,
      617,
      634
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      618,
      635
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      602,
      618,
      635
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      593,
      608,
      625
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_at_least_n_matcher_no_args_true": {
  "data": {
   "lineno": 459,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      466,
      467,
      468,
      480,
      481,
      482,
      494,
      495,
      496,
      509,
      510,
      511,
      526,
      527,
      528,
      544,
      545,
      546,
      562,
      563,
      564,
      579,
      580,
      581
     ]
    },
    "libcst.Call": {
     "line number": [
      463,
      477,
      491,
      506,
      523,
      541,
      559,
      576
     ]
    },
    "libcst.Integer": {
     "line number": [
      466,
      467,
      468,
      480,
      481,
      482,
      494,
      495,
      496,
      509,
      510,
      511,
      526,
      527,
      528,
      544,
      545,
      546,
      562,
      563,
      564,
      579,
      580,
      581
     ]
    },
    "libcst.Name": {
     "line number": [
      464,
      478,
      492,
      507,
      524,
      542,
      560,
      577
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      515,
      532,
      551,
      568,
      585
     ]
    },
    "libcst.matchers.AtLeastN": {
     "line number": [
      471,
      485,
      499,
      515,
      532,
      551,
      551,
      568,
      585
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      471,
      485,
      499,
      514,
      531,
      549,
      567,
      584
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      515,
      532,
      551,
      568,
      585
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      471,
      485,
      499,
      515,
      532,
      550,
      568,
      585
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      462,
      476,
      490,
      505,
      522,
      540,
      558,
      575
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_at_most_n_matcher_args_false": {
  "data": {
   "lineno": 1060,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      1068,
      1069,
      1070
     ]
    },
    "libcst.Call": {
     "line number": [
      1065
     ]
    },
    "libcst.Integer": {
     "line number": [
      1068,
      1069,
      1070
     ]
    },
    "libcst.Name": {
     "line number": [
      1066
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      1074
     ]
    },
    "libcst.matchers.AtMostN": {
     "line number": [
      1074
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      1073
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      1074
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      1074
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      1064
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_at_most_n_matcher_args_true": {
  "data": {
   "lineno": 1002,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      1007,
      1019,
      1019,
      1036,
      1036,
      1051,
      1051
     ]
    },
    "libcst.Call": {
     "line number": [
      1007,
      1017,
      1034,
      1049
     ]
    },
    "libcst.Integer": {
     "line number": [
      1007,
      1019,
      1019,
      1036,
      1036,
      1051,
      1051
     ]
    },
    "libcst.Name": {
     "line number": [
      1007,
      1018,
      1035,
      1050
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      1009,
      1024,
      1040,
      1040,
      1055,
      1055
     ]
    },
    "libcst.matchers.AtMostN": {
     "line number": [
      1009,
      1024
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      1008,
      1021,
      1038,
      1053
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      1009,
      1024,
      1024,
      1040,
      1040,
      1055,
      1055
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      1009,
      1022,
      1039,
      1054
     ]
    },
    "libcst.matchers.OneOf": {
     "line number": [
      1024
     ]
    },
    "libcst.matchers.ZeroOrOne": {
     "line number": [
      1040,
      1055
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      1006,
      1016,
      1033,
      1048
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_at_most_n_matcher_no_args_false": {
  "data": {
   "lineno": 954,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      961,
      962,
      963,
      976,
      977,
      978,
      993,
      994,
      995
     ]
    },
    "libcst.Call": {
     "line number": [
      958,
      973,
      990
     ]
    },
    "libcst.Integer": {
     "line number": [
      961,
      962,
      963,
      976,
      977,
      978,
      993,
      994,
      995
     ]
    },
    "libcst.Name": {
     "line number": [
      959,
      974,
      991
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      982,
      998
     ]
    },
    "libcst.matchers.AtMostN": {
     "line number": [
      966,
      982
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      966,
      981,
      998
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      982,
      998
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      966,
      982,
      998
     ]
    },
    "libcst.matchers.ZeroOrOne": {
     "line number": [
      998
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      957,
      972,
      989
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_at_most_n_matcher_no_args_true": {
  "data": {
   "lineno": 888,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      892,
      901,
      901,
      910,
      922,
      922,
      935,
      935,
      948,
      948
     ]
    },
    "libcst.Call": {
     "line number": [
      892,
      899,
      910,
      920,
      933,
      946
     ]
    },
    "libcst.Integer": {
     "line number": [
      892,
      901,
      901,
      910,
      922,
      922,
      935,
      935,
      948,
      948
     ]
    },
    "libcst.Name": {
     "line number": [
      892,
      900,
      910,
      921,
      934,
      947
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      912,
      925,
      938,
      950
     ]
    },
    "libcst.matchers.AtMostN": {
     "line number": [
      893,
      903,
      912,
      925,
      938
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      893,
      903,
      911,
      924,
      937,
      950
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      912,
      925,
      938,
      950
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      893,
      903,
      912,
      925,
      938,
      950
     ]
    },
    "libcst.matchers.ZeroOrOne": {
     "line number": [
      950
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      891,
      898,
      909,
      919,
      932,
      945
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_complex_matcher_false": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      128,
      129,
      130,
      142,
      143,
      144,
      156,
      157,
      158,
      171,
      172,
      173,
      193,
      194,
      195
     ]
    },
    "libcst.Call": {
     "line number": [
      125,
      139,
      153,
      168,
      190
     ]
    },
    "libcst.Integer": {
     "line number": [
      128,
      129,
      130,
      142,
      143,
      144,
      156,
      157,
      158,
      171,
      172,
      173,
      193,
      194,
      195
     ]
    },
    "libcst.Name": {
     "line number": [
      126,
      140,
      154,
      169,
      191
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      161,
      161,
      179,
      180,
      181,
      200
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      147,
      161,
      176,
      198
     ]
    },
    "libcst.matchers.DoNotCare": {
     "line number": [
      200,
      200
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      133
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      179,
      180,
      181,
      200
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      147,
      161,
      177,
      199
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      124,
      138,
      152,
      167,
      189
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_complex_matcher_true": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      28,
      29,
      30,
      42,
      43,
      44,
      56,
      57,
      58,
      70,
      71,
      72,
      87,
      88,
      89,
      109,
      110,
      111
     ]
    },
    "libcst.Call": {
     "line number": [
      25,
      39,
      53,
      67,
      84,
      106
     ]
    },
    "libcst.Integer": {
     "line number": [
      28,
      29,
      30,
      42,
      43,
      44,
      56,
      57,
      58,
      70,
      71,
      72,
      87,
      88,
      89,
      109,
      110,
      111
     ]
    },
    "libcst.Name": {
     "line number": [
      26,
      40,
      54,
      68,
      85,
      107
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      61,
      61,
      61,
      77,
      77,
      77,
      95,
      96,
      97,
      116
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      33,
      47,
      61,
      75,
      92,
      114
     ]
    },
    "libcst.matchers.DoNotCare": {
     "line number": [
      116,
      116
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      77,
      77,
      77,
      95,
      96,
      97,
      116
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      47,
      61,
      76,
      93,
      115
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      24,
      38,
      52,
      66,
      83,
      105
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_does_not_match_false": {
  "data": {
   "lineno": 1284,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      1288,
      1294,
      1300,
      1307,
      1321
     ]
    },
    "libcst.Call": {
     "line number": [
      1288,
      1294,
      1300,
      1307,
      1321
     ]
    },
    "libcst.Integer": {
     "line number": [
      1294,
      1300
     ]
    },
    "libcst.Name": {
     "line number": [
      1288,
      1288,
      1294,
      1300,
      1307,
      1307,
      1321,
      1321,
      1328
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      1289,
      1295,
      1301,
      1310,
      1322
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      1289,
      1295,
      1301,
      1308,
      1322
     ]
    },
    "libcst.matchers.DoesNotMatch": {
     "line number": [
      1289,
      1295,
      1301,
      1311,
      1328
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      1295,
      1301
     ]
    },
    "libcst.matchers.MatchRegex": {
     "line number": [
      1328
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      1289,
      1312,
      1312,
      1322,
      1322,
      1328
     ]
    },
    "libcst.matchers.OneOf": {
     "line number": [
      1312
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      1287,
      1293,
      1299,
      1306,
      1320,
      1327
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_does_not_match_operator_false": {
  "data": {
   "lineno": 1332,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      1336,
      1342,
      1349,
      1356,
      1363
     ]
    },
    "libcst.Call": {
     "line number": [
      1336,
      1342,
      1349,
      1356,
      1363
     ]
    },
    "libcst.Integer": {
     "line number": [
      1342
     ]
    },
    "libcst.Name": {
     "line number": [
      1336,
      1336,
      1342,
      1349,
      1349,
      1356,
      1356,
      1363,
      1363,
      1369
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      1337,
      1343,
      1350,
      1357,
      1364
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      1337,
      1343,
      1350,
      1357,
      1364
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      1343
     ]
    },
    "libcst.matchers.MatchRegex": {
     "line number": [
      1369
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      1337,
      1350,
      1350,
      1357,
      1357,
      1364,
      1364,
      1369
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      1335,
      1341,
      1348,
      1355,
      1362,
      1369
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_does_not_match_operator_true": {
  "data": {
   "lineno": 1238,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      1242,
      1248,
      1255,
      1261,
      1268,
      1275
     ]
    },
    "libcst.Call": {
     "line number": [
      1242,
      1248,
      1255,
      1261,
      1268,
      1275
     ]
    },
    "libcst.Integer": {
     "line number": [
      1248,
      1255,
      1275
     ]
    },
    "libcst.Name": {
     "line number": [
      1242,
      1242,
      1248,
      1255,
      1261,
      1261,
      1268,
      1268,
      1275,
      1281
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      1243,
      1249,
      1256,
      1262,
      1269,
      1276
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      1243,
      1249,
      1256,
      1262,
      1269,
      1276
     ]
    },
    "libcst.matchers.MatchRegex": {
     "line number": [
      1281
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      1243,
      1249,
      1256,
      1256,
      1262,
      1262,
      1269,
      1269,
      1276,
      1276,
      1281
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      1241,
      1247,
      1254,
      1260,
      1267,
      1274,
      1281
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_does_not_match_true": {
  "data": {
   "lineno": 1196,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      1200,
      1206,
      1212,
      1219
     ]
    },
    "libcst.Call": {
     "line number": [
      1200,
      1206,
      1212,
      1219
     ]
    },
    "libcst.Integer": {
     "line number": [
      1206,
      1212,
      1219
     ]
    },
    "libcst.Name": {
     "line number": [
      1200,
      1200,
      1206,
      1212,
      1219,
      1234
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      1201,
      1207,
      1213,
      1222
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      1201,
      1207,
      1213,
      1220
     ]
    },
    "libcst.matchers.DoesNotMatch": {
     "line number": [
      1201,
      1207,
      1213,
      1223,
      1234
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      1213
     ]
    },
    "libcst.matchers.MatchRegex": {
     "line number": [
      1234
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      1201,
      1207,
      1224,
      1224,
      1234
     ]
    },
    "libcst.matchers.OneOf": {
     "line number": [
      1224
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      1199,
      1205,
      1211,
      1218,
      1233
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_inverse_inverse_is_identity": {
  "data": {
   "lineno": 1372,
   "symbols_in_volume": {
    "libcst.matchers.DoesNotMatch": {
     "line number": [
      1375,
      1375
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      1374
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_lambda_matcher_false": {
  "data": {
   "lineno": 1087,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      1091
     ]
    },
    "libcst.matchers.MatchIfTrue": {
     "line number": [
      1091
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      1091
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      1090
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_lambda_matcher_true": {
  "data": {
   "lineno": 1079,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      1083
     ]
    },
    "libcst.matchers.MatchIfTrue": {
     "line number": [
      1083
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      1083
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      1082
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_or_matcher_false": {
  "data": {
   "lineno": 246,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      264,
      265,
      266
     ]
    },
    "libcst.Assign": {
     "line number": [
      255
     ]
    },
    "libcst.AssignTarget": {
     "line number": [
      255
     ]
    },
    "libcst.Call": {
     "line number": [
      261
     ]
    },
    "libcst.Integer": {
     "line number": [
      264,
      265,
      266
     ]
    },
    "libcst.Name": {
     "line number": [
      249,
      255,
      255,
      262
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      273,
      274,
      275,
      278,
      279,
      280
     ]
    },
    "libcst.matchers.Assign": {
     "line number": [
      256
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      269
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      273,
      274,
      275,
      278,
      279,
      280
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      249,
      249,
      256,
      256,
      270
     ]
    },
    "libcst.matchers.OneOf": {
     "line number": [
      249,
      256,
      271
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      249,
      254,
      260
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_or_matcher_true": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      223,
      224,
      225
     ]
    },
    "libcst.Assign": {
     "line number": [
      214
     ]
    },
    "libcst.AssignTarget": {
     "line number": [
      214
     ]
    },
    "libcst.Call": {
     "line number": [
      220
     ]
    },
    "libcst.Integer": {
     "line number": [
      223,
      224,
      225
     ]
    },
    "libcst.Name": {
     "line number": [
      208,
      214,
      214,
      221
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      232,
      233,
      234,
      237,
      238,
      239
     ]
    },
    "libcst.matchers.Assign": {
     "line number": [
      215
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      228
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      232,
      233,
      234,
      237,
      238,
      239
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      208,
      208,
      215,
      215,
      229
     ]
    },
    "libcst.matchers.OneOf": {
     "line number": [
      208,
      215,
      230
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      208,
      213,
      219
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_or_operator_matcher_false": {
  "data": {
   "lineno": 305,
   "symbols_in_volume": {
    "libcst.Assign": {
     "line number": [
      312
     ]
    },
    "libcst.AssignTarget": {
     "line number": [
      312
     ]
    },
    "libcst.Name": {
     "line number": [
      307,
      312,
      312
     ]
    },
    "libcst.matchers.Assign": {
     "line number": [
      313
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      307,
      307,
      313,
      313
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      307,
      311
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_or_operator_matcher_true": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": {
    "libcst.Assign": {
     "line number": [
      300
     ]
    },
    "libcst.AssignTarget": {
     "line number": [
      300
     ]
    },
    "libcst.Name": {
     "line number": [
      289,
      291,
      294,
      300,
      300
     ]
    },
    "libcst.matchers.Assign": {
     "line number": [
      301
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      289,
      289,
      291,
      291,
      294,
      294,
      294,
      301,
      301
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      289,
      291,
      294,
      299
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_regex_matcher_false": {
  "data": {
   "lineno": 1099,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      1101
     ]
    },
    "libcst.matchers.MatchRegex": {
     "line number": [
      1101
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      1101
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      1101
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_regex_matcher_true": {
  "data": {
   "lineno": 1095,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      1097
     ]
    },
    "libcst.matchers.MatchRegex": {
     "line number": [
      1097
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      1097
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      1097
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_simple_matcher_false": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      19
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      19
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_simple_matcher_true": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      15
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      15
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_zero_or_more_matcher_args_false": {
  "data": {
   "lineno": 724,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      732,
      733,
      734,
      751,
      752,
      753
     ]
    },
    "libcst.Call": {
     "line number": [
      729,
      748
     ]
    },
    "libcst.Integer": {
     "line number": [
      732,
      733,
      734,
      751,
      752,
      753
     ]
    },
    "libcst.Name": {
     "line number": [
      730,
      749
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      739,
      739,
      758,
      758
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      737,
      756
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      739,
      758,
      758
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      738,
      757
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      739
     ]
    },
    "libcst.matchers.ZeroOrMore": {
     "line number": [
      739,
      758
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      728,
      747
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_zero_or_more_matcher_args_true": {
  "data": {
   "lineno": 640,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      648,
      649,
      650,
      666,
      667,
      668,
      686,
      687,
      688,
      709,
      710,
      711
     ]
    },
    "libcst.Call": {
     "line number": [
      645,
      663,
      683,
      706
     ]
    },
    "libcst.Integer": {
     "line number": [
      648,
      649,
      650,
      666,
      667,
      668,
      686,
      687,
      688,
      709,
      710,
      711
     ]
    },
    "libcst.Name": {
     "line number": [
      646,
      664,
      684,
      707
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      655,
      655,
      673,
      673,
      694,
      695,
      717,
      718
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      653,
      671,
      691,
      714
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      655,
      673,
      673,
      694,
      694,
      695,
      717,
      718,
      718
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      654,
      672,
      692,
      715
     ]
    },
    "libcst.matchers.OneOf": {
     "line number": [
      694,
      718
     ]
    },
    "libcst.matchers.ZeroOrMore": {
     "line number": [
      655,
      673,
      694,
      696,
      718
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      644,
      662,
      682,
      705
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.MatchersMatcherTest.test_zero_or_more_matcher_no_args_true": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      325,
      326,
      327,
      342,
      343,
      344,
      360,
      361,
      362,
      378,
      379,
      380,
      396,
      397,
      398,
      414,
      415,
      416,
      439,
      440,
      441
     ]
    },
    "libcst.Call": {
     "line number": [
      322,
      339,
      357,
      375,
      393,
      411,
      436
     ]
    },
    "libcst.Integer": {
     "line number": [
      325,
      326,
      327,
      342,
      343,
      344,
      360,
      361,
      362,
      378,
      379,
      380,
      396,
      397,
      398,
      414,
      415,
      416,
      439,
      440,
      441
     ]
    },
    "libcst.Name": {
     "line number": [
      323,
      340,
      358,
      376,
      394,
      412,
      437
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      331,
      349,
      367,
      385,
      402,
      423,
      425,
      448,
      450,
      452
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      330,
      347,
      365,
      383,
      401,
      419,
      444
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      331,
      349,
      367,
      385,
      402,
      423,
      425,
      448,
      450,
      452
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      331,
      348,
      366,
      384,
      402,
      420,
      445
     ]
    },
    "libcst.matchers.ZeroOrMore": {
     "line number": [
      331,
      349,
      349,
      367,
      367,
      385,
      385,
      402,
      422,
      424,
      426,
      447,
      449,
      451,
      453
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      321,
      338,
      356,
      374,
      392,
      410,
      435
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_matchers.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_matchers.m": {
  "data": {
   "shadows": "libcst.matchers"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_matchers.matches": {
  "data": {
   "shadows": "libcst.matchers.matches"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_matchers_with_metadata": {
  "data": {},
  "type": "module"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersMetadataTest": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersMetadataTest._make_coderange": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "int": {
     "line number": [
      33,
      33,
      33,
      33
     ]
    },
    "libcst.metadata.CodePosition": {
     "line number": [
      36,
      37
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      35,
      34
     ]
    },
    "typing.Tuple": {
     "line number": [
      33,
      33
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersMetadataTest._make_fixture": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "libcst.BaseExpression": {
     "line number": [
      19
     ]
    },
    "libcst.Expr": {
     "line number": [
      27
     ]
    },
    "libcst.MetadataWrapper": {
     "line number": [
      21
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      24
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      23,
      24
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      19
     ]
    },
    "libcst.parse_module": {
     "line number": [
      20
     ]
    },
    "str": {
     "line number": [
      18
     ]
    },
    "textwrap.dedent": {
     "line number": [
      20
     ]
    },
    "typing.Tuple": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersMetadataTest.test_lambda_metadata_matcher": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": {
    "any": {
     "line number": [
      334,
      349
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      326
     ]
    },
    "libcst.MetadataWrapper": {
     "line number": [
      325
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      326
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      331,
      346
     ]
    },
    "libcst.matchers.MatchMetadataIfTrue": {
     "line number": [
      332,
      347
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      329,
      344
     ]
    },
    "libcst.metadata.QualifiedNameProvider": {
     "line number": [
      333,
      348
     ]
    },
    "libcst.parse_module": {
     "line number": [
      322
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersMetadataTest.test_lambda_metadata_matcher_operators": {
  "data": {
   "lineno": 379,
   "symbols_in_volume": {
    "any": {
     "line number": [
      393,
      397,
      410,
      414,
      428,
      433
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      385
     ]
    },
    "libcst.MetadataWrapper": {
     "line number": [
      384
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      385
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      390,
      407,
      424
     ]
    },
    "libcst.matchers.MatchMetadataIfTrue": {
     "line number": [
      391,
      395,
      408,
      412,
      426,
      431
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      388,
      405,
      422
     ]
    },
    "libcst.metadata.QualifiedNameProvider": {
     "line number": [
      392,
      396,
      409,
      413,
      427,
      432
     ]
    },
    "libcst.parse_module": {
     "line number": [
      381
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersMetadataTest.test_lambda_metadata_matcher_with_no_metadata": {
  "data": {
   "lineno": 358,
   "symbols_in_volume": {
    "any": {
     "line number": [
      371
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      363
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      363
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      368
     ]
    },
    "libcst.matchers.MatchMetadataIfTrue": {
     "line number": [
      369
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      366
     ]
    },
    "libcst.metadata.QualifiedNameProvider": {
     "line number": [
      370
     ]
    },
    "libcst.parse_module": {
     "line number": [
      360
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersMetadataTest.test_predicate_logic": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "libcst.matchers.AllOf": {
     "line number": [
      125
     ]
    },
    "libcst.matchers.BinaryOperation": {
     "line number": [
      106,
      124,
      140
     ]
    },
    "libcst.matchers.DoesNotMatch": {
     "line number": [
      141
     ]
    },
    "libcst.matchers.MatchMetadata": {
     "line number": [
      108,
      111,
      126,
      129,
      142
     ]
    },
    "libcst.matchers.OneOf": {
     "line number": [
      107
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      117,
      119,
      121,
      135,
      137,
      148
     ]
    },
    "libcst.metadata.ExpressionContext.LOAD": {
     "line number": [
      130
     ]
    },
    "libcst.metadata.ExpressionContext.STORE": {
     "line number": [
      143
     ]
    },
    "libcst.metadata.ExpressionContextProvider": {
     "line number": [
      130,
      143
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      109,
      112,
      127
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersMetadataTest.test_predicate_logic_on_attributes": {
  "data": {
   "lineno": 198,
   "symbols_in_volume": {
    "libcst.matchers.AllOf": {
     "line number": [
      234
     ]
    },
    "libcst.matchers.BinaryOperation": {
     "line number": [
      200,
      214,
      232,
      250
     ]
    },
    "libcst.matchers.DoesNotMatch": {
     "line number": [
      252
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      215
     ]
    },
    "libcst.matchers.MatchMetadata": {
     "line number": [
      203,
      206,
      217,
      220,
      235,
      238,
      253
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      201,
      233,
      251
     ]
    },
    "libcst.matchers.OneOf": {
     "line number": [
      202,
      216
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      213,
      227,
      229,
      245,
      247,
      260
     ]
    },
    "libcst.metadata.ExpressionContext.LOAD": {
     "line number": [
      239
     ]
    },
    "libcst.metadata.ExpressionContext.STORE": {
     "line number": [
      254
     ]
    },
    "libcst.metadata.ExpressionContextProvider": {
     "line number": [
      239,
      254
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      204,
      207,
      218,
      221,
      236
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersMetadataTest.test_predicate_logic_operators": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": {
    "libcst.matchers.BinaryOperation": {
     "line number": [
      152,
      170,
      186
     ]
    },
    "libcst.matchers.MatchMetadata": {
     "line number": [
      154,
      157,
      172,
      175,
      189
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      163,
      165,
      167,
      181,
      183,
      196
     ]
    },
    "libcst.metadata.ExpressionContext.LOAD": {
     "line number": [
      176
     ]
    },
    "libcst.metadata.ExpressionContext.STORE": {
     "line number": [
      190
     ]
    },
    "libcst.metadata.ExpressionContextProvider": {
     "line number": [
      176,
      190
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      155,
      158,
      173
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersMetadataTest.test_predicate_logic_operators_on_attributes": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": {
    "libcst.matchers.BinaryOperation": {
     "line number": [
      264,
      276,
      292,
      308
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      277
     ]
    },
    "libcst.matchers.MatchMetadata": {
     "line number": [
      266,
      269,
      278,
      281,
      294,
      297,
      311
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      265,
      293,
      309
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      275,
      287,
      289,
      303,
      305,
      318
     ]
    },
    "libcst.metadata.ExpressionContext.LOAD": {
     "line number": [
      298
     ]
    },
    "libcst.metadata.ExpressionContext.STORE": {
     "line number": [
      312
     ]
    },
    "libcst.metadata.ExpressionContextProvider": {
     "line number": [
      298,
      312
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      267,
      270,
      279,
      282,
      295
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersMetadataTest.test_simple_matcher_false": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": {
    "libcst.matchers.BinaryOperation": {
     "line number": [
      92
     ]
    },
    "libcst.matchers.MatchMetadata": {
     "line number": [
      80,
      93,
      96
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      78
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      76,
      90
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      81,
      94,
      97
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersMetadataTest.test_simple_matcher_true": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "libcst.matchers.BinaryOperation": {
     "line number": [
      60
     ]
    },
    "libcst.matchers.MatchMetadata": {
     "line number": [
      48,
      61,
      64
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      46
     ]
    },
    "libcst.matchers.matches": {
     "line number": [
      44,
      58
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      49,
      62,
      65
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersVisitorMetadataTest": {
  "data": {
   "lineno": 441,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      441
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersVisitorMetadataTest._make_fixture": {
  "data": {
   "lineno": 442,
   "symbols_in_volume": {
    "libcst.MetadataWrapper": {
     "line number": [
      443,
      442
     ]
    },
    "libcst.parse_module": {
     "line number": [
      443
     ]
    },
    "str": {
     "line number": [
      442
     ]
    },
    "textwrap.dedent": {
     "line number": [
      443
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersVisitorMetadataTest.test_matches_decorator_on_transformers": {
  "data": {
   "lineno": 567,
   "symbols_in_volume": {
    "TestTransformer": {
     "line number": [
      602
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersVisitorMetadataTest.test_matches_decorator_on_transformers.TestTransformer": {
  "data": {
   "lineno": 569,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      569
     ]
    },
    "libcst.metadata.ExpressionContextProvider": {
     "line number": [
      571
     ]
    },
    "libcst.metadata.ProviderT": {
     "line number": [
      570
     ]
    },
    "typing.Sequence": {
     "line number": [
      570
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersVisitorMetadataTest.test_matches_decorator_on_transformers.TestTransformer.__init__": {
  "data": {
   "lineno": 574,
   "symbols_in_volume": {
    "set": {
     "line number": [
      576
     ]
    },
    "str": {
     "line number": [
      576
     ]
    },
    "super": {
     "line number": [
      575
     ]
    },
    "typing.Set": {
     "line number": [
      576
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersVisitorMetadataTest.test_matches_decorator_on_transformers.TestTransformer._visit_assignments": {
  "data": {
   "lineno": 578,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      585
     ]
    },
    "libcst.matchers.MatchMetadata": {
     "line number": [
      580
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      579
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      578
     ]
    },
    "libcst.metadata.ExpressionContext.STORE": {
     "line number": [
      581
     ]
    },
    "libcst.metadata.ExpressionContextProvider": {
     "line number": [
      581
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersVisitorMetadataTest.test_matches_decorator_on_visitors": {
  "data": {
   "lineno": 527,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      562
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersVisitorMetadataTest.test_matches_decorator_on_visitors.TestVisitor": {
  "data": {
   "lineno": 529,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      529
     ]
    },
    "libcst.metadata.ExpressionContextProvider": {
     "line number": [
      531
     ]
    },
    "libcst.metadata.ProviderT": {
     "line number": [
      530
     ]
    },
    "typing.Sequence": {
     "line number": [
      530
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersVisitorMetadataTest.test_matches_decorator_on_visitors.TestVisitor.__init__": {
  "data": {
   "lineno": 534,
   "symbols_in_volume": {
    "set": {
     "line number": [
      536
     ]
    },
    "str": {
     "line number": [
      536
     ]
    },
    "super": {
     "line number": [
      535
     ]
    },
    "typing.Set": {
     "line number": [
      536
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersVisitorMetadataTest.test_matches_decorator_on_visitors.TestVisitor._visit_assignments": {
  "data": {
   "lineno": 538,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      545
     ]
    },
    "libcst.matchers.MatchMetadata": {
     "line number": [
      540
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      539
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      538
     ]
    },
    "libcst.metadata.ExpressionContext.STORE": {
     "line number": [
      541
     ]
    },
    "libcst.metadata.ExpressionContextProvider": {
     "line number": [
      541
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersVisitorMetadataTest.test_matches_on_transformers": {
  "data": {
   "lineno": 486,
   "symbols_in_volume": {
    "TestTransformer": {
     "line number": [
      522
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersVisitorMetadataTest.test_matches_on_transformers.TestTransformer": {
  "data": {
   "lineno": 488,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      488
     ]
    },
    "libcst.metadata.ExpressionContextProvider": {
     "line number": [
      490
     ]
    },
    "libcst.metadata.ProviderT": {
     "line number": [
      489
     ]
    },
    "typing.Sequence": {
     "line number": [
      489
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersVisitorMetadataTest.test_matches_on_transformers.TestTransformer.__init__": {
  "data": {
   "lineno": 493,
   "symbols_in_volume": {
    "set": {
     "line number": [
      495
     ]
    },
    "str": {
     "line number": [
      495
     ]
    },
    "super": {
     "line number": [
      494
     ]
    },
    "typing.Set": {
     "line number": [
      495
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersVisitorMetadataTest.test_matches_on_transformers.TestTransformer.visit_Name": {
  "data": {
   "lineno": 497,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      497
     ]
    },
    "libcst.matchers.MatchMetadata": {
     "line number": [
      502
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      501
     ]
    },
    "libcst.metadata.ExpressionContext.STORE": {
     "line number": [
      503
     ]
    },
    "libcst.metadata.ExpressionContextProvider": {
     "line number": [
      503
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersVisitorMetadataTest.test_matches_on_visitors": {
  "data": {
   "lineno": 445,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      481
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersVisitorMetadataTest.test_matches_on_visitors.TestVisitor": {
  "data": {
   "lineno": 447,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      447
     ]
    },
    "libcst.metadata.ExpressionContextProvider": {
     "line number": [
      449
     ]
    },
    "libcst.metadata.ProviderT": {
     "line number": [
      448
     ]
    },
    "typing.Sequence": {
     "line number": [
      448
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersVisitorMetadataTest.test_matches_on_visitors.TestVisitor.__init__": {
  "data": {
   "lineno": 452,
   "symbols_in_volume": {
    "set": {
     "line number": [
      454
     ]
    },
    "str": {
     "line number": [
      454
     ]
    },
    "super": {
     "line number": [
      453
     ]
    },
    "typing.Set": {
     "line number": [
      454
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.MatchersVisitorMetadataTest.test_matches_on_visitors.TestVisitor.visit_Name": {
  "data": {
   "lineno": 456,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      456
     ]
    },
    "libcst.matchers.MatchMetadata": {
     "line number": [
      461
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      460
     ]
    },
    "libcst.metadata.ExpressionContext.STORE": {
     "line number": [
      462
     ]
    },
    "libcst.metadata.ExpressionContextProvider": {
     "line number": [
      462
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.dedent": {
  "data": {
   "shadows": "textwrap.dedent"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.m": {
  "data": {
   "shadows": "libcst.matchers"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.matches": {
  "data": {
   "shadows": "libcst.matchers.matches"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_matchers_with_metadata.meta": {
  "data": {
   "shadows": "libcst.metadata"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_replace": {
  "data": {},
  "type": "module"
 },
 "libcst.matchers.tests.test_replace.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_replace.MatchersReplaceTest": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_replace.MatchersReplaceTest.test_replace_actual": {
  "data": {
   "lineno": 77,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      92
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      90
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      91,
      91
     ]
    },
    "libcst.matchers.replace": {
     "line number": [
      91
     ]
    },
    "libcst.parse_module": {
     "line number": [
      87
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_replace.MatchersReplaceTest.test_replace_actual._swap_bools": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      79,
      80,
      80,
      81
     ]
    },
    "libcst.Name": {
     "line number": [
      82,
      83
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      83
     ]
    },
    "str": {
     "line number": [
      80
     ]
    },
    "typing.Dict": {
     "line number": [
      80
     ]
    },
    "typing.Sequence": {
     "line number": [
      80
     ]
    },
    "typing.Union": {
     "line number": [
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_replace.MatchersReplaceTest.test_replace_add_one": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      108
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      107
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      108
     ]
    },
    "libcst.matchers.replace": {
     "line number": [
      108
     ]
    },
    "libcst.parse_module": {
     "line number": [
      106
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_replace.MatchersReplaceTest.test_replace_add_one._add_one": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": {
    "int": {
     "line number": [
      103
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      100,
      101,
      101,
      102
     ]
    },
    "libcst.Integer": {
     "line number": [
      103,
      103
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      103
     ]
    },
    "str": {
     "line number": [
      101,
      103
     ]
    },
    "typing.Dict": {
     "line number": [
      101
     ]
    },
    "typing.Sequence": {
     "line number": [
      101
     ]
    },
    "typing.Union": {
     "line number": [
      101
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_replace.MatchersReplaceTest.test_replace_add_one_to_foo_args": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      139
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      130
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      135
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      133
     ]
    },
    "libcst.matchers.Integer": {
     "line number": [
      135
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      134
     ]
    },
    "libcst.matchers.SaveMatchedNode": {
     "line number": [
      135
     ]
    },
    "libcst.matchers.replace": {
     "line number": [
      131
     ]
    },
    "libcst.parse_module": {
     "line number": [
      127
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_replace.MatchersReplaceTest.test_replace_add_one_to_foo_args._add_one_to_arg": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": {
    "int": {
     "line number": [
      122
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      114,
      115,
      115,
      119,
      116
     ]
    },
    "libcst.Integer": {
     "line number": [
      121,
      122
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      119,
      122
     ]
    },
    "str": {
     "line number": [
      115,
      122
     ]
    },
    "typing.Dict": {
     "line number": [
      115
     ]
    },
    "typing.Sequence": {
     "line number": [
      115
     ]
    },
    "typing.Union": {
     "line number": [
      115
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_replace.MatchersReplaceTest.test_replace_metadata": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": {
    "any": {
     "line number": [
      194
     ]
    },
    "libcst.MetadataWrapper": {
     "line number": [
      187
     ]
    },
    "libcst.Module": {
     "line number": [
      199
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      188
     ]
    },
    "libcst.matchers.MatchMetadataIfTrue": {
     "line number": [
      192
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      191
     ]
    },
    "libcst.matchers.replace": {
     "line number": [
      189
     ]
    },
    "libcst.metadata.QualifiedNameProvider": {
     "line number": [
      193
     ]
    },
    "libcst.parse_module": {
     "line number": [
      184
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_replace.MatchersReplaceTest.test_replace_metadata._rename_foo": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      179,
      180,
      180,
      181
     ]
    },
    "libcst.Name": {
     "line number": [
      182
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      182
     ]
    },
    "str": {
     "line number": [
      180
     ]
    },
    "typing.Dict": {
     "line number": [
      180
     ]
    },
    "typing.Sequence": {
     "line number": [
      180
     ]
    },
    "typing.Union": {
     "line number": [
      180
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_replace.MatchersReplaceTest.test_replace_metadata_on_transform": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": {
    "TestTransformer": {
     "line number": [
      243
     ]
    },
    "libcst.MetadataWrapper": {
     "line number": [
      216
     ]
    },
    "libcst.Module": {
     "line number": [
      243
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      243
     ]
    },
    "libcst.parse_module": {
     "line number": [
      213
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_replace.MatchersReplaceTest.test_replace_metadata_on_transform.TestTransformer": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      218
     ]
    },
    "libcst.metadata.ProviderT": {
     "line number": [
      219
     ]
    },
    "libcst.metadata.QualifiedNameProvider": {
     "line number": [
      220
     ]
    },
    "typing.Sequence": {
     "line number": [
      219
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_replace.MatchersReplaceTest.test_replace_metadata_on_transform.TestTransformer.leave_Module": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": {
    "any": {
     "line number": [
      233
     ]
    },
    "libcst.Module": {
     "line number": [
      224,
      224,
      240,
      225
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      227
     ]
    },
    "libcst.matchers.MatchMetadataIfTrue": {
     "line number": [
      231
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      230
     ]
    },
    "libcst.metadata.QualifiedNameProvider": {
     "line number": [
      232
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_replace.MatchersReplaceTest.test_replace_metadata_on_transform._rename_foo": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      208,
      209,
      209,
      210
     ]
    },
    "libcst.Name": {
     "line number": [
      211
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      211
     ]
    },
    "str": {
     "line number": [
      209
     ]
    },
    "typing.Dict": {
     "line number": [
      209
     ]
    },
    "typing.Sequence": {
     "line number": [
      209
     ]
    },
    "typing.Union": {
     "line number": [
      209
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_replace.MatchersReplaceTest.test_replace_noop": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "id": {
     "line number": [
      52,
      52
     ]
    },
    "libcst.Module": {
     "line number": [
      47
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      45
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      46,
      46
     ]
    },
    "libcst.matchers.replace": {
     "line number": [
      46
     ]
    },
    "libcst.parse_module": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_replace.MatchersReplaceTest.test_replace_noop._swap_bools": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      36,
      37,
      37,
      38
     ]
    },
    "libcst.Name": {
     "line number": [
      39,
      40
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      40
     ]
    },
    "str": {
     "line number": [
      37
     ]
    },
    "typing.Dict": {
     "line number": [
      37
     ]
    },
    "typing.Sequence": {
     "line number": [
      37
     ]
    },
    "typing.Union": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_replace.MatchersReplaceTest.test_replace_sentinel": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst.MaybeSentinel.DEFAULT": {
     "line number": [
      30,
      32
     ]
    },
    "libcst.RemovalSentinel.REMOVE": {
     "line number": [
      26,
      28
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      26,
      26,
      30,
      30
     ]
    },
    "libcst.matchers.replace": {
     "line number": [
      25,
      29
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_replace.MatchersReplaceTest.test_replace_sentinel._swap_bools": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      17,
      18,
      18,
      19
     ]
    },
    "libcst.Name": {
     "line number": [
      20,
      21
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      21
     ]
    },
    "str": {
     "line number": [
      18
     ]
    },
    "typing.Dict": {
     "line number": [
      18
     ]
    },
    "typing.Sequence": {
     "line number": [
      18
     ]
    },
    "typing.Union": {
     "line number": [
      18
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_replace.MatchersReplaceTest.test_replace_sequence_extract": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      171
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      161
     ]
    },
    "libcst.matchers.FunctionDef": {
     "line number": [
      164
     ]
    },
    "libcst.matchers.Param": {
     "line number": [
      166
     ]
    },
    "libcst.matchers.Parameters": {
     "line number": [
      165
     ]
    },
    "libcst.matchers.SaveMatchedNode": {
     "line number": [
      166
     ]
    },
    "libcst.matchers.ZeroOrMore": {
     "line number": [
      166
     ]
    },
    "libcst.matchers.replace": {
     "line number": [
      162
     ]
    },
    "libcst.parse_module": {
     "line number": [
      158
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_replace.MatchersReplaceTest.test_replace_sequence_extract._reverse_params": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      148,
      149,
      149,
      150
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      151
     ]
    },
    "libcst.Parameters": {
     "line number": [
      154
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      151
     ]
    },
    "list": {
     "line number": [
      154
     ]
    },
    "reversed": {
     "line number": [
      154
     ]
    },
    "str": {
     "line number": [
      149
     ]
    },
    "typing.Dict": {
     "line number": [
      149
     ]
    },
    "typing.Sequence": {
     "line number": [
      149
     ]
    },
    "typing.Union": {
     "line number": [
      149
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_replace.MatchersReplaceTest.test_replace_simple": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      61
     ]
    },
    "libcst.Name": {
     "line number": [
      60
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      59
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      60,
      60
     ]
    },
    "libcst.matchers.replace": {
     "line number": [
      60
     ]
    },
    "libcst.parse_module": {
     "line number": [
      56
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_replace.MatchersReplaceTest.test_replace_simple_sentinel": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      73
     ]
    },
    "libcst.RemoveFromParent": {
     "line number": [
      73
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      72
     ]
    },
    "libcst.matchers.Param": {
     "line number": [
      73
     ]
    },
    "libcst.matchers.replace": {
     "line number": [
      73
     ]
    },
    "libcst.parse_module": {
     "line number": [
      69
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_replace.MatchersReplaceTest.test_replace_updated_node_changes": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      277
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      271
     ]
    },
    "libcst.matchers.Arg": {
     "line number": [
      274
     ]
    },
    "libcst.matchers.Call": {
     "line number": [
      274,
      274
     ]
    },
    "libcst.matchers.SaveMatchedNode": {
     "line number": [
      274
     ]
    },
    "libcst.matchers.replace": {
     "line number": [
      272
     ]
    },
    "libcst.parse_module": {
     "line number": [
      268
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_replace.MatchersReplaceTest.test_replace_updated_node_changes._replace_nested": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": {
    "libcst.Arg": {
     "line number": [
      256
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      251,
      252,
      252,
      253
     ]
    },
    "libcst.Call": {
     "line number": [
      254,
      259
     ]
    },
    "libcst.Name": {
     "line number": [
      257,
      260
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      254,
      258,
      259
     ]
    },
    "str": {
     "line number": [
      252
     ]
    },
    "typing.Dict": {
     "line number": [
      252
     ]
    },
    "typing.Sequence": {
     "line number": [
      252
     ]
    },
    "typing.Union": {
     "line number": [
      252
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_replace.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_replace.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_replace.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_replace.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_replace.m": {
  "data": {
   "shadows": "libcst.matchers"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_replace.meta": {
  "data": {
   "shadows": "libcst.metadata"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_visitors": {
  "data": {},
  "type": "module"
 },
 "libcst.matchers.tests.test_visitors.MatchDecoratorMismatch": {
  "data": {
   "shadows": "libcst.matchers.MatchDecoratorMismatch"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_visitors.MatcherDecoratableTransformer": {
  "data": {
   "shadows": "libcst.matchers.MatcherDecoratableTransformer"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_visitors.MatcherDecoratableVisitor": {
  "data": {
   "shadows": "libcst.matchers.MatcherDecoratableVisitor"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_bad_leave_collecter_decorator": {
  "data": {
   "lineno": 462,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      475
     ]
    },
    "libcst.matchers.MatchDecoratorMismatch": {
     "line number": [
      472
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_bad_leave_collecter_decorator.TestVisitor": {
  "data": {
   "lineno": 463,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      463
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_bad_leave_collecter_decorator.TestVisitor.leave_SimpleString": {
  "data": {
   "lineno": 464,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      466,
      466
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      464
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      464
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_bad_leave_transform_decorator": {
  "data": {
   "lineno": 490,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      503
     ]
    },
    "libcst.matchers.MatchDecoratorMismatch": {
     "line number": [
      500
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_bad_leave_transform_decorator.TestVisitor": {
  "data": {
   "lineno": 491,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      491
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_bad_leave_transform_decorator.TestVisitor.leave_SimpleString": {
  "data": {
   "lineno": 492,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      494,
      494,
      495
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      492
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      492
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_bad_visit_collecter_decorator": {
  "data": {
   "lineno": 449,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      460
     ]
    },
    "libcst.matchers.MatchDecoratorMismatch": {
     "line number": [
      457
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_bad_visit_collecter_decorator.TestVisitor": {
  "data": {
   "lineno": 450,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      450
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_bad_visit_collecter_decorator.TestVisitor.visit_SimpleString": {
  "data": {
   "lineno": 451,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      452
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      451
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      451
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_bad_visit_transform_decorator": {
  "data": {
   "lineno": 477,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      488
     ]
    },
    "libcst.matchers.MatchDecoratorMismatch": {
     "line number": [
      485
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_bad_visit_transform_decorator.TestVisitor": {
  "data": {
   "lineno": 478,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      478
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_bad_visit_transform_decorator.TestVisitor.visit_SimpleString": {
  "data": {
   "lineno": 479,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      480
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      479
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      479
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_collector_leave_num_params": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      247
     ]
    },
    "libcst.matchers.MatchDecoratorMismatch": {
     "line number": [
      244
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_collector_leave_num_params.TestVisitor": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      235
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_collector_leave_num_params.TestVisitor._string_leave": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      238,
      238
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      236
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      236
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_collector_leave_return": {
  "data": {
   "lineno": 249,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      260
     ]
    },
    "libcst.matchers.MatchDecoratorMismatch": {
     "line number": [
      257
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_collector_leave_return.TestVisitor": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      250
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_collector_leave_return.TestVisitor._string_leave": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      252
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      252
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      251
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      251
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_collector_leave_superclass": {
  "data": {
   "lineno": 419,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      430
     ]
    },
    "libcst.matchers.MatchDecoratorMismatch": {
     "line number": [
      427
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_collector_leave_superclass.TestVisitor": {
  "data": {
   "lineno": 420,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      420
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_collector_leave_superclass.TestVisitor._string_leave": {
  "data": {
   "lineno": 421,
   "symbols_in_volume": {
    "libcst.BaseExpression": {
     "line number": [
      422
     ]
    },
    "libcst.matchers.Pass": {
     "line number": [
      421
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      421
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      421
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_collector_leave_union": {
  "data": {
   "lineno": 391,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      402
     ]
    },
    "libcst.matchers.MatchDecoratorMismatch": {
     "line number": [
      399
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_collector_leave_union.TestVisitor": {
  "data": {
   "lineno": 392,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      392
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_collector_leave_union.TestVisitor._string_leave": {
  "data": {
   "lineno": 393,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      394
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      393
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      393
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      393
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_collector_visit_num_params": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      217
     ]
    },
    "libcst.matchers.MatchDecoratorMismatch": {
     "line number": [
      214
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_collector_visit_num_params.TestVisitor": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      205
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_collector_visit_num_params.TestVisitor._string_visit": {
  "data": {
   "lineno": 206,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      208,
      208
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      206
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      206
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_collector_visit_return": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      174
     ]
    },
    "libcst.matchers.MatchDecoratorMismatch": {
     "line number": [
      171
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_collector_visit_return.TestVisitor": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      164
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_collector_visit_return.TestVisitor._string_visit": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      166
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      166
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      165
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      165
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_collector_visit_superclass": {
  "data": {
   "lineno": 365,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      376
     ]
    },
    "libcst.matchers.MatchDecoratorMismatch": {
     "line number": [
      373
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_collector_visit_superclass.TestVisitor": {
  "data": {
   "lineno": 366,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      366
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_collector_visit_superclass.TestVisitor._string_visit": {
  "data": {
   "lineno": 367,
   "symbols_in_volume": {
    "libcst.BaseExpression": {
     "line number": [
      368
     ]
    },
    "libcst.matchers.Pass": {
     "line number": [
      367
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      367
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      367
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_collector_visit_union": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      350
     ]
    },
    "libcst.matchers.MatchDecoratorMismatch": {
     "line number": [
      347
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_collector_visit_union.TestVisitor": {
  "data": {
   "lineno": 340,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      340
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_collector_visit_union.TestVisitor._string_visit": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      342
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      341
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      341
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      341
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_leave_num_params": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      232
     ]
    },
    "libcst.matchers.MatchDecoratorMismatch": {
     "line number": [
      229
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_leave_num_params.TestVisitor": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      220
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_leave_num_params.TestVisitor._string_leave": {
  "data": {
   "lineno": 221,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      223,
      224
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      221
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      221
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_leave_return_invalid_maybe": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      305
     ]
    },
    "libcst.matchers.MatchDecoratorMismatch": {
     "line number": [
      302
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_leave_return_invalid_maybe.TestVisitor": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      293
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_leave_return_invalid_maybe.TestVisitor._string_visit": {
  "data": {
   "lineno": 294,
   "symbols_in_volume": {
    "libcst.MaybeSentinel": {
     "line number": [
      297
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      296,
      296,
      297
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      294
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      294
     ]
    },
    "typing.Union": {
     "line number": [
      297
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_leave_return_invalid_remove": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      320
     ]
    },
    "libcst.matchers.MatchDecoratorMismatch": {
     "line number": [
      317
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_leave_return_invalid_remove.TestVisitor": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      308
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_leave_return_invalid_remove.TestVisitor._string_visit": {
  "data": {
   "lineno": 309,
   "symbols_in_volume": {
    "libcst.RemovalSentinel": {
     "line number": [
      312
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      311,
      311,
      312
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      309
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      309
     ]
    },
    "typing.Union": {
     "line number": [
      312
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_leave_return_invalid_superclass": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      275
     ]
    },
    "libcst.matchers.MatchDecoratorMismatch": {
     "line number": [
      272
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_leave_return_invalid_superclass.TestVisitor": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      263
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_leave_return_invalid_superclass.TestVisitor._string_visit": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": {
    "libcst.BaseParenthesizableWhitespace": {
     "line number": [
      267
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      266,
      266
     ]
    },
    "libcst.SimpleWhitespace": {
     "line number": [
      268
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      264
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      264
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_leave_return_invalid_union": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      337
     ]
    },
    "libcst.matchers.MatchDecoratorMismatch": {
     "line number": [
      334
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_leave_return_invalid_union.TestVisitor": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      323
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_leave_return_invalid_union.TestVisitor._string_leave": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      327,
      328
     ]
    },
    "libcst.Pass": {
     "line number": [
      329
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      327,
      328,
      330,
      329
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      324
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      324
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      324
     ]
    },
    "typing.Union": {
     "line number": [
      327,
      328,
      329
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_leave_return_wrong_type": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      290
     ]
    },
    "libcst.matchers.MatchDecoratorMismatch": {
     "line number": [
      287
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_leave_return_wrong_type.TestVisitor": {
  "data": {
   "lineno": 278,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      278
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_leave_return_wrong_type.TestVisitor._string_visit": {
  "data": {
   "lineno": 279,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      283,
      282
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      281,
      281
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      279
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      279
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_leave_superclass": {
  "data": {
   "lineno": 432,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      447
     ]
    },
    "libcst.matchers.MatchDecoratorMismatch": {
     "line number": [
      444
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_leave_superclass.TestVisitor": {
  "data": {
   "lineno": 433,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      433
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_leave_superclass.TestVisitor._string_leave": {
  "data": {
   "lineno": 434,
   "symbols_in_volume": {
    "libcst.BaseExpression": {
     "line number": [
      437,
      438,
      439
     ]
    },
    "libcst.matchers.Pass": {
     "line number": [
      434
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      434
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      434
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_leave_union": {
  "data": {
   "lineno": 404,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      417
     ]
    },
    "libcst.matchers.MatchDecoratorMismatch": {
     "line number": [
      414
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_leave_union.TestVisitor": {
  "data": {
   "lineno": 405,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      405
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_leave_union.TestVisitor._string_leave": {
  "data": {
   "lineno": 406,
   "symbols_in_volume": {
    "libcst.BaseExpression": {
     "line number": [
      409
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      408,
      408
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      406
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      406
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      406
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_visit_num_params": {
  "data": {
   "lineno": 189,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      202
     ]
    },
    "libcst.matchers.MatchDecoratorMismatch": {
     "line number": [
      199
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_visit_num_params.TestVisitor": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      190
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_visit_num_params.TestVisitor._string_visit": {
  "data": {
   "lineno": 191,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      193,
      193
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      191
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      191
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_visit_return": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      187
     ]
    },
    "libcst.matchers.MatchDecoratorMismatch": {
     "line number": [
      184
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_visit_return.TestVisitor": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      177
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_visit_return.TestVisitor._string_visit": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      179
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      179
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      178
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      178
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_visit_superclass": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      389
     ]
    },
    "libcst.matchers.MatchDecoratorMismatch": {
     "line number": [
      386
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_visit_superclass.TestVisitor": {
  "data": {
   "lineno": 379,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      379
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_visit_superclass.TestVisitor._string_visit": {
  "data": {
   "lineno": 380,
   "symbols_in_volume": {
    "libcst.BaseExpression": {
     "line number": [
      381
     ]
    },
    "libcst.matchers.Pass": {
     "line number": [
      380
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      380
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      380
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_visit_union": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      363
     ]
    },
    "libcst.matchers.MatchDecoratorMismatch": {
     "line number": [
      360
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_visit_union.TestVisitor": {
  "data": {
   "lineno": 353,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      353
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_invalid_transformer_visit_union.TestVisitor._string_visit": {
  "data": {
   "lineno": 354,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      355
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      354
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      354
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      354
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_pickleable_exception": {
  "data": {
   "lineno": 505,
   "symbols_in_volume": {
    "libcst.matchers.MatchDecoratorMismatch": {
     "line number": [
      506
     ]
    },
    "libcst.matchers.tests.test_visitors.pickle": {
     "line number": [
      507,
      508
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_collector_leave_superclass": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      126
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_collector_leave_superclass.TestVisitor": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      120
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_collector_leave_superclass.TestVisitor._string_leave": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": {
    "libcst.BaseExpression": {
     "line number": [
      122
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      121
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      121
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      121
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_collector_leave_union": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      104
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_collector_leave_union.TestVisitor": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      98
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_collector_leave_union.TestVisitor._string_leave": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      100
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      100
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      99
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      99
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      99
     ]
    },
    "typing.Union": {
     "line number": [
      100
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_collector_simple": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      33
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_collector_simple.TestVisitor": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      23
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_collector_simple.TestVisitor._string_leave": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      29
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      28
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_collector_simple.TestVisitor._string_visit": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      25
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      24
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_collector_visit_superclass": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      86
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_collector_visit_superclass.TestVisitor": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      80
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_collector_visit_superclass.TestVisitor._string_visit": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": {
    "libcst.BaseExpression": {
     "line number": [
      82
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      81
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      81
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      81
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_collector_visit_union": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      68
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_collector_visit_union.TestVisitor": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableVisitor": {
     "line number": [
      62
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_collector_visit_union.TestVisitor._string_visit": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      64
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      64
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      63
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      63
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      63
     ]
    },
    "typing.Union": {
     "line number": [
      64
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_transformer_base_class": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      59
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_transformer_base_class.TestVisitor": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      51
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_transformer_base_class.TestVisitor._string_leave": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "libcst.BaseExpression": {
     "line number": [
      55
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      54,
      54
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      52
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      52
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_transformer_leave_return_maybe": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      150
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_transformer_leave_return_maybe.TestVisitor": {
  "data": {
   "lineno": 142,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      142
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_transformer_leave_return_maybe.TestVisitor._assign_equal_leave": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": {
    "libcst.AssignEqual": {
     "line number": [
      145,
      145,
      146
     ]
    },
    "libcst.MaybeSentinel": {
     "line number": [
      146
     ]
    },
    "libcst.matchers.AssignEqual": {
     "line number": [
      143
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      143
     ]
    },
    "typing.Union": {
     "line number": [
      146
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_transformer_leave_return_remove": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      161
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_transformer_leave_return_remove.TestVisitor": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      153
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_transformer_leave_return_remove.TestVisitor._string_visit": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": {
    "libcst.AssignTarget": {
     "line number": [
      156,
      156,
      157
     ]
    },
    "libcst.RemovalSentinel": {
     "line number": [
      157
     ]
    },
    "libcst.matchers.AssignTarget": {
     "line number": [
      154
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      154
     ]
    },
    "typing.Union": {
     "line number": [
      157
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_transformer_leave_superclass": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      139
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_transformer_leave_superclass.TestVisitor": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      129
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_transformer_leave_superclass.TestVisitor._string_leave": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": {
    "libcst.BaseExpression": {
     "line number": [
      133,
      134,
      135
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      130
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      130
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      130
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_transformer_leave_union": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      117
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_transformer_leave_union.TestVisitor": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      107
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_transformer_leave_union.TestVisitor._string_leave": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      111,
      112,
      113
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      111,
      112,
      113
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      108
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      108
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      108
     ]
    },
    "typing.Union": {
     "line number": [
      111,
      112,
      113
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_transformer_simple": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_transformer_simple.TestVisitor": {
  "data": {
   "lineno": 36,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_transformer_simple.TestVisitor._string_leave": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      43,
      43,
      44
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      41
     ]
    },
    "libcst.matchers.leave": {
     "line number": [
      41
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_transformer_simple.TestVisitor._string_visit": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      38
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      37
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_transformer_visit_superclass": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      95
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_transformer_visit_superclass.TestVisitor": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      89
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_transformer_visit_superclass.TestVisitor._string_visit": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": {
    "libcst.BaseExpression": {
     "line number": [
      91
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      90
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      90
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      90
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_transformer_visit_union": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      77
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_transformer_visit_union.TestVisitor": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": {
    "libcst.matchers.MatcherDecoratableTransformer": {
     "line number": [
      71
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.matchers.tests.test_visitors.MatchersVisitLeaveDecoratorTypingTest.test_valid_transformer_visit_union.TestVisitor._string_visit": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      73
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      73
     ]
    },
    "libcst.matchers.Name": {
     "line number": [
      72
     ]
    },
    "libcst.matchers.SimpleString": {
     "line number": [
      72
     ]
    },
    "libcst.matchers.visit": {
     "line number": [
      72
     ]
    },
    "typing.Union": {
     "line number": [
      73
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.matchers.tests.test_visitors.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_visitors.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_visitors.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_visitors.leave": {
  "data": {
   "shadows": "libcst.matchers.leave"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_visitors.m": {
  "data": {
   "shadows": "libcst.matchers"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_visitors.pickle": {
  "data": {
   "shadows": "pickle"
  },
  "type": "import"
 },
 "libcst.matchers.tests.test_visitors.visit": {
  "data": {
   "shadows": "libcst.matchers.visit"
  },
  "type": "import"
 },
 "libcst.matchers.visit": {
  "data": {
   "shadows": "libcst.matchers._decorators.visit"
  },
  "type": "import"
 },
 "libcst.metadata": {
  "data": {},
  "type": "module"
 },
 "libcst.metadata.Access": {
  "data": {
   "shadows": "libcst.metadata.scope_provider.Access"
  },
  "type": "import"
 },
 "libcst.metadata.Accesses": {
  "data": {
   "shadows": "libcst.metadata.scope_provider.Accesses"
  },
  "type": "import"
 },
 "libcst.metadata.Assignment": {
  "data": {
   "shadows": "libcst.metadata.scope_provider.Assignment"
  },
  "type": "import"
 },
 "libcst.metadata.Assignments": {
  "data": {
   "shadows": "libcst.metadata.scope_provider.Assignments"
  },
  "type": "import"
 },
 "libcst.metadata.BaseAssignment": {
  "data": {
   "shadows": "libcst.metadata.scope_provider.BaseAssignment"
  },
  "type": "import"
 },
 "libcst.metadata.BaseMetadataProvider": {
  "data": {
   "shadows": "libcst.metadata.base_provider.BaseMetadataProvider"
  },
  "type": "import"
 },
 "libcst.metadata.BatchableMetadataProvider": {
  "data": {
   "shadows": "libcst.metadata.base_provider.BatchableMetadataProvider"
  },
  "type": "import"
 },
 "libcst.metadata.BuiltinAssignment": {
  "data": {
   "shadows": "libcst.metadata.scope_provider.BuiltinAssignment"
  },
  "type": "import"
 },
 "libcst.metadata.ByteSpanPositionProvider": {
  "data": {
   "shadows": "libcst.metadata.span_provider.ByteSpanPositionProvider"
  },
  "type": "import"
 },
 "libcst.metadata.ClassScope": {
  "data": {
   "shadows": "libcst.metadata.scope_provider.ClassScope"
  },
  "type": "import"
 },
 "libcst.metadata.CodePosition": {
  "data": {
   "shadows": "libcst._position.CodePosition"
  },
  "type": "import"
 },
 "libcst.metadata.CodeRange": {
  "data": {
   "shadows": "libcst._position.CodeRange"
  },
  "type": "import"
 },
 "libcst.metadata.CodeSpan": {
  "data": {
   "shadows": "libcst.metadata.span_provider.CodeSpan"
  },
  "type": "import"
 },
 "libcst.metadata.CodegenPartial": {
  "data": {
   "shadows": "libcst.metadata.reentrant_codegen.CodegenPartial"
  },
  "type": "import"
 },
 "libcst.metadata.ComprehensionScope": {
  "data": {
   "shadows": "libcst.metadata.scope_provider.ComprehensionScope"
  },
  "type": "import"
 },
 "libcst.metadata.ExperimentalReentrantCodegenProvider": {
  "data": {
   "shadows": "libcst.metadata.reentrant_codegen.ExperimentalReentrantCodegenProvider"
  },
  "type": "import"
 },
 "libcst.metadata.ExpressionContext": {
  "data": {
   "shadows": "libcst.metadata.expression_context_provider.ExpressionContext"
  },
  "type": "import"
 },
 "libcst.metadata.ExpressionContextProvider": {
  "data": {
   "shadows": "libcst.metadata.expression_context_provider.ExpressionContextProvider"
  },
  "type": "import"
 },
 "libcst.metadata.FullRepoManager": {
  "data": {
   "shadows": "libcst.metadata.full_repo_manager.FullRepoManager"
  },
  "type": "import"
 },
 "libcst.metadata.FunctionScope": {
  "data": {
   "shadows": "libcst.metadata.scope_provider.FunctionScope"
  },
  "type": "import"
 },
 "libcst.metadata.GlobalScope": {
  "data": {
   "shadows": "libcst.metadata.scope_provider.GlobalScope"
  },
  "type": "import"
 },
 "libcst.metadata.MetadataWrapper": {
  "data": {
   "shadows": "libcst.metadata.wrapper.MetadataWrapper"
  },
  "type": "import"
 },
 "libcst.metadata.ParentNodeProvider": {
  "data": {
   "shadows": "libcst.metadata.parent_node_provider.ParentNodeProvider"
  },
  "type": "import"
 },
 "libcst.metadata.PositionProvider": {
  "data": {
   "shadows": "libcst.metadata.position_provider.PositionProvider"
  },
  "type": "import"
 },
 "libcst.metadata.ProviderT": {
  "data": {
   "shadows": "libcst.metadata.base_provider.ProviderT"
  },
  "type": "import"
 },
 "libcst.metadata.QualifiedName": {
  "data": {
   "shadows": "libcst.metadata.scope_provider.QualifiedName"
  },
  "type": "import"
 },
 "libcst.metadata.QualifiedNameProvider": {
  "data": {
   "shadows": "libcst.metadata.scope_provider.QualifiedNameProvider"
  },
  "type": "import"
 },
 "libcst.metadata.QualifiedNameSource": {
  "data": {
   "shadows": "libcst.metadata.scope_provider.QualifiedNameSource"
  },
  "type": "import"
 },
 "libcst.metadata.Scope": {
  "data": {
   "shadows": "libcst.metadata.scope_provider.Scope"
  },
  "type": "import"
 },
 "libcst.metadata.ScopeProvider": {
  "data": {
   "shadows": "libcst.metadata.scope_provider.ScopeProvider"
  },
  "type": "import"
 },
 "libcst.metadata.TypeInferenceProvider": {
  "data": {
   "shadows": "libcst.metadata.type_inference_provider.TypeInferenceProvider"
  },
  "type": "import"
 },
 "libcst.metadata.VisitorMetadataProvider": {
  "data": {
   "shadows": "libcst.metadata.base_provider.VisitorMetadataProvider"
  },
  "type": "import"
 },
 "libcst.metadata.WhitespaceInclusivePositionProvider": {
  "data": {
   "shadows": "libcst.metadata.position_provider.WhitespaceInclusivePositionProvider"
  },
  "type": "import"
 },
 "libcst.metadata.__all__": {
  "data": {
   "lineno": 50
  },
  "type": "constant"
 },
 "libcst.metadata.base_provider": {
  "data": {
   "symbols_in_volume": {
    "typing.TYPE_CHECKING": {
     "line number": [
      30
     ]
    },
    "typing.Type": {
     "line number": [
      36
     ]
    },
    "typing.TypeVar": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst.metadata.base_provider.BaseMetadataProvider": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "int": {
     "line number": [
      61
     ]
    },
    "libcst._metadata_dependent.MetadataDependent": {
     "line number": [
      43
     ]
    },
    "libcst.metadata.base_provider._ProvidedMetadataT": {
     "line number": [
      43,
      56
     ]
    },
    "object": {
     "line number": [
      61
     ]
    },
    "pathlib.Path": {
     "line number": [
      61
     ]
    },
    "str": {
     "line number": [
      61,
      61
     ]
    },
    "typing.Callable": {
     "line number": [
      61
     ]
    },
    "typing.Generic": {
     "line number": [
      43
     ]
    },
    "typing.List": {
     "line number": [
      61
     ]
    },
    "typing.Mapping": {
     "line number": [
      61
     ]
    },
    "typing.MutableMapping": {
     "line number": [
      56
     ]
    },
    "typing.Optional": {
     "line number": [
      61
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.base_provider.BaseMetadataProvider.__init__": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      68
     ]
    },
    "object": {
     "line number": [
      63
     ]
    },
    "super": {
     "line number": [
      64
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.base_provider.BaseMetadataProvider._gen": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      89
     ]
    },
    "libcst.metadata.base_provider._ProvidedMetadataT": {
     "line number": [
      75
     ]
    },
    "types.MappingProxyType": {
     "line number": [
      89
     ]
    },
    "typing.Mapping": {
     "line number": [
      75
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.base_provider.BaseMetadataProvider._gen_impl": {
  "data": {
   "lineno": 91
  },
  "type": "function"
 },
 "libcst.metadata.base_provider.BaseMetadataProvider.get_metadata": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "libcst._metadata_dependent._T": {
     "line number": [
      111,
      120,
      122,
      112
     ]
    },
    "libcst._metadata_dependent._UNDEFINED_DEFAULT": {
     "line number": [
      111,
      119
     ]
    },
    "super": {
     "line number": [
      124
     ]
    },
    "type": {
     "line number": [
      118
     ]
    },
    "typing.Type": {
     "line number": [
      109
     ]
    },
    "typing.cast": {
     "line number": [
      120,
      122
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.base_provider.BaseMetadataProvider.set_metadata": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": {
    "libcst.metadata.base_provider._ProvidedMetadataT": {
     "line number": [
      101
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.base_provider.BatchableCSTVisitor": {
  "data": {
   "shadows": "libcst._batched_visitor.BatchableCSTVisitor"
  },
  "type": "import"
 },
 "libcst.metadata.base_provider.BatchableMetadataProvider": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": {
    "libcst._batched_visitor.BatchableCSTVisitor": {
     "line number": [
      141
     ]
    },
    "libcst.metadata.base_provider.BaseMetadataProvider": {
     "line number": [
      141
     ]
    },
    "libcst.metadata.base_provider._ProvidedMetadataT": {
     "line number": [
      141
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.base_provider.BatchableMetadataProvider._gen_impl": {
  "data": {
   "lineno": 153
  },
  "type": "function"
 },
 "libcst.metadata.base_provider.CSTNode": {
  "data": {
   "shadows": "libcst._nodes.base.CSTNode"
  },
  "type": "import"
 },
 "libcst.metadata.base_provider.CSTVisitor": {
  "data": {
   "shadows": "libcst._visitors.CSTVisitor"
  },
  "type": "import"
 },
 "libcst.metadata.base_provider.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst.metadata.base_provider.Generic": {
  "data": {
   "shadows": "typing.Generic"
  },
  "type": "import"
 },
 "libcst.metadata.base_provider.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.metadata.base_provider.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "libcst.metadata.base_provider.MappingProxyType": {
  "data": {
   "shadows": "types.MappingProxyType"
  },
  "type": "import"
 },
 "libcst.metadata.base_provider.MetadataDependent": {
  "data": {
   "shadows": "libcst._metadata_dependent.MetadataDependent"
  },
  "type": "import"
 },
 "libcst.metadata.base_provider.MetadataWrapper": {
  "data": {
   "shadows": "libcst.metadata.wrapper.MetadataWrapper"
  },
  "type": "import"
 },
 "libcst.metadata.base_provider.Module": {
  "data": {
   "shadows": "libcst._nodes.module.Module"
  },
  "type": "import"
 },
 "libcst.metadata.base_provider.MutableMapping": {
  "data": {
   "shadows": "typing.MutableMapping"
  },
  "type": "import"
 },
 "libcst.metadata.base_provider.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.metadata.base_provider.Path": {
  "data": {
   "shadows": "pathlib.Path"
  },
  "type": "import"
 },
 "libcst.metadata.base_provider.ProviderT": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "libcst.metadata.base_provider.TYPE_CHECKING": {
  "data": {
   "shadows": "typing.TYPE_CHECKING"
  },
  "type": "import"
 },
 "libcst.metadata.base_provider.Type": {
  "data": {
   "shadows": "typing.Type"
  },
  "type": "import"
 },
 "libcst.metadata.base_provider.TypeVar": {
  "data": {
   "shadows": "typing.TypeVar"
  },
  "type": "import"
 },
 "libcst.metadata.base_provider.VisitorMetadataProvider": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": {
    "libcst._visitors.CSTVisitor": {
     "line number": [
      127
     ]
    },
    "libcst.metadata.base_provider.BaseMetadataProvider": {
     "line number": [
      127
     ]
    },
    "libcst.metadata.base_provider._ProvidedMetadataT": {
     "line number": [
      127
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.base_provider.VisitorMetadataProvider._gen_impl": {
  "data": {
   "lineno": 136
  },
  "type": "function"
 },
 "libcst.metadata.base_provider._MetadataT": {
  "data": {
   "shadows": "libcst._metadata_dependent._T"
  },
  "type": "import"
 },
 "libcst.metadata.base_provider._ModuleT": {
  "data": {
   "shadows": "libcst._nodes.module._ModuleSelfT"
  },
  "type": "import"
 },
 "libcst.metadata.base_provider._ProvidedMetadataT": {
  "data": {
   "lineno": 39
  },
  "type": "constant"
 },
 "libcst.metadata.base_provider._UNDEFINED_DEFAULT": {
  "data": {
   "shadows": "libcst._metadata_dependent._UNDEFINED_DEFAULT"
  },
  "type": "import"
 },
 "libcst.metadata.base_provider.cast": {
  "data": {
   "shadows": "typing.cast"
  },
  "type": "import"
 },
 "libcst.metadata.expression_context_provider": {
  "data": {},
  "type": "module"
 },
 "libcst.metadata.expression_context_provider.BatchableMetadataProvider": {
  "data": {
   "shadows": "libcst.metadata.base_provider.BatchableMetadataProvider"
  },
  "type": "import"
 },
 "libcst.metadata.expression_context_provider.Enum": {
  "data": {
   "shadows": "enum.Enum"
  },
  "type": "import"
 },
 "libcst.metadata.expression_context_provider.ExpressionContext": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "enum.Enum": {
     "line number": [
      14
     ]
    },
    "enum.auto": {
     "line number": [
      26,
      42,
      52
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.expression_context_provider.ExpressionContextProvider": {
  "data": {
   "lineno": 159,
   "symbols_in_volume": {
    "libcst.metadata.base_provider.BatchableMetadataProvider": {
     "line number": [
      159
     ]
    },
    "libcst.metadata.expression_context_provider.ExpressionContext": {
     "line number": [
      159
     ]
    },
    "typing.Optional": {
     "line number": [
      159
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.expression_context_provider.ExpressionContextProvider.visit_Module": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      177
     ]
    },
    "libcst.Module": {
     "line number": [
      177
     ]
    },
    "libcst.metadata.expression_context_provider.ExpressionContext": {
     "line number": [
      178
     ]
    },
    "libcst.metadata.expression_context_provider.ExpressionContextVisitor": {
     "line number": [
      178
     ]
    },
    "typing.Optional": {
     "line number": [
      177
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.expression_context_provider.ExpressionContextVisitor": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "libcst.CSTVisitor": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.expression_context_provider.ExpressionContextVisitor.__init__": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "libcst.metadata.expression_context_provider.ExpressionContext": {
     "line number": [
      57
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.expression_context_provider.ExpressionContextVisitor.visit_AnnAssign": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      70
     ]
    },
    "libcst.AnnAssign": {
     "line number": [
      70
     ]
    },
    "libcst.metadata.expression_context_provider.ExpressionContext": {
     "line number": [
      72
     ]
    },
    "libcst.metadata.expression_context_provider.ExpressionContextVisitor": {
     "line number": [
      72
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.expression_context_provider.ExpressionContextVisitor.visit_AsName": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      91
     ]
    },
    "libcst.AsName": {
     "line number": [
      91
     ]
    },
    "libcst.metadata.expression_context_provider.ExpressionContext": {
     "line number": [
      93
     ]
    },
    "libcst.metadata.expression_context_provider.ExpressionContextVisitor": {
     "line number": [
      93
     ]
    },
    "typing.Optional": {
     "line number": [
      91
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.expression_context_provider.ExpressionContextVisitor.visit_Assign": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      62
     ]
    },
    "libcst.Assign": {
     "line number": [
      62
     ]
    },
    "libcst.metadata.expression_context_provider.ExpressionContext": {
     "line number": [
      65
     ]
    },
    "libcst.metadata.expression_context_provider.ExpressionContextVisitor": {
     "line number": [
      65
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.expression_context_provider.ExpressionContextVisitor.visit_Attribute": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      126
     ]
    },
    "libcst.Attribute": {
     "line number": [
      126
     ]
    },
    "libcst.metadata.expression_context_provider.ExpressionContext": {
     "line number": [
      129
     ]
    },
    "libcst.metadata.expression_context_provider.ExpressionContextVisitor": {
     "line number": [
      129
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.expression_context_provider.ExpressionContextVisitor.visit_AugAssign": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      80
     ]
    },
    "libcst.AugAssign": {
     "line number": [
      80
     ]
    },
    "libcst.metadata.expression_context_provider.ExpressionContext": {
     "line number": [
      82
     ]
    },
    "libcst.metadata.expression_context_provider.ExpressionContextVisitor": {
     "line number": [
      82
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.expression_context_provider.ExpressionContextVisitor.visit_CompFor": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      97
     ]
    },
    "libcst.CompFor": {
     "line number": [
      97
     ]
    },
    "libcst.metadata.expression_context_provider.ExpressionContext": {
     "line number": [
      99
     ]
    },
    "libcst.metadata.expression_context_provider.ExpressionContextVisitor": {
     "line number": [
      99
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.expression_context_provider.ExpressionContextVisitor.visit_Del": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      120
     ]
    },
    "libcst.Del": {
     "line number": [
      120
     ]
    },
    "libcst.metadata.expression_context_provider.ExpressionContext": {
     "line number": [
      122
     ]
    },
    "libcst.metadata.expression_context_provider.ExpressionContextVisitor": {
     "line number": [
      122
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.expression_context_provider.ExpressionContextVisitor.visit_For": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      109
     ]
    },
    "libcst.For": {
     "line number": [
      109
     ]
    },
    "libcst.metadata.expression_context_provider.ExpressionContext": {
     "line number": [
      111
     ]
    },
    "libcst.metadata.expression_context_provider.ExpressionContextVisitor": {
     "line number": [
      111
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.expression_context_provider.ExpressionContextVisitor.visit_List": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      152
     ]
    },
    "libcst.List": {
     "line number": [
      152
     ]
    },
    "typing.Optional": {
     "line number": [
      152
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.expression_context_provider.ExpressionContextVisitor.visit_Name": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      87
     ]
    },
    "libcst.Name": {
     "line number": [
      87
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.expression_context_provider.ExpressionContextVisitor.visit_StarredElement": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      155
     ]
    },
    "libcst.StarredElement": {
     "line number": [
      155
     ]
    },
    "typing.Optional": {
     "line number": [
      155
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.expression_context_provider.ExpressionContextVisitor.visit_Subscript": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      134
     ]
    },
    "isinstance": {
     "line number": [
      140
     ]
    },
    "libcst.Subscript": {
     "line number": [
      134
     ]
    },
    "libcst.metadata.expression_context_provider.ExpressionContext": {
     "line number": [
      137,
      143,
      146
     ]
    },
    "libcst.metadata.expression_context_provider.ExpressionContextVisitor": {
     "line number": [
      137,
      143,
      146
     ]
    },
    "slice": {
     "line number": [
      139,
      140,
      141
     ]
    },
    "slice.visit": {
     "line number": [
      146
     ]
    },
    "typing.Sequence": {
     "line number": [
      140
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.expression_context_provider.ExpressionContextVisitor.visit_Tuple": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      149
     ]
    },
    "libcst.Tuple": {
     "line number": [
      149
     ]
    },
    "typing.Optional": {
     "line number": [
      149
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.expression_context_provider.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.metadata.expression_context_provider.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst.metadata.expression_context_provider.auto": {
  "data": {
   "shadows": "enum.auto"
  },
  "type": "import"
 },
 "libcst.metadata.expression_context_provider.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.metadata.full_repo_manager": {
  "data": {
   "symbols_in_volume": {
    "typing.TYPE_CHECKING": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst.metadata.full_repo_manager.Collection": {
  "data": {
   "shadows": "typing.Collection"
  },
  "type": "import"
 },
 "libcst.metadata.full_repo_manager.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "libcst.metadata.full_repo_manager.FullRepoManager": {
  "data": {
   "lineno": 18
  },
  "type": "class"
 },
 "libcst.metadata.full_repo_manager.FullRepoManager.__init__": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "int": {
     "line number": [
      24
     ]
    },
    "list": {
     "line number": [
      41
     ]
    },
    "object": {
     "line number": [
      38
     ]
    },
    "pathlib.Path": {
     "line number": [
      37,
      37
     ]
    },
    "str": {
     "line number": [
      21,
      22,
      38,
      41
     ]
    },
    "typing.Collection": {
     "line number": [
      22,
      23
     ]
    },
    "typing.Dict": {
     "line number": [
      38
     ]
    },
    "typing.List": {
     "line number": [
      41
     ]
    },
    "typing.Mapping": {
     "line number": [
      38
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.full_repo_manager.FullRepoManager.cache": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "object": {
     "line number": [
      44
     ]
    },
    "property": {
     "line number": [
      43
     ]
    },
    "str": {
     "line number": [
      44
     ]
    },
    "typing.Dict": {
     "line number": [
      44
     ]
    },
    "typing.Mapping": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.full_repo_manager.FullRepoManager.get_cache_for_path": {
  "data": {
   "lineno": 71,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      82
     ]
    },
    "object": {
     "line number": [
      71
     ]
    },
    "str": {
     "line number": [
      71
     ]
    },
    "typing.Mapping": {
     "line number": [
      71
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.full_repo_manager.FullRepoManager.get_metadata_wrapper_for_path": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": {
    "libcst.metadata.wrapper.MetadataWrapper": {
     "line number": [
      109,
      95
     ]
    },
    "libcst.parse_module": {
     "line number": [
      107
     ]
    },
    "str": {
     "line number": [
      95
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.full_repo_manager.FullRepoManager.resolve_cache": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "handler": {
     "line number": [
      66
     ]
    },
    "object": {
     "line number": [
      62
     ]
    },
    "str": {
     "line number": [
      62
     ]
    },
    "typing.Dict": {
     "line number": [
      62
     ]
    },
    "typing.Mapping": {
     "line number": [
      62
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.full_repo_manager.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.metadata.full_repo_manager.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "libcst.metadata.full_repo_manager.MetadataWrapper": {
  "data": {
   "shadows": "libcst.metadata.wrapper.MetadataWrapper"
  },
  "type": "import"
 },
 "libcst.metadata.full_repo_manager.Path": {
  "data": {
   "shadows": "pathlib.Path"
  },
  "type": "import"
 },
 "libcst.metadata.full_repo_manager.ProviderT": {
  "data": {
   "shadows": "libcst.metadata.base_provider.ProviderT"
  },
  "type": "import"
 },
 "libcst.metadata.full_repo_manager.TYPE_CHECKING": {
  "data": {
   "shadows": "typing.TYPE_CHECKING"
  },
  "type": "import"
 },
 "libcst.metadata.full_repo_manager.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.metadata.parent_node_provider": {
  "data": {},
  "type": "module"
 },
 "libcst.metadata.parent_node_provider.BatchableMetadataProvider": {
  "data": {
   "shadows": "libcst.metadata.base_provider.BatchableMetadataProvider"
  },
  "type": "import"
 },
 "libcst.metadata.parent_node_provider.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.metadata.parent_node_provider.ParentNodeProvider": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      24
     ]
    },
    "libcst.metadata.base_provider.BatchableMetadataProvider": {
     "line number": [
      24
     ]
    },
    "typing.Optional": {
     "line number": [
      24
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.parent_node_provider.ParentNodeProvider.visit_Module": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      25
     ]
    },
    "libcst.Module": {
     "line number": [
      25
     ]
    },
    "libcst.metadata.parent_node_provider.ParentNodeVisitor": {
     "line number": [
      26
     ]
    },
    "typing.Optional": {
     "line number": [
      25
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.parent_node_provider.ParentNodeVisitor": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "libcst.CSTVisitor": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.parent_node_provider.ParentNodeVisitor.__init__": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "super": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.parent_node_provider.ParentNodeVisitor.on_leave": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      18
     ]
    },
    "super": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.parent_node_provider.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.metadata.position_provider": {
  "data": {
   "symbols_in_volume": {
    "libcst.metadata.position_provider.re": {
     "line number": [
      20
     ]
    },
    "str": {
     "line number": [
      20
     ]
    },
    "typing.Pattern": {
     "line number": [
      20
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst.metadata.position_provider.BaseMetadataProvider": {
  "data": {
   "shadows": "libcst.metadata.base_provider.BaseMetadataProvider"
  },
  "type": "import"
 },
 "libcst.metadata.position_provider.CSTNode": {
  "data": {
   "shadows": "libcst._nodes.base.CSTNode"
  },
  "type": "import"
 },
 "libcst.metadata.position_provider.CodePosition": {
  "data": {
   "shadows": "libcst._position.CodePosition"
  },
  "type": "import"
 },
 "libcst.metadata.position_provider.CodeRange": {
  "data": {
   "shadows": "libcst._position.CodeRange"
  },
  "type": "import"
 },
 "libcst.metadata.position_provider.CodegenState": {
  "data": {
   "shadows": "libcst._nodes.internal.CodegenState"
  },
  "type": "import"
 },
 "libcst.metadata.position_provider.Iterator": {
  "data": {
   "shadows": "typing.Iterator"
  },
  "type": "import"
 },
 "libcst.metadata.position_provider.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.metadata.position_provider.Module": {
  "data": {
   "shadows": "libcst._nodes.module.Module"
  },
  "type": "import"
 },
 "libcst.metadata.position_provider.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.metadata.position_provider.Pattern": {
  "data": {
   "shadows": "typing.Pattern"
  },
  "type": "import"
 },
 "libcst.metadata.position_provider.PositionProvider": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": {
    "libcst._position.CodeRange": {
     "line number": [
      120
     ]
    },
    "libcst.metadata.base_provider.BaseMetadataProvider": {
     "line number": [
      120
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.position_provider.PositionProvider._gen_impl": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": {
    "libcst._nodes.module.Module": {
     "line number": [
      132
     ]
    },
    "libcst.metadata.position_provider.PositionProvidingCodegenState": {
     "line number": [
      133
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.position_provider.PositionProvidingCodegenState": {
  "data": {
   "lineno": 92,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      93
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      92
     ]
    },
    "libcst.metadata.position_provider.WhitespaceInclusivePositionProvidingCodegenState": {
     "line number": [
      94
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.position_provider.PositionProvidingCodegenState.record_syntactic_position": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": {
    "contextlib.contextmanager": {
     "line number": [
      95
     ]
    },
    "libcst._nodes.base.CSTNode": {
     "line number": [
      98,
      100,
      101
     ]
    },
    "libcst._position.CodePosition": {
     "line number": [
      103,
      107
     ]
    },
    "libcst._position.CodeRange": {
     "line number": [
      117
     ]
    },
    "typing.Iterator": {
     "line number": [
      102
     ]
    },
    "typing.Optional": {
     "line number": [
      100,
      101
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.position_provider.WhitespaceInclusivePositionProvider": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": {
    "libcst._position.CodeRange": {
     "line number": [
      75
     ]
    },
    "libcst.metadata.base_provider.BaseMetadataProvider": {
     "line number": [
      75
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.position_provider.WhitespaceInclusivePositionProvider._gen_impl": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": {
    "libcst._nodes.module.Module": {
     "line number": [
      83
     ]
    },
    "libcst.metadata.position_provider.WhitespaceInclusivePositionProvidingCodegenState": {
     "line number": [
      84
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.position_provider.WhitespaceInclusivePositionProvidingCodegenState": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      24
     ]
    },
    "dataclasses.field": {
     "line number": [
      31,
      32,
      36
     ]
    },
    "int": {
     "line number": [
      34,
      35
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      23
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      25
     ]
    },
    "libcst._position.CodePosition": {
     "line number": [
      36
     ]
    },
    "libcst._position.CodeRange": {
     "line number": [
      29
     ]
    },
    "libcst.metadata.base_provider.BaseMetadataProvider": {
     "line number": [
      29
     ]
    },
    "list": {
     "line number": [
      31,
      32,
      36
     ]
    },
    "str": {
     "line number": [
      27,
      28,
      31,
      32
     ]
    },
    "typing.List": {
     "line number": [
      31,
      32,
      36
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.position_provider.WhitespaceInclusivePositionProvidingCodegenState._update_position": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "len": {
     "line number": [
      52,
      54,
      56,
      58
     ]
    },
    "str": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.position_provider.WhitespaceInclusivePositionProvidingCodegenState.add_indent_tokens": {
  "data": {
   "lineno": 38
  },
  "type": "function"
 },
 "libcst.metadata.position_provider.WhitespaceInclusivePositionProvidingCodegenState.add_token": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "str": {
     "line number": [
      43
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.position_provider.WhitespaceInclusivePositionProvidingCodegenState.after_codegen": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "libcst._position.CodePosition": {
     "line number": [
      70
     ]
    },
    "libcst._position.CodeRange": {
     "line number": [
      71
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.position_provider.WhitespaceInclusivePositionProvidingCodegenState.before_codegen": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "libcst._position.CodePosition": {
     "line number": [
      61
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.position_provider.add_slots": {
  "data": {
   "shadows": "libcst._add_slots.add_slots"
  },
  "type": "import"
 },
 "libcst.metadata.position_provider.contextmanager": {
  "data": {
   "shadows": "contextlib.contextmanager"
  },
  "type": "import"
 },
 "libcst.metadata.position_provider.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst.metadata.position_provider.field": {
  "data": {
   "shadows": "dataclasses.field"
  },
  "type": "import"
 },
 "libcst.metadata.position_provider.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "libcst.metadata.reentrant_codegen": {
  "data": {},
  "type": "module"
 },
 "libcst.metadata.reentrant_codegen.BaseMetadataProvider": {
  "data": {
   "shadows": "libcst.metadata.BaseMetadataProvider"
  },
  "type": "import"
 },
 "libcst.metadata.reentrant_codegen.BaseStatement": {
  "data": {
   "shadows": "libcst.BaseStatement"
  },
  "type": "import"
 },
 "libcst.metadata.reentrant_codegen.CSTNode": {
  "data": {
   "shadows": "libcst.CSTNode"
  },
  "type": "import"
 },
 "libcst.metadata.reentrant_codegen.CodegenPartial": {
  "data": {
   "lineno": 16
  },
  "type": "class"
 },
 "libcst.metadata.reentrant_codegen.CodegenPartial.__init__": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      37
     ]
    },
    "int": {
     "line number": [
      35,
      36
     ]
    },
    "str": {
     "line number": [
      38
     ]
    },
    "tuple": {
     "line number": [
      38
     ]
    },
    "typing.Sequence": {
     "line number": [
      38
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.reentrant_codegen.CodegenPartial.get_modified_module_bytes": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": {
    "bytes": {
     "line number": [
      91
     ]
    },
    "libcst.BaseStatement": {
     "line number": [
      91
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.reentrant_codegen.CodegenPartial.get_modified_module_code": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": {
    "libcst.BaseStatement": {
     "line number": [
      82
     ]
    },
    "str": {
     "line number": [
      82
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.reentrant_codegen.CodegenPartial.get_modified_statement_code": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": {
    "libcst.BaseStatement": {
     "line number": [
      66
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      72
     ]
    },
    "list": {
     "line number": [
      75
     ]
    },
    "str": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.reentrant_codegen.CodegenPartial.get_original_module_bytes": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": {
    "bytes": {
     "line number": [
      50
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.reentrant_codegen.CodegenPartial.get_original_module_code": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "str": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.reentrant_codegen.CodegenPartial.get_original_statement_code": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "str": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.reentrant_codegen.CodegenState": {
  "data": {
   "shadows": "libcst._nodes.internal.CodegenState"
  },
  "type": "import"
 },
 "libcst.metadata.reentrant_codegen.ExperimentalReentrantCodegenProvider": {
  "data": {
   "lineno": 170,
   "symbols_in_volume": {
    "libcst.metadata.BaseMetadataProvider": {
     "line number": [
      170
     ]
    },
    "libcst.metadata.reentrant_codegen.CodegenPartial": {
     "line number": [
      170
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.reentrant_codegen.ExperimentalReentrantCodegenProvider._gen_impl": {
  "data": {
   "lineno": 202,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      202
     ]
    },
    "libcst.metadata.reentrant_codegen._ReentrantCodegenState": {
     "line number": [
      203
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.reentrant_codegen.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.metadata.reentrant_codegen.Module": {
  "data": {
   "shadows": "libcst.Module"
  },
  "type": "import"
 },
 "libcst.metadata.reentrant_codegen.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.metadata.reentrant_codegen.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst.metadata.reentrant_codegen._ReentrantCodegenState": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      102
     ]
    },
    "dataclasses.field": {
     "line number": [
      108,
      110
     ]
    },
    "int": {
     "line number": [
      106,
      107,
      108
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      101
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      103
     ]
    },
    "libcst.metadata.BaseMetadataProvider": {
     "line number": [
      104
     ]
    },
    "libcst.metadata.reentrant_codegen.CodegenPartial": {
     "line number": [
      104,
      110
     ]
    },
    "list": {
     "line number": [
      108,
      110
     ]
    },
    "str": {
     "line number": [
      105,
      109
     ]
    },
    "typing.List": {
     "line number": [
      108,
      110
     ]
    },
    "typing.Optional": {
     "line number": [
      109
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.reentrant_codegen._ReentrantCodegenState.add_indent_tokens": {
  "data": {
   "lineno": 120,
   "symbols_in_volume": {
    "libcst.metadata.reentrant_codegen._ReentrantCodegenState": {
     "line number": [
      121
     ]
    },
    "super": {
     "line number": [
      121
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.reentrant_codegen._ReentrantCodegenState.add_token": {
  "data": {
   "lineno": 124,
   "symbols_in_volume": {
    "len": {
     "line number": [
      126
     ]
    },
    "libcst.metadata.reentrant_codegen._ReentrantCodegenState": {
     "line number": [
      125
     ]
    },
    "str": {
     "line number": [
      124
     ]
    },
    "super": {
     "line number": [
      125
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.reentrant_codegen._ReentrantCodegenState.after_codegen": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      136
     ]
    },
    "libcst.BaseStatement": {
     "line number": [
      136
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      135
     ]
    },
    "libcst.metadata.reentrant_codegen.CodegenPartial": {
     "line number": [
      139
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.reentrant_codegen._ReentrantCodegenState.before_codegen": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      130
     ]
    },
    "libcst.BaseStatement": {
     "line number": [
      130
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      129
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.reentrant_codegen._ReentrantCodegenState.decrease_indent": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": {
    "len": {
     "line number": [
      117
     ]
    },
    "libcst.metadata.reentrant_codegen._ReentrantCodegenState": {
     "line number": [
      118
     ]
    },
    "super": {
     "line number": [
      118
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.reentrant_codegen._ReentrantCodegenState.get_code": {
  "data": {
   "lineno": 157,
   "symbols_in_volume": {
    "str": {
     "line number": [
      157
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.reentrant_codegen._ReentrantCodegenState.increase_indent": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": {
    "len": {
     "line number": [
      114
     ]
    },
    "libcst.metadata.reentrant_codegen._ReentrantCodegenState": {
     "line number": [
      113
     ]
    },
    "str": {
     "line number": [
      112
     ]
    },
    "super": {
     "line number": [
      113
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.reentrant_codegen._ReentrantCodegenState.pop_trailing_newline": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": {
    "len": {
     "line number": [
      153
     ]
    },
    "libcst.metadata.reentrant_codegen._ReentrantCodegenState": {
     "line number": [
      155
     ]
    },
    "super": {
     "line number": [
      155
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.reentrant_codegen.add_slots": {
  "data": {
   "shadows": "libcst._add_slots.add_slots"
  },
  "type": "import"
 },
 "libcst.metadata.reentrant_codegen.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst.metadata.reentrant_codegen.field": {
  "data": {
   "shadows": "dataclasses.field"
  },
  "type": "import"
 },
 "libcst.metadata.scope_provider": {
  "data": {},
  "type": "module"
 },
 "libcst.metadata.scope_provider.Access": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      66
     ]
    },
    "dataclasses.dataclass": {
     "line number": [
      40
     ]
    },
    "libcst.Attribute": {
     "line number": [
      60
     ]
    },
    "libcst.Name": {
     "line number": [
      60
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      39
     ]
    },
    "typing.Set": {
     "line number": [
      68
     ]
    },
    "typing.Union": {
     "line number": [
      60
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.scope_provider.Access.__hash__": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": {
    "id": {
     "line number": [
      77
     ]
    },
    "int": {
     "line number": [
      76
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Access.__init__": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      70
     ]
    },
    "libcst.Name": {
     "line number": [
      70
     ]
    },
    "set": {
     "line number": [
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Access.record_assignment": {
  "data": {
   "lineno": 84
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Access.record_assignments": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": {
    "typing.Set": {
     "line number": [
      87
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Access.referents": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "property": {
     "line number": [
      79
     ]
    },
    "typing.Collection": {
     "line number": [
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Accesses": {
  "data": {
   "lineno": 168
  },
  "type": "class"
 },
 "libcst.metadata.scope_provider.Accesses.__contains__": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      185
     ]
    },
    "len": {
     "line number": [
      187
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      185
     ]
    },
    "str": {
     "line number": [
      185
     ]
    },
    "typing.Union": {
     "line number": [
      185
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Accesses.__getitem__": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      180
     ]
    },
    "libcst.metadata.scope_provider.Access": {
     "line number": [
      180
     ]
    },
    "set": {
     "line number": [
      183
     ]
    },
    "str": {
     "line number": [
      180
     ]
    },
    "typing.Collection": {
     "line number": [
      180
     ]
    },
    "typing.Union": {
     "line number": [
      180
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Accesses.__init__": {
  "data": {
   "lineno": 171,
   "symbols_in_volume": {
    "libcst.metadata.scope_provider.Access": {
     "line number": [
      171
     ]
    },
    "str": {
     "line number": [
      171
     ]
    },
    "typing.Collection": {
     "line number": [
      171
     ]
    },
    "typing.Mapping": {
     "line number": [
      171
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Accesses.__iter__": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": {
    "libcst.metadata.scope_provider.Access": {
     "line number": [
      174
     ]
    },
    "typing.Iterator": {
     "line number": [
      174
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Assignment": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      127
     ]
    },
    "libcst.metadata.scope_provider.BaseAssignment": {
     "line number": [
      122
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.scope_provider.Assignment.__init__": {
  "data": {
   "lineno": 129,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      129
     ]
    },
    "str": {
     "line number": [
      129
     ]
    },
    "super": {
     "line number": [
      131
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Assignments": {
  "data": {
   "lineno": 146
  },
  "type": "class"
 },
 "libcst.metadata.scope_provider.Assignments.__contains__": {
  "data": {
   "lineno": 163,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      163
     ]
    },
    "len": {
     "line number": [
      165
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      163
     ]
    },
    "str": {
     "line number": [
      163
     ]
    },
    "typing.Union": {
     "line number": [
      163
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Assignments.__getitem__": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      158
     ]
    },
    "libcst.metadata.scope_provider.BaseAssignment": {
     "line number": [
      158
     ]
    },
    "set": {
     "line number": [
      161,
      161
     ]
    },
    "str": {
     "line number": [
      158
     ]
    },
    "typing.Collection": {
     "line number": [
      158
     ]
    },
    "typing.Union": {
     "line number": [
      158
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Assignments.__init__": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": {
    "libcst.metadata.scope_provider.BaseAssignment": {
     "line number": [
      149
     ]
    },
    "str": {
     "line number": [
      149
     ]
    },
    "typing.Collection": {
     "line number": [
      149
     ]
    },
    "typing.Mapping": {
     "line number": [
      149
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Assignments.__iter__": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": {
    "libcst.metadata.scope_provider.BaseAssignment": {
     "line number": [
      152
     ]
    },
    "typing.Iterator": {
     "line number": [
      152
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.BaseAssignment": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": {
    "libcst.metadata.scope_provider.Access": {
     "line number": [
      99
     ]
    },
    "libcst.metadata.scope_provider.abc": {
     "line number": [
      91
     ]
    },
    "str": {
     "line number": [
      95
     ]
    },
    "typing.Set": {
     "line number": [
      99
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.scope_provider.BaseAssignment.__hash__": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": {
    "id": {
     "line number": [
      119
     ]
    },
    "int": {
     "line number": [
      118
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.BaseAssignment.__init__": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": {
    "set": {
     "line number": [
      104
     ]
    },
    "str": {
     "line number": [
      101
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.BaseAssignment.record_access": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": {
    "libcst.metadata.scope_provider.Access": {
     "line number": [
      106
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.BaseAssignment.record_accesses": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": {
    "libcst.metadata.scope_provider.Access": {
     "line number": [
      109
     ]
    },
    "typing.Set": {
     "line number": [
      109
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.BaseAssignment.references": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": {
    "libcst.metadata.scope_provider.Access": {
     "line number": [
      113
     ]
    },
    "property": {
     "line number": [
      112
     ]
    },
    "typing.Collection": {
     "line number": [
      113
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.BatchableMetadataProvider": {
  "data": {
   "shadows": "libcst.metadata.base_provider.BatchableMetadataProvider"
  },
  "type": "import"
 },
 "libcst.metadata.scope_provider.BuiltinAssignment": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": {
    "libcst.metadata.scope_provider.BaseAssignment": {
     "line number": [
      135
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.scope_provider.ClassScope": {
  "data": {
   "lineno": 554,
   "symbols_in_volume": {
    "libcst.metadata.scope_provider.LocalScope": {
     "line number": [
      554
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.scope_provider.ClassScope._contains_in_self_or_parent": {
  "data": {
   "lineno": 583,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      583
     ]
    },
    "str": {
     "line number": [
      583
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ClassScope._getitem_from_self_or_parent": {
  "data": {
   "lineno": 576,
   "symbols_in_volume": {
    "libcst.metadata.scope_provider.BaseAssignment": {
     "line number": [
      576
     ]
    },
    "str": {
     "line number": [
      576
     ]
    },
    "typing.Set": {
     "line number": [
      576
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ClassScope._record_assignment_as_parent": {
  "data": {
   "lineno": 559,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      559
     ]
    },
    "str": {
     "line number": [
      559
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Collection": {
  "data": {
   "shadows": "typing.Collection"
  },
  "type": "import"
 },
 "libcst.metadata.scope_provider.ComprehensionScope": {
  "data": {
   "lineno": 591,
   "symbols_in_volume": {
    "libcst.metadata.scope_provider.LocalScope": {
     "line number": [
      591
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.scope_provider.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "libcst.metadata.scope_provider.Enum": {
  "data": {
   "shadows": "enum.Enum"
  },
  "type": "import"
 },
 "libcst.metadata.scope_provider.ExpressionContext": {
  "data": {
   "shadows": "libcst.metadata.expression_context_provider.ExpressionContext"
  },
  "type": "import"
 },
 "libcst.metadata.scope_provider.ExpressionContextProvider": {
  "data": {
   "shadows": "libcst.metadata.expression_context_provider.ExpressionContextProvider"
  },
  "type": "import"
 },
 "libcst.metadata.scope_provider.FunctionScope": {
  "data": {
   "lineno": 545,
   "symbols_in_volume": {
    "libcst.metadata.scope_provider.LocalScope": {
     "line number": [
      545
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.scope_provider.GlobalScope": {
  "data": {
   "lineno": 470,
   "symbols_in_volume": {
    "libcst.metadata.scope_provider.Scope": {
     "line number": [
      470
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.scope_provider.GlobalScope.__contains__": {
  "data": {
   "lineno": 479,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      479
     ]
    },
    "hasattr": {
     "line number": [
      480
     ]
    },
    "len": {
     "line number": [
      481
     ]
    },
    "libcst.metadata.scope_provider.builtins": {
     "line number": [
      480
     ]
    },
    "str": {
     "line number": [
      479
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.GlobalScope.__getitem__": {
  "data": {
   "lineno": 484,
   "symbols_in_volume": {
    "any": {
     "line number": [
      486
     ]
    },
    "hasattr": {
     "line number": [
      485
     ]
    },
    "isinstance": {
     "line number": [
      487
     ]
    },
    "libcst.metadata.scope_provider.BaseAssignment": {
     "line number": [
      484
     ]
    },
    "libcst.metadata.scope_provider.BuiltinAssignment": {
     "line number": [
      487,
      489
     ]
    },
    "libcst.metadata.scope_provider.builtins": {
     "line number": [
      485
     ]
    },
    "str": {
     "line number": [
      484
     ]
    },
    "typing.Set": {
     "line number": [
      484
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.GlobalScope.__init__": {
  "data": {
   "lineno": 475,
   "symbols_in_volume": {
    "libcst.metadata.scope_provider.Scope": {
     "line number": [
      476
     ]
    },
    "super": {
     "line number": [
      477
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.GlobalScope.record_global_overwrite": {
  "data": {
   "lineno": 492,
   "symbols_in_volume": {
    "str": {
     "line number": [
      492
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.GlobalScope.record_nonlocal_overwrite": {
  "data": {
   "lineno": 495,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      496
     ]
    },
    "str": {
     "line number": [
      495
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Iterator": {
  "data": {
   "shadows": "typing.Iterator"
  },
  "type": "import"
 },
 "libcst.metadata.scope_provider.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.metadata.scope_provider.LocalScope": {
  "data": {
   "lineno": 499,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      506
     ]
    },
    "libcst.metadata.scope_provider.Scope": {
     "line number": [
      499,
      500
     ]
    },
    "libcst.metadata.scope_provider.abc": {
     "line number": [
      499
     ]
    },
    "str": {
     "line number": [
      500,
      503
     ]
    },
    "typing.Dict": {
     "line number": [
      500
     ]
    },
    "typing.Optional": {
     "line number": [
      503
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.scope_provider.LocalScope.__contains__": {
  "data": {
   "lineno": 528,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      528
     ]
    },
    "len": {
     "line number": [
      532
     ]
    },
    "str": {
     "line number": [
      528
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.LocalScope.__getitem__": {
  "data": {
   "lineno": 535,
   "symbols_in_volume": {
    "libcst.metadata.scope_provider.BaseAssignment": {
     "line number": [
      535
     ]
    },
    "str": {
     "line number": [
      535
     ]
    },
    "typing.Set": {
     "line number": [
      535
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.LocalScope.__init__": {
  "data": {
   "lineno": 508,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      509
     ]
    },
    "libcst.metadata.scope_provider.Scope": {
     "line number": [
      509
     ]
    },
    "str": {
     "line number": [
      509
     ]
    },
    "super": {
     "line number": [
      511
     ]
    },
    "typing.Optional": {
     "line number": [
      509
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.LocalScope.record_assignment": {
  "data": {
   "lineno": 522,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      522
     ]
    },
    "str": {
     "line number": [
      522
     ]
    },
    "super": {
     "line number": [
      526
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.LocalScope.record_global_overwrite": {
  "data": {
   "lineno": 516,
   "symbols_in_volume": {
    "str": {
     "line number": [
      516
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.LocalScope.record_nonlocal_overwrite": {
  "data": {
   "lineno": 519,
   "symbols_in_volume": {
    "str": {
     "line number": [
      519
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "libcst.metadata.scope_provider.MetadataDependent": {
  "data": {
   "shadows": "libcst._metadata_dependent.MetadataDependent"
  },
  "type": "import"
 },
 "libcst.metadata.scope_provider.MutableMapping": {
  "data": {
   "shadows": "typing.MutableMapping"
  },
  "type": "import"
 },
 "libcst.metadata.scope_provider.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.metadata.scope_provider.QualifiedName": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      197
     ]
    },
    "libcst._add_slots.add_slots": {
     "line number": [
      196
     ]
    },
    "libcst.metadata.scope_provider.QualifiedNameSource": {
     "line number": [
      204
     ]
    },
    "str": {
     "line number": [
      200
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.scope_provider.QualifiedNameProvider": {
  "data": {
   "lineno": 955,
   "symbols_in_volume": {
    "libcst.metadata.base_provider.BatchableMetadataProvider": {
     "line number": [
      955
     ]
    },
    "libcst.metadata.scope_provider.QualifiedName": {
     "line number": [
      955
     ]
    },
    "libcst.metadata.scope_provider.ScopeProvider": {
     "line number": [
      990
     ]
    },
    "typing.Collection": {
     "line number": [
      955
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.scope_provider.QualifiedNameProvider.has_name": {
  "data": {
   "lineno": 996,
   "symbols_in_volume": {
    "any": {
     "line number": [
      1003,
      1005
     ]
    },
    "bool": {
     "line number": [
      999
     ]
    },
    "isinstance": {
     "line number": [
      1002
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      998
     ]
    },
    "libcst._metadata_dependent.MetadataDependent": {
     "line number": [
      998
     ]
    },
    "libcst.metadata.scope_provider.QualifiedName": {
     "line number": [
      998
     ]
    },
    "libcst.metadata.scope_provider.QualifiedNameProvider": {
     "line number": [
      1001
     ]
    },
    "set": {
     "line number": [
      1001
     ]
    },
    "staticmethod": {
     "line number": [
      996
     ]
    },
    "str": {
     "line number": [
      998,
      1002
     ]
    },
    "typing.Union": {
     "line number": [
      998
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.QualifiedNameProvider.visit_Module": {
  "data": {
   "lineno": 992,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      992
     ]
    },
    "libcst.Module": {
     "line number": [
      992
     ]
    },
    "libcst.metadata.scope_provider.QualifiedNameVisitor": {
     "line number": [
      993
     ]
    },
    "typing.Optional": {
     "line number": [
      992
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.QualifiedNameSource": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": {
    "enum.Enum": {
     "line number": [
      190
     ]
    },
    "enum.auto": {
     "line number": [
      191,
      192,
      193
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.scope_provider.QualifiedNameVisitor": {
  "data": {
   "lineno": 941,
   "symbols_in_volume": {
    "libcst.CSTVisitor": {
     "line number": [
      941
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.scope_provider.QualifiedNameVisitor.__init__": {
  "data": {
   "lineno": 942
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.QualifiedNameVisitor.on_visit": {
  "data": {
   "lineno": 945,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      945
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      945
     ]
    },
    "libcst.metadata.scope_provider.ScopeProvider": {
     "line number": [
      946
     ]
    },
    "set": {
     "line number": [
      950
     ]
    },
    "super": {
     "line number": [
      951
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Scope": {
  "data": {
   "lineno": 290,
   "symbols_in_volume": {
    "globals": {
     "line number": [
      313
     ]
    },
    "libcst.metadata.scope_provider.Access": {
     "line number": [
      315
     ]
    },
    "libcst.metadata.scope_provider.BaseAssignment": {
     "line number": [
      314
     ]
    },
    "libcst.metadata.scope_provider.abc": {
     "line number": [
      290
     ]
    },
    "str": {
     "line number": [
      314,
      315
     ]
    },
    "typing.MutableMapping": {
     "line number": [
      314,
      315
     ]
    },
    "typing.Set": {
     "line number": [
      314,
      315
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.scope_provider.Scope.__contains__": {
  "data": {
   "lineno": 342,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      343
     ]
    },
    "libcst.metadata.scope_provider.abc": {
     "line number": [
      342
     ]
    },
    "str": {
     "line number": [
      343
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Scope.__getitem__": {
  "data": {
   "lineno": 347,
   "symbols_in_volume": {
    "libcst.metadata.scope_provider.BaseAssignment": {
     "line number": [
      348
     ]
    },
    "libcst.metadata.scope_provider.abc": {
     "line number": [
      347
     ]
    },
    "str": {
     "line number": [
      348
     ]
    },
    "typing.Set": {
     "line number": [
      348
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Scope.__hash__": {
  "data": {
   "lineno": 387,
   "symbols_in_volume": {
    "id": {
     "line number": [
      388
     ]
    },
    "int": {
     "line number": [
      387
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Scope.__init__": {
  "data": {
   "lineno": 317,
   "symbols_in_volume": {
    "collections.defaultdict": {
     "line number": [
      321,
      322
     ]
    },
    "set": {
     "line number": [
      321,
      322
     ]
    },
    "super": {
     "line number": [
      318
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Scope._contains_in_self_or_parent": {
  "data": {
   "lineno": 334,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      334
     ]
    },
    "str": {
     "line number": [
      334
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Scope._getitem_from_self_or_parent": {
  "data": {
   "lineno": 330,
   "symbols_in_volume": {
    "libcst.metadata.scope_provider.BaseAssignment": {
     "line number": [
      330
     ]
    },
    "str": {
     "line number": [
      330
     ]
    },
    "typing.Set": {
     "line number": [
      330
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Scope._record_assignment_as_parent": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      338
     ]
    },
    "str": {
     "line number": [
      338
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Scope.accesses": {
  "data": {
   "lineno": 464,
   "symbols_in_volume": {
    "libcst.metadata.scope_provider.Accesses": {
     "line number": [
      467,
      465
     ]
    },
    "property": {
     "line number": [
      464
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Scope.assignments": {
  "data": {
   "lineno": 459,
   "symbols_in_volume": {
    "libcst.metadata.scope_provider.Assignments": {
     "line number": [
      462,
      460
     ]
    },
    "property": {
     "line number": [
      459
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Scope.get_qualified_names_for": {
  "data": {
   "lineno": 398,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      441,
      443,
      451
     ]
    },
    "len": {
     "line number": [
      435
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      399
     ]
    },
    "libcst.Import": {
     "line number": [
      443
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      443
     ]
    },
    "libcst.helpers.get_full_name_for_node": {
     "line number": [
      430
     ]
    },
    "libcst.metadata.scope_provider.Assignment": {
     "line number": [
      441
     ]
    },
    "libcst.metadata.scope_provider.BuiltinAssignment": {
     "line number": [
      451
     ]
    },
    "libcst.metadata.scope_provider.QualifiedName": {
     "line number": [
      453,
      400
     ]
    },
    "libcst.metadata.scope_provider.QualifiedNameSource": {
     "line number": [
      454
     ]
    },
    "libcst.metadata.scope_provider._NameUtil": {
     "line number": [
      444,
      448
     ]
    },
    "range": {
     "line number": [
      435
     ]
    },
    "set": {
     "line number": [
      429,
      433
     ]
    },
    "str": {
     "line number": [
      399
     ]
    },
    "typing.Collection": {
     "line number": [
      400
     ]
    },
    "typing.Union": {
     "line number": [
      399
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Scope.record_access": {
  "data": {
   "lineno": 327,
   "symbols_in_volume": {
    "libcst.metadata.scope_provider.Access": {
     "line number": [
      327
     ]
    },
    "str": {
     "line number": [
      327
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Scope.record_assignment": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      324
     ]
    },
    "libcst.metadata.scope_provider.Assignment": {
     "line number": [
      325
     ]
    },
    "str": {
     "line number": [
      324
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Scope.record_global_overwrite": {
  "data": {
   "lineno": 390,
   "symbols_in_volume": {
    "libcst.metadata.scope_provider.abc": {
     "line number": [
      390
     ]
    },
    "str": {
     "line number": [
      391
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Scope.record_nonlocal_overwrite": {
  "data": {
   "lineno": 394,
   "symbols_in_volume": {
    "libcst.metadata.scope_provider.abc": {
     "line number": [
      394
     ]
    },
    "str": {
     "line number": [
      395
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeProvider": {
  "data": {
   "lineno": 921,
   "symbols_in_volume": {
    "libcst.metadata.base_provider.BatchableMetadataProvider": {
     "line number": [
      921
     ]
    },
    "libcst.metadata.expression_context_provider.ExpressionContextProvider": {
     "line number": [
      933
     ]
    },
    "libcst.metadata.scope_provider.Scope": {
     "line number": [
      921
     ]
    },
    "typing.Optional": {
     "line number": [
      921
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.scope_provider.ScopeProvider.visit_Module": {
  "data": {
   "lineno": 935,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      935
     ]
    },
    "libcst.Module": {
     "line number": [
      935
     ]
    },
    "libcst.metadata.scope_provider.ScopeVisitor": {
     "line number": [
      936
     ]
    },
    "typing.Optional": {
     "line number": [
      935
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor": {
  "data": {
   "lineno": 639,
   "symbols_in_volume": {
    "libcst.CSTVisitor": {
     "line number": [
      639
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.scope_provider.ScopeVisitor.__init__": {
  "data": {
   "lineno": 641,
   "symbols_in_volume": {
    "libcst.Annotation": {
     "line number": [
      646
     ]
    },
    "libcst.Attribute": {
     "line number": [
      644,
      645
     ]
    },
    "libcst.Call": {
     "line number": [
      646
     ]
    },
    "libcst.metadata.scope_provider.Access": {
     "line number": [
      644
     ]
    },
    "libcst.metadata.scope_provider.GlobalScope": {
     "line number": [
      643
     ]
    },
    "libcst.metadata.scope_provider.Scope": {
     "line number": [
      643
     ]
    },
    "set": {
     "line number": [
      646
     ]
    },
    "typing.List": {
     "line number": [
      644,
      645
     ]
    },
    "typing.Optional": {
     "line number": [
      644,
      645
     ]
    },
    "typing.Set": {
     "line number": [
      646
     ]
    },
    "typing.Tuple": {
     "line number": [
      644
     ]
    },
    "typing.Union": {
     "line number": [
      646
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor._handle_string_annotation": {
  "data": {
   "lineno": 731,
   "symbols_in_volume": {
    "libcst.ConcatenatedString": {
     "line number": [
      732
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      732
     ]
    },
    "libcst.parse_module": {
     "line number": [
      737
     ]
    },
    "typing.Union": {
     "line number": [
      732
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor._new_scope": {
  "data": {
   "lineno": 648,
   "symbols_in_volume": {
    "contextlib.contextmanager": {
     "line number": [
      648
     ]
    },
    "kind": {
     "line number": [
      653
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      650
     ]
    },
    "libcst.metadata.scope_provider.LocalScope": {
     "line number": [
      650
     ]
    },
    "str": {
     "line number": [
      650
     ]
    },
    "typing.Iterator": {
     "line number": [
      651
     ]
    },
    "typing.Optional": {
     "line number": [
      650
     ]
    },
    "typing.Type": {
     "line number": [
      650
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor._switch_scope": {
  "data": {
   "lineno": 659,
   "symbols_in_volume": {
    "contextlib.contextmanager": {
     "line number": [
      659
     ]
    },
    "libcst.metadata.scope_provider.Scope": {
     "line number": [
      660
     ]
    },
    "typing.Iterator": {
     "line number": [
      660
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor._visit_comp_alike": {
  "data": {
   "lineno": 836,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      838
     ]
    },
    "isinstance": {
     "line number": [
      883
     ]
    },
    "libcst.DictComp": {
     "line number": [
      837,
      883
     ]
    },
    "libcst.GeneratorExp": {
     "line number": [
      837
     ]
    },
    "libcst.ListComp": {
     "line number": [
      837
     ]
    },
    "libcst.SetComp": {
     "line number": [
      837
     ]
    },
    "libcst.metadata.scope_provider.ComprehensionScope": {
     "line number": [
      876
     ]
    },
    "typing.Union": {
     "line number": [
      837
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor._visit_import_alike": {
  "data": {
   "lineno": 668,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      668
     ]
    },
    "isinstance": {
     "line number": [
      670
     ]
    },
    "libcst.Import": {
     "line number": [
      668
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      668
     ]
    },
    "libcst.ImportStar": {
     "line number": [
      670
     ]
    },
    "libcst.Name": {
     "line number": [
      678
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      678
     ]
    },
    "libcst.metadata.scope_provider._gen_dotted_names": {
     "line number": [
      678,
      680
     ]
    },
    "typing.Union": {
     "line number": [
      668
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor.infer_accesses": {
  "data": {
   "lineno": 890,
   "symbols_in_volume": {
    "collections.defaultdict": {
     "line number": [
      894
     ]
    },
    "libcst.Name": {
     "line number": [
      896
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      896
     ]
    },
    "libcst.metadata.scope_provider._gen_dotted_names": {
     "line number": [
      900
     ]
    },
    "set": {
     "line number": [
      894
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor.leave_Annotation": {
  "data": {
   "lineno": 720,
   "symbols_in_volume": {
    "libcst.Annotation": {
     "line number": [
      720
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor.leave_Call": {
  "data": {
   "lineno": 713,
   "symbols_in_volume": {
    "libcst.Call": {
     "line number": [
      713
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor.on_leave": {
  "data": {
   "lineno": 916,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      916
     ]
    },
    "super": {
     "line number": [
      918
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor.visit_Annotation": {
  "data": {
   "lineno": 717,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      717
     ]
    },
    "libcst.Annotation": {
     "line number": [
      717
     ]
    },
    "typing.Optional": {
     "line number": [
      717
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor.visit_Arg": {
  "data": {
   "lineno": 792,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      792
     ]
    },
    "libcst.Arg": {
     "line number": [
      792
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor.visit_Attribute": {
  "data": {
   "lineno": 692,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      692
     ]
    },
    "libcst.Attribute": {
     "line number": [
      692
     ]
    },
    "typing.Optional": {
     "line number": [
      692
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor.visit_Call": {
  "data": {
   "lineno": 700,
   "symbols_in_volume": {
    "any": {
     "line number": [
      702
     ]
    },
    "bool": {
     "line number": [
      700
     ]
    },
    "libcst.Call": {
     "line number": [
      700
     ]
    },
    "typing.Optional": {
     "line number": [
      700
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor.visit_ClassDef": {
  "data": {
   "lineno": 799,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      799
     ]
    },
    "libcst.ClassDef": {
     "line number": [
      799
     ]
    },
    "libcst.helpers.get_full_name_for_node": {
     "line number": [
      809
     ]
    },
    "libcst.metadata.scope_provider.ClassScope": {
     "line number": [
      809
     ]
    },
    "typing.Optional": {
     "line number": [
      799
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor.visit_ConcatenatedString": {
  "data": {
   "lineno": 727,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      727
     ]
    },
    "libcst.ConcatenatedString": {
     "line number": [
      727
     ]
    },
    "typing.Optional": {
     "line number": [
      727
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor.visit_DictComp": {
  "data": {
   "lineno": 830,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      830
     ]
    },
    "libcst.DictComp": {
     "line number": [
      830
     ]
    },
    "typing.Optional": {
     "line number": [
      830
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor.visit_FunctionDef": {
  "data": {
   "lineno": 760,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      760
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      760
     ]
    },
    "libcst.helpers.get_full_name_for_node": {
     "line number": [
      764
     ]
    },
    "libcst.metadata.scope_provider.FunctionScope": {
     "line number": [
      764
     ]
    },
    "typing.Optional": {
     "line number": [
      760
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor.visit_GeneratorExp": {
  "data": {
   "lineno": 833,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      833
     ]
    },
    "libcst.GeneratorExp": {
     "line number": [
      833
     ]
    },
    "typing.Optional": {
     "line number": [
      833
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor.visit_Global": {
  "data": {
   "lineno": 814,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      814
     ]
    },
    "libcst.Global": {
     "line number": [
      814
     ]
    },
    "typing.Optional": {
     "line number": [
      814
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor.visit_Import": {
  "data": {
   "lineno": 686,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      686
     ]
    },
    "libcst.Import": {
     "line number": [
      686
     ]
    },
    "typing.Optional": {
     "line number": [
      686
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor.visit_ImportFrom": {
  "data": {
   "lineno": 689,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      689
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      689
     ]
    },
    "typing.Optional": {
     "line number": [
      689
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor.visit_Lambda": {
  "data": {
   "lineno": 776,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      776
     ]
    },
    "libcst.Lambda": {
     "line number": [
      776
     ]
    },
    "libcst.metadata.scope_provider.FunctionScope": {
     "line number": [
      777
     ]
    },
    "typing.Optional": {
     "line number": [
      776
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor.visit_ListComp": {
  "data": {
   "lineno": 824,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      824
     ]
    },
    "libcst.ListComp": {
     "line number": [
      824
     ]
    },
    "typing.Optional": {
     "line number": [
      824
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor.visit_Name": {
  "data": {
   "lineno": 749,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      755,
      749
     ]
    },
    "libcst.Name": {
     "line number": [
      749
     ]
    },
    "libcst.metadata.expression_context_provider.ExpressionContext.DEL": {
     "line number": [
      754
     ]
    },
    "libcst.metadata.expression_context_provider.ExpressionContext.LOAD": {
     "line number": [
      754
     ]
    },
    "libcst.metadata.expression_context_provider.ExpressionContext.STORE": {
     "line number": [
      752
     ]
    },
    "libcst.metadata.expression_context_provider.ExpressionContextProvider": {
     "line number": [
      751
     ]
    },
    "libcst.metadata.scope_provider.Access": {
     "line number": [
      755
     ]
    },
    "typing.Optional": {
     "line number": [
      749
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor.visit_Nonlocal": {
  "data": {
   "lineno": 819,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      819
     ]
    },
    "libcst.Nonlocal": {
     "line number": [
      819
     ]
    },
    "typing.Optional": {
     "line number": [
      819
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor.visit_Param": {
  "data": {
   "lineno": 782,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      782
     ]
    },
    "libcst.Param": {
     "line number": [
      782
     ]
    },
    "typing.Optional": {
     "line number": [
      782
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor.visit_SetComp": {
  "data": {
   "lineno": 827,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      827
     ]
    },
    "libcst.SetComp": {
     "line number": [
      827
     ]
    },
    "typing.Optional": {
     "line number": [
      827
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor.visit_SimpleString": {
  "data": {
   "lineno": 723,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      723
     ]
    },
    "libcst.SimpleString": {
     "line number": [
      723
     ]
    },
    "typing.Optional": {
     "line number": [
      723
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.ScopeVisitor.visit_Subscript": {
  "data": {
   "lineno": 740,
   "symbols_in_volume": {
    "any": {
     "line number": [
      741
     ]
    },
    "bool": {
     "line number": [
      740
     ]
    },
    "libcst.Subscript": {
     "line number": [
      740
     ]
    },
    "typing.Optional": {
     "line number": [
      740
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "libcst.metadata.scope_provider.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst.metadata.scope_provider.Type": {
  "data": {
   "shadows": "typing.Type"
  },
  "type": "import"
 },
 "libcst.metadata.scope_provider.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.metadata.scope_provider._NameUtil": {
  "data": {
   "lineno": 207
  },
  "type": "class"
 },
 "libcst.metadata.scope_provider._NameUtil.find_qualified_name_for_import_alike": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      229,
      235
     ]
    },
    "len": {
     "line number": [
      243
     ]
    },
    "libcst.Import": {
     "line number": [
      225
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      225,
      229
     ]
    },
    "libcst.ImportStar": {
     "line number": [
      235
     ]
    },
    "libcst.helpers.get_full_name_for_node": {
     "line number": [
      233,
      237
     ]
    },
    "libcst.metadata.scope_provider.QualifiedName": {
     "line number": [
      255,
      226
     ]
    },
    "libcst.metadata.scope_provider.QualifiedNameSource": {
     "line number": [
      259
     ]
    },
    "range": {
     "line number": [
      243
     ]
    },
    "set": {
     "line number": [
      228
     ]
    },
    "staticmethod": {
     "line number": [
      223
     ]
    },
    "str": {
     "line number": [
      225
     ]
    },
    "typing.Set": {
     "line number": [
      226
     ]
    },
    "typing.Union": {
     "line number": [
      225
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider._NameUtil.find_qualified_name_for_non_import": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      281
     ]
    },
    "isinstance": {
     "line number": [
      272,
      274,
      276,
      278
     ]
    },
    "libcst.metadata.scope_provider.Assignment": {
     "line number": [
      267
     ]
    },
    "libcst.metadata.scope_provider.QualifiedName": {
     "line number": [
      287,
      268
     ]
    },
    "libcst.metadata.scope_provider.QualifiedNameSource": {
     "line number": [
      287
     ]
    },
    "reversed": {
     "line number": [
      284
     ]
    },
    "staticmethod": {
     "line number": [
      265
     ]
    },
    "str": {
     "line number": [
      267
     ]
    },
    "typing.Set": {
     "line number": [
      268
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider._NameUtil.get_name_for": {
  "data": {
   "lineno": 208,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      211,
      213,
      215,
      217,
      219
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      209
     ]
    },
    "libcst.Call": {
     "line number": [
      215
     ]
    },
    "libcst.ClassDef": {
     "line number": [
      219
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      219
     ]
    },
    "libcst.Name": {
     "line number": [
      211
     ]
    },
    "libcst.Subscript": {
     "line number": [
      217
     ]
    },
    "libcst.metadata.scope_provider._NameUtil": {
     "line number": [
      216,
      218,
      220
     ]
    },
    "staticmethod": {
     "line number": [
      208
     ]
    },
    "str": {
     "line number": [
      209,
      213,
      209
     ]
    },
    "typing.Optional": {
     "line number": [
      209
     ]
    },
    "typing.Union": {
     "line number": [
      209
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider._gen_dotted_names": {
  "data": {
   "lineno": 609,
   "symbols_in_volume": {
    "StopIteration": {
     "line number": [
      622,
      631
     ]
    },
    "isinstance": {
     "line number": [
      612,
      616,
      618,
      627
     ]
    },
    "libcst.Attribute": {
     "line number": [
      610,
      618,
      627,
      611
     ]
    },
    "libcst.Call": {
     "line number": [
      616
     ]
    },
    "libcst.Name": {
     "line number": [
      610,
      612,
      618,
      627,
      611
     ]
    },
    "next": {
     "line number": [
      621,
      630
     ]
    },
    "str": {
     "line number": [
      611
     ]
    },
    "typing.Iterator": {
     "line number": [
      611
     ]
    },
    "typing.Tuple": {
     "line number": [
      611
     ]
    },
    "typing.Union": {
     "line number": [
      610,
      611
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.scope_provider.abc": {
  "data": {
   "shadows": "abc"
  },
  "type": "import"
 },
 "libcst.metadata.scope_provider.add_slots": {
  "data": {
   "shadows": "libcst._add_slots.add_slots"
  },
  "type": "import"
 },
 "libcst.metadata.scope_provider.auto": {
  "data": {
   "shadows": "enum.auto"
  },
  "type": "import"
 },
 "libcst.metadata.scope_provider.builtins": {
  "data": {
   "shadows": "builtins"
  },
  "type": "import"
 },
 "libcst.metadata.scope_provider.contextmanager": {
  "data": {
   "shadows": "contextlib.contextmanager"
  },
  "type": "import"
 },
 "libcst.metadata.scope_provider.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.metadata.scope_provider.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst.metadata.scope_provider.defaultdict": {
  "data": {
   "shadows": "collections.defaultdict"
  },
  "type": "import"
 },
 "libcst.metadata.scope_provider.ensure_type": {
  "data": {
   "shadows": "libcst.ensure_type"
  },
  "type": "import"
 },
 "libcst.metadata.scope_provider.get_full_name_for_node": {
  "data": {
   "shadows": "libcst.helpers.get_full_name_for_node"
  },
  "type": "import"
 },
 "libcst.metadata.span_provider": {
  "data": {},
  "type": "module"
 },
 "libcst.metadata.span_provider.BaseMetadataProvider": {
  "data": {
   "shadows": "libcst.metadata.base_provider.BaseMetadataProvider"
  },
  "type": "import"
 },
 "libcst.metadata.span_provider.ByteSpanPositionProvider": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": {
    "libcst.metadata.base_provider.BaseMetadataProvider": {
     "line number": [
      91
     ]
    },
    "libcst.metadata.span_provider.CodeSpan": {
     "line number": [
      91
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.span_provider.ByteSpanPositionProvider._gen_impl": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      104
     ]
    },
    "libcst.metadata.span_provider.SpanProvidingCodegenState": {
     "line number": [
      105
     ]
    },
    "libcst.metadata.span_provider.byte_length_in_utf8": {
     "line number": [
      109
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.span_provider.CSTNode": {
  "data": {
   "shadows": "libcst.CSTNode"
  },
  "type": "import"
 },
 "libcst.metadata.span_provider.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst.metadata.span_provider.CodeSpan": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      16
     ]
    },
    "int": {
     "line number": [
      26,
      28
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.span_provider.CodegenState": {
  "data": {
   "shadows": "libcst._nodes.internal.CodegenState"
  },
  "type": "import"
 },
 "libcst.metadata.span_provider.Iterator": {
  "data": {
   "shadows": "typing.Iterator"
  },
  "type": "import"
 },
 "libcst.metadata.span_provider.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.metadata.span_provider.Module": {
  "data": {
   "shadows": "libcst.Module"
  },
  "type": "import"
 },
 "libcst.metadata.span_provider.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.metadata.span_provider.SpanProvidingCodegenState": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "dataclasses.dataclass": {
     "line number": [
      31
     ]
    },
    "dataclasses.field": {
     "line number": [
      36
     ]
    },
    "int": {
     "line number": [
      34,
      35,
      36
     ]
    },
    "libcst._nodes.internal.CodegenState": {
     "line number": [
      32
     ]
    },
    "libcst.metadata.base_provider.BaseMetadataProvider": {
     "line number": [
      33
     ]
    },
    "libcst.metadata.span_provider.CodeSpan": {
     "line number": [
      33
     ]
    },
    "list": {
     "line number": [
      36
     ]
    },
    "str": {
     "line number": [
      34
     ]
    },
    "typing.Callable": {
     "line number": [
      34
     ]
    },
    "typing.List": {
     "line number": [
      36
     ]
    },
    "typing.Optional": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.span_provider.SpanProvidingCodegenState._update_position": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "get_length": {
     "line number": [
      49
     ]
    },
    "len": {
     "line number": [
      48
     ]
    },
    "str": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.span_provider.SpanProvidingCodegenState.add_indent_tokens": {
  "data": {
   "lineno": 38,
   "symbols_in_volume": {
    "super": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.span_provider.SpanProvidingCodegenState.add_token": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "str": {
     "line number": [
      43
     ]
    },
    "super": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.span_provider.SpanProvidingCodegenState.after_codegen": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      54
     ]
    },
    "libcst.metadata.span_provider.CodeSpan": {
     "line number": [
      59
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.span_provider.SpanProvidingCodegenState.before_codegen": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.span_provider.SpanProvidingCodegenState.record_syntactic_position": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "contextlib.contextmanager": {
     "line number": [
      61
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      64,
      66,
      67
     ]
    },
    "libcst.metadata.span_provider.CodeSpan": {
     "line number": [
      84
     ]
    },
    "typing.Iterator": {
     "line number": [
      68
     ]
    },
    "typing.Optional": {
     "line number": [
      66,
      67
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.span_provider.byte_length_in_utf8": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": {
    "int": {
     "line number": [
      87
     ]
    },
    "len": {
     "line number": [
      88
     ]
    },
    "str": {
     "line number": [
      87
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.span_provider.contextmanager": {
  "data": {
   "shadows": "contextlib.contextmanager"
  },
  "type": "import"
 },
 "libcst.metadata.span_provider.dataclass": {
  "data": {
   "shadows": "dataclasses.dataclass"
  },
  "type": "import"
 },
 "libcst.metadata.span_provider.field": {
  "data": {
   "shadows": "dataclasses.field"
  },
  "type": "import"
 },
 "libcst.metadata.tests": {
  "data": {},
  "type": "module"
 },
 "libcst.metadata.tests.test_base_provider": {
  "data": {},
  "type": "module"
 },
 "libcst.metadata.tests.test_base_provider.BaseMetadataProviderTest": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_base_provider.BaseMetadataProviderTest.test_batchable_provider": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "SimpleProvider": {
     "line number": [
      66,
      70,
      71,
      72,
      75,
      76,
      77
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      62,
      63,
      64
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      60
     ]
    },
    "libcst.metadata.wrapper._gen_batchable": {
     "line number": [
      67
     ]
    },
    "libcst.parse_module": {
     "line number": [
      60
     ]
    },
    "typing.cast": {
     "line number": [
      62,
      63,
      64
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_base_provider.BaseMetadataProviderTest.test_batchable_provider.SimpleProvider": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": {
    "int": {
     "line number": [
      49
     ]
    },
    "libcst.metadata.BatchableMetadataProvider": {
     "line number": [
      49
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_base_provider.BaseMetadataProviderTest.test_batchable_provider.SimpleProvider.visit_Pass": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      54
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_base_provider.BaseMetadataProviderTest.test_batchable_provider.SimpleProvider.visit_Return": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "libcst.Return": {
     "line number": [
      57
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_base_provider.BaseMetadataProviderTest.test_visitor_provider": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "SimpleProvider": {
     "line number": [
      35,
      39,
      40,
      41
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      32,
      33
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      30
     ]
    },
    "libcst.parse_module": {
     "line number": [
      30
     ]
    },
    "typing.cast": {
     "line number": [
      32,
      33
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_base_provider.BaseMetadataProviderTest.test_visitor_provider.SimpleProvider": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "int": {
     "line number": [
      21
     ]
    },
    "libcst.metadata.VisitorMetadataProvider": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_base_provider.BaseMetadataProviderTest.test_visitor_provider.SimpleProvider.on_visit": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      26
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_base_provider.BatchableMetadataProvider": {
  "data": {
   "shadows": "libcst.metadata.BatchableMetadataProvider"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_base_provider.MetadataWrapper": {
  "data": {
   "shadows": "libcst.metadata.MetadataWrapper"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_base_provider.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_base_provider.VisitorMetadataProvider": {
  "data": {
   "shadows": "libcst.metadata.VisitorMetadataProvider"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_base_provider._gen_batchable": {
  "data": {
   "shadows": "libcst.metadata.wrapper._gen_batchable"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_base_provider.cast": {
  "data": {
   "shadows": "typing.cast"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_base_provider.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_base_provider.parse_module": {
  "data": {
   "shadows": "libcst.parse_module"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_expression_context_provider": {
  "data": {},
  "type": "module"
 },
 "libcst.metadata.tests.test_expression_context_provider.CSTVisitor": {
  "data": {
   "shadows": "libcst._visitors.CSTVisitor"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_expression_context_provider.DependentVisitor": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "libcst._visitors.CSTVisitor": {
     "line number": [
      20
     ]
    },
    "libcst.metadata.ExpressionContextProvider": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_expression_context_provider.DependentVisitor.__init__": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "libcst.metadata.ExpressionContext": {
     "line number": [
      27,
      28,
      29,
      30,
      31,
      32
     ]
    },
    "libcst.testing.utils.UnitTest": {
     "line number": [
      26
     ]
    },
    "str": {
     "line number": [
      27,
      28,
      29,
      30,
      31,
      32
     ]
    },
    "typing.Dict": {
     "line number": [
      27,
      28,
      29,
      30,
      31,
      32
     ]
    },
    "typing.Optional": {
     "line number": [
      27
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_expression_context_provider.DependentVisitor.visit_Attribute": {
  "data": {
   "lineno": 49,
   "symbols_in_volume": {
    "libcst.Attribute": {
     "line number": [
      49
     ]
    },
    "libcst.Module": {
     "line number": [
      52
     ]
    },
    "libcst.metadata.ExpressionContextProvider": {
     "line number": [
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_expression_context_provider.DependentVisitor.visit_Call": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": {
    "KeyError": {
     "line number": [
      84
     ]
    },
    "libcst.Call": {
     "line number": [
      83
     ]
    },
    "libcst.metadata.ExpressionContextProvider": {
     "line number": [
      85
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_expression_context_provider.DependentVisitor.visit_List": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": {
    "libcst.List": {
     "line number": [
      76
     ]
    },
    "libcst.Module": {
     "line number": [
      80
     ]
    },
    "libcst.metadata.ExpressionContextProvider": {
     "line number": [
      78
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_expression_context_provider.DependentVisitor.visit_Name": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      42
     ]
    },
    "libcst.metadata.ExpressionContextProvider": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_expression_context_provider.DependentVisitor.visit_StarredElement": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      66
     ]
    },
    "libcst.StarredElement": {
     "line number": [
      62
     ]
    },
    "libcst.metadata.ExpressionContextProvider": {
     "line number": [
      64
     ]
    },
    "typing.cast": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_expression_context_provider.DependentVisitor.visit_Subscript": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      59
     ]
    },
    "libcst.Subscript": {
     "line number": [
      55
     ]
    },
    "libcst.metadata.ExpressionContextProvider": {
     "line number": [
      57
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_expression_context_provider.DependentVisitor.visit_Tuple": {
  "data": {
   "lineno": 69,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      73
     ]
    },
    "libcst.Tuple": {
     "line number": [
      69
     ]
    },
    "libcst.metadata.ExpressionContextProvider": {
     "line number": [
      71
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_expression_context_provider.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_expression_context_provider.ExpressionContext": {
  "data": {
   "shadows": "libcst.metadata.ExpressionContext"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_expression_context_provider.ExpressionContextProvider": {
  "data": {
   "shadows": "libcst.metadata.ExpressionContextProvider"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_expression_context_provider.ExpressionContextProviderTest": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      88
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_expression_context_provider.ExpressionContextProviderTest.test_annassign": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": {
    "libcst.metadata.ExpressionContext.LOAD": {
     "line number": [
      199,
      200
     ]
    },
    "libcst.metadata.ExpressionContext.STORE": {
     "line number": [
      198
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      193
     ]
    },
    "libcst.metadata.tests.test_expression_context_provider.DependentVisitor": {
     "line number": [
      195
     ]
    },
    "libcst.parse_module": {
     "line number": [
      193
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_expression_context_provider.ExpressionContextProviderTest.test_assign_to_attribute": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "libcst.metadata.ExpressionContext.LOAD": {
     "line number": [
      113,
      115,
      120,
      130,
      133,
      138,
      140,
      141
     ]
    },
    "libcst.metadata.ExpressionContext.STORE": {
     "line number": [
      119,
      139
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      108,
      125
     ]
    },
    "libcst.metadata.tests.test_expression_context_provider.DependentVisitor": {
     "line number": [
      110,
      127
     ]
    },
    "libcst.parse_module": {
     "line number": [
      108,
      125
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_expression_context_provider.ExpressionContextProviderTest.test_assign_with_subscript": {
  "data": {
   "lineno": 146,
   "symbols_in_volume": {
    "libcst.metadata.ExpressionContext.LOAD": {
     "line number": [
      152,
      153,
      154,
      155,
      159,
      169,
      171,
      172,
      173,
      175,
      176
     ]
    },
    "libcst.metadata.ExpressionContext.STORE": {
     "line number": [
      158
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      147,
      164
     ]
    },
    "libcst.metadata.tests.test_expression_context_provider.DependentVisitor": {
     "line number": [
      149,
      166
     ]
    },
    "libcst.parse_module": {
     "line number": [
      147,
      164
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_expression_context_provider.ExpressionContextProviderTest.test_augassign": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": {
    "libcst.metadata.ExpressionContext.LOAD": {
     "line number": [
      187
     ]
    },
    "libcst.metadata.ExpressionContext.STORE": {
     "line number": [
      186
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      181
     ]
    },
    "libcst.metadata.tests.test_expression_context_provider.DependentVisitor": {
     "line number": [
      183
     ]
    },
    "libcst.parse_module": {
     "line number": [
      181
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_expression_context_provider.ExpressionContextProviderTest.test_del_simple": {
  "data": {
   "lineno": 218,
   "symbols_in_volume": {
    "libcst.metadata.ExpressionContext.DEL": {
     "line number": [
      221
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      219
     ]
    },
    "libcst.metadata.tests.test_expression_context_provider.DependentVisitor": {
     "line number": [
      221
     ]
    },
    "libcst.parse_module": {
     "line number": [
      219
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_expression_context_provider.ExpressionContextProviderTest.test_del_with_subscript": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": {
    "libcst.metadata.ExpressionContext.DEL": {
     "line number": [
      233
     ]
    },
    "libcst.metadata.ExpressionContext.LOAD": {
     "line number": [
      230,
      231
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      225
     ]
    },
    "libcst.metadata.tests.test_expression_context_provider.DependentVisitor": {
     "line number": [
      227
     ]
    },
    "libcst.parse_module": {
     "line number": [
      225
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_expression_context_provider.ExpressionContextProviderTest.test_del_with_tuple": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": {
    "libcst.metadata.ExpressionContext.DEL": {
     "line number": [
      243,
      244,
      246
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      238
     ]
    },
    "libcst.metadata.tests.test_expression_context_provider.DependentVisitor": {
     "line number": [
      240
     ]
    },
    "libcst.parse_module": {
     "line number": [
      238
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_expression_context_provider.ExpressionContextProviderTest.test_except_as": {
  "data": {
   "lineno": 353,
   "symbols_in_volume": {
    "libcst.metadata.ExpressionContext.LOAD": {
     "line number": [
      361
     ]
    },
    "libcst.metadata.ExpressionContext.STORE": {
     "line number": [
      362
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      354
     ]
    },
    "libcst.metadata.tests.test_expression_context_provider.DependentVisitor": {
     "line number": [
      358
     ]
    },
    "libcst.parse_module": {
     "line number": [
      355
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_expression_context_provider.ExpressionContextProviderTest.test_expressions_with_assign": {
  "data": {
   "lineno": 320,
   "symbols_in_volume": {
    "libcst.metadata.ExpressionContext.LOAD": {
     "line number": [
      326,
      327,
      328,
      329
     ]
    },
    "libcst.metadata.ExpressionContext.STORE": {
     "line number": [
      331
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      321
     ]
    },
    "libcst.metadata.tests.test_expression_context_provider.DependentVisitor": {
     "line number": [
      323
     ]
    },
    "libcst.parse_module": {
     "line number": [
      321
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_expression_context_provider.ExpressionContextProviderTest.test_for": {
  "data": {
   "lineno": 367,
   "symbols_in_volume": {
    "libcst.metadata.ExpressionContext.LOAD": {
     "line number": [
      374
     ]
    },
    "libcst.metadata.ExpressionContext.STORE": {
     "line number": [
      373,
      375
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      368
     ]
    },
    "libcst.metadata.tests.test_expression_context_provider.DependentVisitor": {
     "line number": [
      370
     ]
    },
    "libcst.parse_module": {
     "line number": [
      368
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_expression_context_provider.ExpressionContextProviderTest.test_invalid_type_for_context": {
  "data": {
   "lineno": 335,
   "symbols_in_volume": {
    "libcst.metadata.ExpressionContext.LOAD": {
     "line number": [
      338
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      336
     ]
    },
    "libcst.metadata.tests.test_expression_context_provider.DependentVisitor": {
     "line number": [
      338
     ]
    },
    "libcst.parse_module": {
     "line number": [
      336
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_expression_context_provider.ExpressionContextProviderTest.test_list_with_assign": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": {
    "libcst.metadata.ExpressionContext.LOAD": {
     "line number": [
      289,
      293
     ]
    },
    "libcst.metadata.ExpressionContext.STORE": {
     "line number": [
      288,
      292
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      283
     ]
    },
    "libcst.metadata.tests.test_expression_context_provider.DependentVisitor": {
     "line number": [
      285
     ]
    },
    "libcst.parse_module": {
     "line number": [
      283
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_expression_context_provider.ExpressionContextProviderTest.test_nested_list_with_assign": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": {
    "libcst.metadata.ExpressionContext.LOAD": {
     "line number": [
      307,
      308,
      309,
      314,
      315
     ]
    },
    "libcst.metadata.ExpressionContext.STORE": {
     "line number": [
      304,
      305,
      306,
      312,
      313
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      299
     ]
    },
    "libcst.metadata.tests.test_expression_context_provider.DependentVisitor": {
     "line number": [
      301
     ]
    },
    "libcst.parse_module": {
     "line number": [
      299
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_expression_context_provider.ExpressionContextProviderTest.test_nested_tuple_with_assign": {
  "data": {
   "lineno": 263,
   "symbols_in_volume": {
    "libcst.metadata.ExpressionContext.LOAD": {
     "line number": [
      276,
      277
     ]
    },
    "libcst.metadata.ExpressionContext.STORE": {
     "line number": [
      269,
      270,
      271,
      274,
      275
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      264
     ]
    },
    "libcst.metadata.tests.test_expression_context_provider.DependentVisitor": {
     "line number": [
      266
     ]
    },
    "libcst.parse_module": {
     "line number": [
      264
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_expression_context_provider.ExpressionContextProviderTest.test_simple_assign": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": {
    "libcst.metadata.ExpressionContext.LOAD": {
     "line number": [
      102
     ]
    },
    "libcst.metadata.ExpressionContext.STORE": {
     "line number": [
      101
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      96
     ]
    },
    "libcst.metadata.tests.test_expression_context_provider.DependentVisitor": {
     "line number": [
      98
     ]
    },
    "libcst.parse_module": {
     "line number": [
      96
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_expression_context_provider.ExpressionContextProviderTest.test_simple_load": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "libcst.metadata.ExpressionContext.LOAD": {
     "line number": [
      92
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      90
     ]
    },
    "libcst.metadata.tests.test_expression_context_provider.DependentVisitor": {
     "line number": [
      92
     ]
    },
    "libcst.parse_module": {
     "line number": [
      90
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_expression_context_provider.ExpressionContextProviderTest.test_starred_element_with_assign": {
  "data": {
   "lineno": 205,
   "symbols_in_volume": {
    "libcst.metadata.ExpressionContext.LOAD": {
     "line number": [
      212
     ]
    },
    "libcst.metadata.ExpressionContext.STORE": {
     "line number": [
      211,
      214
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      206
     ]
    },
    "libcst.metadata.tests.test_expression_context_provider.DependentVisitor": {
     "line number": [
      208
     ]
    },
    "libcst.parse_module": {
     "line number": [
      206
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_expression_context_provider.ExpressionContextProviderTest.test_tuple_with_assign": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": {
    "libcst.metadata.ExpressionContext.LOAD": {
     "line number": [
      257
     ]
    },
    "libcst.metadata.ExpressionContext.STORE": {
     "line number": [
      256,
      259
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      251
     ]
    },
    "libcst.metadata.tests.test_expression_context_provider.DependentVisitor": {
     "line number": [
      253
     ]
    },
    "libcst.parse_module": {
     "line number": [
      251
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_expression_context_provider.ExpressionContextProviderTest.test_with_as": {
  "data": {
   "lineno": 341,
   "symbols_in_volume": {
    "libcst.metadata.ExpressionContext.LOAD": {
     "line number": [
      347
     ]
    },
    "libcst.metadata.ExpressionContext.STORE": {
     "line number": [
      348
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      342
     ]
    },
    "libcst.metadata.tests.test_expression_context_provider.DependentVisitor": {
     "line number": [
      344
     ]
    },
    "libcst.parse_module": {
     "line number": [
      342
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_expression_context_provider.MetadataWrapper": {
  "data": {
   "shadows": "libcst.metadata.MetadataWrapper"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_expression_context_provider.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_expression_context_provider.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_expression_context_provider.cast": {
  "data": {
   "shadows": "typing.cast"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_expression_context_provider.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_expression_context_provider.parse_module": {
  "data": {
   "shadows": "libcst.parse_module"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_full_repo_manager": {
  "data": {
   "symbols_in_volume": {
    "pathlib.Path": {
     "line number": [
      16
     ]
    },
    "str": {
     "line number": [
      16,
      16
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst.metadata.tests.test_full_repo_manager.FullRepoManager": {
  "data": {
   "shadows": "libcst.metadata.full_repo_manager.FullRepoManager"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_full_repo_manager.FullRepoManagerTest": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_full_repo_manager.FullRepoManagerTest.test_get_full_repo_cache": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "libcst.metadata.full_repo_manager.FullRepoManager": {
     "line number": [
      60
     ]
    },
    "libcst.metadata.tests.test_full_repo_manager.json": {
     "line number": [
      57
     ]
    },
    "libcst.metadata.type_inference_provider.TypeInferenceProvider": {
     "line number": [
      60,
      62,
      52
     ]
    },
    "pathlib.Path": {
     "line number": [
      57
     ]
    },
    "unittest.mock.Mock": {
     "line number": [
      53
     ]
    },
    "unittest.mock.patch.object": {
     "line number": [
      52
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_full_repo_manager.FullRepoManagerTest.test_get_metadata_wrapper_with_empty_cache": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "libcst.metadata.full_repo_manager.FullRepoManager": {
     "line number": [
      24
     ]
    },
    "libcst.metadata.type_inference_provider.TypeInferenceProvider": {
     "line number": [
      24,
      26,
      20
     ]
    },
    "unittest.mock.Mock": {
     "line number": [
      21
     ]
    },
    "unittest.mock.patch.object": {
     "line number": [
      20
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_full_repo_manager.FullRepoManagerTest.test_get_metadata_wrapper_with_invalid_path": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      47
     ]
    },
    "libcst.metadata.full_repo_manager.FullRepoManager": {
     "line number": [
      43
     ]
    },
    "libcst.metadata.type_inference_provider.TypeInferenceProvider": {
     "line number": [
      44,
      39
     ]
    },
    "unittest.mock.Mock": {
     "line number": [
      40
     ]
    },
    "unittest.mock.patch.object": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_full_repo_manager.FullRepoManagerTest.test_get_metadata_wrapper_with_patched_cache": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "libcst.metadata.full_repo_manager.FullRepoManager": {
     "line number": [
      35
     ]
    },
    "libcst.metadata.tests.test_full_repo_manager.json": {
     "line number": [
      33
     ]
    },
    "libcst.metadata.tests.test_type_inference_provider._test_simple_class_helper": {
     "line number": [
      37
     ]
    },
    "libcst.metadata.type_inference_provider.TypeInferenceProvider": {
     "line number": [
      35,
      28
     ]
    },
    "pathlib.Path": {
     "line number": [
      33
     ]
    },
    "unittest.mock.Mock": {
     "line number": [
      29
     ]
    },
    "unittest.mock.patch.object": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_full_repo_manager.Mock": {
  "data": {
   "shadows": "unittest.mock.Mock"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_full_repo_manager.Path": {
  "data": {
   "shadows": "pathlib.Path"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_full_repo_manager.TypeInferenceProvider": {
  "data": {
   "shadows": "libcst.metadata.type_inference_provider.TypeInferenceProvider"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_full_repo_manager.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_full_repo_manager._test_simple_class_helper": {
  "data": {
   "shadows": "libcst.metadata.tests.test_type_inference_provider._test_simple_class_helper"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_full_repo_manager.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_full_repo_manager.patch": {
  "data": {
   "shadows": "unittest.mock.patch"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_metadata_provider": {
  "data": {},
  "type": "module"
 },
 "libcst.metadata.tests.test_metadata_provider.BatchableMetadataProvider": {
  "data": {
   "shadows": "libcst.metadata.BatchableMetadataProvider"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_metadata_provider.CSTTransformer": {
  "data": {
   "shadows": "libcst._visitors.CSTTransformer"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataException": {
  "data": {
   "shadows": "libcst._exceptions.MetadataException"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      20
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_batchable_provider_inherited_metadata": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": {
    "VisitorA": {
     "line number": [
      259
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      259
     ]
    },
    "libcst.parse_module": {
     "line number": [
      258
     ]
    },
    "unittest.mock.Mock": {
     "line number": [
      240
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_batchable_provider_inherited_metadata.ProviderA": {
  "data": {
   "lineno": 242,
   "symbols_in_volume": {
    "int": {
     "line number": [
      242
     ]
    },
    "libcst.metadata.VisitorMetadataProvider": {
     "line number": [
      242
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_batchable_provider_inherited_metadata.ProviderA.visit_Pass": {
  "data": {
   "lineno": 243,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      243
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_batchable_provider_inherited_metadata.ProviderB": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": {
    "int": {
     "line number": [
      247
     ]
    },
    "libcst.metadata.BatchableMetadataProvider": {
     "line number": [
      247
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_batchable_provider_inherited_metadata.ProviderC": {
  "data": {
   "lineno": 250
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_batchable_provider_inherited_metadata.ProviderC.visit_Pass": {
  "data": {
   "lineno": 251,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      251
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_batchable_provider_inherited_metadata.VisitorA": {
  "data": {
   "lineno": 255,
   "symbols_in_volume": {
    "libcst._visitors.CSTTransformer": {
     "line number": [
      255
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_batched_provider": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": {
    "DependentVisitor": {
     "line number": [
      92
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      92
     ]
    },
    "libcst.parse_module": {
     "line number": [
      91
     ]
    },
    "unittest.mock.Mock": {
     "line number": [
      71
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_batched_provider.BatchedProviderA": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": {
    "int": {
     "line number": [
      73
     ]
    },
    "libcst.metadata.BatchableMetadataProvider": {
     "line number": [
      73
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_batched_provider.BatchedProviderA.visit_Pass": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      74
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_batched_provider.BatchedProviderB": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": {
    "libcst.metadata.BatchableMetadataProvider": {
     "line number": [
      78
     ]
    },
    "str": {
     "line number": [
      78
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_batched_provider.BatchedProviderB.visit_Pass": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      79
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_batched_provider.DependentVisitor": {
  "data": {
   "lineno": 83,
   "symbols_in_volume": {
    "libcst._visitors.CSTTransformer": {
     "line number": [
      83
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_batched_provider.DependentVisitor.visit_Pass": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      86
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_circular_dependency": {
  "data": {
   "lineno": 333,
   "symbols_in_volume": {
    "BadVisitor": {
     "line number": [
      349
     ]
    },
    "libcst.Module": {
     "line number": [
      349
     ]
    },
    "libcst._exceptions.MetadataException": {
     "line number": [
      347
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      349
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_circular_dependency.BadVisitor": {
  "data": {
   "lineno": 343,
   "symbols_in_volume": {
    "libcst._visitors.CSTTransformer": {
     "line number": [
      343
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_circular_dependency.ProviderA": {
  "data": {
   "lineno": 338,
   "symbols_in_volume": {
    "libcst.metadata.VisitorMetadataProvider": {
     "line number": [
      338
     ]
    },
    "str": {
     "line number": [
      338
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_inherited_metadata": {
  "data": {
   "lineno": 177,
   "symbols_in_volume": {
    "VisitorB": {
     "line number": [
      198
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      198
     ]
    },
    "libcst.parse_module": {
     "line number": [
      197
     ]
    },
    "unittest.mock.Mock": {
     "line number": [
      183
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_inherited_metadata.SimpleProvider": {
  "data": {
   "lineno": 185,
   "symbols_in_volume": {
    "int": {
     "line number": [
      185
     ]
    },
    "libcst.metadata.VisitorMetadataProvider": {
     "line number": [
      185
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_inherited_metadata.SimpleProvider.visit_Pass": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      186
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_inherited_metadata.VisitorA": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": {
    "libcst._visitors.CSTTransformer": {
     "line number": [
      190
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_inherited_metadata.VisitorB": {
  "data": {
   "lineno": 193
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_inherited_metadata.VisitorB.visit_Pass": {
  "data": {
   "lineno": 194,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      194
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_mixed_providers": {
  "data": {
   "lineno": 98,
   "symbols_in_volume": {
    "DependentVisitor": {
     "line number": [
      169
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      169
     ]
    },
    "libcst.parse_module": {
     "line number": [
      168
     ]
    },
    "unittest.mock.Mock": {
     "line number": [
      109
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_mixed_providers.BatchedProviderA": {
  "data": {
   "lineno": 116,
   "symbols_in_volume": {
    "int": {
     "line number": [
      116
     ]
    },
    "libcst.metadata.BatchableMetadataProvider": {
     "line number": [
      116
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_mixed_providers.BatchedProviderA.visit_Pass": {
  "data": {
   "lineno": 119,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      119
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_mixed_providers.BatchedProviderB": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": {
    "int": {
     "line number": [
      123
     ]
    },
    "libcst.metadata.BatchableMetadataProvider": {
     "line number": [
      123
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_mixed_providers.BatchedProviderB.visit_Pass": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      126
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_mixed_providers.BatchedProviderC": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": {
    "int": {
     "line number": [
      140
     ]
    },
    "libcst.metadata.BatchableMetadataProvider": {
     "line number": [
      140
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_mixed_providers.BatchedProviderC.visit_Pass": {
  "data": {
   "lineno": 143,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      143
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_mixed_providers.DependentProvider": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": {
    "int": {
     "line number": [
      130
     ]
    },
    "libcst.metadata.VisitorMetadataProvider": {
     "line number": [
      130
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_mixed_providers.DependentProvider.on_visit": {
  "data": {
   "lineno": 133,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      133
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      133
     ]
    },
    "sum": {
     "line number": [
      134,
      137
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_mixed_providers.DependentVisitor": {
  "data": {
   "lineno": 147,
   "symbols_in_volume": {
    "libcst._visitors.CSTTransformer": {
     "line number": [
      147
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_mixed_providers.DependentVisitor.visit_Module": {
  "data": {
   "lineno": 155,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      155
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_mixed_providers.DependentVisitor.visit_Pass": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      161
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_mixed_providers.SimpleProvider": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": {
    "int": {
     "line number": [
      111
     ]
    },
    "libcst.metadata.VisitorMetadataProvider": {
     "line number": [
      111
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_mixed_providers.SimpleProvider.visit_Pass": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      112
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_provider_inherited_metadata": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": {
    "Visitor": {
     "line number": [
      228
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      228
     ]
    },
    "libcst.parse_module": {
     "line number": [
      227
     ]
    },
    "unittest.mock.Mock": {
     "line number": [
      209
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_provider_inherited_metadata.ProviderA": {
  "data": {
   "lineno": 211,
   "symbols_in_volume": {
    "int": {
     "line number": [
      211
     ]
    },
    "libcst.metadata.VisitorMetadataProvider": {
     "line number": [
      211
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_provider_inherited_metadata.ProviderA.visit_Pass": {
  "data": {
   "lineno": 212,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      212
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_provider_inherited_metadata.ProviderB": {
  "data": {
   "lineno": 216,
   "symbols_in_volume": {
    "int": {
     "line number": [
      216
     ]
    },
    "libcst.metadata.VisitorMetadataProvider": {
     "line number": [
      216
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_provider_inherited_metadata.ProviderC": {
  "data": {
   "lineno": 219
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_provider_inherited_metadata.ProviderC.visit_Pass": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      220
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_provider_inherited_metadata.Visitor": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": {
    "libcst._visitors.CSTTransformer": {
     "line number": [
      224
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_self_metadata": {
  "data": {
   "lineno": 265,
   "symbols_in_volume": {
    "AVisitor": {
     "line number": [
      285
     ]
    },
    "libcst.Module": {
     "line number": [
      285
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_self_metadata.AVisitor": {
  "data": {
   "lineno": 282,
   "symbols_in_volume": {
    "libcst._visitors.CSTTransformer": {
     "line number": [
      282
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_self_metadata.ProviderA": {
  "data": {
   "lineno": 272,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      272
     ]
    },
    "libcst.metadata.VisitorMetadataProvider": {
     "line number": [
      272
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_self_metadata.ProviderA.on_leave": {
  "data": {
   "lineno": 277,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      277
     ]
    },
    "type": {
     "line number": [
      279
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_self_metadata.ProviderA.on_visit": {
  "data": {
   "lineno": 273,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      273
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      273
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_undeclared_metadata": {
  "data": {
   "lineno": 308,
   "symbols_in_volume": {
    "AVisitor": {
     "line number": [
      331
     ]
    },
    "KeyError": {
     "line number": [
      328
     ]
    },
    "libcst.Module": {
     "line number": [
      331
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      331
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_undeclared_metadata.AVisitor": {
  "data": {
   "lineno": 319,
   "symbols_in_volume": {
    "libcst._visitors.CSTTransformer": {
     "line number": [
      319
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_undeclared_metadata.AVisitor.on_visit": {
  "data": {
   "lineno": 322,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      322
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      322
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_undeclared_metadata.ProviderA": {
  "data": {
   "lineno": 313,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      313
     ]
    },
    "libcst.metadata.VisitorMetadataProvider": {
     "line number": [
      313
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_undeclared_metadata.ProviderB": {
  "data": {
   "lineno": 316,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      316
     ]
    },
    "libcst.metadata.VisitorMetadataProvider": {
     "line number": [
      316
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_unset_metadata": {
  "data": {
   "lineno": 287,
   "symbols_in_volume": {
    "AVisitor": {
     "line number": [
      306
     ]
    },
    "KeyError": {
     "line number": [
      303
     ]
    },
    "libcst.Module": {
     "line number": [
      306
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_unset_metadata.AVisitor": {
  "data": {
   "lineno": 295,
   "symbols_in_volume": {
    "libcst._visitors.CSTTransformer": {
     "line number": [
      295
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_unset_metadata.AVisitor.on_visit": {
  "data": {
   "lineno": 298,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      298
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      298
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_unset_metadata.ProviderA": {
  "data": {
   "lineno": 292,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      292
     ]
    },
    "libcst.metadata.VisitorMetadataProvider": {
     "line number": [
      292
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_visitor_provider": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "DependentVisitor": {
     "line number": [
      59
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      59
     ]
    },
    "libcst.parse_module": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_visitor_provider.DependentProvider": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "int": {
     "line number": [
      37
     ]
    },
    "libcst.metadata.VisitorMetadataProvider": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_visitor_provider.DependentProvider.on_visit": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      40
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_visitor_provider.DependentVisitor": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": {
    "libcst._visitors.CSTTransformer": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_visitor_provider.DependentVisitor.visit_Module": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "libcst.Module": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_visitor_provider.DependentVisitor.visit_Pass": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_visitor_provider.SimpleProvider": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "int": {
     "line number": [
      32
     ]
    },
    "libcst.metadata.VisitorMetadataProvider": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataProviderTest.test_visitor_provider.SimpleProvider.on_visit": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      33
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      33
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_provider.MetadataWrapper": {
  "data": {
   "shadows": "libcst.metadata.MetadataWrapper"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_metadata_provider.Mock": {
  "data": {
   "shadows": "unittest.mock.Mock"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_metadata_provider.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_metadata_provider.VisitorMetadataProvider": {
  "data": {
   "shadows": "libcst.metadata.VisitorMetadataProvider"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_metadata_provider.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_metadata_provider.parse_module": {
  "data": {
   "shadows": "libcst.parse_module"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_metadata_wrapper": {
  "data": {},
  "type": "module"
 },
 "libcst.metadata.tests.test_metadata_wrapper.BatchableMetadataProvider": {
  "data": {
   "shadows": "libcst.metadata.BatchableMetadataProvider"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_metadata_wrapper.MetadataWrapper": {
  "data": {
   "shadows": "libcst.metadata.MetadataWrapper"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_metadata_wrapper.MetadataWrapperTest": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_wrapper.MetadataWrapperTest.test_copies_tree": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      17
     ]
    },
    "libcst.parse_module": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_wrapper.MetadataWrapperTest.test_equality_by_identity": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      28,
      29
     ]
    },
    "libcst.parse_module": {
     "line number": [
      27
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_wrapper.MetadataWrapperTest.test_hash_by_identity": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "hash": {
     "line number": [
      39,
      39,
      40,
      40,
      41,
      41,
      42,
      42,
      43,
      43,
      44,
      44
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      36,
      37,
      38
     ]
    },
    "libcst.parse_module": {
     "line number": [
      35
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_wrapper.MetadataWrapperTest.test_metadata_cache": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      53
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      72
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      72
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      51,
      71
     ]
    },
    "libcst.parse_module": {
     "line number": [
      50
     ]
    },
    "object": {
     "line number": [
      67
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_wrapper.MetadataWrapperTest.test_metadata_cache.DummyMetadataProvider": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "libcst.metadata.BatchableMetadataProvider": {
     "line number": [
      47
     ]
    },
    "tuple": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_wrapper.MetadataWrapperTest.test_metadata_cache.SimpleCacheMetadataProvider": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "libcst.metadata.BatchableMetadataProvider": {
     "line number": [
      57
     ]
    },
    "object": {
     "line number": [
      57
     ]
    },
    "tuple": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_metadata_wrapper.MetadataWrapperTest.test_metadata_cache.SimpleCacheMetadataProvider.__init__": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "object": {
     "line number": [
      60
     ]
    },
    "super": {
     "line number": [
      61
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_wrapper.MetadataWrapperTest.test_metadata_cache.SimpleCacheMetadataProvider.visit_Pass": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      64
     ]
    },
    "libcst.Pass": {
     "line number": [
      64
     ]
    },
    "typing.Optional": {
     "line number": [
      64
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_wrapper.MetadataWrapperTest.test_unsafe_skip_copy": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      23
     ]
    },
    "libcst.parse_module": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_metadata_wrapper.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_metadata_wrapper.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_metadata_wrapper.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_parent_node_provider": {
  "data": {},
  "type": "module"
 },
 "libcst.metadata.tests.test_parent_node_provider.DependentVisitor": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "libcst.CSTVisitor": {
     "line number": [
      14
     ]
    },
    "libcst.metadata.ParentNodeProvider": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_parent_node_provider.DependentVisitor.__init__": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_parent_node_provider.DependentVisitor.on_visit": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      20
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      20
     ]
    },
    "libcst.metadata.ParentNodeProvider": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_parent_node_provider.MetadataWrapper": {
  "data": {
   "shadows": "libcst.metadata.MetadataWrapper"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_parent_node_provider.ParentNodeProvider": {
  "data": {
   "shadows": "libcst.metadata.ParentNodeProvider"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_parent_node_provider.ParentNodeProviderTest": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      27
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_parent_node_provider.ParentNodeProviderTest.test_parent_node_provier": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      63
     ]
    },
    "libcst.metadata.tests.test_parent_node_provider.DependentVisitor": {
     "line number": [
      64
     ]
    },
    "libcst.parse_module": {
     "line number": [
      63
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      28
     ]
    },
    "str": {
     "line number": [
      62
     ]
    },
    "textwrap.dedent": {
     "line number": [
      63
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_parent_node_provider.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_parent_node_provider.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_parent_node_provider.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_parent_node_provider.dedent": {
  "data": {
   "shadows": "textwrap.dedent"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_position_provider": {
  "data": {},
  "type": "module"
 },
 "libcst.metadata.tests.test_position_provider.BatchableCSTVisitor": {
  "data": {
   "shadows": "libcst._batched_visitor.BatchableCSTVisitor"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_position_provider.CSTVisitor": {
  "data": {
   "shadows": "libcst._visitors.CSTVisitor"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_position_provider.CodeRange": {
  "data": {
   "shadows": "libcst.metadata.CodeRange"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_position_provider.MetadataWrapper": {
  "data": {
   "shadows": "libcst.metadata.MetadataWrapper"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_position_provider.PositionProvider": {
  "data": {
   "shadows": "libcst.metadata.PositionProvider"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_position_provider.PositionProviderTest": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_position_provider.PositionProviderTest.test_batchable_provider": {
  "data": {
   "lineno": 72,
   "symbols_in_volume": {
    "ABatchable": {
     "line number": [
      84
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      83
     ]
    },
    "libcst.parse_module": {
     "line number": [
      83
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_position_provider.PositionProviderTest.test_batchable_provider.ABatchable": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": {
    "libcst._batched_visitor.BatchableCSTVisitor": {
     "line number": [
      75
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      76
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_position_provider.PositionProviderTest.test_batchable_provider.ABatchable.visit_Pass": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      78
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      80
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      80
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_position_provider.PositionProviderTest.test_equal_range": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "EqualPositionVisitor": {
     "line number": [
      69,
      70
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      54
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      69,
      70
     ]
    },
    "libcst.parse_module": {
     "line number": [
      69,
      70
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_position_provider.PositionProviderTest.test_equal_range.EqualPositionVisitor": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "libcst._visitors.CSTVisitor": {
     "line number": [
      56
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      57
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_position_provider.PositionProviderTest.test_equal_range.EqualPositionVisitor.visit_Equal": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": {
    "libcst.Equal": {
     "line number": [
      59
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      61
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_position_provider.PositionProviderTest.test_equal_range.EqualPositionVisitor.visit_NotEqual": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": {
    "libcst.NotEqual": {
     "line number": [
      64
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_position_provider.PositionProviderTest.test_visitor_provider": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "DependentVisitor": {
     "line number": [
      50
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      49
     ]
    },
    "libcst.parse_module": {
     "line number": [
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_position_provider.PositionProviderTest.test_visitor_provider.DependentVisitor": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": {
    "libcst._visitors.CSTVisitor": {
     "line number": [
      41
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_position_provider.PositionProviderTest.test_visitor_provider.DependentVisitor.visit_Pass": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      44
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      46
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      46
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_position_provider.PositionProvidingCodegenState": {
  "data": {
   "shadows": "libcst.metadata.position_provider.PositionProvidingCodegenState"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_position_provider.PositionProvidingCodegenStateTest": {
  "data": {
   "lineno": 87,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      87
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_position_provider.PositionProvidingCodegenStateTest.test_codegen_add_indent_tokens": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": {
    "libcst.metadata.WhitespaceInclusivePositionProvider": {
     "line number": [
      117
     ]
    },
    "libcst.metadata.position_provider.WhitespaceInclusivePositionProvidingCodegenState": {
     "line number": [
      116
     ]
    },
    "libcst.metadata.tests.test_position_provider.position": {
     "line number": [
      121
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_position_provider.PositionProvidingCodegenStateTest.test_codegen_add_newline": {
  "data": {
   "lineno": 108,
   "symbols_in_volume": {
    "libcst.metadata.WhitespaceInclusivePositionProvider": {
     "line number": [
      110
     ]
    },
    "libcst.metadata.position_provider.WhitespaceInclusivePositionProvidingCodegenState": {
     "line number": [
      109
     ]
    },
    "libcst.metadata.tests.test_position_provider.position": {
     "line number": [
      113
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_position_provider.PositionProvidingCodegenStateTest.test_codegen_add_token": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "libcst.metadata.WhitespaceInclusivePositionProvider": {
     "line number": [
      96
     ]
    },
    "libcst.metadata.position_provider.WhitespaceInclusivePositionProvidingCodegenState": {
     "line number": [
      95
     ]
    },
    "libcst.metadata.tests.test_position_provider.position": {
     "line number": [
      99
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_position_provider.PositionProvidingCodegenStateTest.test_codegen_add_tokens": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": {
    "libcst.metadata.WhitespaceInclusivePositionProvider": {
     "line number": [
      103
     ]
    },
    "libcst.metadata.position_provider.WhitespaceInclusivePositionProvidingCodegenState": {
     "line number": [
      102
     ]
    },
    "libcst.metadata.tests.test_position_provider.position": {
     "line number": [
      106
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_position_provider.PositionProvidingCodegenStateTest.test_codegen_decrease_indent": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": {
    "libcst.metadata.WhitespaceInclusivePositionProvider": {
     "line number": [
      125
     ]
    },
    "libcst.metadata.position_provider.WhitespaceInclusivePositionProvidingCodegenState": {
     "line number": [
      124
     ]
    },
    "libcst.metadata.tests.test_position_provider.position": {
     "line number": [
      132
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_position_provider.PositionProvidingCodegenStateTest.test_codegen_initial_position": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": {
    "libcst.metadata.WhitespaceInclusivePositionProvider": {
     "line number": [
      90
     ]
    },
    "libcst.metadata.position_provider.WhitespaceInclusivePositionProvidingCodegenState": {
     "line number": [
      89
     ]
    },
    "libcst.metadata.tests.test_position_provider.position": {
     "line number": [
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_position_provider.PositionProvidingCodegenStateTest.test_position": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      155
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      168
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      159
     ]
    },
    "libcst.metadata.position_provider.PositionProvidingCodegenState": {
     "line number": [
      159
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_position_provider.PositionProvidingCodegenStateTest.test_whitespace_inclusive_position": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      136
     ]
    },
    "libcst.metadata.CodeRange": {
     "line number": [
      151
     ]
    },
    "libcst.metadata.WhitespaceInclusivePositionProvider": {
     "line number": [
      141
     ]
    },
    "libcst.metadata.position_provider.WhitespaceInclusivePositionProvidingCodegenState": {
     "line number": [
      140
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_position_provider.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_position_provider.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_position_provider.WhitespaceInclusivePositionProvider": {
  "data": {
   "shadows": "libcst.metadata.WhitespaceInclusivePositionProvider"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_position_provider.WhitespaceInclusivePositionProvidingCodegenState": {
  "data": {
   "shadows": "libcst.metadata.position_provider.WhitespaceInclusivePositionProvidingCodegenState"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_position_provider.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_position_provider.parse_module": {
  "data": {
   "shadows": "libcst.parse_module"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_position_provider.position": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": {
    "int": {
     "line number": [
      28,
      28
     ]
    },
    "libcst.metadata.position_provider.WhitespaceInclusivePositionProvidingCodegenState": {
     "line number": [
      27
     ]
    },
    "typing.Tuple": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_qualified_name_provider": {
  "data": {},
  "type": "module"
 },
 "libcst.metadata.tests.test_qualified_name_provider.Collection": {
  "data": {
   "shadows": "typing.Collection"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_qualified_name_provider.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_qualified_name_provider.MetadataWrapper": {
  "data": {
   "shadows": "libcst.metadata.MetadataWrapper"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_qualified_name_provider.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_qualified_name_provider.QualifiedName": {
  "data": {
   "shadows": "libcst.metadata.QualifiedName"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_qualified_name_provider.QualifiedNameProvider": {
  "data": {
   "shadows": "libcst.metadata.QualifiedNameProvider"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_qualified_name_provider.QualifiedNameSource": {
  "data": {
   "shadows": "libcst.metadata.QualifiedNameSource"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_qualified_name_provider.ScopeProviderTest": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_qualified_name_provider.ScopeProviderTest.test_comprehension": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": {
    "libcst.ClassDef": {
     "line number": [
      180
     ]
    },
    "libcst.Expr": {
     "line number": [
      185
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      181
     ]
    },
    "libcst.ListComp": {
     "line number": [
      187,
      199,
      210
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      184
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      180,
      181,
      182,
      183,
      184,
      199,
      210
     ]
    },
    "libcst.metadata.QualifiedName": {
     "line number": [
      193,
      204,
      215
     ]
    },
    "libcst.metadata.QualifiedNameSource.LOCAL": {
     "line number": [
      195,
      206,
      217
     ]
    },
    "libcst.metadata.tests.test_qualified_name_provider.get_qualified_name_metadata_provider": {
     "line number": [
      167
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_qualified_name_provider.ScopeProviderTest.test_has_name_helper": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": {
    "TestVisitor": {
     "line number": [
      245
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      245
     ]
    },
    "libcst.parse_module": {
     "line number": [
      245
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_qualified_name_provider.ScopeProviderTest.test_has_name_helper.TestVisitor": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": {
    "libcst.CSTVisitor": {
     "line number": [
      223
     ]
    },
    "libcst.metadata.QualifiedNameProvider": {
     "line number": [
      224
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_qualified_name_provider.ScopeProviderTest.test_has_name_helper.TestVisitor.__init__": {
  "data": {
   "lineno": 226,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      226
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_qualified_name_provider.ScopeProviderTest.test_has_name_helper.TestVisitor.visit_Call": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      229
     ]
    },
    "libcst.Call": {
     "line number": [
      229
     ]
    },
    "libcst.metadata.QualifiedName": {
     "line number": [
      236,
      241
     ]
    },
    "libcst.metadata.QualifiedNameProvider.has_name": {
     "line number": [
      231,
      233,
      235,
      240
     ]
    },
    "libcst.metadata.QualifiedNameSource.IMPORT": {
     "line number": [
      236
     ]
    },
    "libcst.metadata.QualifiedNameSource.LOCAL": {
     "line number": [
      241
     ]
    },
    "typing.Optional": {
     "line number": [
      229
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_qualified_name_provider.ScopeProviderTest.test_multiple_assignments": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": {
    "libcst.Expr": {
     "line number": [
      156
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      156
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      155,
      156
     ]
    },
    "libcst.metadata.QualifiedName": {
     "line number": [
      161,
      162
     ]
    },
    "libcst.metadata.QualifiedNameSource.IMPORT": {
     "line number": [
      161,
      162
     ]
    },
    "libcst.metadata.tests.test_qualified_name_provider.get_qualified_name_metadata_provider": {
     "line number": [
      146
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_qualified_name_provider.ScopeProviderTest.test_name_in_attribute": {
  "data": {
   "lineno": 247,
   "symbols_in_volume": {
    "eval": {
     "line number": [
      264,
      265
     ]
    },
    "libcst.Attribute": {
     "line number": [
      258
     ]
    },
    "libcst.Expr": {
     "line number": [
      256
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      256
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      254,
      255,
      256
     ]
    },
    "libcst.metadata.QualifiedName": {
     "line number": [
      262
     ]
    },
    "libcst.metadata.QualifiedNameSource.LOCAL": {
     "line number": [
      262
     ]
    },
    "libcst.metadata.tests.test_qualified_name_provider.get_qualified_name_metadata_provider": {
     "line number": [
      248
     ]
    },
    "set": {
     "line number": [
      265
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_qualified_name_provider.ScopeProviderTest.test_nested_qualified_names": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "libcst.ClassDef": {
     "line number": [
      108
     ]
    },
    "libcst.Expr": {
     "line number": [
      115,
      126
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      110,
      121,
      131,
      135
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      115,
      126
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      108,
      110,
      114,
      115,
      121,
      125,
      126,
      131,
      135
     ]
    },
    "libcst.metadata.QualifiedName": {
     "line number": [
      109,
      112,
      119,
      123,
      129,
      133,
      137,
      142
     ]
    },
    "libcst.metadata.QualifiedNameSource.LOCAL": {
     "line number": [
      109,
      112,
      119,
      123,
      129,
      133,
      137,
      142
     ]
    },
    "libcst.metadata.tests.test_qualified_name_provider.get_qualified_name_metadata_provider": {
     "line number": [
      87
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_qualified_name_provider.ScopeProviderTest.test_repeated_values_in_qualified_name": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": {
    "libcst.AnnAssign": {
     "line number": [
      281
     ]
    },
    "libcst.Annotation": {
     "line number": [
      284
     ]
    },
    "libcst.Attribute": {
     "line number": [
      285
     ]
    },
    "libcst.ClassDef": {
     "line number": [
      275
     ]
    },
    "libcst.IndentedBlock": {
     "line number": [
      278
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      279
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      275,
      276,
      277,
      278,
      284,
      285
     ]
    },
    "libcst.metadata.QualifiedName": {
     "line number": [
      288
     ]
    },
    "libcst.metadata.QualifiedNameSource.IMPORT": {
     "line number": [
      288
     ]
    },
    "libcst.metadata.tests.test_qualified_name_provider.get_qualified_name_metadata_provider": {
     "line number": [
      268
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_qualified_name_provider.ScopeProviderTest.test_simple_qualified_names": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": {
    "libcst.Annotation": {
     "line number": [
      46
     ]
    },
    "libcst.Assign": {
     "line number": [
      65,
      76
     ]
    },
    "libcst.ClassDef": {
     "line number": [
      43
     ]
    },
    "libcst.Expr": {
     "line number": [
      50,
      60
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      44
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      50,
      60,
      65,
      76
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      43,
      44,
      46,
      49,
      50,
      59,
      60,
      64,
      65,
      75,
      76
     ]
    },
    "libcst.metadata.QualifiedName": {
     "line number": [
      53,
      56,
      62,
      72,
      83
     ]
    },
    "libcst.metadata.QualifiedNameSource.IMPORT": {
     "line number": [
      53,
      56
     ]
    },
    "libcst.metadata.QualifiedNameSource.LOCAL": {
     "line number": [
      62,
      72,
      83
     ]
    },
    "libcst.metadata.tests.test_qualified_name_provider.get_qualified_name_metadata_provider": {
     "line number": [
      30
     ]
    },
    "set": {
     "line number": [
      46
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_qualified_name_provider.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_qualified_name_provider.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_qualified_name_provider.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_qualified_name_provider.dedent": {
  "data": {
   "shadows": "textwrap.dedent"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_qualified_name_provider.ensure_type": {
  "data": {
   "shadows": "libcst.ensure_type"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_qualified_name_provider.get_qualified_name_metadata_provider": {
  "data": {
   "lineno": 21,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      23
     ]
    },
    "libcst.Module": {
     "line number": [
      23
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      24
     ]
    },
    "libcst.metadata.QualifiedName": {
     "line number": [
      23
     ]
    },
    "libcst.metadata.QualifiedNameProvider": {
     "line number": [
      25
     ]
    },
    "libcst.parse_module": {
     "line number": [
      24
     ]
    },
    "str": {
     "line number": [
      22
     ]
    },
    "textwrap.dedent": {
     "line number": [
      24
     ]
    },
    "typing.Collection": {
     "line number": [
      23
     ]
    },
    "typing.Mapping": {
     "line number": [
      23
     ]
    },
    "typing.Tuple": {
     "line number": [
      23
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_reentrant_codegen": {
  "data": {},
  "type": "module"
 },
 "libcst.metadata.tests.test_reentrant_codegen.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_reentrant_codegen.ExperimentalReentrantCodegenProvider": {
  "data": {
   "shadows": "libcst.metadata.ExperimentalReentrantCodegenProvider"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_reentrant_codegen.ExperimentalReentrantCodegenProviderTest": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_reentrant_codegen.ExperimentalReentrantCodegenProviderTest.test_byte_conversion": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": {
    "libcst.PartialParserConfig": {
     "line number": [
      99
     ]
    },
    "libcst.metadata.ExperimentalReentrantCodegenProvider": {
     "line number": [
      101
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      98
     ]
    },
    "libcst.parse_module": {
     "line number": [
      99
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      106
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_reentrant_codegen.ExperimentalReentrantCodegenProviderTest.test_provider": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "libcst.BaseStatement": {
     "line number": [
      83
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      82
     ]
    },
    "libcst.Module": {
     "line number": [
      82
     ]
    },
    "libcst.metadata.ExperimentalReentrantCodegenProvider": {
     "line number": [
      89
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      88
     ]
    },
    "libcst.parse_module": {
     "line number": [
      88
     ]
    },
    "libcst.parse_statement": {
     "line number": [
      32,
      52,
      58,
      74
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      16
     ]
    },
    "old_node": {
     "line number": [
      90
     ]
    },
    "str": {
     "line number": [
      80,
      81
     ]
    },
    "textwrap.dedent": {
     "line number": [
      85,
      86
     ]
    },
    "typing.Callable": {
     "line number": [
      82
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_reentrant_codegen.MetadataWrapper": {
  "data": {
   "shadows": "libcst.metadata.MetadataWrapper"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_reentrant_codegen.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_reentrant_codegen.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_reentrant_codegen.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_reentrant_codegen.dedent": {
  "data": {
   "shadows": "textwrap.dedent"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_scope_provider": {
  "data": {},
  "type": "module"
 },
 "libcst.metadata.tests.test_scope_provider.Assignment": {
  "data": {
   "shadows": "libcst.metadata.scope_provider.Assignment"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_scope_provider.ClassScope": {
  "data": {
   "shadows": "libcst.metadata.scope_provider.ClassScope"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_scope_provider.ComprehensionScope": {
  "data": {
   "shadows": "libcst.metadata.scope_provider.ComprehensionScope"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_scope_provider.DependentVisitor": {
  "data": {
   "lineno": 29,
   "symbols_in_volume": {
    "libcst.CSTVisitor": {
     "line number": [
      29
     ]
    },
    "libcst.metadata.scope_provider.ScopeProvider": {
     "line number": [
      30
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_scope_provider.FunctionScope": {
  "data": {
   "shadows": "libcst.metadata.scope_provider.FunctionScope"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_scope_provider.GlobalScope": {
  "data": {
   "shadows": "libcst.metadata.scope_provider.GlobalScope"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_scope_provider.LocalScope": {
  "data": {
   "shadows": "libcst.metadata.scope_provider.LocalScope"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_scope_provider.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_scope_provider.MetadataWrapper": {
  "data": {
   "shadows": "libcst.metadata.MetadataWrapper"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_scope_provider.QualifiedName": {
  "data": {
   "shadows": "libcst.metadata.scope_provider.QualifiedName"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_scope_provider.QualifiedNameSource": {
  "data": {
   "shadows": "libcst.metadata.scope_provider.QualifiedNameSource"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_scope_provider.Scope": {
  "data": {
   "shadows": "libcst.metadata.scope_provider.Scope"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProvider": {
  "data": {
   "shadows": "libcst.metadata.scope_provider.ScopeProvider"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      45
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_accesses": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "len": {
     "line number": [
      69,
      71,
      94,
      96
     ]
    },
    "libcst.Call": {
     "line number": [
      76,
      83,
      102
     ]
    },
    "libcst.Expr": {
     "line number": [
      74,
      81,
      100
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      89
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      74,
      81,
      99
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      72,
      73,
      74,
      79,
      80,
      81,
      89,
      97,
      98,
      99
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      108,
      111
     ]
    },
    "libcst.metadata.scope_provider.FunctionScope": {
     "line number": [
      92
     ]
    },
    "libcst.metadata.scope_provider.GlobalScope": {
     "line number": [
      67
     ]
    },
    "libcst.metadata.tests.test_scope_provider.DependentVisitor": {
     "line number": [
      109,
      112
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      56
     ]
    },
    "libcst.parse_module": {
     "line number": [
      108,
      111
     ]
    },
    "list": {
     "line number": [
      68,
      95
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_annotation_access": {
  "data": {
   "lineno": 1013,
   "symbols_in_volume": {
    "len": {
     "line number": [
      1036,
      1042,
      1048,
      1052,
      1058,
      1064
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      1030
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      1030
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      1029,
      1030
     ]
    },
    "libcst.metadata.scope_provider.Assignment": {
     "line number": [
      1035,
      1041,
      1047,
      1051,
      1057,
      1063
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      1014
     ]
    },
    "list": {
     "line number": [
      1034,
      1037,
      1040,
      1043,
      1046,
      1050,
      1053,
      1056,
      1059,
      1062
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_assignments_and_accesses": {
  "data": {
   "lineno": 917,
   "symbols_in_volume": {
    "len": {
     "line number": [
      941,
      949,
      976,
      993,
      1011
     ]
    },
    "libcst.Assign": {
     "line number": [
      931,
      969,
      1000
     ]
    },
    "libcst.Expr": {
     "line number": [
      937,
      986
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      962,
      998
     ]
    },
    "libcst.IndentedBlock": {
     "line number": [
      966,
      983,
      998
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      931,
      937,
      967,
      984,
      1000
     ]
    },
    "libcst.Tuple": {
     "line number": [
      988
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      930,
      931,
      936,
      937,
      962,
      964,
      965,
      966,
      980,
      981,
      982,
      983,
      998,
      998,
      999,
      1000
     ]
    },
    "libcst.metadata.scope_provider.Assignment": {
     "line number": [
      943,
      953,
      978,
      1007
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      918
     ]
    },
    "list": {
     "line number": [
      942,
      950,
      953,
      978
     ]
    },
    "set": {
     "line number": [
      1011
     ]
    },
    "typing.cast": {
     "line number": [
      943,
      953,
      978,
      1007
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_attribute_of_function_call": {
  "data": {
   "lineno": 1217,
   "symbols_in_volume": {
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      1218
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_attribute_of_subscript_called": {
  "data": {
   "lineno": 1220,
   "symbols_in_volume": {
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      1221
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_builtins": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": {
    "len": {
     "line number": [
      124,
      125,
      131,
      132
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      127
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      127
     ]
    },
    "libcst.metadata.scope_provider.FunctionScope": {
     "line number": [
      130
     ]
    },
    "libcst.metadata.scope_provider.GlobalScope": {
     "line number": [
      123
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      116
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      114
     ]
    },
    "str": {
     "line number": [
      115
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_class_scope": {
  "data": {
   "lineno": 306,
   "symbols_in_volume": {
    "len": {
     "line number": [
      320
     ]
    },
    "libcst.ClassDef": {
     "line number": [
      322
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      329
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      322,
      329
     ]
    },
    "libcst.metadata.scope_provider.Assignment": {
     "line number": [
      321
     ]
    },
    "libcst.metadata.scope_provider.ClassScope": {
     "line number": [
      328
     ]
    },
    "libcst.metadata.scope_provider.FunctionScope": {
     "line number": [
      332
     ]
    },
    "libcst.metadata.scope_provider.GlobalScope": {
     "line number": [
      318
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      307
     ]
    },
    "list": {
     "line number": [
      319
     ]
    },
    "typing.cast": {
     "line number": [
      321
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_comprehension_scope": {
  "data": {
   "lineno": 343,
   "symbols_in_volume": {
    "libcst.DictComp": {
     "line number": [
      379
     ]
    },
    "libcst.Expr": {
     "line number": [
      359,
      368,
      377,
      386
     ]
    },
    "libcst.GeneratorExp": {
     "line number": [
      388
     ]
    },
    "libcst.ListComp": {
     "line number": [
      361
     ]
    },
    "libcst.SetComp": {
     "line number": [
      370
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      359,
      368,
      377,
      386
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      357,
      358,
      359,
      366,
      367,
      368,
      375,
      376,
      377,
      384,
      385,
      386
     ]
    },
    "libcst.metadata.scope_provider.ComprehensionScope": {
     "line number": [
      364,
      373,
      382,
      391
     ]
    },
    "libcst.metadata.scope_provider.GlobalScope": {
     "line number": [
      355
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      344
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_contains_is_read_only": {
  "data": {
   "lineno": 1193,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      1197
     ]
    },
    "libcst.metadata.scope_provider.ClassScope": {
     "line number": [
      1194
     ]
    },
    "libcst.metadata.scope_provider.ComprehensionScope": {
     "line number": [
      1194
     ]
    },
    "libcst.metadata.scope_provider.FunctionScope": {
     "line number": [
      1194
     ]
    },
    "libcst.metadata.scope_provider.GlobalScope": {
     "line number": [
      1196
     ]
    },
    "libcst.metadata.scope_provider.LocalScope": {
     "line number": [
      1194
     ]
    },
    "list": {
     "line number": [
      1198,
      1199,
      1200,
      1201,
      1202,
      1205,
      1206,
      1208,
      1211,
      1214
     ]
    },
    "s": {
     "line number": [
      1197
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_del_context_names": {
  "data": {
   "lineno": 1124,
   "symbols_in_volume": {
    "len": {
     "line number": [
      1145,
      1149,
      1161,
      1166
     ]
    },
    "libcst.Assign": {
     "line number": [
      1136
     ]
    },
    "libcst.AssignTarget": {
     "line number": [
      1138
     ]
    },
    "libcst.Attribute": {
     "line number": [
      1172
     ]
    },
    "libcst.Del": {
     "line number": [
      1141,
      1152,
      1168
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      1136,
      1141,
      1152,
      1164,
      1168
     ]
    },
    "libcst.Subscript": {
     "line number": [
      1154
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      1134,
      1135,
      1136,
      1140,
      1141,
      1150,
      1151,
      1152,
      1164,
      1167,
      1168,
      1172
     ]
    },
    "libcst.metadata.scope_provider.Assignment": {
     "line number": [
      1147,
      1148,
      1163,
      1165
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      1125
     ]
    },
    "list": {
     "line number": [
      1144,
      1160
     ]
    },
    "set": {
     "line number": [
      1174
     ]
    },
    "typing.cast": {
     "line number": [
      1148,
      1165
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_dotted_import_access": {
  "data": {
   "lineno": 175,
   "symbols_in_volume": {
    "libcst.Attribute": {
     "line number": [
      200
     ]
    },
    "libcst.Call": {
     "line number": [
      185
     ]
    },
    "libcst.Expr": {
     "line number": [
      185
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      183
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      183,
      184,
      185,
      200
     ]
    },
    "libcst.metadata.scope_provider.Assignment": {
     "line number": [
      191,
      196
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      176
     ]
    },
    "list": {
     "line number": [
      191,
      192,
      196,
      197,
      204
     ]
    },
    "set": {
     "line number": [
      189,
      204,
      205
     ]
    },
    "typing.cast": {
     "line number": [
      191,
      196
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_dotted_import_with_call_access": {
  "data": {
   "lineno": 207,
   "symbols_in_volume": {
    "len": {
     "line number": [
      233
     ]
    },
    "libcst.Attribute": {
     "line number": [
      222,
      226
     ]
    },
    "libcst.Call": {
     "line number": [
      220,
      224
     ]
    },
    "libcst.Expr": {
     "line number": [
      220
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      215
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      215,
      216,
      217,
      218,
      219,
      220
     ]
    },
    "libcst.metadata.scope_provider.Assignment": {
     "line number": [
      231
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      208
     ]
    },
    "list": {
     "line number": [
      231,
      232
     ]
    },
    "set": {
     "line number": [
      235,
      237
     ]
    },
    "typing.cast": {
     "line number": [
      231
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_except_handler": {
  "data": {
   "lineno": 656,
   "symbols_in_volume": {
    "libcst.AsName": {
     "line number": [
      677
     ]
    },
    "libcst.Try": {
     "line number": [
      677
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      676,
      677
     ]
    },
    "libcst.metadata.scope_provider.Assignment": {
     "line number": [
      675
     ]
    },
    "libcst.metadata.scope_provider.GlobalScope": {
     "line number": [
      672
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      663
     ]
    },
    "list": {
     "line number": [
      675
     ]
    },
    "typing.cast": {
     "line number": [
      675
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_func_param_scope": {
  "data": {
   "lineno": 548,
   "symbols_in_volume": {
    "libcst.Annotation": {
     "line number": [
      566,
      570,
      574
     ]
    },
    "libcst.BaseExpression": {
     "line number": [
      567,
      571
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      560
     ]
    },
    "libcst.Param": {
     "line number": [
      568,
      573
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      560,
      566,
      567,
      568,
      570,
      571,
      573,
      574
     ]
    },
    "libcst.metadata.scope_provider.Assignment": {
     "line number": [
      599,
      600,
      601,
      602,
      603
     ]
    },
    "libcst.metadata.scope_provider.FunctionScope": {
     "line number": [
      562
     ]
    },
    "libcst.metadata.scope_provider.GlobalScope": {
     "line number": [
      557
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      549
     ]
    },
    "list": {
     "line number": [
      599,
      600,
      601,
      602,
      603
     ]
    },
    "typing.cast": {
     "line number": [
      599,
      600,
      601,
      602,
      603
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_function_scope": {
  "data": {
   "lineno": 283,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      292
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      292
     ]
    },
    "libcst.metadata.scope_provider.FunctionScope": {
     "line number": [
      296
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      284
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_gen_dotted_names": {
  "data": {
   "lineno": 1244,
   "symbols_in_volume": {
    "libcst.Attribute": {
     "line number": [
      1251,
      1259,
      1261,
      1262
     ]
    },
    "libcst.Call": {
     "line number": [
      1260
     ]
    },
    "libcst.Name": {
     "line number": [
      1245,
      1251,
      1251,
      1263,
      1263,
      1265,
      1269
     ]
    },
    "libcst.metadata.scope_provider._gen_dotted_names": {
     "line number": [
      1245,
      1250,
      1258
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_get_qualified_names_for": {
  "data": {
   "lineno": 698,
   "symbols_in_volume": {
    "libcst.Annotation": {
     "line number": [
      717
     ]
    },
    "libcst.Assign": {
     "line number": [
      747,
      758
     ]
    },
    "libcst.ClassDef": {
     "line number": [
      712
     ]
    },
    "libcst.Expr": {
     "line number": [
      724,
      738
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      713
     ]
    },
    "libcst.Name": {
     "line number": [
      770,
      776
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      724,
      738,
      747,
      758
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      712,
      713,
      717,
      723,
      724,
      737,
      738,
      746,
      747,
      757,
      758
     ]
    },
    "libcst.metadata.scope_provider.FunctionScope": {
     "line number": [
      727
     ]
    },
    "libcst.metadata.scope_provider.GlobalScope": {
     "line number": [
      740
     ]
    },
    "libcst.metadata.scope_provider.QualifiedName": {
     "line number": [
      730,
      734,
      743,
      754,
      765,
      771
     ]
    },
    "libcst.metadata.scope_provider.QualifiedNameSource.BUILTIN": {
     "line number": [
      771
     ]
    },
    "libcst.metadata.scope_provider.QualifiedNameSource.IMPORT": {
     "line number": [
      730,
      734
     ]
    },
    "libcst.metadata.scope_provider.QualifiedNameSource.LOCAL": {
     "line number": [
      743,
      754,
      765
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      699
     ]
    },
    "set": {
     "line number": [
      719,
      777
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_get_qualified_names_for_dotted_imports": {
  "data": {
   "lineno": 845,
   "symbols_in_volume": {
    "libcst.Attribute": {
     "line number": [
      871,
      872
     ]
    },
    "libcst.Call": {
     "line number": [
      856
     ]
    },
    "libcst.Expr": {
     "line number": [
      854
     ]
    },
    "libcst.Import": {
     "line number": [
      869
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      854,
      869
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      852,
      853,
      854,
      868,
      869,
      871,
      872
     ]
    },
    "libcst.metadata.scope_provider.QualifiedName": {
     "line number": [
      861,
      865,
      876,
      880,
      884
     ]
    },
    "libcst.metadata.scope_provider.QualifiedNameSource.IMPORT": {
     "line number": [
      861,
      865,
      876,
      880,
      884
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      846
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_get_qualified_names_for_is_read_only": {
  "data": {
   "lineno": 1229,
   "symbols_in_volume": {
    "len": {
     "line number": [
      1238,
      1239,
      1241,
      1242
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      1230
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_get_qualified_names_for_nested_cases": {
  "data": {
   "lineno": 781,
   "symbols_in_volume": {
    "libcst.ClassDef": {
     "line number": [
      802
     ]
    },
    "libcst.Expr": {
     "line number": [
      811,
      821
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      803,
      819,
      829,
      830
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      811,
      821
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      802,
      803,
      810,
      811,
      819,
      820,
      821,
      829,
      830
     ]
    },
    "libcst.metadata.scope_provider.ClassScope": {
     "line number": [
      805
     ]
    },
    "libcst.metadata.scope_provider.FunctionScope": {
     "line number": [
      814,
      824,
      832,
      839
     ]
    },
    "libcst.metadata.scope_provider.QualifiedName": {
     "line number": [
      808,
      817,
      827,
      835,
      842
     ]
    },
    "libcst.metadata.scope_provider.QualifiedNameSource.LOCAL": {
     "line number": [
      808,
      817,
      827,
      835,
      842
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      782
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_global_contains_is_read_only": {
  "data": {
   "lineno": 1185,
   "symbols_in_volume": {
    "libcst.metadata.scope_provider.GlobalScope": {
     "line number": [
      1186
     ]
    },
    "list": {
     "line number": [
      1187,
      1188,
      1190,
      1191
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_global_scope_overwrites": {
  "data": {
   "lineno": 447,
   "symbols_in_volume": {
    "libcst.ClassDef": {
     "line number": [
      460
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      465
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      460,
      465
     ]
    },
    "libcst.metadata.scope_provider.ClassScope": {
     "line number": [
      462
     ]
    },
    "libcst.metadata.scope_provider.FunctionScope": {
     "line number": [
      467
     ]
    },
    "libcst.metadata.scope_provider.GlobalScope": {
     "line number": [
      457
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      448
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_import": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": {
    "enumerate": {
     "line number": [
      154
     ]
    },
    "isinstance": {
     "line number": [
      150
     ]
    },
    "len": {
     "line number": [
      159
     ]
    },
    "libcst.Import": {
     "line number": [
      146
     ]
    },
    "libcst.ImportStar": {
     "line number": [
      150
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      146,
      168
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      145,
      146,
      168
     ]
    },
    "libcst.metadata.scope_provider.Assignment": {
     "line number": [
      162
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      135
     ]
    },
    "list": {
     "line number": [
      162
     ]
    },
    "typing.cast": {
     "line number": [
      162
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_import_from": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": {
    "isinstance": {
     "line number": [
      255
     ]
    },
    "len": {
     "line number": [
      261,
      278
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      251
     ]
    },
    "libcst.ImportStar": {
     "line number": [
      255
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      251,
      269
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      250,
      251,
      269
     ]
    },
    "libcst.metadata.scope_provider.Assignment": {
     "line number": [
      263
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      241
     ]
    },
    "list": {
     "line number": [
      263
     ]
    },
    "typing.cast": {
     "line number": [
      263
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_keyword_arg_in_call": {
  "data": {
   "lineno": 1176,
   "symbols_in_volume": {
    "len": {
     "line number": [
      1183
     ]
    },
    "libcst.Expr": {
     "line number": [
      1179
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      1179
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      1178,
      1179
     ]
    },
    "libcst.metadata.scope_provider.GlobalScope": {
     "line number": [
      1182
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      1177
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_lambda_param_scope": {
  "data": {
   "lineno": 605,
   "symbols_in_volume": {
    "libcst.BaseExpression": {
     "line number": [
      624,
      627
     ]
    },
    "libcst.Expr": {
     "line number": [
      616
     ]
    },
    "libcst.Lambda": {
     "line number": [
      618
     ]
    },
    "libcst.Param": {
     "line number": [
      625,
      629
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      616
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      614,
      615,
      616,
      624,
      625,
      627,
      629
     ]
    },
    "libcst.metadata.scope_provider.Assignment": {
     "line number": [
      650,
      651,
      652,
      653,
      654
     ]
    },
    "libcst.metadata.scope_provider.FunctionScope": {
     "line number": [
      621
     ]
    },
    "libcst.metadata.scope_provider.GlobalScope": {
     "line number": [
      612
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      606
     ]
    },
    "list": {
     "line number": [
      650,
      651,
      652,
      653,
      654
     ]
    },
    "typing.cast": {
     "line number": [
      650,
      651,
      652,
      653,
      654
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_local_scope_shadowing_with_functions": {
  "data": {
   "lineno": 522,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      534,
      541
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      534,
      541
     ]
    },
    "libcst.metadata.scope_provider.Assignment": {
     "line number": [
      539,
      546
     ]
    },
    "libcst.metadata.scope_provider.FunctionScope": {
     "line number": [
      536,
      543
     ]
    },
    "libcst.metadata.scope_provider.GlobalScope": {
     "line number": [
      531
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      523
     ]
    },
    "list": {
     "line number": [
      538,
      545
     ]
    },
    "typing.cast": {
     "line number": [
      539,
      546
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_multiple_assignments": {
  "data": {
   "lineno": 887,
   "symbols_in_volume": {
    "libcst.Expr": {
     "line number": [
      898
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      898
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      897,
      898
     ]
    },
    "libcst.metadata.scope_provider.GlobalScope": {
     "line number": [
      901
     ]
    },
    "libcst.metadata.scope_provider.QualifiedName": {
     "line number": [
      905,
      906,
      912,
      913
     ]
    },
    "libcst.metadata.scope_provider.QualifiedNameSource.IMPORT": {
     "line number": [
      905,
      906,
      912,
      913
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      888
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_nested_comprehension_scope": {
  "data": {
   "lineno": 417,
   "symbols_in_volume": {
    "libcst.CompFor": {
     "line number": [
      442
     ]
    },
    "libcst.Expr": {
     "line number": [
      428
     ]
    },
    "libcst.ListComp": {
     "line number": [
      430
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      428
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      426,
      427,
      428,
      442
     ]
    },
    "libcst.metadata.scope_provider.ComprehensionScope": {
     "line number": [
      433
     ]
    },
    "libcst.metadata.scope_provider.GlobalScope": {
     "line number": [
      424
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      418
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_node_of_scopes": {
  "data": {
   "lineno": 1066,
   "symbols_in_volume": {
    "libcst.Assign": {
     "line number": [
      1085
     ]
    },
    "libcst.ClassDef": {
     "line number": [
      1083
     ]
    },
    "libcst.Expr": {
     "line number": [
      1078
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      1076
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      1078,
      1085
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      1076,
      1077,
      1078,
      1083,
      1084,
      1085
     ]
    },
    "libcst.metadata.scope_provider.ClassScope": {
     "line number": [
      1088,
      1089
     ]
    },
    "libcst.metadata.scope_provider.FunctionScope": {
     "line number": [
      1081,
      1082
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      1067
     ]
    },
    "typing.cast": {
     "line number": [
      1082,
      1089
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_nonlocal_scope_overwrites": {
  "data": {
   "lineno": 471,
   "symbols_in_volume": {
    "len": {
     "line number": [
      495,
      510
     ]
    },
    "libcst.Assign": {
     "line number": [
      490,
      505
     ]
    },
    "libcst.ClassDef": {
     "line number": [
      497
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      487,
      502
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      489,
      504
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      487,
      488,
      489,
      497,
      502,
      503,
      504
     ]
    },
    "libcst.metadata.scope_provider.Assignment": {
     "line number": [
      513
     ]
    },
    "libcst.metadata.scope_provider.ClassScope": {
     "line number": [
      499
     ]
    },
    "libcst.metadata.scope_provider.FunctionScope": {
     "line number": [
      493,
      508
     ]
    },
    "libcst.metadata.scope_provider.GlobalScope": {
     "line number": [
      484
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      472
     ]
    },
    "typing.cast": {
     "line number": [
      513
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_not_in_scope": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": {
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      47
     ]
    },
    "set": {
     "line number": [
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_self": {
  "data": {
   "lineno": 1225,
   "symbols_in_volume": {
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      1227
     ]
    },
    "open": {
     "line number": [
      1226
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_with_asname": {
  "data": {
   "lineno": 681,
   "symbols_in_volume": {
    "libcst.AsName": {
     "line number": [
      694
     ]
    },
    "libcst.With": {
     "line number": [
      694
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      693,
      694
     ]
    },
    "libcst.metadata.scope_provider.Assignment": {
     "line number": [
      692
     ]
    },
    "libcst.metadata.scope_provider.GlobalScope": {
     "line number": [
      689
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      682
     ]
    },
    "list": {
     "line number": [
      692
     ]
    },
    "typing.cast": {
     "line number": [
      692
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.ScopeProviderTest.test_with_statement": {
  "data": {
   "lineno": 1091,
   "symbols_in_volume": {
    "len": {
     "line number": [
      1104
     ]
    },
    "libcst.Expr": {
     "line number": [
      1117
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      1102,
      1117
     ]
    },
    "libcst.With": {
     "line number": [
      1106
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      1102,
      1106,
      1116,
      1117
     ]
    },
    "libcst.metadata.scope_provider.Assignment": {
     "line number": [
      1105
     ]
    },
    "libcst.metadata.scope_provider.QualifiedName": {
     "line number": [
      1111,
      1121
     ]
    },
    "libcst.metadata.scope_provider.QualifiedNameSource.IMPORT": {
     "line number": [
      1112,
      1121
     ]
    },
    "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
     "line number": [
      1092
     ]
    },
    "list": {
     "line number": [
      1105
     ]
    },
    "typing.cast": {
     "line number": [
      1105
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_scope_provider.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_scope_provider.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_scope_provider._gen_dotted_names": {
  "data": {
   "shadows": "libcst.metadata.scope_provider._gen_dotted_names"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_scope_provider.cast": {
  "data": {
   "shadows": "typing.cast"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_scope_provider.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_scope_provider.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_scope_provider.dedent": {
  "data": {
   "shadows": "textwrap.dedent"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_scope_provider.ensure_type": {
  "data": {
   "shadows": "libcst.ensure_type"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_scope_provider.get_scope_metadata_provider": {
  "data": {
   "lineno": 33,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      40,
      35
     ]
    },
    "libcst.Module": {
     "line number": [
      35
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      36
     ]
    },
    "libcst.metadata.scope_provider.Scope": {
     "line number": [
      40,
      35
     ]
    },
    "libcst.metadata.scope_provider.ScopeProvider": {
     "line number": [
      40
     ]
    },
    "libcst.parse_module": {
     "line number": [
      36
     ]
    },
    "str": {
     "line number": [
      34
     ]
    },
    "textwrap.dedent": {
     "line number": [
      36
     ]
    },
    "typing.Mapping": {
     "line number": [
      40,
      35
     ]
    },
    "typing.Tuple": {
     "line number": [
      35
     ]
    },
    "typing.cast": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_span_provider": {
  "data": {},
  "type": "module"
 },
 "libcst.metadata.tests.test_span_provider.ByteSpanPositionProvider": {
  "data": {
   "shadows": "libcst.metadata.span_provider.ByteSpanPositionProvider"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_span_provider.ByteSpanPositionProviderTest": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      78
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_span_provider.ByteSpanPositionProviderTest.test_batchable_provider": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "SomeVisitor": {
     "line number": [
      107
     ]
    },
    "libcst.MetadataWrapper": {
     "line number": [
      106
     ]
    },
    "libcst.parse_module": {
     "line number": [
      106
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_span_provider.ByteSpanPositionProviderTest.test_batchable_provider.SomeVisitor": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "libcst.BatchableCSTVisitor": {
     "line number": [
      97
     ]
    },
    "libcst.metadata.span_provider.ByteSpanPositionProvider": {
     "line number": [
      98
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_span_provider.ByteSpanPositionProviderTest.test_batchable_provider.SomeVisitor.visit_Pass": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      100
     ]
    },
    "libcst.metadata.span_provider.ByteSpanPositionProvider": {
     "line number": [
      102
     ]
    },
    "libcst.metadata.span_provider.CodeSpan": {
     "line number": [
      103
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_span_provider.ByteSpanPositionProviderTest.test_visitor_provider": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "SomeVisitor": {
     "line number": [
      92
     ]
    },
    "libcst.MetadataWrapper": {
     "line number": [
      91
     ]
    },
    "libcst.parse_module": {
     "line number": [
      91
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_span_provider.ByteSpanPositionProviderTest.test_visitor_provider.SomeVisitor": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": {
    "libcst.CSTVisitor": {
     "line number": [
      82
     ]
    },
    "libcst.metadata.span_provider.ByteSpanPositionProvider": {
     "line number": [
      83
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_span_provider.ByteSpanPositionProviderTest.test_visitor_provider.SomeVisitor.visit_Pass": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      85
     ]
    },
    "libcst.metadata.span_provider.ByteSpanPositionProvider": {
     "line number": [
      87
     ]
    },
    "libcst.metadata.span_provider.CodeSpan": {
     "line number": [
      88
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_span_provider.CodeSpan": {
  "data": {
   "shadows": "libcst.metadata.span_provider.CodeSpan"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_span_provider.SpanProvidingCodegenState": {
  "data": {
   "shadows": "libcst.metadata.span_provider.SpanProvidingCodegenState"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_span_provider.SpanProvidingCodegenStateTest": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_span_provider.SpanProvidingCodegenStateTest.test_add_indent_tokens": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "libcst.metadata.span_provider.ByteSpanPositionProvider": {
     "line number": [
      52
     ]
    },
    "libcst.metadata.span_provider.SpanProvidingCodegenState": {
     "line number": [
      48
     ]
    },
    "libcst.metadata.span_provider.byte_length_in_utf8": {
     "line number": [
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_span_provider.SpanProvidingCodegenStateTest.test_add_non_ascii_token": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "libcst.metadata.span_provider.ByteSpanPositionProvider": {
     "line number": [
      42
     ]
    },
    "libcst.metadata.span_provider.SpanProvidingCodegenState": {
     "line number": [
      38
     ]
    },
    "libcst.metadata.span_provider.byte_length_in_utf8": {
     "line number": [
      41
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_span_provider.SpanProvidingCodegenStateTest.test_add_token": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "libcst.metadata.span_provider.ByteSpanPositionProvider": {
     "line number": [
      32
     ]
    },
    "libcst.metadata.span_provider.SpanProvidingCodegenState": {
     "line number": [
      28
     ]
    },
    "libcst.metadata.span_provider.byte_length_in_utf8": {
     "line number": [
      31
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_span_provider.SpanProvidingCodegenStateTest.test_initial_position": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "libcst.metadata.span_provider.ByteSpanPositionProvider": {
     "line number": [
      23
     ]
    },
    "libcst.metadata.span_provider.SpanProvidingCodegenState": {
     "line number": [
      19
     ]
    },
    "libcst.metadata.span_provider.byte_length_in_utf8": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_span_provider.SpanProvidingCodegenStateTest.test_span": {
  "data": {
   "lineno": 58,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      59
     ]
    },
    "libcst.metadata.span_provider.ByteSpanPositionProvider": {
     "line number": [
      64
     ]
    },
    "libcst.metadata.span_provider.SpanProvidingCodegenState": {
     "line number": [
      60
     ]
    },
    "libcst.metadata.span_provider.byte_length_in_utf8": {
     "line number": [
      63
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_span_provider.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_span_provider.byte_length_in_utf8": {
  "data": {
   "shadows": "libcst.metadata.span_provider.byte_length_in_utf8"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_span_provider.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_type_inference_provider": {
  "data": {},
  "type": "module"
 },
 "libcst.metadata.tests.test_type_inference_provider.MetadataWrapper": {
  "data": {
   "shadows": "libcst.MetadataWrapper"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_type_inference_provider.Path": {
  "data": {
   "shadows": "pathlib.Path"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_type_inference_provider.PyreData": {
  "data": {
   "shadows": "libcst.metadata.type_inference_provider.PyreData"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_type_inference_provider.TEST_SUITE_PATH": {
  "data": {
   "shadows": "libcst.tests.test_pyre_integration.TEST_SUITE_PATH"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_type_inference_provider.TypeInferenceProvider": {
  "data": {
   "shadows": "libcst.metadata.type_inference_provider.TypeInferenceProvider"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_type_inference_provider.TypeInferenceProviderTest": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.tests.test_type_inference_provider.TypeInferenceProviderTest.test_simple_class_types": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "libcst.MetadataWrapper": {
     "line number": [
      61
     ]
    },
    "libcst.metadata.tests.test_type_inference_provider._test_simple_class_helper": {
     "line number": [
      68
     ]
    },
    "libcst.metadata.tests.test_type_inference_provider.json": {
     "line number": [
      60
     ]
    },
    "libcst.metadata.type_inference_provider.PyreData": {
     "line number": [
      60
     ]
    },
    "libcst.metadata.type_inference_provider.TypeInferenceProvider": {
     "line number": [
      66
     ]
    },
    "libcst.parse_module": {
     "line number": [
      62
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      56
     ]
    },
    "libcst.tests.test_pyre_integration.TEST_SUITE_PATH": {
     "line number": [
      57,
      57
     ]
    },
    "pathlib.Path": {
     "line number": [
      59,
      59
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_type_inference_provider.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_type_inference_provider._test_simple_class_helper": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": {
    "libcst.AnnAssign": {
     "line number": [
      28,
      47
     ]
    },
    "libcst.Assign": {
     "line number": [
      42
     ]
    },
    "libcst.Attribute": {
     "line number": [
      30
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      24
     ]
    },
    "libcst.IndentedBlock": {
     "line number": [
      23
     ]
    },
    "libcst.MetadataWrapper": {
     "line number": [
      17
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      26,
      42,
      47
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      20,
      21,
      22,
      23,
      30,
      41,
      42,
      46,
      47
     ]
    },
    "libcst.metadata.type_inference_provider.TypeInferenceProvider": {
     "line number": [
      18
     ]
    },
    "libcst.testing.utils.UnitTest": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.tests.test_type_inference_provider.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_type_inference_provider.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst.metadata.tests.test_type_inference_provider.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "libcst.metadata.type_inference_provider": {
  "data": {},
  "type": "module"
 },
 "libcst.metadata.type_inference_provider.BatchableMetadataProvider": {
  "data": {
   "shadows": "libcst.metadata.base_provider.BatchableMetadataProvider"
  },
  "type": "import"
 },
 "libcst.metadata.type_inference_provider.CodePosition": {
  "data": {
   "shadows": "libcst._position.CodePosition"
  },
  "type": "import"
 },
 "libcst.metadata.type_inference_provider.CodeRange": {
  "data": {
   "shadows": "libcst._position.CodeRange"
  },
  "type": "import"
 },
 "libcst.metadata.type_inference_provider.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "libcst.metadata.type_inference_provider.InferredType": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": {
    "libcst.metadata.type_inference_provider.Location": {
     "line number": [
      31
     ]
    },
    "mypy_extensions.TypedDict": {
     "line number": [
      30
     ]
    },
    "str": {
     "line number": [
      32
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.type_inference_provider.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.metadata.type_inference_provider.Location": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "libcst.metadata.type_inference_provider.Position": {
     "line number": [
      26,
      27
     ]
    },
    "mypy_extensions.TypedDict": {
     "line number": [
      24
     ]
    },
    "str": {
     "line number": [
      25
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.type_inference_provider.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "libcst.metadata.type_inference_provider.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.metadata.type_inference_provider.Path": {
  "data": {
   "shadows": "pathlib.Path"
  },
  "type": "import"
 },
 "libcst.metadata.type_inference_provider.Position": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "int": {
     "line number": [
      20,
      21
     ]
    },
    "mypy_extensions.TypedDict": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.type_inference_provider.PositionProvider": {
  "data": {
   "shadows": "libcst.metadata.position_provider.PositionProvider"
  },
  "type": "import"
 },
 "libcst.metadata.type_inference_provider.PyreData": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "libcst.metadata.type_inference_provider.InferredType": {
     "line number": [
      36
     ]
    },
    "mypy_extensions.TypedDict": {
     "line number": [
      35
     ]
    },
    "typing.Sequence": {
     "line number": [
      36
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.type_inference_provider.RawPyreData": {
  "data": {
   "lineno": 112,
   "symbols_in_volume": {
    "libcst.metadata.type_inference_provider.InferredType": {
     "line number": [
      114
     ]
    },
    "mypy_extensions.TypedDict": {
     "line number": [
      112
     ]
    },
    "str": {
     "line number": [
      113
     ]
    },
    "typing.Sequence": {
     "line number": [
      114
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.type_inference_provider.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst.metadata.type_inference_provider.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst.metadata.type_inference_provider.TypeInferenceProvider": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "libcst.metadata.base_provider.BatchableMetadataProvider": {
     "line number": [
      39
     ]
    },
    "libcst.metadata.position_provider.PositionProvider": {
     "line number": [
      53
     ]
    },
    "str": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.type_inference_provider.TypeInferenceProvider.__init__": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": {
    "libcst._position.CodePosition": {
     "line number": [
      83,
      84
     ]
    },
    "libcst._position.CodeRange": {
     "line number": [
      76,
      82,
      87
     ]
    },
    "libcst.metadata.type_inference_provider.PyreData": {
     "line number": [
      74
     ]
    },
    "str": {
     "line number": [
      76,
      87
     ]
    },
    "super": {
     "line number": [
      75
     ]
    },
    "typing.Dict": {
     "line number": [
      76,
      87
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.type_inference_provider.TypeInferenceProvider._parse_metadata": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      89
     ]
    },
    "libcst.metadata.position_provider.PositionProvider": {
     "line number": [
      90
     ]
    },
    "range": {
     "line number": [
      90,
      91,
      92
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.type_inference_provider.TypeInferenceProvider.gen_cache": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      67,
      70,
      71
     ]
    },
    "int": {
     "line number": [
      57
     ]
    },
    "libcst.metadata.type_inference_provider._process_pyre_data": {
     "line number": [
      72
     ]
    },
    "libcst.metadata.type_inference_provider.json": {
     "line number": [
      69
     ]
    },
    "libcst.metadata.type_inference_provider.run_command": {
     "line number": [
      62
     ]
    },
    "libcst.metadata.type_inference_provider.subprocess": {
     "line number": [
      63
     ]
    },
    "object": {
     "line number": [
      58
     ]
    },
    "pathlib.Path": {
     "line number": [
      57
     ]
    },
    "staticmethod": {
     "line number": [
      55
     ]
    },
    "str": {
     "line number": [
      57,
      58
     ]
    },
    "typing.List": {
     "line number": [
      57
     ]
    },
    "typing.Mapping": {
     "line number": [
      58
     ]
    },
    "typing.Optional": {
     "line number": [
      57
     ]
    },
    "zip": {
     "line number": [
      72
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.type_inference_provider.TypeInferenceProvider.visit_Attribute": {
  "data": {
   "lineno": 97,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      97
     ]
    },
    "libcst.Attribute": {
     "line number": [
      97
     ]
    },
    "typing.Optional": {
     "line number": [
      97
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.type_inference_provider.TypeInferenceProvider.visit_Call": {
  "data": {
   "lineno": 100,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      100
     ]
    },
    "libcst.Call": {
     "line number": [
      100
     ]
    },
    "typing.Optional": {
     "line number": [
      100
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.type_inference_provider.TypeInferenceProvider.visit_Name": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      94
     ]
    },
    "libcst.Name": {
     "line number": [
      94
     ]
    },
    "typing.Optional": {
     "line number": [
      94
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.type_inference_provider.TypedDict": {
  "data": {
   "shadows": "mypy_extensions.TypedDict"
  },
  "type": "import"
 },
 "libcst.metadata.type_inference_provider._process_pyre_data": {
  "data": {
   "lineno": 117,
   "symbols_in_volume": {
    "libcst.metadata.type_inference_provider.PyreData": {
     "line number": [
      117
     ]
    },
    "libcst.metadata.type_inference_provider.RawPyreData": {
     "line number": [
      117
     ]
    },
    "sorted": {
     "line number": [
      118
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.type_inference_provider._sort_by_position": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": {
    "int": {
     "line number": [
      121,
      121,
      121,
      121
     ]
    },
    "libcst.metadata.type_inference_provider.InferredType": {
     "line number": [
      121
     ]
    },
    "typing.Tuple": {
     "line number": [
      121
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.type_inference_provider.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.metadata.type_inference_provider.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "libcst.metadata.type_inference_provider.run_command": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "int": {
     "line number": [
      104,
      104
     ]
    },
    "libcst.metadata.type_inference_provider.subprocess": {
     "line number": [
      105,
      106,
      106
     ]
    },
    "str": {
     "line number": [
      104,
      104,
      104
     ]
    },
    "typing.Optional": {
     "line number": [
      104
     ]
    },
    "typing.Tuple": {
     "line number": [
      104
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.type_inference_provider.subprocess": {
  "data": {
   "shadows": "subprocess"
  },
  "type": "import"
 },
 "libcst.metadata.wrapper": {
  "data": {
   "symbols_in_volume": {
    "typing.TYPE_CHECKING": {
     "line number": [
      29
     ]
    },
    "typing.TypeVar": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst.metadata.wrapper.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst.metadata.wrapper.BaseMetadataProvider": {
  "data": {
   "shadows": "libcst.metadata.base_provider.BaseMetadataProvider"
  },
  "type": "import"
 },
 "libcst.metadata.wrapper.BatchableCSTVisitor": {
  "data": {
   "shadows": "libcst._batched_visitor.BatchableCSTVisitor"
  },
  "type": "import"
 },
 "libcst.metadata.wrapper.BatchableMetadataProvider": {
  "data": {
   "shadows": "libcst.metadata.base_provider.BatchableMetadataProvider"
  },
  "type": "import"
 },
 "libcst.metadata.wrapper.CSTNode": {
  "data": {
   "shadows": "libcst._nodes.base.CSTNode"
  },
  "type": "import"
 },
 "libcst.metadata.wrapper.CSTVisitorT": {
  "data": {
   "shadows": "libcst._visitors.CSTVisitorT"
  },
  "type": "import"
 },
 "libcst.metadata.wrapper.Collection": {
  "data": {
   "shadows": "typing.Collection"
  },
  "type": "import"
 },
 "libcst.metadata.wrapper.ExitStack": {
  "data": {
   "shadows": "contextlib.ExitStack"
  },
  "type": "import"
 },
 "libcst.metadata.wrapper.Iterable": {
  "data": {
   "shadows": "typing.Iterable"
  },
  "type": "import"
 },
 "libcst.metadata.wrapper.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "libcst.metadata.wrapper.MappingProxyType": {
  "data": {
   "shadows": "types.MappingProxyType"
  },
  "type": "import"
 },
 "libcst.metadata.wrapper.MetadataException": {
  "data": {
   "shadows": "libcst._exceptions.MetadataException"
  },
  "type": "import"
 },
 "libcst.metadata.wrapper.MetadataWrapper": {
  "data": {
   "lineno": 111,
   "symbols_in_volume": {
    "object": {
     "line number": [
      128,
      129
     ]
    },
    "typing.Mapping": {
     "line number": [
      128,
      129
     ]
    },
    "typing.MutableMapping": {
     "line number": [
      128
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.metadata.wrapper.MetadataWrapper.__init__": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      134
     ]
    },
    "object": {
     "line number": [
      135
     ]
    },
    "typing.Mapping": {
     "line number": [
      135
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.wrapper.MetadataWrapper.__repr__": {
  "data": {
   "lineno": 153,
   "symbols_in_volume": {
    "libcst.metadata.wrapper.textwrap": {
     "line number": [
      154
     ]
    },
    "repr": {
     "line number": [
      154
     ]
    },
    "str": {
     "line number": [
      153
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.wrapper.MetadataWrapper.module": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": {
    "property": {
     "line number": [
      156
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.wrapper.MetadataWrapper.resolve": {
  "data": {
   "lineno": 172,
   "symbols_in_volume": {
    "libcst.metadata.wrapper._T": {
     "line number": [
      184,
      174
     ]
    },
    "typing.Mapping": {
     "line number": [
      184,
      174
     ]
    },
    "typing.Type": {
     "line number": [
      173
     ]
    },
    "typing.cast": {
     "line number": [
      184
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.wrapper.MetadataWrapper.resolve_many": {
  "data": {
   "lineno": 186,
   "symbols_in_volume": {
    "libcst.metadata.wrapper._resolve_impl": {
     "line number": [
      196
     ]
    },
    "object": {
     "line number": [
      188
     ]
    },
    "typing.Collection": {
     "line number": [
      187
     ]
    },
    "typing.Mapping": {
     "line number": [
      188,
      188
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.wrapper.MetadataWrapper.visit": {
  "data": {
   "lineno": 201
  },
  "type": "function"
 },
 "libcst.metadata.wrapper.MetadataWrapper.visit_batched": {
  "data": {
   "lineno": 209,
   "symbols_in_volume": {
    "contextlib.ExitStack": {
     "line number": [
      219
     ]
    },
    "libcst._batched_visitor.BatchableCSTVisitor": {
     "line number": [
      211
     ]
    },
    "libcst._batched_visitor.VisitorMethod": {
     "line number": [
      212,
      213
     ]
    },
    "libcst._batched_visitor.visit_batched": {
     "line number": [
      224
     ]
    },
    "typing.Iterable": {
     "line number": [
      211
     ]
    },
    "typing.Optional": {
     "line number": [
      212,
      213
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.wrapper.Module": {
  "data": {
   "shadows": "libcst._nodes.module.Module"
  },
  "type": "import"
 },
 "libcst.metadata.wrapper.MutableMapping": {
  "data": {
   "shadows": "typing.MutableMapping"
  },
  "type": "import"
 },
 "libcst.metadata.wrapper.MutableSet": {
  "data": {
   "shadows": "typing.MutableSet"
  },
  "type": "import"
 },
 "libcst.metadata.wrapper.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.metadata.wrapper.ProviderT": {
  "data": {
   "shadows": "libcst.metadata.base_provider.ProviderT"
  },
  "type": "import"
 },
 "libcst.metadata.wrapper.TYPE_CHECKING": {
  "data": {
   "shadows": "typing.TYPE_CHECKING"
  },
  "type": "import"
 },
 "libcst.metadata.wrapper.Type": {
  "data": {
   "shadows": "typing.Type"
  },
  "type": "import"
 },
 "libcst.metadata.wrapper.TypeVar": {
  "data": {
   "shadows": "typing.TypeVar"
  },
  "type": "import"
 },
 "libcst.metadata.wrapper.VisitorMethod": {
  "data": {
   "shadows": "libcst._batched_visitor.VisitorMethod"
  },
  "type": "import"
 },
 "libcst.metadata.wrapper._T": {
  "data": {
   "lineno": 39
  },
  "type": "constant"
 },
 "libcst.metadata.wrapper._gather_providers": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "typing.Collection": {
     "line number": [
      58
     ]
    },
    "typing.MutableSet": {
     "line number": [
      58,
      59
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.wrapper._gen_batchable": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      54
     ]
    },
    "libcst.metadata.base_provider.BatchableMetadataProvider": {
     "line number": [
      45
     ]
    },
    "object": {
     "line number": [
      46
     ]
    },
    "type": {
     "line number": [
      54
     ]
    },
    "types.MappingProxyType": {
     "line number": [
      54
     ]
    },
    "typing.Any": {
     "line number": [
      45
     ]
    },
    "typing.Iterable": {
     "line number": [
      45
     ]
    },
    "typing.Mapping": {
     "line number": [
      46,
      46
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.wrapper._resolve_impl": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "P": {
     "line number": [
      90,
      90,
      92,
      94,
      105
     ]
    },
    "P.__name__": {
     "line number": [
      105
     ]
    },
    "issubclass": {
     "line number": [
      86
     ]
    },
    "len": {
     "line number": [
      81,
      103,
      103
     ]
    },
    "libcst._exceptions.MetadataException": {
     "line number": [
      106
     ]
    },
    "libcst.metadata.base_provider.BatchableMetadataProvider": {
     "line number": [
      86
     ]
    },
    "libcst.metadata.wrapper._gather_providers": {
     "line number": [
      78
     ]
    },
    "libcst.metadata.wrapper._gen_batchable": {
     "line number": [
      99
     ]
    },
    "p": {
     "line number": [
      97,
      97,
      97,
      97
     ]
    },
    "set": {
     "line number": [
      77,
      77,
      78,
      80,
      82,
      85
     ]
    },
    "typing.Collection": {
     "line number": [
      71
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.metadata.wrapper.cast": {
  "data": {
   "shadows": "typing.cast"
  },
  "type": "import"
 },
 "libcst.metadata.wrapper.textwrap": {
  "data": {
   "shadows": "textwrap"
  },
  "type": "import"
 },
 "libcst.metadata.wrapper.visit_batched": {
  "data": {
   "shadows": "libcst._batched_visitor.visit_batched"
  },
  "type": "import"
 },
 "libcst.parse_expression": {
  "data": {
   "shadows": "libcst._parser.entrypoints.parse_expression"
  },
  "type": "import"
 },
 "libcst.parse_module": {
  "data": {
   "shadows": "libcst._parser.entrypoints.parse_module"
  },
  "type": "import"
 },
 "libcst.parse_statement": {
  "data": {
   "shadows": "libcst._parser.entrypoints.parse_statement"
  },
  "type": "import"
 },
 "libcst.testing": {
  "data": {},
  "type": "module"
 },
 "libcst.testing.utils": {
  "data": {
   "symbols_in_volume": {
    "libcst.testing.utils.TestCaseType": {
     "line number": [
      146,
      146
     ]
    },
    "object": {
     "line number": [
      144,
      144
     ]
    },
    "str": {
     "line number": [
      144,
      146
     ]
    },
    "typing.Iterable": {
     "line number": [
      146
     ]
    },
    "typing.Mapping": {
     "line number": [
      144,
      146
     ]
    },
    "typing.Sequence": {
     "line number": [
      144
     ]
    },
    "typing.TypeVar": {
     "line number": [
      32
     ]
    },
    "typing.Union": {
     "line number": [
      144,
      146
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst.testing.utils.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst.testing.utils.BaseTestMeta": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": {
    "type": {
     "line number": [
      167
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.testing.utils.BaseTestMeta.__new__": {
  "data": {
   "lineno": 168,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      171
     ]
    },
    "libcst.testing.utils.populate_data_provider_tests": {
     "line number": [
      170
     ]
    },
    "libcst.testing.utils.validate_provider_tests": {
     "line number": [
      169
     ]
    },
    "object": {
     "line number": [
      168
     ]
    },
    "str": {
     "line number": [
      168,
      168
     ]
    },
    "super": {
     "line number": [
      171
     ]
    },
    "type": {
     "line number": [
      168
     ]
    },
    "typing.Any": {
     "line number": [
      168
     ]
    },
    "typing.Dict": {
     "line number": [
      168
     ]
    },
    "typing.Tuple": {
     "line number": [
      168
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.testing.utils.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst.testing.utils.DATA_PROVIDER_DATA_ATTR_NAME": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "libcst.testing.utils.DATA_PROVIDER_DESCRIPTION_PREFIX": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "libcst.testing.utils.DEFAULT_TEST_LIMIT": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "libcst.testing.utils.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "libcst.testing.utils.Iterable": {
  "data": {
   "shadows": "typing.Iterable"
  },
  "type": "import"
 },
 "libcst.testing.utils.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.testing.utils.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "libcst.testing.utils.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.testing.utils.PROVIDER_TEST_LIMIT_ATTR_NAME": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "libcst.testing.utils.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst.testing.utils.StaticDataType": {
  "data": {
   "lineno": 146
  },
  "type": "constant"
 },
 "libcst.testing.utils.T": {
  "data": {
   "lineno": 32
  },
  "type": "constant"
 },
 "libcst.testing.utils.TestCase": {
  "data": {
   "shadows": "unittest.TestCase"
  },
  "type": "import"
 },
 "libcst.testing.utils.TestCaseType": {
  "data": {
   "lineno": 144
  },
  "type": "constant"
 },
 "libcst.testing.utils.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst.testing.utils.TypeVar": {
  "data": {
   "shadows": "typing.TypeVar"
  },
  "type": "import"
 },
 "libcst.testing.utils.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.testing.utils.UnitTest": {
  "data": {
   "lineno": 174,
   "symbols_in_volume": {
    "libcst.testing.utils.BaseTestMeta": {
     "line number": [
      174
     ]
    },
    "unittest.TestCase": {
     "line number": [
      174
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.testing.utils.data_provider": {
  "data": {
   "lineno": 149,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      155
     ]
    },
    "int": {
     "line number": [
      150
     ]
    },
    "isinstance": {
     "line number": [
      155
     ]
    },
    "libcst.testing.utils.DEFAULT_TEST_LIMIT": {
     "line number": [
      150
     ]
    },
    "libcst.testing.utils.StaticDataType": {
     "line number": [
      150
     ]
    },
    "list": {
     "line number": [
      155,
      156
     ]
    },
    "tuple": {
     "line number": [
      155
     ]
    },
    "typing.Callable": {
     "line number": [
      151,
      151,
      151
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.testing.utils.data_provider.test_decorator": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": {
    "libcst.testing.utils.DATA_PROVIDER_DATA_ATTR_NAME": {
     "line number": [
      161
     ]
    },
    "libcst.testing.utils.update_test_limit": {
     "line number": [
      159
     ]
    },
    "setattr": {
     "line number": [
      161
     ]
    },
    "typing.Callable": {
     "line number": [
      158,
      158
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.testing.utils.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "libcst.testing.utils.none_throws": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "libcst.testing.utils.T": {
     "line number": [
      35,
      35
     ]
    },
    "str": {
     "line number": [
      35
     ]
    },
    "typing.Optional": {
     "line number": [
      35
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.testing.utils.populate_data_provider_tests": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "ValueError": {
     "line number": [
      96
     ]
    },
    "dict": {
     "line number": [
      71,
      74
     ]
    },
    "enumerate": {
     "line number": [
      72
     ]
    },
    "isinstance": {
     "line number": [
      71,
      74
     ]
    },
    "libcst.testing.utils.DATA_PROVIDER_DATA_ATTR_NAME": {
     "line number": [
      65
     ]
    },
    "libcst.testing.utils.DATA_PROVIDER_DESCRIPTION_PREFIX": {
     "line number": [
      75
     ]
    },
    "libcst.testing.utils.re": {
     "line number": [
      77
     ]
    },
    "libcst.testing.utils.try_get_provider_attr": {
     "line number": [
      64
     ]
    },
    "str": {
     "line number": [
      60,
      61,
      62,
      78
     ]
    },
    "typing.Any": {
     "line number": [
      60
     ]
    },
    "typing.Callable": {
     "line number": [
      61
     ]
    },
    "typing.Dict": {
     "line number": [
      60,
      61
     ]
    },
    "typing.List": {
     "line number": [
      62
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.testing.utils.populate_data_provider_tests.new_test": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": {
    "dict": {
     "line number": [
      87
     ]
    },
    "functools.wraps": {
     "line number": [
      81
     ]
    },
    "isinstance": {
     "line number": [
      87
     ]
    },
    "member": {
     "line number": [
      88,
      90,
      81
     ]
    },
    "object": {
     "line number": [
      83,
      84,
      85,
      86
     ]
    },
    "typing.Callable": {
     "line number": [
      85
     ]
    },
    "typing.Iterable": {
     "line number": [
      84
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.testing.utils.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "libcst.testing.utils.try_get_provider_attr": {
  "data": {
   "lineno": 52,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      56
     ]
    },
    "libcst.testing.utils.inspect": {
     "line number": [
      55
     ]
    },
    "str": {
     "line number": [
      53,
      53
     ]
    },
    "typing.Any": {
     "line number": [
      53,
      54
     ]
    },
    "typing.Optional": {
     "line number": [
      54
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.testing.utils.update_test_limit": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "getattr": {
     "line number": [
      44
     ]
    },
    "int": {
     "line number": [
      40
     ]
    },
    "libcst.testing.utils.PROVIDER_TEST_LIMIT_ATTR_NAME": {
     "line number": [
      45,
      48
     ]
    },
    "max": {
     "line number": [
      48
     ]
    },
    "setattr": {
     "line number": [
      47
     ]
    },
    "typing.Any": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.testing.utils.validate_provider_tests": {
  "data": {
   "lineno": 107,
   "symbols_in_volume": {
    "len": {
     "line number": [
      118
     ]
    },
    "libcst.testing.utils.DATA_PROVIDER_DATA_ATTR_NAME": {
     "line number": [
      116
     ]
    },
    "libcst.testing.utils.PROVIDER_TEST_LIMIT_ATTR_NAME": {
     "line number": [
      112
     ]
    },
    "libcst.testing.utils.try_get_provider_attr": {
     "line number": [
      111,
      115
     ]
    },
    "member": {
     "line number": [
      110,
      112,
      116
     ]
    },
    "str": {
     "line number": [
      107
     ]
    },
    "typing.Any": {
     "line number": [
      107
     ]
    },
    "typing.Dict": {
     "line number": [
      107
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.testing.utils.validate_provider_tests.test_replacement": {
  "data": {
   "lineno": 123,
   "symbols_in_volume": {
    "AssertionError": {
     "line number": [
      129
     ]
    },
    "typing.Any": {
     "line number": [
      124,
      125,
      126,
      127
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.testing.utils.wraps": {
  "data": {
   "shadows": "functools.wraps"
  },
  "type": "import"
 },
 "libcst.tests": {
  "data": {},
  "type": "module"
 },
 "libcst.tests.test_batched_visitor": {
  "data": {},
  "type": "module"
 },
 "libcst.tests.test_batched_visitor.BatchableCSTVisitor": {
  "data": {
   "shadows": "libcst.BatchableCSTVisitor"
  },
  "type": "import"
 },
 "libcst.tests.test_batched_visitor.BatchedVisitorTest": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.tests.test_batched_visitor.BatchedVisitorTest.test_all_visits": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "Batchable": {
     "line number": [
      59
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      60
     ]
    },
    "libcst.parse_module": {
     "line number": [
      59
     ]
    },
    "libcst.visit_batched": {
     "line number": [
      59
     ]
    },
    "object.__getattribute__": {
     "line number": [
      63,
      64,
      65,
      66
     ]
    },
    "typing.cast": {
     "line number": [
      60
     ]
    },
    "unittest.mock.Mock": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_batched_visitor.BatchedVisitorTest.test_all_visits.Batchable": {
  "data": {
   "lineno": 42,
   "symbols_in_volume": {
    "libcst.BatchableCSTVisitor": {
     "line number": [
      42
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.tests.test_batched_visitor.BatchedVisitorTest.test_all_visits.Batchable.leave_Pass": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      55
     ]
    },
    "object.__setattr__": {
     "line number": [
      57
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_batched_visitor.BatchedVisitorTest.test_all_visits.Batchable.leave_Pass_semicolon": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      51
     ]
    },
    "object.__setattr__": {
     "line number": [
      53
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_batched_visitor.BatchedVisitorTest.test_all_visits.Batchable.visit_Pass": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      43
     ]
    },
    "object.__setattr__": {
     "line number": [
      45
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_batched_visitor.BatchedVisitorTest.test_all_visits.Batchable.visit_Pass_semicolon": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      47
     ]
    },
    "object.__setattr__": {
     "line number": [
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_batched_visitor.BatchedVisitorTest.test_simple": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "ABatchable": {
     "line number": [
      28
     ]
    },
    "BBatchable": {
     "line number": [
      28
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      29
     ]
    },
    "libcst.parse_module": {
     "line number": [
      28
     ]
    },
    "libcst.visit_batched": {
     "line number": [
      28
     ]
    },
    "object.__getattribute__": {
     "line number": [
      32,
      33
     ]
    },
    "typing.cast": {
     "line number": [
      29
     ]
    },
    "unittest.mock.Mock": {
     "line number": [
      16
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_batched_visitor.BatchedVisitorTest.test_simple.ABatchable": {
  "data": {
   "lineno": 18,
   "symbols_in_volume": {
    "libcst.BatchableCSTVisitor": {
     "line number": [
      18
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.tests.test_batched_visitor.BatchedVisitorTest.test_simple.ABatchable.visit_Pass": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      19
     ]
    },
    "object.__setattr__": {
     "line number": [
      21
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_batched_visitor.BatchedVisitorTest.test_simple.BBatchable": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": {
    "libcst.BatchableCSTVisitor": {
     "line number": [
      23
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.tests.test_batched_visitor.BatchedVisitorTest.test_simple.BBatchable.visit_Pass": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "libcst.Pass": {
     "line number": [
      24
     ]
    },
    "object.__setattr__": {
     "line number": [
      26
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_batched_visitor.Mock": {
  "data": {
   "shadows": "unittest.mock.Mock"
  },
  "type": "import"
 },
 "libcst.tests.test_batched_visitor.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.tests.test_batched_visitor.cast": {
  "data": {
   "shadows": "typing.cast"
  },
  "type": "import"
 },
 "libcst.tests.test_batched_visitor.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.tests.test_batched_visitor.parse_module": {
  "data": {
   "shadows": "libcst.parse_module"
  },
  "type": "import"
 },
 "libcst.tests.test_batched_visitor.visit_batched": {
  "data": {
   "shadows": "libcst.visit_batched"
  },
  "type": "import"
 },
 "libcst.tests.test_deep_clone": {
  "data": {},
  "type": "module"
 },
 "libcst.tests.test_deep_clone.DeepCloneTest": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.tests.test_deep_clone.DeepCloneTest.test_deep_clone": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "NodeGatherVisitor": {
     "line number": [
      50
     ]
    },
    "NodeVerifyVisitor": {
     "line number": [
      54
     ]
    },
    "libcst.parse_module": {
     "line number": [
      49
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      13
     ]
    },
    "str": {
     "line number": [
      28
     ]
    },
    "textwrap.dedent": {
     "line number": [
      49
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_deep_clone.DeepCloneTest.test_deep_clone.NodeGatherVisitor": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "libcst.CSTVisitor": {
     "line number": [
      31
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.tests.test_deep_clone.DeepCloneTest.test_deep_clone.NodeGatherVisitor.__init__": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": {
    "int": {
     "line number": [
      33
     ]
    },
    "set": {
     "line number": [
      33
     ]
    },
    "typing.Set": {
     "line number": [
      33
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_deep_clone.DeepCloneTest.test_deep_clone.NodeGatherVisitor.on_visit": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      35
     ]
    },
    "id": {
     "line number": [
      36
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      35
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_deep_clone.DeepCloneTest.test_deep_clone.NodeVerifyVisitor": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "libcst.CSTVisitor": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.tests.test_deep_clone.DeepCloneTest.test_deep_clone.NodeVerifyVisitor.__init__": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": {
    "int": {
     "line number": [
      40
     ]
    },
    "typing.Set": {
     "line number": [
      40
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_deep_clone.DeepCloneTest.test_deep_clone.NodeVerifyVisitor.on_visit": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      43
     ]
    },
    "id": {
     "line number": [
      45
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      43
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_deep_clone.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "libcst.tests.test_deep_clone.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.tests.test_deep_clone.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.tests.test_deep_clone.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst.tests.test_deep_clone.dedent": {
  "data": {
   "shadows": "textwrap.dedent"
  },
  "type": "import"
 },
 "libcst.tests.test_deep_replace": {
  "data": {},
  "type": "module"
 },
 "libcst.tests.test_deep_replace.DeepReplaceTest": {
  "data": {
   "lineno": 12,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      12
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.tests.test_deep_replace.DeepReplaceTest.test_deep_remove_complex": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": {
    "libcst.FunctionDef": {
     "line number": [
      94,
      96,
      99
     ]
    },
    "libcst.IndentedBlock": {
     "line number": [
      96,
      99
     ]
    },
    "libcst.Module": {
     "line number": [
      101
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      94,
      95,
      96,
      98,
      99,
      101
     ]
    },
    "libcst.parse_module": {
     "line number": [
      93
     ]
    },
    "textwrap.dedent": {
     "line number": [
      93,
      102
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_deep_replace.DeepReplaceTest.test_deep_replace_complex": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "libcst.Break": {
     "line number": [
      55
     ]
    },
    "libcst.FunctionDef": {
     "line number": [
      42,
      44,
      47,
      52
     ]
    },
    "libcst.IndentedBlock": {
     "line number": [
      44,
      47
     ]
    },
    "libcst.Module": {
     "line number": [
      58
     ]
    },
    "libcst.Name": {
     "line number": [
      53
     ]
    },
    "libcst.Parameters": {
     "line number": [
      54
     ]
    },
    "libcst.SimpleStatementSuite": {
     "line number": [
      55
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      42,
      43,
      44,
      46,
      47,
      49
     ]
    },
    "libcst.parse_module": {
     "line number": [
      41
     ]
    },
    "textwrap.dedent": {
     "line number": [
      41,
      60
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_deep_replace.DeepReplaceTest.test_deep_replace_identity": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": {
    "libcst.Break": {
     "line number": [
      75
     ]
    },
    "libcst.EmptyLine": {
     "line number": [
      74
     ]
    },
    "libcst.Module": {
     "line number": [
      73
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      75
     ]
    },
    "libcst.parse_module": {
     "line number": [
      70
     ]
    },
    "textwrap.dedent": {
     "line number": [
      70,
      78
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_deep_replace.DeepReplaceTest.test_deep_replace_simple": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "libcst.Break": {
     "line number": [
      24
     ]
    },
    "libcst.Module": {
     "line number": [
      24
     ]
    },
    "libcst.SimpleStatementLine": {
     "line number": [
      22
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      22,
      23
     ]
    },
    "libcst.parse_module": {
     "line number": [
      21
     ]
    },
    "textwrap.dedent": {
     "line number": [
      21,
      26
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_deep_replace.DeepReplaceTest.test_with_deep_changes_complex": {
  "data": {
   "lineno": 104,
   "symbols_in_volume": {
    "NodeFinder": {
     "line number": [
      130
     ]
    },
    "libcst.Module": {
     "line number": [
      135
     ]
    },
    "libcst.ensure_type": {
     "line number": [
      134
     ]
    },
    "libcst.parse_module": {
     "line number": [
      129
     ]
    },
    "textwrap.dedent": {
     "line number": [
      129,
      137
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_deep_replace.DeepReplaceTest.test_with_deep_changes_complex.NodeFinder": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": {
    "libcst.CSTVisitor": {
     "line number": [
      118
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.tests.test_deep_replace.DeepReplaceTest.test_with_deep_changes_complex.NodeFinder.__init__": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": {
    "libcst.CSTNode": {
     "line number": [
      124
     ]
    },
    "super": {
     "line number": [
      123
     ]
    },
    "typing.Optional": {
     "line number": [
      124
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_deep_replace.DeepReplaceTest.test_with_deep_changes_complex.NodeFinder.visit_SimpleString": {
  "data": {
   "lineno": 126,
   "symbols_in_volume": {
    "libcst.SimpleString": {
     "line number": [
      126
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_deep_replace.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.tests.test_deep_replace.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.tests.test_deep_replace.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.tests.test_deep_replace.dedent": {
  "data": {
   "shadows": "textwrap.dedent"
  },
  "type": "import"
 },
 "libcst.tests.test_exceptions": {
  "data": {},
  "type": "module"
 },
 "libcst.tests.test_exceptions.ExceptionsTest": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      14
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.tests.test_exceptions.ExceptionsTest.test_parser_syntax_error_str": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst.ParserSyntaxError": {
     "line number": [
      77,
      18,
      32,
      46,
      63
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      15
     ]
    },
    "str": {
     "line number": [
      77,
      79
     ]
    },
    "textwrap.dedent": {
     "line number": [
      21,
      35,
      52,
      66
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_exceptions.ExceptionsTest.test_pickle": {
  "data": {
   "lineno": 81,
   "symbols_in_volume": {
    "libcst.ParserSyntaxError": {
     "line number": [
      87
     ]
    },
    "libcst.tests.test_exceptions.pickle": {
     "line number": [
      90,
      91
     ]
    },
    "repr": {
     "line number": [
      92,
      92
     ]
    },
    "str": {
     "line number": [
      93,
      93
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_exceptions.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.tests.test_exceptions.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.tests.test_exceptions.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst.tests.test_exceptions.dedent": {
  "data": {
   "shadows": "textwrap.dedent"
  },
  "type": "import"
 },
 "libcst.tests.test_exceptions.pickle": {
  "data": {
   "shadows": "pickle"
  },
  "type": "import"
 },
 "libcst.tests.test_fuzz": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      183
     ]
    },
    "datetime.timedelta": {
     "line number": [
      29
     ]
    },
    "libcst.tests.test_fuzz.hypothesis": {
     "line number": [
      26,
      31,
      32,
      35,
      40,
      42,
      44,
      44,
      184
     ]
    },
    "libcst.tests.test_fuzz.unittest": {
     "line number": [
      185
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst.tests.test_fuzz.FuzzTest": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": {
    "libcst.tests.test_fuzz.unittest": {
     "line number": [
      48
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.tests.test_fuzz.FuzzTest.reject_invalid_code": {
  "data": {
   "lineno": 136,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      146,
      160
     ]
    },
    "compile": {
     "line number": [
      145
     ]
    },
    "dict": {
     "line number": [
      151
     ]
    },
    "libcst.tests.test_fuzz.hypothesis": {
     "line number": [
      143,
      161
     ]
    },
    "libcst.tests.test_fuzz.libcst": {
     "line number": [
      152,
      153,
      154
     ]
    },
    "staticmethod": {
     "line number": [
      136
     ]
    },
    "str": {
     "line number": [
      137,
      137
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_fuzz.FuzzTest.reject_unsupported_code": {
  "data": {
   "lineno": 164,
   "symbols_in_volume": {
    "libcst.tests.test_fuzz.hypothesis": {
     "line number": [
      180
     ]
    },
    "staticmethod": {
     "line number": [
      164
     ]
    },
    "str": {
     "line number": [
      165
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_fuzz.FuzzTest.test_parsing_compilable_expression_strings": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      79
     ]
    },
    "hypothesmith.from_grammar": {
     "line number": [
      81
     ]
    },
    "libcst.tests.test_fuzz.hypothesis": {
     "line number": [
      104,
      81
     ]
    },
    "libcst.tests.test_fuzz.libcst": {
     "line number": [
      91,
      93,
      95
     ]
    },
    "libcst.tests.test_fuzz.os": {
     "line number": [
      79
     ]
    },
    "libcst.tests.test_fuzz.unittest": {
     "line number": [
      78
     ]
    },
    "str": {
     "line number": [
      82
     ]
    },
    "str.strip": {
     "line number": [
      81
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_fuzz.FuzzTest.test_parsing_compilable_module_strings": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      52
     ]
    },
    "hypothesmith.from_grammar": {
     "line number": [
      54
     ]
    },
    "libcst.tests.test_fuzz.hypothesis": {
     "line number": [
      54
     ]
    },
    "libcst.tests.test_fuzz.libcst": {
     "line number": [
      75
     ]
    },
    "libcst.tests.test_fuzz.os": {
     "line number": [
      52
     ]
    },
    "libcst.tests.test_fuzz.unittest": {
     "line number": [
      51
     ]
    },
    "str": {
     "line number": [
      55
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_fuzz.FuzzTest.test_parsing_compilable_statement_strings": {
  "data": {
   "lineno": 106,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      107
     ]
    },
    "hypothesmith.from_grammar": {
     "line number": [
      110
     ]
    },
    "libcst.tests.test_fuzz.hypothesis": {
     "line number": [
      109
     ]
    },
    "libcst.tests.test_fuzz.libcst": {
     "line number": [
      122,
      124
     ]
    },
    "libcst.tests.test_fuzz.os": {
     "line number": [
      107
     ]
    },
    "libcst.tests.test_fuzz.unittest": {
     "line number": [
      106
     ]
    },
    "str": {
     "line number": [
      114
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_fuzz.FuzzTest.verify_identical_asts": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": {
    "libcst.tests.test_fuzz.ast": {
     "line number": [
      132,
      132,
      133,
      133
     ]
    },
    "str": {
     "line number": [
      128,
      128,
      128
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_fuzz.ast": {
  "data": {
   "shadows": "ast"
  },
  "type": "import"
 },
 "libcst.tests.test_fuzz.from_grammar": {
  "data": {
   "shadows": "hypothesmith.from_grammar"
  },
  "type": "import"
 },
 "libcst.tests.test_fuzz.hypothesis": {
  "data": {
   "shadows": "hypothesis"
  },
  "type": "import"
 },
 "libcst.tests.test_fuzz.libcst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.tests.test_fuzz.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "libcst.tests.test_fuzz.timedelta": {
  "data": {
   "shadows": "datetime.timedelta"
  },
  "type": "import"
 },
 "libcst.tests.test_fuzz.unittest": {
  "data": {
   "shadows": "unittest"
  },
  "type": "import"
 },
 "libcst.tests.test_pyre_integration": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      118
     ]
    },
    "int": {
     "line number": [
      124
     ]
    },
    "libcst.metadata.type_inference_provider._process_pyre_data": {
     "line number": [
      139
     ]
    },
    "libcst.metadata.type_inference_provider.run_command": {
     "line number": [
      125,
      133
     ]
    },
    "libcst.tests.test_pyre_integration.cmd": {
     "line number": [
      132,
      133
     ]
    },
    "libcst.tests.test_pyre_integration.data": {
     "line number": [
      142
     ]
    },
    "libcst.tests.test_pyre_integration.json": {
     "line number": [
      137,
      142
     ]
    },
    "libcst.tests.test_pyre_integration.output_path": {
     "line number": [
      141,
      142
     ]
    },
    "pathlib.Path": {
     "line number": [
      21,
      21
     ]
    },
    "print": {
     "line number": [
      121,
      127,
      128,
      132,
      135,
      136,
      141
     ]
    },
    "str": {
     "line number": [
      122,
      123
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst.tests.test_pyre_integration.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "libcst.tests.test_pyre_integration.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.tests.test_pyre_integration.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "libcst.tests.test_pyre_integration.MetadataWrapper": {
  "data": {
   "shadows": "libcst.metadata.MetadataWrapper"
  },
  "type": "import"
 },
 "libcst.tests.test_pyre_integration.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.tests.test_pyre_integration.Path": {
  "data": {
   "shadows": "pathlib.Path"
  },
  "type": "import"
 },
 "libcst.tests.test_pyre_integration.PositionProvider": {
  "data": {
   "shadows": "libcst.metadata.PositionProvider"
  },
  "type": "import"
 },
 "libcst.tests.test_pyre_integration.PyreData": {
  "data": {
   "shadows": "libcst.metadata.type_inference_provider.PyreData"
  },
  "type": "import"
 },
 "libcst.tests.test_pyre_integration.PyreIntegrationTest": {
  "data": {
   "lineno": 95,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      95
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.tests.test_pyre_integration.PyreIntegrationTest.test_type_availability": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": {
    "int": {
     "line number": [
      107,
      107,
      107,
      107
     ]
    },
    "libcst.metadata.MetadataWrapper": {
     "line number": [
      115
     ]
    },
    "libcst.metadata.type_inference_provider.PyreData": {
     "line number": [
      106
     ]
    },
    "libcst.parse_module": {
     "line number": [
      105
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      96
     ]
    },
    "libcst.tests.test_pyre_integration.TypeVerificationVisitor": {
     "line number": [
      115
     ]
    },
    "libcst.tests.test_pyre_integration.json": {
     "line number": [
      106
     ]
    },
    "pathlib.Path": {
     "line number": [
      104,
      104
     ]
    },
    "str": {
     "line number": [
      107
     ]
    },
    "typing.Dict": {
     "line number": [
      107
     ]
    },
    "typing.Tuple": {
     "line number": [
      107
     ]
    },
    "zip": {
     "line number": [
      99
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_pyre_integration.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst.tests.test_pyre_integration.TypeVerificationVisitor": {
  "data": {
   "lineno": 24,
   "symbols_in_volume": {
    "libcst.CSTVisitor": {
     "line number": [
      24
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      25
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.tests.test_pyre_integration.TypeVerificationVisitor.__init__": {
  "data": {
   "lineno": 27,
   "symbols_in_volume": {
    "int": {
     "line number": [
      28,
      28,
      28,
      28
     ]
    },
    "libcst.Annotation": {
     "line number": [
      34
     ]
    },
    "libcst.Attribute": {
     "line number": [
      32
     ]
    },
    "libcst.Import": {
     "line number": [
      33
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      33
     ]
    },
    "libcst.testing.utils.UnitTest": {
     "line number": [
      28
     ]
    },
    "str": {
     "line number": [
      28
     ]
    },
    "super": {
     "line number": [
      35
     ]
    },
    "typing.List": {
     "line number": [
      32,
      33,
      34
     ]
    },
    "typing.Mapping": {
     "line number": [
      28
     ]
    },
    "typing.Tuple": {
     "line number": [
      28
     ]
    },
    "typing.Union": {
     "line number": [
      33
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_pyre_integration.TypeVerificationVisitor.leave_Annotation": {
  "data": {
   "lineno": 91,
   "symbols_in_volume": {
    "libcst.Annotation": {
     "line number": [
      91
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_pyre_integration.TypeVerificationVisitor.leave_Attribute": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "libcst.Attribute": {
     "line number": [
      51
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_pyre_integration.TypeVerificationVisitor.leave_Import": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": {
    "libcst.Import": {
     "line number": [
      79
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_pyre_integration.TypeVerificationVisitor.leave_ImportFrom": {
  "data": {
   "lineno": 85,
   "symbols_in_volume": {
    "libcst.ImportFrom": {
     "line number": [
      85
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_pyre_integration.TypeVerificationVisitor.visit_Annotation": {
  "data": {
   "lineno": 88,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      88
     ]
    },
    "libcst.Annotation": {
     "line number": [
      88
     ]
    },
    "typing.Optional": {
     "line number": [
      88
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_pyre_integration.TypeVerificationVisitor.visit_Attribute": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      37
     ]
    },
    "libcst.Attribute": {
     "line number": [
      37
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      38
     ]
    },
    "typing.Optional": {
     "line number": [
      37
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_pyre_integration.TypeVerificationVisitor.visit_Import": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      76
     ]
    },
    "libcst.Import": {
     "line number": [
      76
     ]
    },
    "typing.Optional": {
     "line number": [
      76
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_pyre_integration.TypeVerificationVisitor.visit_ImportFrom": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      82
     ]
    },
    "libcst.ImportFrom": {
     "line number": [
      82
     ]
    },
    "typing.Optional": {
     "line number": [
      82
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_pyre_integration.TypeVerificationVisitor.visit_Name": {
  "data": {
   "lineno": 54,
   "symbols_in_volume": {
    "any": {
     "line number": [
      66
     ]
    },
    "bool": {
     "line number": [
      54
     ]
    },
    "len": {
     "line number": [
      56,
      57,
      58
     ]
    },
    "libcst.Name": {
     "line number": [
      54,
      68
     ]
    },
    "libcst.metadata.PositionProvider": {
     "line number": [
      61
     ]
    },
    "typing.Optional": {
     "line number": [
      54
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_pyre_integration.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.tests.test_pyre_integration.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.tests.test_pyre_integration._process_pyre_data": {
  "data": {
   "shadows": "libcst.metadata.type_inference_provider._process_pyre_data"
  },
  "type": "import"
 },
 "libcst.tests.test_pyre_integration.cmd": {
  "data": {
   "lineno": 131
  },
  "type": "constant"
 },
 "libcst.tests.test_pyre_integration.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.tests.test_pyre_integration.data": {
  "data": {
   "lineno": 139
  },
  "type": "constant"
 },
 "libcst.tests.test_pyre_integration.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst.tests.test_pyre_integration.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "libcst.tests.test_pyre_integration.output_path": {
  "data": {
   "lineno": 140
  },
  "type": "constant"
 },
 "libcst.tests.test_pyre_integration.run_command": {
  "data": {
   "shadows": "libcst.metadata.type_inference_provider.run_command"
  },
  "type": "import"
 },
 "libcst.tests.test_tabs": {
  "data": {},
  "type": "module"
 },
 "libcst.tests.test_tabs.ExpandTabsTest": {
  "data": {
   "lineno": 10,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      10
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.tests.test_tabs.ExpandTabsTest.test_expand_tabs": {
  "data": {
   "lineno": 11,
   "symbols_in_volume": {
    "input": {
     "line number": [
      24
     ]
    },
    "libcst._tabs.expand_tabs": {
     "line number": [
      24
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      11
     ]
    },
    "str": {
     "line number": [
      23,
      23
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_tabs.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.tests.test_tabs.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst.tests.test_tabs.expand_tabs": {
  "data": {
   "shadows": "libcst._tabs.expand_tabs"
  },
  "type": "import"
 },
 "libcst.tests.test_tool": {
  "data": {},
  "type": "module"
 },
 "libcst.tests.test_tool.PrettyPrintNodesTest": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.tests.test_tool.PrettyPrintNodesTest.test_full_tree": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "libcst.parse_module": {
     "line number": [
      171
     ]
    },
    "libcst.tool.dump": {
     "line number": [
      170
     ]
    },
    "textwrap.dedent": {
     "line number": [
      169
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_tool.PrettyPrintNodesTest.test_hidden_defaults": {
  "data": {
   "lineno": 267,
   "symbols_in_volume": {
    "libcst.parse_module": {
     "line number": [
      339
     ]
    },
    "libcst.tool.dump": {
     "line number": [
      338
     ]
    },
    "textwrap.dedent": {
     "line number": [
      337
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_tool.PrettyPrintNodesTest.test_hidden_defaults_and_syntax": {
  "data": {
   "lineno": 632,
   "symbols_in_volume": {
    "libcst.parse_module": {
     "line number": [
      695
     ]
    },
    "libcst.tool.dump": {
     "line number": [
      694
     ]
    },
    "textwrap.dedent": {
     "line number": [
      693
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_tool.PrettyPrintNodesTest.test_hidden_syntax": {
  "data": {
   "lineno": 408,
   "symbols_in_volume": {
    "libcst.parse_module": {
     "line number": [
      547
     ]
    },
    "libcst.tool.dump": {
     "line number": [
      546
     ]
    },
    "textwrap.dedent": {
     "line number": [
      545
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_tool.PrettyPrintNodesTest.test_hidden_whitespace": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": {
    "libcst.parse_module": {
     "line number": [
      260
     ]
    },
    "libcst.tool.dump": {
     "line number": [
      259
     ]
    },
    "textwrap.dedent": {
     "line number": [
      258
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_tool.PrettyPrintNodesTest.test_hidden_whitespace_and_defaults": {
  "data": {
   "lineno": 346,
   "symbols_in_volume": {
    "libcst.parse_module": {
     "line number": [
      401
     ]
    },
    "libcst.tool.dump": {
     "line number": [
      400
     ]
    },
    "textwrap.dedent": {
     "line number": [
      399
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_tool.PrettyPrintNodesTest.test_hidden_whitespace_and_defaults_and_syntax": {
  "data": {
   "lineno": 702,
   "symbols_in_volume": {
    "libcst.parse_module": {
     "line number": [
      755
     ]
    },
    "libcst.tool.dump": {
     "line number": [
      754
     ]
    },
    "textwrap.dedent": {
     "line number": [
      753
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_tool.PrettyPrintNodesTest.test_hidden_whitespace_and_syntax": {
  "data": {
   "lineno": 554,
   "symbols_in_volume": {
    "libcst.parse_module": {
     "line number": [
      625
     ]
    },
    "libcst.tool.dump": {
     "line number": [
      624
     ]
    },
    "textwrap.dedent": {
     "line number": [
      623
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_tool.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.tests.test_tool.dedent": {
  "data": {
   "shadows": "textwrap.dedent"
  },
  "type": "import"
 },
 "libcst.tests.test_tool.dump": {
  "data": {
   "shadows": "libcst.tool.dump"
  },
  "type": "import"
 },
 "libcst.tests.test_tool.parse_module": {
  "data": {
   "shadows": "libcst.parse_module"
  },
  "type": "import"
 },
 "libcst.tests.test_type_enforce": {
  "data": {},
  "type": "module"
 },
 "libcst.tests.test_type_enforce.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst.tests.test_type_enforce.AsyncGenerator": {
  "data": {
   "shadows": "typing.AsyncGenerator"
  },
  "type": "import"
 },
 "libcst.tests.test_type_enforce.ClassVar": {
  "data": {
   "shadows": "typing.ClassVar"
  },
  "type": "import"
 },
 "libcst.tests.test_type_enforce.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "libcst.tests.test_type_enforce.Iterable": {
  "data": {
   "shadows": "typing.Iterable"
  },
  "type": "import"
 },
 "libcst.tests.test_type_enforce.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.tests.test_type_enforce.Literal": {
  "data": {
   "shadows": "typing_extensions.Literal"
  },
  "type": "import"
 },
 "libcst.tests.test_type_enforce.Mapping": {
  "data": {
   "shadows": "typing.Mapping"
  },
  "type": "import"
 },
 "libcst.tests.test_type_enforce.MappingProxyType": {
  "data": {
   "shadows": "types.MappingProxyType"
  },
  "type": "import"
 },
 "libcst.tests.test_type_enforce.MutableMapping": {
  "data": {
   "shadows": "typing.MutableMapping"
  },
  "type": "import"
 },
 "libcst.tests.test_type_enforce.MyExampleChildClass": {
  "data": {
   "lineno": 35,
   "symbols_in_volume": {
    "libcst.tests.test_type_enforce.MyExampleClass": {
     "line number": [
      35
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.tests.test_type_enforce.MyExampleClass": {
  "data": {
   "lineno": 31
  },
  "type": "class"
 },
 "libcst.tests.test_type_enforce.MyExampleClassWithMetaclass": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "libcst.tests.test_type_enforce.MyExampleMetaclass": {
     "line number": [
      47
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.tests.test_type_enforce.MyExampleMetaclass": {
  "data": {
   "lineno": 43,
   "symbols_in_volume": {
    "type": {
     "line number": [
      43
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.tests.test_type_enforce.NamedTuple": {
  "data": {
   "shadows": "typing.NamedTuple"
  },
  "type": "import"
 },
 "libcst.tests.test_type_enforce.NamedTupleSubclass": {
  "data": {
   "lineno": 51,
   "symbols_in_volume": {
    "int": {
     "line number": [
      53
     ]
    },
    "str": {
     "line number": [
      52
     ]
    },
    "typing.NamedTuple": {
     "line number": [
      51
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.tests.test_type_enforce.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "libcst.tests.test_type_enforce.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst.tests.test_type_enforce.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "libcst.tests.test_type_enforce.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst.tests.test_type_enforce.Type": {
  "data": {
   "shadows": "typing.Type"
  },
  "type": "import"
 },
 "libcst.tests.test_type_enforce.TypeEnforcementTest": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      56
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.tests.test_type_enforce.TypeEnforcementTest.test_basic_fail": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": {
    "int": {
     "line number": [
      142,
      144,
      145,
      146,
      159,
      160,
      161,
      165,
      166,
      174,
      175,
      189,
      190,
      191
     ]
    },
    "libcst._type_enforce.is_value_of_type": {
     "line number": [
      195
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      139
     ]
    },
    "libcst.tests.test_type_enforce.MyExampleChildClass": {
     "line number": [
      169,
      178,
      179,
      187
     ]
    },
    "libcst.tests.test_type_enforce.MyExampleClass": {
     "line number": [
      158,
      159,
      160,
      161,
      169,
      178,
      179,
      187
     ]
    },
    "libcst.tests.test_type_enforce.MyExampleClassWithMetaclass": {
     "line number": [
      146
     ]
    },
    "libcst.tests.test_type_enforce.NamedTupleSubclass": {
     "line number": [
      167
     ]
    },
    "libcst.tests.test_type_enforce.WeirdSubclassOfList": {
     "line number": [
      191
     ]
    },
    "object": {
     "line number": [
      194,
      194
     ]
    },
    "str": {
     "line number": [
      143,
      148,
      158,
      159,
      160,
      161,
      164,
      165,
      165,
      166,
      166,
      174,
      175,
      178
     ]
    },
    "types.MappingProxyType": {
     "line number": [
      171,
      172
     ]
    },
    "typing.ClassVar": {
     "line number": [
      148,
      169
     ]
    },
    "typing.Dict": {
     "line number": [
      171,
      174,
      175,
      178
     ]
    },
    "typing.Iterable": {
     "line number": [
      187
     ]
    },
    "typing.List": {
     "line number": [
      179,
      187,
      190
     ]
    },
    "typing.MutableMapping": {
     "line number": [
      172
     ]
    },
    "typing.Optional": {
     "line number": [
      145,
      161,
      161,
      175
     ]
    },
    "typing.Set": {
     "line number": [
      189,
      191
     ]
    },
    "typing.Tuple": {
     "line number": [
      164,
      165,
      166
     ]
    },
    "typing.Type": {
     "line number": [
      194
     ]
    },
    "typing.Union": {
     "line number": [
      156,
      158,
      159,
      160,
      161
     ]
    },
    "typing_extensions.Literal": {
     "line number": [
      150,
      151,
      152,
      153,
      154,
      155,
      156,
      156,
      156
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_type_enforce.TypeEnforcementTest.test_basic_pass": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "float": {
     "line number": [
      64
     ]
    },
    "int": {
     "line number": [
      61,
      62,
      66,
      75,
      76,
      77,
      78,
      80,
      81,
      83,
      84,
      86,
      87,
      88,
      89,
      90,
      93,
      94,
      96,
      104,
      105,
      107,
      109,
      109,
      112,
      115
     ]
    },
    "libcst._type_enforce.is_value_of_type": {
     "line number": [
      135
     ]
    },
    "libcst.testing.utils.data_provider": {
     "line number": [
      57
     ]
    },
    "libcst.tests.test_type_enforce.MyExampleChildClass": {
     "line number": [
      117,
      118,
      127
     ]
    },
    "libcst.tests.test_type_enforce.MyExampleClass": {
     "line number": [
      75,
      76,
      77,
      78,
      78,
      100,
      102,
      102,
      109,
      109,
      117,
      118,
      119,
      119,
      127
     ]
    },
    "libcst.tests.test_type_enforce.MyExampleClassWithMetaclass": {
     "line number": [
      130
     ]
    },
    "libcst.tests.test_type_enforce.NamedTupleSubclass": {
     "line number": [
      96,
      97,
      97
     ]
    },
    "libcst.tests.test_type_enforce.WeirdSubclassOfList": {
     "line number": [
      90,
      91,
      91,
      115
     ]
    },
    "object": {
     "line number": [
      133,
      133
     ]
    },
    "str": {
     "line number": [
      60,
      75,
      76,
      77,
      78,
      80,
      81,
      94,
      94,
      96,
      104,
      105,
      107,
      112,
      117
     ]
    },
    "types.MappingProxyType": {
     "line number": [
      110,
      111,
      111,
      112
     ]
    },
    "typing.Any": {
     "line number": [
      128,
      129,
      130
     ]
    },
    "typing.ClassVar": {
     "line number": [
      66,
      67,
      102
     ]
    },
    "typing.Dict": {
     "line number": [
      104,
      105,
      106,
      109
     ]
    },
    "typing.Iterable": {
     "line number": [
      84,
      85,
      86,
      115,
      118,
      119,
      127
     ]
    },
    "typing.List": {
     "line number": [
      83,
      90,
      115,
      127
     ]
    },
    "typing.Mapping": {
     "line number": [
      107,
      108,
      109,
      110,
      112,
      117
     ]
    },
    "typing.Optional": {
     "line number": [
      62,
      80,
      80,
      81,
      81,
      94,
      100,
      105,
      107,
      112
     ]
    },
    "typing.Sequence": {
     "line number": [
      87,
      88
     ]
    },
    "typing.Set": {
     "line number": [
      89
     ]
    },
    "typing.Tuple": {
     "line number": [
      93,
      94,
      95,
      96
     ]
    },
    "typing.Union": {
     "line number": [
      73,
      75,
      76,
      77,
      78,
      80,
      81
     ]
    },
    "typing_extensions.Literal": {
     "line number": [
      69,
      70,
      71,
      72,
      73,
      73,
      73
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_type_enforce.TypeEnforcementTest.test_not_implemented": {
  "data": {
   "lineno": 197,
   "symbols_in_volume": {
    "NotImplementedError": {
     "line number": [
      198
     ]
    },
    "libcst._type_enforce.is_value_of_type": {
     "line number": [
      200
     ]
    },
    "typing.AsyncGenerator": {
     "line number": [
      200
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_type_enforce.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "libcst.tests.test_type_enforce.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.tests.test_type_enforce.WeirdSubclassOfList": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": {
    "int": {
     "line number": [
      39
     ]
    },
    "typing.List": {
     "line number": [
      39
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.tests.test_type_enforce.data_provider": {
  "data": {
   "shadows": "libcst.testing.utils.data_provider"
  },
  "type": "import"
 },
 "libcst.tests.test_type_enforce.is_value_of_type": {
  "data": {
   "shadows": "libcst._type_enforce.is_value_of_type"
  },
  "type": "import"
 },
 "libcst.tests.test_visitor": {
  "data": {},
  "type": "module"
 },
 "libcst.tests.test_visitor.CSTTransformer": {
  "data": {
   "shadows": "libcst.CSTTransformer"
  },
  "type": "import"
 },
 "libcst.tests.test_visitor.CSTVisitor": {
  "data": {
   "shadows": "libcst.CSTVisitor"
  },
  "type": "import"
 },
 "libcst.tests.test_visitor.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.tests.test_visitor.UnitTest": {
  "data": {
   "shadows": "libcst.testing.utils.UnitTest"
  },
  "type": "import"
 },
 "libcst.tests.test_visitor.VisitorTest": {
  "data": {
   "lineno": 13,
   "symbols_in_volume": {
    "libcst.testing.utils.UnitTest": {
     "line number": [
      13
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.tests.test_visitor.VisitorTest.test_transformer": {
  "data": {
   "lineno": 55,
   "symbols_in_volume": {
    "SomeTransformer": {
     "line number": [
      84
     ]
    },
    "libcst.parse_module": {
     "line number": [
      83
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_visitor.VisitorTest.test_transformer.SomeTransformer": {
  "data": {
   "lineno": 56,
   "symbols_in_volume": {
    "libcst.CSTTransformer": {
     "line number": [
      56
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.tests.test_visitor.VisitorTest.test_transformer.SomeTransformer.__init__": {
  "data": {
   "lineno": 57,
   "symbols_in_volume": {
    "str": {
     "line number": [
      58
     ]
    },
    "typing.List": {
     "line number": [
      58
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_visitor.VisitorTest.test_transformer.SomeTransformer.leave_If": {
  "data": {
   "lineno": 63,
   "symbols_in_volume": {
    "libcst.If": {
     "line number": [
      63,
      63,
      63
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_visitor.VisitorTest.test_transformer.SomeTransformer.leave_If_test": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": {
    "libcst.If": {
     "line number": [
      70
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_visitor.VisitorTest.test_transformer.SomeTransformer.leave_Name": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      77,
      77,
      78
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_visitor.VisitorTest.test_transformer.SomeTransformer.visit_If": {
  "data": {
   "lineno": 60,
   "symbols_in_volume": {
    "libcst.If": {
     "line number": [
      60
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_visitor.VisitorTest.test_transformer.SomeTransformer.visit_If_test": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": {
    "libcst.If": {
     "line number": [
      67
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_visitor.VisitorTest.test_transformer.SomeTransformer.visit_Name": {
  "data": {
   "lineno": 73,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      73
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_visitor.VisitorTest.test_visitor": {
  "data": {
   "lineno": 14,
   "symbols_in_volume": {
    "SomeVisitor": {
     "line number": [
      39
     ]
    },
    "libcst.parse_module": {
     "line number": [
      38
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_visitor.VisitorTest.test_visitor.SomeVisitor": {
  "data": {
   "lineno": 15,
   "symbols_in_volume": {
    "libcst.CSTVisitor": {
     "line number": [
      15
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.tests.test_visitor.VisitorTest.test_visitor.SomeVisitor.__init__": {
  "data": {
   "lineno": 16,
   "symbols_in_volume": {
    "str": {
     "line number": [
      17
     ]
    },
    "typing.List": {
     "line number": [
      17
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_visitor.VisitorTest.test_visitor.SomeVisitor.leave_If": {
  "data": {
   "lineno": 22,
   "symbols_in_volume": {
    "libcst.If": {
     "line number": [
      22
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_visitor.VisitorTest.test_visitor.SomeVisitor.leave_If_test": {
  "data": {
   "lineno": 28,
   "symbols_in_volume": {
    "libcst.If": {
     "line number": [
      28
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_visitor.VisitorTest.test_visitor.SomeVisitor.leave_Name": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      34
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_visitor.VisitorTest.test_visitor.SomeVisitor.visit_If": {
  "data": {
   "lineno": 19,
   "symbols_in_volume": {
    "libcst.If": {
     "line number": [
      19
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_visitor.VisitorTest.test_visitor.SomeVisitor.visit_If_test": {
  "data": {
   "lineno": 25,
   "symbols_in_volume": {
    "libcst.If": {
     "line number": [
      25
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_visitor.VisitorTest.test_visitor.SomeVisitor.visit_Name": {
  "data": {
   "lineno": 31,
   "symbols_in_volume": {
    "libcst.Name": {
     "line number": [
      31
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tests.test_visitor.cst": {
  "data": {
   "shadows": "libcst"
  },
  "type": "import"
 },
 "libcst.tests.test_visitor.parse_module": {
  "data": {
   "shadows": "libcst.parse_module"
  },
  "type": "import"
 },
 "libcst.tool": {
  "data": {
   "symbols_in_volume": {
    "__name__": {
     "line number": [
      830
     ]
    },
    "libcst.tool.main": {
     "line number": [
      832
     ]
    },
    "libcst.tool.os": {
     "line number": [
      832
     ]
    },
    "libcst.tool.sys": {
     "line number": [
      831,
      832
     ]
    },
    "str": {
     "line number": [
      44
     ]
    }
   }
  },
  "type": "module"
 },
 "libcst.tool.ABC": {
  "data": {
   "shadows": "abc.ABC"
  },
  "type": "import"
 },
 "libcst.tool.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "libcst.tool.CONFIG_FILE_NAME": {
  "data": {
   "lineno": 301
  },
  "type": "constant"
 },
 "libcst.tool.CSTNode": {
  "data": {
   "shadows": "libcst.CSTNode"
  },
  "type": "import"
 },
 "libcst.tool.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "libcst.tool.CodemodCommand": {
  "data": {
   "shadows": "libcst.codemod.CodemodCommand"
  },
  "type": "import"
 },
 "libcst.tool.CodemodContext": {
  "data": {
   "shadows": "libcst.codemod.CodemodContext"
  },
  "type": "import"
 },
 "libcst.tool.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "libcst.tool.IndentedBlock": {
  "data": {
   "shadows": "libcst.IndentedBlock"
  },
  "type": "import"
 },
 "libcst.tool.LIBCST_VERSION": {
  "data": {
   "shadows": "libcst.LIBCST_VERSION"
  },
  "type": "import"
 },
 "libcst.tool.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "libcst.tool.Module": {
  "data": {
   "shadows": "libcst.Module"
  },
  "type": "import"
 },
 "libcst.tool.PartialParserConfig": {
  "data": {
   "shadows": "libcst.PartialParserConfig"
  },
  "type": "import"
 },
 "libcst.tool.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "libcst.tool.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "libcst.tool.Type": {
  "data": {
   "shadows": "typing.Type"
  },
  "type": "import"
 },
 "libcst.tool._ListSerializer": {
  "data": {
   "lineno": 618,
   "symbols_in_volume": {
    "libcst.tool._SerializerBase": {
     "line number": [
      618
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.tool._ListSerializer.__init__": {
  "data": {
   "lineno": 619,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      619
     ]
    },
    "str": {
     "line number": [
      619
     ]
    },
    "super": {
     "line number": [
      620
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tool._ListSerializer._serialize_impl": {
  "data": {
   "lineno": 623,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      625
     ]
    },
    "isinstance": {
     "line number": [
      624
     ]
    },
    "libcst.tool.os": {
     "line number": [
      628,
      628
     ]
    },
    "list": {
     "line number": [
      624
     ]
    },
    "object": {
     "line number": [
      623
     ]
    },
    "repr": {
     "line number": [
      630
     ]
    },
    "str": {
     "line number": [
      623,
      623
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tool._SerializerBase": {
  "data": {
   "lineno": 598,
   "symbols_in_volume": {
    "abc.ABC": {
     "line number": [
      598
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.tool._SerializerBase.__init__": {
  "data": {
   "lineno": 599,
   "symbols_in_volume": {
    "str": {
     "line number": [
      599
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tool._SerializerBase._serialize_impl": {
  "data": {
   "lineno": 608,
   "symbols_in_volume": {
    "abc.abstractmethod": {
     "line number": [
      608
     ]
    },
    "object": {
     "line number": [
      609
     ]
    },
    "str": {
     "line number": [
      609,
      609
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tool._SerializerBase.serialize": {
  "data": {
   "lineno": 602,
   "symbols_in_volume": {
    "libcst.tool.os": {
     "line number": [
      603,
      606,
      606
     ]
    },
    "libcst.tool.textwrap": {
     "line number": [
      604
     ]
    },
    "object": {
     "line number": [
      602
     ]
    },
    "str": {
     "line number": [
      602,
      602
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tool._StrSerializer": {
  "data": {
   "lineno": 613,
   "symbols_in_volume": {
    "libcst.tool._SerializerBase": {
     "line number": [
      613
     ]
    }
   }
  },
  "type": "class"
 },
 "libcst.tool._StrSerializer._serialize_impl": {
  "data": {
   "lineno": 614,
   "symbols_in_volume": {
    "object": {
     "line number": [
      614
     ]
    },
    "str": {
     "line number": [
      614,
      614
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tool._codemod_impl": {
  "data": {
   "lineno": 377,
   "symbols_in_volume": {
    "AttributeError": {
     "line number": [
      408
     ]
    },
    "Exception": {
     "line number": [
      538
     ]
    },
    "KeyboardInterrupt": {
     "line number": [
      582
     ]
    },
    "ModuleNotFoundError": {
     "line number": [
      410
     ]
    },
    "any": {
     "line number": [
      536
     ]
    },
    "command_class": {
     "line number": [
      532
     ]
    },
    "getattr": {
     "line number": [
      401
     ]
    },
    "int": {
     "line number": [
      455,
      474,
      377
     ]
    },
    "len": {
     "line number": [
      391,
      537
     ]
    },
    "libcst.codemod.CodemodCommand": {
     "line number": [
      420,
      426
     ]
    },
    "libcst.codemod.CodemodContext": {
     "line number": [
      532
     ]
    },
    "libcst.codemod.diff_code": {
     "line number": [
      557
     ]
    },
    "libcst.codemod.exec_transform_with_prettyprint": {
     "line number": [
      542
     ]
    },
    "libcst.codemod.gather_files": {
     "line number": [
      563
     ]
    },
    "libcst.codemod.parallel_exec_transform_with_prettyprint": {
     "line number": [
      565
     ]
    },
    "libcst.tool._find_and_load_config": {
     "line number": [
      379
     ]
    },
    "libcst.tool.argparse": {
     "line number": [
      384,
      423
     ]
    },
    "libcst.tool.importlib": {
     "line number": [
      402
     ]
    },
    "libcst.tool.sys": {
     "line number": [
      392,
      415,
      540,
      541,
      552,
      583,
      589,
      591,
      592,
      593,
      594
     ]
    },
    "print": {
     "line number": [
      392,
      413,
      540,
      552,
      557,
      559,
      583,
      587,
      591,
      592,
      593,
      594
     ]
    },
    "str": {
     "line number": [
      377,
      377,
      385,
      435,
      466
     ]
    },
    "typing.List": {
     "line number": [
      377
     ]
    },
    "vars": {
     "line number": [
      515
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tool._default_config": {
  "data": {
   "lineno": 291,
   "symbols_in_volume": {
    "str": {
     "line number": [
      291
     ]
    },
    "typing.Any": {
     "line number": [
      291
     ]
    },
    "typing.Dict": {
     "line number": [
      291
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tool._find_and_load_config": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      359
     ]
    },
    "all": {
     "line number": [
      334
     ]
    },
    "bool": {
     "line number": [
      357
     ]
    },
    "dict": {
     "line number": [
      321
     ]
    },
    "isinstance": {
     "line number": [
      321,
      324,
      333,
      335,
      342
     ]
    },
    "libcst.tool.CONFIG_FILE_NAME": {
     "line number": [
      314,
      360
     ]
    },
    "libcst.tool._default_config": {
     "line number": [
      306
     ]
    },
    "libcst.tool.os": {
     "line number": [
      309,
      309,
      314,
      315,
      345,
      346,
      355,
      355,
      355,
      357,
      372
     ]
    },
    "libcst.tool.yaml": {
     "line number": [
      318
     ]
    },
    "list": {
     "line number": [
      333
     ]
    },
    "open": {
     "line number": [
      317
     ]
    },
    "str": {
     "line number": [
      304,
      325,
      335,
      343,
      304
     ]
    },
    "typing.Any": {
     "line number": [
      304
     ]
    },
    "typing.Dict": {
     "line number": [
      304
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tool._initialize_impl": {
  "data": {
   "lineno": 634,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      686
     ]
    },
    "int": {
     "line number": [
      634
     ]
    },
    "libcst.tool.CONFIG_FILE_NAME": {
     "line number": [
      688
     ]
    },
    "libcst.tool._ListSerializer": {
     "line number": [
      660,
      665,
      669
     ]
    },
    "libcst.tool._SerializerBase": {
     "line number": [
      655
     ]
    },
    "libcst.tool._StrSerializer": {
     "line number": [
      656,
      672
     ]
    },
    "libcst.tool._default_config": {
     "line number": [
      651
     ]
    },
    "libcst.tool.argparse": {
     "line number": [
      636
     ]
    },
    "libcst.tool.os": {
     "line number": [
      688,
      688
     ]
    },
    "libcst.tool.yaml": {
     "line number": [
      684
     ]
    },
    "open": {
     "line number": [
      689
     ]
    },
    "print": {
     "line number": [
      692
     ]
    },
    "str": {
     "line number": [
      634,
      634,
      644,
      655
     ]
    },
    "typing.Dict": {
     "line number": [
      655
     ]
    },
    "typing.List": {
     "line number": [
      634
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tool._list_impl": {
  "data": {
   "lineno": 727,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      743
     ]
    },
    "TypeError": {
     "line number": [
      777
     ]
    },
    "abc.ABC": {
     "line number": [
      767
     ]
    },
    "any": {
     "line number": [
      767
     ]
    },
    "dir": {
     "line number": [
      757
     ]
    },
    "getattr": {
     "line number": [
      759
     ]
    },
    "int": {
     "line number": [
      727
     ]
    },
    "issubclass": {
     "line number": [
      760
     ]
    },
    "len": {
     "line number": [
      773,
      773
     ]
    },
    "libcst.codemod.CodemodCommand": {
     "line number": [
      739,
      760
     ]
    },
    "libcst.tool._find_and_load_config": {
     "line number": [
      729
     ]
    },
    "libcst.tool._recursive_find": {
     "line number": [
      756
     ]
    },
    "libcst.tool.argparse": {
     "line number": [
      731
     ]
    },
    "libcst.tool.importlib": {
     "line number": [
      742
     ]
    },
    "libcst.tool.inspect": {
     "line number": [
      762,
      767
     ]
    },
    "libcst.tool.os": {
     "line number": [
      755,
      755
     ]
    },
    "libcst.tool.sys": {
     "line number": [
      750
     ]
    },
    "print": {
     "line number": [
      748,
      783
     ]
    },
    "sorted": {
     "line number": [
      783
     ]
    },
    "str": {
     "line number": [
      727,
      727,
      739,
      780
     ]
    },
    "typing.Dict": {
     "line number": [
      739
     ]
    },
    "typing.List": {
     "line number": [
      727,
      780
     ]
    },
    "typing.Type": {
     "line number": [
      739
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tool._node_repr_recursive": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      175
     ]
    },
    "_get_default": {
     "line number": [
      94
     ]
    },
    "_is_syntax": {
     "line number": [
      124
     ]
    },
    "_is_whitespace": {
     "line number": [
      82
     ]
    },
    "bool": {
     "line number": [
      51,
      52,
      53
     ]
    },
    "bytes": {
     "line number": [
      135
     ]
    },
    "enumerate": {
     "line number": [
      152
     ]
    },
    "getattr": {
     "line number": [
      94,
      133
     ]
    },
    "isinstance": {
     "line number": [
      55,
      135,
      135,
      145
     ]
    },
    "len": {
     "line number": [
      126,
      147,
      151
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      55
     ]
    },
    "libcst._nodes.deep_equals.deep_equals": {
     "line number": [
      94
     ]
    },
    "libcst.tool.dataclasses": {
     "line number": [
      58
     ]
    },
    "object": {
     "line number": [
      48
     ]
    },
    "repr": {
     "line number": [
      187
     ]
    },
    "str": {
     "line number": [
      50,
      57,
      132,
      135,
      149,
      54
     ]
    },
    "typing.List": {
     "line number": [
      57,
      132,
      149,
      54
     ]
    },
    "typing.Sequence": {
     "line number": [
      58,
      135,
      145
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tool._node_repr_recursive._get_default": {
  "data": {
   "lineno": 86,
   "symbols_in_volume": {
    "libcst.tool.dataclasses": {
     "line number": [
      87
     ]
    },
    "object": {
     "line number": [
      86
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tool._node_repr_recursive._is_syntax": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      99
     ]
    },
    "isinstance": {
     "line number": [
      100
     ]
    },
    "libcst.Module": {
     "line number": [
      100
     ]
    },
    "repr": {
     "line number": [
      107
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tool._node_repr_recursive._is_whitespace": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      66
     ]
    },
    "isinstance": {
     "line number": [
      73,
      78
     ]
    },
    "libcst.IndentedBlock": {
     "line number": [
      73,
      78
     ]
    },
    "libcst.Module": {
     "line number": [
      73
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tool._print_tree_impl": {
  "data": {
   "lineno": 224,
   "symbols_in_volume": {
    "int": {
     "line number": [
      224
     ]
    },
    "libcst.PartialParserConfig": {
     "line number": [
      275,
      277
     ]
    },
    "libcst.parse_module": {
     "line number": [
      272
     ]
    },
    "libcst.tool.argparse": {
     "line number": [
      225
     ]
    },
    "libcst.tool.dump": {
     "line number": [
      281
     ]
    },
    "libcst.tool.sys": {
     "line number": [
      267
     ]
    },
    "open": {
     "line number": [
      269
     ]
    },
    "print": {
     "line number": [
      280
     ]
    },
    "str": {
     "line number": [
      224,
      224,
      234,
      259
     ]
    },
    "typing.List": {
     "line number": [
      224
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tool._recursive_find": {
  "data": {
   "lineno": 696,
   "symbols_in_volume": {
    "Exception": {
     "line number": [
      720
     ]
    },
    "libcst.tool.importlib": {
     "line number": [
      718
     ]
    },
    "libcst.tool.os": {
     "line number": [
      705,
      706,
      707,
      714
     ]
    },
    "object": {
     "line number": [
      703,
      696
     ]
    },
    "str": {
     "line number": [
      696,
      696,
      703,
      696
     ]
    },
    "typing.List": {
     "line number": [
      703,
      696
     ]
    },
    "typing.Tuple": {
     "line number": [
      703,
      696
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tool.abstractmethod": {
  "data": {
   "shadows": "abc.abstractmethod"
  },
  "type": "import"
 },
 "libcst.tool.argparse": {
  "data": {
   "shadows": "argparse"
  },
  "type": "import"
 },
 "libcst.tool.dataclasses": {
  "data": {
   "shadows": "dataclasses"
  },
  "type": "import"
 },
 "libcst.tool.deep_equals": {
  "data": {
   "shadows": "libcst._nodes.deep_equals.deep_equals"
  },
  "type": "import"
 },
 "libcst.tool.diff_code": {
  "data": {
   "shadows": "libcst.codemod.diff_code"
  },
  "type": "import"
 },
 "libcst.tool.distutils.spawn": {
  "data": {
   "shadows": "distutils.spawn"
  },
  "type": "import"
 },
 "libcst.tool.dump": {
  "data": {
   "lineno": 190,
   "symbols_in_volume": {
    "bool": {
     "line number": [
      194,
      195,
      196
     ]
    },
    "libcst.CSTNode": {
     "line number": [
      191
     ]
    },
    "libcst.tool._node_repr_recursive": {
     "line number": [
      214
     ]
    },
    "str": {
     "line number": [
      193,
      197
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tool.exec_transform_with_prettyprint": {
  "data": {
   "shadows": "libcst.codemod.exec_transform_with_prettyprint"
  },
  "type": "import"
 },
 "libcst.tool.gather_files": {
  "data": {
   "shadows": "libcst.codemod.gather_files"
  },
  "type": "import"
 },
 "libcst.tool.importlib": {
  "data": {
   "shadows": "importlib"
  },
  "type": "import"
 },
 "libcst.tool.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "libcst.tool.main": {
  "data": {
   "lineno": 787,
   "symbols_in_volume": {
    "int": {
     "line number": [
      821,
      787
     ]
    },
    "libcst.LIBCST_VERSION": {
     "line number": [
      804
     ]
    },
    "libcst.tool._codemod_impl": {
     "line number": [
      823
     ]
    },
    "libcst.tool._initialize_impl": {
     "line number": [
      824
     ]
    },
    "libcst.tool._list_impl": {
     "line number": [
      825
     ]
    },
    "libcst.tool._print_tree_impl": {
     "line number": [
      822
     ]
    },
    "libcst.tool.argparse": {
     "line number": [
      794,
      794
     ]
    },
    "str": {
     "line number": [
      787,
      787,
      821,
      821,
      821
     ]
    },
    "typing.Callable": {
     "line number": [
      821
     ]
    },
    "typing.Dict": {
     "line number": [
      821
     ]
    },
    "typing.List": {
     "line number": [
      787,
      821
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tool.main._invalid_command": {
  "data": {
   "lineno": 815,
   "symbols_in_volume": {
    "int": {
     "line number": [
      815
     ]
    },
    "libcst.tool.sys": {
     "line number": [
      816,
      817
     ]
    },
    "print": {
     "line number": [
      816
     ]
    },
    "str": {
     "line number": [
      815,
      815
     ]
    },
    "typing.List": {
     "line number": [
      815
     ]
    }
   }
  },
  "type": "function"
 },
 "libcst.tool.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "libcst.tool.os.path": {
  "data": {
   "shadows": "os.path"
  },
  "type": "import"
 },
 "libcst.tool.parallel_exec_transform_with_prettyprint": {
  "data": {
   "shadows": "libcst.codemod.parallel_exec_transform_with_prettyprint"
  },
  "type": "import"
 },
 "libcst.tool.parse_module": {
  "data": {
   "shadows": "libcst.parse_module"
  },
  "type": "import"
 },
 "libcst.tool.sys": {
  "data": {
   "shadows": "sys"
  },
  "type": "import"
 },
 "libcst.tool.textwrap": {
  "data": {
   "shadows": "textwrap"
  },
  "type": "import"
 },
 "libcst.tool.yaml": {
  "data": {
   "shadows": "yaml"
  },
  "type": "import"
 },
 "libcst.visit_batched": {
  "data": {
   "shadows": "libcst._batched_visitor.visit_batched"
  },
  "type": "import"
 }
}