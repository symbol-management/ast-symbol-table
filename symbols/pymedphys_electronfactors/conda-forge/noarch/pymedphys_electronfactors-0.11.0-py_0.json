{
 "pymedphys_electronfactors": {
  "data": {},
  "type": "module"
 },
 "pymedphys_electronfactors._install_requires": {
  "data": {},
  "type": "module"
 },
 "pymedphys_electronfactors._install_requires.install_requires": {
  "data": {
   "lineno": 1
  },
  "type": "constant"
 },
 "pymedphys_electronfactors._version": {
  "data": {},
  "type": "module"
 },
 "pymedphys_electronfactors._version.__version__": {
  "data": {
   "lineno": 2
  },
  "type": "constant"
 },
 "pymedphys_electronfactors._version.version_info": {
  "data": {
   "lineno": 1
  },
  "type": "constant"
 },
 "pymedphys_electronfactors.electronfactors": {
  "data": {},
  "type": "module"
 },
 "pymedphys_electronfactors.electronfactors.core": {
  "data": {},
  "type": "module"
 },
 "pymedphys_electronfactors.electronfactors.core.SmoothBivariateSpline": {
  "data": {
   "shadows": "scipy.interpolate.SmoothBivariateSpline"
  },
  "type": "import"
 },
 "pymedphys_electronfactors.electronfactors.core._single_calculate_deformability": {
  "data": {
   "lineno": 89,
   "symbols_in_volume": [
    "max",
    "min",
    "numpy.append",
    "numpy.max",
    "scipy.interpolate.SmoothBivariateSpline"
   ]
  },
  "type": "function"
 },
 "pymedphys_electronfactors.electronfactors.core.aff": {
  "data": {
   "shadows": "shapely.affinity"
  },
  "type": "import"
 },
 "pymedphys_electronfactors.electronfactors.core.basinhopping": {
  "data": {
   "shadows": "scipy.optimize.basinhopping"
  },
  "type": "import"
 },
 "pymedphys_electronfactors.electronfactors.core.calculate_deformability": {
  "data": {
   "lineno": 156,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.shape",
    "numpy.size",
    "pymedphys_electronfactors.electronfactors.core._single_calculate_deformability",
    "range"
   ]
  },
  "type": "function"
 },
 "pymedphys_electronfactors.electronfactors.core.calculate_length": {
  "data": {
   "lineno": 383,
   "symbols_in_volume": [
    "numpy.pi",
    "pymedphys_electronfactors.electronfactors.core.shapely_insert"
   ]
  },
  "type": "function"
 },
 "pymedphys_electronfactors.electronfactors.core.calculate_percent_prediction_differences": {
  "data": {
   "lineno": 280,
   "symbols_in_volume": [
    "len",
    "numpy.delete",
    "pymedphys_electronfactors.electronfactors.core.spline_model_with_deformability",
    "range"
   ]
  },
  "type": "function"
 },
 "pymedphys_electronfactors.electronfactors.core.calculate_width": {
  "data": {
   "lineno": 370,
   "symbols_in_volume": [
    "Exception",
    "pymedphys_electronfactors.electronfactors.core.shapely_insert",
    "shapely.geometry.Point"
   ]
  },
  "type": "function"
 },
 "pymedphys_electronfactors.electronfactors.core.convert2_ratio_perim_area": {
  "data": {
   "lineno": 455,
   "symbols_in_volume": [
    "numpy.pi",
    "numpy.sqrt"
   ]
  },
  "type": "function"
 },
 "pymedphys_electronfactors.electronfactors.core.create_transformed_mesh": {
  "data": {
   "lineno": 467,
   "symbols_in_volume": [
    "numpy.all",
    "numpy.arange",
    "numpy.ceil",
    "numpy.floor",
    "numpy.invert",
    "numpy.isnan",
    "numpy.max",
    "numpy.meshgrid",
    "numpy.min",
    "numpy.nan",
    "pymedphys_electronfactors.electronfactors.core.convert2_ratio_perim_area",
    "pymedphys_electronfactors.electronfactors.core.spline_model_with_deformability"
   ]
  },
  "type": "function"
 },
 "pymedphys_electronfactors.electronfactors.core.geo": {
  "data": {
   "shadows": "shapely.geometry"
  },
  "type": "import"
 },
 "pymedphys_electronfactors.electronfactors.core.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "pymedphys_electronfactors.electronfactors.core.parameterise_insert": {
  "data": {
   "lineno": 391,
   "symbols_in_volume": [
    "pymedphys_electronfactors.electronfactors.core.calculate_length",
    "pymedphys_electronfactors.electronfactors.core.calculate_width",
    "pymedphys_electronfactors.electronfactors.core.search_for_centre_of_largest_bounded_circle"
   ]
  },
  "type": "function"
 },
 "pymedphys_electronfactors.electronfactors.core.parameterise_insert_with_visual_alignment": {
  "data": {
   "lineno": 437,
   "symbols_in_volume": [
    "complete_parameterisation_callback",
    "pymedphys_electronfactors.electronfactors.core.parameterise_insert",
    "pymedphys_electronfactors.electronfactors.core.visual_alignment_of_equivalent_ellipse"
   ]
  },
  "type": "function"
 },
 "pymedphys_electronfactors.electronfactors.core.search_for_centre_of_largest_bounded_circle": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": [
    "numpy.diff",
    "numpy.hypot",
    "numpy.squeeze",
    "pymedphys_electronfactors.electronfactors.core.shapely_insert",
    "scipy.optimize.basinhopping"
   ]
  },
  "type": "function"
 },
 "pymedphys_electronfactors.electronfactors.core.search_for_centre_of_largest_bounded_circle.minimising_function": {
  "data": {
   "lineno": 339,
   "symbols_in_volume": [
    "shapely.geometry.Point"
   ]
  },
  "type": "function"
 },
 "pymedphys_electronfactors.electronfactors.core.shapely_insert": {
  "data": {
   "lineno": 324,
   "symbols_in_volume": [
    "numpy.transpose",
    "shapely.geometry.Polygon"
   ]
  },
  "type": "function"
 },
 "pymedphys_electronfactors.electronfactors.core.spline_model": {
  "data": {
   "lineno": 39,
   "symbols_in_volume": [
    "numpy.max",
    "numpy.min",
    "scipy.interpolate.SmoothBivariateSpline"
   ]
  },
  "type": "function"
 },
 "pymedphys_electronfactors.electronfactors.core.spline_model_with_deformability": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "numpy.nan",
    "pymedphys_electronfactors.electronfactors.core.calculate_deformability",
    "pymedphys_electronfactors.electronfactors.core.spline_model"
   ]
  },
  "type": "function"
 },
 "pymedphys_electronfactors.electronfactors.core.visual_alignment_of_equivalent_ellipse": {
  "data": {
   "lineno": 400,
   "symbols_in_volume": [
    "numpy.append",
    "numpy.pi",
    "numpy.squeeze",
    "pymedphys_electronfactors.electronfactors.core.shapely_insert",
    "scipy.optimize.basinhopping",
    "shapely.affinity.scale",
    "shapely.geometry.Point"
   ]
  },
  "type": "function"
 },
 "pymedphys_electronfactors.electronfactors.core.visual_alignment_of_equivalent_ellipse.minimising_function": {
  "data": {
   "lineno": 406,
   "symbols_in_volume": [
    "shapely.affinity.rotate",
    "shapely.affinity.translate"
   ]
  },
  "type": "function"
 },
 "pymedphys_electronfactors.electronfactors.visualisation": {
  "data": {},
  "type": "module"
 },
 "pymedphys_electronfactors.electronfactors.visualisation.model_and_display": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "parameterise_insert_with_visual_alignment",
    "pymedphys_electronfactors.electronfactors.visualisation.plot_insert"
   ]
  },
  "type": "function"
 },
 "pymedphys_electronfactors.electronfactors.visualisation.np": {
  "data": {
   "shadows": "numpy"
  },
  "type": "import"
 },
 "pymedphys_electronfactors.electronfactors.visualisation.plot_insert": {
  "data": {
   "lineno": 76,
   "symbols_in_volume": [
    "matplotlib.pyplot.axis",
    "matplotlib.pyplot.figure",
    "matplotlib.pyplot.grid",
    "matplotlib.pyplot.plot",
    "matplotlib.pyplot.title",
    "matplotlib.pyplot.xlabel",
    "matplotlib.pyplot.ylabel",
    "pymedphys_electronfactors.electronfactors.visualisation.visual_circle_and_ellipse"
   ]
  },
  "type": "function"
 },
 "pymedphys_electronfactors.electronfactors.visualisation.plot_model": {
  "data": {
   "lineno": 94,
   "symbols_in_volume": [
    "create_transformed_mesh",
    "matplotlib.pyplot.clabel",
    "matplotlib.pyplot.colorbar",
    "matplotlib.pyplot.contour",
    "matplotlib.pyplot.scatter",
    "matplotlib.pyplot.title",
    "matplotlib.pyplot.xlabel",
    "matplotlib.pyplot.ylabel",
    "numpy.concatenate",
    "numpy.nanmax",
    "numpy.nanmin"
   ]
  },
  "type": "function"
 },
 "pymedphys_electronfactors.electronfactors.visualisation.plt": {
  "data": {
   "shadows": "matplotlib.pyplot"
  },
  "type": "import"
 },
 "pymedphys_electronfactors.electronfactors.visualisation.visual_circle_and_ellipse": {
  "data": {
   "lineno": 47,
   "symbols_in_volume": [
    "numpy.array",
    "numpy.cos",
    "numpy.linspace",
    "numpy.pi",
    "numpy.sin",
    "visual_alignment_of_equivalent_ellipse"
   ]
  },
  "type": "function"
 }
}