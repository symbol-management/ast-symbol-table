{
 "matchpy": {
  "data": {
   "symbols_in_volume": [
    "get_versions"
   ]
  },
  "type": "module"
 },
 "matchpy.__all__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "matchpy.__version__": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "matchpy._version": {
  "data": {},
  "type": "module"
 },
 "matchpy._version.get_versions": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "matchpy._version.json",
    "matchpy._version.version_json"
   ]
  },
  "type": "function"
 },
 "matchpy._version.json": {
  "data": {
   "shadows": "json"
  },
  "type": "import"
 },
 "matchpy._version.version_json": {
  "data": {
   "lineno": 9
  },
  "type": "constant"
 },
 "matchpy.expressions": {
  "data": {},
  "type": "module"
 },
 "matchpy.expressions.__all__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "matchpy.expressions.constraints": {
  "data": {},
  "type": "module"
 },
 "matchpy.expressions.constraints.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "matchpy.expressions.constraints.Constraint": {
  "data": {
   "lineno": 37,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "matchpy.expressions.constraints.Constraint.__call__": {
  "data": {
   "lineno": 46,
   "symbols_in_volume": [
    "NotImplementedError",
    "bool"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.constraints.Constraint.__eq__": {
  "data": {
   "lineno": 62,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.constraints.Constraint.__hash__": {
  "data": {
   "lineno": 66,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.constraints.Constraint.variables": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "frozenset",
    "property",
    "str",
    "typing.FrozenSet"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.constraints.Constraint.with_renamed_vars": {
  "data": {
   "lineno": 80,
   "symbols_in_volume": [
    "NotImplementedError",
    "str",
    "typing.Dict"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.constraints.CustomConstraint": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "matchpy.expressions.constraints.Constraint"
   ]
  },
  "type": "class"
 },
 "matchpy.expressions.constraints.CustomConstraint.__call__": {
  "data": {
   "lineno": 187,
   "symbols_in_volume": [
    "bool",
    "dict"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.constraints.CustomConstraint.__eq__": {
  "data": {
   "lineno": 204,
   "symbols_in_volume": [
    "isinstance",
    "matchpy.expressions.constraints.CustomConstraint"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.constraints.CustomConstraint.__hash__": {
  "data": {
   "lineno": 210,
   "symbols_in_volume": [
    "hash"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.constraints.CustomConstraint.__init__": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "ValueError",
    "bool",
    "collections.OrderedDict",
    "matchpy.expressions.constraints.inspect",
    "typing.Callable"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.constraints.CustomConstraint.__repr__": {
  "data": {
   "lineno": 201
  },
  "type": "function"
 },
 "matchpy.expressions.constraints.CustomConstraint.__str__": {
  "data": {
   "lineno": 198
  },
  "type": "function"
 },
 "matchpy.expressions.constraints.CustomConstraint._get_name": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "Exception",
    "get_short_lambda_source"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.constraints.CustomConstraint.variables": {
  "data": {
   "lineno": 183,
   "symbols_in_volume": [
    "frozenset",
    "property"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.constraints.CustomConstraint.with_renamed_vars": {
  "data": {
   "lineno": 213,
   "symbols_in_volume": [
    "list",
    "matchpy.expressions.constraints.CustomConstraint"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.constraints.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "matchpy.expressions.constraints.EqualVariablesConstraint": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "matchpy.expressions.constraints.Constraint"
   ]
  },
  "type": "class"
 },
 "matchpy.expressions.constraints.EqualVariablesConstraint.__call__": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "ValueError",
    "bool"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.constraints.EqualVariablesConstraint.__eq__": {
  "data": {
   "lineno": 128,
   "symbols_in_volume": [
    "isinstance",
    "matchpy.expressions.constraints.EqualVariablesConstraint"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.constraints.EqualVariablesConstraint.__hash__": {
  "data": {
   "lineno": 131,
   "symbols_in_volume": [
    "hash"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.constraints.EqualVariablesConstraint.__init__": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "frozenset",
    "str"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.constraints.EqualVariablesConstraint.__repr__": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.constraints.EqualVariablesConstraint.__str__": {
  "data": {
   "lineno": 122,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.constraints.EqualVariablesConstraint.variables": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.constraints.EqualVariablesConstraint.with_renamed_vars": {
  "data": {
   "lineno": 134,
   "symbols_in_volume": [
    "matchpy.expressions.constraints.EqualVariablesConstraint"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.constraints.FrozenSet": {
  "data": {
   "shadows": "typing.FrozenSet"
  },
  "type": "import"
 },
 "matchpy.expressions.constraints.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "matchpy.expressions.constraints.OrderedDict": {
  "data": {
   "shadows": "collections.OrderedDict"
  },
  "type": "import"
 },
 "matchpy.expressions.constraints.__all__": {
  "data": {
   "lineno": 34
  },
  "type": "constant"
 },
 "matchpy.expressions.constraints.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "matchpy.expressions.substitution": {
  "data": {
   "symbols_in_volume": [
    "multiset.Multiset",
    "typing.Tuple",
    "typing.Union"
   ]
  },
  "type": "module"
 },
 "matchpy.expressions.substitution.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "matchpy.expressions.substitution.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "matchpy.expressions.substitution.Multiset": {
  "data": {
   "shadows": "multiset.Multiset"
  },
  "type": "import"
 },
 "matchpy.expressions.substitution.Substitution": {
  "data": {
   "lineno": 26,
   "symbols_in_volume": [
    "dict"
   ]
  },
  "type": "class"
 },
 "matchpy.expressions.substitution.Substitution.__copy__": {
  "data": {
   "lineno": 237,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.substitution.Substitution.__repr__": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.substitution.Substitution.__str__": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "sorted"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.substitution.Substitution._match_value_repr_str": {
  "data": {
   "lineno": 220,
   "symbols_in_volume": [
    "isinstance",
    "list",
    "multiset.Multiset",
    "sorted",
    "staticmethod",
    "str",
    "tuple",
    "typing.List",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.substitution.Substitution.extract_substitution": {
  "data": {
   "lineno": 103,
   "symbols_in_volume": [
    "ValueError",
    "bool",
    "getattr",
    "isinstance",
    "op_iter",
    "op_len",
    "type",
    "typing.cast",
    "zip"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.substitution.Substitution.rename": {
  "data": {
   "lineno": 199,
   "symbols_in_volume": [
    "matchpy.expressions.substitution.Substitution",
    "str",
    "typing.Dict"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.substitution.Substitution.try_add_variable": {
  "data": {
   "lineno": 32,
   "symbols_in_volume": [
    "ValueError",
    "isinstance",
    "list",
    "matchpy.expressions.substitution.VariableReplacement",
    "multiset.Multiset",
    "str",
    "tuple"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.substitution.Substitution.union": {
  "data": {
   "lineno": 166,
   "symbols_in_volume": [
    "matchpy.expressions.substitution.Substitution"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.substitution.Substitution.union_with_variable": {
  "data": {
   "lineno": 79,
   "symbols_in_volume": [
    "matchpy.expressions.substitution.Substitution",
    "matchpy.expressions.substitution.VariableReplacement",
    "str"
   ]
  },
  "type": "function"
 },
 "matchpy.expressions.substitution.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "matchpy.expressions.substitution.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "matchpy.expressions.substitution.VariableReplacement": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "matchpy.expressions.substitution.__all__": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "matchpy.expressions.substitution.cast": {
  "data": {
   "shadows": "typing.cast"
  },
  "type": "import"
 },
 "matchpy.functions": {
  "data": {
   "symbols_in_volume": [
    "typing.Callable",
    "typing.List",
    "typing.NamedTuple",
    "typing.Union"
   ]
  },
  "type": "module"
 },
 "matchpy.functions.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "matchpy.functions.Iterable": {
  "data": {
   "shadows": "typing.Iterable"
  },
  "type": "import"
 },
 "matchpy.functions.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "matchpy.functions.Multiset": {
  "data": {
   "shadows": "multiset.Multiset"
  },
  "type": "import"
 },
 "matchpy.functions.NamedTuple": {
  "data": {
   "shadows": "typing.NamedTuple"
  },
  "type": "import"
 },
 "matchpy.functions.Replacement": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "matchpy.functions.ReplacementRule": {
  "data": {
   "lineno": 211
  },
  "type": "constant"
 },
 "matchpy.functions.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "matchpy.functions.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "matchpy.functions.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "matchpy.functions.__all__": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "matchpy.functions._replace_all_post_order": {
  "data": {
   "lineno": 293,
   "symbols_in_volume": [
    "StopIteration",
    "any",
    "create_operation_expression",
    "isinstance",
    "iter",
    "match",
    "next",
    "op_iter",
    "replacement"
   ]
  },
  "type": "function"
 },
 "matchpy.functions._substitute": {
  "data": {
   "lineno": 74,
   "symbols_in_volume": [
    "bool",
    "create_operation_expression",
    "getattr",
    "isinstance",
    "list",
    "matchpy.functions.Replacement",
    "multiset.Multiset",
    "op_iter",
    "sorted",
    "tuple",
    "typing.Tuple"
   ]
  },
  "type": "function"
 },
 "matchpy.functions.is_match": {
  "data": {
   "lineno": 315,
   "symbols_in_volume": [
    "any",
    "bool",
    "match"
   ]
  },
  "type": "function"
 },
 "matchpy.functions.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "matchpy.functions.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "matchpy.functions.replace": {
  "data": {
   "lineno": 96,
   "symbols_in_volume": [
    "IndexError",
    "create_operation_expression",
    "int",
    "isinstance",
    "len",
    "list",
    "matchpy.functions.Replacement",
    "op_iter",
    "op_len",
    "tuple",
    "typing.Sequence"
   ]
  },
  "type": "function"
 },
 "matchpy.functions.replace_all": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "StopIteration",
    "int",
    "match",
    "matchpy.functions.ReplacementRule",
    "matchpy.functions.math",
    "matchpy.functions.replace",
    "next",
    "preorder_iter_with_position",
    "replacement",
    "typing.Iterable",
    "typing.Sequence",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "matchpy.functions.replace_all_post_order": {
  "data": {
   "lineno": 264,
   "symbols_in_volume": [
    "matchpy.functions.ReplacementRule",
    "matchpy.functions._replace_all_post_order",
    "typing.Iterable",
    "typing.Sequence",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "matchpy.functions.replace_many": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "IndexError",
    "create_operation_expression",
    "int",
    "isinstance",
    "len",
    "list",
    "matchpy.functions.Replacement",
    "matchpy.functions.itertools",
    "matchpy.functions.replace",
    "multiset.Multiset",
    "op_iter",
    "sorted",
    "tuple",
    "typing.Sequence",
    "typing.Tuple"
   ]
  },
  "type": "function"
 },
 "matchpy.functions.substitute": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "isinstance",
    "matchpy.functions.Replacement",
    "matchpy.functions._substitute",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "matchpy.matching": {
  "data": {},
  "type": "module"
 },
 "matchpy.matching.__all__": {
  "data": {
   "lineno": 15
  },
  "type": "constant"
 },
 "matchpy.matching._common": {
  "data": {
   "symbols_in_volume": [
    "int",
    "type",
    "typing.Callable",
    "typing.Iterator",
    "typing.NamedTuple",
    "typing.Optional",
    "typing.Sequence"
   ]
  },
  "type": "module"
 },
 "matchpy.matching._common.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "matchpy.matching._common.CommutativePatternsParts": {
  "data": {
   "lineno": 17,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "matchpy.matching._common.CommutativePatternsParts.__init__": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "dict",
    "getattr",
    "is_constant",
    "is_syntactic",
    "isinstance",
    "len",
    "multiset.Multiset",
    "typing.Type",
    "typing.cast"
   ]
  },
  "type": "function"
 },
 "matchpy.matching._common.CommutativePatternsParts.__str__": {
  "data": {
   "lineno": 151,
   "symbols_in_volume": [
    "getattr",
    "map",
    "str"
   ]
  },
  "type": "function"
 },
 "matchpy.matching._common.CommutativePatternsParts._update_var_info": {
  "data": {
   "lineno": 141,
   "symbols_in_volume": [
    "matchpy.matching._common.VarInfo",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "matchpy.matching._common.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "matchpy.matching._common.Iterator": {
  "data": {
   "shadows": "typing.Iterator"
  },
  "type": "import"
 },
 "matchpy.matching._common.Matcher": {
  "data": {
   "lineno": 13
  },
  "type": "constant"
 },
 "matchpy.matching._common.Multiset": {
  "data": {
   "shadows": "multiset.Multiset"
  },
  "type": "import"
 },
 "matchpy.matching._common.NamedTuple": {
  "data": {
   "shadows": "typing.NamedTuple"
  },
  "type": "import"
 },
 "matchpy.matching._common.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "matchpy.matching._common.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "matchpy.matching._common.Type": {
  "data": {
   "shadows": "typing.Type"
  },
  "type": "import"
 },
 "matchpy.matching._common.VarInfo": {
  "data": {
   "lineno": 14
  },
  "type": "constant"
 },
 "matchpy.matching._common.__all__": {
  "data": {
   "lineno": 11
  },
  "type": "constant"
 },
 "matchpy.matching._common.cast": {
  "data": {
   "shadows": "typing.cast"
  },
  "type": "import"
 },
 "matchpy.matching._common.check_one_identity": {
  "data": {
   "lineno": 165,
   "symbols_in_volume": [
    "Substitution",
    "ValueError",
    "isinstance",
    "multiset.Multiset",
    "op_iter"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.bipartite": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "graphviz.Digraph",
    "graphviz.Graph",
    "int",
    "matchpy.matching.bipartite.Node",
    "matchpy.matching.bipartite.TLeft",
    "matchpy.matching.bipartite.TRight",
    "typing.Hashable",
    "typing.List",
    "typing.Set",
    "typing.Tuple",
    "typing.TypeVar",
    "typing.Union"
   ]
  },
  "type": "module"
 },
 "matchpy.matching.bipartite.BipartiteGraph": {
  "data": {
   "lineno": 34,
   "symbols_in_volume": [
    "matchpy.matching.bipartite.TEdgeValue",
    "matchpy.matching.bipartite.TLeft",
    "matchpy.matching.bipartite.TRight",
    "typing.Generic",
    "typing.MutableMapping",
    "typing.Tuple"
   ]
  },
  "type": "class"
 },
 "matchpy.matching.bipartite.BipartiteGraph.__copy__": {
  "data": {
   "lineno": 99,
   "symbols_in_volume": [
    "type"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.__delitem__": {
  "data": {
   "lineno": 75,
   "symbols_in_volume": [
    "TypeError",
    "all",
    "isinstance",
    "len",
    "matchpy.matching.bipartite.Edge",
    "matchpy.matching.bipartite.LEFT",
    "matchpy.matching.bipartite.RIGHT",
    "tuple"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.__eq__": {
  "data": {
   "lineno": 113,
   "symbols_in_volume": [
    "NotImplemented",
    "dict",
    "isinstance",
    "type"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.__getitem__": {
  "data": {
   "lineno": 70,
   "symbols_in_volume": [
    "TypeError",
    "isinstance",
    "len",
    "matchpy.matching.bipartite.Edge",
    "matchpy.matching.bipartite.TEdgeValue",
    "tuple"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.__init__": {
  "data": {
   "lineno": 48,
   "symbols_in_volume": [
    "dict",
    "matchpy.matching.bipartite.LEFT",
    "matchpy.matching.bipartite.RIGHT",
    "set"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.__iter__": {
  "data": {
   "lineno": 107
  },
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.__len__": {
  "data": {
   "lineno": 110
  },
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.__repr__": {
  "data": {
   "lineno": 188
  },
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.__setitem__": {
  "data": {
   "lineno": 61,
   "symbols_in_volume": [
    "TypeError",
    "isinstance",
    "len",
    "matchpy.matching.bipartite.Edge",
    "matchpy.matching.bipartite.LEFT",
    "matchpy.matching.bipartite.RIGHT",
    "matchpy.matching.bipartite.TEdgeValue",
    "set",
    "tuple"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.as_graph": {
  "data": {
   "lineno": 121,
   "symbols_in_volume": [
    "ImportError",
    "graphviz.Graph",
    "str"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.clear": {
  "data": {
   "lineno": 93
  },
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.edges": {
  "data": {
   "lineno": 90
  },
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.edges_with_labels": {
  "data": {
   "lineno": 86
  },
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.find_matching": {
  "data": {
   "lineno": 144,
   "symbols_in_volume": [
    "dict",
    "hopcroftkarp.HopcroftKarp",
    "matchpy.matching.bipartite.LEFT",
    "matchpy.matching.bipartite.RIGHT",
    "matchpy.matching.bipartite.TLeft",
    "matchpy.matching.bipartite.TRight",
    "typing.Dict"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.limited_to": {
  "data": {
   "lineno": 184,
   "symbols_in_volume": [
    "matchpy.matching.bipartite.BipartiteGraph",
    "matchpy.matching.bipartite.TLeft",
    "matchpy.matching.bipartite.TRight",
    "typing.Set"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.without_edge": {
  "data": {
   "lineno": 180,
   "symbols_in_volume": [
    "matchpy.matching.bipartite.BipartiteGraph",
    "matchpy.matching.bipartite.Edge"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.without_nodes": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "matchpy.matching.bipartite.BipartiteGraph",
    "matchpy.matching.bipartite.Edge"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.bipartite.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "matchpy.matching.bipartite.Digraph": {
  "data": {
   "shadows": "graphviz.Digraph"
  },
  "type": "import"
 },
 "matchpy.matching.bipartite.Edge": {
  "data": {
   "lineno": 28
  },
  "type": "constant"
 },
 "matchpy.matching.bipartite.Generic": {
  "data": {
   "shadows": "typing.Generic"
  },
  "type": "import"
 },
 "matchpy.matching.bipartite.Graph": {
  "data": {
   "shadows": "graphviz.Graph"
  },
  "type": "import"
 },
 "matchpy.matching.bipartite.Hashable": {
  "data": {
   "shadows": "typing.Hashable"
  },
  "type": "import"
 },
 "matchpy.matching.bipartite.HopcroftKarp": {
  "data": {
   "shadows": "hopcroftkarp.HopcroftKarp"
  },
  "type": "import"
 },
 "matchpy.matching.bipartite.Iterator": {
  "data": {
   "shadows": "typing.Iterator"
  },
  "type": "import"
 },
 "matchpy.matching.bipartite.LEFT": {
  "data": {
   "lineno": 30
  },
  "type": "constant"
 },
 "matchpy.matching.bipartite.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "matchpy.matching.bipartite.MutableMapping": {
  "data": {
   "shadows": "typing.MutableMapping"
  },
  "type": "import"
 },
 "matchpy.matching.bipartite.Node": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "matchpy.matching.bipartite.NodeList": {
  "data": {
   "lineno": 26
  },
  "type": "constant"
 },
 "matchpy.matching.bipartite.NodeSet": {
  "data": {
   "lineno": 27
  },
  "type": "constant"
 },
 "matchpy.matching.bipartite.RIGHT": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "matchpy.matching.bipartite.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "matchpy.matching.bipartite.T": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "matchpy.matching.bipartite.TEdgeValue": {
  "data": {
   "lineno": 23
  },
  "type": "constant"
 },
 "matchpy.matching.bipartite.TLeft": {
  "data": {
   "lineno": 21
  },
  "type": "constant"
 },
 "matchpy.matching.bipartite.TRight": {
  "data": {
   "lineno": 22
  },
  "type": "constant"
 },
 "matchpy.matching.bipartite.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "matchpy.matching.bipartite.TypeVar": {
  "data": {
   "shadows": "typing.TypeVar"
  },
  "type": "import"
 },
 "matchpy.matching.bipartite.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "matchpy.matching.bipartite._DirectedMatchGraph": {
  "data": {
   "lineno": 192,
   "symbols_in_volume": [
    "matchpy.matching.bipartite.Node",
    "matchpy.matching.bipartite.NodeSet",
    "matchpy.matching.bipartite.TLeft",
    "matchpy.matching.bipartite.TRight",
    "typing.Dict",
    "typing.Generic"
   ]
  },
  "type": "class"
 },
 "matchpy.matching.bipartite._DirectedMatchGraph.__init__": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "matchpy.matching.bipartite.BipartiteGraph",
    "matchpy.matching.bipartite.LEFT",
    "matchpy.matching.bipartite.RIGHT",
    "matchpy.matching.bipartite.TEdgeValue",
    "matchpy.matching.bipartite.TLeft",
    "matchpy.matching.bipartite.TRight",
    "matchpy.matching.bipartite._DirectedMatchGraph",
    "set",
    "super",
    "typing.Dict"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.bipartite._DirectedMatchGraph._find_cycle": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": [
    "ValueError",
    "matchpy.matching.bipartite.Node",
    "matchpy.matching.bipartite.NodeList",
    "matchpy.matching.bipartite.NodeSet",
    "typing.cast"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.bipartite._DirectedMatchGraph.as_graph": {
  "data": {
   "lineno": 203,
   "symbols_in_volume": [
    "ImportError",
    "graphviz.Digraph",
    "str"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.bipartite._DirectedMatchGraph.find_cycle": {
  "data": {
   "lineno": 232,
   "symbols_in_volume": [
    "matchpy.matching.bipartite.NodeList",
    "matchpy.matching.bipartite.NodeSet",
    "set",
    "typing.cast"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.bipartite.__all__": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "matchpy.matching.bipartite._enum_maximum_matchings_iter": {
  "data": {
   "lineno": 269,
   "symbols_in_volume": [
    "len",
    "list",
    "matchpy.matching.bipartite.BipartiteGraph",
    "matchpy.matching.bipartite.Edge",
    "matchpy.matching.bipartite.LEFT",
    "matchpy.matching.bipartite.RIGHT",
    "matchpy.matching.bipartite.TEdgeValue",
    "matchpy.matching.bipartite.TLeft",
    "matchpy.matching.bipartite.TRight",
    "matchpy.matching.bipartite._DirectedMatchGraph",
    "range",
    "tuple",
    "typing.Dict",
    "typing.Iterator",
    "typing.cast"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.bipartite.cast": {
  "data": {
   "shadows": "typing.cast"
  },
  "type": "import"
 },
 "matchpy.matching.bipartite.enum_maximum_matchings_iter": {
  "data": {
   "lineno": 261,
   "symbols_in_volume": [
    "matchpy.matching.bipartite.BipartiteGraph",
    "matchpy.matching.bipartite.TEdgeValue",
    "matchpy.matching.bipartite.TLeft",
    "matchpy.matching.bipartite.TRight",
    "matchpy.matching.bipartite._DirectedMatchGraph",
    "matchpy.matching.bipartite._enum_maximum_matchings_iter",
    "typing.Dict",
    "typing.Iterator"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.code_generation": {
  "data": {
   "symbols_in_volume": [
    "matchpy.matching.code_generation.re"
   ]
  },
  "type": "module"
 },
 "matchpy.matching.code_generation.COLLAPSE_IF_RE": {
  "data": {
   "lineno": 10
  },
  "type": "constant"
 },
 "matchpy.matching.code_generation.CodeGenerator": {
  "data": {
   "lineno": 19
  },
  "type": "class"
 },
 "matchpy.matching.code_generation.CodeGenerator.__init__": {
  "data": {
   "lineno": 20,
   "symbols_in_volume": [
    "len",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator._collapse_ifs": {
  "data": {
   "lineno": 498,
   "symbols_in_volume": [
    "matchpy.matching.code_generation.COLLAPSE_IF_RE",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator._collapse_ifs.sub_cb": {
  "data": {
   "lineno": 500,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.add_line": {
  "data": {
   "lineno": 41,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.clean_code": {
  "data": {
   "lineno": 495,
   "symbols_in_volume": [
    "matchpy.matching.code_generation.re"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.commutative_patterns": {
  "data": {
   "lineno": 167,
   "symbols_in_volume": [
    "map",
    "sorted"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.commutative_var_entry": {
  "data": {
   "lineno": 161,
   "symbols_in_volume": [
    "isinstance",
    "repr",
    "type"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.constraint_repr": {
  "data": {
   "lineno": 481,
   "symbols_in_volume": [
    "get_short_lambda_source",
    "isinstance",
    "map",
    "matchpy.matching.code_generation.re",
    "repr",
    "type"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.create_operation": {
  "data": {
   "lineno": 415
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.dedent": {
  "data": {
   "lineno": 37
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.enter_eps": {
  "data": {
   "lineno": 235
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.enter_fixed_wildcard": {
  "data": {
   "lineno": 288
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.enter_global_constraint": {
  "data": {
   "lineno": 472
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.enter_operation": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "issubclass"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.enter_operation_end": {
  "data": {
   "lineno": 362
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.enter_optional_wildcard": {
  "data": {
   "lineno": 339
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.enter_sequence_wildcard": {
  "data": {
   "lineno": 380,
   "symbols_in_volume": [
    "range"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.enter_subst": {
  "data": {
   "lineno": 313
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.enter_symbol": {
  "data": {
   "lineno": 348
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.enter_symbol_wildcard": {
  "data": {
   "lineno": 271
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.enter_variable_assignment": {
  "data": {
   "lineno": 299
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.exit_eps": {
  "data": {
   "lineno": 238
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.exit_fixed_wildcard": {
  "data": {
   "lineno": 295
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.exit_global_constraint": {
  "data": {
   "lineno": 492
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.exit_operation": {
  "data": {
   "lineno": 263
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.exit_operation_end": {
  "data": {
   "lineno": 372
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.exit_optional_wildcard": {
  "data": {
   "lineno": 345
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.exit_sequence_wildcard": {
  "data": {
   "lineno": 418
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.exit_subst": {
  "data": {
   "lineno": 331
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.exit_symbol": {
  "data": {
   "lineno": 358
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.exit_symbol_wildcard": {
  "data": {
   "lineno": 284
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.exit_variable_assignment": {
  "data": {
   "lineno": 335
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.expr": {
  "data": {
   "lineno": 328,
   "symbols_in_volume": [
    "repr"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.final_label": {
  "data": {
   "lineno": 64,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.generate_code": {
  "data": {
   "lineno": 48
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.generate_constraints": {
  "data": {
   "lineno": 439,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.generate_state_code": {
  "data": {
   "lineno": 67,
   "symbols_in_volume": [
    "get_variables",
    "iter",
    "next",
    "repr",
    "set",
    "set.union",
    "sorted",
    "type"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.generate_transition_code": {
  "data": {
   "lineno": 176,
   "symbols_in_volume": [
    "enter_func",
    "exit_func",
    "is_operation",
    "isinstance",
    "sorted",
    "tuple"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.get_args": {
  "data": {
   "lineno": 223
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.get_var_name": {
  "data": {
   "lineno": 44,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.indent": {
  "data": {
   "lineno": 34
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.operation_symbol": {
  "data": {
   "lineno": 258
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.optional_expr": {
  "data": {
   "lineno": 342,
   "symbols_in_volume": [
    "repr"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.push_subjects": {
  "data": {
   "lineno": 226
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.push_subst": {
  "data": {
   "lineno": 230
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.symbol_repr": {
  "data": {
   "lineno": 355,
   "symbols_in_volume": [
    "repr"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.symbol_type": {
  "data": {
   "lineno": 281
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.yield_final_substitution": {
  "data": {
   "lineno": 428,
   "symbols_in_volume": [
    "any"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.code_generation.re": {
  "data": {
   "shadows": "re"
  },
  "type": "import"
 },
 "matchpy.matching.many_to_one": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "Substitution",
    "graphviz.Digraph",
    "graphviz.Graph",
    "int",
    "matchpy.matching.many_to_one.LabelType",
    "matchpy.matching.many_to_one._State",
    "multiset.Multiset",
    "object",
    "set",
    "str",
    "typing.Dict",
    "typing.NamedTuple",
    "typing.Optional",
    "typing.Set",
    "typing.Tuple",
    "typing.Type",
    "typing.Union"
   ]
  },
  "type": "module"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher": {
  "data": {
   "lineno": 847,
   "symbols_in_volume": [
    "object"
   ]
  },
  "type": "class"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher.__init__": {
  "data": {
   "lineno": 852,
   "symbols_in_volume": [
    "BipartiteGraph",
    "matchpy.matching.many_to_one.ManyToOneMatcher",
    "set",
    "type",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher._build_bipartite": {
  "data": {
   "lineno": 1021,
   "symbols_in_volume": [
    "BipartiteGraph",
    "matchpy.matching.many_to_one.MultisetOfInt",
    "matchpy.matching.many_to_one.Subgraph",
    "range"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher._extract_sequence_wildcards": {
  "data": {
   "lineno": 928,
   "symbols_in_volume": [
    "Pattern",
    "VariableWithCount",
    "Wildcard",
    "bool",
    "contains_variables_from_set",
    "dict",
    "enumerate",
    "getattr",
    "hasattr",
    "is_anonymous",
    "isinstance",
    "matchpy.matching.many_to_one.MultisetOfInt",
    "multiset.Multiset",
    "op_iter",
    "preorder_iter",
    "set",
    "str",
    "typing.Dict",
    "typing.Iterable",
    "typing.Tuple"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher._is_canonical_matching": {
  "data": {
   "lineno": 1047,
   "symbols_in_volume": [
    "bool",
    "matchpy.matching.many_to_one.Matching"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher._is_sequence_wildcard": {
  "data": {
   "lineno": 972,
   "symbols_in_volume": [
    "SymbolWildcard",
    "Wildcard",
    "bool",
    "isinstance"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher._match_sequence_variables": {
  "data": {
   "lineno": 999,
   "symbols_in_volume": [
    "Substitution",
    "ValueError",
    "VariableWithCount",
    "commutative_sequence_variable_partition_iter",
    "isinstance",
    "iter",
    "len",
    "list",
    "matchpy.matching.many_to_one.MultisetOfExpression",
    "multiset.Multiset",
    "next",
    "tuple",
    "typing.Iterator",
    "typing.Sequence"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher._match_with_bipartite": {
  "data": {
   "lineno": 979,
   "symbols_in_volume": [
    "Substitution",
    "ValueError",
    "enum_maximum_matchings_iter",
    "len",
    "matchpy.matching.many_to_one.MultisetOfInt",
    "matchpy.matching.many_to_one.itertools",
    "multiset.Multiset",
    "typing.Iterator",
    "typing.Tuple"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher.add_pattern": {
  "data": {
   "lineno": 862,
   "symbols_in_volume": [
    "int",
    "len",
    "sorted",
    "tuple",
    "typing.Iterable"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher.add_subject": {
  "data": {
   "lineno": 882,
   "symbols_in_volume": [
    "Substitution",
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher.bipartite_as_graph": {
  "data": {
   "lineno": 1058,
   "symbols_in_volume": [
    "ImportError",
    "graphviz.Graph",
    "str"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher.concrete_bipartite_as_graph": {
  "data": {
   "lineno": 1083,
   "symbols_in_volume": [
    "ImportError",
    "graphviz.Graph",
    "str"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher.get_match_iter": {
  "data": {
   "lineno": 874,
   "symbols_in_volume": [
    "Substitution",
    "matchpy.matching.many_to_one._MatchIter"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher.match": {
  "data": {
   "lineno": 893,
   "symbols_in_volume": [
    "Substitution",
    "id",
    "int",
    "len",
    "multiset.Multiset",
    "op_iter",
    "op_len",
    "range",
    "typing.Iterator",
    "typing.Sequence",
    "typing.Tuple"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.Container": {
  "data": {
   "shadows": "typing.Container"
  },
  "type": "import"
 },
 "matchpy.matching.many_to_one.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "matchpy.matching.many_to_one.Digraph": {
  "data": {
   "lineno": 44
  },
  "type": "constant"
 },
 "matchpy.matching.many_to_one.Graph": {
  "data": {
   "lineno": 45
  },
  "type": "constant"
 },
 "matchpy.matching.many_to_one.HeadType": {
  "data": {
   "lineno": 65
  },
  "type": "constant"
 },
 "matchpy.matching.many_to_one.Iterable": {
  "data": {
   "shadows": "typing.Iterable"
  },
  "type": "import"
 },
 "matchpy.matching.many_to_one.Iterator": {
  "data": {
   "shadows": "typing.Iterator"
  },
  "type": "import"
 },
 "matchpy.matching.many_to_one.LabelType": {
  "data": {
   "lineno": 64
  },
  "type": "constant"
 },
 "matchpy.matching.many_to_one.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher": {
  "data": {
   "lineno": 322
  },
  "type": "class"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher.__init__": {
  "data": {
   "lineno": 327,
   "symbols_in_volume": [
    "set"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._add_constraint": {
  "data": {
   "lineno": 420,
   "symbols_in_volume": [
    "constraint",
    "constraint.variables",
    "enumerate",
    "len",
    "set"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._as_graph": {
  "data": {
   "lineno": 644,
   "symbols_in_volume": [
    "ImportError",
    "enumerate",
    "graphviz.Digraph",
    "matchpy.matching.many_to_one.html",
    "str",
    "typing.List",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._collect_variable_renaming": {
  "data": {
   "lineno": 531,
   "symbols_in_volume": [
    "classmethod",
    "getattr",
    "int",
    "isinstance",
    "op_iter",
    "str",
    "typing.Dict",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._colored_constraint": {
  "data": {
   "lineno": 626,
   "symbols_in_volume": [
    "classmethod",
    "len"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._colored_pattern": {
  "data": {
   "lineno": 621,
   "symbols_in_volume": [
    "classmethod",
    "len"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._colored_variable": {
  "data": {
   "lineno": 631,
   "symbols_in_volume": [
    "classmethod",
    "hash",
    "len"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._create_expression_transition": {
  "data": {
   "lineno": 457,
   "symbols_in_volume": [
    "int",
    "isinstance",
    "list",
    "matchpy.matching.many_to_one.CommutativeMatcher",
    "matchpy.matching.many_to_one._State",
    "matchpy.matching.many_to_one._Transition",
    "set",
    "str",
    "type",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._create_simple_transition": {
  "data": {
   "lineno": 494,
   "symbols_in_volume": [
    "int",
    "matchpy.matching.many_to_one.LabelType",
    "matchpy.matching.many_to_one._State",
    "matchpy.matching.many_to_one._Transition"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._create_state": {
  "data": {
   "lineno": 525,
   "symbols_in_volume": [
    "dict",
    "matchpy.matching.many_to_one.ManyToOneMatcher",
    "matchpy.matching.many_to_one._State"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._format_constraint_set": {
  "data": {
   "lineno": 640,
   "symbols_in_volume": [
    "classmethod",
    "map"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._format_pattern_set": {
  "data": {
   "lineno": 636,
   "symbols_in_volume": [
    "classmethod",
    "map"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._get_label_and_head": {
  "data": {
   "lineno": 504,
   "symbols_in_volume": [
    "SymbolWildcard",
    "Wildcard",
    "isinstance",
    "matchpy.matching.many_to_one.HeadType",
    "matchpy.matching.many_to_one.LabelType",
    "matchpy.matching.many_to_one._EPS",
    "staticmethod",
    "type",
    "typing.Tuple"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._get_name_for_position": {
  "data": {
   "lineno": 560,
   "symbols_in_volume": [
    "int",
    "map",
    "staticmethod",
    "str",
    "typing.Container",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._internal_add": {
  "data": {
   "lineno": 369,
   "symbols_in_volume": [
    "collections.deque",
    "int",
    "len",
    "rename_variables"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._make_graph_edges": {
  "data": {
   "lineno": 720,
   "symbols_in_volume": [
    "graphviz.Digraph",
    "is_operation",
    "len",
    "matchpy.matching.many_to_one._EPS",
    "matchpy.matching.many_to_one.html",
    "str"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._make_graph_nodes": {
  "data": {
   "lineno": 668,
   "symbols_in_volume": [
    "enumerate",
    "graphviz.Digraph",
    "len",
    "matchpy.matching.many_to_one._VISITED",
    "matchpy.matching.many_to_one.itertools",
    "set",
    "str",
    "typing.List",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._process_pattern_stack": {
  "data": {
   "lineno": 394,
   "symbols_in_volume": [
    "check_one_identity",
    "collections.deque",
    "getattr",
    "isinstance",
    "len",
    "matchpy.matching.many_to_one._EPS",
    "op_iter"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher.add": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": [
    "enumerate"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher.as_graph": {
  "data": {
   "lineno": 570,
   "symbols_in_volume": [
    "graphviz.Digraph"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher.is_match": {
  "data": {
   "lineno": 445,
   "symbols_in_volume": [
    "bool",
    "matchpy.matching.many_to_one._MatchIter"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher.match": {
  "data": {
   "lineno": 434,
   "symbols_in_volume": [
    "Substitution",
    "matchpy.matching.many_to_one._MatchIter",
    "typing.Iterator",
    "typing.Tuple"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneReplacer": {
  "data": {
   "lineno": 744
  },
  "type": "class"
 },
 "matchpy.matching.many_to_one.ManyToOneReplacer.__init__": {
  "data": {
   "lineno": 747,
   "symbols_in_volume": [
    "matchpy.matching.many_to_one.ManyToOneMatcher"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneReplacer._replace_post_order": {
  "data": {
   "lineno": 825,
   "symbols_in_volume": [
    "StopIteration",
    "any",
    "create_operation_expression",
    "isinstance",
    "iter",
    "next",
    "op_iter",
    "replacement"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneReplacer.add": {
  "data": {
   "lineno": 766
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneReplacer.replace": {
  "data": {
   "lineno": 775,
   "symbols_in_volume": [
    "StopIteration",
    "int",
    "iter",
    "matchpy.matching.many_to_one.math",
    "next",
    "preorder_iter_with_position",
    "replacement",
    "typing.Sequence",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneReplacer.replace_post_order": {
  "data": {
   "lineno": 806,
   "symbols_in_volume": [
    "typing.Sequence",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.Matching": {
  "data": {
   "lineno": 844
  },
  "type": "constant"
 },
 "matchpy.matching.many_to_one.Multiset": {
  "data": {
   "shadows": "multiset.Multiset"
  },
  "type": "import"
 },
 "matchpy.matching.many_to_one.MultisetOfExpression": {
  "data": {
   "lineno": 67
  },
  "type": "constant"
 },
 "matchpy.matching.many_to_one.MultisetOfInt": {
  "data": {
   "lineno": 66
  },
  "type": "constant"
 },
 "matchpy.matching.many_to_one.NamedTuple": {
  "data": {
   "shadows": "typing.NamedTuple"
  },
  "type": "import"
 },
 "matchpy.matching.many_to_one.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "matchpy.matching.many_to_one.SecondaryAutomaton": {
  "data": {
   "lineno": 1112
  },
  "type": "class"
 },
 "matchpy.matching.many_to_one.SecondaryAutomaton.__init__": {
  "data": {
   "lineno": 1114
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.SecondaryAutomaton._build": {
  "data": {
   "lineno": 1121,
   "symbols_in_volume": [
    "dict",
    "enumerate",
    "frozenset",
    "range",
    "set",
    "sorted",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.SecondaryAutomaton.as_graph": {
  "data": {
   "lineno": 1155,
   "symbols_in_volume": [
    "ImportError",
    "bin",
    "enumerate",
    "graphviz.Digraph",
    "len",
    "matchpy.matching.many_to_one.itertools",
    "operator.itemgetter",
    "range",
    "sorted",
    "str"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.SecondaryAutomaton.match": {
  "data": {
   "lineno": 1118,
   "symbols_in_volume": [
    "NotImplementedError"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "matchpy.matching.many_to_one.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "matchpy.matching.many_to_one.Subgraph": {
  "data": {
   "lineno": 843
  },
  "type": "constant"
 },
 "matchpy.matching.many_to_one.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "matchpy.matching.many_to_one.Type": {
  "data": {
   "shadows": "typing.Type"
  },
  "type": "import"
 },
 "matchpy.matching.many_to_one.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "matchpy.matching.many_to_one._EPS": {
  "data": {
   "lineno": 69
  },
  "type": "constant"
 },
 "matchpy.matching.many_to_one._MatchIter": {
  "data": {
   "lineno": 89
  },
  "type": "class"
 },
 "matchpy.matching.many_to_one._MatchIter.__init__": {
  "data": {
   "lineno": 90,
   "symbols_in_volume": [
    "Substitution",
    "collections.deque",
    "len",
    "range",
    "set"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one._MatchIter.__iter__": {
  "data": {
   "lineno": 98
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one._MatchIter._check_constraints": {
  "data": {
   "lineno": 222,
   "symbols_in_volume": [
    "bool",
    "constraint",
    "constraint.variables",
    "isinstance",
    "set",
    "str"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one._MatchIter._check_transition": {
  "data": {
   "lineno": 178,
   "symbols_in_volume": [
    "ValueError",
    "set"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one._MatchIter._get_heads": {
  "data": {
   "lineno": 241,
   "symbols_in_volume": [
    "isinstance",
    "matchpy.matching.many_to_one.HeadType",
    "object",
    "staticmethod",
    "type",
    "typing.Iterator"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one._MatchIter._internal_iter": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "constraint"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one._MatchIter._match": {
  "data": {
   "lineno": 138,
   "symbols_in_volume": [
    "len",
    "list",
    "matchpy.matching.many_to_one._State",
    "matchpy.matching.many_to_one._VISITED",
    "typing.Iterator"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one._MatchIter._match_commutative_operation": {
  "data": {
   "lineno": 275,
   "symbols_in_volume": [
    "iter",
    "matchpy.matching.many_to_one._State",
    "next",
    "op_iter",
    "set",
    "typing.Iterator"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one._MatchIter._match_regular_operation": {
  "data": {
   "lineno": 304,
   "symbols_in_volume": [
    "collections.deque",
    "issubclass",
    "matchpy.matching.many_to_one._State",
    "matchpy.matching.many_to_one._Transition",
    "op_iter",
    "typing.Iterator"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one._MatchIter._match_sequence_variable": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "len",
    "matchpy.matching.many_to_one._State",
    "matchpy.matching.many_to_one._Transition",
    "range",
    "reversed",
    "tuple",
    "typing.Iterator"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one._MatchIter._match_transition": {
  "data": {
   "lineno": 150,
   "symbols_in_volume": [
    "is_operation",
    "isinstance",
    "matchpy.matching.many_to_one._EPS",
    "matchpy.matching.many_to_one._State",
    "matchpy.matching.many_to_one._Transition",
    "typing.Iterator"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one._MatchIter.any": {
  "data": {
   "lineno": 114,
   "symbols_in_volume": [
    "StopIteration",
    "next"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one._MatchIter.grouped": {
  "data": {
   "lineno": 102,
   "symbols_in_volume": [
    "list"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.many_to_one._State": {
  "data": {
   "lineno": 71
  },
  "type": "constant"
 },
 "matchpy.matching.many_to_one._Transition": {
  "data": {
   "lineno": 77
  },
  "type": "constant"
 },
 "matchpy.matching.many_to_one._VISITED": {
  "data": {
   "lineno": 87
  },
  "type": "constant"
 },
 "matchpy.matching.many_to_one.__all__": {
  "data": {
   "lineno": 62
  },
  "type": "constant"
 },
 "matchpy.matching.many_to_one.deque": {
  "data": {
   "shadows": "collections.deque"
  },
  "type": "import"
 },
 "matchpy.matching.many_to_one.html": {
  "data": {
   "shadows": "html"
  },
  "type": "import"
 },
 "matchpy.matching.many_to_one.itemgetter": {
  "data": {
   "shadows": "operator.itemgetter"
  },
  "type": "import"
 },
 "matchpy.matching.many_to_one.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "matchpy.matching.many_to_one.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "matchpy.matching.one_to_one": {
  "data": {},
  "type": "module"
 },
 "matchpy.matching.one_to_one.Iterable": {
  "data": {
   "shadows": "typing.Iterable"
  },
  "type": "import"
 },
 "matchpy.matching.one_to_one.Iterator": {
  "data": {
   "shadows": "typing.Iterator"
  },
  "type": "import"
 },
 "matchpy.matching.one_to_one.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "matchpy.matching.one_to_one.Multiset": {
  "data": {
   "shadows": "multiset.Multiset"
  },
  "type": "import"
 },
 "matchpy.matching.one_to_one.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "matchpy.matching.one_to_one.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "matchpy.matching.one_to_one.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "matchpy.matching.one_to_one.__all__": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "matchpy.matching.one_to_one._build_full_partition": {
  "data": {
   "lineno": 179,
   "symbols_in_volume": [
    "create_operation_expression",
    "int",
    "isinstance",
    "len",
    "list",
    "op_iter",
    "tuple",
    "typing.List",
    "typing.Sequence"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.one_to_one._check_constraints": {
  "data": {
   "lineno": 132,
   "symbols_in_volume": [
    "constraint",
    "constraint.variables",
    "list",
    "set"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.one_to_one._count_seq_vars": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "ValueError",
    "isinstance",
    "op_iter",
    "op_len"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.one_to_one._fixed_expr_factory": {
  "data": {
   "lineno": 351
  },
  "type": "function"
 },
 "matchpy.matching.one_to_one._fixed_expr_factory.factory": {
  "data": {
   "lineno": 352,
   "symbols_in_volume": [
    "match_head",
    "matchpy.matching.one_to_one._match",
    "multiset.Multiset"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.one_to_one._fixed_var_iter_factory": {
  "data": {
   "lineno": 362
  },
  "type": "function"
 },
 "matchpy.matching.one_to_one._fixed_var_iter_factory.factory": {
  "data": {
   "lineno": 363,
   "symbols_in_volume": [
    "Substitution",
    "dict",
    "enumerate",
    "fixed_integer_vector_iter",
    "isinstance",
    "list",
    "matchpy.matching.one_to_one._check_constraints",
    "multiset.Multiset",
    "tuple"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.one_to_one._match": {
  "data": {
   "lineno": 82,
   "symbols_in_volume": [
    "Substitution",
    "ValueError",
    "getattr",
    "isinstance",
    "iter",
    "len",
    "matchpy.matching.one_to_one._check_constraints",
    "matchpy.matching.one_to_one._match_one_identity",
    "matchpy.matching.one_to_one._match_operation",
    "tuple",
    "type",
    "typing.Iterator",
    "typing.List",
    "typing.Set",
    "typing.cast"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.one_to_one._match_commutative_operation": {
  "data": {
   "lineno": 257,
   "symbols_in_volume": [
    "CommutativePatternsParts",
    "Substitution",
    "ValueError",
    "VariableWithCount",
    "commutative_sequence_variable_partition_iter",
    "generator_chain",
    "isinstance",
    "issubclass",
    "iter",
    "len",
    "list",
    "matchpy.matching.one_to_one._check_constraints",
    "matchpy.matching.one_to_one._fixed_expr_factory",
    "matchpy.matching.one_to_one._fixed_var_iter_factory",
    "matchpy.matching.one_to_one._variables_with_counts",
    "multiset.Multiset",
    "next",
    "op_iter",
    "tuple",
    "typing.Iterable",
    "typing.Iterator",
    "typing.Sequence",
    "typing.cast"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.one_to_one._match_factory": {
  "data": {
   "lineno": 151
  },
  "type": "function"
 },
 "matchpy.matching.one_to_one._match_factory.factory": {
  "data": {
   "lineno": 152,
   "symbols_in_volume": [
    "matchpy.matching.one_to_one._match"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.one_to_one._match_one_identity": {
  "data": {
   "lineno": 235,
   "symbols_in_volume": [
    "ValueError",
    "check_one_identity",
    "matchpy.matching.one_to_one._match"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.one_to_one._match_operation": {
  "data": {
   "lineno": 245,
   "symbols_in_volume": [
    "CommutativePatternsParts",
    "isinstance",
    "matchpy.matching.one_to_one._match_commutative_operation",
    "matchpy.matching.one_to_one._non_commutative_match",
    "op_iter",
    "op_len",
    "type"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.one_to_one._non_commutative_match": {
  "data": {
   "lineno": 219,
   "symbols_in_volume": [
    "ValueError",
    "generator_chain",
    "matchpy.matching.one_to_one._build_full_partition",
    "matchpy.matching.one_to_one._count_seq_vars",
    "matchpy.matching.one_to_one._match_factory",
    "op_iter",
    "optional_iter",
    "weak_composition_iter",
    "zip"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.one_to_one._variables_with_counts": {
  "data": {
   "lineno": 344,
   "symbols_in_volume": [
    "VariableWithCount",
    "tuple"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.one_to_one.cast": {
  "data": {
   "shadows": "typing.cast"
  },
  "type": "import"
 },
 "matchpy.matching.one_to_one.match": {
  "data": {
   "lineno": 23,
   "symbols_in_volume": [
    "Substitution",
    "ValueError",
    "constraint",
    "is_constant",
    "matchpy.matching.one_to_one._match",
    "set",
    "typing.Iterator"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.one_to_one.match_anywhere": {
  "data": {
   "lineno": 53,
   "symbols_in_volume": [
    "Substitution",
    "ValueError",
    "int",
    "is_constant",
    "match_head",
    "matchpy.matching.one_to_one.match",
    "preorder_iter_with_position",
    "typing.Iterator",
    "typing.Tuple"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic": {
  "data": {
   "symbols_in_volume": [
    "ImportError",
    "graphviz.Digraph",
    "matchpy.matching.syntactic.EPSILON",
    "matchpy.matching.syntactic.OPERATION_END",
    "type",
    "typing.Type",
    "typing.TypeVar",
    "typing.Union"
   ]
  },
  "type": "module"
 },
 "matchpy.matching.syntactic.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "matchpy.matching.syntactic.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "matchpy.matching.syntactic.Digraph": {
  "data": {
   "lineno": 20
  },
  "type": "constant"
 },
 "matchpy.matching.syntactic.DiscriminationNet": {
  "data": {
   "lineno": 307,
   "symbols_in_volume": [
    "matchpy.matching.syntactic.T",
    "typing.Generic"
   ]
  },
  "type": "class"
 },
 "matchpy.matching.syntactic.DiscriminationNet.__init__": {
  "data": {
   "lineno": 318,
   "symbols_in_volume": [
    "matchpy.matching.syntactic._State"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet._convert_nfa_to_dfa": {
  "data": {
   "lineno": 472,
   "symbols_in_volume": [
    "classmethod",
    "cls._create_state",
    "cls._epsilon_closure",
    "cls._target_set",
    "int",
    "matchpy.matching.syntactic.EPSILON",
    "matchpy.matching.syntactic.T",
    "matchpy.matching.syntactic._State",
    "set",
    "typing.Dict"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet._create_child_state": {
  "data": {
   "lineno": 358,
   "symbols_in_volume": [
    "matchpy.matching.syntactic.T",
    "matchpy.matching.syntactic.TransitionLabel",
    "matchpy.matching.syntactic._State",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet._create_state": {
  "data": {
   "lineno": 463,
   "symbols_in_volume": [
    "int",
    "list",
    "matchpy.matching.syntactic.T",
    "matchpy.matching.syntactic._State",
    "set",
    "staticmethod",
    "typing.Dict",
    "typing.Set"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet._epsilon_closure": {
  "data": {
   "lineno": 495,
   "symbols_in_volume": [
    "KeyError",
    "frozenset",
    "int",
    "matchpy.matching.syntactic.EPSILON",
    "matchpy.matching.syntactic.T",
    "matchpy.matching.syntactic._State",
    "set",
    "staticmethod",
    "typing.Dict",
    "typing.FrozenSet",
    "typing.Set"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet._generate_net": {
  "data": {
   "lineno": 384,
   "symbols_in_volume": [
    "Wildcard",
    "classmethod",
    "cls._convert_nfa_to_dfa",
    "cls._create_child_state",
    "isinstance",
    "list",
    "matchpy.matching.syntactic.EPSILON",
    "matchpy.matching.syntactic.FlatTerm",
    "matchpy.matching.syntactic.OPERATION_END",
    "matchpy.matching.syntactic.T",
    "matchpy.matching.syntactic._State",
    "matchpy.matching.syntactic.is_operation",
    "range"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet._generate_state_chain": {
  "data": {
   "lineno": 378,
   "symbols_in_volume": [
    "classmethod",
    "cls._create_child_state",
    "int",
    "matchpy.matching.syntactic.T",
    "matchpy.matching.syntactic.TransitionLabel",
    "matchpy.matching.syntactic._State",
    "range"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet._generate_syntactic_net": {
  "data": {
   "lineno": 364,
   "symbols_in_volume": [
    "Wildcard",
    "classmethod",
    "cls._create_child_state",
    "cls._generate_state_chain",
    "isinstance",
    "matchpy.matching.syntactic.FlatTerm",
    "matchpy.matching.syntactic.T",
    "matchpy.matching.syntactic._State"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet._get_next_state": {
  "data": {
   "lineno": 536,
   "symbols_in_volume": [
    "KeyError",
    "Wildcard",
    "bool",
    "isinstance",
    "matchpy.matching.syntactic.OPERATION_END",
    "matchpy.matching.syntactic.T",
    "matchpy.matching.syntactic.TransitionLabel",
    "matchpy.matching.syntactic._State",
    "matchpy.matching.syntactic._get_symbol_wildcard_label",
    "staticmethod",
    "typing.Tuple"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet._match": {
  "data": {
   "lineno": 612,
   "symbols_in_volume": [
    "KeyError",
    "TypeError",
    "Wildcard",
    "bool",
    "isinstance",
    "matchpy.matching.syntactic.FlatTerm",
    "matchpy.matching.syntactic.OPERATION_END",
    "matchpy.matching.syntactic.T",
    "matchpy.matching.syntactic._get_symbol_wildcard_label",
    "matchpy.matching.syntactic.is_operation",
    "typing.List",
    "typing.Tuple",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet._product_net": {
  "data": {
   "lineno": 555,
   "symbols_in_volume": [
    "AssertionError",
    "Wildcard",
    "classmethod",
    "cls._get_next_state",
    "len",
    "list",
    "matchpy.matching.syntactic.OPERATION_END",
    "matchpy.matching.syntactic.T",
    "matchpy.matching.syntactic._State",
    "matchpy.matching.syntactic._StateQueueItem",
    "matchpy.matching.syntactic.is_operation"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet._target_set": {
  "data": {
   "lineno": 516,
   "symbols_in_volume": [
    "Wildcard",
    "Wildcard.id",
    "classmethod",
    "cls._epsilon_closure",
    "int",
    "isinstance",
    "matchpy.matching.syntactic.OPERATION_END",
    "matchpy.matching.syntactic.T",
    "matchpy.matching.syntactic.TransitionLabel",
    "matchpy.matching.syntactic._State",
    "matchpy.matching.syntactic._get_symbol_wildcard_label",
    "matchpy.matching.syntactic.is_operation",
    "set",
    "typing.Dict",
    "typing.FrozenSet",
    "typing.Set"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet.add": {
  "data": {
   "lineno": 329,
   "symbols_in_volume": [
    "int",
    "isinstance",
    "len",
    "matchpy.matching.syntactic.FlatTerm",
    "matchpy.matching.syntactic.T",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet.as_graph": {
  "data": {
   "lineno": 682,
   "symbols_in_volume": [
    "ImportError",
    "graphviz.Digraph",
    "map",
    "matchpy.matching.syntactic._term_str",
    "set",
    "str"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet.is_match": {
  "data": {
   "lineno": 666,
   "symbols_in_volume": [
    "StopIteration",
    "bool",
    "matchpy.matching.syntactic.FlatTerm",
    "next",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet.match": {
  "data": {
   "lineno": 645,
   "symbols_in_volume": [
    "Substitution",
    "constraint",
    "matchpy.matching.syntactic.FlatTerm",
    "matchpy.matching.syntactic.T",
    "typing.Iterator",
    "typing.Tuple",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.EPSILON": {
  "data": {
   "lineno": 36
  },
  "type": "constant"
 },
 "matchpy.matching.syntactic.FlatTerm": {
  "data": {
   "lineno": 59,
   "symbols_in_volume": [
    "matchpy.matching.syntactic.TermAtom",
    "typing.Sequence"
   ]
  },
  "type": "class"
 },
 "matchpy.matching.syntactic.FlatTerm.__add__": {
  "data": {
   "lineno": 118,
   "symbols_in_volume": [
    "NotImplemented",
    "isinstance",
    "matchpy.matching.syntactic.FlatTerm",
    "tuple",
    "typing.Sequence"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.FlatTerm.__contains__": {
  "data": {
   "lineno": 112
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.FlatTerm.__eq__": {
  "data": {
   "lineno": 125,
   "symbols_in_volume": [
    "NotImplemented",
    "isinstance",
    "matchpy.matching.syntactic.FlatTerm"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.FlatTerm.__getitem__": {
  "data": {
   "lineno": 106
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.FlatTerm.__init__": {
  "data": {
   "lineno": 101,
   "symbols_in_volume": [
    "isinstance",
    "matchpy.matching.syntactic.TermAtom",
    "tuple",
    "typing.Sequence",
    "typing.Union"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.FlatTerm.__iter__": {
  "data": {
   "lineno": 115,
   "symbols_in_volume": [
    "iter"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.FlatTerm.__len__": {
  "data": {
   "lineno": 109,
   "symbols_in_volume": [
    "len"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.FlatTerm.__repr__": {
  "data": {
   "lineno": 196,
   "symbols_in_volume": [
    "map",
    "str"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.FlatTerm.__str__": {
  "data": {
   "lineno": 193,
   "symbols_in_volume": [
    "map"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.FlatTerm._combined_wildcards_iter": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "Wildcard",
    "isinstance",
    "matchpy.matching.syntactic.TermAtom",
    "staticmethod",
    "typing.Iterator"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.FlatTerm._flatterm_iter": {
  "data": {
   "lineno": 158,
   "symbols_in_volume": [
    "classmethod",
    "cls._flatterm_iter",
    "isinstance",
    "matchpy.matching.syntactic.OPERATION_END",
    "matchpy.matching.syntactic.TermAtom",
    "op_iter",
    "type",
    "typing.Iterator"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.FlatTerm.empty": {
  "data": {
   "lineno": 140,
   "symbols_in_volume": [
    "classmethod",
    "cls"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.FlatTerm.is_syntactic": {
  "data": {
   "lineno": 130,
   "symbols_in_volume": [
    "isinstance",
    "issubclass",
    "matchpy.matching.syntactic.is_operation",
    "slot_cached_property"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.FlatTerm.merged": {
  "data": {
   "lineno": 145,
   "symbols_in_volume": [
    "classmethod",
    "cls",
    "cls._combined_wildcards_iter",
    "cls.empty",
    "sum"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.FrozenSet": {
  "data": {
   "shadows": "typing.FrozenSet"
  },
  "type": "import"
 },
 "matchpy.matching.syntactic.Generic": {
  "data": {
   "shadows": "typing.Generic"
  },
  "type": "import"
 },
 "matchpy.matching.syntactic.Iterator": {
  "data": {
   "shadows": "typing.Iterator"
  },
  "type": "import"
 },
 "matchpy.matching.syntactic.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "matchpy.matching.syntactic.OPERATION_END": {
  "data": {
   "lineno": 33
  },
  "type": "constant"
 },
 "matchpy.matching.syntactic.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "matchpy.matching.syntactic.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "matchpy.matching.syntactic.SequenceMatcher": {
  "data": {
   "lineno": 718
  },
  "type": "class"
 },
 "matchpy.matching.syntactic.SequenceMatcher.__init__": {
  "data": {
   "lineno": 738,
   "symbols_in_volume": [
    "matchpy.matching.syntactic.DiscriminationNet"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.SequenceMatcher._check_wildcard_and_get_name": {
  "data": {
   "lineno": 792,
   "symbols_in_volume": [
    "ValueError",
    "Wildcard",
    "isinstance",
    "staticmethod"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.SequenceMatcher.add": {
  "data": {
   "lineno": 750,
   "symbols_in_volume": [
    "TypeError",
    "ValueError",
    "int",
    "isinstance",
    "len",
    "list",
    "matchpy.matching.syntactic.FlatTerm",
    "op_iter",
    "op_len",
    "type"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.SequenceMatcher.as_graph": {
  "data": {
   "lineno": 870,
   "symbols_in_volume": [
    "graphviz.Digraph"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.SequenceMatcher.can_match": {
  "data": {
   "lineno": 799,
   "symbols_in_volume": [
    "ValueError",
    "bool",
    "classmethod",
    "cls._check_wildcard_and_get_name",
    "isinstance",
    "op_iter",
    "op_len"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.SequenceMatcher.match": {
  "data": {
   "lineno": 826,
   "symbols_in_volume": [
    "Substitution",
    "ValueError",
    "all",
    "constraint",
    "isinstance",
    "len",
    "list",
    "matchpy.matching.syntactic.FlatTerm",
    "matchpy.matching.syntactic.itertools",
    "op_iter",
    "op_len",
    "range",
    "tuple",
    "typing.Iterator",
    "typing.Tuple",
    "zip"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.Set": {
  "data": {
   "shadows": "typing.Set"
  },
  "type": "import"
 },
 "matchpy.matching.syntactic.T": {
  "data": {
   "lineno": 31
  },
  "type": "constant"
 },
 "matchpy.matching.syntactic.TermAtom": {
  "data": {
   "lineno": 55
  },
  "type": "constant"
 },
 "matchpy.matching.syntactic.TransitionLabel": {
  "data": {
   "lineno": 56
  },
  "type": "constant"
 },
 "matchpy.matching.syntactic.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "matchpy.matching.syntactic.Type": {
  "data": {
   "shadows": "typing.Type"
  },
  "type": "import"
 },
 "matchpy.matching.syntactic.TypeVar": {
  "data": {
   "shadows": "typing.TypeVar"
  },
  "type": "import"
 },
 "matchpy.matching.syntactic.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "matchpy.matching.syntactic._State": {
  "data": {
   "lineno": 214,
   "symbols_in_volume": [
    "matchpy.matching.syntactic.T",
    "matchpy.matching.syntactic.TransitionLabel",
    "typing.Dict",
    "typing.Generic"
   ]
  },
  "type": "class"
 },
 "matchpy.matching.syntactic._State.__init__": {
  "data": {
   "lineno": 223,
   "symbols_in_volume": [
    "matchpy.matching.syntactic._State",
    "super"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic._State.__repr__": {
  "data": {
   "lineno": 236,
   "symbols_in_volume": [
    "matchpy.matching.syntactic._term_str",
    "reprlib.recursive_repr"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic._State._target_str": {
  "data": {
   "lineno": 229,
   "symbols_in_volume": [
    "str"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic._StateQueueItem": {
  "data": {
   "lineno": 244,
   "symbols_in_volume": [
    "matchpy.matching.syntactic.T",
    "typing.Generic"
   ]
  },
  "type": "class"
 },
 "matchpy.matching.syntactic._StateQueueItem.__init__": {
  "data": {
   "lineno": 262,
   "symbols_in_volume": [
    "AttributeError",
    "matchpy.matching.syntactic.T",
    "matchpy.matching.syntactic._State"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic._StateQueueItem.__repr__": {
  "data": {
   "lineno": 301
  },
  "type": "function"
 },
 "matchpy.matching.syntactic._StateQueueItem.labels": {
  "data": {
   "lineno": 279,
   "symbols_in_volume": [
    "Wildcard",
    "matchpy.matching.syntactic.OPERATION_END",
    "matchpy.matching.syntactic.TransitionLabel",
    "property",
    "set",
    "typing.Set"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.__all__": {
  "data": {
   "lineno": 29
  },
  "type": "constant"
 },
 "matchpy.matching.syntactic._get_symbol_wildcard_label": {
  "data": {
   "lineno": 50,
   "symbols_in_volume": [
    "isinstance",
    "matchpy.matching.syntactic.is_symbol_wildcard",
    "next",
    "typing.Type"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic._term_str": {
  "data": {
   "lineno": 200,
   "symbols_in_volume": [
    "Wildcard",
    "isinstance",
    "matchpy.matching.syntactic.TermAtom",
    "matchpy.matching.syntactic.is_operation",
    "matchpy.matching.syntactic.is_symbol_wildcard",
    "str"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.is_operation": {
  "data": {
   "lineno": 40,
   "symbols_in_volume": [
    "bool",
    "isinstance",
    "issubclass",
    "type",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.is_symbol_wildcard": {
  "data": {
   "lineno": 45,
   "symbols_in_volume": [
    "bool",
    "isinstance",
    "issubclass",
    "type",
    "typing.Any"
   ]
  },
  "type": "function"
 },
 "matchpy.matching.syntactic.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "matchpy.matching.syntactic.recursive_repr": {
  "data": {
   "shadows": "reprlib.recursive_repr"
  },
  "type": "import"
 },
 "matchpy.utils": {
  "data": {
   "symbols_in_volume": [
    "int",
    "str",
    "typing.Any",
    "typing.NamedTuple",
    "typing.Optional",
    "typing.TypeVar"
   ]
  },
  "type": "module"
 },
 "matchpy.utils.Any": {
  "data": {
   "shadows": "typing.Any"
  },
  "type": "import"
 },
 "matchpy.utils.Callable": {
  "data": {
   "shadows": "typing.Callable"
  },
  "type": "import"
 },
 "matchpy.utils.Dict": {
  "data": {
   "shadows": "typing.Dict"
  },
  "type": "import"
 },
 "matchpy.utils.Iterator": {
  "data": {
   "shadows": "typing.Iterator"
  },
  "type": "import"
 },
 "matchpy.utils.LambdaNodeVisitor": {
  "data": {
   "lineno": 234,
   "symbols_in_volume": [
    "matchpy.utils.ast"
   ]
  },
  "type": "class"
 },
 "matchpy.utils.LambdaNodeVisitor.__init__": {
  "data": {
   "lineno": 235
  },
  "type": "function"
 },
 "matchpy.utils.LambdaNodeVisitor.generic_visit": {
  "data": {
   "lineno": 250,
   "symbols_in_volume": [
    "SyntaxError",
    "compile",
    "hasattr",
    "len",
    "matchpy.utils.ast",
    "super"
   ]
  },
  "type": "function"
 },
 "matchpy.utils.LambdaNodeVisitor.visit": {
  "data": {
   "lineno": 240,
   "symbols_in_volume": [
    "len",
    "matchpy.utils.ast",
    "super"
   ]
  },
  "type": "function"
 },
 "matchpy.utils.LambdaNodeVisitor.visit_Lambda": {
  "data": {
   "lineno": 246
  },
  "type": "function"
 },
 "matchpy.utils.LambdaType": {
  "data": {
   "shadows": "types.LambdaType"
  },
  "type": "import"
 },
 "matchpy.utils.List": {
  "data": {
   "shadows": "typing.List"
  },
  "type": "import"
 },
 "matchpy.utils.Multiset": {
  "data": {
   "shadows": "multiset.Multiset"
  },
  "type": "import"
 },
 "matchpy.utils.NamedTuple": {
  "data": {
   "shadows": "typing.NamedTuple"
  },
  "type": "import"
 },
 "matchpy.utils.Optional": {
  "data": {
   "shadows": "typing.Optional"
  },
  "type": "import"
 },
 "matchpy.utils.Sequence": {
  "data": {
   "shadows": "typing.Sequence"
  },
  "type": "import"
 },
 "matchpy.utils.T": {
  "data": {
   "lineno": 24
  },
  "type": "constant"
 },
 "matchpy.utils.Tuple": {
  "data": {
   "shadows": "typing.Tuple"
  },
  "type": "import"
 },
 "matchpy.utils.TypeVar": {
  "data": {
   "shadows": "typing.TypeVar"
  },
  "type": "import"
 },
 "matchpy.utils.Union": {
  "data": {
   "shadows": "typing.Union"
  },
  "type": "import"
 },
 "matchpy.utils.VariableWithCount": {
  "data": {
   "lineno": 25
  },
  "type": "constant"
 },
 "matchpy.utils.__all__": {
  "data": {
   "lineno": 18
  },
  "type": "constant"
 },
 "matchpy.utils._commutative_single_variable_partiton_iter": {
  "data": {
   "lineno": 154,
   "symbols_in_volume": [
    "len",
    "matchpy.utils.VariableWithCount",
    "multiset.Multiset",
    "str",
    "typing.Dict",
    "typing.Iterator"
   ]
  },
  "type": "function"
 },
 "matchpy.utils._linear_diop_solution_cache": {
  "data": {
   "lineno": 132
  },
  "type": "constant"
 },
 "matchpy.utils._make_variable_generator_factory": {
  "data": {
   "lineno": 135,
   "symbols_in_volume": [
    "matchpy.utils.VariableWithCount",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "matchpy.utils._make_variable_generator_factory._factory": {
  "data": {
   "lineno": 139,
   "symbols_in_volume": [
    "list",
    "matchpy.utils._linear_diop_solution_cache",
    "matchpy.utils.copy",
    "matchpy.utils.solve_linear_diop",
    "zip"
   ]
  },
  "type": "function"
 },
 "matchpy.utils.ast": {
  "data": {
   "shadows": "ast"
  },
  "type": "import"
 },
 "matchpy.utils.base_solution_linear": {
  "data": {
   "lineno": 367,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "matchpy.utils.extended_euclid",
    "matchpy.utils.math",
    "typing.Iterator",
    "typing.Tuple"
   ]
  },
  "type": "function"
 },
 "matchpy.utils.cached_property": {
  "data": {
   "lineno": 535,
   "symbols_in_volume": [
    "property"
   ]
  },
  "type": "class"
 },
 "matchpy.utils.cached_property.__get__": {
  "data": {
   "lineno": 592,
   "symbols_in_volume": [
    "AttributeError"
   ]
  },
  "type": "function"
 },
 "matchpy.utils.cached_property.__init__": {
  "data": {
   "lineno": 566,
   "symbols_in_volume": [
    "super"
   ]
  },
  "type": "function"
 },
 "matchpy.utils.cast": {
  "data": {
   "shadows": "typing.cast"
  },
  "type": "import"
 },
 "matchpy.utils.commutative_sequence_variable_partition_iter": {
  "data": {
   "lineno": 173,
   "symbols_in_volume": [
    "dict",
    "len",
    "matchpy.utils.VariableWithCount",
    "matchpy.utils._commutative_single_variable_partiton_iter",
    "matchpy.utils._make_variable_generator_factory",
    "matchpy.utils.generator_chain",
    "multiset.Multiset",
    "str",
    "typing.Dict",
    "typing.Iterator",
    "typing.List"
   ]
  },
  "type": "function"
 },
 "matchpy.utils.copy": {
  "data": {
   "shadows": "copy"
  },
  "type": "import"
 },
 "matchpy.utils.extended_euclid": {
  "data": {
   "lineno": 323,
   "symbols_in_volume": [
    "int",
    "typing.Tuple"
   ]
  },
  "type": "function"
 },
 "matchpy.utils.fixed_integer_vector_iter": {
  "data": {
   "lineno": 30,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "len",
    "max",
    "min",
    "range",
    "sum",
    "tuple",
    "typing.Iterator",
    "typing.Tuple"
   ]
  },
  "type": "function"
 },
 "matchpy.utils.generator_chain": {
  "data": {
   "lineno": 477,
   "symbols_in_volume": [
    "StopIteration",
    "len",
    "matchpy.utils.T",
    "next",
    "typing.Callable",
    "typing.Iterator"
   ]
  },
  "type": "function"
 },
 "matchpy.utils.get_short_lambda_source": {
  "data": {
   "lineno": 270,
   "symbols_in_volume": [
    "IOError",
    "SyntaxError",
    "TypeError",
    "len",
    "matchpy.utils.LambdaNodeVisitor",
    "matchpy.utils.ast",
    "matchpy.utils.inspect",
    "matchpy.utils.os",
    "matchpy.utils.tokenize",
    "range",
    "str",
    "types.LambdaType",
    "typing.Optional"
   ]
  },
  "type": "function"
 },
 "matchpy.utils.inspect": {
  "data": {
   "shadows": "inspect"
  },
  "type": "import"
 },
 "matchpy.utils.itertools": {
  "data": {
   "shadows": "itertools"
  },
  "type": "import"
 },
 "matchpy.utils.math": {
  "data": {
   "shadows": "math"
  },
  "type": "import"
 },
 "matchpy.utils.optional_iter": {
  "data": {
   "lineno": 127,
   "symbols_in_volume": [
    "matchpy.utils.itertools",
    "sum"
   ]
  },
  "type": "function"
 },
 "matchpy.utils.os": {
  "data": {
   "shadows": "os"
  },
  "type": "import"
 },
 "matchpy.utils.slot_cached_property": {
  "data": {
   "lineno": 609
  },
  "type": "function"
 },
 "matchpy.utils.slot_cached_property._wrapper": {
  "data": {
   "lineno": 649,
   "symbols_in_volume": [
    "matchpy.utils.cached_property"
   ]
  },
  "type": "function"
 },
 "matchpy.utils.solve_linear_diop": {
  "data": {
   "lineno": 431,
   "symbols_in_volume": [
    "int",
    "len",
    "matchpy.utils.base_solution_linear",
    "matchpy.utils.math",
    "tuple",
    "typing.Iterator",
    "typing.Tuple"
   ]
  },
  "type": "function"
 },
 "matchpy.utils.tokenize": {
  "data": {
   "shadows": "tokenize"
  },
  "type": "import"
 },
 "matchpy.utils.weak_composition_iter": {
  "data": {
   "lineno": 78,
   "symbols_in_volume": [
    "ValueError",
    "int",
    "matchpy.utils.itertools",
    "range",
    "tuple",
    "typing.Iterator",
    "typing.Tuple",
    "zip"
   ]
  },
  "type": "function"
 }
}