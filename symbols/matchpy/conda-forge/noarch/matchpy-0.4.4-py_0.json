{
 "matchpy": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "matchpy.__version__": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "matchpy.expressions": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "matchpy.expressions.constraints": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "matchpy.expressions.constraints.Constraint": {
  "lineno": 37,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.expressions.constraints.Constraint.__call__": {
  "lineno": 46,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.constraints.Constraint.__eq__": {
  "lineno": 62,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.constraints.Constraint.__hash__": {
  "lineno": 66,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.constraints.Constraint.variables": {
  "lineno": 70,
  "symbols_in_volume": [
   "typing.FrozenSet"
  ],
  "type": "function"
 },
 "matchpy.expressions.constraints.Constraint.with_renamed_vars": {
  "lineno": 80,
  "symbols_in_volume": [
   "typing.Dict"
  ],
  "type": "function"
 },
 "matchpy.expressions.constraints.CustomConstraint": {
  "lineno": 138,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.expressions.constraints.CustomConstraint.__call__": {
  "lineno": 187,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.constraints.CustomConstraint.__eq__": {
  "lineno": 204,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.constraints.CustomConstraint.__hash__": {
  "lineno": 210,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.constraints.CustomConstraint.__init__": {
  "lineno": 158,
  "symbols_in_volume": [
   "collections.OrderedDict",
   "inspect.Parameter.KEYWORD_ONLY",
   "inspect.Parameter.POSITIONAL_OR_KEYWORD",
   "inspect.Parameter.VAR_KEYWORD",
   "inspect.signature",
   "typing.Callable"
  ],
  "type": "function"
 },
 "matchpy.expressions.constraints.CustomConstraint.__repr__": {
  "lineno": 201,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.constraints.CustomConstraint.__str__": {
  "lineno": 198,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.constraints.CustomConstraint._get_name": {
  "lineno": 192,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.constraints.CustomConstraint.variables": {
  "lineno": 183,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.constraints.CustomConstraint.with_renamed_vars": {
  "lineno": 213,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.constraints.EqualVariablesConstraint": {
  "lineno": 96,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.expressions.constraints.EqualVariablesConstraint.__call__": {
  "lineno": 113,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.constraints.EqualVariablesConstraint.__eq__": {
  "lineno": 128,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.constraints.EqualVariablesConstraint.__hash__": {
  "lineno": 131,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.constraints.EqualVariablesConstraint.__init__": {
  "lineno": 102,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.constraints.EqualVariablesConstraint.__repr__": {
  "lineno": 125,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.constraints.EqualVariablesConstraint.__str__": {
  "lineno": 122,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.constraints.EqualVariablesConstraint.variables": {
  "lineno": 109,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.constraints.EqualVariablesConstraint.with_renamed_vars": {
  "lineno": 134,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions": {
  "lineno": null,
  "symbols_in_volume": [
   "multiset.Multiset",
   "typing.Callable",
   "typing.Iterator",
   "typing.NamedTuple",
   "typing.Optional",
   "typing.Tuple"
  ],
  "type": "module"
 },
 "matchpy.expressions.expressions.Arity": {
  "lineno": 219,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.expressions.expressions.AssociativeOperation": {
  "lineno": 597,
  "symbols_in_volume": [
   "abc.ABCMeta"
  ],
  "type": "class"
 },
 "matchpy.expressions.expressions.AssociativeOperation.__subclasshook__": {
  "lineno": 598,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Atom": {
  "lineno": 629,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.expressions.expressions.CommutativeOperation": {
  "lineno": 606,
  "symbols_in_volume": [
   "abc.ABCMeta"
  ],
  "type": "class"
 },
 "matchpy.expressions.expressions.CommutativeOperation.__subclasshook__": {
  "lineno": 607,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Expression": {
  "lineno": 74,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.expressions.expressions.Expression.__contains__": {
  "lineno": 208,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Expression.__getitem__": {
  "lineno": 178,
  "symbols_in_volume": [
   "typing.Tuple",
   "typing.Union"
  ],
  "type": "function"
 },
 "matchpy.expressions.expressions.Expression.__hash__": {
  "lineno": 211,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Expression.__init__": {
  "lineno": 86,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Expression._is_constant": {
  "lineno": 135,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Expression._is_syntactic": {
  "lineno": 144,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Expression._preorder_iter": {
  "lineno": 174,
  "symbols_in_volume": [
   "typing.Tuple"
  ],
  "type": "function"
 },
 "matchpy.expressions.expressions.Expression.collect_symbols": {
  "lineno": 117,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Expression.collect_variables": {
  "lineno": 96,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Expression.is_constant": {
  "lineno": 130,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Expression.is_syntactic": {
  "lineno": 139,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Expression.preorder_iter": {
  "lineno": 152,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Expression.symbols": {
  "lineno": 110,
  "symbols_in_volume": [
   "multiset.Multiset"
  ],
  "type": "function"
 },
 "matchpy.expressions.expressions.Expression.variables": {
  "lineno": 89,
  "symbols_in_volume": [
   "multiset.Multiset"
  ],
  "type": "function"
 },
 "matchpy.expressions.expressions.Expression.with_renamed_vars": {
  "lineno": 148,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.OneIdentityOperation": {
  "lineno": 620,
  "symbols_in_volume": [
   "abc.ABCMeta"
  ],
  "type": "class"
 },
 "matchpy.expressions.expressions.OneIdentityOperation.__subclasshook__": {
  "lineno": 621,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Operation": {
  "lineno": 315,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.expressions.expressions.Operation.__contains__": {
  "lineno": 539,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Operation.__copy__": {
  "lineno": 586,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Operation.__eq__": {
  "lineno": 499,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Operation.__getitem__": {
  "lineno": 513,
  "symbols_in_volume": [
   "typing.Tuple",
   "typing.Union"
  ],
  "type": "function"
 },
 "matchpy.expressions.expressions.Operation.__hash__": {
  "lineno": 577,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Operation.__init__": {
  "lineno": 360,
  "symbols_in_volume": [
   "typing.List"
  ],
  "type": "function"
 },
 "matchpy.expressions.expressions.Operation.__iter__": {
  "lineno": 507,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Operation.__len__": {
  "lineno": 510,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Operation.__lt__": {
  "lineno": 483,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Operation.__repr__": {
  "lineno": 418,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Operation.__str__": {
  "lineno": 408,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Operation._count_operands": {
  "lineno": 395,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Operation._is_constant": {
  "lineno": 552,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Operation._is_syntactic": {
  "lineno": 555,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Operation._preorder_iter": {
  "lineno": 571,
  "symbols_in_volume": [
   "typing.Tuple"
  ],
  "type": "function"
 },
 "matchpy.expressions.expressions.Operation.collect_symbols": {
  "lineno": 566,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Operation.collect_variables": {
  "lineno": 560,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Operation.new": {
  "lineno": 424,
  "symbols_in_volume": [
   "keyword.iskeyword",
   "typing.Type"
  ],
  "type": "function"
 },
 "matchpy.expressions.expressions.Operation.with_renamed_vars": {
  "lineno": 580,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Pattern": {
  "lineno": 926,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.expressions.expressions.Pattern.__eq__": {
  "lineno": 954,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Pattern.__init__": {
  "lineno": 933,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Pattern.__repr__": {
  "lineno": 949,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Pattern.__str__": {
  "lineno": 944,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Pattern.global_constraints": {
  "lineno": 973,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Pattern.is_syntactic": {
  "lineno": 959,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Pattern.local_constraints": {
  "lineno": 964,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Symbol": {
  "lineno": 635,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.expressions.expressions.Symbol.__copy__": {
  "lineno": 671,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Symbol.__eq__": {
  "lineno": 683,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Symbol.__hash__": {
  "lineno": 688,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Symbol.__init__": {
  "lineno": 645,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Symbol.__lt__": {
  "lineno": 674,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Symbol.__repr__": {
  "lineno": 660,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Symbol.__str__": {
  "lineno": 655,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Symbol.collect_symbols": {
  "lineno": 665,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Symbol.with_renamed_vars": {
  "lineno": 668,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.SymbolWildcard": {
  "lineno": 874,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.expressions.expressions.SymbolWildcard.__copy__": {
  "lineno": 922,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.SymbolWildcard.__eq__": {
  "lineno": 903,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.SymbolWildcard.__hash__": {
  "lineno": 909,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.SymbolWildcard.__init__": {
  "lineno": 883,
  "symbols_in_volume": [
   "typing.Type"
  ],
  "type": "function"
 },
 "matchpy.expressions.expressions.SymbolWildcard.__repr__": {
  "lineno": 912,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.SymbolWildcard.__str__": {
  "lineno": 917,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.SymbolWildcard.with_renamed_vars": {
  "lineno": 900,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Wildcard": {
  "lineno": 692,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.expressions.expressions.Wildcard.__copy__": {
  "lineno": 870,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Wildcard.__eq__": {
  "lineno": 858,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Wildcard.__hash__": {
  "lineno": 867,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Wildcard.__init__": {
  "lineno": 708,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Wildcard.__lt__": {
  "lineno": 843,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Wildcard.__repr__": {
  "lineno": 832,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Wildcard.__str__": {
  "lineno": 815,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Wildcard._is_constant": {
  "lineno": 730,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Wildcard._is_syntactic": {
  "lineno": 733,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Wildcard.dot": {
  "lineno": 741,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Wildcard.optional": {
  "lineno": 753,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Wildcard.plus": {
  "lineno": 802,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Wildcard.star": {
  "lineno": 789,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.Wildcard.symbol": {
  "lineno": 771,
  "symbols_in_volume": [
   "typing.Type"
  ],
  "type": "function"
 },
 "matchpy.expressions.expressions.Wildcard.with_renamed_vars": {
  "lineno": 736,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions._OperationMeta": {
  "lineno": 238,
  "symbols_in_volume": [
   "abc.ABCMeta"
  ],
  "type": "class"
 },
 "matchpy.expressions.expressions._OperationMeta.__call__": {
  "lineno": 273,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions._OperationMeta.__init__": {
  "lineno": 245,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions._OperationMeta.__repr__": {
  "lineno": 256,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions._OperationMeta.__str__": {
  "lineno": 270,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions._OperationMeta._simplify": {
  "lineno": 286,
  "symbols_in_volume": [
   "typing.List"
  ],
  "type": "function"
 },
 "matchpy.expressions.expressions.make_dot_variable": {
  "lineno": 983,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.make_plus_variable": {
  "lineno": 1028,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.make_star_variable": {
  "lineno": 1013,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.expressions.make_symbol_variable": {
  "lineno": 996,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.functions": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "matchpy.expressions.functions.contains_variables_from_set": {
  "lineno": 93,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.functions.create_operation_expression": {
  "lineno": 168,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.functions.get_head": {
  "lineno": 41,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.functions.get_variables": {
  "lineno": 102,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.functions.is_anonymous": {
  "lineno": 84,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.functions.is_constant": {
  "lineno": 14,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.functions.is_syntactic": {
  "lineno": 25,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.functions.match_head": {
  "lineno": 50,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.functions.op_iter": {
  "lineno": 180,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.functions.op_len": {
  "lineno": 189,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.functions.preorder_iter": {
  "lineno": 64,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.functions.preorder_iter_with_position": {
  "lineno": 72,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.functions.register_operation_factory": {
  "lineno": 160,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.functions.register_operation_iterator": {
  "lineno": 164,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.functions.rename_variables": {
  "lineno": 114,
  "symbols_in_volume": [
   "typing.Dict"
  ],
  "type": "function"
 },
 "matchpy.expressions.functions.simple_operation_factory": {
  "lineno": 141,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.substitution": {
  "lineno": null,
  "symbols_in_volume": [
   "multiset.Multiset",
   "typing.Tuple",
   "typing.Union"
  ],
  "type": "module"
 },
 "matchpy.expressions.substitution.Substitution": {
  "lineno": 26,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.expressions.substitution.Substitution.__copy__": {
  "lineno": 237,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.substitution.Substitution.__repr__": {
  "lineno": 234,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.substitution.Substitution.__str__": {
  "lineno": 229,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.substitution.Substitution._match_value_repr_str": {
  "lineno": 220,
  "symbols_in_volume": [
   "multiset.Multiset",
   "typing.List",
   "typing.Union"
  ],
  "type": "function"
 },
 "matchpy.expressions.substitution.Substitution.extract_substitution": {
  "lineno": 103,
  "symbols_in_volume": [
   "typing.cast"
  ],
  "type": "function"
 },
 "matchpy.expressions.substitution.Substitution.rename": {
  "lineno": 199,
  "symbols_in_volume": [
   "typing.Dict"
  ],
  "type": "function"
 },
 "matchpy.expressions.substitution.Substitution.try_add_variable": {
  "lineno": 32,
  "symbols_in_volume": [
   "multiset.Multiset"
  ],
  "type": "function"
 },
 "matchpy.expressions.substitution.Substitution.union": {
  "lineno": 166,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.expressions.substitution.Substitution.union_with_variable": {
  "lineno": 79,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.functions": {
  "lineno": null,
  "symbols_in_volume": [
   "typing.Callable",
   "typing.List",
   "typing.NamedTuple",
   "typing.Union"
  ],
  "type": "module"
 },
 "matchpy.functions._replace_all_post_order": {
  "lineno": 293,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.functions._substitute": {
  "lineno": 74,
  "symbols_in_volume": [
   "multiset.Multiset",
   "typing.Tuple"
  ],
  "type": "function"
 },
 "matchpy.functions.is_match": {
  "lineno": 315,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.functions.replace": {
  "lineno": 96,
  "symbols_in_volume": [
   "typing.Sequence"
  ],
  "type": "function"
 },
 "matchpy.functions.replace_all": {
  "lineno": 214,
  "symbols_in_volume": [
   "math.inf",
   "typing.Iterable",
   "typing.Sequence",
   "typing.Union"
  ],
  "type": "function"
 },
 "matchpy.functions.replace_all_post_order": {
  "lineno": 264,
  "symbols_in_volume": [
   "typing.Iterable",
   "typing.Sequence",
   "typing.Union"
  ],
  "type": "function"
 },
 "matchpy.functions.replace_many": {
  "lineno": 138,
  "symbols_in_volume": [
   "itertools.groupby",
   "multiset.Multiset",
   "typing.Sequence",
   "typing.Tuple"
  ],
  "type": "function"
 },
 "matchpy.functions.substitute": {
  "lineno": 30,
  "symbols_in_volume": [
   "typing.Union"
  ],
  "type": "function"
 },
 "matchpy.matching": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "matchpy.matching._common": {
  "lineno": null,
  "symbols_in_volume": [
   "typing.Callable",
   "typing.Iterator",
   "typing.NamedTuple",
   "typing.Optional",
   "typing.Sequence"
  ],
  "type": "module"
 },
 "matchpy.matching._common.CommutativePatternsParts": {
  "lineno": 17,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.matching._common.CommutativePatternsParts.__init__": {
  "lineno": 82,
  "symbols_in_volume": [
   "multiset.Multiset",
   "typing.Type",
   "typing.cast"
  ],
  "type": "function"
 },
 "matchpy.matching._common.CommutativePatternsParts.__str__": {
  "lineno": 151,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching._common.CommutativePatternsParts._update_var_info": {
  "lineno": 141,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching._common.check_one_identity": {
  "lineno": 165,
  "symbols_in_volume": [
   "multiset.Multiset"
  ],
  "type": "function"
 },
 "matchpy.matching.bipartite": {
  "lineno": null,
  "symbols_in_volume": [
   "graphviz.Digraph",
   "graphviz.Graph",
   "typing.Hashable",
   "typing.List",
   "typing.Set",
   "typing.Tuple",
   "typing.TypeVar",
   "typing.Union"
  ],
  "type": "module"
 },
 "matchpy.matching.bipartite.BipartiteGraph": {
  "lineno": 34,
  "symbols_in_volume": [
   "typing.Generic",
   "typing.MutableMapping",
   "typing.Tuple"
  ],
  "type": "class"
 },
 "matchpy.matching.bipartite.BipartiteGraph.__copy__": {
  "lineno": 99,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.__delitem__": {
  "lineno": 75,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.__eq__": {
  "lineno": 113,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.__getitem__": {
  "lineno": 70,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.__init__": {
  "lineno": 48,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.__iter__": {
  "lineno": 107,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.__len__": {
  "lineno": 110,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.__repr__": {
  "lineno": 188,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.__setitem__": {
  "lineno": 61,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.as_graph": {
  "lineno": 121,
  "symbols_in_volume": [
   "graphviz.Graph"
  ],
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.clear": {
  "lineno": 93,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.edges": {
  "lineno": 90,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.edges_with_labels": {
  "lineno": 86,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.find_matching": {
  "lineno": 144,
  "symbols_in_volume": [
   "hopcroftkarp.HopcroftKarp",
   "typing.Dict"
  ],
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.limited_to": {
  "lineno": 184,
  "symbols_in_volume": [
   "typing.Set"
  ],
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.without_edge": {
  "lineno": 180,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.bipartite.BipartiteGraph.without_nodes": {
  "lineno": 176,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.bipartite._DirectedMatchGraph": {
  "lineno": 192,
  "symbols_in_volume": [
   "typing.Dict",
   "typing.Generic"
  ],
  "type": "class"
 },
 "matchpy.matching.bipartite._DirectedMatchGraph.__init__": {
  "lineno": 193,
  "symbols_in_volume": [
   "typing.Dict"
  ],
  "type": "function"
 },
 "matchpy.matching.bipartite._DirectedMatchGraph._find_cycle": {
  "lineno": 240,
  "symbols_in_volume": [
   "typing.cast"
  ],
  "type": "function"
 },
 "matchpy.matching.bipartite._DirectedMatchGraph.as_graph": {
  "lineno": 203,
  "symbols_in_volume": [
   "graphviz.Digraph"
  ],
  "type": "function"
 },
 "matchpy.matching.bipartite._DirectedMatchGraph.find_cycle": {
  "lineno": 232,
  "symbols_in_volume": [
   "typing.cast"
  ],
  "type": "function"
 },
 "matchpy.matching.bipartite._enum_maximum_matchings_iter": {
  "lineno": 269,
  "symbols_in_volume": [
   "typing.Dict",
   "typing.Iterator",
   "typing.cast"
  ],
  "type": "function"
 },
 "matchpy.matching.bipartite.enum_maximum_matchings_iter": {
  "lineno": 261,
  "symbols_in_volume": [
   "typing.Dict",
   "typing.Iterator"
  ],
  "type": "function"
 },
 "matchpy.matching.code_generation": {
  "lineno": null,
  "symbols_in_volume": [
   "re.compile"
  ],
  "type": "module"
 },
 "matchpy.matching.code_generation.CodeGenerator": {
  "lineno": 19,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.matching.code_generation.CodeGenerator.__init__": {
  "lineno": 20,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator._collapse_ifs": {
  "lineno": 498,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator._collapse_ifs.sub_cb": {
  "lineno": 500,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.add_line": {
  "lineno": 41,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.clean_code": {
  "lineno": 495,
  "symbols_in_volume": [
   "re.sub"
  ],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.commutative_patterns": {
  "lineno": 167,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.commutative_var_entry": {
  "lineno": 161,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.constraint_repr": {
  "lineno": 481,
  "symbols_in_volume": [
   "re.escape",
   "re.sub"
  ],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.create_operation": {
  "lineno": 415,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.dedent": {
  "lineno": 37,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.enter_eps": {
  "lineno": 235,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.enter_fixed_wildcard": {
  "lineno": 288,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.enter_global_constraint": {
  "lineno": 472,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.enter_operation": {
  "lineno": 241,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.enter_operation_end": {
  "lineno": 362,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.enter_optional_wildcard": {
  "lineno": 339,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.enter_sequence_wildcard": {
  "lineno": 380,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.enter_subst": {
  "lineno": 313,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.enter_symbol": {
  "lineno": 348,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.enter_symbol_wildcard": {
  "lineno": 271,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.enter_variable_assignment": {
  "lineno": 299,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.exit_eps": {
  "lineno": 238,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.exit_fixed_wildcard": {
  "lineno": 295,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.exit_global_constraint": {
  "lineno": 492,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.exit_operation": {
  "lineno": 263,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.exit_operation_end": {
  "lineno": 372,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.exit_optional_wildcard": {
  "lineno": 345,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.exit_sequence_wildcard": {
  "lineno": 418,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.exit_subst": {
  "lineno": 331,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.exit_symbol": {
  "lineno": 358,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.exit_symbol_wildcard": {
  "lineno": 284,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.exit_variable_assignment": {
  "lineno": 335,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.expr": {
  "lineno": 328,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.final_label": {
  "lineno": 64,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.generate_code": {
  "lineno": 48,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.generate_constraints": {
  "lineno": 439,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.generate_state_code": {
  "lineno": 67,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.generate_transition_code": {
  "lineno": 176,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.get_args": {
  "lineno": 223,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.get_var_name": {
  "lineno": 44,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.indent": {
  "lineno": 34,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.operation_symbol": {
  "lineno": 258,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.optional_expr": {
  "lineno": 342,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.push_subjects": {
  "lineno": 226,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.push_subst": {
  "lineno": 230,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.symbol_repr": {
  "lineno": 355,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.symbol_type": {
  "lineno": 281,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation.CodeGenerator.yield_final_substitution": {
  "lineno": 428,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation2": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "matchpy.matching.code_generation2.ActionNode": {
  "lineno": 16,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.matching.code_generation2.ArgCountConditionNode": {
  "lineno": 24,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.matching.code_generation2.ConditionNode": {
  "lineno": 12,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.matching.code_generation2.EqualityConditionNode": {
  "lineno": 28,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.matching.code_generation2.Node": {
  "lineno": 6,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.matching.code_generation2.Node.__init__": {
  "lineno": 7,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.code_generation2.SetVariableNode": {
  "lineno": 32,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.matching.code_generation2.TypeConditionNode": {
  "lineno": 20,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.matching.code_generation2.generate_nodes": {
  "lineno": 36,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one": {
  "lineno": null,
  "symbols_in_volume": [
   "graphviz.Digraph",
   "graphviz.Graph",
   "multiset.Multiset",
   "typing.Dict",
   "typing.NamedTuple",
   "typing.Optional",
   "typing.Set",
   "typing.Tuple",
   "typing.Type",
   "typing.Union"
  ],
  "type": "module"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher": {
  "lineno": 847,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher.__init__": {
  "lineno": 852,
  "symbols_in_volume": [
   "typing.Optional"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher._build_bipartite": {
  "lineno": 1021,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher._extract_sequence_wildcards": {
  "lineno": 928,
  "symbols_in_volume": [
   "multiset.Multiset",
   "typing.Dict",
   "typing.Iterable",
   "typing.Tuple"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher._is_canonical_matching": {
  "lineno": 1047,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher._is_sequence_wildcard": {
  "lineno": 972,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher._match_sequence_variables": {
  "lineno": 999,
  "symbols_in_volume": [
   "multiset.Multiset",
   "typing.Iterator",
   "typing.Sequence"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher._match_with_bipartite": {
  "lineno": 979,
  "symbols_in_volume": [
   "itertools.product",
   "multiset.Multiset",
   "typing.Iterator",
   "typing.Tuple"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher.add_pattern": {
  "lineno": 862,
  "symbols_in_volume": [
   "typing.Iterable"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher.add_subject": {
  "lineno": 882,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher.bipartite_as_graph": {
  "lineno": 1058,
  "symbols_in_volume": [
   "graphviz.Graph"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher.concrete_bipartite_as_graph": {
  "lineno": 1083,
  "symbols_in_volume": [
   "graphviz.Graph"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher.get_match_iter": {
  "lineno": 874,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one.CommutativeMatcher.match": {
  "lineno": 893,
  "symbols_in_volume": [
   "multiset.Multiset",
   "typing.Iterator",
   "typing.Sequence",
   "typing.Tuple"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher": {
  "lineno": 322,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher.__init__": {
  "lineno": 327,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._add_constraint": {
  "lineno": 420,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._as_graph": {
  "lineno": 644,
  "symbols_in_volume": [
   "graphviz.Digraph",
   "html.escape",
   "typing.List",
   "typing.Optional"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._collect_variable_renaming": {
  "lineno": 531,
  "symbols_in_volume": [
   "typing.Dict",
   "typing.List"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._colored_constraint": {
  "lineno": 626,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._colored_pattern": {
  "lineno": 621,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._colored_variable": {
  "lineno": 631,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._create_expression_transition": {
  "lineno": 457,
  "symbols_in_volume": [
   "typing.Optional"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._create_simple_transition": {
  "lineno": 494,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._create_state": {
  "lineno": 525,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._format_constraint_set": {
  "lineno": 640,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._format_pattern_set": {
  "lineno": 636,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._get_label_and_head": {
  "lineno": 504,
  "symbols_in_volume": [
   "typing.Tuple"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._get_name_for_position": {
  "lineno": 560,
  "symbols_in_volume": [
   "typing.Container",
   "typing.List"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._internal_add": {
  "lineno": 369,
  "symbols_in_volume": [
   "collections.deque"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._make_graph_edges": {
  "lineno": 720,
  "symbols_in_volume": [
   "graphviz.Digraph",
   "html.escape"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._make_graph_nodes": {
  "lineno": 668,
  "symbols_in_volume": [
   "graphviz.Digraph",
   "itertools.chain.from_iterable",
   "typing.List",
   "typing.Optional"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher._process_pattern_stack": {
  "lineno": 394,
  "symbols_in_volume": [
   "collections.deque"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher.add": {
  "lineno": 344,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher.as_graph": {
  "lineno": 570,
  "symbols_in_volume": [
   "graphviz.Digraph"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher.is_match": {
  "lineno": 445,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneMatcher.match": {
  "lineno": 434,
  "symbols_in_volume": [
   "typing.Iterator",
   "typing.Tuple"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneReplacer": {
  "lineno": 744,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.matching.many_to_one.ManyToOneReplacer.__init__": {
  "lineno": 747,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneReplacer._replace_post_order": {
  "lineno": 825,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneReplacer.add": {
  "lineno": 766,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneReplacer.replace": {
  "lineno": 775,
  "symbols_in_volume": [
   "math.inf",
   "typing.Sequence",
   "typing.Union"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one.ManyToOneReplacer.replace_post_order": {
  "lineno": 806,
  "symbols_in_volume": [
   "typing.Sequence",
   "typing.Union"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one.SecondaryAutomaton": {
  "lineno": 1112,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.matching.many_to_one.SecondaryAutomaton.__init__": {
  "lineno": 1114,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one.SecondaryAutomaton._build": {
  "lineno": 1121,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one.SecondaryAutomaton.as_graph": {
  "lineno": 1155,
  "symbols_in_volume": [
   "graphviz.Digraph",
   "itertools.groupby",
   "operator.itemgetter"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one.SecondaryAutomaton.match": {
  "lineno": 1118,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one._MatchIter": {
  "lineno": 89,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.matching.many_to_one._MatchIter.__init__": {
  "lineno": 90,
  "symbols_in_volume": [
   "collections.deque"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one._MatchIter.__iter__": {
  "lineno": 98,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one._MatchIter._check_constraints": {
  "lineno": 222,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one._MatchIter._check_transition": {
  "lineno": 178,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one._MatchIter._get_heads": {
  "lineno": 241,
  "symbols_in_volume": [
   "typing.Iterator"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one._MatchIter._internal_iter": {
  "lineno": 125,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one._MatchIter._match": {
  "lineno": 138,
  "symbols_in_volume": [
   "typing.Iterator"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one._MatchIter._match_commutative_operation": {
  "lineno": 275,
  "symbols_in_volume": [
   "typing.Iterator"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one._MatchIter._match_regular_operation": {
  "lineno": 304,
  "symbols_in_volume": [
   "collections.deque",
   "typing.Iterator"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one._MatchIter._match_sequence_variable": {
  "lineno": 250,
  "symbols_in_volume": [
   "typing.Iterator"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one._MatchIter._match_transition": {
  "lineno": 150,
  "symbols_in_volume": [
   "typing.Iterator"
  ],
  "type": "function"
 },
 "matchpy.matching.many_to_one._MatchIter.any": {
  "lineno": 114,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.many_to_one._MatchIter.grouped": {
  "lineno": 102,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.one_to_one": {
  "lineno": null,
  "symbols_in_volume": [],
  "type": "module"
 },
 "matchpy.matching.one_to_one._build_full_partition": {
  "lineno": 179,
  "symbols_in_volume": [
   "typing.List",
   "typing.Sequence"
  ],
  "type": "function"
 },
 "matchpy.matching.one_to_one._check_constraints": {
  "lineno": 132,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.one_to_one._count_seq_vars": {
  "lineno": 158,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.one_to_one._fixed_expr_factory": {
  "lineno": 351,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.one_to_one._fixed_expr_factory.factory": {
  "lineno": 352,
  "symbols_in_volume": [
   "multiset.Multiset"
  ],
  "type": "function"
 },
 "matchpy.matching.one_to_one._fixed_var_iter_factory": {
  "lineno": 362,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.one_to_one._fixed_var_iter_factory.factory": {
  "lineno": 363,
  "symbols_in_volume": [
   "multiset.Multiset"
  ],
  "type": "function"
 },
 "matchpy.matching.one_to_one._match": {
  "lineno": 82,
  "symbols_in_volume": [
   "typing.Iterator",
   "typing.List",
   "typing.Set",
   "typing.cast"
  ],
  "type": "function"
 },
 "matchpy.matching.one_to_one._match_commutative_operation": {
  "lineno": 257,
  "symbols_in_volume": [
   "multiset.Multiset",
   "typing.Iterable",
   "typing.Iterator",
   "typing.Sequence",
   "typing.cast"
  ],
  "type": "function"
 },
 "matchpy.matching.one_to_one._match_factory": {
  "lineno": 151,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.one_to_one._match_factory.factory": {
  "lineno": 152,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.one_to_one._match_one_identity": {
  "lineno": 235,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.one_to_one._match_operation": {
  "lineno": 245,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.one_to_one._non_commutative_match": {
  "lineno": 219,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.one_to_one._variables_with_counts": {
  "lineno": 344,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.one_to_one.match": {
  "lineno": 23,
  "symbols_in_volume": [
   "typing.Iterator"
  ],
  "type": "function"
 },
 "matchpy.matching.one_to_one.match_anywhere": {
  "lineno": 53,
  "symbols_in_volume": [
   "typing.Iterator",
   "typing.Tuple"
  ],
  "type": "function"
 },
 "matchpy.matching.syntactic": {
  "lineno": null,
  "symbols_in_volume": [
   "graphviz.Digraph",
   "typing.Type",
   "typing.TypeVar",
   "typing.Union"
  ],
  "type": "module"
 },
 "matchpy.matching.syntactic.DiscriminationNet": {
  "lineno": 307,
  "symbols_in_volume": [
   "typing.Generic"
  ],
  "type": "class"
 },
 "matchpy.matching.syntactic.DiscriminationNet.__init__": {
  "lineno": 318,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet._convert_nfa_to_dfa": {
  "lineno": 472,
  "symbols_in_volume": [
   "typing.Dict"
  ],
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet._create_child_state": {
  "lineno": 358,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet._create_state": {
  "lineno": 463,
  "symbols_in_volume": [
   "typing.Dict",
   "typing.Set"
  ],
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet._epsilon_closure": {
  "lineno": 495,
  "symbols_in_volume": [
   "typing.Dict",
   "typing.FrozenSet",
   "typing.Set"
  ],
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet._generate_net": {
  "lineno": 384,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet._generate_state_chain": {
  "lineno": 378,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet._generate_syntactic_net": {
  "lineno": 364,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet._get_next_state": {
  "lineno": 536,
  "symbols_in_volume": [
   "typing.Tuple"
  ],
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet._match": {
  "lineno": 612,
  "symbols_in_volume": [
   "typing.List",
   "typing.Tuple",
   "typing.Union"
  ],
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet._product_net": {
  "lineno": 555,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet._target_set": {
  "lineno": 516,
  "symbols_in_volume": [
   "typing.Dict",
   "typing.FrozenSet",
   "typing.Set"
  ],
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet.add": {
  "lineno": 329,
  "symbols_in_volume": [
   "typing.Union"
  ],
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet.as_graph": {
  "lineno": 682,
  "symbols_in_volume": [
   "graphviz.Digraph"
  ],
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet.is_match": {
  "lineno": 666,
  "symbols_in_volume": [
   "typing.Union"
  ],
  "type": "function"
 },
 "matchpy.matching.syntactic.DiscriminationNet.match": {
  "lineno": 645,
  "symbols_in_volume": [
   "typing.Iterator",
   "typing.Tuple",
   "typing.Union"
  ],
  "type": "function"
 },
 "matchpy.matching.syntactic.FlatTerm": {
  "lineno": 59,
  "symbols_in_volume": [
   "typing.Sequence"
  ],
  "type": "class"
 },
 "matchpy.matching.syntactic.FlatTerm.__add__": {
  "lineno": 118,
  "symbols_in_volume": [
   "typing.Sequence"
  ],
  "type": "function"
 },
 "matchpy.matching.syntactic.FlatTerm.__contains__": {
  "lineno": 112,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.syntactic.FlatTerm.__eq__": {
  "lineno": 125,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.syntactic.FlatTerm.__getitem__": {
  "lineno": 106,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.syntactic.FlatTerm.__init__": {
  "lineno": 101,
  "symbols_in_volume": [
   "typing.Sequence",
   "typing.Union"
  ],
  "type": "function"
 },
 "matchpy.matching.syntactic.FlatTerm.__iter__": {
  "lineno": 115,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.syntactic.FlatTerm.__len__": {
  "lineno": 109,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.syntactic.FlatTerm.__repr__": {
  "lineno": 196,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.syntactic.FlatTerm.__str__": {
  "lineno": 193,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.syntactic.FlatTerm._combined_wildcards_iter": {
  "lineno": 173,
  "symbols_in_volume": [
   "typing.Iterator"
  ],
  "type": "function"
 },
 "matchpy.matching.syntactic.FlatTerm._flatterm_iter": {
  "lineno": 158,
  "symbols_in_volume": [
   "typing.Iterator"
  ],
  "type": "function"
 },
 "matchpy.matching.syntactic.FlatTerm.empty": {
  "lineno": 140,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.syntactic.FlatTerm.is_syntactic": {
  "lineno": 130,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.syntactic.FlatTerm.merged": {
  "lineno": 145,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.syntactic.SequenceMatcher": {
  "lineno": 718,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.matching.syntactic.SequenceMatcher.__init__": {
  "lineno": 738,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.syntactic.SequenceMatcher._check_wildcard_and_get_name": {
  "lineno": 792,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.syntactic.SequenceMatcher.add": {
  "lineno": 750,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.syntactic.SequenceMatcher.as_graph": {
  "lineno": 870,
  "symbols_in_volume": [
   "graphviz.Digraph"
  ],
  "type": "function"
 },
 "matchpy.matching.syntactic.SequenceMatcher.can_match": {
  "lineno": 799,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.syntactic.SequenceMatcher.match": {
  "lineno": 826,
  "symbols_in_volume": [
   "itertools.starmap",
   "typing.Iterator",
   "typing.Tuple"
  ],
  "type": "function"
 },
 "matchpy.matching.syntactic._State": {
  "lineno": 214,
  "symbols_in_volume": [
   "typing.Dict",
   "typing.Generic"
  ],
  "type": "class"
 },
 "matchpy.matching.syntactic._State.__init__": {
  "lineno": 223,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.syntactic._State.__repr__": {
  "lineno": 236,
  "symbols_in_volume": [
   "reprlib.recursive_repr"
  ],
  "type": "function"
 },
 "matchpy.matching.syntactic._State._target_str": {
  "lineno": 229,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.syntactic._StateQueueItem": {
  "lineno": 244,
  "symbols_in_volume": [
   "typing.Generic"
  ],
  "type": "class"
 },
 "matchpy.matching.syntactic._StateQueueItem.__init__": {
  "lineno": 262,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.syntactic._StateQueueItem.__repr__": {
  "lineno": 301,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.syntactic._StateQueueItem.labels": {
  "lineno": 279,
  "symbols_in_volume": [
   "typing.Set"
  ],
  "type": "function"
 },
 "matchpy.matching.syntactic._get_symbol_wildcard_label": {
  "lineno": 50,
  "symbols_in_volume": [
   "typing.Type"
  ],
  "type": "function"
 },
 "matchpy.matching.syntactic._term_str": {
  "lineno": 200,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.matching.syntactic.is_operation": {
  "lineno": 40,
  "symbols_in_volume": [
   "typing.Any"
  ],
  "type": "function"
 },
 "matchpy.matching.syntactic.is_symbol_wildcard": {
  "lineno": 45,
  "symbols_in_volume": [
   "typing.Any"
  ],
  "type": "function"
 },
 "matchpy.utils": {
  "lineno": null,
  "symbols_in_volume": [
   "typing.Any",
   "typing.NamedTuple",
   "typing.Optional",
   "typing.TypeVar"
  ],
  "type": "module"
 },
 "matchpy.utils.LambdaNodeVisitor": {
  "lineno": 234,
  "symbols_in_volume": [
   "ast.NodeVisitor"
  ],
  "type": "class"
 },
 "matchpy.utils.LambdaNodeVisitor.__init__": {
  "lineno": 235,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.utils.LambdaNodeVisitor.generic_visit": {
  "lineno": 250,
  "symbols_in_volume": [
   "ast.Expression"
  ],
  "type": "function"
 },
 "matchpy.utils.LambdaNodeVisitor.visit": {
  "lineno": 240,
  "symbols_in_volume": [
   "ast.Pass"
  ],
  "type": "function"
 },
 "matchpy.utils.LambdaNodeVisitor.visit_Lambda": {
  "lineno": 246,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.utils._commutative_single_variable_partiton_iter": {
  "lineno": 154,
  "symbols_in_volume": [
   "multiset.Multiset",
   "typing.Dict",
   "typing.Iterator"
  ],
  "type": "function"
 },
 "matchpy.utils._make_variable_generator_factory": {
  "lineno": 135,
  "symbols_in_volume": [
   "typing.List"
  ],
  "type": "function"
 },
 "matchpy.utils._make_variable_generator_factory._factory": {
  "lineno": 139,
  "symbols_in_volume": [
   "copy.copy"
  ],
  "type": "function"
 },
 "matchpy.utils.base_solution_linear": {
  "lineno": 367,
  "symbols_in_volume": [
   "math.gcd",
   "typing.Iterator",
   "typing.Tuple"
  ],
  "type": "function"
 },
 "matchpy.utils.cached_property": {
  "lineno": 535,
  "symbols_in_volume": [],
  "type": "class"
 },
 "matchpy.utils.cached_property.__get__": {
  "lineno": 592,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.utils.cached_property.__init__": {
  "lineno": 566,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.utils.commutative_sequence_variable_partition_iter": {
  "lineno": 173,
  "symbols_in_volume": [
   "multiset.Multiset",
   "typing.Dict",
   "typing.Iterator",
   "typing.List"
  ],
  "type": "function"
 },
 "matchpy.utils.extended_euclid": {
  "lineno": 323,
  "symbols_in_volume": [
   "typing.Tuple"
  ],
  "type": "function"
 },
 "matchpy.utils.fixed_integer_vector_iter": {
  "lineno": 30,
  "symbols_in_volume": [
   "typing.Iterator",
   "typing.Tuple"
  ],
  "type": "function"
 },
 "matchpy.utils.generator_chain": {
  "lineno": 477,
  "symbols_in_volume": [
   "typing.Callable",
   "typing.Iterator"
  ],
  "type": "function"
 },
 "matchpy.utils.get_short_lambda_source": {
  "lineno": 270,
  "symbols_in_volume": [
   "ast.parse",
   "inspect.findsource",
   "inspect.getsourcelines",
   "os.linesep.join",
   "tokenize.TokenError",
   "types.LambdaType",
   "typing.Optional"
  ],
  "type": "function"
 },
 "matchpy.utils.optional_iter": {
  "lineno": 127,
  "symbols_in_volume": [
   "itertools.product"
  ],
  "type": "function"
 },
 "matchpy.utils.slot_cached_property": {
  "lineno": 609,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.utils.slot_cached_property._wrapper": {
  "lineno": 649,
  "symbols_in_volume": [],
  "type": "function"
 },
 "matchpy.utils.solve_linear_diop": {
  "lineno": 431,
  "symbols_in_volume": [
   "math.gcd",
   "typing.Iterator",
   "typing.Tuple"
  ],
  "type": "function"
 },
 "matchpy.utils.weak_composition_iter": {
  "lineno": 78,
  "symbols_in_volume": [
   "itertools.combinations",
   "typing.Iterator",
   "typing.Tuple"
  ],
  "type": "function"
 }
}